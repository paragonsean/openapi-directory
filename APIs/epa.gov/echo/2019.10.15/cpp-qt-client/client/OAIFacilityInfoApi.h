/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - All Data
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.  ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    ECHO Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated as Clean Air Act (CAA) stationary sources, Clean Water Act (CWA) dischargers, Resource Conservation and Recovery Act (RCRA) hazardous waste generators/handlers, and Safe Drinking Water Act (SDWA) public water systems.  Data of interest from other EPA sources, such as the Toxics Release Inventory, is also supplied for context.   \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.     The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFacilityInfoApi_H
#define OAI_OAIFacilityInfoApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAI_echo_rest_services_get_facilities_get_200_response.h"
#include "OAI_echo_rest_services_get_facility_info_get_200_response.h"
#include "OAI_echo_rest_services_get_geojson_get_200_response.h"
#include "OAI_echo_rest_services_get_map_get_200_response.h"
#include "OAI_echo_rest_services_get_qid_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFacilityInfoApi : public QObject {
    Q_OBJECT

public:
    OAIFacilityInfoApi(const int timeOut = 0);
    ~OAIFacilityInfoApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void echoRestServicesGetDownloadGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void echoRestServicesGetDownloadPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_ff QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_feac QString [optional]
    * @param[in]  p_fea_5yr QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_iea_5yr QString [optional]
    * @param[in]  p_cs double [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_naa QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_ocr QString [optional]
    * @param[in]  p_oct QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_istatute QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_neiu QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  maplist QString [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void echoRestServicesGetFacilitiesGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_feac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea_5yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea_5yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_cs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ocr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_istatute = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_neiu = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maplist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_ff QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_feac QString [optional]
    * @param[in]  p_fea_5yr QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_iea_5yr QString [optional]
    * @param[in]  p_cs double [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_naa QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_ocr QString [optional]
    * @param[in]  p_oct QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_istatute QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_neiu QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  maplist QString [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void echoRestServicesGetFacilitiesPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_feac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea_5yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea_5yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_cs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ocr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_istatute = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_neiu = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maplist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  xmin double [optional]
    * @param[in]  ymin double [optional]
    * @param[in]  xmax double [optional]
    * @param[in]  ymax double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_ff QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_feac QString [optional]
    * @param[in]  p_feac_5yr QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_iea_5yr QString [optional]
    * @param[in]  p_cs double [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_naa QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_ocr QString [optional]
    * @param[in]  p_oct QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_istatute QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_neiu QString [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void echoRestServicesGetFacilityInfoGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &xmin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &xmax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_feac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_feac_5yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea_5yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_cs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ocr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_istatute = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_neiu = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  xmin double [optional]
    * @param[in]  ymin double [optional]
    * @param[in]  xmax double [optional]
    * @param[in]  ymax double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_ff QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_feac QString [optional]
    * @param[in]  p_feac_5yr QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_iea_5yr QString [optional]
    * @param[in]  p_cs double [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_naa QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_ocr QString [optional]
    * @param[in]  p_oct QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_istatute QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_neiu QString [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void echoRestServicesGetFacilityInfoPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &xmin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &xmax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_feac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_feac_5yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea_5yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_cs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ocr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_istatute = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_neiu = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void echoRestServicesGetGeojsonGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void echoRestServicesGetGeojsonPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  p_qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void echoRestServicesGetInfoClustersGet(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  p_qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void echoRestServicesGetInfoClustersPost(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  c1_lat double [optional]
    * @param[in]  c1_long double [optional]
    * @param[in]  c2_lat double [optional]
    * @param[in]  c2_long double [optional]
    */
    virtual void echoRestServicesGetMapGet(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &c1_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c1_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_long = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  c1_lat double [optional]
    * @param[in]  c1_long double [optional]
    * @param[in]  c2_lat double [optional]
    * @param[in]  c2_long double [optional]
    */
    virtual void echoRestServicesGetMapPost(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &c1_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c1_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_long = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void echoRestServicesGetQidGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void echoRestServicesGetQidPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void echoRestServicesGetDownloadGetCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetDownloadPostCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetFacilitiesGetCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetFacilitiesPostCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetFacilityInfoGetCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetFacilityInfoPostCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetGeojsonGetCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetGeojsonPostCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetInfoClustersGetCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetInfoClustersPostCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetMapGetCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetMapPostCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetQidGetCallback(OAIHttpRequestWorker *worker);
    void echoRestServicesGetQidPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void echoRestServicesGetDownloadGetSignal(OAIHttpFileElement summary);
    void echoRestServicesGetDownloadPostSignal(OAIHttpFileElement summary);
    void echoRestServicesGetFacilitiesGetSignal(OAI_echo_rest_services_get_facilities_get_200_response summary);
    void echoRestServicesGetFacilitiesPostSignal(OAI_echo_rest_services_get_facilities_get_200_response summary);
    void echoRestServicesGetFacilityInfoGetSignal(OAI_echo_rest_services_get_facility_info_get_200_response summary);
    void echoRestServicesGetFacilityInfoPostSignal(OAI_echo_rest_services_get_facility_info_get_200_response summary);
    void echoRestServicesGetGeojsonGetSignal(OAI_echo_rest_services_get_geojson_get_200_response summary);
    void echoRestServicesGetGeojsonPostSignal(OAI_echo_rest_services_get_geojson_get_200_response summary);
    void echoRestServicesGetInfoClustersGetSignal(OAIHttpFileElement summary);
    void echoRestServicesGetInfoClustersPostSignal(OAIHttpFileElement summary);
    void echoRestServicesGetMapGetSignal(OAI_echo_rest_services_get_map_get_200_response summary);
    void echoRestServicesGetMapPostSignal(OAI_echo_rest_services_get_map_get_200_response summary);
    void echoRestServicesGetQidGetSignal(OAI_echo_rest_services_get_qid_get_200_response summary);
    void echoRestServicesGetQidPostSignal(OAI_echo_rest_services_get_qid_get_200_response summary);


    void echoRestServicesGetDownloadGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void echoRestServicesGetDownloadPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void echoRestServicesGetFacilitiesGetSignalFull(OAIHttpRequestWorker *worker, OAI_echo_rest_services_get_facilities_get_200_response summary);
    void echoRestServicesGetFacilitiesPostSignalFull(OAIHttpRequestWorker *worker, OAI_echo_rest_services_get_facilities_get_200_response summary);
    void echoRestServicesGetFacilityInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_echo_rest_services_get_facility_info_get_200_response summary);
    void echoRestServicesGetFacilityInfoPostSignalFull(OAIHttpRequestWorker *worker, OAI_echo_rest_services_get_facility_info_get_200_response summary);
    void echoRestServicesGetGeojsonGetSignalFull(OAIHttpRequestWorker *worker, OAI_echo_rest_services_get_geojson_get_200_response summary);
    void echoRestServicesGetGeojsonPostSignalFull(OAIHttpRequestWorker *worker, OAI_echo_rest_services_get_geojson_get_200_response summary);
    void echoRestServicesGetInfoClustersGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void echoRestServicesGetInfoClustersPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void echoRestServicesGetMapGetSignalFull(OAIHttpRequestWorker *worker, OAI_echo_rest_services_get_map_get_200_response summary);
    void echoRestServicesGetMapPostSignalFull(OAIHttpRequestWorker *worker, OAI_echo_rest_services_get_map_get_200_response summary);
    void echoRestServicesGetQidGetSignalFull(OAIHttpRequestWorker *worker, OAI_echo_rest_services_get_qid_get_200_response summary);
    void echoRestServicesGetQidPostSignalFull(OAIHttpRequestWorker *worker, OAI_echo_rest_services_get_qid_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use echoRestServicesGetDownloadGetSignalError() instead")
    void echoRestServicesGetDownloadGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetDownloadGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetDownloadPostSignalError() instead")
    void echoRestServicesGetDownloadPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetDownloadPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetFacilitiesGetSignalError() instead")
    void echoRestServicesGetFacilitiesGetSignalE(OAI_echo_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetFacilitiesGetSignalError(OAI_echo_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetFacilitiesPostSignalError() instead")
    void echoRestServicesGetFacilitiesPostSignalE(OAI_echo_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetFacilitiesPostSignalError(OAI_echo_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetFacilityInfoGetSignalError() instead")
    void echoRestServicesGetFacilityInfoGetSignalE(OAI_echo_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetFacilityInfoGetSignalError(OAI_echo_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetFacilityInfoPostSignalError() instead")
    void echoRestServicesGetFacilityInfoPostSignalE(OAI_echo_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetFacilityInfoPostSignalError(OAI_echo_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetGeojsonGetSignalError() instead")
    void echoRestServicesGetGeojsonGetSignalE(OAI_echo_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetGeojsonGetSignalError(OAI_echo_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetGeojsonPostSignalError() instead")
    void echoRestServicesGetGeojsonPostSignalE(OAI_echo_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetGeojsonPostSignalError(OAI_echo_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetInfoClustersGetSignalError() instead")
    void echoRestServicesGetInfoClustersGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetInfoClustersGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetInfoClustersPostSignalError() instead")
    void echoRestServicesGetInfoClustersPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetInfoClustersPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetMapGetSignalError() instead")
    void echoRestServicesGetMapGetSignalE(OAI_echo_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetMapGetSignalError(OAI_echo_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetMapPostSignalError() instead")
    void echoRestServicesGetMapPostSignalE(OAI_echo_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetMapPostSignalError(OAI_echo_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetQidGetSignalError() instead")
    void echoRestServicesGetQidGetSignalE(OAI_echo_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetQidGetSignalError(OAI_echo_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetQidPostSignalError() instead")
    void echoRestServicesGetQidPostSignalE(OAI_echo_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetQidPostSignalError(OAI_echo_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use echoRestServicesGetDownloadGetSignalErrorFull() instead")
    void echoRestServicesGetDownloadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetDownloadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetDownloadPostSignalErrorFull() instead")
    void echoRestServicesGetDownloadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetDownloadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetFacilitiesGetSignalErrorFull() instead")
    void echoRestServicesGetFacilitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetFacilitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetFacilitiesPostSignalErrorFull() instead")
    void echoRestServicesGetFacilitiesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetFacilitiesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetFacilityInfoGetSignalErrorFull() instead")
    void echoRestServicesGetFacilityInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetFacilityInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetFacilityInfoPostSignalErrorFull() instead")
    void echoRestServicesGetFacilityInfoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetFacilityInfoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetGeojsonGetSignalErrorFull() instead")
    void echoRestServicesGetGeojsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetGeojsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetGeojsonPostSignalErrorFull() instead")
    void echoRestServicesGetGeojsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetGeojsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetInfoClustersGetSignalErrorFull() instead")
    void echoRestServicesGetInfoClustersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetInfoClustersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetInfoClustersPostSignalErrorFull() instead")
    void echoRestServicesGetInfoClustersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetInfoClustersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetMapGetSignalErrorFull() instead")
    void echoRestServicesGetMapGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetMapGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetMapPostSignalErrorFull() instead")
    void echoRestServicesGetMapPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetMapPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetQidGetSignalErrorFull() instead")
    void echoRestServicesGetQidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetQidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoRestServicesGetQidPostSignalErrorFull() instead")
    void echoRestServicesGetQidPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoRestServicesGetQidPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
