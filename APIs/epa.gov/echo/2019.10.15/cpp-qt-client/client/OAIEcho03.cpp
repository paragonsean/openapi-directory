/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - All Data
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.  ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    ECHO Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated as Clean Air Act (CAA) stationary sources, Clean Water Act (CWA) dischargers, Resource Conservation and Recovery Act (RCRA) hazardous waste generators/handlers, and Safe Drinking Water Act (SDWA) public water systems.  Data of interest from other EPA sources, such as the Toxics Release Inventory, is also supplied for context.   \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.     The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcho03.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcho03::OAIEcho03(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcho03::OAIEcho03() {
    this->initializeModel();
}

OAIEcho03::~OAIEcho03() {}

void OAIEcho03::initializeModel() {

    m_air_flag_isSet = false;
    m_air_flag_isValid = false;

    m_airids_isSet = false;
    m_airids_isValid = false;

    m_active_lower48_isSet = false;
    m_active_lower48_isValid = false;

    m_biosolids_flag_isSet = false;
    m_biosolids_flag_isValid = false;

    m_caa3yr_compl_qtrs_history_isSet = false;
    m_caa3yr_compl_qtrs_history_isValid = false;

    m_caa_compliance_status_isSet = false;
    m_caa_compliance_status_isValid = false;

    m_caa_date_last_formal_action_isSet = false;
    m_caa_date_last_formal_action_isValid = false;

    m_caa_days_last_evaluation_isSet = false;
    m_caa_days_last_evaluation_isValid = false;

    m_caa_evaluation_count_isSet = false;
    m_caa_evaluation_count_isValid = false;

    m_caa_formal_action_count_isSet = false;
    m_caa_formal_action_count_isValid = false;

    m_caa_hpv_flag_isSet = false;
    m_caa_hpv_flag_isValid = false;

    m_caa_informal_count_isSet = false;
    m_caa_informal_count_isValid = false;

    m_caa_last_penalty_amt_isSet = false;
    m_caa_last_penalty_amt_isValid = false;

    m_caa_last_penalty_date_isSet = false;
    m_caa_last_penalty_date_isValid = false;

    m_caanaics_isSet = false;
    m_caanaics_isValid = false;

    m_caa_penalties_isSet = false;
    m_caa_penalties_isValid = false;

    m_caa_permit_types_isSet = false;
    m_caa_permit_types_isValid = false;

    m_caa_qtrs_with_nc_isSet = false;
    m_caa_qtrs_with_nc_isValid = false;

    m_caasics_isSet = false;
    m_caasics_isValid = false;

    m_cwa13qtrs_compl_history_isSet = false;
    m_cwa13qtrs_compl_history_isValid = false;

    m_cwa13qtrs_efflnt_exceedances_isSet = false;
    m_cwa13qtrs_efflnt_exceedances_isValid = false;

    m_cwa3_yr_qncr_codes_isSet = false;
    m_cwa3_yr_qncr_codes_isValid = false;

    m_cwa_compliance_status_isSet = false;
    m_cwa_compliance_status_isValid = false;

    m_cwa_compliance_tracking_isSet = false;
    m_cwa_compliance_tracking_isValid = false;

    m_cwa_date_last_formal_action_isSet = false;
    m_cwa_date_last_formal_action_isValid = false;

    m_cwa_days_last_inspection_isSet = false;
    m_cwa_days_last_inspection_isValid = false;

    m_cwa_formal_action_count_isSet = false;
    m_cwa_formal_action_count_isValid = false;

    m_cwa_informal_count_isSet = false;
    m_cwa_informal_count_isValid = false;

    m_cwa_inspection_count_isSet = false;
    m_cwa_inspection_count_isValid = false;

    m_cwa_last_penalty_amt_isSet = false;
    m_cwa_last_penalty_amt_isValid = false;

    m_cwa_last_penalty_date_isSet = false;
    m_cwa_last_penalty_date_isValid = false;

    m_cwanaics_isSet = false;
    m_cwanaics_isValid = false;

    m_cwa_penalties_isSet = false;
    m_cwa_penalties_isValid = false;

    m_cwa_permit_types_isSet = false;
    m_cwa_permit_types_isValid = false;

    m_cwa_qtrs_with_nc_isSet = false;
    m_cwa_qtrs_with_nc_isValid = false;

    m_cwasics_isSet = false;
    m_cwasics_isValid = false;

    m_cwasnc_flag_isSet = false;
    m_cwasnc_flag_isValid = false;

    m_camd_ids_isSet = false;
    m_camd_ids_isValid = false;

    m_census_block_group_isSet = false;
    m_census_block_group_isValid = false;

    m_curr_sv_flag_isSet = false;
    m_curr_sv_flag_isValid = false;

    m_curr_vio_flag_isSet = false;
    m_curr_vio_flag_isValid = false;

    m_dfr_url_isSet = false;
    m_dfr_url_isValid = false;

    m_ea5yr_flag_isSet = false;
    m_ea5yr_flag_isValid = false;

    m_eff_charts_flag_isSet = false;
    m_eff_charts_flag_isValid = false;

    m_eis_flag_isSet = false;
    m_eis_flag_isValid = false;

    m_eis_ids_isSet = false;
    m_eis_ids_isValid = false;

    m_ejscreen_flag_isSet = false;
    m_ejscreen_flag_isValid = false;

    m_ejscreen_flag_us_isSet = false;
    m_ejscreen_flag_us_isValid = false;

    m_epcra_inspections5yr_isSet = false;
    m_epcra_inspections5yr_isValid = false;

    m_fac3yr_compliance_history_isSet = false;
    m_fac3yr_compliance_history_isValid = false;

    m_fac_accuracy_meters_isSet = false;
    m_fac_accuracy_meters_isValid = false;

    m_fac_active_flag_isSet = false;
    m_fac_active_flag_isValid = false;

    m_fac_chesapeake_bay_flg_isSet = false;
    m_fac_chesapeake_bay_flg_isValid = false;

    m_fac_city_isSet = false;
    m_fac_city_isValid = false;

    m_fac_collection_method_isSet = false;
    m_fac_collection_method_isValid = false;

    m_fac_compliance_status_isSet = false;
    m_fac_compliance_status_isValid = false;

    m_fac_county_isSet = false;
    m_fac_county_isValid = false;

    m_fac_date_last_formal_act_epa_isSet = false;
    m_fac_date_last_formal_act_epa_isValid = false;

    m_fac_date_last_formal_act_st_isSet = false;
    m_fac_date_last_formal_act_st_isValid = false;

    m_fac_date_last_formal_action_isSet = false;
    m_fac_date_last_formal_action_isValid = false;

    m_fac_date_last_informal_act_epa_isSet = false;
    m_fac_date_last_informal_act_epa_isValid = false;

    m_fac_date_last_informal_act_st_isSet = false;
    m_fac_date_last_informal_act_st_isValid = false;

    m_fac_date_last_informal_action_isSet = false;
    m_fac_date_last_informal_action_isValid = false;

    m_fac_date_last_inspection_isSet = false;
    m_fac_date_last_inspection_isValid = false;

    m_fac_date_last_inspection_epa_isSet = false;
    m_fac_date_last_inspection_epa_isValid = false;

    m_fac_date_last_inspection_state_isSet = false;
    m_fac_date_last_inspection_state_isValid = false;

    m_fac_date_last_penalty_isSet = false;
    m_fac_date_last_penalty_isValid = false;

    m_fac_days_last_inspection_isSet = false;
    m_fac_days_last_inspection_isValid = false;

    m_fac_derived_cb2010_isSet = false;
    m_fac_derived_cb2010_isValid = false;

    m_fac_derived_cd113_isSet = false;
    m_fac_derived_cd113_isValid = false;

    m_fac_derived_huc_isSet = false;
    m_fac_derived_huc_isValid = false;

    m_fac_derived_rad_wbdhu12_isSet = false;
    m_fac_derived_rad_wbdhu12_isValid = false;

    m_fac_derived_rad_wbdhu12_name_isSet = false;
    m_fac_derived_rad_wbdhu12_name_isValid = false;

    m_fac_derived_rad_wbdhu8_isSet = false;
    m_fac_derived_rad_wbdhu8_isValid = false;

    m_fac_derived_rad_wbdhu8_name_isSet = false;
    m_fac_derived_rad_wbdhu8_name_isValid = false;

    m_fac_derived_stcty_fips_isSet = false;
    m_fac_derived_stcty_fips_isValid = false;

    m_fac_derived_tr_ibes_isSet = false;
    m_fac_derived_tr_ibes_isValid = false;

    m_fac_derived_wbd_isSet = false;
    m_fac_derived_wbd_isValid = false;

    m_fac_derived_wbdhu12_name_isSet = false;
    m_fac_derived_wbdhu12_name_isValid = false;

    m_fac_derived_wbdhu8_isSet = false;
    m_fac_derived_wbdhu8_isValid = false;

    m_fac_derived_wbdhu8_name_isSet = false;
    m_fac_derived_wbdhu8_name_isValid = false;

    m_fac_derived_zip_isSet = false;
    m_fac_derived_zip_isValid = false;

    m_fac_epa_region_isSet = false;
    m_fac_epa_region_isValid = false;

    m_fac_fips_code_isSet = false;
    m_fac_fips_code_isValid = false;

    m_fac_federal_agency_isSet = false;
    m_fac_federal_agency_isValid = false;

    m_fac_federal_agency_name_isSet = false;
    m_fac_federal_agency_name_isValid = false;

    m_fac_federal_flg_isSet = false;
    m_fac_federal_flg_isValid = false;

    m_fac_formal_action_count_isSet = false;
    m_fac_formal_action_count_isValid = false;

    m_fac_imp_water_flg_isSet = false;
    m_fac_imp_water_flg_isValid = false;

    m_fac_indian_cntry_flg_isSet = false;
    m_fac_indian_cntry_flg_isValid = false;

    m_fac_indian_spatial_flg_isSet = false;
    m_fac_indian_spatial_flg_isValid = false;

    m_fac_informal_count_isSet = false;
    m_fac_informal_count_isValid = false;

    m_fac_inspection_count_isSet = false;
    m_fac_inspection_count_isValid = false;

    m_fac_last_penalty_amt_isSet = false;
    m_fac_last_penalty_amt_isValid = false;

    m_fac_lat_isSet = false;
    m_fac_lat_isValid = false;

    m_fac_long_isSet = false;
    m_fac_long_isValid = false;

    m_fac_major_flag_isSet = false;
    m_fac_major_flag_isValid = false;

    m_fac_map_flg_isSet = false;
    m_fac_map_flg_isValid = false;

    m_fac_map_icon_isSet = false;
    m_fac_map_icon_isValid = false;

    m_fac_myrtk_universe_isSet = false;
    m_fac_myrtk_universe_isValid = false;

    m_fac_naics_codes_isSet = false;
    m_fac_naics_codes_isValid = false;

    m_fac_naa_flag_isSet = false;
    m_fac_naa_flag_isValid = false;

    m_fac_name_isSet = false;
    m_fac_name_isValid = false;

    m_fac_penalty_count_isSet = false;
    m_fac_penalty_count_isValid = false;

    m_fac_percent_minority_isSet = false;
    m_fac_percent_minority_isValid = false;

    m_fac_pop_den_isSet = false;
    m_fac_pop_den_isValid = false;

    m_fac_programs_with_snc_isSet = false;
    m_fac_programs_with_snc_isValid = false;

    m_fac_qtrs_with_nc_isSet = false;
    m_fac_qtrs_with_nc_isValid = false;

    m_fac_reference_point_isSet = false;
    m_fac_reference_point_isValid = false;

    m_fac_sic_codes_isSet = false;
    m_fac_sic_codes_isValid = false;

    m_fac_snc_flg_isSet = false;
    m_fac_snc_flg_isValid = false;

    m_fac_state_isSet = false;
    m_fac_state_isValid = false;

    m_fac_std_county_name_isSet = false;
    m_fac_std_county_name_isValid = false;

    m_fac_street_isSet = false;
    m_fac_street_isValid = false;

    m_fac_total_penalties_isSet = false;
    m_fac_total_penalties_isValid = false;

    m_fac_us_mex_border_flg_isSet = false;
    m_fac_us_mex_border_flg_isValid = false;

    m_fac_zip_isSet = false;
    m_fac_zip_isValid = false;

    m_fec_case_ids_isSet = false;
    m_fec_case_ids_isValid = false;

    m_fec_last_case_date_isSet = false;
    m_fec_last_case_date_isValid = false;

    m_fec_number_of_cases_isSet = false;
    m_fec_number_of_cases_isValid = false;

    m_fec_total_penalties_isSet = false;
    m_fec_total_penalties_isValid = false;

    m_fifra_inspections5yr_isSet = false;
    m_fifra_inspections5yr_isValid = false;

    m_ghgco2_releases_isSet = false;
    m_ghgco2_releases_isValid = false;

    m_ghg_flag_isSet = false;
    m_ghg_flag_isValid = false;

    m_ghgids_isSet = false;
    m_ghgids_isValid = false;

    m_has_poll_rpt_isSet = false;
    m_has_poll_rpt_isValid = false;

    m_infea5yr_flag_isSet = false;
    m_infea5yr_flag_isValid = false;

    m_insp5yr_flag_isSet = false;
    m_insp5yr_flag_isValid = false;

    m_lower48_isSet = false;
    m_lower48_isValid = false;

    m_max_pctile_us_isSet = false;
    m_max_pctile_us_isValid = false;

    m_max_score_isSet = false;
    m_max_score_isValid = false;

    m_nc_isSet = false;
    m_nc_isValid = false;

    m_npdes_flag_isSet = false;
    m_npdes_flag_isValid = false;

    m_npdesids_isSet = false;
    m_npdesids_isValid = false;

    m_naa_categories_isSet = false;
    m_naa_categories_isValid = false;

    m_naa_pollutants_isSet = false;
    m_naa_pollutants_isValid = false;

    m_over80_count_us_isSet = false;
    m_over80_count_us_isValid = false;

    m_pctile_cancer_us_isSet = false;
    m_pctile_cancer_us_isValid = false;

    m_pctile_dpm_us_isSet = false;
    m_pctile_dpm_us_isValid = false;

    m_pctile_o3_us_isSet = false;
    m_pctile_o3_us_isValid = false;

    m_pctile_pctpre1960_us_isSet = false;
    m_pctile_pctpre1960_us_isValid = false;

    m_pctile_pm_us_isSet = false;
    m_pctile_pm_us_isValid = false;

    m_pctile_proximity_npdesus_isSet = false;
    m_pctile_proximity_npdesus_isValid = false;

    m_pctile_proximity_npl_us_isSet = false;
    m_pctile_proximity_npl_us_isValid = false;

    m_pctile_proximity_rmp_us_isSet = false;
    m_pctile_proximity_rmp_us_isValid = false;

    m_pctile_proximity_tsdf_us_isSet = false;
    m_pctile_proximity_tsdf_us_isValid = false;

    m_pctile_resp_us_isSet = false;
    m_pctile_resp_us_isValid = false;

    m_pctile_traffic_score_us_isSet = false;
    m_pctile_traffic_score_us_isValid = false;

    m_rcra3yr_compl_qtrs_history_isSet = false;
    m_rcra3yr_compl_qtrs_history_isValid = false;

    m_rcra_compliance_status_isSet = false;
    m_rcra_compliance_status_isValid = false;

    m_rcra_date_last_formal_action_isSet = false;
    m_rcra_date_last_formal_action_isValid = false;

    m_rcra_days_last_evaluation_isSet = false;
    m_rcra_days_last_evaluation_isValid = false;

    m_rcra_flag_isSet = false;
    m_rcra_flag_isValid = false;

    m_rcra_formal_action_count_isSet = false;
    m_rcra_formal_action_count_isValid = false;

    m_rcraids_isSet = false;
    m_rcraids_isValid = false;

    m_rcra_informal_count_isSet = false;
    m_rcra_informal_count_isValid = false;

    m_rcra_inspection_count_isSet = false;
    m_rcra_inspection_count_isValid = false;

    m_rcra_last_penalty_amt_isSet = false;
    m_rcra_last_penalty_amt_isValid = false;

    m_rcra_last_penalty_date_isSet = false;
    m_rcra_last_penalty_date_isValid = false;

    m_rcranaics_isSet = false;
    m_rcranaics_isValid = false;

    m_rcra_penalties_isSet = false;
    m_rcra_penalties_isValid = false;

    m_rcra_permit_types_isSet = false;
    m_rcra_permit_types_isValid = false;

    m_rcra_qtrs_with_nc_isSet = false;
    m_rcra_qtrs_with_nc_isValid = false;

    m_rcrasnc_flag_isSet = false;
    m_rcrasnc_flag_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_rmp_ids_isSet = false;
    m_rmp_ids_isValid = false;

    m_sdwa3yr_compl_qtrs_history_isSet = false;
    m_sdwa3yr_compl_qtrs_history_isValid = false;

    m_sdwa_compliance_status_isSet = false;
    m_sdwa_compliance_status_isValid = false;

    m_sdwa_formal_action_count_isSet = false;
    m_sdwa_formal_action_count_isValid = false;

    m_sdwaids_isSet = false;
    m_sdwaids_isValid = false;

    m_sdwa_informal_count_isSet = false;
    m_sdwa_informal_count_isValid = false;

    m_sdwa_inspections5yr_isSet = false;
    m_sdwa_inspections5yr_isValid = false;

    m_sdwa_qtrs_with_nc_isSet = false;
    m_sdwa_qtrs_with_nc_isValid = false;

    m_sdwasnc_flag_isSet = false;
    m_sdwasnc_flag_isValid = false;

    m_sdwa_system_types_isSet = false;
    m_sdwa_system_types_isValid = false;

    m_sdwis_flag_isSet = false;
    m_sdwis_flag_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_sems_flag_isSet = false;
    m_sems_flag_isValid = false;

    m_sems_ids_isSet = false;
    m_sems_ids_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_tri_flag_isSet = false;
    m_tri_flag_isValid = false;

    m_triids_isSet = false;
    m_triids_isValid = false;

    m_tri_off_site_transfers_isSet = false;
    m_tri_off_site_transfers_isValid = false;

    m_trion_site_releases_isSet = false;
    m_trion_site_releases_isValid = false;

    m_tri_releases_transfers_isSet = false;
    m_tri_releases_transfers_isValid = false;

    m_tri_reporter_isSet = false;
    m_tri_reporter_isValid = false;

    m_tri_reporter_in_past_isSet = false;
    m_tri_reporter_in_past_isValid = false;

    m_tr_ibal_flag_isSet = false;
    m_tr_ibal_flag_isValid = false;

    m_tsca_flag_isSet = false;
    m_tsca_flag_isValid = false;

    m_tsca_ids_isSet = false;
    m_tsca_ids_isValid = false;

    m_tsca_inspections5yr_isSet = false;
    m_tsca_inspections5yr_isValid = false;

    m_viol_flag_isSet = false;
    m_viol_flag_isValid = false;

    m_web_docs_isSet = false;
    m_web_docs_isValid = false;
}

void OAIEcho03::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcho03::fromJsonObject(QJsonObject json) {

    m_air_flag_isValid = ::OpenAPI::fromJsonValue(m_air_flag, json[QString("AIRFlag")]);
    m_air_flag_isSet = !json[QString("AIRFlag")].isNull() && m_air_flag_isValid;

    m_airids_isValid = ::OpenAPI::fromJsonValue(m_airids, json[QString("AIRIDs")]);
    m_airids_isSet = !json[QString("AIRIDs")].isNull() && m_airids_isValid;

    m_active_lower48_isValid = ::OpenAPI::fromJsonValue(m_active_lower48, json[QString("ActiveLower48")]);
    m_active_lower48_isSet = !json[QString("ActiveLower48")].isNull() && m_active_lower48_isValid;

    m_biosolids_flag_isValid = ::OpenAPI::fromJsonValue(m_biosolids_flag, json[QString("BiosolidsFlag")]);
    m_biosolids_flag_isSet = !json[QString("BiosolidsFlag")].isNull() && m_biosolids_flag_isValid;

    m_caa3yr_compl_qtrs_history_isValid = ::OpenAPI::fromJsonValue(m_caa3yr_compl_qtrs_history, json[QString("CAA3yrComplQtrsHistory")]);
    m_caa3yr_compl_qtrs_history_isSet = !json[QString("CAA3yrComplQtrsHistory")].isNull() && m_caa3yr_compl_qtrs_history_isValid;

    m_caa_compliance_status_isValid = ::OpenAPI::fromJsonValue(m_caa_compliance_status, json[QString("CAAComplianceStatus")]);
    m_caa_compliance_status_isSet = !json[QString("CAAComplianceStatus")].isNull() && m_caa_compliance_status_isValid;

    m_caa_date_last_formal_action_isValid = ::OpenAPI::fromJsonValue(m_caa_date_last_formal_action, json[QString("CAADateLastFormalAction")]);
    m_caa_date_last_formal_action_isSet = !json[QString("CAADateLastFormalAction")].isNull() && m_caa_date_last_formal_action_isValid;

    m_caa_days_last_evaluation_isValid = ::OpenAPI::fromJsonValue(m_caa_days_last_evaluation, json[QString("CAADaysLastEvaluation")]);
    m_caa_days_last_evaluation_isSet = !json[QString("CAADaysLastEvaluation")].isNull() && m_caa_days_last_evaluation_isValid;

    m_caa_evaluation_count_isValid = ::OpenAPI::fromJsonValue(m_caa_evaluation_count, json[QString("CAAEvaluationCount")]);
    m_caa_evaluation_count_isSet = !json[QString("CAAEvaluationCount")].isNull() && m_caa_evaluation_count_isValid;

    m_caa_formal_action_count_isValid = ::OpenAPI::fromJsonValue(m_caa_formal_action_count, json[QString("CAAFormalActionCount")]);
    m_caa_formal_action_count_isSet = !json[QString("CAAFormalActionCount")].isNull() && m_caa_formal_action_count_isValid;

    m_caa_hpv_flag_isValid = ::OpenAPI::fromJsonValue(m_caa_hpv_flag, json[QString("CAAHpvFlag")]);
    m_caa_hpv_flag_isSet = !json[QString("CAAHpvFlag")].isNull() && m_caa_hpv_flag_isValid;

    m_caa_informal_count_isValid = ::OpenAPI::fromJsonValue(m_caa_informal_count, json[QString("CAAInformalCount")]);
    m_caa_informal_count_isSet = !json[QString("CAAInformalCount")].isNull() && m_caa_informal_count_isValid;

    m_caa_last_penalty_amt_isValid = ::OpenAPI::fromJsonValue(m_caa_last_penalty_amt, json[QString("CAALastPenaltyAmt")]);
    m_caa_last_penalty_amt_isSet = !json[QString("CAALastPenaltyAmt")].isNull() && m_caa_last_penalty_amt_isValid;

    m_caa_last_penalty_date_isValid = ::OpenAPI::fromJsonValue(m_caa_last_penalty_date, json[QString("CAALastPenaltyDate")]);
    m_caa_last_penalty_date_isSet = !json[QString("CAALastPenaltyDate")].isNull() && m_caa_last_penalty_date_isValid;

    m_caanaics_isValid = ::OpenAPI::fromJsonValue(m_caanaics, json[QString("CAANAICS")]);
    m_caanaics_isSet = !json[QString("CAANAICS")].isNull() && m_caanaics_isValid;

    m_caa_penalties_isValid = ::OpenAPI::fromJsonValue(m_caa_penalties, json[QString("CAAPenalties")]);
    m_caa_penalties_isSet = !json[QString("CAAPenalties")].isNull() && m_caa_penalties_isValid;

    m_caa_permit_types_isValid = ::OpenAPI::fromJsonValue(m_caa_permit_types, json[QString("CAAPermitTypes")]);
    m_caa_permit_types_isSet = !json[QString("CAAPermitTypes")].isNull() && m_caa_permit_types_isValid;

    m_caa_qtrs_with_nc_isValid = ::OpenAPI::fromJsonValue(m_caa_qtrs_with_nc, json[QString("CAAQtrsWithNC")]);
    m_caa_qtrs_with_nc_isSet = !json[QString("CAAQtrsWithNC")].isNull() && m_caa_qtrs_with_nc_isValid;

    m_caasics_isValid = ::OpenAPI::fromJsonValue(m_caasics, json[QString("CAASICs")]);
    m_caasics_isSet = !json[QString("CAASICs")].isNull() && m_caasics_isValid;

    m_cwa13qtrs_compl_history_isValid = ::OpenAPI::fromJsonValue(m_cwa13qtrs_compl_history, json[QString("CWA13qtrsComplHistory")]);
    m_cwa13qtrs_compl_history_isSet = !json[QString("CWA13qtrsComplHistory")].isNull() && m_cwa13qtrs_compl_history_isValid;

    m_cwa13qtrs_efflnt_exceedances_isValid = ::OpenAPI::fromJsonValue(m_cwa13qtrs_efflnt_exceedances, json[QString("CWA13qtrsEfflntExceedances")]);
    m_cwa13qtrs_efflnt_exceedances_isSet = !json[QString("CWA13qtrsEfflntExceedances")].isNull() && m_cwa13qtrs_efflnt_exceedances_isValid;

    m_cwa3_yr_qncr_codes_isValid = ::OpenAPI::fromJsonValue(m_cwa3_yr_qncr_codes, json[QString("CWA3YrQncrCodes")]);
    m_cwa3_yr_qncr_codes_isSet = !json[QString("CWA3YrQncrCodes")].isNull() && m_cwa3_yr_qncr_codes_isValid;

    m_cwa_compliance_status_isValid = ::OpenAPI::fromJsonValue(m_cwa_compliance_status, json[QString("CWAComplianceStatus")]);
    m_cwa_compliance_status_isSet = !json[QString("CWAComplianceStatus")].isNull() && m_cwa_compliance_status_isValid;

    m_cwa_compliance_tracking_isValid = ::OpenAPI::fromJsonValue(m_cwa_compliance_tracking, json[QString("CWAComplianceTracking")]);
    m_cwa_compliance_tracking_isSet = !json[QString("CWAComplianceTracking")].isNull() && m_cwa_compliance_tracking_isValid;

    m_cwa_date_last_formal_action_isValid = ::OpenAPI::fromJsonValue(m_cwa_date_last_formal_action, json[QString("CWADateLastFormalAction")]);
    m_cwa_date_last_formal_action_isSet = !json[QString("CWADateLastFormalAction")].isNull() && m_cwa_date_last_formal_action_isValid;

    m_cwa_days_last_inspection_isValid = ::OpenAPI::fromJsonValue(m_cwa_days_last_inspection, json[QString("CWADaysLastInspection")]);
    m_cwa_days_last_inspection_isSet = !json[QString("CWADaysLastInspection")].isNull() && m_cwa_days_last_inspection_isValid;

    m_cwa_formal_action_count_isValid = ::OpenAPI::fromJsonValue(m_cwa_formal_action_count, json[QString("CWAFormalActionCount")]);
    m_cwa_formal_action_count_isSet = !json[QString("CWAFormalActionCount")].isNull() && m_cwa_formal_action_count_isValid;

    m_cwa_informal_count_isValid = ::OpenAPI::fromJsonValue(m_cwa_informal_count, json[QString("CWAInformalCount")]);
    m_cwa_informal_count_isSet = !json[QString("CWAInformalCount")].isNull() && m_cwa_informal_count_isValid;

    m_cwa_inspection_count_isValid = ::OpenAPI::fromJsonValue(m_cwa_inspection_count, json[QString("CWAInspectionCount")]);
    m_cwa_inspection_count_isSet = !json[QString("CWAInspectionCount")].isNull() && m_cwa_inspection_count_isValid;

    m_cwa_last_penalty_amt_isValid = ::OpenAPI::fromJsonValue(m_cwa_last_penalty_amt, json[QString("CWALastPenaltyAmt")]);
    m_cwa_last_penalty_amt_isSet = !json[QString("CWALastPenaltyAmt")].isNull() && m_cwa_last_penalty_amt_isValid;

    m_cwa_last_penalty_date_isValid = ::OpenAPI::fromJsonValue(m_cwa_last_penalty_date, json[QString("CWALastPenaltyDate")]);
    m_cwa_last_penalty_date_isSet = !json[QString("CWALastPenaltyDate")].isNull() && m_cwa_last_penalty_date_isValid;

    m_cwanaics_isValid = ::OpenAPI::fromJsonValue(m_cwanaics, json[QString("CWANAICS")]);
    m_cwanaics_isSet = !json[QString("CWANAICS")].isNull() && m_cwanaics_isValid;

    m_cwa_penalties_isValid = ::OpenAPI::fromJsonValue(m_cwa_penalties, json[QString("CWAPenalties")]);
    m_cwa_penalties_isSet = !json[QString("CWAPenalties")].isNull() && m_cwa_penalties_isValid;

    m_cwa_permit_types_isValid = ::OpenAPI::fromJsonValue(m_cwa_permit_types, json[QString("CWAPermitTypes")]);
    m_cwa_permit_types_isSet = !json[QString("CWAPermitTypes")].isNull() && m_cwa_permit_types_isValid;

    m_cwa_qtrs_with_nc_isValid = ::OpenAPI::fromJsonValue(m_cwa_qtrs_with_nc, json[QString("CWAQtrsWithNC")]);
    m_cwa_qtrs_with_nc_isSet = !json[QString("CWAQtrsWithNC")].isNull() && m_cwa_qtrs_with_nc_isValid;

    m_cwasics_isValid = ::OpenAPI::fromJsonValue(m_cwasics, json[QString("CWASICs")]);
    m_cwasics_isSet = !json[QString("CWASICs")].isNull() && m_cwasics_isValid;

    m_cwasnc_flag_isValid = ::OpenAPI::fromJsonValue(m_cwasnc_flag, json[QString("CWASNCFlag")]);
    m_cwasnc_flag_isSet = !json[QString("CWASNCFlag")].isNull() && m_cwasnc_flag_isValid;

    m_camd_ids_isValid = ::OpenAPI::fromJsonValue(m_camd_ids, json[QString("CamdIDs")]);
    m_camd_ids_isSet = !json[QString("CamdIDs")].isNull() && m_camd_ids_isValid;

    m_census_block_group_isValid = ::OpenAPI::fromJsonValue(m_census_block_group, json[QString("CensusBlockGroup")]);
    m_census_block_group_isSet = !json[QString("CensusBlockGroup")].isNull() && m_census_block_group_isValid;

    m_curr_sv_flag_isValid = ::OpenAPI::fromJsonValue(m_curr_sv_flag, json[QString("CurrSvFlag")]);
    m_curr_sv_flag_isSet = !json[QString("CurrSvFlag")].isNull() && m_curr_sv_flag_isValid;

    m_curr_vio_flag_isValid = ::OpenAPI::fromJsonValue(m_curr_vio_flag, json[QString("CurrVioFlag")]);
    m_curr_vio_flag_isSet = !json[QString("CurrVioFlag")].isNull() && m_curr_vio_flag_isValid;

    m_dfr_url_isValid = ::OpenAPI::fromJsonValue(m_dfr_url, json[QString("DfrUrl")]);
    m_dfr_url_isSet = !json[QString("DfrUrl")].isNull() && m_dfr_url_isValid;

    m_ea5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_ea5yr_flag, json[QString("Ea5yrFlag")]);
    m_ea5yr_flag_isSet = !json[QString("Ea5yrFlag")].isNull() && m_ea5yr_flag_isValid;

    m_eff_charts_flag_isValid = ::OpenAPI::fromJsonValue(m_eff_charts_flag, json[QString("EffChartsFlag")]);
    m_eff_charts_flag_isSet = !json[QString("EffChartsFlag")].isNull() && m_eff_charts_flag_isValid;

    m_eis_flag_isValid = ::OpenAPI::fromJsonValue(m_eis_flag, json[QString("EisFlag")]);
    m_eis_flag_isSet = !json[QString("EisFlag")].isNull() && m_eis_flag_isValid;

    m_eis_ids_isValid = ::OpenAPI::fromJsonValue(m_eis_ids, json[QString("EisIDs")]);
    m_eis_ids_isSet = !json[QString("EisIDs")].isNull() && m_eis_ids_isValid;

    m_ejscreen_flag_isValid = ::OpenAPI::fromJsonValue(m_ejscreen_flag, json[QString("EjscreenFlag")]);
    m_ejscreen_flag_isSet = !json[QString("EjscreenFlag")].isNull() && m_ejscreen_flag_isValid;

    m_ejscreen_flag_us_isValid = ::OpenAPI::fromJsonValue(m_ejscreen_flag_us, json[QString("EjscreenFlagUs")]);
    m_ejscreen_flag_us_isSet = !json[QString("EjscreenFlagUs")].isNull() && m_ejscreen_flag_us_isValid;

    m_epcra_inspections5yr_isValid = ::OpenAPI::fromJsonValue(m_epcra_inspections5yr, json[QString("EpcraInspections5yr")]);
    m_epcra_inspections5yr_isSet = !json[QString("EpcraInspections5yr")].isNull() && m_epcra_inspections5yr_isValid;

    m_fac3yr_compliance_history_isValid = ::OpenAPI::fromJsonValue(m_fac3yr_compliance_history, json[QString("Fac3yrComplianceHistory")]);
    m_fac3yr_compliance_history_isSet = !json[QString("Fac3yrComplianceHistory")].isNull() && m_fac3yr_compliance_history_isValid;

    m_fac_accuracy_meters_isValid = ::OpenAPI::fromJsonValue(m_fac_accuracy_meters, json[QString("FacAccuracyMeters")]);
    m_fac_accuracy_meters_isSet = !json[QString("FacAccuracyMeters")].isNull() && m_fac_accuracy_meters_isValid;

    m_fac_active_flag_isValid = ::OpenAPI::fromJsonValue(m_fac_active_flag, json[QString("FacActiveFlag")]);
    m_fac_active_flag_isSet = !json[QString("FacActiveFlag")].isNull() && m_fac_active_flag_isValid;

    m_fac_chesapeake_bay_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_chesapeake_bay_flg, json[QString("FacChesapeakeBayFlg")]);
    m_fac_chesapeake_bay_flg_isSet = !json[QString("FacChesapeakeBayFlg")].isNull() && m_fac_chesapeake_bay_flg_isValid;

    m_fac_city_isValid = ::OpenAPI::fromJsonValue(m_fac_city, json[QString("FacCity")]);
    m_fac_city_isSet = !json[QString("FacCity")].isNull() && m_fac_city_isValid;

    m_fac_collection_method_isValid = ::OpenAPI::fromJsonValue(m_fac_collection_method, json[QString("FacCollectionMethod")]);
    m_fac_collection_method_isSet = !json[QString("FacCollectionMethod")].isNull() && m_fac_collection_method_isValid;

    m_fac_compliance_status_isValid = ::OpenAPI::fromJsonValue(m_fac_compliance_status, json[QString("FacComplianceStatus")]);
    m_fac_compliance_status_isSet = !json[QString("FacComplianceStatus")].isNull() && m_fac_compliance_status_isValid;

    m_fac_county_isValid = ::OpenAPI::fromJsonValue(m_fac_county, json[QString("FacCounty")]);
    m_fac_county_isSet = !json[QString("FacCounty")].isNull() && m_fac_county_isValid;

    m_fac_date_last_formal_act_epa_isValid = ::OpenAPI::fromJsonValue(m_fac_date_last_formal_act_epa, json[QString("FacDateLastFormalActEPA")]);
    m_fac_date_last_formal_act_epa_isSet = !json[QString("FacDateLastFormalActEPA")].isNull() && m_fac_date_last_formal_act_epa_isValid;

    m_fac_date_last_formal_act_st_isValid = ::OpenAPI::fromJsonValue(m_fac_date_last_formal_act_st, json[QString("FacDateLastFormalActSt")]);
    m_fac_date_last_formal_act_st_isSet = !json[QString("FacDateLastFormalActSt")].isNull() && m_fac_date_last_formal_act_st_isValid;

    m_fac_date_last_formal_action_isValid = ::OpenAPI::fromJsonValue(m_fac_date_last_formal_action, json[QString("FacDateLastFormalAction")]);
    m_fac_date_last_formal_action_isSet = !json[QString("FacDateLastFormalAction")].isNull() && m_fac_date_last_formal_action_isValid;

    m_fac_date_last_informal_act_epa_isValid = ::OpenAPI::fromJsonValue(m_fac_date_last_informal_act_epa, json[QString("FacDateLastInformalActEPA")]);
    m_fac_date_last_informal_act_epa_isSet = !json[QString("FacDateLastInformalActEPA")].isNull() && m_fac_date_last_informal_act_epa_isValid;

    m_fac_date_last_informal_act_st_isValid = ::OpenAPI::fromJsonValue(m_fac_date_last_informal_act_st, json[QString("FacDateLastInformalActSt")]);
    m_fac_date_last_informal_act_st_isSet = !json[QString("FacDateLastInformalActSt")].isNull() && m_fac_date_last_informal_act_st_isValid;

    m_fac_date_last_informal_action_isValid = ::OpenAPI::fromJsonValue(m_fac_date_last_informal_action, json[QString("FacDateLastInformalAction")]);
    m_fac_date_last_informal_action_isSet = !json[QString("FacDateLastInformalAction")].isNull() && m_fac_date_last_informal_action_isValid;

    m_fac_date_last_inspection_isValid = ::OpenAPI::fromJsonValue(m_fac_date_last_inspection, json[QString("FacDateLastInspection")]);
    m_fac_date_last_inspection_isSet = !json[QString("FacDateLastInspection")].isNull() && m_fac_date_last_inspection_isValid;

    m_fac_date_last_inspection_epa_isValid = ::OpenAPI::fromJsonValue(m_fac_date_last_inspection_epa, json[QString("FacDateLastInspectionEPA")]);
    m_fac_date_last_inspection_epa_isSet = !json[QString("FacDateLastInspectionEPA")].isNull() && m_fac_date_last_inspection_epa_isValid;

    m_fac_date_last_inspection_state_isValid = ::OpenAPI::fromJsonValue(m_fac_date_last_inspection_state, json[QString("FacDateLastInspectionState")]);
    m_fac_date_last_inspection_state_isSet = !json[QString("FacDateLastInspectionState")].isNull() && m_fac_date_last_inspection_state_isValid;

    m_fac_date_last_penalty_isValid = ::OpenAPI::fromJsonValue(m_fac_date_last_penalty, json[QString("FacDateLastPenalty")]);
    m_fac_date_last_penalty_isSet = !json[QString("FacDateLastPenalty")].isNull() && m_fac_date_last_penalty_isValid;

    m_fac_days_last_inspection_isValid = ::OpenAPI::fromJsonValue(m_fac_days_last_inspection, json[QString("FacDaysLastInspection")]);
    m_fac_days_last_inspection_isSet = !json[QString("FacDaysLastInspection")].isNull() && m_fac_days_last_inspection_isValid;

    m_fac_derived_cb2010_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_cb2010, json[QString("FacDerivedCb2010")]);
    m_fac_derived_cb2010_isSet = !json[QString("FacDerivedCb2010")].isNull() && m_fac_derived_cb2010_isValid;

    m_fac_derived_cd113_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_cd113, json[QString("FacDerivedCd113")]);
    m_fac_derived_cd113_isSet = !json[QString("FacDerivedCd113")].isNull() && m_fac_derived_cd113_isValid;

    m_fac_derived_huc_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_huc, json[QString("FacDerivedHuc")]);
    m_fac_derived_huc_isSet = !json[QString("FacDerivedHuc")].isNull() && m_fac_derived_huc_isValid;

    m_fac_derived_rad_wbdhu12_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_rad_wbdhu12, json[QString("FacDerivedRadWBDHu12")]);
    m_fac_derived_rad_wbdhu12_isSet = !json[QString("FacDerivedRadWBDHu12")].isNull() && m_fac_derived_rad_wbdhu12_isValid;

    m_fac_derived_rad_wbdhu12_name_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_rad_wbdhu12_name, json[QString("FacDerivedRadWBDHu12Name")]);
    m_fac_derived_rad_wbdhu12_name_isSet = !json[QString("FacDerivedRadWBDHu12Name")].isNull() && m_fac_derived_rad_wbdhu12_name_isValid;

    m_fac_derived_rad_wbdhu8_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_rad_wbdhu8, json[QString("FacDerivedRadWBDHu8")]);
    m_fac_derived_rad_wbdhu8_isSet = !json[QString("FacDerivedRadWBDHu8")].isNull() && m_fac_derived_rad_wbdhu8_isValid;

    m_fac_derived_rad_wbdhu8_name_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_rad_wbdhu8_name, json[QString("FacDerivedRadWBDHu8Name")]);
    m_fac_derived_rad_wbdhu8_name_isSet = !json[QString("FacDerivedRadWBDHu8Name")].isNull() && m_fac_derived_rad_wbdhu8_name_isValid;

    m_fac_derived_stcty_fips_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_stcty_fips, json[QString("FacDerivedStctyFIPS")]);
    m_fac_derived_stcty_fips_isSet = !json[QString("FacDerivedStctyFIPS")].isNull() && m_fac_derived_stcty_fips_isValid;

    m_fac_derived_tr_ibes_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_tr_ibes, json[QString("FacDerivedTRIbes")]);
    m_fac_derived_tr_ibes_isSet = !json[QString("FacDerivedTRIbes")].isNull() && m_fac_derived_tr_ibes_isValid;

    m_fac_derived_wbd_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbd, json[QString("FacDerivedWBD")]);
    m_fac_derived_wbd_isSet = !json[QString("FacDerivedWBD")].isNull() && m_fac_derived_wbd_isValid;

    m_fac_derived_wbdhu12_name_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbdhu12_name, json[QString("FacDerivedWBDHu12Name")]);
    m_fac_derived_wbdhu12_name_isSet = !json[QString("FacDerivedWBDHu12Name")].isNull() && m_fac_derived_wbdhu12_name_isValid;

    m_fac_derived_wbdhu8_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbdhu8, json[QString("FacDerivedWBDHu8")]);
    m_fac_derived_wbdhu8_isSet = !json[QString("FacDerivedWBDHu8")].isNull() && m_fac_derived_wbdhu8_isValid;

    m_fac_derived_wbdhu8_name_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbdhu8_name, json[QString("FacDerivedWBDHu8Name")]);
    m_fac_derived_wbdhu8_name_isSet = !json[QString("FacDerivedWBDHu8Name")].isNull() && m_fac_derived_wbdhu8_name_isValid;

    m_fac_derived_zip_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_zip, json[QString("FacDerivedZip")]);
    m_fac_derived_zip_isSet = !json[QString("FacDerivedZip")].isNull() && m_fac_derived_zip_isValid;

    m_fac_epa_region_isValid = ::OpenAPI::fromJsonValue(m_fac_epa_region, json[QString("FacEPARegion")]);
    m_fac_epa_region_isSet = !json[QString("FacEPARegion")].isNull() && m_fac_epa_region_isValid;

    m_fac_fips_code_isValid = ::OpenAPI::fromJsonValue(m_fac_fips_code, json[QString("FacFIPSCode")]);
    m_fac_fips_code_isSet = !json[QString("FacFIPSCode")].isNull() && m_fac_fips_code_isValid;

    m_fac_federal_agency_isValid = ::OpenAPI::fromJsonValue(m_fac_federal_agency, json[QString("FacFederalAgency")]);
    m_fac_federal_agency_isSet = !json[QString("FacFederalAgency")].isNull() && m_fac_federal_agency_isValid;

    m_fac_federal_agency_name_isValid = ::OpenAPI::fromJsonValue(m_fac_federal_agency_name, json[QString("FacFederalAgencyName")]);
    m_fac_federal_agency_name_isSet = !json[QString("FacFederalAgencyName")].isNull() && m_fac_federal_agency_name_isValid;

    m_fac_federal_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_federal_flg, json[QString("FacFederalFlg")]);
    m_fac_federal_flg_isSet = !json[QString("FacFederalFlg")].isNull() && m_fac_federal_flg_isValid;

    m_fac_formal_action_count_isValid = ::OpenAPI::fromJsonValue(m_fac_formal_action_count, json[QString("FacFormalActionCount")]);
    m_fac_formal_action_count_isSet = !json[QString("FacFormalActionCount")].isNull() && m_fac_formal_action_count_isValid;

    m_fac_imp_water_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_imp_water_flg, json[QString("FacImpWaterFlg")]);
    m_fac_imp_water_flg_isSet = !json[QString("FacImpWaterFlg")].isNull() && m_fac_imp_water_flg_isValid;

    m_fac_indian_cntry_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_indian_cntry_flg, json[QString("FacIndianCntryFlg")]);
    m_fac_indian_cntry_flg_isSet = !json[QString("FacIndianCntryFlg")].isNull() && m_fac_indian_cntry_flg_isValid;

    m_fac_indian_spatial_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_indian_spatial_flg, json[QString("FacIndianSpatialFlg")]);
    m_fac_indian_spatial_flg_isSet = !json[QString("FacIndianSpatialFlg")].isNull() && m_fac_indian_spatial_flg_isValid;

    m_fac_informal_count_isValid = ::OpenAPI::fromJsonValue(m_fac_informal_count, json[QString("FacInformalCount")]);
    m_fac_informal_count_isSet = !json[QString("FacInformalCount")].isNull() && m_fac_informal_count_isValid;

    m_fac_inspection_count_isValid = ::OpenAPI::fromJsonValue(m_fac_inspection_count, json[QString("FacInspectionCount")]);
    m_fac_inspection_count_isSet = !json[QString("FacInspectionCount")].isNull() && m_fac_inspection_count_isValid;

    m_fac_last_penalty_amt_isValid = ::OpenAPI::fromJsonValue(m_fac_last_penalty_amt, json[QString("FacLastPenaltyAmt")]);
    m_fac_last_penalty_amt_isSet = !json[QString("FacLastPenaltyAmt")].isNull() && m_fac_last_penalty_amt_isValid;

    m_fac_lat_isValid = ::OpenAPI::fromJsonValue(m_fac_lat, json[QString("FacLat")]);
    m_fac_lat_isSet = !json[QString("FacLat")].isNull() && m_fac_lat_isValid;

    m_fac_long_isValid = ::OpenAPI::fromJsonValue(m_fac_long, json[QString("FacLong")]);
    m_fac_long_isSet = !json[QString("FacLong")].isNull() && m_fac_long_isValid;

    m_fac_major_flag_isValid = ::OpenAPI::fromJsonValue(m_fac_major_flag, json[QString("FacMajorFlag")]);
    m_fac_major_flag_isSet = !json[QString("FacMajorFlag")].isNull() && m_fac_major_flag_isValid;

    m_fac_map_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_map_flg, json[QString("FacMapFlg")]);
    m_fac_map_flg_isSet = !json[QString("FacMapFlg")].isNull() && m_fac_map_flg_isValid;

    m_fac_map_icon_isValid = ::OpenAPI::fromJsonValue(m_fac_map_icon, json[QString("FacMapIcon")]);
    m_fac_map_icon_isSet = !json[QString("FacMapIcon")].isNull() && m_fac_map_icon_isValid;

    m_fac_myrtk_universe_isValid = ::OpenAPI::fromJsonValue(m_fac_myrtk_universe, json[QString("FacMyrtkUniverse")]);
    m_fac_myrtk_universe_isSet = !json[QString("FacMyrtkUniverse")].isNull() && m_fac_myrtk_universe_isValid;

    m_fac_naics_codes_isValid = ::OpenAPI::fromJsonValue(m_fac_naics_codes, json[QString("FacNAICSCodes")]);
    m_fac_naics_codes_isSet = !json[QString("FacNAICSCodes")].isNull() && m_fac_naics_codes_isValid;

    m_fac_naa_flag_isValid = ::OpenAPI::fromJsonValue(m_fac_naa_flag, json[QString("FacNaaFlag")]);
    m_fac_naa_flag_isSet = !json[QString("FacNaaFlag")].isNull() && m_fac_naa_flag_isValid;

    m_fac_name_isValid = ::OpenAPI::fromJsonValue(m_fac_name, json[QString("FacName")]);
    m_fac_name_isSet = !json[QString("FacName")].isNull() && m_fac_name_isValid;

    m_fac_penalty_count_isValid = ::OpenAPI::fromJsonValue(m_fac_penalty_count, json[QString("FacPenaltyCount")]);
    m_fac_penalty_count_isSet = !json[QString("FacPenaltyCount")].isNull() && m_fac_penalty_count_isValid;

    m_fac_percent_minority_isValid = ::OpenAPI::fromJsonValue(m_fac_percent_minority, json[QString("FacPercentMinority")]);
    m_fac_percent_minority_isSet = !json[QString("FacPercentMinority")].isNull() && m_fac_percent_minority_isValid;

    m_fac_pop_den_isValid = ::OpenAPI::fromJsonValue(m_fac_pop_den, json[QString("FacPopDen")]);
    m_fac_pop_den_isSet = !json[QString("FacPopDen")].isNull() && m_fac_pop_den_isValid;

    m_fac_programs_with_snc_isValid = ::OpenAPI::fromJsonValue(m_fac_programs_with_snc, json[QString("FacProgramsWithSNC")]);
    m_fac_programs_with_snc_isSet = !json[QString("FacProgramsWithSNC")].isNull() && m_fac_programs_with_snc_isValid;

    m_fac_qtrs_with_nc_isValid = ::OpenAPI::fromJsonValue(m_fac_qtrs_with_nc, json[QString("FacQtrsWithNC")]);
    m_fac_qtrs_with_nc_isSet = !json[QString("FacQtrsWithNC")].isNull() && m_fac_qtrs_with_nc_isValid;

    m_fac_reference_point_isValid = ::OpenAPI::fromJsonValue(m_fac_reference_point, json[QString("FacReferencePoint")]);
    m_fac_reference_point_isSet = !json[QString("FacReferencePoint")].isNull() && m_fac_reference_point_isValid;

    m_fac_sic_codes_isValid = ::OpenAPI::fromJsonValue(m_fac_sic_codes, json[QString("FacSICCodes")]);
    m_fac_sic_codes_isSet = !json[QString("FacSICCodes")].isNull() && m_fac_sic_codes_isValid;

    m_fac_snc_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_snc_flg, json[QString("FacSNCFlg")]);
    m_fac_snc_flg_isSet = !json[QString("FacSNCFlg")].isNull() && m_fac_snc_flg_isValid;

    m_fac_state_isValid = ::OpenAPI::fromJsonValue(m_fac_state, json[QString("FacState")]);
    m_fac_state_isSet = !json[QString("FacState")].isNull() && m_fac_state_isValid;

    m_fac_std_county_name_isValid = ::OpenAPI::fromJsonValue(m_fac_std_county_name, json[QString("FacStdCountyName")]);
    m_fac_std_county_name_isSet = !json[QString("FacStdCountyName")].isNull() && m_fac_std_county_name_isValid;

    m_fac_street_isValid = ::OpenAPI::fromJsonValue(m_fac_street, json[QString("FacStreet")]);
    m_fac_street_isSet = !json[QString("FacStreet")].isNull() && m_fac_street_isValid;

    m_fac_total_penalties_isValid = ::OpenAPI::fromJsonValue(m_fac_total_penalties, json[QString("FacTotalPenalties")]);
    m_fac_total_penalties_isSet = !json[QString("FacTotalPenalties")].isNull() && m_fac_total_penalties_isValid;

    m_fac_us_mex_border_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_us_mex_border_flg, json[QString("FacUsMexBorderFlg")]);
    m_fac_us_mex_border_flg_isSet = !json[QString("FacUsMexBorderFlg")].isNull() && m_fac_us_mex_border_flg_isValid;

    m_fac_zip_isValid = ::OpenAPI::fromJsonValue(m_fac_zip, json[QString("FacZip")]);
    m_fac_zip_isSet = !json[QString("FacZip")].isNull() && m_fac_zip_isValid;

    m_fec_case_ids_isValid = ::OpenAPI::fromJsonValue(m_fec_case_ids, json[QString("FecCaseIDs")]);
    m_fec_case_ids_isSet = !json[QString("FecCaseIDs")].isNull() && m_fec_case_ids_isValid;

    m_fec_last_case_date_isValid = ::OpenAPI::fromJsonValue(m_fec_last_case_date, json[QString("FecLastCaseDate")]);
    m_fec_last_case_date_isSet = !json[QString("FecLastCaseDate")].isNull() && m_fec_last_case_date_isValid;

    m_fec_number_of_cases_isValid = ::OpenAPI::fromJsonValue(m_fec_number_of_cases, json[QString("FecNumberOfCases")]);
    m_fec_number_of_cases_isSet = !json[QString("FecNumberOfCases")].isNull() && m_fec_number_of_cases_isValid;

    m_fec_total_penalties_isValid = ::OpenAPI::fromJsonValue(m_fec_total_penalties, json[QString("FecTotalPenalties")]);
    m_fec_total_penalties_isSet = !json[QString("FecTotalPenalties")].isNull() && m_fec_total_penalties_isValid;

    m_fifra_inspections5yr_isValid = ::OpenAPI::fromJsonValue(m_fifra_inspections5yr, json[QString("FifraInspections5yr")]);
    m_fifra_inspections5yr_isSet = !json[QString("FifraInspections5yr")].isNull() && m_fifra_inspections5yr_isValid;

    m_ghgco2_releases_isValid = ::OpenAPI::fromJsonValue(m_ghgco2_releases, json[QString("GHGCO2Releases")]);
    m_ghgco2_releases_isSet = !json[QString("GHGCO2Releases")].isNull() && m_ghgco2_releases_isValid;

    m_ghg_flag_isValid = ::OpenAPI::fromJsonValue(m_ghg_flag, json[QString("GHGFlag")]);
    m_ghg_flag_isSet = !json[QString("GHGFlag")].isNull() && m_ghg_flag_isValid;

    m_ghgids_isValid = ::OpenAPI::fromJsonValue(m_ghgids, json[QString("GHGIDs")]);
    m_ghgids_isSet = !json[QString("GHGIDs")].isNull() && m_ghgids_isValid;

    m_has_poll_rpt_isValid = ::OpenAPI::fromJsonValue(m_has_poll_rpt, json[QString("HasPollRpt")]);
    m_has_poll_rpt_isSet = !json[QString("HasPollRpt")].isNull() && m_has_poll_rpt_isValid;

    m_infea5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_infea5yr_flag, json[QString("Infea5yrFlag")]);
    m_infea5yr_flag_isSet = !json[QString("Infea5yrFlag")].isNull() && m_infea5yr_flag_isValid;

    m_insp5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_insp5yr_flag, json[QString("Insp5yrFlag")]);
    m_insp5yr_flag_isSet = !json[QString("Insp5yrFlag")].isNull() && m_insp5yr_flag_isValid;

    m_lower48_isValid = ::OpenAPI::fromJsonValue(m_lower48, json[QString("Lower48")]);
    m_lower48_isSet = !json[QString("Lower48")].isNull() && m_lower48_isValid;

    m_max_pctile_us_isValid = ::OpenAPI::fromJsonValue(m_max_pctile_us, json[QString("MaxPctileUs")]);
    m_max_pctile_us_isSet = !json[QString("MaxPctileUs")].isNull() && m_max_pctile_us_isValid;

    m_max_score_isValid = ::OpenAPI::fromJsonValue(m_max_score, json[QString("MaxScore")]);
    m_max_score_isSet = !json[QString("MaxScore")].isNull() && m_max_score_isValid;

    m_nc_isValid = ::OpenAPI::fromJsonValue(m_nc, json[QString("NC")]);
    m_nc_isSet = !json[QString("NC")].isNull() && m_nc_isValid;

    m_npdes_flag_isValid = ::OpenAPI::fromJsonValue(m_npdes_flag, json[QString("NPDESFlag")]);
    m_npdes_flag_isSet = !json[QString("NPDESFlag")].isNull() && m_npdes_flag_isValid;

    m_npdesids_isValid = ::OpenAPI::fromJsonValue(m_npdesids, json[QString("NPDESIDs")]);
    m_npdesids_isSet = !json[QString("NPDESIDs")].isNull() && m_npdesids_isValid;

    m_naa_categories_isValid = ::OpenAPI::fromJsonValue(m_naa_categories, json[QString("NaaCategories")]);
    m_naa_categories_isSet = !json[QString("NaaCategories")].isNull() && m_naa_categories_isValid;

    m_naa_pollutants_isValid = ::OpenAPI::fromJsonValue(m_naa_pollutants, json[QString("NaaPollutants")]);
    m_naa_pollutants_isSet = !json[QString("NaaPollutants")].isNull() && m_naa_pollutants_isValid;

    m_over80_count_us_isValid = ::OpenAPI::fromJsonValue(m_over80_count_us, json[QString("Over80CountUs")]);
    m_over80_count_us_isSet = !json[QString("Over80CountUs")].isNull() && m_over80_count_us_isValid;

    m_pctile_cancer_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_cancer_us, json[QString("PctileCancerUs")]);
    m_pctile_cancer_us_isSet = !json[QString("PctileCancerUs")].isNull() && m_pctile_cancer_us_isValid;

    m_pctile_dpm_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_dpm_us, json[QString("PctileDpmUs")]);
    m_pctile_dpm_us_isSet = !json[QString("PctileDpmUs")].isNull() && m_pctile_dpm_us_isValid;

    m_pctile_o3_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_o3_us, json[QString("PctileO3Us")]);
    m_pctile_o3_us_isSet = !json[QString("PctileO3Us")].isNull() && m_pctile_o3_us_isValid;

    m_pctile_pctpre1960_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_pctpre1960_us, json[QString("PctilePctpre1960Us")]);
    m_pctile_pctpre1960_us_isSet = !json[QString("PctilePctpre1960Us")].isNull() && m_pctile_pctpre1960_us_isValid;

    m_pctile_pm_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_pm_us, json[QString("PctilePmUs")]);
    m_pctile_pm_us_isSet = !json[QString("PctilePmUs")].isNull() && m_pctile_pm_us_isValid;

    m_pctile_proximity_npdesus_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_npdesus, json[QString("PctileProximityNPDESUs")]);
    m_pctile_proximity_npdesus_isSet = !json[QString("PctileProximityNPDESUs")].isNull() && m_pctile_proximity_npdesus_isValid;

    m_pctile_proximity_npl_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_npl_us, json[QString("PctileProximityNplUs")]);
    m_pctile_proximity_npl_us_isSet = !json[QString("PctileProximityNplUs")].isNull() && m_pctile_proximity_npl_us_isValid;

    m_pctile_proximity_rmp_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_rmp_us, json[QString("PctileProximityRmpUs")]);
    m_pctile_proximity_rmp_us_isSet = !json[QString("PctileProximityRmpUs")].isNull() && m_pctile_proximity_rmp_us_isValid;

    m_pctile_proximity_tsdf_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_tsdf_us, json[QString("PctileProximityTsdfUs")]);
    m_pctile_proximity_tsdf_us_isSet = !json[QString("PctileProximityTsdfUs")].isNull() && m_pctile_proximity_tsdf_us_isValid;

    m_pctile_resp_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_resp_us, json[QString("PctileRespUs")]);
    m_pctile_resp_us_isSet = !json[QString("PctileRespUs")].isNull() && m_pctile_resp_us_isValid;

    m_pctile_traffic_score_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_traffic_score_us, json[QString("PctileTrafficScoreUs")]);
    m_pctile_traffic_score_us_isSet = !json[QString("PctileTrafficScoreUs")].isNull() && m_pctile_traffic_score_us_isValid;

    m_rcra3yr_compl_qtrs_history_isValid = ::OpenAPI::fromJsonValue(m_rcra3yr_compl_qtrs_history, json[QString("RCRA3yrComplQtrsHistory")]);
    m_rcra3yr_compl_qtrs_history_isSet = !json[QString("RCRA3yrComplQtrsHistory")].isNull() && m_rcra3yr_compl_qtrs_history_isValid;

    m_rcra_compliance_status_isValid = ::OpenAPI::fromJsonValue(m_rcra_compliance_status, json[QString("RCRAComplianceStatus")]);
    m_rcra_compliance_status_isSet = !json[QString("RCRAComplianceStatus")].isNull() && m_rcra_compliance_status_isValid;

    m_rcra_date_last_formal_action_isValid = ::OpenAPI::fromJsonValue(m_rcra_date_last_formal_action, json[QString("RCRADateLastFormalAction")]);
    m_rcra_date_last_formal_action_isSet = !json[QString("RCRADateLastFormalAction")].isNull() && m_rcra_date_last_formal_action_isValid;

    m_rcra_days_last_evaluation_isValid = ::OpenAPI::fromJsonValue(m_rcra_days_last_evaluation, json[QString("RCRADaysLastEvaluation")]);
    m_rcra_days_last_evaluation_isSet = !json[QString("RCRADaysLastEvaluation")].isNull() && m_rcra_days_last_evaluation_isValid;

    m_rcra_flag_isValid = ::OpenAPI::fromJsonValue(m_rcra_flag, json[QString("RCRAFlag")]);
    m_rcra_flag_isSet = !json[QString("RCRAFlag")].isNull() && m_rcra_flag_isValid;

    m_rcra_formal_action_count_isValid = ::OpenAPI::fromJsonValue(m_rcra_formal_action_count, json[QString("RCRAFormalActionCount")]);
    m_rcra_formal_action_count_isSet = !json[QString("RCRAFormalActionCount")].isNull() && m_rcra_formal_action_count_isValid;

    m_rcraids_isValid = ::OpenAPI::fromJsonValue(m_rcraids, json[QString("RCRAIDs")]);
    m_rcraids_isSet = !json[QString("RCRAIDs")].isNull() && m_rcraids_isValid;

    m_rcra_informal_count_isValid = ::OpenAPI::fromJsonValue(m_rcra_informal_count, json[QString("RCRAInformalCount")]);
    m_rcra_informal_count_isSet = !json[QString("RCRAInformalCount")].isNull() && m_rcra_informal_count_isValid;

    m_rcra_inspection_count_isValid = ::OpenAPI::fromJsonValue(m_rcra_inspection_count, json[QString("RCRAInspectionCount")]);
    m_rcra_inspection_count_isSet = !json[QString("RCRAInspectionCount")].isNull() && m_rcra_inspection_count_isValid;

    m_rcra_last_penalty_amt_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_penalty_amt, json[QString("RCRALastPenaltyAmt")]);
    m_rcra_last_penalty_amt_isSet = !json[QString("RCRALastPenaltyAmt")].isNull() && m_rcra_last_penalty_amt_isValid;

    m_rcra_last_penalty_date_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_penalty_date, json[QString("RCRALastPenaltyDate")]);
    m_rcra_last_penalty_date_isSet = !json[QString("RCRALastPenaltyDate")].isNull() && m_rcra_last_penalty_date_isValid;

    m_rcranaics_isValid = ::OpenAPI::fromJsonValue(m_rcranaics, json[QString("RCRANAICS")]);
    m_rcranaics_isSet = !json[QString("RCRANAICS")].isNull() && m_rcranaics_isValid;

    m_rcra_penalties_isValid = ::OpenAPI::fromJsonValue(m_rcra_penalties, json[QString("RCRAPenalties")]);
    m_rcra_penalties_isSet = !json[QString("RCRAPenalties")].isNull() && m_rcra_penalties_isValid;

    m_rcra_permit_types_isValid = ::OpenAPI::fromJsonValue(m_rcra_permit_types, json[QString("RCRAPermitTypes")]);
    m_rcra_permit_types_isSet = !json[QString("RCRAPermitTypes")].isNull() && m_rcra_permit_types_isValid;

    m_rcra_qtrs_with_nc_isValid = ::OpenAPI::fromJsonValue(m_rcra_qtrs_with_nc, json[QString("RCRAQtrsWithNC")]);
    m_rcra_qtrs_with_nc_isSet = !json[QString("RCRAQtrsWithNC")].isNull() && m_rcra_qtrs_with_nc_isValid;

    m_rcrasnc_flag_isValid = ::OpenAPI::fromJsonValue(m_rcrasnc_flag, json[QString("RCRASNCFlag")]);
    m_rcrasnc_flag_isSet = !json[QString("RCRASNCFlag")].isNull() && m_rcrasnc_flag_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("RegistryID")]);
    m_registry_id_isSet = !json[QString("RegistryID")].isNull() && m_registry_id_isValid;

    m_rmp_ids_isValid = ::OpenAPI::fromJsonValue(m_rmp_ids, json[QString("RmpIDs")]);
    m_rmp_ids_isSet = !json[QString("RmpIDs")].isNull() && m_rmp_ids_isValid;

    m_sdwa3yr_compl_qtrs_history_isValid = ::OpenAPI::fromJsonValue(m_sdwa3yr_compl_qtrs_history, json[QString("SDWA3yrComplQtrsHistory")]);
    m_sdwa3yr_compl_qtrs_history_isSet = !json[QString("SDWA3yrComplQtrsHistory")].isNull() && m_sdwa3yr_compl_qtrs_history_isValid;

    m_sdwa_compliance_status_isValid = ::OpenAPI::fromJsonValue(m_sdwa_compliance_status, json[QString("SDWAComplianceStatus")]);
    m_sdwa_compliance_status_isSet = !json[QString("SDWAComplianceStatus")].isNull() && m_sdwa_compliance_status_isValid;

    m_sdwa_formal_action_count_isValid = ::OpenAPI::fromJsonValue(m_sdwa_formal_action_count, json[QString("SDWAFormalActionCount")]);
    m_sdwa_formal_action_count_isSet = !json[QString("SDWAFormalActionCount")].isNull() && m_sdwa_formal_action_count_isValid;

    m_sdwaids_isValid = ::OpenAPI::fromJsonValue(m_sdwaids, json[QString("SDWAIDs")]);
    m_sdwaids_isSet = !json[QString("SDWAIDs")].isNull() && m_sdwaids_isValid;

    m_sdwa_informal_count_isValid = ::OpenAPI::fromJsonValue(m_sdwa_informal_count, json[QString("SDWAInformalCount")]);
    m_sdwa_informal_count_isSet = !json[QString("SDWAInformalCount")].isNull() && m_sdwa_informal_count_isValid;

    m_sdwa_inspections5yr_isValid = ::OpenAPI::fromJsonValue(m_sdwa_inspections5yr, json[QString("SDWAInspections5yr")]);
    m_sdwa_inspections5yr_isSet = !json[QString("SDWAInspections5yr")].isNull() && m_sdwa_inspections5yr_isValid;

    m_sdwa_qtrs_with_nc_isValid = ::OpenAPI::fromJsonValue(m_sdwa_qtrs_with_nc, json[QString("SDWAQtrsWithNC")]);
    m_sdwa_qtrs_with_nc_isSet = !json[QString("SDWAQtrsWithNC")].isNull() && m_sdwa_qtrs_with_nc_isValid;

    m_sdwasnc_flag_isValid = ::OpenAPI::fromJsonValue(m_sdwasnc_flag, json[QString("SDWASNCFlag")]);
    m_sdwasnc_flag_isSet = !json[QString("SDWASNCFlag")].isNull() && m_sdwasnc_flag_isValid;

    m_sdwa_system_types_isValid = ::OpenAPI::fromJsonValue(m_sdwa_system_types, json[QString("SDWASystemTypes")]);
    m_sdwa_system_types_isSet = !json[QString("SDWASystemTypes")].isNull() && m_sdwa_system_types_isValid;

    m_sdwis_flag_isValid = ::OpenAPI::fromJsonValue(m_sdwis_flag, json[QString("SDWISFlag")]);
    m_sdwis_flag_isSet = !json[QString("SDWISFlag")].isNull() && m_sdwis_flag_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_sems_flag_isValid = ::OpenAPI::fromJsonValue(m_sems_flag, json[QString("SemsFlag")]);
    m_sems_flag_isSet = !json[QString("SemsFlag")].isNull() && m_sems_flag_isValid;

    m_sems_ids_isValid = ::OpenAPI::fromJsonValue(m_sems_ids, json[QString("SemsIDs")]);
    m_sems_ids_isSet = !json[QString("SemsIDs")].isNull() && m_sems_ids_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_tri_flag_isValid = ::OpenAPI::fromJsonValue(m_tri_flag, json[QString("TRIFlag")]);
    m_tri_flag_isSet = !json[QString("TRIFlag")].isNull() && m_tri_flag_isValid;

    m_triids_isValid = ::OpenAPI::fromJsonValue(m_triids, json[QString("TRIIDs")]);
    m_triids_isSet = !json[QString("TRIIDs")].isNull() && m_triids_isValid;

    m_tri_off_site_transfers_isValid = ::OpenAPI::fromJsonValue(m_tri_off_site_transfers, json[QString("TRIOffSiteTransfers")]);
    m_tri_off_site_transfers_isSet = !json[QString("TRIOffSiteTransfers")].isNull() && m_tri_off_site_transfers_isValid;

    m_trion_site_releases_isValid = ::OpenAPI::fromJsonValue(m_trion_site_releases, json[QString("TRIOnSiteReleases")]);
    m_trion_site_releases_isSet = !json[QString("TRIOnSiteReleases")].isNull() && m_trion_site_releases_isValid;

    m_tri_releases_transfers_isValid = ::OpenAPI::fromJsonValue(m_tri_releases_transfers, json[QString("TRIReleasesTransfers")]);
    m_tri_releases_transfers_isSet = !json[QString("TRIReleasesTransfers")].isNull() && m_tri_releases_transfers_isValid;

    m_tri_reporter_isValid = ::OpenAPI::fromJsonValue(m_tri_reporter, json[QString("TRIReporter")]);
    m_tri_reporter_isSet = !json[QString("TRIReporter")].isNull() && m_tri_reporter_isValid;

    m_tri_reporter_in_past_isValid = ::OpenAPI::fromJsonValue(m_tri_reporter_in_past, json[QString("TRIReporterInPast")]);
    m_tri_reporter_in_past_isSet = !json[QString("TRIReporterInPast")].isNull() && m_tri_reporter_in_past_isValid;

    m_tr_ibal_flag_isValid = ::OpenAPI::fromJsonValue(m_tr_ibal_flag, json[QString("TRIbalFlag")]);
    m_tr_ibal_flag_isSet = !json[QString("TRIbalFlag")].isNull() && m_tr_ibal_flag_isValid;

    m_tsca_flag_isValid = ::OpenAPI::fromJsonValue(m_tsca_flag, json[QString("TscaFlag")]);
    m_tsca_flag_isSet = !json[QString("TscaFlag")].isNull() && m_tsca_flag_isValid;

    m_tsca_ids_isValid = ::OpenAPI::fromJsonValue(m_tsca_ids, json[QString("TscaIDs")]);
    m_tsca_ids_isSet = !json[QString("TscaIDs")].isNull() && m_tsca_ids_isValid;

    m_tsca_inspections5yr_isValid = ::OpenAPI::fromJsonValue(m_tsca_inspections5yr, json[QString("TscaInspections5yr")]);
    m_tsca_inspections5yr_isSet = !json[QString("TscaInspections5yr")].isNull() && m_tsca_inspections5yr_isValid;

    m_viol_flag_isValid = ::OpenAPI::fromJsonValue(m_viol_flag, json[QString("ViolFlag")]);
    m_viol_flag_isSet = !json[QString("ViolFlag")].isNull() && m_viol_flag_isValid;

    m_web_docs_isValid = ::OpenAPI::fromJsonValue(m_web_docs, json[QString("WebDocs")]);
    m_web_docs_isSet = !json[QString("WebDocs")].isNull() && m_web_docs_isValid;
}

QString OAIEcho03::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcho03::asJsonObject() const {
    QJsonObject obj;
    if (m_air_flag_isSet) {
        obj.insert(QString("AIRFlag"), ::OpenAPI::toJsonValue(m_air_flag));
    }
    if (m_airids_isSet) {
        obj.insert(QString("AIRIDs"), ::OpenAPI::toJsonValue(m_airids));
    }
    if (m_active_lower48_isSet) {
        obj.insert(QString("ActiveLower48"), ::OpenAPI::toJsonValue(m_active_lower48));
    }
    if (m_biosolids_flag_isSet) {
        obj.insert(QString("BiosolidsFlag"), ::OpenAPI::toJsonValue(m_biosolids_flag));
    }
    if (m_caa3yr_compl_qtrs_history_isSet) {
        obj.insert(QString("CAA3yrComplQtrsHistory"), ::OpenAPI::toJsonValue(m_caa3yr_compl_qtrs_history));
    }
    if (m_caa_compliance_status_isSet) {
        obj.insert(QString("CAAComplianceStatus"), ::OpenAPI::toJsonValue(m_caa_compliance_status));
    }
    if (m_caa_date_last_formal_action_isSet) {
        obj.insert(QString("CAADateLastFormalAction"), ::OpenAPI::toJsonValue(m_caa_date_last_formal_action));
    }
    if (m_caa_days_last_evaluation_isSet) {
        obj.insert(QString("CAADaysLastEvaluation"), ::OpenAPI::toJsonValue(m_caa_days_last_evaluation));
    }
    if (m_caa_evaluation_count_isSet) {
        obj.insert(QString("CAAEvaluationCount"), ::OpenAPI::toJsonValue(m_caa_evaluation_count));
    }
    if (m_caa_formal_action_count_isSet) {
        obj.insert(QString("CAAFormalActionCount"), ::OpenAPI::toJsonValue(m_caa_formal_action_count));
    }
    if (m_caa_hpv_flag_isSet) {
        obj.insert(QString("CAAHpvFlag"), ::OpenAPI::toJsonValue(m_caa_hpv_flag));
    }
    if (m_caa_informal_count_isSet) {
        obj.insert(QString("CAAInformalCount"), ::OpenAPI::toJsonValue(m_caa_informal_count));
    }
    if (m_caa_last_penalty_amt_isSet) {
        obj.insert(QString("CAALastPenaltyAmt"), ::OpenAPI::toJsonValue(m_caa_last_penalty_amt));
    }
    if (m_caa_last_penalty_date_isSet) {
        obj.insert(QString("CAALastPenaltyDate"), ::OpenAPI::toJsonValue(m_caa_last_penalty_date));
    }
    if (m_caanaics_isSet) {
        obj.insert(QString("CAANAICS"), ::OpenAPI::toJsonValue(m_caanaics));
    }
    if (m_caa_penalties_isSet) {
        obj.insert(QString("CAAPenalties"), ::OpenAPI::toJsonValue(m_caa_penalties));
    }
    if (m_caa_permit_types_isSet) {
        obj.insert(QString("CAAPermitTypes"), ::OpenAPI::toJsonValue(m_caa_permit_types));
    }
    if (m_caa_qtrs_with_nc_isSet) {
        obj.insert(QString("CAAQtrsWithNC"), ::OpenAPI::toJsonValue(m_caa_qtrs_with_nc));
    }
    if (m_caasics_isSet) {
        obj.insert(QString("CAASICs"), ::OpenAPI::toJsonValue(m_caasics));
    }
    if (m_cwa13qtrs_compl_history_isSet) {
        obj.insert(QString("CWA13qtrsComplHistory"), ::OpenAPI::toJsonValue(m_cwa13qtrs_compl_history));
    }
    if (m_cwa13qtrs_efflnt_exceedances_isSet) {
        obj.insert(QString("CWA13qtrsEfflntExceedances"), ::OpenAPI::toJsonValue(m_cwa13qtrs_efflnt_exceedances));
    }
    if (m_cwa3_yr_qncr_codes_isSet) {
        obj.insert(QString("CWA3YrQncrCodes"), ::OpenAPI::toJsonValue(m_cwa3_yr_qncr_codes));
    }
    if (m_cwa_compliance_status_isSet) {
        obj.insert(QString("CWAComplianceStatus"), ::OpenAPI::toJsonValue(m_cwa_compliance_status));
    }
    if (m_cwa_compliance_tracking_isSet) {
        obj.insert(QString("CWAComplianceTracking"), ::OpenAPI::toJsonValue(m_cwa_compliance_tracking));
    }
    if (m_cwa_date_last_formal_action_isSet) {
        obj.insert(QString("CWADateLastFormalAction"), ::OpenAPI::toJsonValue(m_cwa_date_last_formal_action));
    }
    if (m_cwa_days_last_inspection_isSet) {
        obj.insert(QString("CWADaysLastInspection"), ::OpenAPI::toJsonValue(m_cwa_days_last_inspection));
    }
    if (m_cwa_formal_action_count_isSet) {
        obj.insert(QString("CWAFormalActionCount"), ::OpenAPI::toJsonValue(m_cwa_formal_action_count));
    }
    if (m_cwa_informal_count_isSet) {
        obj.insert(QString("CWAInformalCount"), ::OpenAPI::toJsonValue(m_cwa_informal_count));
    }
    if (m_cwa_inspection_count_isSet) {
        obj.insert(QString("CWAInspectionCount"), ::OpenAPI::toJsonValue(m_cwa_inspection_count));
    }
    if (m_cwa_last_penalty_amt_isSet) {
        obj.insert(QString("CWALastPenaltyAmt"), ::OpenAPI::toJsonValue(m_cwa_last_penalty_amt));
    }
    if (m_cwa_last_penalty_date_isSet) {
        obj.insert(QString("CWALastPenaltyDate"), ::OpenAPI::toJsonValue(m_cwa_last_penalty_date));
    }
    if (m_cwanaics_isSet) {
        obj.insert(QString("CWANAICS"), ::OpenAPI::toJsonValue(m_cwanaics));
    }
    if (m_cwa_penalties_isSet) {
        obj.insert(QString("CWAPenalties"), ::OpenAPI::toJsonValue(m_cwa_penalties));
    }
    if (m_cwa_permit_types_isSet) {
        obj.insert(QString("CWAPermitTypes"), ::OpenAPI::toJsonValue(m_cwa_permit_types));
    }
    if (m_cwa_qtrs_with_nc_isSet) {
        obj.insert(QString("CWAQtrsWithNC"), ::OpenAPI::toJsonValue(m_cwa_qtrs_with_nc));
    }
    if (m_cwasics_isSet) {
        obj.insert(QString("CWASICs"), ::OpenAPI::toJsonValue(m_cwasics));
    }
    if (m_cwasnc_flag_isSet) {
        obj.insert(QString("CWASNCFlag"), ::OpenAPI::toJsonValue(m_cwasnc_flag));
    }
    if (m_camd_ids_isSet) {
        obj.insert(QString("CamdIDs"), ::OpenAPI::toJsonValue(m_camd_ids));
    }
    if (m_census_block_group_isSet) {
        obj.insert(QString("CensusBlockGroup"), ::OpenAPI::toJsonValue(m_census_block_group));
    }
    if (m_curr_sv_flag_isSet) {
        obj.insert(QString("CurrSvFlag"), ::OpenAPI::toJsonValue(m_curr_sv_flag));
    }
    if (m_curr_vio_flag_isSet) {
        obj.insert(QString("CurrVioFlag"), ::OpenAPI::toJsonValue(m_curr_vio_flag));
    }
    if (m_dfr_url_isSet) {
        obj.insert(QString("DfrUrl"), ::OpenAPI::toJsonValue(m_dfr_url));
    }
    if (m_ea5yr_flag_isSet) {
        obj.insert(QString("Ea5yrFlag"), ::OpenAPI::toJsonValue(m_ea5yr_flag));
    }
    if (m_eff_charts_flag_isSet) {
        obj.insert(QString("EffChartsFlag"), ::OpenAPI::toJsonValue(m_eff_charts_flag));
    }
    if (m_eis_flag_isSet) {
        obj.insert(QString("EisFlag"), ::OpenAPI::toJsonValue(m_eis_flag));
    }
    if (m_eis_ids_isSet) {
        obj.insert(QString("EisIDs"), ::OpenAPI::toJsonValue(m_eis_ids));
    }
    if (m_ejscreen_flag_isSet) {
        obj.insert(QString("EjscreenFlag"), ::OpenAPI::toJsonValue(m_ejscreen_flag));
    }
    if (m_ejscreen_flag_us_isSet) {
        obj.insert(QString("EjscreenFlagUs"), ::OpenAPI::toJsonValue(m_ejscreen_flag_us));
    }
    if (m_epcra_inspections5yr_isSet) {
        obj.insert(QString("EpcraInspections5yr"), ::OpenAPI::toJsonValue(m_epcra_inspections5yr));
    }
    if (m_fac3yr_compliance_history_isSet) {
        obj.insert(QString("Fac3yrComplianceHistory"), ::OpenAPI::toJsonValue(m_fac3yr_compliance_history));
    }
    if (m_fac_accuracy_meters_isSet) {
        obj.insert(QString("FacAccuracyMeters"), ::OpenAPI::toJsonValue(m_fac_accuracy_meters));
    }
    if (m_fac_active_flag_isSet) {
        obj.insert(QString("FacActiveFlag"), ::OpenAPI::toJsonValue(m_fac_active_flag));
    }
    if (m_fac_chesapeake_bay_flg_isSet) {
        obj.insert(QString("FacChesapeakeBayFlg"), ::OpenAPI::toJsonValue(m_fac_chesapeake_bay_flg));
    }
    if (m_fac_city_isSet) {
        obj.insert(QString("FacCity"), ::OpenAPI::toJsonValue(m_fac_city));
    }
    if (m_fac_collection_method_isSet) {
        obj.insert(QString("FacCollectionMethod"), ::OpenAPI::toJsonValue(m_fac_collection_method));
    }
    if (m_fac_compliance_status_isSet) {
        obj.insert(QString("FacComplianceStatus"), ::OpenAPI::toJsonValue(m_fac_compliance_status));
    }
    if (m_fac_county_isSet) {
        obj.insert(QString("FacCounty"), ::OpenAPI::toJsonValue(m_fac_county));
    }
    if (m_fac_date_last_formal_act_epa_isSet) {
        obj.insert(QString("FacDateLastFormalActEPA"), ::OpenAPI::toJsonValue(m_fac_date_last_formal_act_epa));
    }
    if (m_fac_date_last_formal_act_st_isSet) {
        obj.insert(QString("FacDateLastFormalActSt"), ::OpenAPI::toJsonValue(m_fac_date_last_formal_act_st));
    }
    if (m_fac_date_last_formal_action_isSet) {
        obj.insert(QString("FacDateLastFormalAction"), ::OpenAPI::toJsonValue(m_fac_date_last_formal_action));
    }
    if (m_fac_date_last_informal_act_epa_isSet) {
        obj.insert(QString("FacDateLastInformalActEPA"), ::OpenAPI::toJsonValue(m_fac_date_last_informal_act_epa));
    }
    if (m_fac_date_last_informal_act_st_isSet) {
        obj.insert(QString("FacDateLastInformalActSt"), ::OpenAPI::toJsonValue(m_fac_date_last_informal_act_st));
    }
    if (m_fac_date_last_informal_action_isSet) {
        obj.insert(QString("FacDateLastInformalAction"), ::OpenAPI::toJsonValue(m_fac_date_last_informal_action));
    }
    if (m_fac_date_last_inspection_isSet) {
        obj.insert(QString("FacDateLastInspection"), ::OpenAPI::toJsonValue(m_fac_date_last_inspection));
    }
    if (m_fac_date_last_inspection_epa_isSet) {
        obj.insert(QString("FacDateLastInspectionEPA"), ::OpenAPI::toJsonValue(m_fac_date_last_inspection_epa));
    }
    if (m_fac_date_last_inspection_state_isSet) {
        obj.insert(QString("FacDateLastInspectionState"), ::OpenAPI::toJsonValue(m_fac_date_last_inspection_state));
    }
    if (m_fac_date_last_penalty_isSet) {
        obj.insert(QString("FacDateLastPenalty"), ::OpenAPI::toJsonValue(m_fac_date_last_penalty));
    }
    if (m_fac_days_last_inspection_isSet) {
        obj.insert(QString("FacDaysLastInspection"), ::OpenAPI::toJsonValue(m_fac_days_last_inspection));
    }
    if (m_fac_derived_cb2010_isSet) {
        obj.insert(QString("FacDerivedCb2010"), ::OpenAPI::toJsonValue(m_fac_derived_cb2010));
    }
    if (m_fac_derived_cd113_isSet) {
        obj.insert(QString("FacDerivedCd113"), ::OpenAPI::toJsonValue(m_fac_derived_cd113));
    }
    if (m_fac_derived_huc_isSet) {
        obj.insert(QString("FacDerivedHuc"), ::OpenAPI::toJsonValue(m_fac_derived_huc));
    }
    if (m_fac_derived_rad_wbdhu12_isSet) {
        obj.insert(QString("FacDerivedRadWBDHu12"), ::OpenAPI::toJsonValue(m_fac_derived_rad_wbdhu12));
    }
    if (m_fac_derived_rad_wbdhu12_name_isSet) {
        obj.insert(QString("FacDerivedRadWBDHu12Name"), ::OpenAPI::toJsonValue(m_fac_derived_rad_wbdhu12_name));
    }
    if (m_fac_derived_rad_wbdhu8_isSet) {
        obj.insert(QString("FacDerivedRadWBDHu8"), ::OpenAPI::toJsonValue(m_fac_derived_rad_wbdhu8));
    }
    if (m_fac_derived_rad_wbdhu8_name_isSet) {
        obj.insert(QString("FacDerivedRadWBDHu8Name"), ::OpenAPI::toJsonValue(m_fac_derived_rad_wbdhu8_name));
    }
    if (m_fac_derived_stcty_fips_isSet) {
        obj.insert(QString("FacDerivedStctyFIPS"), ::OpenAPI::toJsonValue(m_fac_derived_stcty_fips));
    }
    if (m_fac_derived_tr_ibes_isSet) {
        obj.insert(QString("FacDerivedTRIbes"), ::OpenAPI::toJsonValue(m_fac_derived_tr_ibes));
    }
    if (m_fac_derived_wbd_isSet) {
        obj.insert(QString("FacDerivedWBD"), ::OpenAPI::toJsonValue(m_fac_derived_wbd));
    }
    if (m_fac_derived_wbdhu12_name_isSet) {
        obj.insert(QString("FacDerivedWBDHu12Name"), ::OpenAPI::toJsonValue(m_fac_derived_wbdhu12_name));
    }
    if (m_fac_derived_wbdhu8_isSet) {
        obj.insert(QString("FacDerivedWBDHu8"), ::OpenAPI::toJsonValue(m_fac_derived_wbdhu8));
    }
    if (m_fac_derived_wbdhu8_name_isSet) {
        obj.insert(QString("FacDerivedWBDHu8Name"), ::OpenAPI::toJsonValue(m_fac_derived_wbdhu8_name));
    }
    if (m_fac_derived_zip_isSet) {
        obj.insert(QString("FacDerivedZip"), ::OpenAPI::toJsonValue(m_fac_derived_zip));
    }
    if (m_fac_epa_region_isSet) {
        obj.insert(QString("FacEPARegion"), ::OpenAPI::toJsonValue(m_fac_epa_region));
    }
    if (m_fac_fips_code_isSet) {
        obj.insert(QString("FacFIPSCode"), ::OpenAPI::toJsonValue(m_fac_fips_code));
    }
    if (m_fac_federal_agency_isSet) {
        obj.insert(QString("FacFederalAgency"), ::OpenAPI::toJsonValue(m_fac_federal_agency));
    }
    if (m_fac_federal_agency_name_isSet) {
        obj.insert(QString("FacFederalAgencyName"), ::OpenAPI::toJsonValue(m_fac_federal_agency_name));
    }
    if (m_fac_federal_flg_isSet) {
        obj.insert(QString("FacFederalFlg"), ::OpenAPI::toJsonValue(m_fac_federal_flg));
    }
    if (m_fac_formal_action_count_isSet) {
        obj.insert(QString("FacFormalActionCount"), ::OpenAPI::toJsonValue(m_fac_formal_action_count));
    }
    if (m_fac_imp_water_flg_isSet) {
        obj.insert(QString("FacImpWaterFlg"), ::OpenAPI::toJsonValue(m_fac_imp_water_flg));
    }
    if (m_fac_indian_cntry_flg_isSet) {
        obj.insert(QString("FacIndianCntryFlg"), ::OpenAPI::toJsonValue(m_fac_indian_cntry_flg));
    }
    if (m_fac_indian_spatial_flg_isSet) {
        obj.insert(QString("FacIndianSpatialFlg"), ::OpenAPI::toJsonValue(m_fac_indian_spatial_flg));
    }
    if (m_fac_informal_count_isSet) {
        obj.insert(QString("FacInformalCount"), ::OpenAPI::toJsonValue(m_fac_informal_count));
    }
    if (m_fac_inspection_count_isSet) {
        obj.insert(QString("FacInspectionCount"), ::OpenAPI::toJsonValue(m_fac_inspection_count));
    }
    if (m_fac_last_penalty_amt_isSet) {
        obj.insert(QString("FacLastPenaltyAmt"), ::OpenAPI::toJsonValue(m_fac_last_penalty_amt));
    }
    if (m_fac_lat_isSet) {
        obj.insert(QString("FacLat"), ::OpenAPI::toJsonValue(m_fac_lat));
    }
    if (m_fac_long_isSet) {
        obj.insert(QString("FacLong"), ::OpenAPI::toJsonValue(m_fac_long));
    }
    if (m_fac_major_flag_isSet) {
        obj.insert(QString("FacMajorFlag"), ::OpenAPI::toJsonValue(m_fac_major_flag));
    }
    if (m_fac_map_flg_isSet) {
        obj.insert(QString("FacMapFlg"), ::OpenAPI::toJsonValue(m_fac_map_flg));
    }
    if (m_fac_map_icon_isSet) {
        obj.insert(QString("FacMapIcon"), ::OpenAPI::toJsonValue(m_fac_map_icon));
    }
    if (m_fac_myrtk_universe_isSet) {
        obj.insert(QString("FacMyrtkUniverse"), ::OpenAPI::toJsonValue(m_fac_myrtk_universe));
    }
    if (m_fac_naics_codes_isSet) {
        obj.insert(QString("FacNAICSCodes"), ::OpenAPI::toJsonValue(m_fac_naics_codes));
    }
    if (m_fac_naa_flag_isSet) {
        obj.insert(QString("FacNaaFlag"), ::OpenAPI::toJsonValue(m_fac_naa_flag));
    }
    if (m_fac_name_isSet) {
        obj.insert(QString("FacName"), ::OpenAPI::toJsonValue(m_fac_name));
    }
    if (m_fac_penalty_count_isSet) {
        obj.insert(QString("FacPenaltyCount"), ::OpenAPI::toJsonValue(m_fac_penalty_count));
    }
    if (m_fac_percent_minority_isSet) {
        obj.insert(QString("FacPercentMinority"), ::OpenAPI::toJsonValue(m_fac_percent_minority));
    }
    if (m_fac_pop_den_isSet) {
        obj.insert(QString("FacPopDen"), ::OpenAPI::toJsonValue(m_fac_pop_den));
    }
    if (m_fac_programs_with_snc_isSet) {
        obj.insert(QString("FacProgramsWithSNC"), ::OpenAPI::toJsonValue(m_fac_programs_with_snc));
    }
    if (m_fac_qtrs_with_nc_isSet) {
        obj.insert(QString("FacQtrsWithNC"), ::OpenAPI::toJsonValue(m_fac_qtrs_with_nc));
    }
    if (m_fac_reference_point_isSet) {
        obj.insert(QString("FacReferencePoint"), ::OpenAPI::toJsonValue(m_fac_reference_point));
    }
    if (m_fac_sic_codes_isSet) {
        obj.insert(QString("FacSICCodes"), ::OpenAPI::toJsonValue(m_fac_sic_codes));
    }
    if (m_fac_snc_flg_isSet) {
        obj.insert(QString("FacSNCFlg"), ::OpenAPI::toJsonValue(m_fac_snc_flg));
    }
    if (m_fac_state_isSet) {
        obj.insert(QString("FacState"), ::OpenAPI::toJsonValue(m_fac_state));
    }
    if (m_fac_std_county_name_isSet) {
        obj.insert(QString("FacStdCountyName"), ::OpenAPI::toJsonValue(m_fac_std_county_name));
    }
    if (m_fac_street_isSet) {
        obj.insert(QString("FacStreet"), ::OpenAPI::toJsonValue(m_fac_street));
    }
    if (m_fac_total_penalties_isSet) {
        obj.insert(QString("FacTotalPenalties"), ::OpenAPI::toJsonValue(m_fac_total_penalties));
    }
    if (m_fac_us_mex_border_flg_isSet) {
        obj.insert(QString("FacUsMexBorderFlg"), ::OpenAPI::toJsonValue(m_fac_us_mex_border_flg));
    }
    if (m_fac_zip_isSet) {
        obj.insert(QString("FacZip"), ::OpenAPI::toJsonValue(m_fac_zip));
    }
    if (m_fec_case_ids_isSet) {
        obj.insert(QString("FecCaseIDs"), ::OpenAPI::toJsonValue(m_fec_case_ids));
    }
    if (m_fec_last_case_date_isSet) {
        obj.insert(QString("FecLastCaseDate"), ::OpenAPI::toJsonValue(m_fec_last_case_date));
    }
    if (m_fec_number_of_cases_isSet) {
        obj.insert(QString("FecNumberOfCases"), ::OpenAPI::toJsonValue(m_fec_number_of_cases));
    }
    if (m_fec_total_penalties_isSet) {
        obj.insert(QString("FecTotalPenalties"), ::OpenAPI::toJsonValue(m_fec_total_penalties));
    }
    if (m_fifra_inspections5yr_isSet) {
        obj.insert(QString("FifraInspections5yr"), ::OpenAPI::toJsonValue(m_fifra_inspections5yr));
    }
    if (m_ghgco2_releases_isSet) {
        obj.insert(QString("GHGCO2Releases"), ::OpenAPI::toJsonValue(m_ghgco2_releases));
    }
    if (m_ghg_flag_isSet) {
        obj.insert(QString("GHGFlag"), ::OpenAPI::toJsonValue(m_ghg_flag));
    }
    if (m_ghgids_isSet) {
        obj.insert(QString("GHGIDs"), ::OpenAPI::toJsonValue(m_ghgids));
    }
    if (m_has_poll_rpt_isSet) {
        obj.insert(QString("HasPollRpt"), ::OpenAPI::toJsonValue(m_has_poll_rpt));
    }
    if (m_infea5yr_flag_isSet) {
        obj.insert(QString("Infea5yrFlag"), ::OpenAPI::toJsonValue(m_infea5yr_flag));
    }
    if (m_insp5yr_flag_isSet) {
        obj.insert(QString("Insp5yrFlag"), ::OpenAPI::toJsonValue(m_insp5yr_flag));
    }
    if (m_lower48_isSet) {
        obj.insert(QString("Lower48"), ::OpenAPI::toJsonValue(m_lower48));
    }
    if (m_max_pctile_us_isSet) {
        obj.insert(QString("MaxPctileUs"), ::OpenAPI::toJsonValue(m_max_pctile_us));
    }
    if (m_max_score_isSet) {
        obj.insert(QString("MaxScore"), ::OpenAPI::toJsonValue(m_max_score));
    }
    if (m_nc_isSet) {
        obj.insert(QString("NC"), ::OpenAPI::toJsonValue(m_nc));
    }
    if (m_npdes_flag_isSet) {
        obj.insert(QString("NPDESFlag"), ::OpenAPI::toJsonValue(m_npdes_flag));
    }
    if (m_npdesids_isSet) {
        obj.insert(QString("NPDESIDs"), ::OpenAPI::toJsonValue(m_npdesids));
    }
    if (m_naa_categories_isSet) {
        obj.insert(QString("NaaCategories"), ::OpenAPI::toJsonValue(m_naa_categories));
    }
    if (m_naa_pollutants_isSet) {
        obj.insert(QString("NaaPollutants"), ::OpenAPI::toJsonValue(m_naa_pollutants));
    }
    if (m_over80_count_us_isSet) {
        obj.insert(QString("Over80CountUs"), ::OpenAPI::toJsonValue(m_over80_count_us));
    }
    if (m_pctile_cancer_us_isSet) {
        obj.insert(QString("PctileCancerUs"), ::OpenAPI::toJsonValue(m_pctile_cancer_us));
    }
    if (m_pctile_dpm_us_isSet) {
        obj.insert(QString("PctileDpmUs"), ::OpenAPI::toJsonValue(m_pctile_dpm_us));
    }
    if (m_pctile_o3_us_isSet) {
        obj.insert(QString("PctileO3Us"), ::OpenAPI::toJsonValue(m_pctile_o3_us));
    }
    if (m_pctile_pctpre1960_us_isSet) {
        obj.insert(QString("PctilePctpre1960Us"), ::OpenAPI::toJsonValue(m_pctile_pctpre1960_us));
    }
    if (m_pctile_pm_us_isSet) {
        obj.insert(QString("PctilePmUs"), ::OpenAPI::toJsonValue(m_pctile_pm_us));
    }
    if (m_pctile_proximity_npdesus_isSet) {
        obj.insert(QString("PctileProximityNPDESUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_npdesus));
    }
    if (m_pctile_proximity_npl_us_isSet) {
        obj.insert(QString("PctileProximityNplUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_npl_us));
    }
    if (m_pctile_proximity_rmp_us_isSet) {
        obj.insert(QString("PctileProximityRmpUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_rmp_us));
    }
    if (m_pctile_proximity_tsdf_us_isSet) {
        obj.insert(QString("PctileProximityTsdfUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_tsdf_us));
    }
    if (m_pctile_resp_us_isSet) {
        obj.insert(QString("PctileRespUs"), ::OpenAPI::toJsonValue(m_pctile_resp_us));
    }
    if (m_pctile_traffic_score_us_isSet) {
        obj.insert(QString("PctileTrafficScoreUs"), ::OpenAPI::toJsonValue(m_pctile_traffic_score_us));
    }
    if (m_rcra3yr_compl_qtrs_history_isSet) {
        obj.insert(QString("RCRA3yrComplQtrsHistory"), ::OpenAPI::toJsonValue(m_rcra3yr_compl_qtrs_history));
    }
    if (m_rcra_compliance_status_isSet) {
        obj.insert(QString("RCRAComplianceStatus"), ::OpenAPI::toJsonValue(m_rcra_compliance_status));
    }
    if (m_rcra_date_last_formal_action_isSet) {
        obj.insert(QString("RCRADateLastFormalAction"), ::OpenAPI::toJsonValue(m_rcra_date_last_formal_action));
    }
    if (m_rcra_days_last_evaluation_isSet) {
        obj.insert(QString("RCRADaysLastEvaluation"), ::OpenAPI::toJsonValue(m_rcra_days_last_evaluation));
    }
    if (m_rcra_flag_isSet) {
        obj.insert(QString("RCRAFlag"), ::OpenAPI::toJsonValue(m_rcra_flag));
    }
    if (m_rcra_formal_action_count_isSet) {
        obj.insert(QString("RCRAFormalActionCount"), ::OpenAPI::toJsonValue(m_rcra_formal_action_count));
    }
    if (m_rcraids_isSet) {
        obj.insert(QString("RCRAIDs"), ::OpenAPI::toJsonValue(m_rcraids));
    }
    if (m_rcra_informal_count_isSet) {
        obj.insert(QString("RCRAInformalCount"), ::OpenAPI::toJsonValue(m_rcra_informal_count));
    }
    if (m_rcra_inspection_count_isSet) {
        obj.insert(QString("RCRAInspectionCount"), ::OpenAPI::toJsonValue(m_rcra_inspection_count));
    }
    if (m_rcra_last_penalty_amt_isSet) {
        obj.insert(QString("RCRALastPenaltyAmt"), ::OpenAPI::toJsonValue(m_rcra_last_penalty_amt));
    }
    if (m_rcra_last_penalty_date_isSet) {
        obj.insert(QString("RCRALastPenaltyDate"), ::OpenAPI::toJsonValue(m_rcra_last_penalty_date));
    }
    if (m_rcranaics_isSet) {
        obj.insert(QString("RCRANAICS"), ::OpenAPI::toJsonValue(m_rcranaics));
    }
    if (m_rcra_penalties_isSet) {
        obj.insert(QString("RCRAPenalties"), ::OpenAPI::toJsonValue(m_rcra_penalties));
    }
    if (m_rcra_permit_types_isSet) {
        obj.insert(QString("RCRAPermitTypes"), ::OpenAPI::toJsonValue(m_rcra_permit_types));
    }
    if (m_rcra_qtrs_with_nc_isSet) {
        obj.insert(QString("RCRAQtrsWithNC"), ::OpenAPI::toJsonValue(m_rcra_qtrs_with_nc));
    }
    if (m_rcrasnc_flag_isSet) {
        obj.insert(QString("RCRASNCFlag"), ::OpenAPI::toJsonValue(m_rcrasnc_flag));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("RegistryID"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_rmp_ids_isSet) {
        obj.insert(QString("RmpIDs"), ::OpenAPI::toJsonValue(m_rmp_ids));
    }
    if (m_sdwa3yr_compl_qtrs_history_isSet) {
        obj.insert(QString("SDWA3yrComplQtrsHistory"), ::OpenAPI::toJsonValue(m_sdwa3yr_compl_qtrs_history));
    }
    if (m_sdwa_compliance_status_isSet) {
        obj.insert(QString("SDWAComplianceStatus"), ::OpenAPI::toJsonValue(m_sdwa_compliance_status));
    }
    if (m_sdwa_formal_action_count_isSet) {
        obj.insert(QString("SDWAFormalActionCount"), ::OpenAPI::toJsonValue(m_sdwa_formal_action_count));
    }
    if (m_sdwaids_isSet) {
        obj.insert(QString("SDWAIDs"), ::OpenAPI::toJsonValue(m_sdwaids));
    }
    if (m_sdwa_informal_count_isSet) {
        obj.insert(QString("SDWAInformalCount"), ::OpenAPI::toJsonValue(m_sdwa_informal_count));
    }
    if (m_sdwa_inspections5yr_isSet) {
        obj.insert(QString("SDWAInspections5yr"), ::OpenAPI::toJsonValue(m_sdwa_inspections5yr));
    }
    if (m_sdwa_qtrs_with_nc_isSet) {
        obj.insert(QString("SDWAQtrsWithNC"), ::OpenAPI::toJsonValue(m_sdwa_qtrs_with_nc));
    }
    if (m_sdwasnc_flag_isSet) {
        obj.insert(QString("SDWASNCFlag"), ::OpenAPI::toJsonValue(m_sdwasnc_flag));
    }
    if (m_sdwa_system_types_isSet) {
        obj.insert(QString("SDWASystemTypes"), ::OpenAPI::toJsonValue(m_sdwa_system_types));
    }
    if (m_sdwis_flag_isSet) {
        obj.insert(QString("SDWISFlag"), ::OpenAPI::toJsonValue(m_sdwis_flag));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_sems_flag_isSet) {
        obj.insert(QString("SemsFlag"), ::OpenAPI::toJsonValue(m_sems_flag));
    }
    if (m_sems_ids_isSet) {
        obj.insert(QString("SemsIDs"), ::OpenAPI::toJsonValue(m_sems_ids));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_tri_flag_isSet) {
        obj.insert(QString("TRIFlag"), ::OpenAPI::toJsonValue(m_tri_flag));
    }
    if (m_triids_isSet) {
        obj.insert(QString("TRIIDs"), ::OpenAPI::toJsonValue(m_triids));
    }
    if (m_tri_off_site_transfers_isSet) {
        obj.insert(QString("TRIOffSiteTransfers"), ::OpenAPI::toJsonValue(m_tri_off_site_transfers));
    }
    if (m_trion_site_releases_isSet) {
        obj.insert(QString("TRIOnSiteReleases"), ::OpenAPI::toJsonValue(m_trion_site_releases));
    }
    if (m_tri_releases_transfers_isSet) {
        obj.insert(QString("TRIReleasesTransfers"), ::OpenAPI::toJsonValue(m_tri_releases_transfers));
    }
    if (m_tri_reporter_isSet) {
        obj.insert(QString("TRIReporter"), ::OpenAPI::toJsonValue(m_tri_reporter));
    }
    if (m_tri_reporter_in_past_isSet) {
        obj.insert(QString("TRIReporterInPast"), ::OpenAPI::toJsonValue(m_tri_reporter_in_past));
    }
    if (m_tr_ibal_flag_isSet) {
        obj.insert(QString("TRIbalFlag"), ::OpenAPI::toJsonValue(m_tr_ibal_flag));
    }
    if (m_tsca_flag_isSet) {
        obj.insert(QString("TscaFlag"), ::OpenAPI::toJsonValue(m_tsca_flag));
    }
    if (m_tsca_ids_isSet) {
        obj.insert(QString("TscaIDs"), ::OpenAPI::toJsonValue(m_tsca_ids));
    }
    if (m_tsca_inspections5yr_isSet) {
        obj.insert(QString("TscaInspections5yr"), ::OpenAPI::toJsonValue(m_tsca_inspections5yr));
    }
    if (m_viol_flag_isSet) {
        obj.insert(QString("ViolFlag"), ::OpenAPI::toJsonValue(m_viol_flag));
    }
    if (m_web_docs_isSet) {
        obj.insert(QString("WebDocs"), ::OpenAPI::toJsonValue(m_web_docs));
    }
    return obj;
}

QString OAIEcho03::getAirFlag() const {
    return m_air_flag;
}
void OAIEcho03::setAirFlag(const QString &air_flag) {
    m_air_flag = air_flag;
    m_air_flag_isSet = true;
}

bool OAIEcho03::is_air_flag_Set() const{
    return m_air_flag_isSet;
}

bool OAIEcho03::is_air_flag_Valid() const{
    return m_air_flag_isValid;
}

QString OAIEcho03::getAirids() const {
    return m_airids;
}
void OAIEcho03::setAirids(const QString &airids) {
    m_airids = airids;
    m_airids_isSet = true;
}

bool OAIEcho03::is_airids_Set() const{
    return m_airids_isSet;
}

bool OAIEcho03::is_airids_Valid() const{
    return m_airids_isValid;
}

QString OAIEcho03::getActiveLower48() const {
    return m_active_lower48;
}
void OAIEcho03::setActiveLower48(const QString &active_lower48) {
    m_active_lower48 = active_lower48;
    m_active_lower48_isSet = true;
}

bool OAIEcho03::is_active_lower48_Set() const{
    return m_active_lower48_isSet;
}

bool OAIEcho03::is_active_lower48_Valid() const{
    return m_active_lower48_isValid;
}

QString OAIEcho03::getBiosolidsFlag() const {
    return m_biosolids_flag;
}
void OAIEcho03::setBiosolidsFlag(const QString &biosolids_flag) {
    m_biosolids_flag = biosolids_flag;
    m_biosolids_flag_isSet = true;
}

bool OAIEcho03::is_biosolids_flag_Set() const{
    return m_biosolids_flag_isSet;
}

bool OAIEcho03::is_biosolids_flag_Valid() const{
    return m_biosolids_flag_isValid;
}

QString OAIEcho03::getCaa3yrComplQtrsHistory() const {
    return m_caa3yr_compl_qtrs_history;
}
void OAIEcho03::setCaa3yrComplQtrsHistory(const QString &caa3yr_compl_qtrs_history) {
    m_caa3yr_compl_qtrs_history = caa3yr_compl_qtrs_history;
    m_caa3yr_compl_qtrs_history_isSet = true;
}

bool OAIEcho03::is_caa3yr_compl_qtrs_history_Set() const{
    return m_caa3yr_compl_qtrs_history_isSet;
}

bool OAIEcho03::is_caa3yr_compl_qtrs_history_Valid() const{
    return m_caa3yr_compl_qtrs_history_isValid;
}

QString OAIEcho03::getCaaComplianceStatus() const {
    return m_caa_compliance_status;
}
void OAIEcho03::setCaaComplianceStatus(const QString &caa_compliance_status) {
    m_caa_compliance_status = caa_compliance_status;
    m_caa_compliance_status_isSet = true;
}

bool OAIEcho03::is_caa_compliance_status_Set() const{
    return m_caa_compliance_status_isSet;
}

bool OAIEcho03::is_caa_compliance_status_Valid() const{
    return m_caa_compliance_status_isValid;
}

QString OAIEcho03::getCaaDateLastFormalAction() const {
    return m_caa_date_last_formal_action;
}
void OAIEcho03::setCaaDateLastFormalAction(const QString &caa_date_last_formal_action) {
    m_caa_date_last_formal_action = caa_date_last_formal_action;
    m_caa_date_last_formal_action_isSet = true;
}

bool OAIEcho03::is_caa_date_last_formal_action_Set() const{
    return m_caa_date_last_formal_action_isSet;
}

bool OAIEcho03::is_caa_date_last_formal_action_Valid() const{
    return m_caa_date_last_formal_action_isValid;
}

QString OAIEcho03::getCaaDaysLastEvaluation() const {
    return m_caa_days_last_evaluation;
}
void OAIEcho03::setCaaDaysLastEvaluation(const QString &caa_days_last_evaluation) {
    m_caa_days_last_evaluation = caa_days_last_evaluation;
    m_caa_days_last_evaluation_isSet = true;
}

bool OAIEcho03::is_caa_days_last_evaluation_Set() const{
    return m_caa_days_last_evaluation_isSet;
}

bool OAIEcho03::is_caa_days_last_evaluation_Valid() const{
    return m_caa_days_last_evaluation_isValid;
}

QString OAIEcho03::getCaaEvaluationCount() const {
    return m_caa_evaluation_count;
}
void OAIEcho03::setCaaEvaluationCount(const QString &caa_evaluation_count) {
    m_caa_evaluation_count = caa_evaluation_count;
    m_caa_evaluation_count_isSet = true;
}

bool OAIEcho03::is_caa_evaluation_count_Set() const{
    return m_caa_evaluation_count_isSet;
}

bool OAIEcho03::is_caa_evaluation_count_Valid() const{
    return m_caa_evaluation_count_isValid;
}

QString OAIEcho03::getCaaFormalActionCount() const {
    return m_caa_formal_action_count;
}
void OAIEcho03::setCaaFormalActionCount(const QString &caa_formal_action_count) {
    m_caa_formal_action_count = caa_formal_action_count;
    m_caa_formal_action_count_isSet = true;
}

bool OAIEcho03::is_caa_formal_action_count_Set() const{
    return m_caa_formal_action_count_isSet;
}

bool OAIEcho03::is_caa_formal_action_count_Valid() const{
    return m_caa_formal_action_count_isValid;
}

QString OAIEcho03::getCaaHpvFlag() const {
    return m_caa_hpv_flag;
}
void OAIEcho03::setCaaHpvFlag(const QString &caa_hpv_flag) {
    m_caa_hpv_flag = caa_hpv_flag;
    m_caa_hpv_flag_isSet = true;
}

bool OAIEcho03::is_caa_hpv_flag_Set() const{
    return m_caa_hpv_flag_isSet;
}

bool OAIEcho03::is_caa_hpv_flag_Valid() const{
    return m_caa_hpv_flag_isValid;
}

QString OAIEcho03::getCaaInformalCount() const {
    return m_caa_informal_count;
}
void OAIEcho03::setCaaInformalCount(const QString &caa_informal_count) {
    m_caa_informal_count = caa_informal_count;
    m_caa_informal_count_isSet = true;
}

bool OAIEcho03::is_caa_informal_count_Set() const{
    return m_caa_informal_count_isSet;
}

bool OAIEcho03::is_caa_informal_count_Valid() const{
    return m_caa_informal_count_isValid;
}

QString OAIEcho03::getCaaLastPenaltyAmt() const {
    return m_caa_last_penalty_amt;
}
void OAIEcho03::setCaaLastPenaltyAmt(const QString &caa_last_penalty_amt) {
    m_caa_last_penalty_amt = caa_last_penalty_amt;
    m_caa_last_penalty_amt_isSet = true;
}

bool OAIEcho03::is_caa_last_penalty_amt_Set() const{
    return m_caa_last_penalty_amt_isSet;
}

bool OAIEcho03::is_caa_last_penalty_amt_Valid() const{
    return m_caa_last_penalty_amt_isValid;
}

QString OAIEcho03::getCaaLastPenaltyDate() const {
    return m_caa_last_penalty_date;
}
void OAIEcho03::setCaaLastPenaltyDate(const QString &caa_last_penalty_date) {
    m_caa_last_penalty_date = caa_last_penalty_date;
    m_caa_last_penalty_date_isSet = true;
}

bool OAIEcho03::is_caa_last_penalty_date_Set() const{
    return m_caa_last_penalty_date_isSet;
}

bool OAIEcho03::is_caa_last_penalty_date_Valid() const{
    return m_caa_last_penalty_date_isValid;
}

QString OAIEcho03::getCaanaics() const {
    return m_caanaics;
}
void OAIEcho03::setCaanaics(const QString &caanaics) {
    m_caanaics = caanaics;
    m_caanaics_isSet = true;
}

bool OAIEcho03::is_caanaics_Set() const{
    return m_caanaics_isSet;
}

bool OAIEcho03::is_caanaics_Valid() const{
    return m_caanaics_isValid;
}

QString OAIEcho03::getCaaPenalties() const {
    return m_caa_penalties;
}
void OAIEcho03::setCaaPenalties(const QString &caa_penalties) {
    m_caa_penalties = caa_penalties;
    m_caa_penalties_isSet = true;
}

bool OAIEcho03::is_caa_penalties_Set() const{
    return m_caa_penalties_isSet;
}

bool OAIEcho03::is_caa_penalties_Valid() const{
    return m_caa_penalties_isValid;
}

QString OAIEcho03::getCaaPermitTypes() const {
    return m_caa_permit_types;
}
void OAIEcho03::setCaaPermitTypes(const QString &caa_permit_types) {
    m_caa_permit_types = caa_permit_types;
    m_caa_permit_types_isSet = true;
}

bool OAIEcho03::is_caa_permit_types_Set() const{
    return m_caa_permit_types_isSet;
}

bool OAIEcho03::is_caa_permit_types_Valid() const{
    return m_caa_permit_types_isValid;
}

QString OAIEcho03::getCaaQtrsWithNc() const {
    return m_caa_qtrs_with_nc;
}
void OAIEcho03::setCaaQtrsWithNc(const QString &caa_qtrs_with_nc) {
    m_caa_qtrs_with_nc = caa_qtrs_with_nc;
    m_caa_qtrs_with_nc_isSet = true;
}

bool OAIEcho03::is_caa_qtrs_with_nc_Set() const{
    return m_caa_qtrs_with_nc_isSet;
}

bool OAIEcho03::is_caa_qtrs_with_nc_Valid() const{
    return m_caa_qtrs_with_nc_isValid;
}

QString OAIEcho03::getCaasics() const {
    return m_caasics;
}
void OAIEcho03::setCaasics(const QString &caasics) {
    m_caasics = caasics;
    m_caasics_isSet = true;
}

bool OAIEcho03::is_caasics_Set() const{
    return m_caasics_isSet;
}

bool OAIEcho03::is_caasics_Valid() const{
    return m_caasics_isValid;
}

QString OAIEcho03::getCwa13qtrsComplHistory() const {
    return m_cwa13qtrs_compl_history;
}
void OAIEcho03::setCwa13qtrsComplHistory(const QString &cwa13qtrs_compl_history) {
    m_cwa13qtrs_compl_history = cwa13qtrs_compl_history;
    m_cwa13qtrs_compl_history_isSet = true;
}

bool OAIEcho03::is_cwa13qtrs_compl_history_Set() const{
    return m_cwa13qtrs_compl_history_isSet;
}

bool OAIEcho03::is_cwa13qtrs_compl_history_Valid() const{
    return m_cwa13qtrs_compl_history_isValid;
}

QString OAIEcho03::getCwa13qtrsEfflntExceedances() const {
    return m_cwa13qtrs_efflnt_exceedances;
}
void OAIEcho03::setCwa13qtrsEfflntExceedances(const QString &cwa13qtrs_efflnt_exceedances) {
    m_cwa13qtrs_efflnt_exceedances = cwa13qtrs_efflnt_exceedances;
    m_cwa13qtrs_efflnt_exceedances_isSet = true;
}

bool OAIEcho03::is_cwa13qtrs_efflnt_exceedances_Set() const{
    return m_cwa13qtrs_efflnt_exceedances_isSet;
}

bool OAIEcho03::is_cwa13qtrs_efflnt_exceedances_Valid() const{
    return m_cwa13qtrs_efflnt_exceedances_isValid;
}

QString OAIEcho03::getCwa3YrQncrCodes() const {
    return m_cwa3_yr_qncr_codes;
}
void OAIEcho03::setCwa3YrQncrCodes(const QString &cwa3_yr_qncr_codes) {
    m_cwa3_yr_qncr_codes = cwa3_yr_qncr_codes;
    m_cwa3_yr_qncr_codes_isSet = true;
}

bool OAIEcho03::is_cwa3_yr_qncr_codes_Set() const{
    return m_cwa3_yr_qncr_codes_isSet;
}

bool OAIEcho03::is_cwa3_yr_qncr_codes_Valid() const{
    return m_cwa3_yr_qncr_codes_isValid;
}

QString OAIEcho03::getCwaComplianceStatus() const {
    return m_cwa_compliance_status;
}
void OAIEcho03::setCwaComplianceStatus(const QString &cwa_compliance_status) {
    m_cwa_compliance_status = cwa_compliance_status;
    m_cwa_compliance_status_isSet = true;
}

bool OAIEcho03::is_cwa_compliance_status_Set() const{
    return m_cwa_compliance_status_isSet;
}

bool OAIEcho03::is_cwa_compliance_status_Valid() const{
    return m_cwa_compliance_status_isValid;
}

QString OAIEcho03::getCwaComplianceTracking() const {
    return m_cwa_compliance_tracking;
}
void OAIEcho03::setCwaComplianceTracking(const QString &cwa_compliance_tracking) {
    m_cwa_compliance_tracking = cwa_compliance_tracking;
    m_cwa_compliance_tracking_isSet = true;
}

bool OAIEcho03::is_cwa_compliance_tracking_Set() const{
    return m_cwa_compliance_tracking_isSet;
}

bool OAIEcho03::is_cwa_compliance_tracking_Valid() const{
    return m_cwa_compliance_tracking_isValid;
}

QString OAIEcho03::getCwaDateLastFormalAction() const {
    return m_cwa_date_last_formal_action;
}
void OAIEcho03::setCwaDateLastFormalAction(const QString &cwa_date_last_formal_action) {
    m_cwa_date_last_formal_action = cwa_date_last_formal_action;
    m_cwa_date_last_formal_action_isSet = true;
}

bool OAIEcho03::is_cwa_date_last_formal_action_Set() const{
    return m_cwa_date_last_formal_action_isSet;
}

bool OAIEcho03::is_cwa_date_last_formal_action_Valid() const{
    return m_cwa_date_last_formal_action_isValid;
}

QString OAIEcho03::getCwaDaysLastInspection() const {
    return m_cwa_days_last_inspection;
}
void OAIEcho03::setCwaDaysLastInspection(const QString &cwa_days_last_inspection) {
    m_cwa_days_last_inspection = cwa_days_last_inspection;
    m_cwa_days_last_inspection_isSet = true;
}

bool OAIEcho03::is_cwa_days_last_inspection_Set() const{
    return m_cwa_days_last_inspection_isSet;
}

bool OAIEcho03::is_cwa_days_last_inspection_Valid() const{
    return m_cwa_days_last_inspection_isValid;
}

QString OAIEcho03::getCwaFormalActionCount() const {
    return m_cwa_formal_action_count;
}
void OAIEcho03::setCwaFormalActionCount(const QString &cwa_formal_action_count) {
    m_cwa_formal_action_count = cwa_formal_action_count;
    m_cwa_formal_action_count_isSet = true;
}

bool OAIEcho03::is_cwa_formal_action_count_Set() const{
    return m_cwa_formal_action_count_isSet;
}

bool OAIEcho03::is_cwa_formal_action_count_Valid() const{
    return m_cwa_formal_action_count_isValid;
}

QString OAIEcho03::getCwaInformalCount() const {
    return m_cwa_informal_count;
}
void OAIEcho03::setCwaInformalCount(const QString &cwa_informal_count) {
    m_cwa_informal_count = cwa_informal_count;
    m_cwa_informal_count_isSet = true;
}

bool OAIEcho03::is_cwa_informal_count_Set() const{
    return m_cwa_informal_count_isSet;
}

bool OAIEcho03::is_cwa_informal_count_Valid() const{
    return m_cwa_informal_count_isValid;
}

QString OAIEcho03::getCwaInspectionCount() const {
    return m_cwa_inspection_count;
}
void OAIEcho03::setCwaInspectionCount(const QString &cwa_inspection_count) {
    m_cwa_inspection_count = cwa_inspection_count;
    m_cwa_inspection_count_isSet = true;
}

bool OAIEcho03::is_cwa_inspection_count_Set() const{
    return m_cwa_inspection_count_isSet;
}

bool OAIEcho03::is_cwa_inspection_count_Valid() const{
    return m_cwa_inspection_count_isValid;
}

QString OAIEcho03::getCwaLastPenaltyAmt() const {
    return m_cwa_last_penalty_amt;
}
void OAIEcho03::setCwaLastPenaltyAmt(const QString &cwa_last_penalty_amt) {
    m_cwa_last_penalty_amt = cwa_last_penalty_amt;
    m_cwa_last_penalty_amt_isSet = true;
}

bool OAIEcho03::is_cwa_last_penalty_amt_Set() const{
    return m_cwa_last_penalty_amt_isSet;
}

bool OAIEcho03::is_cwa_last_penalty_amt_Valid() const{
    return m_cwa_last_penalty_amt_isValid;
}

QString OAIEcho03::getCwaLastPenaltyDate() const {
    return m_cwa_last_penalty_date;
}
void OAIEcho03::setCwaLastPenaltyDate(const QString &cwa_last_penalty_date) {
    m_cwa_last_penalty_date = cwa_last_penalty_date;
    m_cwa_last_penalty_date_isSet = true;
}

bool OAIEcho03::is_cwa_last_penalty_date_Set() const{
    return m_cwa_last_penalty_date_isSet;
}

bool OAIEcho03::is_cwa_last_penalty_date_Valid() const{
    return m_cwa_last_penalty_date_isValid;
}

QString OAIEcho03::getCwanaics() const {
    return m_cwanaics;
}
void OAIEcho03::setCwanaics(const QString &cwanaics) {
    m_cwanaics = cwanaics;
    m_cwanaics_isSet = true;
}

bool OAIEcho03::is_cwanaics_Set() const{
    return m_cwanaics_isSet;
}

bool OAIEcho03::is_cwanaics_Valid() const{
    return m_cwanaics_isValid;
}

QString OAIEcho03::getCwaPenalties() const {
    return m_cwa_penalties;
}
void OAIEcho03::setCwaPenalties(const QString &cwa_penalties) {
    m_cwa_penalties = cwa_penalties;
    m_cwa_penalties_isSet = true;
}

bool OAIEcho03::is_cwa_penalties_Set() const{
    return m_cwa_penalties_isSet;
}

bool OAIEcho03::is_cwa_penalties_Valid() const{
    return m_cwa_penalties_isValid;
}

QString OAIEcho03::getCwaPermitTypes() const {
    return m_cwa_permit_types;
}
void OAIEcho03::setCwaPermitTypes(const QString &cwa_permit_types) {
    m_cwa_permit_types = cwa_permit_types;
    m_cwa_permit_types_isSet = true;
}

bool OAIEcho03::is_cwa_permit_types_Set() const{
    return m_cwa_permit_types_isSet;
}

bool OAIEcho03::is_cwa_permit_types_Valid() const{
    return m_cwa_permit_types_isValid;
}

QString OAIEcho03::getCwaQtrsWithNc() const {
    return m_cwa_qtrs_with_nc;
}
void OAIEcho03::setCwaQtrsWithNc(const QString &cwa_qtrs_with_nc) {
    m_cwa_qtrs_with_nc = cwa_qtrs_with_nc;
    m_cwa_qtrs_with_nc_isSet = true;
}

bool OAIEcho03::is_cwa_qtrs_with_nc_Set() const{
    return m_cwa_qtrs_with_nc_isSet;
}

bool OAIEcho03::is_cwa_qtrs_with_nc_Valid() const{
    return m_cwa_qtrs_with_nc_isValid;
}

QString OAIEcho03::getCwasics() const {
    return m_cwasics;
}
void OAIEcho03::setCwasics(const QString &cwasics) {
    m_cwasics = cwasics;
    m_cwasics_isSet = true;
}

bool OAIEcho03::is_cwasics_Set() const{
    return m_cwasics_isSet;
}

bool OAIEcho03::is_cwasics_Valid() const{
    return m_cwasics_isValid;
}

QString OAIEcho03::getCwasncFlag() const {
    return m_cwasnc_flag;
}
void OAIEcho03::setCwasncFlag(const QString &cwasnc_flag) {
    m_cwasnc_flag = cwasnc_flag;
    m_cwasnc_flag_isSet = true;
}

bool OAIEcho03::is_cwasnc_flag_Set() const{
    return m_cwasnc_flag_isSet;
}

bool OAIEcho03::is_cwasnc_flag_Valid() const{
    return m_cwasnc_flag_isValid;
}

QString OAIEcho03::getCamdIds() const {
    return m_camd_ids;
}
void OAIEcho03::setCamdIds(const QString &camd_ids) {
    m_camd_ids = camd_ids;
    m_camd_ids_isSet = true;
}

bool OAIEcho03::is_camd_ids_Set() const{
    return m_camd_ids_isSet;
}

bool OAIEcho03::is_camd_ids_Valid() const{
    return m_camd_ids_isValid;
}

QString OAIEcho03::getCensusBlockGroup() const {
    return m_census_block_group;
}
void OAIEcho03::setCensusBlockGroup(const QString &census_block_group) {
    m_census_block_group = census_block_group;
    m_census_block_group_isSet = true;
}

bool OAIEcho03::is_census_block_group_Set() const{
    return m_census_block_group_isSet;
}

bool OAIEcho03::is_census_block_group_Valid() const{
    return m_census_block_group_isValid;
}

QString OAIEcho03::getCurrSvFlag() const {
    return m_curr_sv_flag;
}
void OAIEcho03::setCurrSvFlag(const QString &curr_sv_flag) {
    m_curr_sv_flag = curr_sv_flag;
    m_curr_sv_flag_isSet = true;
}

bool OAIEcho03::is_curr_sv_flag_Set() const{
    return m_curr_sv_flag_isSet;
}

bool OAIEcho03::is_curr_sv_flag_Valid() const{
    return m_curr_sv_flag_isValid;
}

QString OAIEcho03::getCurrVioFlag() const {
    return m_curr_vio_flag;
}
void OAIEcho03::setCurrVioFlag(const QString &curr_vio_flag) {
    m_curr_vio_flag = curr_vio_flag;
    m_curr_vio_flag_isSet = true;
}

bool OAIEcho03::is_curr_vio_flag_Set() const{
    return m_curr_vio_flag_isSet;
}

bool OAIEcho03::is_curr_vio_flag_Valid() const{
    return m_curr_vio_flag_isValid;
}

QString OAIEcho03::getDfrUrl() const {
    return m_dfr_url;
}
void OAIEcho03::setDfrUrl(const QString &dfr_url) {
    m_dfr_url = dfr_url;
    m_dfr_url_isSet = true;
}

bool OAIEcho03::is_dfr_url_Set() const{
    return m_dfr_url_isSet;
}

bool OAIEcho03::is_dfr_url_Valid() const{
    return m_dfr_url_isValid;
}

QString OAIEcho03::getEa5yrFlag() const {
    return m_ea5yr_flag;
}
void OAIEcho03::setEa5yrFlag(const QString &ea5yr_flag) {
    m_ea5yr_flag = ea5yr_flag;
    m_ea5yr_flag_isSet = true;
}

bool OAIEcho03::is_ea5yr_flag_Set() const{
    return m_ea5yr_flag_isSet;
}

bool OAIEcho03::is_ea5yr_flag_Valid() const{
    return m_ea5yr_flag_isValid;
}

QString OAIEcho03::getEffChartsFlag() const {
    return m_eff_charts_flag;
}
void OAIEcho03::setEffChartsFlag(const QString &eff_charts_flag) {
    m_eff_charts_flag = eff_charts_flag;
    m_eff_charts_flag_isSet = true;
}

bool OAIEcho03::is_eff_charts_flag_Set() const{
    return m_eff_charts_flag_isSet;
}

bool OAIEcho03::is_eff_charts_flag_Valid() const{
    return m_eff_charts_flag_isValid;
}

QString OAIEcho03::getEisFlag() const {
    return m_eis_flag;
}
void OAIEcho03::setEisFlag(const QString &eis_flag) {
    m_eis_flag = eis_flag;
    m_eis_flag_isSet = true;
}

bool OAIEcho03::is_eis_flag_Set() const{
    return m_eis_flag_isSet;
}

bool OAIEcho03::is_eis_flag_Valid() const{
    return m_eis_flag_isValid;
}

QString OAIEcho03::getEisIds() const {
    return m_eis_ids;
}
void OAIEcho03::setEisIds(const QString &eis_ids) {
    m_eis_ids = eis_ids;
    m_eis_ids_isSet = true;
}

bool OAIEcho03::is_eis_ids_Set() const{
    return m_eis_ids_isSet;
}

bool OAIEcho03::is_eis_ids_Valid() const{
    return m_eis_ids_isValid;
}

QString OAIEcho03::getEjscreenFlag() const {
    return m_ejscreen_flag;
}
void OAIEcho03::setEjscreenFlag(const QString &ejscreen_flag) {
    m_ejscreen_flag = ejscreen_flag;
    m_ejscreen_flag_isSet = true;
}

bool OAIEcho03::is_ejscreen_flag_Set() const{
    return m_ejscreen_flag_isSet;
}

bool OAIEcho03::is_ejscreen_flag_Valid() const{
    return m_ejscreen_flag_isValid;
}

QString OAIEcho03::getEjscreenFlagUs() const {
    return m_ejscreen_flag_us;
}
void OAIEcho03::setEjscreenFlagUs(const QString &ejscreen_flag_us) {
    m_ejscreen_flag_us = ejscreen_flag_us;
    m_ejscreen_flag_us_isSet = true;
}

bool OAIEcho03::is_ejscreen_flag_us_Set() const{
    return m_ejscreen_flag_us_isSet;
}

bool OAIEcho03::is_ejscreen_flag_us_Valid() const{
    return m_ejscreen_flag_us_isValid;
}

QString OAIEcho03::getEpcraInspections5yr() const {
    return m_epcra_inspections5yr;
}
void OAIEcho03::setEpcraInspections5yr(const QString &epcra_inspections5yr) {
    m_epcra_inspections5yr = epcra_inspections5yr;
    m_epcra_inspections5yr_isSet = true;
}

bool OAIEcho03::is_epcra_inspections5yr_Set() const{
    return m_epcra_inspections5yr_isSet;
}

bool OAIEcho03::is_epcra_inspections5yr_Valid() const{
    return m_epcra_inspections5yr_isValid;
}

QString OAIEcho03::getFac3yrComplianceHistory() const {
    return m_fac3yr_compliance_history;
}
void OAIEcho03::setFac3yrComplianceHistory(const QString &fac3yr_compliance_history) {
    m_fac3yr_compliance_history = fac3yr_compliance_history;
    m_fac3yr_compliance_history_isSet = true;
}

bool OAIEcho03::is_fac3yr_compliance_history_Set() const{
    return m_fac3yr_compliance_history_isSet;
}

bool OAIEcho03::is_fac3yr_compliance_history_Valid() const{
    return m_fac3yr_compliance_history_isValid;
}

QString OAIEcho03::getFacAccuracyMeters() const {
    return m_fac_accuracy_meters;
}
void OAIEcho03::setFacAccuracyMeters(const QString &fac_accuracy_meters) {
    m_fac_accuracy_meters = fac_accuracy_meters;
    m_fac_accuracy_meters_isSet = true;
}

bool OAIEcho03::is_fac_accuracy_meters_Set() const{
    return m_fac_accuracy_meters_isSet;
}

bool OAIEcho03::is_fac_accuracy_meters_Valid() const{
    return m_fac_accuracy_meters_isValid;
}

QString OAIEcho03::getFacActiveFlag() const {
    return m_fac_active_flag;
}
void OAIEcho03::setFacActiveFlag(const QString &fac_active_flag) {
    m_fac_active_flag = fac_active_flag;
    m_fac_active_flag_isSet = true;
}

bool OAIEcho03::is_fac_active_flag_Set() const{
    return m_fac_active_flag_isSet;
}

bool OAIEcho03::is_fac_active_flag_Valid() const{
    return m_fac_active_flag_isValid;
}

QString OAIEcho03::getFacChesapeakeBayFlg() const {
    return m_fac_chesapeake_bay_flg;
}
void OAIEcho03::setFacChesapeakeBayFlg(const QString &fac_chesapeake_bay_flg) {
    m_fac_chesapeake_bay_flg = fac_chesapeake_bay_flg;
    m_fac_chesapeake_bay_flg_isSet = true;
}

bool OAIEcho03::is_fac_chesapeake_bay_flg_Set() const{
    return m_fac_chesapeake_bay_flg_isSet;
}

bool OAIEcho03::is_fac_chesapeake_bay_flg_Valid() const{
    return m_fac_chesapeake_bay_flg_isValid;
}

QString OAIEcho03::getFacCity() const {
    return m_fac_city;
}
void OAIEcho03::setFacCity(const QString &fac_city) {
    m_fac_city = fac_city;
    m_fac_city_isSet = true;
}

bool OAIEcho03::is_fac_city_Set() const{
    return m_fac_city_isSet;
}

bool OAIEcho03::is_fac_city_Valid() const{
    return m_fac_city_isValid;
}

QString OAIEcho03::getFacCollectionMethod() const {
    return m_fac_collection_method;
}
void OAIEcho03::setFacCollectionMethod(const QString &fac_collection_method) {
    m_fac_collection_method = fac_collection_method;
    m_fac_collection_method_isSet = true;
}

bool OAIEcho03::is_fac_collection_method_Set() const{
    return m_fac_collection_method_isSet;
}

bool OAIEcho03::is_fac_collection_method_Valid() const{
    return m_fac_collection_method_isValid;
}

QString OAIEcho03::getFacComplianceStatus() const {
    return m_fac_compliance_status;
}
void OAIEcho03::setFacComplianceStatus(const QString &fac_compliance_status) {
    m_fac_compliance_status = fac_compliance_status;
    m_fac_compliance_status_isSet = true;
}

bool OAIEcho03::is_fac_compliance_status_Set() const{
    return m_fac_compliance_status_isSet;
}

bool OAIEcho03::is_fac_compliance_status_Valid() const{
    return m_fac_compliance_status_isValid;
}

QString OAIEcho03::getFacCounty() const {
    return m_fac_county;
}
void OAIEcho03::setFacCounty(const QString &fac_county) {
    m_fac_county = fac_county;
    m_fac_county_isSet = true;
}

bool OAIEcho03::is_fac_county_Set() const{
    return m_fac_county_isSet;
}

bool OAIEcho03::is_fac_county_Valid() const{
    return m_fac_county_isValid;
}

QString OAIEcho03::getFacDateLastFormalActEpa() const {
    return m_fac_date_last_formal_act_epa;
}
void OAIEcho03::setFacDateLastFormalActEpa(const QString &fac_date_last_formal_act_epa) {
    m_fac_date_last_formal_act_epa = fac_date_last_formal_act_epa;
    m_fac_date_last_formal_act_epa_isSet = true;
}

bool OAIEcho03::is_fac_date_last_formal_act_epa_Set() const{
    return m_fac_date_last_formal_act_epa_isSet;
}

bool OAIEcho03::is_fac_date_last_formal_act_epa_Valid() const{
    return m_fac_date_last_formal_act_epa_isValid;
}

QString OAIEcho03::getFacDateLastFormalActSt() const {
    return m_fac_date_last_formal_act_st;
}
void OAIEcho03::setFacDateLastFormalActSt(const QString &fac_date_last_formal_act_st) {
    m_fac_date_last_formal_act_st = fac_date_last_formal_act_st;
    m_fac_date_last_formal_act_st_isSet = true;
}

bool OAIEcho03::is_fac_date_last_formal_act_st_Set() const{
    return m_fac_date_last_formal_act_st_isSet;
}

bool OAIEcho03::is_fac_date_last_formal_act_st_Valid() const{
    return m_fac_date_last_formal_act_st_isValid;
}

QString OAIEcho03::getFacDateLastFormalAction() const {
    return m_fac_date_last_formal_action;
}
void OAIEcho03::setFacDateLastFormalAction(const QString &fac_date_last_formal_action) {
    m_fac_date_last_formal_action = fac_date_last_formal_action;
    m_fac_date_last_formal_action_isSet = true;
}

bool OAIEcho03::is_fac_date_last_formal_action_Set() const{
    return m_fac_date_last_formal_action_isSet;
}

bool OAIEcho03::is_fac_date_last_formal_action_Valid() const{
    return m_fac_date_last_formal_action_isValid;
}

QString OAIEcho03::getFacDateLastInformalActEpa() const {
    return m_fac_date_last_informal_act_epa;
}
void OAIEcho03::setFacDateLastInformalActEpa(const QString &fac_date_last_informal_act_epa) {
    m_fac_date_last_informal_act_epa = fac_date_last_informal_act_epa;
    m_fac_date_last_informal_act_epa_isSet = true;
}

bool OAIEcho03::is_fac_date_last_informal_act_epa_Set() const{
    return m_fac_date_last_informal_act_epa_isSet;
}

bool OAIEcho03::is_fac_date_last_informal_act_epa_Valid() const{
    return m_fac_date_last_informal_act_epa_isValid;
}

QString OAIEcho03::getFacDateLastInformalActSt() const {
    return m_fac_date_last_informal_act_st;
}
void OAIEcho03::setFacDateLastInformalActSt(const QString &fac_date_last_informal_act_st) {
    m_fac_date_last_informal_act_st = fac_date_last_informal_act_st;
    m_fac_date_last_informal_act_st_isSet = true;
}

bool OAIEcho03::is_fac_date_last_informal_act_st_Set() const{
    return m_fac_date_last_informal_act_st_isSet;
}

bool OAIEcho03::is_fac_date_last_informal_act_st_Valid() const{
    return m_fac_date_last_informal_act_st_isValid;
}

QString OAIEcho03::getFacDateLastInformalAction() const {
    return m_fac_date_last_informal_action;
}
void OAIEcho03::setFacDateLastInformalAction(const QString &fac_date_last_informal_action) {
    m_fac_date_last_informal_action = fac_date_last_informal_action;
    m_fac_date_last_informal_action_isSet = true;
}

bool OAIEcho03::is_fac_date_last_informal_action_Set() const{
    return m_fac_date_last_informal_action_isSet;
}

bool OAIEcho03::is_fac_date_last_informal_action_Valid() const{
    return m_fac_date_last_informal_action_isValid;
}

QString OAIEcho03::getFacDateLastInspection() const {
    return m_fac_date_last_inspection;
}
void OAIEcho03::setFacDateLastInspection(const QString &fac_date_last_inspection) {
    m_fac_date_last_inspection = fac_date_last_inspection;
    m_fac_date_last_inspection_isSet = true;
}

bool OAIEcho03::is_fac_date_last_inspection_Set() const{
    return m_fac_date_last_inspection_isSet;
}

bool OAIEcho03::is_fac_date_last_inspection_Valid() const{
    return m_fac_date_last_inspection_isValid;
}

QString OAIEcho03::getFacDateLastInspectionEpa() const {
    return m_fac_date_last_inspection_epa;
}
void OAIEcho03::setFacDateLastInspectionEpa(const QString &fac_date_last_inspection_epa) {
    m_fac_date_last_inspection_epa = fac_date_last_inspection_epa;
    m_fac_date_last_inspection_epa_isSet = true;
}

bool OAIEcho03::is_fac_date_last_inspection_epa_Set() const{
    return m_fac_date_last_inspection_epa_isSet;
}

bool OAIEcho03::is_fac_date_last_inspection_epa_Valid() const{
    return m_fac_date_last_inspection_epa_isValid;
}

QString OAIEcho03::getFacDateLastInspectionState() const {
    return m_fac_date_last_inspection_state;
}
void OAIEcho03::setFacDateLastInspectionState(const QString &fac_date_last_inspection_state) {
    m_fac_date_last_inspection_state = fac_date_last_inspection_state;
    m_fac_date_last_inspection_state_isSet = true;
}

bool OAIEcho03::is_fac_date_last_inspection_state_Set() const{
    return m_fac_date_last_inspection_state_isSet;
}

bool OAIEcho03::is_fac_date_last_inspection_state_Valid() const{
    return m_fac_date_last_inspection_state_isValid;
}

QString OAIEcho03::getFacDateLastPenalty() const {
    return m_fac_date_last_penalty;
}
void OAIEcho03::setFacDateLastPenalty(const QString &fac_date_last_penalty) {
    m_fac_date_last_penalty = fac_date_last_penalty;
    m_fac_date_last_penalty_isSet = true;
}

bool OAIEcho03::is_fac_date_last_penalty_Set() const{
    return m_fac_date_last_penalty_isSet;
}

bool OAIEcho03::is_fac_date_last_penalty_Valid() const{
    return m_fac_date_last_penalty_isValid;
}

QString OAIEcho03::getFacDaysLastInspection() const {
    return m_fac_days_last_inspection;
}
void OAIEcho03::setFacDaysLastInspection(const QString &fac_days_last_inspection) {
    m_fac_days_last_inspection = fac_days_last_inspection;
    m_fac_days_last_inspection_isSet = true;
}

bool OAIEcho03::is_fac_days_last_inspection_Set() const{
    return m_fac_days_last_inspection_isSet;
}

bool OAIEcho03::is_fac_days_last_inspection_Valid() const{
    return m_fac_days_last_inspection_isValid;
}

QString OAIEcho03::getFacDerivedCb2010() const {
    return m_fac_derived_cb2010;
}
void OAIEcho03::setFacDerivedCb2010(const QString &fac_derived_cb2010) {
    m_fac_derived_cb2010 = fac_derived_cb2010;
    m_fac_derived_cb2010_isSet = true;
}

bool OAIEcho03::is_fac_derived_cb2010_Set() const{
    return m_fac_derived_cb2010_isSet;
}

bool OAIEcho03::is_fac_derived_cb2010_Valid() const{
    return m_fac_derived_cb2010_isValid;
}

QString OAIEcho03::getFacDerivedCd113() const {
    return m_fac_derived_cd113;
}
void OAIEcho03::setFacDerivedCd113(const QString &fac_derived_cd113) {
    m_fac_derived_cd113 = fac_derived_cd113;
    m_fac_derived_cd113_isSet = true;
}

bool OAIEcho03::is_fac_derived_cd113_Set() const{
    return m_fac_derived_cd113_isSet;
}

bool OAIEcho03::is_fac_derived_cd113_Valid() const{
    return m_fac_derived_cd113_isValid;
}

QString OAIEcho03::getFacDerivedHuc() const {
    return m_fac_derived_huc;
}
void OAIEcho03::setFacDerivedHuc(const QString &fac_derived_huc) {
    m_fac_derived_huc = fac_derived_huc;
    m_fac_derived_huc_isSet = true;
}

bool OAIEcho03::is_fac_derived_huc_Set() const{
    return m_fac_derived_huc_isSet;
}

bool OAIEcho03::is_fac_derived_huc_Valid() const{
    return m_fac_derived_huc_isValid;
}

QString OAIEcho03::getFacDerivedRadWbdhu12() const {
    return m_fac_derived_rad_wbdhu12;
}
void OAIEcho03::setFacDerivedRadWbdhu12(const QString &fac_derived_rad_wbdhu12) {
    m_fac_derived_rad_wbdhu12 = fac_derived_rad_wbdhu12;
    m_fac_derived_rad_wbdhu12_isSet = true;
}

bool OAIEcho03::is_fac_derived_rad_wbdhu12_Set() const{
    return m_fac_derived_rad_wbdhu12_isSet;
}

bool OAIEcho03::is_fac_derived_rad_wbdhu12_Valid() const{
    return m_fac_derived_rad_wbdhu12_isValid;
}

QString OAIEcho03::getFacDerivedRadWbdhu12Name() const {
    return m_fac_derived_rad_wbdhu12_name;
}
void OAIEcho03::setFacDerivedRadWbdhu12Name(const QString &fac_derived_rad_wbdhu12_name) {
    m_fac_derived_rad_wbdhu12_name = fac_derived_rad_wbdhu12_name;
    m_fac_derived_rad_wbdhu12_name_isSet = true;
}

bool OAIEcho03::is_fac_derived_rad_wbdhu12_name_Set() const{
    return m_fac_derived_rad_wbdhu12_name_isSet;
}

bool OAIEcho03::is_fac_derived_rad_wbdhu12_name_Valid() const{
    return m_fac_derived_rad_wbdhu12_name_isValid;
}

QString OAIEcho03::getFacDerivedRadWbdhu8() const {
    return m_fac_derived_rad_wbdhu8;
}
void OAIEcho03::setFacDerivedRadWbdhu8(const QString &fac_derived_rad_wbdhu8) {
    m_fac_derived_rad_wbdhu8 = fac_derived_rad_wbdhu8;
    m_fac_derived_rad_wbdhu8_isSet = true;
}

bool OAIEcho03::is_fac_derived_rad_wbdhu8_Set() const{
    return m_fac_derived_rad_wbdhu8_isSet;
}

bool OAIEcho03::is_fac_derived_rad_wbdhu8_Valid() const{
    return m_fac_derived_rad_wbdhu8_isValid;
}

QString OAIEcho03::getFacDerivedRadWbdhu8Name() const {
    return m_fac_derived_rad_wbdhu8_name;
}
void OAIEcho03::setFacDerivedRadWbdhu8Name(const QString &fac_derived_rad_wbdhu8_name) {
    m_fac_derived_rad_wbdhu8_name = fac_derived_rad_wbdhu8_name;
    m_fac_derived_rad_wbdhu8_name_isSet = true;
}

bool OAIEcho03::is_fac_derived_rad_wbdhu8_name_Set() const{
    return m_fac_derived_rad_wbdhu8_name_isSet;
}

bool OAIEcho03::is_fac_derived_rad_wbdhu8_name_Valid() const{
    return m_fac_derived_rad_wbdhu8_name_isValid;
}

QString OAIEcho03::getFacDerivedStctyFips() const {
    return m_fac_derived_stcty_fips;
}
void OAIEcho03::setFacDerivedStctyFips(const QString &fac_derived_stcty_fips) {
    m_fac_derived_stcty_fips = fac_derived_stcty_fips;
    m_fac_derived_stcty_fips_isSet = true;
}

bool OAIEcho03::is_fac_derived_stcty_fips_Set() const{
    return m_fac_derived_stcty_fips_isSet;
}

bool OAIEcho03::is_fac_derived_stcty_fips_Valid() const{
    return m_fac_derived_stcty_fips_isValid;
}

QString OAIEcho03::getFacDerivedTrIbes() const {
    return m_fac_derived_tr_ibes;
}
void OAIEcho03::setFacDerivedTrIbes(const QString &fac_derived_tr_ibes) {
    m_fac_derived_tr_ibes = fac_derived_tr_ibes;
    m_fac_derived_tr_ibes_isSet = true;
}

bool OAIEcho03::is_fac_derived_tr_ibes_Set() const{
    return m_fac_derived_tr_ibes_isSet;
}

bool OAIEcho03::is_fac_derived_tr_ibes_Valid() const{
    return m_fac_derived_tr_ibes_isValid;
}

QString OAIEcho03::getFacDerivedWbd() const {
    return m_fac_derived_wbd;
}
void OAIEcho03::setFacDerivedWbd(const QString &fac_derived_wbd) {
    m_fac_derived_wbd = fac_derived_wbd;
    m_fac_derived_wbd_isSet = true;
}

bool OAIEcho03::is_fac_derived_wbd_Set() const{
    return m_fac_derived_wbd_isSet;
}

bool OAIEcho03::is_fac_derived_wbd_Valid() const{
    return m_fac_derived_wbd_isValid;
}

QString OAIEcho03::getFacDerivedWbdhu12Name() const {
    return m_fac_derived_wbdhu12_name;
}
void OAIEcho03::setFacDerivedWbdhu12Name(const QString &fac_derived_wbdhu12_name) {
    m_fac_derived_wbdhu12_name = fac_derived_wbdhu12_name;
    m_fac_derived_wbdhu12_name_isSet = true;
}

bool OAIEcho03::is_fac_derived_wbdhu12_name_Set() const{
    return m_fac_derived_wbdhu12_name_isSet;
}

bool OAIEcho03::is_fac_derived_wbdhu12_name_Valid() const{
    return m_fac_derived_wbdhu12_name_isValid;
}

QString OAIEcho03::getFacDerivedWbdhu8() const {
    return m_fac_derived_wbdhu8;
}
void OAIEcho03::setFacDerivedWbdhu8(const QString &fac_derived_wbdhu8) {
    m_fac_derived_wbdhu8 = fac_derived_wbdhu8;
    m_fac_derived_wbdhu8_isSet = true;
}

bool OAIEcho03::is_fac_derived_wbdhu8_Set() const{
    return m_fac_derived_wbdhu8_isSet;
}

bool OAIEcho03::is_fac_derived_wbdhu8_Valid() const{
    return m_fac_derived_wbdhu8_isValid;
}

QString OAIEcho03::getFacDerivedWbdhu8Name() const {
    return m_fac_derived_wbdhu8_name;
}
void OAIEcho03::setFacDerivedWbdhu8Name(const QString &fac_derived_wbdhu8_name) {
    m_fac_derived_wbdhu8_name = fac_derived_wbdhu8_name;
    m_fac_derived_wbdhu8_name_isSet = true;
}

bool OAIEcho03::is_fac_derived_wbdhu8_name_Set() const{
    return m_fac_derived_wbdhu8_name_isSet;
}

bool OAIEcho03::is_fac_derived_wbdhu8_name_Valid() const{
    return m_fac_derived_wbdhu8_name_isValid;
}

QString OAIEcho03::getFacDerivedZip() const {
    return m_fac_derived_zip;
}
void OAIEcho03::setFacDerivedZip(const QString &fac_derived_zip) {
    m_fac_derived_zip = fac_derived_zip;
    m_fac_derived_zip_isSet = true;
}

bool OAIEcho03::is_fac_derived_zip_Set() const{
    return m_fac_derived_zip_isSet;
}

bool OAIEcho03::is_fac_derived_zip_Valid() const{
    return m_fac_derived_zip_isValid;
}

QString OAIEcho03::getFacEpaRegion() const {
    return m_fac_epa_region;
}
void OAIEcho03::setFacEpaRegion(const QString &fac_epa_region) {
    m_fac_epa_region = fac_epa_region;
    m_fac_epa_region_isSet = true;
}

bool OAIEcho03::is_fac_epa_region_Set() const{
    return m_fac_epa_region_isSet;
}

bool OAIEcho03::is_fac_epa_region_Valid() const{
    return m_fac_epa_region_isValid;
}

QString OAIEcho03::getFacFipsCode() const {
    return m_fac_fips_code;
}
void OAIEcho03::setFacFipsCode(const QString &fac_fips_code) {
    m_fac_fips_code = fac_fips_code;
    m_fac_fips_code_isSet = true;
}

bool OAIEcho03::is_fac_fips_code_Set() const{
    return m_fac_fips_code_isSet;
}

bool OAIEcho03::is_fac_fips_code_Valid() const{
    return m_fac_fips_code_isValid;
}

QString OAIEcho03::getFacFederalAgency() const {
    return m_fac_federal_agency;
}
void OAIEcho03::setFacFederalAgency(const QString &fac_federal_agency) {
    m_fac_federal_agency = fac_federal_agency;
    m_fac_federal_agency_isSet = true;
}

bool OAIEcho03::is_fac_federal_agency_Set() const{
    return m_fac_federal_agency_isSet;
}

bool OAIEcho03::is_fac_federal_agency_Valid() const{
    return m_fac_federal_agency_isValid;
}

QString OAIEcho03::getFacFederalAgencyName() const {
    return m_fac_federal_agency_name;
}
void OAIEcho03::setFacFederalAgencyName(const QString &fac_federal_agency_name) {
    m_fac_federal_agency_name = fac_federal_agency_name;
    m_fac_federal_agency_name_isSet = true;
}

bool OAIEcho03::is_fac_federal_agency_name_Set() const{
    return m_fac_federal_agency_name_isSet;
}

bool OAIEcho03::is_fac_federal_agency_name_Valid() const{
    return m_fac_federal_agency_name_isValid;
}

QString OAIEcho03::getFacFederalFlg() const {
    return m_fac_federal_flg;
}
void OAIEcho03::setFacFederalFlg(const QString &fac_federal_flg) {
    m_fac_federal_flg = fac_federal_flg;
    m_fac_federal_flg_isSet = true;
}

bool OAIEcho03::is_fac_federal_flg_Set() const{
    return m_fac_federal_flg_isSet;
}

bool OAIEcho03::is_fac_federal_flg_Valid() const{
    return m_fac_federal_flg_isValid;
}

QString OAIEcho03::getFacFormalActionCount() const {
    return m_fac_formal_action_count;
}
void OAIEcho03::setFacFormalActionCount(const QString &fac_formal_action_count) {
    m_fac_formal_action_count = fac_formal_action_count;
    m_fac_formal_action_count_isSet = true;
}

bool OAIEcho03::is_fac_formal_action_count_Set() const{
    return m_fac_formal_action_count_isSet;
}

bool OAIEcho03::is_fac_formal_action_count_Valid() const{
    return m_fac_formal_action_count_isValid;
}

QString OAIEcho03::getFacImpWaterFlg() const {
    return m_fac_imp_water_flg;
}
void OAIEcho03::setFacImpWaterFlg(const QString &fac_imp_water_flg) {
    m_fac_imp_water_flg = fac_imp_water_flg;
    m_fac_imp_water_flg_isSet = true;
}

bool OAIEcho03::is_fac_imp_water_flg_Set() const{
    return m_fac_imp_water_flg_isSet;
}

bool OAIEcho03::is_fac_imp_water_flg_Valid() const{
    return m_fac_imp_water_flg_isValid;
}

QString OAIEcho03::getFacIndianCntryFlg() const {
    return m_fac_indian_cntry_flg;
}
void OAIEcho03::setFacIndianCntryFlg(const QString &fac_indian_cntry_flg) {
    m_fac_indian_cntry_flg = fac_indian_cntry_flg;
    m_fac_indian_cntry_flg_isSet = true;
}

bool OAIEcho03::is_fac_indian_cntry_flg_Set() const{
    return m_fac_indian_cntry_flg_isSet;
}

bool OAIEcho03::is_fac_indian_cntry_flg_Valid() const{
    return m_fac_indian_cntry_flg_isValid;
}

QString OAIEcho03::getFacIndianSpatialFlg() const {
    return m_fac_indian_spatial_flg;
}
void OAIEcho03::setFacIndianSpatialFlg(const QString &fac_indian_spatial_flg) {
    m_fac_indian_spatial_flg = fac_indian_spatial_flg;
    m_fac_indian_spatial_flg_isSet = true;
}

bool OAIEcho03::is_fac_indian_spatial_flg_Set() const{
    return m_fac_indian_spatial_flg_isSet;
}

bool OAIEcho03::is_fac_indian_spatial_flg_Valid() const{
    return m_fac_indian_spatial_flg_isValid;
}

QString OAIEcho03::getFacInformalCount() const {
    return m_fac_informal_count;
}
void OAIEcho03::setFacInformalCount(const QString &fac_informal_count) {
    m_fac_informal_count = fac_informal_count;
    m_fac_informal_count_isSet = true;
}

bool OAIEcho03::is_fac_informal_count_Set() const{
    return m_fac_informal_count_isSet;
}

bool OAIEcho03::is_fac_informal_count_Valid() const{
    return m_fac_informal_count_isValid;
}

QString OAIEcho03::getFacInspectionCount() const {
    return m_fac_inspection_count;
}
void OAIEcho03::setFacInspectionCount(const QString &fac_inspection_count) {
    m_fac_inspection_count = fac_inspection_count;
    m_fac_inspection_count_isSet = true;
}

bool OAIEcho03::is_fac_inspection_count_Set() const{
    return m_fac_inspection_count_isSet;
}

bool OAIEcho03::is_fac_inspection_count_Valid() const{
    return m_fac_inspection_count_isValid;
}

QString OAIEcho03::getFacLastPenaltyAmt() const {
    return m_fac_last_penalty_amt;
}
void OAIEcho03::setFacLastPenaltyAmt(const QString &fac_last_penalty_amt) {
    m_fac_last_penalty_amt = fac_last_penalty_amt;
    m_fac_last_penalty_amt_isSet = true;
}

bool OAIEcho03::is_fac_last_penalty_amt_Set() const{
    return m_fac_last_penalty_amt_isSet;
}

bool OAIEcho03::is_fac_last_penalty_amt_Valid() const{
    return m_fac_last_penalty_amt_isValid;
}

QString OAIEcho03::getFacLat() const {
    return m_fac_lat;
}
void OAIEcho03::setFacLat(const QString &fac_lat) {
    m_fac_lat = fac_lat;
    m_fac_lat_isSet = true;
}

bool OAIEcho03::is_fac_lat_Set() const{
    return m_fac_lat_isSet;
}

bool OAIEcho03::is_fac_lat_Valid() const{
    return m_fac_lat_isValid;
}

QString OAIEcho03::getFacLong() const {
    return m_fac_long;
}
void OAIEcho03::setFacLong(const QString &fac_long) {
    m_fac_long = fac_long;
    m_fac_long_isSet = true;
}

bool OAIEcho03::is_fac_long_Set() const{
    return m_fac_long_isSet;
}

bool OAIEcho03::is_fac_long_Valid() const{
    return m_fac_long_isValid;
}

QString OAIEcho03::getFacMajorFlag() const {
    return m_fac_major_flag;
}
void OAIEcho03::setFacMajorFlag(const QString &fac_major_flag) {
    m_fac_major_flag = fac_major_flag;
    m_fac_major_flag_isSet = true;
}

bool OAIEcho03::is_fac_major_flag_Set() const{
    return m_fac_major_flag_isSet;
}

bool OAIEcho03::is_fac_major_flag_Valid() const{
    return m_fac_major_flag_isValid;
}

QString OAIEcho03::getFacMapFlg() const {
    return m_fac_map_flg;
}
void OAIEcho03::setFacMapFlg(const QString &fac_map_flg) {
    m_fac_map_flg = fac_map_flg;
    m_fac_map_flg_isSet = true;
}

bool OAIEcho03::is_fac_map_flg_Set() const{
    return m_fac_map_flg_isSet;
}

bool OAIEcho03::is_fac_map_flg_Valid() const{
    return m_fac_map_flg_isValid;
}

QString OAIEcho03::getFacMapIcon() const {
    return m_fac_map_icon;
}
void OAIEcho03::setFacMapIcon(const QString &fac_map_icon) {
    m_fac_map_icon = fac_map_icon;
    m_fac_map_icon_isSet = true;
}

bool OAIEcho03::is_fac_map_icon_Set() const{
    return m_fac_map_icon_isSet;
}

bool OAIEcho03::is_fac_map_icon_Valid() const{
    return m_fac_map_icon_isValid;
}

QString OAIEcho03::getFacMyrtkUniverse() const {
    return m_fac_myrtk_universe;
}
void OAIEcho03::setFacMyrtkUniverse(const QString &fac_myrtk_universe) {
    m_fac_myrtk_universe = fac_myrtk_universe;
    m_fac_myrtk_universe_isSet = true;
}

bool OAIEcho03::is_fac_myrtk_universe_Set() const{
    return m_fac_myrtk_universe_isSet;
}

bool OAIEcho03::is_fac_myrtk_universe_Valid() const{
    return m_fac_myrtk_universe_isValid;
}

QString OAIEcho03::getFacNaicsCodes() const {
    return m_fac_naics_codes;
}
void OAIEcho03::setFacNaicsCodes(const QString &fac_naics_codes) {
    m_fac_naics_codes = fac_naics_codes;
    m_fac_naics_codes_isSet = true;
}

bool OAIEcho03::is_fac_naics_codes_Set() const{
    return m_fac_naics_codes_isSet;
}

bool OAIEcho03::is_fac_naics_codes_Valid() const{
    return m_fac_naics_codes_isValid;
}

QString OAIEcho03::getFacNaaFlag() const {
    return m_fac_naa_flag;
}
void OAIEcho03::setFacNaaFlag(const QString &fac_naa_flag) {
    m_fac_naa_flag = fac_naa_flag;
    m_fac_naa_flag_isSet = true;
}

bool OAIEcho03::is_fac_naa_flag_Set() const{
    return m_fac_naa_flag_isSet;
}

bool OAIEcho03::is_fac_naa_flag_Valid() const{
    return m_fac_naa_flag_isValid;
}

QString OAIEcho03::getFacName() const {
    return m_fac_name;
}
void OAIEcho03::setFacName(const QString &fac_name) {
    m_fac_name = fac_name;
    m_fac_name_isSet = true;
}

bool OAIEcho03::is_fac_name_Set() const{
    return m_fac_name_isSet;
}

bool OAIEcho03::is_fac_name_Valid() const{
    return m_fac_name_isValid;
}

QString OAIEcho03::getFacPenaltyCount() const {
    return m_fac_penalty_count;
}
void OAIEcho03::setFacPenaltyCount(const QString &fac_penalty_count) {
    m_fac_penalty_count = fac_penalty_count;
    m_fac_penalty_count_isSet = true;
}

bool OAIEcho03::is_fac_penalty_count_Set() const{
    return m_fac_penalty_count_isSet;
}

bool OAIEcho03::is_fac_penalty_count_Valid() const{
    return m_fac_penalty_count_isValid;
}

QString OAIEcho03::getFacPercentMinority() const {
    return m_fac_percent_minority;
}
void OAIEcho03::setFacPercentMinority(const QString &fac_percent_minority) {
    m_fac_percent_minority = fac_percent_minority;
    m_fac_percent_minority_isSet = true;
}

bool OAIEcho03::is_fac_percent_minority_Set() const{
    return m_fac_percent_minority_isSet;
}

bool OAIEcho03::is_fac_percent_minority_Valid() const{
    return m_fac_percent_minority_isValid;
}

QString OAIEcho03::getFacPopDen() const {
    return m_fac_pop_den;
}
void OAIEcho03::setFacPopDen(const QString &fac_pop_den) {
    m_fac_pop_den = fac_pop_den;
    m_fac_pop_den_isSet = true;
}

bool OAIEcho03::is_fac_pop_den_Set() const{
    return m_fac_pop_den_isSet;
}

bool OAIEcho03::is_fac_pop_den_Valid() const{
    return m_fac_pop_den_isValid;
}

QString OAIEcho03::getFacProgramsWithSnc() const {
    return m_fac_programs_with_snc;
}
void OAIEcho03::setFacProgramsWithSnc(const QString &fac_programs_with_snc) {
    m_fac_programs_with_snc = fac_programs_with_snc;
    m_fac_programs_with_snc_isSet = true;
}

bool OAIEcho03::is_fac_programs_with_snc_Set() const{
    return m_fac_programs_with_snc_isSet;
}

bool OAIEcho03::is_fac_programs_with_snc_Valid() const{
    return m_fac_programs_with_snc_isValid;
}

QString OAIEcho03::getFacQtrsWithNc() const {
    return m_fac_qtrs_with_nc;
}
void OAIEcho03::setFacQtrsWithNc(const QString &fac_qtrs_with_nc) {
    m_fac_qtrs_with_nc = fac_qtrs_with_nc;
    m_fac_qtrs_with_nc_isSet = true;
}

bool OAIEcho03::is_fac_qtrs_with_nc_Set() const{
    return m_fac_qtrs_with_nc_isSet;
}

bool OAIEcho03::is_fac_qtrs_with_nc_Valid() const{
    return m_fac_qtrs_with_nc_isValid;
}

QString OAIEcho03::getFacReferencePoint() const {
    return m_fac_reference_point;
}
void OAIEcho03::setFacReferencePoint(const QString &fac_reference_point) {
    m_fac_reference_point = fac_reference_point;
    m_fac_reference_point_isSet = true;
}

bool OAIEcho03::is_fac_reference_point_Set() const{
    return m_fac_reference_point_isSet;
}

bool OAIEcho03::is_fac_reference_point_Valid() const{
    return m_fac_reference_point_isValid;
}

QString OAIEcho03::getFacSicCodes() const {
    return m_fac_sic_codes;
}
void OAIEcho03::setFacSicCodes(const QString &fac_sic_codes) {
    m_fac_sic_codes = fac_sic_codes;
    m_fac_sic_codes_isSet = true;
}

bool OAIEcho03::is_fac_sic_codes_Set() const{
    return m_fac_sic_codes_isSet;
}

bool OAIEcho03::is_fac_sic_codes_Valid() const{
    return m_fac_sic_codes_isValid;
}

QString OAIEcho03::getFacSncFlg() const {
    return m_fac_snc_flg;
}
void OAIEcho03::setFacSncFlg(const QString &fac_snc_flg) {
    m_fac_snc_flg = fac_snc_flg;
    m_fac_snc_flg_isSet = true;
}

bool OAIEcho03::is_fac_snc_flg_Set() const{
    return m_fac_snc_flg_isSet;
}

bool OAIEcho03::is_fac_snc_flg_Valid() const{
    return m_fac_snc_flg_isValid;
}

QString OAIEcho03::getFacState() const {
    return m_fac_state;
}
void OAIEcho03::setFacState(const QString &fac_state) {
    m_fac_state = fac_state;
    m_fac_state_isSet = true;
}

bool OAIEcho03::is_fac_state_Set() const{
    return m_fac_state_isSet;
}

bool OAIEcho03::is_fac_state_Valid() const{
    return m_fac_state_isValid;
}

QString OAIEcho03::getFacStdCountyName() const {
    return m_fac_std_county_name;
}
void OAIEcho03::setFacStdCountyName(const QString &fac_std_county_name) {
    m_fac_std_county_name = fac_std_county_name;
    m_fac_std_county_name_isSet = true;
}

bool OAIEcho03::is_fac_std_county_name_Set() const{
    return m_fac_std_county_name_isSet;
}

bool OAIEcho03::is_fac_std_county_name_Valid() const{
    return m_fac_std_county_name_isValid;
}

QString OAIEcho03::getFacStreet() const {
    return m_fac_street;
}
void OAIEcho03::setFacStreet(const QString &fac_street) {
    m_fac_street = fac_street;
    m_fac_street_isSet = true;
}

bool OAIEcho03::is_fac_street_Set() const{
    return m_fac_street_isSet;
}

bool OAIEcho03::is_fac_street_Valid() const{
    return m_fac_street_isValid;
}

QString OAIEcho03::getFacTotalPenalties() const {
    return m_fac_total_penalties;
}
void OAIEcho03::setFacTotalPenalties(const QString &fac_total_penalties) {
    m_fac_total_penalties = fac_total_penalties;
    m_fac_total_penalties_isSet = true;
}

bool OAIEcho03::is_fac_total_penalties_Set() const{
    return m_fac_total_penalties_isSet;
}

bool OAIEcho03::is_fac_total_penalties_Valid() const{
    return m_fac_total_penalties_isValid;
}

QString OAIEcho03::getFacUsMexBorderFlg() const {
    return m_fac_us_mex_border_flg;
}
void OAIEcho03::setFacUsMexBorderFlg(const QString &fac_us_mex_border_flg) {
    m_fac_us_mex_border_flg = fac_us_mex_border_flg;
    m_fac_us_mex_border_flg_isSet = true;
}

bool OAIEcho03::is_fac_us_mex_border_flg_Set() const{
    return m_fac_us_mex_border_flg_isSet;
}

bool OAIEcho03::is_fac_us_mex_border_flg_Valid() const{
    return m_fac_us_mex_border_flg_isValid;
}

QString OAIEcho03::getFacZip() const {
    return m_fac_zip;
}
void OAIEcho03::setFacZip(const QString &fac_zip) {
    m_fac_zip = fac_zip;
    m_fac_zip_isSet = true;
}

bool OAIEcho03::is_fac_zip_Set() const{
    return m_fac_zip_isSet;
}

bool OAIEcho03::is_fac_zip_Valid() const{
    return m_fac_zip_isValid;
}

QString OAIEcho03::getFecCaseIds() const {
    return m_fec_case_ids;
}
void OAIEcho03::setFecCaseIds(const QString &fec_case_ids) {
    m_fec_case_ids = fec_case_ids;
    m_fec_case_ids_isSet = true;
}

bool OAIEcho03::is_fec_case_ids_Set() const{
    return m_fec_case_ids_isSet;
}

bool OAIEcho03::is_fec_case_ids_Valid() const{
    return m_fec_case_ids_isValid;
}

QString OAIEcho03::getFecLastCaseDate() const {
    return m_fec_last_case_date;
}
void OAIEcho03::setFecLastCaseDate(const QString &fec_last_case_date) {
    m_fec_last_case_date = fec_last_case_date;
    m_fec_last_case_date_isSet = true;
}

bool OAIEcho03::is_fec_last_case_date_Set() const{
    return m_fec_last_case_date_isSet;
}

bool OAIEcho03::is_fec_last_case_date_Valid() const{
    return m_fec_last_case_date_isValid;
}

QString OAIEcho03::getFecNumberOfCases() const {
    return m_fec_number_of_cases;
}
void OAIEcho03::setFecNumberOfCases(const QString &fec_number_of_cases) {
    m_fec_number_of_cases = fec_number_of_cases;
    m_fec_number_of_cases_isSet = true;
}

bool OAIEcho03::is_fec_number_of_cases_Set() const{
    return m_fec_number_of_cases_isSet;
}

bool OAIEcho03::is_fec_number_of_cases_Valid() const{
    return m_fec_number_of_cases_isValid;
}

QString OAIEcho03::getFecTotalPenalties() const {
    return m_fec_total_penalties;
}
void OAIEcho03::setFecTotalPenalties(const QString &fec_total_penalties) {
    m_fec_total_penalties = fec_total_penalties;
    m_fec_total_penalties_isSet = true;
}

bool OAIEcho03::is_fec_total_penalties_Set() const{
    return m_fec_total_penalties_isSet;
}

bool OAIEcho03::is_fec_total_penalties_Valid() const{
    return m_fec_total_penalties_isValid;
}

QString OAIEcho03::getFifraInspections5yr() const {
    return m_fifra_inspections5yr;
}
void OAIEcho03::setFifraInspections5yr(const QString &fifra_inspections5yr) {
    m_fifra_inspections5yr = fifra_inspections5yr;
    m_fifra_inspections5yr_isSet = true;
}

bool OAIEcho03::is_fifra_inspections5yr_Set() const{
    return m_fifra_inspections5yr_isSet;
}

bool OAIEcho03::is_fifra_inspections5yr_Valid() const{
    return m_fifra_inspections5yr_isValid;
}

QString OAIEcho03::getGhgco2Releases() const {
    return m_ghgco2_releases;
}
void OAIEcho03::setGhgco2Releases(const QString &ghgco2_releases) {
    m_ghgco2_releases = ghgco2_releases;
    m_ghgco2_releases_isSet = true;
}

bool OAIEcho03::is_ghgco2_releases_Set() const{
    return m_ghgco2_releases_isSet;
}

bool OAIEcho03::is_ghgco2_releases_Valid() const{
    return m_ghgco2_releases_isValid;
}

QString OAIEcho03::getGhgFlag() const {
    return m_ghg_flag;
}
void OAIEcho03::setGhgFlag(const QString &ghg_flag) {
    m_ghg_flag = ghg_flag;
    m_ghg_flag_isSet = true;
}

bool OAIEcho03::is_ghg_flag_Set() const{
    return m_ghg_flag_isSet;
}

bool OAIEcho03::is_ghg_flag_Valid() const{
    return m_ghg_flag_isValid;
}

QString OAIEcho03::getGhgids() const {
    return m_ghgids;
}
void OAIEcho03::setGhgids(const QString &ghgids) {
    m_ghgids = ghgids;
    m_ghgids_isSet = true;
}

bool OAIEcho03::is_ghgids_Set() const{
    return m_ghgids_isSet;
}

bool OAIEcho03::is_ghgids_Valid() const{
    return m_ghgids_isValid;
}

QString OAIEcho03::getHasPollRpt() const {
    return m_has_poll_rpt;
}
void OAIEcho03::setHasPollRpt(const QString &has_poll_rpt) {
    m_has_poll_rpt = has_poll_rpt;
    m_has_poll_rpt_isSet = true;
}

bool OAIEcho03::is_has_poll_rpt_Set() const{
    return m_has_poll_rpt_isSet;
}

bool OAIEcho03::is_has_poll_rpt_Valid() const{
    return m_has_poll_rpt_isValid;
}

QString OAIEcho03::getInfea5yrFlag() const {
    return m_infea5yr_flag;
}
void OAIEcho03::setInfea5yrFlag(const QString &infea5yr_flag) {
    m_infea5yr_flag = infea5yr_flag;
    m_infea5yr_flag_isSet = true;
}

bool OAIEcho03::is_infea5yr_flag_Set() const{
    return m_infea5yr_flag_isSet;
}

bool OAIEcho03::is_infea5yr_flag_Valid() const{
    return m_infea5yr_flag_isValid;
}

QString OAIEcho03::getInsp5yrFlag() const {
    return m_insp5yr_flag;
}
void OAIEcho03::setInsp5yrFlag(const QString &insp5yr_flag) {
    m_insp5yr_flag = insp5yr_flag;
    m_insp5yr_flag_isSet = true;
}

bool OAIEcho03::is_insp5yr_flag_Set() const{
    return m_insp5yr_flag_isSet;
}

bool OAIEcho03::is_insp5yr_flag_Valid() const{
    return m_insp5yr_flag_isValid;
}

QString OAIEcho03::getLower48() const {
    return m_lower48;
}
void OAIEcho03::setLower48(const QString &lower48) {
    m_lower48 = lower48;
    m_lower48_isSet = true;
}

bool OAIEcho03::is_lower48_Set() const{
    return m_lower48_isSet;
}

bool OAIEcho03::is_lower48_Valid() const{
    return m_lower48_isValid;
}

QString OAIEcho03::getMaxPctileUs() const {
    return m_max_pctile_us;
}
void OAIEcho03::setMaxPctileUs(const QString &max_pctile_us) {
    m_max_pctile_us = max_pctile_us;
    m_max_pctile_us_isSet = true;
}

bool OAIEcho03::is_max_pctile_us_Set() const{
    return m_max_pctile_us_isSet;
}

bool OAIEcho03::is_max_pctile_us_Valid() const{
    return m_max_pctile_us_isValid;
}

QString OAIEcho03::getMaxScore() const {
    return m_max_score;
}
void OAIEcho03::setMaxScore(const QString &max_score) {
    m_max_score = max_score;
    m_max_score_isSet = true;
}

bool OAIEcho03::is_max_score_Set() const{
    return m_max_score_isSet;
}

bool OAIEcho03::is_max_score_Valid() const{
    return m_max_score_isValid;
}

QString OAIEcho03::getNc() const {
    return m_nc;
}
void OAIEcho03::setNc(const QString &nc) {
    m_nc = nc;
    m_nc_isSet = true;
}

bool OAIEcho03::is_nc_Set() const{
    return m_nc_isSet;
}

bool OAIEcho03::is_nc_Valid() const{
    return m_nc_isValid;
}

QString OAIEcho03::getNpdesFlag() const {
    return m_npdes_flag;
}
void OAIEcho03::setNpdesFlag(const QString &npdes_flag) {
    m_npdes_flag = npdes_flag;
    m_npdes_flag_isSet = true;
}

bool OAIEcho03::is_npdes_flag_Set() const{
    return m_npdes_flag_isSet;
}

bool OAIEcho03::is_npdes_flag_Valid() const{
    return m_npdes_flag_isValid;
}

QString OAIEcho03::getNpdesids() const {
    return m_npdesids;
}
void OAIEcho03::setNpdesids(const QString &npdesids) {
    m_npdesids = npdesids;
    m_npdesids_isSet = true;
}

bool OAIEcho03::is_npdesids_Set() const{
    return m_npdesids_isSet;
}

bool OAIEcho03::is_npdesids_Valid() const{
    return m_npdesids_isValid;
}

QString OAIEcho03::getNaaCategories() const {
    return m_naa_categories;
}
void OAIEcho03::setNaaCategories(const QString &naa_categories) {
    m_naa_categories = naa_categories;
    m_naa_categories_isSet = true;
}

bool OAIEcho03::is_naa_categories_Set() const{
    return m_naa_categories_isSet;
}

bool OAIEcho03::is_naa_categories_Valid() const{
    return m_naa_categories_isValid;
}

QString OAIEcho03::getNaaPollutants() const {
    return m_naa_pollutants;
}
void OAIEcho03::setNaaPollutants(const QString &naa_pollutants) {
    m_naa_pollutants = naa_pollutants;
    m_naa_pollutants_isSet = true;
}

bool OAIEcho03::is_naa_pollutants_Set() const{
    return m_naa_pollutants_isSet;
}

bool OAIEcho03::is_naa_pollutants_Valid() const{
    return m_naa_pollutants_isValid;
}

QString OAIEcho03::getOver80CountUs() const {
    return m_over80_count_us;
}
void OAIEcho03::setOver80CountUs(const QString &over80_count_us) {
    m_over80_count_us = over80_count_us;
    m_over80_count_us_isSet = true;
}

bool OAIEcho03::is_over80_count_us_Set() const{
    return m_over80_count_us_isSet;
}

bool OAIEcho03::is_over80_count_us_Valid() const{
    return m_over80_count_us_isValid;
}

QString OAIEcho03::getPctileCancerUs() const {
    return m_pctile_cancer_us;
}
void OAIEcho03::setPctileCancerUs(const QString &pctile_cancer_us) {
    m_pctile_cancer_us = pctile_cancer_us;
    m_pctile_cancer_us_isSet = true;
}

bool OAIEcho03::is_pctile_cancer_us_Set() const{
    return m_pctile_cancer_us_isSet;
}

bool OAIEcho03::is_pctile_cancer_us_Valid() const{
    return m_pctile_cancer_us_isValid;
}

QString OAIEcho03::getPctileDpmUs() const {
    return m_pctile_dpm_us;
}
void OAIEcho03::setPctileDpmUs(const QString &pctile_dpm_us) {
    m_pctile_dpm_us = pctile_dpm_us;
    m_pctile_dpm_us_isSet = true;
}

bool OAIEcho03::is_pctile_dpm_us_Set() const{
    return m_pctile_dpm_us_isSet;
}

bool OAIEcho03::is_pctile_dpm_us_Valid() const{
    return m_pctile_dpm_us_isValid;
}

QString OAIEcho03::getPctileO3Us() const {
    return m_pctile_o3_us;
}
void OAIEcho03::setPctileO3Us(const QString &pctile_o3_us) {
    m_pctile_o3_us = pctile_o3_us;
    m_pctile_o3_us_isSet = true;
}

bool OAIEcho03::is_pctile_o3_us_Set() const{
    return m_pctile_o3_us_isSet;
}

bool OAIEcho03::is_pctile_o3_us_Valid() const{
    return m_pctile_o3_us_isValid;
}

QString OAIEcho03::getPctilePctpre1960Us() const {
    return m_pctile_pctpre1960_us;
}
void OAIEcho03::setPctilePctpre1960Us(const QString &pctile_pctpre1960_us) {
    m_pctile_pctpre1960_us = pctile_pctpre1960_us;
    m_pctile_pctpre1960_us_isSet = true;
}

bool OAIEcho03::is_pctile_pctpre1960_us_Set() const{
    return m_pctile_pctpre1960_us_isSet;
}

bool OAIEcho03::is_pctile_pctpre1960_us_Valid() const{
    return m_pctile_pctpre1960_us_isValid;
}

QString OAIEcho03::getPctilePmUs() const {
    return m_pctile_pm_us;
}
void OAIEcho03::setPctilePmUs(const QString &pctile_pm_us) {
    m_pctile_pm_us = pctile_pm_us;
    m_pctile_pm_us_isSet = true;
}

bool OAIEcho03::is_pctile_pm_us_Set() const{
    return m_pctile_pm_us_isSet;
}

bool OAIEcho03::is_pctile_pm_us_Valid() const{
    return m_pctile_pm_us_isValid;
}

QString OAIEcho03::getPctileProximityNpdesus() const {
    return m_pctile_proximity_npdesus;
}
void OAIEcho03::setPctileProximityNpdesus(const QString &pctile_proximity_npdesus) {
    m_pctile_proximity_npdesus = pctile_proximity_npdesus;
    m_pctile_proximity_npdesus_isSet = true;
}

bool OAIEcho03::is_pctile_proximity_npdesus_Set() const{
    return m_pctile_proximity_npdesus_isSet;
}

bool OAIEcho03::is_pctile_proximity_npdesus_Valid() const{
    return m_pctile_proximity_npdesus_isValid;
}

QString OAIEcho03::getPctileProximityNplUs() const {
    return m_pctile_proximity_npl_us;
}
void OAIEcho03::setPctileProximityNplUs(const QString &pctile_proximity_npl_us) {
    m_pctile_proximity_npl_us = pctile_proximity_npl_us;
    m_pctile_proximity_npl_us_isSet = true;
}

bool OAIEcho03::is_pctile_proximity_npl_us_Set() const{
    return m_pctile_proximity_npl_us_isSet;
}

bool OAIEcho03::is_pctile_proximity_npl_us_Valid() const{
    return m_pctile_proximity_npl_us_isValid;
}

QString OAIEcho03::getPctileProximityRmpUs() const {
    return m_pctile_proximity_rmp_us;
}
void OAIEcho03::setPctileProximityRmpUs(const QString &pctile_proximity_rmp_us) {
    m_pctile_proximity_rmp_us = pctile_proximity_rmp_us;
    m_pctile_proximity_rmp_us_isSet = true;
}

bool OAIEcho03::is_pctile_proximity_rmp_us_Set() const{
    return m_pctile_proximity_rmp_us_isSet;
}

bool OAIEcho03::is_pctile_proximity_rmp_us_Valid() const{
    return m_pctile_proximity_rmp_us_isValid;
}

QString OAIEcho03::getPctileProximityTsdfUs() const {
    return m_pctile_proximity_tsdf_us;
}
void OAIEcho03::setPctileProximityTsdfUs(const QString &pctile_proximity_tsdf_us) {
    m_pctile_proximity_tsdf_us = pctile_proximity_tsdf_us;
    m_pctile_proximity_tsdf_us_isSet = true;
}

bool OAIEcho03::is_pctile_proximity_tsdf_us_Set() const{
    return m_pctile_proximity_tsdf_us_isSet;
}

bool OAIEcho03::is_pctile_proximity_tsdf_us_Valid() const{
    return m_pctile_proximity_tsdf_us_isValid;
}

QString OAIEcho03::getPctileRespUs() const {
    return m_pctile_resp_us;
}
void OAIEcho03::setPctileRespUs(const QString &pctile_resp_us) {
    m_pctile_resp_us = pctile_resp_us;
    m_pctile_resp_us_isSet = true;
}

bool OAIEcho03::is_pctile_resp_us_Set() const{
    return m_pctile_resp_us_isSet;
}

bool OAIEcho03::is_pctile_resp_us_Valid() const{
    return m_pctile_resp_us_isValid;
}

QString OAIEcho03::getPctileTrafficScoreUs() const {
    return m_pctile_traffic_score_us;
}
void OAIEcho03::setPctileTrafficScoreUs(const QString &pctile_traffic_score_us) {
    m_pctile_traffic_score_us = pctile_traffic_score_us;
    m_pctile_traffic_score_us_isSet = true;
}

bool OAIEcho03::is_pctile_traffic_score_us_Set() const{
    return m_pctile_traffic_score_us_isSet;
}

bool OAIEcho03::is_pctile_traffic_score_us_Valid() const{
    return m_pctile_traffic_score_us_isValid;
}

QString OAIEcho03::getRcra3yrComplQtrsHistory() const {
    return m_rcra3yr_compl_qtrs_history;
}
void OAIEcho03::setRcra3yrComplQtrsHistory(const QString &rcra3yr_compl_qtrs_history) {
    m_rcra3yr_compl_qtrs_history = rcra3yr_compl_qtrs_history;
    m_rcra3yr_compl_qtrs_history_isSet = true;
}

bool OAIEcho03::is_rcra3yr_compl_qtrs_history_Set() const{
    return m_rcra3yr_compl_qtrs_history_isSet;
}

bool OAIEcho03::is_rcra3yr_compl_qtrs_history_Valid() const{
    return m_rcra3yr_compl_qtrs_history_isValid;
}

QString OAIEcho03::getRcraComplianceStatus() const {
    return m_rcra_compliance_status;
}
void OAIEcho03::setRcraComplianceStatus(const QString &rcra_compliance_status) {
    m_rcra_compliance_status = rcra_compliance_status;
    m_rcra_compliance_status_isSet = true;
}

bool OAIEcho03::is_rcra_compliance_status_Set() const{
    return m_rcra_compliance_status_isSet;
}

bool OAIEcho03::is_rcra_compliance_status_Valid() const{
    return m_rcra_compliance_status_isValid;
}

QString OAIEcho03::getRcraDateLastFormalAction() const {
    return m_rcra_date_last_formal_action;
}
void OAIEcho03::setRcraDateLastFormalAction(const QString &rcra_date_last_formal_action) {
    m_rcra_date_last_formal_action = rcra_date_last_formal_action;
    m_rcra_date_last_formal_action_isSet = true;
}

bool OAIEcho03::is_rcra_date_last_formal_action_Set() const{
    return m_rcra_date_last_formal_action_isSet;
}

bool OAIEcho03::is_rcra_date_last_formal_action_Valid() const{
    return m_rcra_date_last_formal_action_isValid;
}

QString OAIEcho03::getRcraDaysLastEvaluation() const {
    return m_rcra_days_last_evaluation;
}
void OAIEcho03::setRcraDaysLastEvaluation(const QString &rcra_days_last_evaluation) {
    m_rcra_days_last_evaluation = rcra_days_last_evaluation;
    m_rcra_days_last_evaluation_isSet = true;
}

bool OAIEcho03::is_rcra_days_last_evaluation_Set() const{
    return m_rcra_days_last_evaluation_isSet;
}

bool OAIEcho03::is_rcra_days_last_evaluation_Valid() const{
    return m_rcra_days_last_evaluation_isValid;
}

QString OAIEcho03::getRcraFlag() const {
    return m_rcra_flag;
}
void OAIEcho03::setRcraFlag(const QString &rcra_flag) {
    m_rcra_flag = rcra_flag;
    m_rcra_flag_isSet = true;
}

bool OAIEcho03::is_rcra_flag_Set() const{
    return m_rcra_flag_isSet;
}

bool OAIEcho03::is_rcra_flag_Valid() const{
    return m_rcra_flag_isValid;
}

QString OAIEcho03::getRcraFormalActionCount() const {
    return m_rcra_formal_action_count;
}
void OAIEcho03::setRcraFormalActionCount(const QString &rcra_formal_action_count) {
    m_rcra_formal_action_count = rcra_formal_action_count;
    m_rcra_formal_action_count_isSet = true;
}

bool OAIEcho03::is_rcra_formal_action_count_Set() const{
    return m_rcra_formal_action_count_isSet;
}

bool OAIEcho03::is_rcra_formal_action_count_Valid() const{
    return m_rcra_formal_action_count_isValid;
}

QString OAIEcho03::getRcraids() const {
    return m_rcraids;
}
void OAIEcho03::setRcraids(const QString &rcraids) {
    m_rcraids = rcraids;
    m_rcraids_isSet = true;
}

bool OAIEcho03::is_rcraids_Set() const{
    return m_rcraids_isSet;
}

bool OAIEcho03::is_rcraids_Valid() const{
    return m_rcraids_isValid;
}

QString OAIEcho03::getRcraInformalCount() const {
    return m_rcra_informal_count;
}
void OAIEcho03::setRcraInformalCount(const QString &rcra_informal_count) {
    m_rcra_informal_count = rcra_informal_count;
    m_rcra_informal_count_isSet = true;
}

bool OAIEcho03::is_rcra_informal_count_Set() const{
    return m_rcra_informal_count_isSet;
}

bool OAIEcho03::is_rcra_informal_count_Valid() const{
    return m_rcra_informal_count_isValid;
}

QString OAIEcho03::getRcraInspectionCount() const {
    return m_rcra_inspection_count;
}
void OAIEcho03::setRcraInspectionCount(const QString &rcra_inspection_count) {
    m_rcra_inspection_count = rcra_inspection_count;
    m_rcra_inspection_count_isSet = true;
}

bool OAIEcho03::is_rcra_inspection_count_Set() const{
    return m_rcra_inspection_count_isSet;
}

bool OAIEcho03::is_rcra_inspection_count_Valid() const{
    return m_rcra_inspection_count_isValid;
}

QString OAIEcho03::getRcraLastPenaltyAmt() const {
    return m_rcra_last_penalty_amt;
}
void OAIEcho03::setRcraLastPenaltyAmt(const QString &rcra_last_penalty_amt) {
    m_rcra_last_penalty_amt = rcra_last_penalty_amt;
    m_rcra_last_penalty_amt_isSet = true;
}

bool OAIEcho03::is_rcra_last_penalty_amt_Set() const{
    return m_rcra_last_penalty_amt_isSet;
}

bool OAIEcho03::is_rcra_last_penalty_amt_Valid() const{
    return m_rcra_last_penalty_amt_isValid;
}

QString OAIEcho03::getRcraLastPenaltyDate() const {
    return m_rcra_last_penalty_date;
}
void OAIEcho03::setRcraLastPenaltyDate(const QString &rcra_last_penalty_date) {
    m_rcra_last_penalty_date = rcra_last_penalty_date;
    m_rcra_last_penalty_date_isSet = true;
}

bool OAIEcho03::is_rcra_last_penalty_date_Set() const{
    return m_rcra_last_penalty_date_isSet;
}

bool OAIEcho03::is_rcra_last_penalty_date_Valid() const{
    return m_rcra_last_penalty_date_isValid;
}

QString OAIEcho03::getRcranaics() const {
    return m_rcranaics;
}
void OAIEcho03::setRcranaics(const QString &rcranaics) {
    m_rcranaics = rcranaics;
    m_rcranaics_isSet = true;
}

bool OAIEcho03::is_rcranaics_Set() const{
    return m_rcranaics_isSet;
}

bool OAIEcho03::is_rcranaics_Valid() const{
    return m_rcranaics_isValid;
}

QString OAIEcho03::getRcraPenalties() const {
    return m_rcra_penalties;
}
void OAIEcho03::setRcraPenalties(const QString &rcra_penalties) {
    m_rcra_penalties = rcra_penalties;
    m_rcra_penalties_isSet = true;
}

bool OAIEcho03::is_rcra_penalties_Set() const{
    return m_rcra_penalties_isSet;
}

bool OAIEcho03::is_rcra_penalties_Valid() const{
    return m_rcra_penalties_isValid;
}

QString OAIEcho03::getRcraPermitTypes() const {
    return m_rcra_permit_types;
}
void OAIEcho03::setRcraPermitTypes(const QString &rcra_permit_types) {
    m_rcra_permit_types = rcra_permit_types;
    m_rcra_permit_types_isSet = true;
}

bool OAIEcho03::is_rcra_permit_types_Set() const{
    return m_rcra_permit_types_isSet;
}

bool OAIEcho03::is_rcra_permit_types_Valid() const{
    return m_rcra_permit_types_isValid;
}

QString OAIEcho03::getRcraQtrsWithNc() const {
    return m_rcra_qtrs_with_nc;
}
void OAIEcho03::setRcraQtrsWithNc(const QString &rcra_qtrs_with_nc) {
    m_rcra_qtrs_with_nc = rcra_qtrs_with_nc;
    m_rcra_qtrs_with_nc_isSet = true;
}

bool OAIEcho03::is_rcra_qtrs_with_nc_Set() const{
    return m_rcra_qtrs_with_nc_isSet;
}

bool OAIEcho03::is_rcra_qtrs_with_nc_Valid() const{
    return m_rcra_qtrs_with_nc_isValid;
}

QString OAIEcho03::getRcrasncFlag() const {
    return m_rcrasnc_flag;
}
void OAIEcho03::setRcrasncFlag(const QString &rcrasnc_flag) {
    m_rcrasnc_flag = rcrasnc_flag;
    m_rcrasnc_flag_isSet = true;
}

bool OAIEcho03::is_rcrasnc_flag_Set() const{
    return m_rcrasnc_flag_isSet;
}

bool OAIEcho03::is_rcrasnc_flag_Valid() const{
    return m_rcrasnc_flag_isValid;
}

QString OAIEcho03::getRegistryId() const {
    return m_registry_id;
}
void OAIEcho03::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIEcho03::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIEcho03::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIEcho03::getRmpIds() const {
    return m_rmp_ids;
}
void OAIEcho03::setRmpIds(const QString &rmp_ids) {
    m_rmp_ids = rmp_ids;
    m_rmp_ids_isSet = true;
}

bool OAIEcho03::is_rmp_ids_Set() const{
    return m_rmp_ids_isSet;
}

bool OAIEcho03::is_rmp_ids_Valid() const{
    return m_rmp_ids_isValid;
}

QString OAIEcho03::getSdwa3yrComplQtrsHistory() const {
    return m_sdwa3yr_compl_qtrs_history;
}
void OAIEcho03::setSdwa3yrComplQtrsHistory(const QString &sdwa3yr_compl_qtrs_history) {
    m_sdwa3yr_compl_qtrs_history = sdwa3yr_compl_qtrs_history;
    m_sdwa3yr_compl_qtrs_history_isSet = true;
}

bool OAIEcho03::is_sdwa3yr_compl_qtrs_history_Set() const{
    return m_sdwa3yr_compl_qtrs_history_isSet;
}

bool OAIEcho03::is_sdwa3yr_compl_qtrs_history_Valid() const{
    return m_sdwa3yr_compl_qtrs_history_isValid;
}

QString OAIEcho03::getSdwaComplianceStatus() const {
    return m_sdwa_compliance_status;
}
void OAIEcho03::setSdwaComplianceStatus(const QString &sdwa_compliance_status) {
    m_sdwa_compliance_status = sdwa_compliance_status;
    m_sdwa_compliance_status_isSet = true;
}

bool OAIEcho03::is_sdwa_compliance_status_Set() const{
    return m_sdwa_compliance_status_isSet;
}

bool OAIEcho03::is_sdwa_compliance_status_Valid() const{
    return m_sdwa_compliance_status_isValid;
}

QString OAIEcho03::getSdwaFormalActionCount() const {
    return m_sdwa_formal_action_count;
}
void OAIEcho03::setSdwaFormalActionCount(const QString &sdwa_formal_action_count) {
    m_sdwa_formal_action_count = sdwa_formal_action_count;
    m_sdwa_formal_action_count_isSet = true;
}

bool OAIEcho03::is_sdwa_formal_action_count_Set() const{
    return m_sdwa_formal_action_count_isSet;
}

bool OAIEcho03::is_sdwa_formal_action_count_Valid() const{
    return m_sdwa_formal_action_count_isValid;
}

QString OAIEcho03::getSdwaids() const {
    return m_sdwaids;
}
void OAIEcho03::setSdwaids(const QString &sdwaids) {
    m_sdwaids = sdwaids;
    m_sdwaids_isSet = true;
}

bool OAIEcho03::is_sdwaids_Set() const{
    return m_sdwaids_isSet;
}

bool OAIEcho03::is_sdwaids_Valid() const{
    return m_sdwaids_isValid;
}

QString OAIEcho03::getSdwaInformalCount() const {
    return m_sdwa_informal_count;
}
void OAIEcho03::setSdwaInformalCount(const QString &sdwa_informal_count) {
    m_sdwa_informal_count = sdwa_informal_count;
    m_sdwa_informal_count_isSet = true;
}

bool OAIEcho03::is_sdwa_informal_count_Set() const{
    return m_sdwa_informal_count_isSet;
}

bool OAIEcho03::is_sdwa_informal_count_Valid() const{
    return m_sdwa_informal_count_isValid;
}

QString OAIEcho03::getSdwaInspections5yr() const {
    return m_sdwa_inspections5yr;
}
void OAIEcho03::setSdwaInspections5yr(const QString &sdwa_inspections5yr) {
    m_sdwa_inspections5yr = sdwa_inspections5yr;
    m_sdwa_inspections5yr_isSet = true;
}

bool OAIEcho03::is_sdwa_inspections5yr_Set() const{
    return m_sdwa_inspections5yr_isSet;
}

bool OAIEcho03::is_sdwa_inspections5yr_Valid() const{
    return m_sdwa_inspections5yr_isValid;
}

QString OAIEcho03::getSdwaQtrsWithNc() const {
    return m_sdwa_qtrs_with_nc;
}
void OAIEcho03::setSdwaQtrsWithNc(const QString &sdwa_qtrs_with_nc) {
    m_sdwa_qtrs_with_nc = sdwa_qtrs_with_nc;
    m_sdwa_qtrs_with_nc_isSet = true;
}

bool OAIEcho03::is_sdwa_qtrs_with_nc_Set() const{
    return m_sdwa_qtrs_with_nc_isSet;
}

bool OAIEcho03::is_sdwa_qtrs_with_nc_Valid() const{
    return m_sdwa_qtrs_with_nc_isValid;
}

QString OAIEcho03::getSdwasncFlag() const {
    return m_sdwasnc_flag;
}
void OAIEcho03::setSdwasncFlag(const QString &sdwasnc_flag) {
    m_sdwasnc_flag = sdwasnc_flag;
    m_sdwasnc_flag_isSet = true;
}

bool OAIEcho03::is_sdwasnc_flag_Set() const{
    return m_sdwasnc_flag_isSet;
}

bool OAIEcho03::is_sdwasnc_flag_Valid() const{
    return m_sdwasnc_flag_isValid;
}

QString OAIEcho03::getSdwaSystemTypes() const {
    return m_sdwa_system_types;
}
void OAIEcho03::setSdwaSystemTypes(const QString &sdwa_system_types) {
    m_sdwa_system_types = sdwa_system_types;
    m_sdwa_system_types_isSet = true;
}

bool OAIEcho03::is_sdwa_system_types_Set() const{
    return m_sdwa_system_types_isSet;
}

bool OAIEcho03::is_sdwa_system_types_Valid() const{
    return m_sdwa_system_types_isValid;
}

QString OAIEcho03::getSdwisFlag() const {
    return m_sdwis_flag;
}
void OAIEcho03::setSdwisFlag(const QString &sdwis_flag) {
    m_sdwis_flag = sdwis_flag;
    m_sdwis_flag_isSet = true;
}

bool OAIEcho03::is_sdwis_flag_Set() const{
    return m_sdwis_flag_isSet;
}

bool OAIEcho03::is_sdwis_flag_Valid() const{
    return m_sdwis_flag_isValid;
}

QString OAIEcho03::getScore() const {
    return m_score;
}
void OAIEcho03::setScore(const QString &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIEcho03::is_score_Set() const{
    return m_score_isSet;
}

bool OAIEcho03::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIEcho03::getSemsFlag() const {
    return m_sems_flag;
}
void OAIEcho03::setSemsFlag(const QString &sems_flag) {
    m_sems_flag = sems_flag;
    m_sems_flag_isSet = true;
}

bool OAIEcho03::is_sems_flag_Set() const{
    return m_sems_flag_isSet;
}

bool OAIEcho03::is_sems_flag_Valid() const{
    return m_sems_flag_isValid;
}

QString OAIEcho03::getSemsIds() const {
    return m_sems_ids;
}
void OAIEcho03::setSemsIds(const QString &sems_ids) {
    m_sems_ids = sems_ids;
    m_sems_ids_isSet = true;
}

bool OAIEcho03::is_sems_ids_Set() const{
    return m_sems_ids_isSet;
}

bool OAIEcho03::is_sems_ids_Valid() const{
    return m_sems_ids_isValid;
}

QString OAIEcho03::getSourceId() const {
    return m_source_id;
}
void OAIEcho03::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIEcho03::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIEcho03::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIEcho03::getTriFlag() const {
    return m_tri_flag;
}
void OAIEcho03::setTriFlag(const QString &tri_flag) {
    m_tri_flag = tri_flag;
    m_tri_flag_isSet = true;
}

bool OAIEcho03::is_tri_flag_Set() const{
    return m_tri_flag_isSet;
}

bool OAIEcho03::is_tri_flag_Valid() const{
    return m_tri_flag_isValid;
}

QString OAIEcho03::getTriids() const {
    return m_triids;
}
void OAIEcho03::setTriids(const QString &triids) {
    m_triids = triids;
    m_triids_isSet = true;
}

bool OAIEcho03::is_triids_Set() const{
    return m_triids_isSet;
}

bool OAIEcho03::is_triids_Valid() const{
    return m_triids_isValid;
}

QString OAIEcho03::getTriOffSiteTransfers() const {
    return m_tri_off_site_transfers;
}
void OAIEcho03::setTriOffSiteTransfers(const QString &tri_off_site_transfers) {
    m_tri_off_site_transfers = tri_off_site_transfers;
    m_tri_off_site_transfers_isSet = true;
}

bool OAIEcho03::is_tri_off_site_transfers_Set() const{
    return m_tri_off_site_transfers_isSet;
}

bool OAIEcho03::is_tri_off_site_transfers_Valid() const{
    return m_tri_off_site_transfers_isValid;
}

QString OAIEcho03::getTrionSiteReleases() const {
    return m_trion_site_releases;
}
void OAIEcho03::setTrionSiteReleases(const QString &trion_site_releases) {
    m_trion_site_releases = trion_site_releases;
    m_trion_site_releases_isSet = true;
}

bool OAIEcho03::is_trion_site_releases_Set() const{
    return m_trion_site_releases_isSet;
}

bool OAIEcho03::is_trion_site_releases_Valid() const{
    return m_trion_site_releases_isValid;
}

QString OAIEcho03::getTriReleasesTransfers() const {
    return m_tri_releases_transfers;
}
void OAIEcho03::setTriReleasesTransfers(const QString &tri_releases_transfers) {
    m_tri_releases_transfers = tri_releases_transfers;
    m_tri_releases_transfers_isSet = true;
}

bool OAIEcho03::is_tri_releases_transfers_Set() const{
    return m_tri_releases_transfers_isSet;
}

bool OAIEcho03::is_tri_releases_transfers_Valid() const{
    return m_tri_releases_transfers_isValid;
}

QString OAIEcho03::getTriReporter() const {
    return m_tri_reporter;
}
void OAIEcho03::setTriReporter(const QString &tri_reporter) {
    m_tri_reporter = tri_reporter;
    m_tri_reporter_isSet = true;
}

bool OAIEcho03::is_tri_reporter_Set() const{
    return m_tri_reporter_isSet;
}

bool OAIEcho03::is_tri_reporter_Valid() const{
    return m_tri_reporter_isValid;
}

QString OAIEcho03::getTriReporterInPast() const {
    return m_tri_reporter_in_past;
}
void OAIEcho03::setTriReporterInPast(const QString &tri_reporter_in_past) {
    m_tri_reporter_in_past = tri_reporter_in_past;
    m_tri_reporter_in_past_isSet = true;
}

bool OAIEcho03::is_tri_reporter_in_past_Set() const{
    return m_tri_reporter_in_past_isSet;
}

bool OAIEcho03::is_tri_reporter_in_past_Valid() const{
    return m_tri_reporter_in_past_isValid;
}

QString OAIEcho03::getTrIbalFlag() const {
    return m_tr_ibal_flag;
}
void OAIEcho03::setTrIbalFlag(const QString &tr_ibal_flag) {
    m_tr_ibal_flag = tr_ibal_flag;
    m_tr_ibal_flag_isSet = true;
}

bool OAIEcho03::is_tr_ibal_flag_Set() const{
    return m_tr_ibal_flag_isSet;
}

bool OAIEcho03::is_tr_ibal_flag_Valid() const{
    return m_tr_ibal_flag_isValid;
}

QString OAIEcho03::getTscaFlag() const {
    return m_tsca_flag;
}
void OAIEcho03::setTscaFlag(const QString &tsca_flag) {
    m_tsca_flag = tsca_flag;
    m_tsca_flag_isSet = true;
}

bool OAIEcho03::is_tsca_flag_Set() const{
    return m_tsca_flag_isSet;
}

bool OAIEcho03::is_tsca_flag_Valid() const{
    return m_tsca_flag_isValid;
}

QString OAIEcho03::getTscaIds() const {
    return m_tsca_ids;
}
void OAIEcho03::setTscaIds(const QString &tsca_ids) {
    m_tsca_ids = tsca_ids;
    m_tsca_ids_isSet = true;
}

bool OAIEcho03::is_tsca_ids_Set() const{
    return m_tsca_ids_isSet;
}

bool OAIEcho03::is_tsca_ids_Valid() const{
    return m_tsca_ids_isValid;
}

QString OAIEcho03::getTscaInspections5yr() const {
    return m_tsca_inspections5yr;
}
void OAIEcho03::setTscaInspections5yr(const QString &tsca_inspections5yr) {
    m_tsca_inspections5yr = tsca_inspections5yr;
    m_tsca_inspections5yr_isSet = true;
}

bool OAIEcho03::is_tsca_inspections5yr_Set() const{
    return m_tsca_inspections5yr_isSet;
}

bool OAIEcho03::is_tsca_inspections5yr_Valid() const{
    return m_tsca_inspections5yr_isValid;
}

QString OAIEcho03::getViolFlag() const {
    return m_viol_flag;
}
void OAIEcho03::setViolFlag(const QString &viol_flag) {
    m_viol_flag = viol_flag;
    m_viol_flag_isSet = true;
}

bool OAIEcho03::is_viol_flag_Set() const{
    return m_viol_flag_isSet;
}

bool OAIEcho03::is_viol_flag_Valid() const{
    return m_viol_flag_isValid;
}

QString OAIEcho03::getWebDocs() const {
    return m_web_docs;
}
void OAIEcho03::setWebDocs(const QString &web_docs) {
    m_web_docs = web_docs;
    m_web_docs_isSet = true;
}

bool OAIEcho03::is_web_docs_Set() const{
    return m_web_docs_isSet;
}

bool OAIEcho03::is_web_docs_Valid() const{
    return m_web_docs_isValid;
}

bool OAIEcho03::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_air_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_lower48_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_biosolids_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa3yr_compl_qtrs_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_compliance_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_date_last_formal_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_days_last_evaluation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_evaluation_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_formal_action_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_hpv_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_informal_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_last_penalty_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_last_penalty_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caanaics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_permit_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_qtrs_with_nc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caasics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa13qtrs_compl_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa13qtrs_efflnt_exceedances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa3_yr_qncr_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_compliance_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_compliance_tracking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_date_last_formal_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_days_last_inspection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_formal_action_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_informal_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_inspection_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_last_penalty_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_last_penalty_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwanaics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_permit_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_qtrs_with_nc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwasics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwasnc_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_camd_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_census_block_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_sv_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_vio_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dfr_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ea5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eff_charts_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eis_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eis_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ejscreen_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ejscreen_flag_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epcra_inspections5yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac3yr_compliance_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_accuracy_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_active_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_chesapeake_bay_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_collection_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_compliance_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_date_last_formal_act_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_date_last_formal_act_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_date_last_formal_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_date_last_informal_act_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_date_last_informal_act_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_date_last_informal_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_date_last_inspection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_date_last_inspection_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_date_last_inspection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_date_last_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_days_last_inspection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_cb2010_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_cd113_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_huc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_rad_wbdhu12_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_rad_wbdhu12_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_rad_wbdhu8_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_rad_wbdhu8_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_stcty_fips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_tr_ibes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbdhu12_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbdhu8_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbdhu8_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_epa_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_fips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_federal_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_federal_agency_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_federal_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_formal_action_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_imp_water_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_indian_cntry_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_indian_spatial_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_informal_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_inspection_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_last_penalty_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_major_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_map_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_map_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_myrtk_universe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_naics_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_naa_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_penalty_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_percent_minority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_pop_den_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_programs_with_snc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_qtrs_with_nc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_reference_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_sic_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_snc_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_std_county_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_total_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_us_mex_border_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_case_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_last_case_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_number_of_cases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_total_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fifra_inspections5yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ghgco2_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ghg_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ghgids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_poll_rpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infea5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insp5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower48_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pctile_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_npdes_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_npdesids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naa_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naa_pollutants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over80_count_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_cancer_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_dpm_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_o3_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_pctpre1960_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_pm_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_npdesus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_npl_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_rmp_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_tsdf_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_resp_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_traffic_score_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra3yr_compl_qtrs_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_compliance_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_date_last_formal_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_days_last_evaluation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_formal_action_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcraids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_informal_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_inspection_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_penalty_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_penalty_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcranaics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_permit_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_qtrs_with_nc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcrasnc_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rmp_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa3yr_compl_qtrs_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa_compliance_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa_formal_action_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwaids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa_informal_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa_inspections5yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa_qtrs_with_nc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwasnc_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa_system_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwis_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sems_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sems_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tri_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tri_off_site_transfers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trion_site_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tri_releases_transfers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tri_reporter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tri_reporter_in_past_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tr_ibal_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tsca_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tsca_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tsca_inspections5yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viol_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_docs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcho03::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_air_flag_isValid && m_airids_isValid && m_active_lower48_isValid && m_biosolids_flag_isValid && m_caa3yr_compl_qtrs_history_isValid && m_caa_compliance_status_isValid && m_caa_date_last_formal_action_isValid && m_caa_days_last_evaluation_isValid && m_caa_evaluation_count_isValid && m_caa_formal_action_count_isValid && m_caa_hpv_flag_isValid && m_caa_informal_count_isValid && m_caa_last_penalty_amt_isValid && m_caa_last_penalty_date_isValid && m_caanaics_isValid && m_caa_penalties_isValid && m_caa_permit_types_isValid && m_caa_qtrs_with_nc_isValid && m_caasics_isValid && m_cwa13qtrs_compl_history_isValid && m_cwa13qtrs_efflnt_exceedances_isValid && m_cwa3_yr_qncr_codes_isValid && m_cwa_compliance_status_isValid && m_cwa_compliance_tracking_isValid && m_cwa_date_last_formal_action_isValid && m_cwa_days_last_inspection_isValid && m_cwa_formal_action_count_isValid && m_cwa_informal_count_isValid && m_cwa_inspection_count_isValid && m_cwa_last_penalty_amt_isValid && m_cwa_last_penalty_date_isValid && m_cwanaics_isValid && m_cwa_penalties_isValid && m_cwa_permit_types_isValid && m_cwa_qtrs_with_nc_isValid && m_cwasics_isValid && m_cwasnc_flag_isValid && m_camd_ids_isValid && m_census_block_group_isValid && m_curr_sv_flag_isValid && m_curr_vio_flag_isValid && m_dfr_url_isValid && m_ea5yr_flag_isValid && m_eff_charts_flag_isValid && m_eis_flag_isValid && m_eis_ids_isValid && m_ejscreen_flag_isValid && m_ejscreen_flag_us_isValid && m_epcra_inspections5yr_isValid && m_fac3yr_compliance_history_isValid && m_fac_accuracy_meters_isValid && m_fac_active_flag_isValid && m_fac_chesapeake_bay_flg_isValid && m_fac_city_isValid && m_fac_collection_method_isValid && m_fac_compliance_status_isValid && m_fac_county_isValid && m_fac_date_last_formal_act_epa_isValid && m_fac_date_last_formal_act_st_isValid && m_fac_date_last_formal_action_isValid && m_fac_date_last_informal_act_epa_isValid && m_fac_date_last_informal_act_st_isValid && m_fac_date_last_informal_action_isValid && m_fac_date_last_inspection_isValid && m_fac_date_last_inspection_epa_isValid && m_fac_date_last_inspection_state_isValid && m_fac_date_last_penalty_isValid && m_fac_days_last_inspection_isValid && m_fac_derived_cb2010_isValid && m_fac_derived_cd113_isValid && m_fac_derived_huc_isValid && m_fac_derived_rad_wbdhu12_isValid && m_fac_derived_rad_wbdhu12_name_isValid && m_fac_derived_rad_wbdhu8_isValid && m_fac_derived_rad_wbdhu8_name_isValid && m_fac_derived_stcty_fips_isValid && m_fac_derived_tr_ibes_isValid && m_fac_derived_wbd_isValid && m_fac_derived_wbdhu12_name_isValid && m_fac_derived_wbdhu8_isValid && m_fac_derived_wbdhu8_name_isValid && m_fac_derived_zip_isValid && m_fac_epa_region_isValid && m_fac_fips_code_isValid && m_fac_federal_agency_isValid && m_fac_federal_agency_name_isValid && m_fac_federal_flg_isValid && m_fac_formal_action_count_isValid && m_fac_imp_water_flg_isValid && m_fac_indian_cntry_flg_isValid && m_fac_indian_spatial_flg_isValid && m_fac_informal_count_isValid && m_fac_inspection_count_isValid && m_fac_last_penalty_amt_isValid && m_fac_lat_isValid && m_fac_long_isValid && m_fac_major_flag_isValid && m_fac_map_flg_isValid && m_fac_map_icon_isValid && m_fac_myrtk_universe_isValid && m_fac_naics_codes_isValid && m_fac_naa_flag_isValid && m_fac_name_isValid && m_fac_penalty_count_isValid && m_fac_percent_minority_isValid && m_fac_pop_den_isValid && m_fac_programs_with_snc_isValid && m_fac_qtrs_with_nc_isValid && m_fac_reference_point_isValid && m_fac_sic_codes_isValid && m_fac_snc_flg_isValid && m_fac_state_isValid && m_fac_std_county_name_isValid && m_fac_street_isValid && m_fac_total_penalties_isValid && m_fac_us_mex_border_flg_isValid && m_fac_zip_isValid && m_fec_case_ids_isValid && m_fec_last_case_date_isValid && m_fec_number_of_cases_isValid && m_fec_total_penalties_isValid && m_fifra_inspections5yr_isValid && m_ghgco2_releases_isValid && m_ghg_flag_isValid && m_ghgids_isValid && m_has_poll_rpt_isValid && m_infea5yr_flag_isValid && m_insp5yr_flag_isValid && m_lower48_isValid && m_max_pctile_us_isValid && m_max_score_isValid && m_nc_isValid && m_npdes_flag_isValid && m_npdesids_isValid && m_naa_categories_isValid && m_naa_pollutants_isValid && m_over80_count_us_isValid && m_pctile_cancer_us_isValid && m_pctile_dpm_us_isValid && m_pctile_o3_us_isValid && m_pctile_pctpre1960_us_isValid && m_pctile_pm_us_isValid && m_pctile_proximity_npdesus_isValid && m_pctile_proximity_npl_us_isValid && m_pctile_proximity_rmp_us_isValid && m_pctile_proximity_tsdf_us_isValid && m_pctile_resp_us_isValid && m_pctile_traffic_score_us_isValid && m_rcra3yr_compl_qtrs_history_isValid && m_rcra_compliance_status_isValid && m_rcra_date_last_formal_action_isValid && m_rcra_days_last_evaluation_isValid && m_rcra_flag_isValid && m_rcra_formal_action_count_isValid && m_rcraids_isValid && m_rcra_informal_count_isValid && m_rcra_inspection_count_isValid && m_rcra_last_penalty_amt_isValid && m_rcra_last_penalty_date_isValid && m_rcranaics_isValid && m_rcra_penalties_isValid && m_rcra_permit_types_isValid && m_rcra_qtrs_with_nc_isValid && m_rcrasnc_flag_isValid && m_registry_id_isValid && m_rmp_ids_isValid && m_sdwa3yr_compl_qtrs_history_isValid && m_sdwa_compliance_status_isValid && m_sdwa_formal_action_count_isValid && m_sdwaids_isValid && m_sdwa_informal_count_isValid && m_sdwa_inspections5yr_isValid && m_sdwa_qtrs_with_nc_isValid && m_sdwasnc_flag_isValid && m_sdwa_system_types_isValid && m_sdwis_flag_isValid && m_score_isValid && m_sems_flag_isValid && m_sems_ids_isValid && m_source_id_isValid && m_tri_flag_isValid && m_triids_isValid && m_tri_off_site_transfers_isValid && m_trion_site_releases_isValid && m_tri_releases_transfers_isValid && m_tri_reporter_isValid && m_tri_reporter_in_past_isValid && m_tr_ibal_flag_isValid && m_tsca_flag_isValid && m_tsca_ids_isValid && m_tsca_inspections5yr_isValid && m_viol_flag_isValid && m_web_docs_isValid && true;
}

} // namespace OpenAPI
