/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - All Data
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.  ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    ECHO Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated as Clean Air Act (CAA) stationary sources, Clean Water Act (CWA) dischargers, Resource Conservation and Recovery Act (RCRA) hazardous waste generators/handlers, and Safe Drinking Water Act (SDWA) public water systems.  Data of interest from other EPA sources, such as the Toxics Release Inventory, is also supplied for context.   \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.     The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEcho05.h
 *
 * Cluster Data Object
 */

#ifndef OAIEcho05_H
#define OAIEcho05_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEcho05 : public OAIObject {
public:
    OAIEcho05();
    OAIEcho05(QString json);
    ~OAIEcho05() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCvRows() const;
    void setCvRows(const QString &cv_rows);
    bool is_cv_rows_Set() const;
    bool is_cv_rows_Valid() const;

    QString getClusterCount() const;
    void setClusterCount(const QString &cluster_count);
    bool is_cluster_count_Set() const;
    bool is_cluster_count_Valid() const;

    QString getClusterIcon() const;
    void setClusterIcon(const QString &cluster_icon);
    bool is_cluster_icon_Set() const;
    bool is_cluster_icon_Valid() const;

    QString getClusterLatitude() const;
    void setClusterLatitude(const QString &cluster_latitude);
    bool is_cluster_latitude_Set() const;
    bool is_cluster_latitude_Valid() const;

    QString getClusterLongitude() const;
    void setClusterLongitude(const QString &cluster_longitude);
    bool is_cluster_longitude_Set() const;
    bool is_cluster_longitude_Valid() const;

    QString getClusterName() const;
    void setClusterName(const QString &cluster_name);
    bool is_cluster_name_Set() const;
    bool is_cluster_name_Valid() const;

    QString getClusterType() const;
    void setClusterType(const QString &cluster_type);
    bool is_cluster_type_Set() const;
    bool is_cluster_type_Valid() const;

    QString getClusterValue() const;
    void setClusterValue(const QString &cluster_value);
    bool is_cluster_value_Set() const;
    bool is_cluster_value_Valid() const;

    QString getEpaRegionCode() const;
    void setEpaRegionCode(const QString &epa_region_code);
    bool is_epa_region_code_Set() const;
    bool is_epa_region_code_Valid() const;

    QString getFeaRows() const;
    void setFeaRows(const QString &fea_rows);
    bool is_fea_rows_Set() const;
    bool is_fea_rows_Valid() const;

    QString getInspRows() const;
    void setInspRows(const QString &insp_rows);
    bool is_insp_rows_Set() const;
    bool is_insp_rows_Valid() const;

    QString getIndianCountryRows() const;
    void setIndianCountryRows(const QString &indian_country_rows);
    bool is_indian_country_rows_Set() const;
    bool is_indian_country_rows_Valid() const;

    QString getInfFeaRows() const;
    void setInfFeaRows(const QString &inf_fea_rows);
    bool is_inf_fea_rows_Set() const;
    bool is_inf_fea_rows_Valid() const;

    QString getObjectId() const;
    void setObjectId(const QString &object_id);
    bool is_object_id_Set() const;
    bool is_object_id_Valid() const;

    QString getSvRows() const;
    void setSvRows(const QString &sv_rows);
    bool is_sv_rows_Set() const;
    bool is_sv_rows_Valid() const;

    QString getTotalPenalties() const;
    void setTotalPenalties(const QString &total_penalties);
    bool is_total_penalties_Set() const;
    bool is_total_penalties_Valid() const;

    QString getV3Rows() const;
    void setV3Rows(const QString &v3_rows);
    bool is_v3_rows_Set() const;
    bool is_v3_rows_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cv_rows;
    bool m_cv_rows_isSet;
    bool m_cv_rows_isValid;

    QString m_cluster_count;
    bool m_cluster_count_isSet;
    bool m_cluster_count_isValid;

    QString m_cluster_icon;
    bool m_cluster_icon_isSet;
    bool m_cluster_icon_isValid;

    QString m_cluster_latitude;
    bool m_cluster_latitude_isSet;
    bool m_cluster_latitude_isValid;

    QString m_cluster_longitude;
    bool m_cluster_longitude_isSet;
    bool m_cluster_longitude_isValid;

    QString m_cluster_name;
    bool m_cluster_name_isSet;
    bool m_cluster_name_isValid;

    QString m_cluster_type;
    bool m_cluster_type_isSet;
    bool m_cluster_type_isValid;

    QString m_cluster_value;
    bool m_cluster_value_isSet;
    bool m_cluster_value_isValid;

    QString m_epa_region_code;
    bool m_epa_region_code_isSet;
    bool m_epa_region_code_isValid;

    QString m_fea_rows;
    bool m_fea_rows_isSet;
    bool m_fea_rows_isValid;

    QString m_insp_rows;
    bool m_insp_rows_isSet;
    bool m_insp_rows_isValid;

    QString m_indian_country_rows;
    bool m_indian_country_rows_isSet;
    bool m_indian_country_rows_isValid;

    QString m_inf_fea_rows;
    bool m_inf_fea_rows_isSet;
    bool m_inf_fea_rows_isValid;

    QString m_object_id;
    bool m_object_id_isSet;
    bool m_object_id_isValid;

    QString m_sv_rows;
    bool m_sv_rows_isSet;
    bool m_sv_rows_isValid;

    QString m_total_penalties;
    bool m_total_penalties_isSet;
    bool m_total_penalties_isValid;

    QString m_v3_rows;
    bool m_v3_rows_isSet;
    bool m_v3_rows_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEcho05)

#endif // OAIEcho05_H
