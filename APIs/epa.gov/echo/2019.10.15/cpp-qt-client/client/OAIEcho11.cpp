/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - All Data
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.  ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    ECHO Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated as Clean Air Act (CAA) stationary sources, Clean Water Act (CWA) dischargers, Resource Conservation and Recovery Act (RCRA) hazardous waste generators/handlers, and Safe Drinking Water Act (SDWA) public water systems.  Data of interest from other EPA sources, such as the Toxics Release Inventory, is also supplied for context.   \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.     The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcho11.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcho11::OAIEcho11(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcho11::OAIEcho11() {
    this->initializeModel();
}

OAIEcho11::~OAIEcho11() {}

void OAIEcho11::initializeModel() {

    m_facilities_isSet = false;
    m_facilities_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_page_no_isSet = false;
    m_page_no_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_query_rows_isSet = false;
    m_query_rows_isValid = false;
}

void OAIEcho11::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcho11::fromJsonObject(QJsonObject json) {

    m_facilities_isValid = ::OpenAPI::fromJsonValue(m_facilities, json[QString("Facilities")]);
    m_facilities_isSet = !json[QString("Facilities")].isNull() && m_facilities_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_page_no_isValid = ::OpenAPI::fromJsonValue(m_page_no, json[QString("PageNo")]);
    m_page_no_isSet = !json[QString("PageNo")].isNull() && m_page_no_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("QueryID")]);
    m_query_id_isSet = !json[QString("QueryID")].isNull() && m_query_id_isValid;

    m_query_rows_isValid = ::OpenAPI::fromJsonValue(m_query_rows, json[QString("QueryRows")]);
    m_query_rows_isSet = !json[QString("QueryRows")].isNull() && m_query_rows_isValid;
}

QString OAIEcho11::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcho11::asJsonObject() const {
    QJsonObject obj;
    if (m_facilities.size() > 0) {
        obj.insert(QString("Facilities"), ::OpenAPI::toJsonValue(m_facilities));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_page_no_isSet) {
        obj.insert(QString("PageNo"), ::OpenAPI::toJsonValue(m_page_no));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("QueryID"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_query_rows_isSet) {
        obj.insert(QString("QueryRows"), ::OpenAPI::toJsonValue(m_query_rows));
    }
    return obj;
}

QList<OAIEcho03> OAIEcho11::getFacilities() const {
    return m_facilities;
}
void OAIEcho11::setFacilities(const QList<OAIEcho03> &facilities) {
    m_facilities = facilities;
    m_facilities_isSet = true;
}

bool OAIEcho11::is_facilities_Set() const{
    return m_facilities_isSet;
}

bool OAIEcho11::is_facilities_Valid() const{
    return m_facilities_isValid;
}

QString OAIEcho11::getMessage() const {
    return m_message;
}
void OAIEcho11::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEcho11::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEcho11::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIEcho11::getPageNo() const {
    return m_page_no;
}
void OAIEcho11::setPageNo(const QString &page_no) {
    m_page_no = page_no;
    m_page_no_isSet = true;
}

bool OAIEcho11::is_page_no_Set() const{
    return m_page_no_isSet;
}

bool OAIEcho11::is_page_no_Valid() const{
    return m_page_no_isValid;
}

QString OAIEcho11::getQueryId() const {
    return m_query_id;
}
void OAIEcho11::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIEcho11::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIEcho11::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QString OAIEcho11::getQueryRows() const {
    return m_query_rows;
}
void OAIEcho11::setQueryRows(const QString &query_rows) {
    m_query_rows = query_rows;
    m_query_rows_isSet = true;
}

bool OAIEcho11::is_query_rows_Set() const{
    return m_query_rows_isSet;
}

bool OAIEcho11::is_query_rows_Valid() const{
    return m_query_rows_isValid;
}

bool OAIEcho11::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcho11::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_facilities_isValid && m_message_isValid && m_page_no_isValid && m_query_id_isValid && m_query_rows_isValid && true;
}

} // namespace OpenAPI
