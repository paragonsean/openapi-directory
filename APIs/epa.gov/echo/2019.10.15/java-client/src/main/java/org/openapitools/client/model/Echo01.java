/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - All Data
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.  ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    ECHO Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated as Clean Air Act (CAA) stationary sources, Clean Water Act (CWA) dischargers, Resource Conservation and Recovery Act (RCRA) hazardous waste generators/handlers, and Safe Drinking Water Act (SDWA) public water systems.  Data of interest from other EPA sources, such as the Toxics Release Inventory, is also supplied for context.   \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.     The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Map Data Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:25.812615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Echo01 {
  public static final String SERIALIZED_NAME_CA_ASTATUS = "CAAstatus";
  @SerializedName(SERIALIZED_NAME_CA_ASTATUS)
  private String caAstatus;

  public static final String SERIALIZED_NAME_CW_ASTATUS = "CWAstatus";
  @SerializedName(SERIALIZED_NAME_CW_ASTATUS)
  private String cwAstatus;

  public static final String SERIALIZED_NAME_FORMAL_COUNT = "FormalCount";
  @SerializedName(SERIALIZED_NAME_FORMAL_COUNT)
  private String formalCount;

  public static final String SERIALIZED_NAME_I_C_O_N = "ICON";
  @SerializedName(SERIALIZED_NAME_I_C_O_N)
  private String ICON;

  public static final String SERIALIZED_NAME_INFORMAL_COUNT = "InformalCount";
  @SerializedName(SERIALIZED_NAME_INFORMAL_COUNT)
  private String informalCount;

  public static final String SERIALIZED_NAME_L_A_T = "LAT";
  @SerializedName(SERIALIZED_NAME_L_A_T)
  private String LAT;

  public static final String SERIALIZED_NAME_L_O_N = "LON";
  @SerializedName(SERIALIZED_NAME_L_O_N)
  private String LON;

  public static final String SERIALIZED_NAME_LAST_INSP = "LastInsp";
  @SerializedName(SERIALIZED_NAME_LAST_INSP)
  private String lastInsp;

  public static final String SERIALIZED_NAME_N_A_M_E = "NAME";
  @SerializedName(SERIALIZED_NAME_N_A_M_E)
  private String NAME;

  public static final String SERIALIZED_NAME_P_U_V = "PUV";
  @SerializedName(SERIALIZED_NAME_P_U_V)
  private String PUV;

  public static final String SERIALIZED_NAME_RC_R_ASTATUS = "RCRAstatus";
  @SerializedName(SERIALIZED_NAME_RC_R_ASTATUS)
  private String rcRAstatus;

  public static final String SERIALIZED_NAME_SD_W_ASTATUS = "SDWAstatus";
  @SerializedName(SERIALIZED_NAME_SD_W_ASTATUS)
  private String sdWAstatus;

  public static final String SERIALIZED_NAME_T_Y_P_E = "TYPE";
  @SerializedName(SERIALIZED_NAME_T_Y_P_E)
  private String TYPE;

  public Echo01() {
  }

  public Echo01 caAstatus(String caAstatus) {
    this.caAstatus = caAstatus;
    return this;
  }

  /**
   * The facility&#39;s 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined
   * @return caAstatus
   */
  @javax.annotation.Nonnull
  public String getCaAstatus() {
    return caAstatus;
  }

  public void setCaAstatus(String caAstatus) {
    this.caAstatus = caAstatus;
  }


  public Echo01 cwAstatus(String cwAstatus) {
    this.cwAstatus = cwAstatus;
    return this;
  }

  /**
   * Quarterly compliance status for the most recent 13 quarters. Each letter indicates the compliance status for the corresponding quarter.
   * @return cwAstatus
   */
  @javax.annotation.Nonnull
  public String getCwAstatus() {
    return cwAstatus;
  }

  public void setCwAstatus(String cwAstatus) {
    this.cwAstatus = cwAstatus;
  }


  public Echo01 formalCount(String formalCount) {
    this.formalCount = formalCount;
    return this;
  }

  /**
   * The number of formal enforcement actions that have been taken against the facility
   * @return formalCount
   */
  @javax.annotation.Nonnull
  public String getFormalCount() {
    return formalCount;
  }

  public void setFormalCount(String formalCount) {
    this.formalCount = formalCount;
  }


  public Echo01 ICON(String ICON) {
    this.ICON = ICON;
    return this;
  }

  /**
   * Name of each individual icon file within the URL base
   * @return ICON
   */
  @javax.annotation.Nonnull
  public String getICON() {
    return ICON;
  }

  public void setICON(String ICON) {
    this.ICON = ICON;
  }


  public Echo01 informalCount(String informalCount) {
    this.informalCount = informalCount;
    return this;
  }

  /**
   * The number of informal enforcement actions that have been taken against the facility
   * @return informalCount
   */
  @javax.annotation.Nonnull
  public String getInformalCount() {
    return informalCount;
  }

  public void setInformalCount(String informalCount) {
    this.informalCount = informalCount;
  }


  public Echo01 LAT(String LAT) {
    this.LAT = LAT;
    return this;
  }

  /**
   * The latitude of the facility in degrees, to four decimal places
   * @return LAT
   */
  @javax.annotation.Nonnull
  public String getLAT() {
    return LAT;
  }

  public void setLAT(String LAT) {
    this.LAT = LAT;
  }


  public Echo01 LON(String LON) {
    this.LON = LON;
    return this;
  }

  /**
   * The longitude of the facility in degrees, to four decimal places
   * @return LON
   */
  @javax.annotation.Nonnull
  public String getLON() {
    return LON;
  }

  public void setLON(String LON) {
    this.LON = LON;
  }


  public Echo01 lastInsp(String lastInsp) {
    this.lastInsp = lastInsp;
    return this;
  }

  /**
   * The unique identifier for the last inspection
   * @return lastInsp
   */
  @javax.annotation.Nonnull
  public String getLastInsp() {
    return lastInsp;
  }

  public void setLastInsp(String lastInsp) {
    this.lastInsp = lastInsp;
  }


  public Echo01 NAME(String NAME) {
    this.NAME = NAME;
    return this;
  }

  /**
   * For DFR, this is the Facility name. The name corresponds to the TYPE value
   * @return NAME
   */
  @javax.annotation.Nonnull
  public String getNAME() {
    return NAME;
  }

  public void setNAME(String NAME) {
    this.NAME = NAME;
  }


  public Echo01 PUV(String PUV) {
    this.PUV = PUV;
    return this;
  }

  /**
   * Pop up value. Combine with PopUpBaseURL to give the popup for the facility
   * @return PUV
   */
  @javax.annotation.Nonnull
  public String getPUV() {
    return PUV;
  }

  public void setPUV(String PUV) {
    this.PUV = PUV;
  }


  public Echo01 rcRAstatus(String rcRAstatus) {
    this.rcRAstatus = rcRAstatus;
    return this;
  }

  /**
   * The facility&#39;s 3-year compliance status history by quarter (3-month period) entered in the RCRAInfo program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
   * @return rcRAstatus
   */
  @javax.annotation.Nonnull
  public String getRcRAstatus() {
    return rcRAstatus;
  }

  public void setRcRAstatus(String rcRAstatus) {
    this.rcRAstatus = rcRAstatus;
  }


  public Echo01 sdWAstatus(String sdWAstatus) {
    this.sdWAstatus = sdWAstatus;
    return this;
  }

  /**
   * The system&#39;s 3-year compliance status history by quarter (3-month period) entered in the SDWA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
   * @return sdWAstatus
   */
  @javax.annotation.Nonnull
  public String getSdWAstatus() {
    return sdWAstatus;
  }

  public void setSdWAstatus(String sdWAstatus) {
    this.sdWAstatus = sdWAstatus;
  }


  public Echo01 TYPE(String TYPE) {
    this.TYPE = TYPE;
    return this;
  }

  /**
   * For DFR, this is always facility
   * @return TYPE
   */
  @javax.annotation.Nonnull
  public String getTYPE() {
    return TYPE;
  }

  public void setTYPE(String TYPE) {
    this.TYPE = TYPE;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Echo01 echo01 = (Echo01) o;
    return Objects.equals(this.caAstatus, echo01.caAstatus) &&
        Objects.equals(this.cwAstatus, echo01.cwAstatus) &&
        Objects.equals(this.formalCount, echo01.formalCount) &&
        Objects.equals(this.ICON, echo01.ICON) &&
        Objects.equals(this.informalCount, echo01.informalCount) &&
        Objects.equals(this.LAT, echo01.LAT) &&
        Objects.equals(this.LON, echo01.LON) &&
        Objects.equals(this.lastInsp, echo01.lastInsp) &&
        Objects.equals(this.NAME, echo01.NAME) &&
        Objects.equals(this.PUV, echo01.PUV) &&
        Objects.equals(this.rcRAstatus, echo01.rcRAstatus) &&
        Objects.equals(this.sdWAstatus, echo01.sdWAstatus) &&
        Objects.equals(this.TYPE, echo01.TYPE);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caAstatus, cwAstatus, formalCount, ICON, informalCount, LAT, LON, lastInsp, NAME, PUV, rcRAstatus, sdWAstatus, TYPE);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Echo01 {\n");
    sb.append("    caAstatus: ").append(toIndentedString(caAstatus)).append("\n");
    sb.append("    cwAstatus: ").append(toIndentedString(cwAstatus)).append("\n");
    sb.append("    formalCount: ").append(toIndentedString(formalCount)).append("\n");
    sb.append("    ICON: ").append(toIndentedString(ICON)).append("\n");
    sb.append("    informalCount: ").append(toIndentedString(informalCount)).append("\n");
    sb.append("    LAT: ").append(toIndentedString(LAT)).append("\n");
    sb.append("    LON: ").append(toIndentedString(LON)).append("\n");
    sb.append("    lastInsp: ").append(toIndentedString(lastInsp)).append("\n");
    sb.append("    NAME: ").append(toIndentedString(NAME)).append("\n");
    sb.append("    PUV: ").append(toIndentedString(PUV)).append("\n");
    sb.append("    rcRAstatus: ").append(toIndentedString(rcRAstatus)).append("\n");
    sb.append("    sdWAstatus: ").append(toIndentedString(sdWAstatus)).append("\n");
    sb.append("    TYPE: ").append(toIndentedString(TYPE)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CAAstatus");
    openapiFields.add("CWAstatus");
    openapiFields.add("FormalCount");
    openapiFields.add("ICON");
    openapiFields.add("InformalCount");
    openapiFields.add("LAT");
    openapiFields.add("LON");
    openapiFields.add("LastInsp");
    openapiFields.add("NAME");
    openapiFields.add("PUV");
    openapiFields.add("RCRAstatus");
    openapiFields.add("SDWAstatus");
    openapiFields.add("TYPE");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CAAstatus");
    openapiRequiredFields.add("CWAstatus");
    openapiRequiredFields.add("FormalCount");
    openapiRequiredFields.add("ICON");
    openapiRequiredFields.add("InformalCount");
    openapiRequiredFields.add("LAT");
    openapiRequiredFields.add("LON");
    openapiRequiredFields.add("LastInsp");
    openapiRequiredFields.add("NAME");
    openapiRequiredFields.add("PUV");
    openapiRequiredFields.add("RCRAstatus");
    openapiRequiredFields.add("SDWAstatus");
    openapiRequiredFields.add("TYPE");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Echo01
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Echo01.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Echo01 is not found in the empty JSON string", Echo01.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Echo01.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Echo01` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Echo01.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CAAstatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAAstatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAAstatus").toString()));
      }
      if (!jsonObj.get("CWAstatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWAstatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWAstatus").toString()));
      }
      if (!jsonObj.get("FormalCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FormalCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FormalCount").toString()));
      }
      if (!jsonObj.get("ICON").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ICON` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ICON").toString()));
      }
      if (!jsonObj.get("InformalCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InformalCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InformalCount").toString()));
      }
      if (!jsonObj.get("LAT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LAT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LAT").toString()));
      }
      if (!jsonObj.get("LON").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LON` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LON").toString()));
      }
      if (!jsonObj.get("LastInsp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastInsp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastInsp").toString()));
      }
      if (!jsonObj.get("NAME").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NAME` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NAME").toString()));
      }
      if (!jsonObj.get("PUV").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PUV` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PUV").toString()));
      }
      if (!jsonObj.get("RCRAstatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAstatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAstatus").toString()));
      }
      if (!jsonObj.get("SDWAstatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAstatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAstatus").toString()));
      }
      if (!jsonObj.get("TYPE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TYPE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TYPE").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Echo01.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Echo01' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Echo01> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Echo01.class));

       return (TypeAdapter<T>) new TypeAdapter<Echo01>() {
           @Override
           public void write(JsonWriter out, Echo01 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Echo01 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Echo01 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Echo01
   * @throws IOException if the JSON string is invalid with respect to Echo01
   */
  public static Echo01 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Echo01.class);
  }

  /**
   * Convert an instance of Echo01 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

