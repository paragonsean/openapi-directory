/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - All Data
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.  ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    ECHO Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated as Clean Air Act (CAA) stationary sources, Clean Water Act (CWA) dischargers, Resource Conservation and Recovery Act (RCRA) hazardous waste generators/handlers, and Safe Drinking Water Act (SDWA) public water systems.  Data of interest from other EPA sources, such as the Toxics Release Inventory, is also supplied for context.   \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.     The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.EchoRestServicesGetFacilitiesGet200Response;
import org.openapitools.client.model.EchoRestServicesGetFacilityInfoGet200Response;
import org.openapitools.client.model.EchoRestServicesGetGeojsonGet200Response;
import org.openapitools.client.model.EchoRestServicesGetMapGet200Response;
import org.openapitools.client.model.EchoRestServicesGetQidGet200Response;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FacilityInfoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FacilityInfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FacilityInfoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for echoRestServicesGetDownloadGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetDownloadGetCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetDownloadGetValidateBeforeCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling echoRestServicesGetDownloadGet(Async)");
        }

        return echoRestServicesGetDownloadGetCall(qid, output, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Combined ECHO Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File echoRestServicesGetDownloadGet(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = echoRestServicesGetDownloadGetWithHttpInfo(qid, output, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> echoRestServicesGetDownloadGetWithHttpInfo(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetDownloadGetValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Download Data Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetDownloadGetAsync(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetDownloadGetValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetDownloadPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetDownloadPostCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetDownloadPostValidateBeforeCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling echoRestServicesGetDownloadPost(Async)");
        }

        return echoRestServicesGetDownloadPostCall(qid, output, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Combined ECHO Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File echoRestServicesGetDownloadPost(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = echoRestServicesGetDownloadPostWithHttpInfo(qid, output, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> echoRestServicesGetDownloadPostWithHttpInfo(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetDownloadPostValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Download Data Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetDownloadPostAsync(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetDownloadPostValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetFacilitiesGet
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \&quot;Y\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFea5yr A Y value identifies facilities that have had a formal enforcement action within the last 5 years. (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetFacilitiesGetCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFea5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_facilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (pFn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fn", pFn));
        }

        if (pSa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa", pSa));
        }

        if (pSa1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa1", pSa1));
        }

        if (pCt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ct", pCt));
        }

        if (pCo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_co", pCo));
        }

        if (pFips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fips", pFips));
        }

        if (pSt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_st", pSt));
        }

        if (pZip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_zip", pZip));
        }

        if (pFrs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_frs", pFrs));
        }

        if (pReg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_reg", pReg));
        }

        if (pSic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic", pSic));
        }

        if (pNcs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ncs", pNcs));
        }

        if (pPen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pen", pPen));
        }

        if (pC1lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c1lat", pC1lat));
        }

        if (pC1lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c1lon", pC1lon));
        }

        if (pC2lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c2lat", pC2lat));
        }

        if (pC2lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c2lon", pC2lon));
        }

        if (pUsmex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_usmex", pUsmex));
        }

        if (pSic2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic2", pSic2));
        }

        if (pSic4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic4", pSic4));
        }

        if (pFa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fa", pFa));
        }

        if (pFf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ff", pFf));
        }

        if (pAct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_act", pAct));
        }

        if (pMaj != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_maj", pMaj));
        }

        if (pMact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_mact", pMact));
        }

        if (pFea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fea", pFea));
        }

        if (pFeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feay", pFeay));
        }

        if (pFeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feaa", pFeaa));
        }

        if (pFeac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feac", pFeac));
        }

        if (pFea5yr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fea_5yr", pFea5yr));
        }

        if (pIea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iea", pIea));
        }

        if (pIeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieay", pIeay));
        }

        if (pIeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieaa", pIeaa));
        }

        if (pIea5yr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iea_5yr", pIea5yr));
        }

        if (pCs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_cs", pCs));
        }

        if (pQiv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qiv", pQiv));
        }

        if (pNaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_naa", pNaa));
        }

        if (pImpw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_impw", pImpw));
        }

        if (pTrep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_trep", pTrep));
        }

        if (pOcr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ocr", pOcr));
        }

        if (pOct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_oct", pOct));
        }

        if (pPm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pm", pPm));
        }

        if (pPd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pd", pPd));
        }

        if (pIco != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ico", pIco));
        }

        if (pHuc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_huc", pHuc));
        }

        if (pPid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pid", pPid));
        }

        if (pMed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_med", pMed));
        }

        if (pIstatute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_istatute", pIstatute));
        }

        if (pYsl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysl", pYsl));
        }

        if (pYsly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysly", pYsly));
        }

        if (pYsla != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysla", pYsla));
        }

        if (pQs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qs", pQs));
        }

        if (pSfs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sfs", pSfs));
        }

        if (pTribeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribeid", pTribeid));
        }

        if (pTribename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribename", pTribename));
        }

        if (pTribedist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribedist", pTribedist));
        }

        if (pWbd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_wbd", pWbd));
        }

        if (pFntype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fntype", pFntype));
        }

        if (pIcoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_icoo", pIcoo));
        }

        if (pFacIcos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fac_icos", pFacIcos));
        }

        if (pEjscreen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen", pEjscreen));
        }

        if (pLimitAddr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_limit_addr", pLimitAddr));
        }

        if (pLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_lat", pLat));
        }

        if (pLong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_long", pLong));
        }

        if (pRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_radius", pRadius));
        }

        if (pEjscreenOver80cnt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen_over80cnt", pEjscreenOver80cnt));
        }

        if (pAgoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_agoo", pAgoo));
        }

        if (pNeiu != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_neiu", pNeiu));
        }

        if (queryset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryset", queryset));
        }

        if (responseset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseset", responseset));
        }

        if (tablelist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tablelist", tablelist));
        }

        if (maplist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maplist", maplist));
        }

        if (summarylist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarylist", summarylist));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetFacilitiesGetValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFea5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback _callback) throws ApiException {
        return echoRestServicesGetFacilitiesGetCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFea5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, _callback);

    }

    /**
     * Combined ECHO Facility Search Service
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \&quot;Y\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFea5yr A Y value identifies facilities that have had a formal enforcement action within the last 5 years. (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return EchoRestServicesGetFacilitiesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public EchoRestServicesGetFacilitiesGet200Response echoRestServicesGetFacilitiesGet(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFea5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns) throws ApiException {
        ApiResponse<EchoRestServicesGetFacilitiesGet200Response> localVarResp = echoRestServicesGetFacilitiesGetWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFea5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Facility Search Service
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \&quot;Y\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFea5yr A Y value identifies facilities that have had a formal enforcement action within the last 5 years. (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return ApiResponse&lt;EchoRestServicesGetFacilitiesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EchoRestServicesGetFacilitiesGet200Response> echoRestServicesGetFacilitiesGetWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFea5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetFacilitiesGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFea5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, null);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetFacilitiesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Facility Search Service (asynchronously)
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \&quot;Y\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFea5yr A Y value identifies facilities that have had a formal enforcement action within the last 5 years. (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetFacilitiesGetAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFea5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback<EchoRestServicesGetFacilitiesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetFacilitiesGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFea5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, _callback);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetFacilitiesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetFacilitiesPost
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \\\&quot;Y\\\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFea5yr A Y value identifies facilities that have had a formal enforcement action within the last 5 years. (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetFacilitiesPostCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFea5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_facilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (pFn != null) {
            localVarFormParams.put("p_fn", pFn);
        }

        if (pSa != null) {
            localVarFormParams.put("p_sa", pSa);
        }

        if (pSa1 != null) {
            localVarFormParams.put("p_sa1", pSa1);
        }

        if (pCt != null) {
            localVarFormParams.put("p_ct", pCt);
        }

        if (pCo != null) {
            localVarFormParams.put("p_co", pCo);
        }

        if (pFips != null) {
            localVarFormParams.put("p_fips", pFips);
        }

        if (pSt != null) {
            localVarFormParams.put("p_st", pSt);
        }

        if (pZip != null) {
            localVarFormParams.put("p_zip", pZip);
        }

        if (pFrs != null) {
            localVarFormParams.put("p_frs", pFrs);
        }

        if (pReg != null) {
            localVarFormParams.put("p_reg", pReg);
        }

        if (pSic != null) {
            localVarFormParams.put("p_sic", pSic);
        }

        if (pNcs != null) {
            localVarFormParams.put("p_ncs", pNcs);
        }

        if (pPen != null) {
            localVarFormParams.put("p_pen", pPen);
        }

        if (pC1lat != null) {
            localVarFormParams.put("p_c1lat", pC1lat);
        }

        if (pC1lon != null) {
            localVarFormParams.put("p_c1lon", pC1lon);
        }

        if (pC2lat != null) {
            localVarFormParams.put("p_c2lat", pC2lat);
        }

        if (pC2lon != null) {
            localVarFormParams.put("p_c2lon", pC2lon);
        }

        if (pUsmex != null) {
            localVarFormParams.put("p_usmex", pUsmex);
        }

        if (pSic2 != null) {
            localVarFormParams.put("p_sic2", pSic2);
        }

        if (pSic4 != null) {
            localVarFormParams.put("p_sic4", pSic4);
        }

        if (pFa != null) {
            localVarFormParams.put("p_fa", pFa);
        }

        if (pFf != null) {
            localVarFormParams.put("p_ff", pFf);
        }

        if (pAct != null) {
            localVarFormParams.put("p_act", pAct);
        }

        if (pMaj != null) {
            localVarFormParams.put("p_maj", pMaj);
        }

        if (pMact != null) {
            localVarFormParams.put("p_mact", pMact);
        }

        if (pFea != null) {
            localVarFormParams.put("p_fea", pFea);
        }

        if (pFeay != null) {
            localVarFormParams.put("p_feay", pFeay);
        }

        if (pFeaa != null) {
            localVarFormParams.put("p_feaa", pFeaa);
        }

        if (pFeac != null) {
            localVarFormParams.put("p_feac", pFeac);
        }

        if (pFea5yr != null) {
            localVarFormParams.put("p_fea_5yr", pFea5yr);
        }

        if (pIea != null) {
            localVarFormParams.put("p_iea", pIea);
        }

        if (pIeay != null) {
            localVarFormParams.put("p_ieay", pIeay);
        }

        if (pIeaa != null) {
            localVarFormParams.put("p_ieaa", pIeaa);
        }

        if (pIea5yr != null) {
            localVarFormParams.put("p_iea_5yr", pIea5yr);
        }

        if (pCs != null) {
            localVarFormParams.put("p_cs", pCs);
        }

        if (pQiv != null) {
            localVarFormParams.put("p_qiv", pQiv);
        }

        if (pNaa != null) {
            localVarFormParams.put("p_naa", pNaa);
        }

        if (pImpw != null) {
            localVarFormParams.put("p_impw", pImpw);
        }

        if (pTrep != null) {
            localVarFormParams.put("p_trep", pTrep);
        }

        if (pOcr != null) {
            localVarFormParams.put("p_ocr", pOcr);
        }

        if (pOct != null) {
            localVarFormParams.put("p_oct", pOct);
        }

        if (pPm != null) {
            localVarFormParams.put("p_pm", pPm);
        }

        if (pPd != null) {
            localVarFormParams.put("p_pd", pPd);
        }

        if (pIco != null) {
            localVarFormParams.put("p_ico", pIco);
        }

        if (pHuc != null) {
            localVarFormParams.put("p_huc", pHuc);
        }

        if (pPid != null) {
            localVarFormParams.put("p_pid", pPid);
        }

        if (pMed != null) {
            localVarFormParams.put("p_med", pMed);
        }

        if (pIstatute != null) {
            localVarFormParams.put("p_istatute", pIstatute);
        }

        if (pYsl != null) {
            localVarFormParams.put("p_ysl", pYsl);
        }

        if (pYsly != null) {
            localVarFormParams.put("p_ysly", pYsly);
        }

        if (pYsla != null) {
            localVarFormParams.put("p_ysla", pYsla);
        }

        if (pQs != null) {
            localVarFormParams.put("p_qs", pQs);
        }

        if (pSfs != null) {
            localVarFormParams.put("p_sfs", pSfs);
        }

        if (pTribeid != null) {
            localVarFormParams.put("p_tribeid", pTribeid);
        }

        if (pTribename != null) {
            localVarFormParams.put("p_tribename", pTribename);
        }

        if (pTribedist != null) {
            localVarFormParams.put("p_tribedist", pTribedist);
        }

        if (pWbd != null) {
            localVarFormParams.put("p_wbd", pWbd);
        }

        if (pFntype != null) {
            localVarFormParams.put("p_fntype", pFntype);
        }

        if (pIcoo != null) {
            localVarFormParams.put("p_icoo", pIcoo);
        }

        if (pFacIcos != null) {
            localVarFormParams.put("p_fac_icos", pFacIcos);
        }

        if (pEjscreen != null) {
            localVarFormParams.put("p_ejscreen", pEjscreen);
        }

        if (pLimitAddr != null) {
            localVarFormParams.put("p_limit_addr", pLimitAddr);
        }

        if (pLat != null) {
            localVarFormParams.put("p_lat", pLat);
        }

        if (pLong != null) {
            localVarFormParams.put("p_long", pLong);
        }

        if (pRadius != null) {
            localVarFormParams.put("p_radius", pRadius);
        }

        if (pEjscreenOver80cnt != null) {
            localVarFormParams.put("p_ejscreen_over80cnt", pEjscreenOver80cnt);
        }

        if (pAgoo != null) {
            localVarFormParams.put("p_agoo", pAgoo);
        }

        if (pNeiu != null) {
            localVarFormParams.put("p_neiu", pNeiu);
        }

        if (queryset != null) {
            localVarFormParams.put("queryset", queryset);
        }

        if (responseset != null) {
            localVarFormParams.put("responseset", responseset);
        }

        if (tablelist != null) {
            localVarFormParams.put("tablelist", tablelist);
        }

        if (maplist != null) {
            localVarFormParams.put("maplist", maplist);
        }

        if (summarylist != null) {
            localVarFormParams.put("summarylist", summarylist);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetFacilitiesPostValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFea5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback _callback) throws ApiException {
        return echoRestServicesGetFacilitiesPostCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFea5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, _callback);

    }

    /**
     * Combined ECHO Facility Search Service
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \\\&quot;Y\\\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFea5yr A Y value identifies facilities that have had a formal enforcement action within the last 5 years. (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return EchoRestServicesGetFacilitiesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public EchoRestServicesGetFacilitiesGet200Response echoRestServicesGetFacilitiesPost(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFea5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns) throws ApiException {
        ApiResponse<EchoRestServicesGetFacilitiesGet200Response> localVarResp = echoRestServicesGetFacilitiesPostWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFea5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Facility Search Service
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \\\&quot;Y\\\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFea5yr A Y value identifies facilities that have had a formal enforcement action within the last 5 years. (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return ApiResponse&lt;EchoRestServicesGetFacilitiesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EchoRestServicesGetFacilitiesGet200Response> echoRestServicesGetFacilitiesPostWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFea5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetFacilitiesPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFea5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, null);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetFacilitiesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Facility Search Service (asynchronously)
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \\\&quot;Y\\\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFea5yr A Y value identifies facilities that have had a formal enforcement action within the last 5 years. (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetFacilitiesPostAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFea5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback<EchoRestServicesGetFacilitiesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetFacilitiesPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFea5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, _callback);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetFacilitiesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetFacilityInfoGet
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \&quot;Y\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFeac5yr  (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The determination as to whether Facilities or Clusters are returned is based on the number of facilities that meet the specified criteria. Generally, if there are more than ~2000 facilities, the search will return clusters; otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetFacilityInfoGetCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFeac5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_facility_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (pFn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fn", pFn));
        }

        if (pSa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa", pSa));
        }

        if (pSa1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa1", pSa1));
        }

        if (pCt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ct", pCt));
        }

        if (pCo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_co", pCo));
        }

        if (pFips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fips", pFips));
        }

        if (pSt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_st", pSt));
        }

        if (pZip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_zip", pZip));
        }

        if (pFrs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_frs", pFrs));
        }

        if (pReg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_reg", pReg));
        }

        if (pSic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic", pSic));
        }

        if (pNcs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ncs", pNcs));
        }

        if (pPen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pen", pPen));
        }

        if (xmin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xmin", xmin));
        }

        if (ymin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymin", ymin));
        }

        if (xmax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xmax", xmax));
        }

        if (ymax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymax", ymax));
        }

        if (pUsmex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_usmex", pUsmex));
        }

        if (pSic2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic2", pSic2));
        }

        if (pSic4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic4", pSic4));
        }

        if (pFa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fa", pFa));
        }

        if (pFf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ff", pFf));
        }

        if (pAct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_act", pAct));
        }

        if (pMaj != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_maj", pMaj));
        }

        if (pMact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_mact", pMact));
        }

        if (pFea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fea", pFea));
        }

        if (pFeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feay", pFeay));
        }

        if (pFeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feaa", pFeaa));
        }

        if (pFeac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feac", pFeac));
        }

        if (pFeac5yr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feac_5yr", pFeac5yr));
        }

        if (pIea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iea", pIea));
        }

        if (pIeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieay", pIeay));
        }

        if (pIeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieaa", pIeaa));
        }

        if (pIea5yr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iea_5yr", pIea5yr));
        }

        if (pCs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_cs", pCs));
        }

        if (pQiv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qiv", pQiv));
        }

        if (pNaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_naa", pNaa));
        }

        if (pImpw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_impw", pImpw));
        }

        if (pTrep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_trep", pTrep));
        }

        if (pOcr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ocr", pOcr));
        }

        if (pOct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_oct", pOct));
        }

        if (pPm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pm", pPm));
        }

        if (pPd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pd", pPd));
        }

        if (pIco != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ico", pIco));
        }

        if (pHuc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_huc", pHuc));
        }

        if (pPid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pid", pPid));
        }

        if (pMed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_med", pMed));
        }

        if (pIstatute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_istatute", pIstatute));
        }

        if (pYsl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysl", pYsl));
        }

        if (pYsly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysly", pYsly));
        }

        if (pYsla != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysla", pYsla));
        }

        if (pQs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qs", pQs));
        }

        if (pSfs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sfs", pSfs));
        }

        if (pTribeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribeid", pTribeid));
        }

        if (pTribename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribename", pTribename));
        }

        if (pTribedist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribedist", pTribedist));
        }

        if (pWbd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_wbd", pWbd));
        }

        if (pFntype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fntype", pFntype));
        }

        if (pIcoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_icoo", pIcoo));
        }

        if (pFacIcos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fac_icos", pFacIcos));
        }

        if (pEjscreen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen", pEjscreen));
        }

        if (pLimitAddr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_limit_addr", pLimitAddr));
        }

        if (pLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_lat", pLat));
        }

        if (pLong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_long", pLong));
        }

        if (pRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_radius", pRadius));
        }

        if (pEjscreenOver80cnt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen_over80cnt", pEjscreenOver80cnt));
        }

        if (pAgoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_agoo", pAgoo));
        }

        if (pNeiu != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_neiu", pNeiu));
        }

        if (responseset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseset", responseset));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetFacilityInfoGetValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFeac5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        return echoRestServicesGetFacilityInfoGetCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFeac5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, responseset, paramCallback, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Combined ECHO Facility Enhanced Search Service
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \&quot;Y\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFeac5yr  (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return EchoRestServicesGetFacilityInfoGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The determination as to whether Facilities or Clusters are returned is based on the number of facilities that meet the specified criteria. Generally, if there are more than ~2000 facilities, the search will return clusters; otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public EchoRestServicesGetFacilityInfoGet200Response echoRestServicesGetFacilityInfoGet(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFeac5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<EchoRestServicesGetFacilityInfoGet200Response> localVarResp = echoRestServicesGetFacilityInfoGetWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFeac5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, responseset, paramCallback, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Facility Enhanced Search Service
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \&quot;Y\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFeac5yr  (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;EchoRestServicesGetFacilityInfoGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The determination as to whether Facilities or Clusters are returned is based on the number of facilities that meet the specified criteria. Generally, if there are more than ~2000 facilities, the search will return clusters; otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EchoRestServicesGetFacilityInfoGet200Response> echoRestServicesGetFacilityInfoGetWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFeac5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetFacilityInfoGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFeac5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, responseset, paramCallback, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetFacilityInfoGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Facility Enhanced Search Service (asynchronously)
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \&quot;Y\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFeac5yr  (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The determination as to whether Facilities or Clusters are returned is based on the number of facilities that meet the specified criteria. Generally, if there are more than ~2000 facilities, the search will return clusters; otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetFacilityInfoGetAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFeac5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<EchoRestServicesGetFacilityInfoGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetFacilityInfoGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFeac5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, responseset, paramCallback, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetFacilityInfoGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetFacilityInfoPost
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \\\&quot;Y\\\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFeac5yr  (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The determination as to whether Facilities or Clusters are returned is based on the number of facilities that meet the specified criteria. Generally, if there are more than ~2000 facilities, the search will return clusters; otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetFacilityInfoPostCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFeac5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_facility_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (pFn != null) {
            localVarFormParams.put("p_fn", pFn);
        }

        if (pSa != null) {
            localVarFormParams.put("p_sa", pSa);
        }

        if (pSa1 != null) {
            localVarFormParams.put("p_sa1", pSa1);
        }

        if (pCt != null) {
            localVarFormParams.put("p_ct", pCt);
        }

        if (pCo != null) {
            localVarFormParams.put("p_co", pCo);
        }

        if (pFips != null) {
            localVarFormParams.put("p_fips", pFips);
        }

        if (pSt != null) {
            localVarFormParams.put("p_st", pSt);
        }

        if (pZip != null) {
            localVarFormParams.put("p_zip", pZip);
        }

        if (pFrs != null) {
            localVarFormParams.put("p_frs", pFrs);
        }

        if (pReg != null) {
            localVarFormParams.put("p_reg", pReg);
        }

        if (pSic != null) {
            localVarFormParams.put("p_sic", pSic);
        }

        if (pNcs != null) {
            localVarFormParams.put("p_ncs", pNcs);
        }

        if (pPen != null) {
            localVarFormParams.put("p_pen", pPen);
        }

        if (xmin != null) {
            localVarFormParams.put("xmin", xmin);
        }

        if (ymin != null) {
            localVarFormParams.put("ymin", ymin);
        }

        if (xmax != null) {
            localVarFormParams.put("xmax", xmax);
        }

        if (ymax != null) {
            localVarFormParams.put("ymax", ymax);
        }

        if (pUsmex != null) {
            localVarFormParams.put("p_usmex", pUsmex);
        }

        if (pSic2 != null) {
            localVarFormParams.put("p_sic2", pSic2);
        }

        if (pSic4 != null) {
            localVarFormParams.put("p_sic4", pSic4);
        }

        if (pFa != null) {
            localVarFormParams.put("p_fa", pFa);
        }

        if (pFf != null) {
            localVarFormParams.put("p_ff", pFf);
        }

        if (pAct != null) {
            localVarFormParams.put("p_act", pAct);
        }

        if (pMaj != null) {
            localVarFormParams.put("p_maj", pMaj);
        }

        if (pMact != null) {
            localVarFormParams.put("p_mact", pMact);
        }

        if (pFea != null) {
            localVarFormParams.put("p_fea", pFea);
        }

        if (pFeay != null) {
            localVarFormParams.put("p_feay", pFeay);
        }

        if (pFeaa != null) {
            localVarFormParams.put("p_feaa", pFeaa);
        }

        if (pFeac != null) {
            localVarFormParams.put("p_feac", pFeac);
        }

        if (pFeac5yr != null) {
            localVarFormParams.put("p_feac_5yr", pFeac5yr);
        }

        if (pIea != null) {
            localVarFormParams.put("p_iea", pIea);
        }

        if (pIeay != null) {
            localVarFormParams.put("p_ieay", pIeay);
        }

        if (pIeaa != null) {
            localVarFormParams.put("p_ieaa", pIeaa);
        }

        if (pIea5yr != null) {
            localVarFormParams.put("p_iea_5yr", pIea5yr);
        }

        if (pCs != null) {
            localVarFormParams.put("p_cs", pCs);
        }

        if (pQiv != null) {
            localVarFormParams.put("p_qiv", pQiv);
        }

        if (pNaa != null) {
            localVarFormParams.put("p_naa", pNaa);
        }

        if (pImpw != null) {
            localVarFormParams.put("p_impw", pImpw);
        }

        if (pTrep != null) {
            localVarFormParams.put("p_trep", pTrep);
        }

        if (pOcr != null) {
            localVarFormParams.put("p_ocr", pOcr);
        }

        if (pOct != null) {
            localVarFormParams.put("p_oct", pOct);
        }

        if (pPm != null) {
            localVarFormParams.put("p_pm", pPm);
        }

        if (pPd != null) {
            localVarFormParams.put("p_pd", pPd);
        }

        if (pIco != null) {
            localVarFormParams.put("p_ico", pIco);
        }

        if (pHuc != null) {
            localVarFormParams.put("p_huc", pHuc);
        }

        if (pPid != null) {
            localVarFormParams.put("p_pid", pPid);
        }

        if (pMed != null) {
            localVarFormParams.put("p_med", pMed);
        }

        if (pIstatute != null) {
            localVarFormParams.put("p_istatute", pIstatute);
        }

        if (pYsl != null) {
            localVarFormParams.put("p_ysl", pYsl);
        }

        if (pYsly != null) {
            localVarFormParams.put("p_ysly", pYsly);
        }

        if (pYsla != null) {
            localVarFormParams.put("p_ysla", pYsla);
        }

        if (pQs != null) {
            localVarFormParams.put("p_qs", pQs);
        }

        if (pSfs != null) {
            localVarFormParams.put("p_sfs", pSfs);
        }

        if (pTribeid != null) {
            localVarFormParams.put("p_tribeid", pTribeid);
        }

        if (pTribename != null) {
            localVarFormParams.put("p_tribename", pTribename);
        }

        if (pTribedist != null) {
            localVarFormParams.put("p_tribedist", pTribedist);
        }

        if (pWbd != null) {
            localVarFormParams.put("p_wbd", pWbd);
        }

        if (pFntype != null) {
            localVarFormParams.put("p_fntype", pFntype);
        }

        if (pIcoo != null) {
            localVarFormParams.put("p_icoo", pIcoo);
        }

        if (pFacIcos != null) {
            localVarFormParams.put("p_fac_icos", pFacIcos);
        }

        if (pEjscreen != null) {
            localVarFormParams.put("p_ejscreen", pEjscreen);
        }

        if (pLimitAddr != null) {
            localVarFormParams.put("p_limit_addr", pLimitAddr);
        }

        if (pLat != null) {
            localVarFormParams.put("p_lat", pLat);
        }

        if (pLong != null) {
            localVarFormParams.put("p_long", pLong);
        }

        if (pRadius != null) {
            localVarFormParams.put("p_radius", pRadius);
        }

        if (pEjscreenOver80cnt != null) {
            localVarFormParams.put("p_ejscreen_over80cnt", pEjscreenOver80cnt);
        }

        if (pAgoo != null) {
            localVarFormParams.put("p_agoo", pAgoo);
        }

        if (pNeiu != null) {
            localVarFormParams.put("p_neiu", pNeiu);
        }

        if (responseset != null) {
            localVarFormParams.put("responseset", responseset);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetFacilityInfoPostValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFeac5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        return echoRestServicesGetFacilityInfoPostCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFeac5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, responseset, paramCallback, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Combined ECHO Facility Enhanced Search Service
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \\\&quot;Y\\\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFeac5yr  (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return EchoRestServicesGetFacilityInfoGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The determination as to whether Facilities or Clusters are returned is based on the number of facilities that meet the specified criteria. Generally, if there are more than ~2000 facilities, the search will return clusters; otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public EchoRestServicesGetFacilityInfoGet200Response echoRestServicesGetFacilityInfoPost(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFeac5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<EchoRestServicesGetFacilityInfoGet200Response> localVarResp = echoRestServicesGetFacilityInfoPostWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFeac5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, responseset, paramCallback, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Facility Enhanced Search Service
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \\\&quot;Y\\\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFeac5yr  (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;EchoRestServicesGetFacilityInfoGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The determination as to whether Facilities or Clusters are returned is based on the number of facilities that meet the specified criteria. Generally, if there are more than ~2000 facilities, the search will return clusters; otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EchoRestServicesGetFacilityInfoGet200Response> echoRestServicesGetFacilityInfoPostWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFeac5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetFacilityInfoPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFeac5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, responseset, paramCallback, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetFacilityInfoGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Facility Enhanced Search Service (asynchronously)
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pFeac Formal Enforcment Action Last Case Date Limiter Flag.  Enter a value of \\\&quot;Y\\\&quot; to additionally apply the p_feay year filter to the last formal enforcement action case date.  Use the p_fea parameter to control if the filter is within or outside the date span provided. (optional)
     * @param pFeac5yr  (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pIea5yr A Y value identifies facilities that have had an informal enforcement action within the last 5 years. (optional)
     * @param pCs Facility Compliance Limiter.  Enter 2, 3 or 4 to limit facilities returned. - 2 &#x3D; Facilities in noncompliance. - 3 &#x3D; Facilities having one or more programs reporting significant noncompliance. - 4 &#x3D; Facilities having more than one program reporting significant noncompliance. (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pOcr Toxics Release Inventory Pounds of On-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pOct Toxic Release Inventory Pounds of Off-Site Chemical Releases Limiter.  Enter a keyword to filter results. - Z &#x3D; Zero pounds of chemical releases. - GT0 &#x3D; More than zero pounds of chemical releases. - GT1000 &#x3D; More than one thousand pounds of chemical releases. - GT5000 &#x3D; More than five thousand pounds of chemical releases. - GT10000 &#x3D; More than ten thousand pounds of chemical releases. - GT20000 &#x3D; More than twenty thousand pounds of chemical releases. - GT50000 &#x3D; More than fifty thousand pounds of chemical releases. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media.- A &#x3D; Air- C &#x3D; CAMD (Clean Air Markets Division)- E &#x3D; EIS (Emissions Inventory Systems)- G &#x3D; GHG (Greenhouse Gases)- M &#x3D; RMP (Risk Management Plan)- R &#x3D; RCRA (Hazardous Waste)- S &#x3D; SDWA (Public Drinking Water Systems)- T &#x3D; TRI (Toxic Release Inventory)- TSCA &#x3D; TSCA (Toxic Substances Control Act)- W &#x3D; Water- ALL &#x3D; Air and Water and RCRA (optional)
     * @param pIstatute For use in identifying Facilities that have an inspection performed under the entered Statute. (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pNeiu  (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The determination as to whether Facilities or Clusters are returned is based on the number of facilities that meet the specified criteria. Generally, if there are more than ~2000 facilities, the search will return clusters; otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetFacilityInfoPostAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pFeac, String pFeac5yr, String pIea, BigDecimal pIeay, String pIeaa, String pIea5yr, BigDecimal pCs, String pQiv, String pNaa, String pImpw, String pTrep, String pOcr, String pOct, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pIstatute, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pWbd, String pFntype, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pAgoo, String pNeiu, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<EchoRestServicesGetFacilityInfoGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetFacilityInfoPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pFeac, pFeac5yr, pIea, pIeay, pIeaa, pIea5yr, pCs, pQiv, pNaa, pImpw, pTrep, pOcr, pOct, pPm, pPd, pIco, pHuc, pPid, pMed, pIstatute, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pWbd, pFntype, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pAgoo, pNeiu, responseset, paramCallback, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetFacilityInfoGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetGeojsonGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetGeojsonGetCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_geojson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (newsort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newsort", newsort));
        }

        if (descending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descending", descending));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetGeojsonGetValidateBeforeCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling echoRestServicesGetGeojsonGet(Async)");
        }

        return echoRestServicesGetGeojsonGetCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Combined ECHO GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return EchoRestServicesGetGeojsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public EchoRestServicesGetGeojsonGet200Response echoRestServicesGetGeojsonGet(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<EchoRestServicesGetGeojsonGet200Response> localVarResp = echoRestServicesGetGeojsonGetWithHttpInfo(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;EchoRestServicesGetGeojsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EchoRestServicesGetGeojsonGet200Response> echoRestServicesGetGeojsonGetWithHttpInfo(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetGeojsonGetValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetGeojsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO GeoJSON Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetGeojsonGetAsync(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<EchoRestServicesGetGeojsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetGeojsonGetValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetGeojsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetGeojsonPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetGeojsonPostCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_geojson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (newsort != null) {
            localVarFormParams.put("newsort", newsort);
        }

        if (descending != null) {
            localVarFormParams.put("descending", descending);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetGeojsonPostValidateBeforeCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling echoRestServicesGetGeojsonPost(Async)");
        }

        return echoRestServicesGetGeojsonPostCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Combined ECHO GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return EchoRestServicesGetGeojsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public EchoRestServicesGetGeojsonGet200Response echoRestServicesGetGeojsonPost(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<EchoRestServicesGetGeojsonGet200Response> localVarResp = echoRestServicesGetGeojsonPostWithHttpInfo(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;EchoRestServicesGetGeojsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EchoRestServicesGetGeojsonGet200Response> echoRestServicesGetGeojsonPostWithHttpInfo(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetGeojsonPostValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetGeojsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO GeoJSON Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetGeojsonPostAsync(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<EchoRestServicesGetGeojsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetGeojsonPostValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetGeojsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetInfoClustersGet
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetInfoClustersGetCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_info_clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (pQid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qid", pQid));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetInfoClustersGetValidateBeforeCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pQid' is set
        if (pQid == null) {
            throw new ApiException("Missing the required parameter 'pQid' when calling echoRestServicesGetInfoClustersGet(Async)");
        }

        return echoRestServicesGetInfoClustersGetCall(pQid, output, pPrettyPrint, _callback);

    }

    /**
     * Combined ECHO Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File echoRestServicesGetInfoClustersGet(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = echoRestServicesGetInfoClustersGetWithHttpInfo(pQid, output, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> echoRestServicesGetInfoClustersGetWithHttpInfo(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetInfoClustersGetValidateBeforeCall(pQid, output, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Info Clusters Service (asynchronously)
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetInfoClustersGetAsync(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetInfoClustersGetValidateBeforeCall(pQid, output, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetInfoClustersPost
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetInfoClustersPostCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_info_clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (pQid != null) {
            localVarFormParams.put("p_qid", pQid);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetInfoClustersPostValidateBeforeCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pQid' is set
        if (pQid == null) {
            throw new ApiException("Missing the required parameter 'pQid' when calling echoRestServicesGetInfoClustersPost(Async)");
        }

        return echoRestServicesGetInfoClustersPostCall(pQid, output, pPrettyPrint, _callback);

    }

    /**
     * Combined ECHO Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File echoRestServicesGetInfoClustersPost(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = echoRestServicesGetInfoClustersPostWithHttpInfo(pQid, output, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> echoRestServicesGetInfoClustersPostWithHttpInfo(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetInfoClustersPostValidateBeforeCall(pQid, output, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Info Clusters Service (asynchronously)
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetInfoClustersPostAsync(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetInfoClustersPostValidateBeforeCall(pQid, output, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetMapGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetMapGetCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (tablelist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tablelist", tablelist));
        }

        if (c1Lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c1_lat", c1Lat));
        }

        if (c1Long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c1_long", c1Long));
        }

        if (c2Lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c2_lat", c2Lat));
        }

        if (c2Long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c2_long", c2Long));
        }

        if (pId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_id", pId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetMapGetValidateBeforeCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling echoRestServicesGetMapGet(Async)");
        }

        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling echoRestServicesGetMapGet(Async)");
        }

        return echoRestServicesGetMapGetCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);

    }

    /**
     * Combined ECHO Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return EchoRestServicesGetMapGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public EchoRestServicesGetMapGet200Response echoRestServicesGetMapGet(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        ApiResponse<EchoRestServicesGetMapGet200Response> localVarResp = echoRestServicesGetMapGetWithHttpInfo(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return ApiResponse&lt;EchoRestServicesGetMapGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EchoRestServicesGetMapGet200Response> echoRestServicesGetMapGetWithHttpInfo(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetMapGetValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, null);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetMapGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Map Service (asynchronously)
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetMapGetAsync(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback<EchoRestServicesGetMapGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetMapGetValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetMapGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetMapPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetMapPostCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (tablelist != null) {
            localVarFormParams.put("tablelist", tablelist);
        }

        if (c1Lat != null) {
            localVarFormParams.put("c1_lat", c1Lat);
        }

        if (c1Long != null) {
            localVarFormParams.put("c1_long", c1Long);
        }

        if (c2Lat != null) {
            localVarFormParams.put("c2_lat", c2Lat);
        }

        if (c2Long != null) {
            localVarFormParams.put("c2_long", c2Long);
        }

        if (pId != null) {
            localVarFormParams.put("p_id", pId);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetMapPostValidateBeforeCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling echoRestServicesGetMapPost(Async)");
        }

        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling echoRestServicesGetMapPost(Async)");
        }

        return echoRestServicesGetMapPostCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);

    }

    /**
     * Combined ECHO Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return EchoRestServicesGetMapGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public EchoRestServicesGetMapGet200Response echoRestServicesGetMapPost(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        ApiResponse<EchoRestServicesGetMapGet200Response> localVarResp = echoRestServicesGetMapPostWithHttpInfo(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return ApiResponse&lt;EchoRestServicesGetMapGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EchoRestServicesGetMapGet200Response> echoRestServicesGetMapPostWithHttpInfo(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetMapPostValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, null);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetMapGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Map Service (asynchronously)
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetMapPostAsync(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback<EchoRestServicesGetMapGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetMapPostValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetMapGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetQidGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page) Facility Registry System (FRS)  Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetQidGetCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_qid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (pageno != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageno", pageno));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (newsort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newsort", newsort));
        }

        if (descending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descending", descending));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetQidGetValidateBeforeCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling echoRestServicesGetQidGet(Async)");
        }

        return echoRestServicesGetQidGetCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);

    }

    /**
     * Combined ECHO Paginated Results Service
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return EchoRestServicesGetQidGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page) Facility Registry System (FRS)  Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public EchoRestServicesGetQidGet200Response echoRestServicesGetQidGet(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        ApiResponse<EchoRestServicesGetQidGet200Response> localVarResp = echoRestServicesGetQidGetWithHttpInfo(qid, output, pageno, paramCallback, newsort, descending, qcolumns);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Paginated Results Service
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return ApiResponse&lt;EchoRestServicesGetQidGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page) Facility Registry System (FRS)  Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EchoRestServicesGetQidGet200Response> echoRestServicesGetQidGetWithHttpInfo(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetQidGetValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, null);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetQidGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Paginated Results Service (asynchronously)
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page) Facility Registry System (FRS)  Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetQidGetAsync(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback<EchoRestServicesGetQidGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetQidGetValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetQidGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for echoRestServicesGetQidPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page) Facility Registry System (FRS)  Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetQidPostCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/echo_rest_services.get_qid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (pageno != null) {
            localVarFormParams.put("pageno", pageno);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (newsort != null) {
            localVarFormParams.put("newsort", newsort);
        }

        if (descending != null) {
            localVarFormParams.put("descending", descending);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call echoRestServicesGetQidPostValidateBeforeCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling echoRestServicesGetQidPost(Async)");
        }

        return echoRestServicesGetQidPostCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);

    }

    /**
     * Combined ECHO Paginated Results Service
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return EchoRestServicesGetQidGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page) Facility Registry System (FRS)  Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public EchoRestServicesGetQidGet200Response echoRestServicesGetQidPost(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        ApiResponse<EchoRestServicesGetQidGet200Response> localVarResp = echoRestServicesGetQidPostWithHttpInfo(qid, output, pageno, paramCallback, newsort, descending, qcolumns);
        return localVarResp.getData();
    }

    /**
     * Combined ECHO Paginated Results Service
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return ApiResponse&lt;EchoRestServicesGetQidGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page) Facility Registry System (FRS)  Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EchoRestServicesGetQidGet200Response> echoRestServicesGetQidPostWithHttpInfo(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        okhttp3.Call localVarCall = echoRestServicesGetQidPostValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, null);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetQidGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combined ECHO Paginated Results Service (asynchronously)
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page) Facility Registry System (FRS)  Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call echoRestServicesGetQidPostAsync(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback<EchoRestServicesGetQidGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = echoRestServicesGetQidPostValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);
        Type localVarReturnType = new TypeToken<EchoRestServicesGetQidGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
