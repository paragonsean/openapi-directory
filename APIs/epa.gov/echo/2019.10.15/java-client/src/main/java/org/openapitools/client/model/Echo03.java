/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - All Data
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.  ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    ECHO Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated as Clean Air Act (CAA) stationary sources, Clean Water Act (CWA) dischargers, Resource Conservation and Recovery Act (RCRA) hazardous waste generators/handlers, and Safe Drinking Water Act (SDWA) public water systems.  Data of interest from other EPA sources, such as the Toxics Release Inventory, is also supplied for context.   \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.     The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Facilities Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:25.812615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Echo03 {
  public static final String SERIALIZED_NAME_AI_R_FLAG = "AIRFlag";
  @SerializedName(SERIALIZED_NAME_AI_R_FLAG)
  private String aiRFlag;

  public static final String SERIALIZED_NAME_AI_R_I_DS = "AIRIDs";
  @SerializedName(SERIALIZED_NAME_AI_R_I_DS)
  private String aiRIDs;

  public static final String SERIALIZED_NAME_ACTIVE_LOWER48 = "ActiveLower48";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LOWER48)
  private String activeLower48;

  public static final String SERIALIZED_NAME_BIOSOLIDS_FLAG = "BiosolidsFlag";
  @SerializedName(SERIALIZED_NAME_BIOSOLIDS_FLAG)
  private String biosolidsFlag;

  public static final String SERIALIZED_NAME_CA_A3YR_COMPL_QTRS_HISTORY = "CAA3yrComplQtrsHistory";
  @SerializedName(SERIALIZED_NAME_CA_A3YR_COMPL_QTRS_HISTORY)
  private String caA3yrComplQtrsHistory;

  public static final String SERIALIZED_NAME_CA_A_COMPLIANCE_STATUS = "CAAComplianceStatus";
  @SerializedName(SERIALIZED_NAME_CA_A_COMPLIANCE_STATUS)
  private String caAComplianceStatus;

  public static final String SERIALIZED_NAME_CA_A_DATE_LAST_FORMAL_ACTION = "CAADateLastFormalAction";
  @SerializedName(SERIALIZED_NAME_CA_A_DATE_LAST_FORMAL_ACTION)
  private String caADateLastFormalAction;

  public static final String SERIALIZED_NAME_CA_A_DAYS_LAST_EVALUATION = "CAADaysLastEvaluation";
  @SerializedName(SERIALIZED_NAME_CA_A_DAYS_LAST_EVALUATION)
  private String caADaysLastEvaluation;

  public static final String SERIALIZED_NAME_CA_A_EVALUATION_COUNT = "CAAEvaluationCount";
  @SerializedName(SERIALIZED_NAME_CA_A_EVALUATION_COUNT)
  private String caAEvaluationCount;

  public static final String SERIALIZED_NAME_CA_A_FORMAL_ACTION_COUNT = "CAAFormalActionCount";
  @SerializedName(SERIALIZED_NAME_CA_A_FORMAL_ACTION_COUNT)
  private String caAFormalActionCount;

  public static final String SERIALIZED_NAME_CA_A_HPV_FLAG = "CAAHpvFlag";
  @SerializedName(SERIALIZED_NAME_CA_A_HPV_FLAG)
  private String caAHpvFlag;

  public static final String SERIALIZED_NAME_CA_A_INFORMAL_COUNT = "CAAInformalCount";
  @SerializedName(SERIALIZED_NAME_CA_A_INFORMAL_COUNT)
  private String caAInformalCount;

  public static final String SERIALIZED_NAME_CA_A_LAST_PENALTY_AMT = "CAALastPenaltyAmt";
  @SerializedName(SERIALIZED_NAME_CA_A_LAST_PENALTY_AMT)
  private String caALastPenaltyAmt;

  public static final String SERIALIZED_NAME_CA_A_LAST_PENALTY_DATE = "CAALastPenaltyDate";
  @SerializedName(SERIALIZED_NAME_CA_A_LAST_PENALTY_DATE)
  private String caALastPenaltyDate;

  public static final String SERIALIZED_NAME_C_A_A_N_A_I_C_S = "CAANAICS";
  @SerializedName(SERIALIZED_NAME_C_A_A_N_A_I_C_S)
  private String CAANAICS;

  public static final String SERIALIZED_NAME_CA_A_PENALTIES = "CAAPenalties";
  @SerializedName(SERIALIZED_NAME_CA_A_PENALTIES)
  private String caAPenalties;

  public static final String SERIALIZED_NAME_CA_A_PERMIT_TYPES = "CAAPermitTypes";
  @SerializedName(SERIALIZED_NAME_CA_A_PERMIT_TYPES)
  private String caAPermitTypes;

  public static final String SERIALIZED_NAME_CA_A_QTRS_WITH_N_C = "CAAQtrsWithNC";
  @SerializedName(SERIALIZED_NAME_CA_A_QTRS_WITH_N_C)
  private String caAQtrsWithNC;

  public static final String SERIALIZED_NAME_CA_A_S_I_CS = "CAASICs";
  @SerializedName(SERIALIZED_NAME_CA_A_S_I_CS)
  private String caASICs;

  public static final String SERIALIZED_NAME_CW_A13QTRS_COMPL_HISTORY = "CWA13qtrsComplHistory";
  @SerializedName(SERIALIZED_NAME_CW_A13QTRS_COMPL_HISTORY)
  private String cwA13qtrsComplHistory;

  public static final String SERIALIZED_NAME_CW_A13QTRS_EFFLNT_EXCEEDANCES = "CWA13qtrsEfflntExceedances";
  @SerializedName(SERIALIZED_NAME_CW_A13QTRS_EFFLNT_EXCEEDANCES)
  private String cwA13qtrsEfflntExceedances;

  public static final String SERIALIZED_NAME_CW_A3_YR_QNCR_CODES = "CWA3YrQncrCodes";
  @SerializedName(SERIALIZED_NAME_CW_A3_YR_QNCR_CODES)
  private String cwA3YrQncrCodes;

  public static final String SERIALIZED_NAME_CW_A_COMPLIANCE_STATUS = "CWAComplianceStatus";
  @SerializedName(SERIALIZED_NAME_CW_A_COMPLIANCE_STATUS)
  private String cwAComplianceStatus;

  public static final String SERIALIZED_NAME_CW_A_COMPLIANCE_TRACKING = "CWAComplianceTracking";
  @SerializedName(SERIALIZED_NAME_CW_A_COMPLIANCE_TRACKING)
  private String cwAComplianceTracking;

  public static final String SERIALIZED_NAME_CW_A_DATE_LAST_FORMAL_ACTION = "CWADateLastFormalAction";
  @SerializedName(SERIALIZED_NAME_CW_A_DATE_LAST_FORMAL_ACTION)
  private String cwADateLastFormalAction;

  public static final String SERIALIZED_NAME_CW_A_DAYS_LAST_INSPECTION = "CWADaysLastInspection";
  @SerializedName(SERIALIZED_NAME_CW_A_DAYS_LAST_INSPECTION)
  private String cwADaysLastInspection;

  public static final String SERIALIZED_NAME_CW_A_FORMAL_ACTION_COUNT = "CWAFormalActionCount";
  @SerializedName(SERIALIZED_NAME_CW_A_FORMAL_ACTION_COUNT)
  private String cwAFormalActionCount;

  public static final String SERIALIZED_NAME_CW_A_INFORMAL_COUNT = "CWAInformalCount";
  @SerializedName(SERIALIZED_NAME_CW_A_INFORMAL_COUNT)
  private String cwAInformalCount;

  public static final String SERIALIZED_NAME_CW_A_INSPECTION_COUNT = "CWAInspectionCount";
  @SerializedName(SERIALIZED_NAME_CW_A_INSPECTION_COUNT)
  private String cwAInspectionCount;

  public static final String SERIALIZED_NAME_CW_A_LAST_PENALTY_AMT = "CWALastPenaltyAmt";
  @SerializedName(SERIALIZED_NAME_CW_A_LAST_PENALTY_AMT)
  private String cwALastPenaltyAmt;

  public static final String SERIALIZED_NAME_CW_A_LAST_PENALTY_DATE = "CWALastPenaltyDate";
  @SerializedName(SERIALIZED_NAME_CW_A_LAST_PENALTY_DATE)
  private String cwALastPenaltyDate;

  public static final String SERIALIZED_NAME_C_W_A_N_A_I_C_S = "CWANAICS";
  @SerializedName(SERIALIZED_NAME_C_W_A_N_A_I_C_S)
  private String CWANAICS;

  public static final String SERIALIZED_NAME_CW_A_PENALTIES = "CWAPenalties";
  @SerializedName(SERIALIZED_NAME_CW_A_PENALTIES)
  private String cwAPenalties;

  public static final String SERIALIZED_NAME_CW_A_PERMIT_TYPES = "CWAPermitTypes";
  @SerializedName(SERIALIZED_NAME_CW_A_PERMIT_TYPES)
  private String cwAPermitTypes;

  public static final String SERIALIZED_NAME_CW_A_QTRS_WITH_N_C = "CWAQtrsWithNC";
  @SerializedName(SERIALIZED_NAME_CW_A_QTRS_WITH_N_C)
  private String cwAQtrsWithNC;

  public static final String SERIALIZED_NAME_CW_A_S_I_CS = "CWASICs";
  @SerializedName(SERIALIZED_NAME_CW_A_S_I_CS)
  private String cwASICs;

  public static final String SERIALIZED_NAME_CW_A_S_N_C_FLAG = "CWASNCFlag";
  @SerializedName(SERIALIZED_NAME_CW_A_S_N_C_FLAG)
  private String cwASNCFlag;

  public static final String SERIALIZED_NAME_CAMD_I_DS = "CamdIDs";
  @SerializedName(SERIALIZED_NAME_CAMD_I_DS)
  private String camdIDs;

  public static final String SERIALIZED_NAME_CENSUS_BLOCK_GROUP = "CensusBlockGroup";
  @SerializedName(SERIALIZED_NAME_CENSUS_BLOCK_GROUP)
  private String censusBlockGroup;

  public static final String SERIALIZED_NAME_CURR_SV_FLAG = "CurrSvFlag";
  @SerializedName(SERIALIZED_NAME_CURR_SV_FLAG)
  private String currSvFlag;

  public static final String SERIALIZED_NAME_CURR_VIO_FLAG = "CurrVioFlag";
  @SerializedName(SERIALIZED_NAME_CURR_VIO_FLAG)
  private String currVioFlag;

  public static final String SERIALIZED_NAME_DFR_URL = "DfrUrl";
  @SerializedName(SERIALIZED_NAME_DFR_URL)
  private String dfrUrl;

  public static final String SERIALIZED_NAME_EA5YR_FLAG = "Ea5yrFlag";
  @SerializedName(SERIALIZED_NAME_EA5YR_FLAG)
  private String ea5yrFlag;

  public static final String SERIALIZED_NAME_EFF_CHARTS_FLAG = "EffChartsFlag";
  @SerializedName(SERIALIZED_NAME_EFF_CHARTS_FLAG)
  private String effChartsFlag;

  public static final String SERIALIZED_NAME_EIS_FLAG = "EisFlag";
  @SerializedName(SERIALIZED_NAME_EIS_FLAG)
  private String eisFlag;

  public static final String SERIALIZED_NAME_EIS_I_DS = "EisIDs";
  @SerializedName(SERIALIZED_NAME_EIS_I_DS)
  private String eisIDs;

  public static final String SERIALIZED_NAME_EJSCREEN_FLAG = "EjscreenFlag";
  @SerializedName(SERIALIZED_NAME_EJSCREEN_FLAG)
  private String ejscreenFlag;

  public static final String SERIALIZED_NAME_EJSCREEN_FLAG_US = "EjscreenFlagUs";
  @SerializedName(SERIALIZED_NAME_EJSCREEN_FLAG_US)
  private String ejscreenFlagUs;

  public static final String SERIALIZED_NAME_EPCRA_INSPECTIONS5YR = "EpcraInspections5yr";
  @SerializedName(SERIALIZED_NAME_EPCRA_INSPECTIONS5YR)
  private String epcraInspections5yr;

  public static final String SERIALIZED_NAME_FAC3YR_COMPLIANCE_HISTORY = "Fac3yrComplianceHistory";
  @SerializedName(SERIALIZED_NAME_FAC3YR_COMPLIANCE_HISTORY)
  private String fac3yrComplianceHistory;

  public static final String SERIALIZED_NAME_FAC_ACCURACY_METERS = "FacAccuracyMeters";
  @SerializedName(SERIALIZED_NAME_FAC_ACCURACY_METERS)
  private String facAccuracyMeters;

  public static final String SERIALIZED_NAME_FAC_ACTIVE_FLAG = "FacActiveFlag";
  @SerializedName(SERIALIZED_NAME_FAC_ACTIVE_FLAG)
  private String facActiveFlag;

  public static final String SERIALIZED_NAME_FAC_CHESAPEAKE_BAY_FLG = "FacChesapeakeBayFlg";
  @SerializedName(SERIALIZED_NAME_FAC_CHESAPEAKE_BAY_FLG)
  private String facChesapeakeBayFlg;

  public static final String SERIALIZED_NAME_FAC_CITY = "FacCity";
  @SerializedName(SERIALIZED_NAME_FAC_CITY)
  private String facCity;

  public static final String SERIALIZED_NAME_FAC_COLLECTION_METHOD = "FacCollectionMethod";
  @SerializedName(SERIALIZED_NAME_FAC_COLLECTION_METHOD)
  private String facCollectionMethod;

  public static final String SERIALIZED_NAME_FAC_COMPLIANCE_STATUS = "FacComplianceStatus";
  @SerializedName(SERIALIZED_NAME_FAC_COMPLIANCE_STATUS)
  private String facComplianceStatus;

  public static final String SERIALIZED_NAME_FAC_COUNTY = "FacCounty";
  @SerializedName(SERIALIZED_NAME_FAC_COUNTY)
  private String facCounty;

  public static final String SERIALIZED_NAME_FAC_DATE_LAST_FORMAL_ACT_E_P_A = "FacDateLastFormalActEPA";
  @SerializedName(SERIALIZED_NAME_FAC_DATE_LAST_FORMAL_ACT_E_P_A)
  private String facDateLastFormalActEPA;

  public static final String SERIALIZED_NAME_FAC_DATE_LAST_FORMAL_ACT_ST = "FacDateLastFormalActSt";
  @SerializedName(SERIALIZED_NAME_FAC_DATE_LAST_FORMAL_ACT_ST)
  private String facDateLastFormalActSt;

  public static final String SERIALIZED_NAME_FAC_DATE_LAST_FORMAL_ACTION = "FacDateLastFormalAction";
  @SerializedName(SERIALIZED_NAME_FAC_DATE_LAST_FORMAL_ACTION)
  private String facDateLastFormalAction;

  public static final String SERIALIZED_NAME_FAC_DATE_LAST_INFORMAL_ACT_E_P_A = "FacDateLastInformalActEPA";
  @SerializedName(SERIALIZED_NAME_FAC_DATE_LAST_INFORMAL_ACT_E_P_A)
  private String facDateLastInformalActEPA;

  public static final String SERIALIZED_NAME_FAC_DATE_LAST_INFORMAL_ACT_ST = "FacDateLastInformalActSt";
  @SerializedName(SERIALIZED_NAME_FAC_DATE_LAST_INFORMAL_ACT_ST)
  private String facDateLastInformalActSt;

  public static final String SERIALIZED_NAME_FAC_DATE_LAST_INFORMAL_ACTION = "FacDateLastInformalAction";
  @SerializedName(SERIALIZED_NAME_FAC_DATE_LAST_INFORMAL_ACTION)
  private String facDateLastInformalAction;

  public static final String SERIALIZED_NAME_FAC_DATE_LAST_INSPECTION = "FacDateLastInspection";
  @SerializedName(SERIALIZED_NAME_FAC_DATE_LAST_INSPECTION)
  private String facDateLastInspection;

  public static final String SERIALIZED_NAME_FAC_DATE_LAST_INSPECTION_E_P_A = "FacDateLastInspectionEPA";
  @SerializedName(SERIALIZED_NAME_FAC_DATE_LAST_INSPECTION_E_P_A)
  private String facDateLastInspectionEPA;

  public static final String SERIALIZED_NAME_FAC_DATE_LAST_INSPECTION_STATE = "FacDateLastInspectionState";
  @SerializedName(SERIALIZED_NAME_FAC_DATE_LAST_INSPECTION_STATE)
  private String facDateLastInspectionState;

  public static final String SERIALIZED_NAME_FAC_DATE_LAST_PENALTY = "FacDateLastPenalty";
  @SerializedName(SERIALIZED_NAME_FAC_DATE_LAST_PENALTY)
  private String facDateLastPenalty;

  public static final String SERIALIZED_NAME_FAC_DAYS_LAST_INSPECTION = "FacDaysLastInspection";
  @SerializedName(SERIALIZED_NAME_FAC_DAYS_LAST_INSPECTION)
  private String facDaysLastInspection;

  public static final String SERIALIZED_NAME_FAC_DERIVED_CB2010 = "FacDerivedCb2010";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_CB2010)
  private String facDerivedCb2010;

  public static final String SERIALIZED_NAME_FAC_DERIVED_CD113 = "FacDerivedCd113";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_CD113)
  private String facDerivedCd113;

  public static final String SERIALIZED_NAME_FAC_DERIVED_HUC = "FacDerivedHuc";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_HUC)
  private String facDerivedHuc;

  public static final String SERIALIZED_NAME_FAC_DERIVED_RAD_W_B_D_HU12 = "FacDerivedRadWBDHu12";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_RAD_W_B_D_HU12)
  private String facDerivedRadWBDHu12;

  public static final String SERIALIZED_NAME_FAC_DERIVED_RAD_W_B_D_HU12_NAME = "FacDerivedRadWBDHu12Name";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_RAD_W_B_D_HU12_NAME)
  private String facDerivedRadWBDHu12Name;

  public static final String SERIALIZED_NAME_FAC_DERIVED_RAD_W_B_D_HU8 = "FacDerivedRadWBDHu8";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_RAD_W_B_D_HU8)
  private String facDerivedRadWBDHu8;

  public static final String SERIALIZED_NAME_FAC_DERIVED_RAD_W_B_D_HU8_NAME = "FacDerivedRadWBDHu8Name";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_RAD_W_B_D_HU8_NAME)
  private String facDerivedRadWBDHu8Name;

  public static final String SERIALIZED_NAME_FAC_DERIVED_STCTY_F_I_P_S = "FacDerivedStctyFIPS";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_STCTY_F_I_P_S)
  private String facDerivedStctyFIPS;

  public static final String SERIALIZED_NAME_FAC_DERIVED_T_R_IBES = "FacDerivedTRIbes";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_T_R_IBES)
  private String facDerivedTRIbes;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D = "FacDerivedWBD";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D)
  private String facDerivedWBD;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D_HU12_NAME = "FacDerivedWBDHu12Name";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D_HU12_NAME)
  private String facDerivedWBDHu12Name;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D_HU8 = "FacDerivedWBDHu8";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D_HU8)
  private String facDerivedWBDHu8;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D_HU8_NAME = "FacDerivedWBDHu8Name";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D_HU8_NAME)
  private String facDerivedWBDHu8Name;

  public static final String SERIALIZED_NAME_FAC_DERIVED_ZIP = "FacDerivedZip";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_ZIP)
  private String facDerivedZip;

  public static final String SERIALIZED_NAME_FAC_E_P_A_REGION = "FacEPARegion";
  @SerializedName(SERIALIZED_NAME_FAC_E_P_A_REGION)
  private String facEPARegion;

  public static final String SERIALIZED_NAME_FAC_F_I_P_S_CODE = "FacFIPSCode";
  @SerializedName(SERIALIZED_NAME_FAC_F_I_P_S_CODE)
  private String facFIPSCode;

  public static final String SERIALIZED_NAME_FAC_FEDERAL_AGENCY = "FacFederalAgency";
  @SerializedName(SERIALIZED_NAME_FAC_FEDERAL_AGENCY)
  private String facFederalAgency;

  public static final String SERIALIZED_NAME_FAC_FEDERAL_AGENCY_NAME = "FacFederalAgencyName";
  @SerializedName(SERIALIZED_NAME_FAC_FEDERAL_AGENCY_NAME)
  private String facFederalAgencyName;

  public static final String SERIALIZED_NAME_FAC_FEDERAL_FLG = "FacFederalFlg";
  @SerializedName(SERIALIZED_NAME_FAC_FEDERAL_FLG)
  private String facFederalFlg;

  public static final String SERIALIZED_NAME_FAC_FORMAL_ACTION_COUNT = "FacFormalActionCount";
  @SerializedName(SERIALIZED_NAME_FAC_FORMAL_ACTION_COUNT)
  private String facFormalActionCount;

  public static final String SERIALIZED_NAME_FAC_IMP_WATER_FLG = "FacImpWaterFlg";
  @SerializedName(SERIALIZED_NAME_FAC_IMP_WATER_FLG)
  private String facImpWaterFlg;

  public static final String SERIALIZED_NAME_FAC_INDIAN_CNTRY_FLG = "FacIndianCntryFlg";
  @SerializedName(SERIALIZED_NAME_FAC_INDIAN_CNTRY_FLG)
  private String facIndianCntryFlg;

  public static final String SERIALIZED_NAME_FAC_INDIAN_SPATIAL_FLG = "FacIndianSpatialFlg";
  @SerializedName(SERIALIZED_NAME_FAC_INDIAN_SPATIAL_FLG)
  private String facIndianSpatialFlg;

  public static final String SERIALIZED_NAME_FAC_INFORMAL_COUNT = "FacInformalCount";
  @SerializedName(SERIALIZED_NAME_FAC_INFORMAL_COUNT)
  private String facInformalCount;

  public static final String SERIALIZED_NAME_FAC_INSPECTION_COUNT = "FacInspectionCount";
  @SerializedName(SERIALIZED_NAME_FAC_INSPECTION_COUNT)
  private String facInspectionCount;

  public static final String SERIALIZED_NAME_FAC_LAST_PENALTY_AMT = "FacLastPenaltyAmt";
  @SerializedName(SERIALIZED_NAME_FAC_LAST_PENALTY_AMT)
  private String facLastPenaltyAmt;

  public static final String SERIALIZED_NAME_FAC_LAT = "FacLat";
  @SerializedName(SERIALIZED_NAME_FAC_LAT)
  private String facLat;

  public static final String SERIALIZED_NAME_FAC_LONG = "FacLong";
  @SerializedName(SERIALIZED_NAME_FAC_LONG)
  private String facLong;

  public static final String SERIALIZED_NAME_FAC_MAJOR_FLAG = "FacMajorFlag";
  @SerializedName(SERIALIZED_NAME_FAC_MAJOR_FLAG)
  private String facMajorFlag;

  public static final String SERIALIZED_NAME_FAC_MAP_FLG = "FacMapFlg";
  @SerializedName(SERIALIZED_NAME_FAC_MAP_FLG)
  private String facMapFlg;

  public static final String SERIALIZED_NAME_FAC_MAP_ICON = "FacMapIcon";
  @SerializedName(SERIALIZED_NAME_FAC_MAP_ICON)
  private String facMapIcon;

  public static final String SERIALIZED_NAME_FAC_MYRTK_UNIVERSE = "FacMyrtkUniverse";
  @SerializedName(SERIALIZED_NAME_FAC_MYRTK_UNIVERSE)
  private String facMyrtkUniverse;

  public static final String SERIALIZED_NAME_FAC_N_A_I_C_S_CODES = "FacNAICSCodes";
  @SerializedName(SERIALIZED_NAME_FAC_N_A_I_C_S_CODES)
  private String facNAICSCodes;

  public static final String SERIALIZED_NAME_FAC_NAA_FLAG = "FacNaaFlag";
  @SerializedName(SERIALIZED_NAME_FAC_NAA_FLAG)
  private String facNaaFlag;

  public static final String SERIALIZED_NAME_FAC_NAME = "FacName";
  @SerializedName(SERIALIZED_NAME_FAC_NAME)
  private String facName;

  public static final String SERIALIZED_NAME_FAC_PENALTY_COUNT = "FacPenaltyCount";
  @SerializedName(SERIALIZED_NAME_FAC_PENALTY_COUNT)
  private String facPenaltyCount;

  public static final String SERIALIZED_NAME_FAC_PERCENT_MINORITY = "FacPercentMinority";
  @SerializedName(SERIALIZED_NAME_FAC_PERCENT_MINORITY)
  private String facPercentMinority;

  public static final String SERIALIZED_NAME_FAC_POP_DEN = "FacPopDen";
  @SerializedName(SERIALIZED_NAME_FAC_POP_DEN)
  private String facPopDen;

  public static final String SERIALIZED_NAME_FAC_PROGRAMS_WITH_S_N_C = "FacProgramsWithSNC";
  @SerializedName(SERIALIZED_NAME_FAC_PROGRAMS_WITH_S_N_C)
  private String facProgramsWithSNC;

  public static final String SERIALIZED_NAME_FAC_QTRS_WITH_N_C = "FacQtrsWithNC";
  @SerializedName(SERIALIZED_NAME_FAC_QTRS_WITH_N_C)
  private String facQtrsWithNC;

  public static final String SERIALIZED_NAME_FAC_REFERENCE_POINT = "FacReferencePoint";
  @SerializedName(SERIALIZED_NAME_FAC_REFERENCE_POINT)
  private String facReferencePoint;

  public static final String SERIALIZED_NAME_FAC_S_I_C_CODES = "FacSICCodes";
  @SerializedName(SERIALIZED_NAME_FAC_S_I_C_CODES)
  private String facSICCodes;

  public static final String SERIALIZED_NAME_FAC_S_N_C_FLG = "FacSNCFlg";
  @SerializedName(SERIALIZED_NAME_FAC_S_N_C_FLG)
  private String facSNCFlg;

  public static final String SERIALIZED_NAME_FAC_STATE = "FacState";
  @SerializedName(SERIALIZED_NAME_FAC_STATE)
  private String facState;

  public static final String SERIALIZED_NAME_FAC_STD_COUNTY_NAME = "FacStdCountyName";
  @SerializedName(SERIALIZED_NAME_FAC_STD_COUNTY_NAME)
  private String facStdCountyName;

  public static final String SERIALIZED_NAME_FAC_STREET = "FacStreet";
  @SerializedName(SERIALIZED_NAME_FAC_STREET)
  private String facStreet;

  public static final String SERIALIZED_NAME_FAC_TOTAL_PENALTIES = "FacTotalPenalties";
  @SerializedName(SERIALIZED_NAME_FAC_TOTAL_PENALTIES)
  private String facTotalPenalties;

  public static final String SERIALIZED_NAME_FAC_US_MEX_BORDER_FLG = "FacUsMexBorderFlg";
  @SerializedName(SERIALIZED_NAME_FAC_US_MEX_BORDER_FLG)
  private String facUsMexBorderFlg;

  public static final String SERIALIZED_NAME_FAC_ZIP = "FacZip";
  @SerializedName(SERIALIZED_NAME_FAC_ZIP)
  private String facZip;

  public static final String SERIALIZED_NAME_FEC_CASE_I_DS = "FecCaseIDs";
  @SerializedName(SERIALIZED_NAME_FEC_CASE_I_DS)
  private String fecCaseIDs;

  public static final String SERIALIZED_NAME_FEC_LAST_CASE_DATE = "FecLastCaseDate";
  @SerializedName(SERIALIZED_NAME_FEC_LAST_CASE_DATE)
  private String fecLastCaseDate;

  public static final String SERIALIZED_NAME_FEC_NUMBER_OF_CASES = "FecNumberOfCases";
  @SerializedName(SERIALIZED_NAME_FEC_NUMBER_OF_CASES)
  private String fecNumberOfCases;

  public static final String SERIALIZED_NAME_FEC_TOTAL_PENALTIES = "FecTotalPenalties";
  @SerializedName(SERIALIZED_NAME_FEC_TOTAL_PENALTIES)
  private String fecTotalPenalties;

  public static final String SERIALIZED_NAME_FIFRA_INSPECTIONS5YR = "FifraInspections5yr";
  @SerializedName(SERIALIZED_NAME_FIFRA_INSPECTIONS5YR)
  private String fifraInspections5yr;

  public static final String SERIALIZED_NAME_GH_G_C_O2_RELEASES = "GHGCO2Releases";
  @SerializedName(SERIALIZED_NAME_GH_G_C_O2_RELEASES)
  private String ghGCO2Releases;

  public static final String SERIALIZED_NAME_GH_G_FLAG = "GHGFlag";
  @SerializedName(SERIALIZED_NAME_GH_G_FLAG)
  private String ghGFlag;

  public static final String SERIALIZED_NAME_GH_G_I_DS = "GHGIDs";
  @SerializedName(SERIALIZED_NAME_GH_G_I_DS)
  private String ghGIDs;

  public static final String SERIALIZED_NAME_HAS_POLL_RPT = "HasPollRpt";
  @SerializedName(SERIALIZED_NAME_HAS_POLL_RPT)
  private String hasPollRpt;

  public static final String SERIALIZED_NAME_INFEA5YR_FLAG = "Infea5yrFlag";
  @SerializedName(SERIALIZED_NAME_INFEA5YR_FLAG)
  private String infea5yrFlag;

  public static final String SERIALIZED_NAME_INSP5YR_FLAG = "Insp5yrFlag";
  @SerializedName(SERIALIZED_NAME_INSP5YR_FLAG)
  private String insp5yrFlag;

  public static final String SERIALIZED_NAME_LOWER48 = "Lower48";
  @SerializedName(SERIALIZED_NAME_LOWER48)
  private String lower48;

  public static final String SERIALIZED_NAME_MAX_PCTILE_US = "MaxPctileUs";
  @SerializedName(SERIALIZED_NAME_MAX_PCTILE_US)
  private String maxPctileUs;

  public static final String SERIALIZED_NAME_MAX_SCORE = "MaxScore";
  @SerializedName(SERIALIZED_NAME_MAX_SCORE)
  private String maxScore;

  public static final String SERIALIZED_NAME_N_C = "NC";
  @SerializedName(SERIALIZED_NAME_N_C)
  private String NC;

  public static final String SERIALIZED_NAME_NP_D_E_S_FLAG = "NPDESFlag";
  @SerializedName(SERIALIZED_NAME_NP_D_E_S_FLAG)
  private String npDESFlag;

  public static final String SERIALIZED_NAME_NP_D_E_S_I_DS = "NPDESIDs";
  @SerializedName(SERIALIZED_NAME_NP_D_E_S_I_DS)
  private String npDESIDs;

  public static final String SERIALIZED_NAME_NAA_CATEGORIES = "NaaCategories";
  @SerializedName(SERIALIZED_NAME_NAA_CATEGORIES)
  private String naaCategories;

  public static final String SERIALIZED_NAME_NAA_POLLUTANTS = "NaaPollutants";
  @SerializedName(SERIALIZED_NAME_NAA_POLLUTANTS)
  private String naaPollutants;

  public static final String SERIALIZED_NAME_OVER80_COUNT_US = "Over80CountUs";
  @SerializedName(SERIALIZED_NAME_OVER80_COUNT_US)
  private String over80CountUs;

  public static final String SERIALIZED_NAME_PCTILE_CANCER_US = "PctileCancerUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_CANCER_US)
  private String pctileCancerUs;

  public static final String SERIALIZED_NAME_PCTILE_DPM_US = "PctileDpmUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_DPM_US)
  private String pctileDpmUs;

  public static final String SERIALIZED_NAME_PCTILE_O3_US = "PctileO3Us";
  @SerializedName(SERIALIZED_NAME_PCTILE_O3_US)
  private String pctileO3Us;

  public static final String SERIALIZED_NAME_PCTILE_PCTPRE1960_US = "PctilePctpre1960Us";
  @SerializedName(SERIALIZED_NAME_PCTILE_PCTPRE1960_US)
  private String pctilePctpre1960Us;

  public static final String SERIALIZED_NAME_PCTILE_PM_US = "PctilePmUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PM_US)
  private String pctilePmUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_N_P_D_E_S_US = "PctileProximityNPDESUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_N_P_D_E_S_US)
  private String pctileProximityNPDESUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_NPL_US = "PctileProximityNplUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_NPL_US)
  private String pctileProximityNplUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_RMP_US = "PctileProximityRmpUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_RMP_US)
  private String pctileProximityRmpUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_TSDF_US = "PctileProximityTsdfUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_TSDF_US)
  private String pctileProximityTsdfUs;

  public static final String SERIALIZED_NAME_PCTILE_RESP_US = "PctileRespUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_RESP_US)
  private String pctileRespUs;

  public static final String SERIALIZED_NAME_PCTILE_TRAFFIC_SCORE_US = "PctileTrafficScoreUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_TRAFFIC_SCORE_US)
  private String pctileTrafficScoreUs;

  public static final String SERIALIZED_NAME_RC_R_A3YR_COMPL_QTRS_HISTORY = "RCRA3yrComplQtrsHistory";
  @SerializedName(SERIALIZED_NAME_RC_R_A3YR_COMPL_QTRS_HISTORY)
  private String rcRA3yrComplQtrsHistory;

  public static final String SERIALIZED_NAME_RC_R_A_COMPLIANCE_STATUS = "RCRAComplianceStatus";
  @SerializedName(SERIALIZED_NAME_RC_R_A_COMPLIANCE_STATUS)
  private String rcRAComplianceStatus;

  public static final String SERIALIZED_NAME_RC_R_A_DATE_LAST_FORMAL_ACTION = "RCRADateLastFormalAction";
  @SerializedName(SERIALIZED_NAME_RC_R_A_DATE_LAST_FORMAL_ACTION)
  private String rcRADateLastFormalAction;

  public static final String SERIALIZED_NAME_RC_R_A_DAYS_LAST_EVALUATION = "RCRADaysLastEvaluation";
  @SerializedName(SERIALIZED_NAME_RC_R_A_DAYS_LAST_EVALUATION)
  private String rcRADaysLastEvaluation;

  public static final String SERIALIZED_NAME_RC_R_A_FLAG = "RCRAFlag";
  @SerializedName(SERIALIZED_NAME_RC_R_A_FLAG)
  private String rcRAFlag;

  public static final String SERIALIZED_NAME_RC_R_A_FORMAL_ACTION_COUNT = "RCRAFormalActionCount";
  @SerializedName(SERIALIZED_NAME_RC_R_A_FORMAL_ACTION_COUNT)
  private String rcRAFormalActionCount;

  public static final String SERIALIZED_NAME_RC_R_A_I_DS = "RCRAIDs";
  @SerializedName(SERIALIZED_NAME_RC_R_A_I_DS)
  private String rcRAIDs;

  public static final String SERIALIZED_NAME_RC_R_A_INFORMAL_COUNT = "RCRAInformalCount";
  @SerializedName(SERIALIZED_NAME_RC_R_A_INFORMAL_COUNT)
  private String rcRAInformalCount;

  public static final String SERIALIZED_NAME_RC_R_A_INSPECTION_COUNT = "RCRAInspectionCount";
  @SerializedName(SERIALIZED_NAME_RC_R_A_INSPECTION_COUNT)
  private String rcRAInspectionCount;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_PENALTY_AMT = "RCRALastPenaltyAmt";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_PENALTY_AMT)
  private String rcRALastPenaltyAmt;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_PENALTY_DATE = "RCRALastPenaltyDate";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_PENALTY_DATE)
  private String rcRALastPenaltyDate;

  public static final String SERIALIZED_NAME_R_C_R_A_N_A_I_C_S = "RCRANAICS";
  @SerializedName(SERIALIZED_NAME_R_C_R_A_N_A_I_C_S)
  private String RCRANAICS;

  public static final String SERIALIZED_NAME_RC_R_A_PENALTIES = "RCRAPenalties";
  @SerializedName(SERIALIZED_NAME_RC_R_A_PENALTIES)
  private String rcRAPenalties;

  public static final String SERIALIZED_NAME_RC_R_A_PERMIT_TYPES = "RCRAPermitTypes";
  @SerializedName(SERIALIZED_NAME_RC_R_A_PERMIT_TYPES)
  private String rcRAPermitTypes;

  public static final String SERIALIZED_NAME_RC_R_A_QTRS_WITH_N_C = "RCRAQtrsWithNC";
  @SerializedName(SERIALIZED_NAME_RC_R_A_QTRS_WITH_N_C)
  private String rcRAQtrsWithNC;

  public static final String SERIALIZED_NAME_RC_R_A_S_N_C_FLAG = "RCRASNCFlag";
  @SerializedName(SERIALIZED_NAME_RC_R_A_S_N_C_FLAG)
  private String rcRASNCFlag;

  public static final String SERIALIZED_NAME_REGISTRY_I_D = "RegistryID";
  @SerializedName(SERIALIZED_NAME_REGISTRY_I_D)
  private String registryID;

  public static final String SERIALIZED_NAME_RMP_I_DS = "RmpIDs";
  @SerializedName(SERIALIZED_NAME_RMP_I_DS)
  private String rmpIDs;

  public static final String SERIALIZED_NAME_SD_W_A3YR_COMPL_QTRS_HISTORY = "SDWA3yrComplQtrsHistory";
  @SerializedName(SERIALIZED_NAME_SD_W_A3YR_COMPL_QTRS_HISTORY)
  private String sdWA3yrComplQtrsHistory;

  public static final String SERIALIZED_NAME_SD_W_A_COMPLIANCE_STATUS = "SDWAComplianceStatus";
  @SerializedName(SERIALIZED_NAME_SD_W_A_COMPLIANCE_STATUS)
  private String sdWAComplianceStatus;

  public static final String SERIALIZED_NAME_SD_W_A_FORMAL_ACTION_COUNT = "SDWAFormalActionCount";
  @SerializedName(SERIALIZED_NAME_SD_W_A_FORMAL_ACTION_COUNT)
  private String sdWAFormalActionCount;

  public static final String SERIALIZED_NAME_SD_W_A_I_DS = "SDWAIDs";
  @SerializedName(SERIALIZED_NAME_SD_W_A_I_DS)
  private String sdWAIDs;

  public static final String SERIALIZED_NAME_SD_W_A_INFORMAL_COUNT = "SDWAInformalCount";
  @SerializedName(SERIALIZED_NAME_SD_W_A_INFORMAL_COUNT)
  private String sdWAInformalCount;

  public static final String SERIALIZED_NAME_SD_W_A_INSPECTIONS5YR = "SDWAInspections5yr";
  @SerializedName(SERIALIZED_NAME_SD_W_A_INSPECTIONS5YR)
  private String sdWAInspections5yr;

  public static final String SERIALIZED_NAME_SD_W_A_QTRS_WITH_N_C = "SDWAQtrsWithNC";
  @SerializedName(SERIALIZED_NAME_SD_W_A_QTRS_WITH_N_C)
  private String sdWAQtrsWithNC;

  public static final String SERIALIZED_NAME_SD_W_A_S_N_C_FLAG = "SDWASNCFlag";
  @SerializedName(SERIALIZED_NAME_SD_W_A_S_N_C_FLAG)
  private String sdWASNCFlag;

  public static final String SERIALIZED_NAME_SD_W_A_SYSTEM_TYPES = "SDWASystemTypes";
  @SerializedName(SERIALIZED_NAME_SD_W_A_SYSTEM_TYPES)
  private String sdWASystemTypes;

  public static final String SERIALIZED_NAME_SD_W_I_S_FLAG = "SDWISFlag";
  @SerializedName(SERIALIZED_NAME_SD_W_I_S_FLAG)
  private String sdWISFlag;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private String score;

  public static final String SERIALIZED_NAME_SEMS_FLAG = "SemsFlag";
  @SerializedName(SERIALIZED_NAME_SEMS_FLAG)
  private String semsFlag;

  public static final String SERIALIZED_NAME_SEMS_I_DS = "SemsIDs";
  @SerializedName(SERIALIZED_NAME_SEMS_I_DS)
  private String semsIDs;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_TR_I_FLAG = "TRIFlag";
  @SerializedName(SERIALIZED_NAME_TR_I_FLAG)
  private String trIFlag;

  public static final String SERIALIZED_NAME_TR_I_I_DS = "TRIIDs";
  @SerializedName(SERIALIZED_NAME_TR_I_I_DS)
  private String trIIDs;

  public static final String SERIALIZED_NAME_TR_I_OFF_SITE_TRANSFERS = "TRIOffSiteTransfers";
  @SerializedName(SERIALIZED_NAME_TR_I_OFF_SITE_TRANSFERS)
  private String trIOffSiteTransfers;

  public static final String SERIALIZED_NAME_TR_I_ON_SITE_RELEASES = "TRIOnSiteReleases";
  @SerializedName(SERIALIZED_NAME_TR_I_ON_SITE_RELEASES)
  private String trIOnSiteReleases;

  public static final String SERIALIZED_NAME_TR_I_RELEASES_TRANSFERS = "TRIReleasesTransfers";
  @SerializedName(SERIALIZED_NAME_TR_I_RELEASES_TRANSFERS)
  private String trIReleasesTransfers;

  public static final String SERIALIZED_NAME_TR_I_REPORTER = "TRIReporter";
  @SerializedName(SERIALIZED_NAME_TR_I_REPORTER)
  private String trIReporter;

  public static final String SERIALIZED_NAME_TR_I_REPORTER_IN_PAST = "TRIReporterInPast";
  @SerializedName(SERIALIZED_NAME_TR_I_REPORTER_IN_PAST)
  private String trIReporterInPast;

  public static final String SERIALIZED_NAME_TR_IBAL_FLAG = "TRIbalFlag";
  @SerializedName(SERIALIZED_NAME_TR_IBAL_FLAG)
  private String trIbalFlag;

  public static final String SERIALIZED_NAME_TSCA_FLAG = "TscaFlag";
  @SerializedName(SERIALIZED_NAME_TSCA_FLAG)
  private String tscaFlag;

  public static final String SERIALIZED_NAME_TSCA_I_DS = "TscaIDs";
  @SerializedName(SERIALIZED_NAME_TSCA_I_DS)
  private String tscaIDs;

  public static final String SERIALIZED_NAME_TSCA_INSPECTIONS5YR = "TscaInspections5yr";
  @SerializedName(SERIALIZED_NAME_TSCA_INSPECTIONS5YR)
  private String tscaInspections5yr;

  public static final String SERIALIZED_NAME_VIOL_FLAG = "ViolFlag";
  @SerializedName(SERIALIZED_NAME_VIOL_FLAG)
  private String violFlag;

  public static final String SERIALIZED_NAME_WEB_DOCS = "WebDocs";
  @SerializedName(SERIALIZED_NAME_WEB_DOCS)
  private String webDocs;

  public Echo03() {
  }

  public Echo03 aiRFlag(String aiRFlag) {
    this.aiRFlag = aiRFlag;
    return this;
  }

  /**
   * Indicates whether the facility has a Clean Air Act (CAA) permit.
   * @return aiRFlag
   */
  @javax.annotation.Nonnull
  public String getAiRFlag() {
    return aiRFlag;
  }

  public void setAiRFlag(String aiRFlag) {
    this.aiRFlag = aiRFlag;
  }


  public Echo03 aiRIDs(String aiRIDs) {
    this.aiRIDs = aiRIDs;
    return this;
  }

  /**
   * Air Facility System (AFS) ID.
   * @return aiRIDs
   */
  @javax.annotation.Nonnull
  public String getAiRIDs() {
    return aiRIDs;
  }

  public void setAiRIDs(String aiRIDs) {
    this.aiRIDs = aiRIDs;
  }


  public Echo03 activeLower48(String activeLower48) {
    this.activeLower48 = activeLower48;
    return this;
  }

  /**
   * A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.
   * @return activeLower48
   */
  @javax.annotation.Nonnull
  public String getActiveLower48() {
    return activeLower48;
  }

  public void setActiveLower48(String activeLower48) {
    this.activeLower48 = activeLower48;
  }


  public Echo03 biosolidsFlag(String biosolidsFlag) {
    this.biosolidsFlag = biosolidsFlag;
    return this;
  }

  /**
   * A Yes/No field to indicate permits with biosolids management and compliance information.
   * @return biosolidsFlag
   */
  @javax.annotation.Nonnull
  public String getBiosolidsFlag() {
    return biosolidsFlag;
  }

  public void setBiosolidsFlag(String biosolidsFlag) {
    this.biosolidsFlag = biosolidsFlag;
  }


  public Echo03 caA3yrComplQtrsHistory(String caA3yrComplQtrsHistory) {
    this.caA3yrComplQtrsHistory = caA3yrComplQtrsHistory;
    return this;
  }

  /**
   * The facility&#39;s 3-year compliance status history by quarter (3-month period) entered in the CAA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined
   * @return caA3yrComplQtrsHistory
   */
  @javax.annotation.Nonnull
  public String getCaA3yrComplQtrsHistory() {
    return caA3yrComplQtrsHistory;
  }

  public void setCaA3yrComplQtrsHistory(String caA3yrComplQtrsHistory) {
    this.caA3yrComplQtrsHistory = caA3yrComplQtrsHistory;
  }


  public Echo03 caAComplianceStatus(String caAComplianceStatus) {
    this.caAComplianceStatus = caAComplianceStatus;
    return this;
  }

  /**
   * An indication of the facility&#39;s compliance status under the Clean Air Act. When a source has a high priority violation (HPV), the specific type of HPV will be displayed. If more than one type applies to a source, this order of priority is used to determine which type appears: Violation Unaddressed, EPA has Lead Enforcement Violation Unaddressed, State has Lead Enforcement Violation Unaddressed, Local has Lead Enforcement Violation Addressed, EPA has Lead Enforcement Violation Addressed, State has Lead Enforcement Violation Addressed, Local has Lead Enforcement When there is no Federally-Reportable Violation determination date in the past year and no open High Priority Violation in the most recent quarter in the data system of record, “Not Available” is displayed.
   * @return caAComplianceStatus
   */
  @javax.annotation.Nonnull
  public String getCaAComplianceStatus() {
    return caAComplianceStatus;
  }

  public void setCaAComplianceStatus(String caAComplianceStatus) {
    this.caAComplianceStatus = caAComplianceStatus;
  }


  public Echo03 caADateLastFormalAction(String caADateLastFormalAction) {
    this.caADateLastFormalAction = caADateLastFormalAction;
    return this;
  }

  /**
   * The effective date of the most recent listed enforcement action entered into the CAA program database.
   * @return caADateLastFormalAction
   */
  @javax.annotation.Nonnull
  public String getCaADateLastFormalAction() {
    return caADateLastFormalAction;
  }

  public void setCaADateLastFormalAction(String caADateLastFormalAction) {
    this.caADateLastFormalAction = caADateLastFormalAction;
  }


  public Echo03 caADaysLastEvaluation(String caADaysLastEvaluation) {
    this.caADaysLastEvaluation = caADaysLastEvaluation;
    return this;
  }

  /**
   * The number of days since a CAA Full Compliance Evaluation (FCE) was completed.
   * @return caADaysLastEvaluation
   */
  @javax.annotation.Nonnull
  public String getCaADaysLastEvaluation() {
    return caADaysLastEvaluation;
  }

  public void setCaADaysLastEvaluation(String caADaysLastEvaluation) {
    this.caADaysLastEvaluation = caADaysLastEvaluation;
  }


  public Echo03 caAEvaluationCount(String caAEvaluationCount) {
    this.caAEvaluationCount = caAEvaluationCount;
    return this;
  }

  /**
   * The number of inspections/compliance evaluations under the Clean Air Act, occurring at the facility within the last five years
   * @return caAEvaluationCount
   */
  @javax.annotation.Nonnull
  public String getCaAEvaluationCount() {
    return caAEvaluationCount;
  }

  public void setCaAEvaluationCount(String caAEvaluationCount) {
    this.caAEvaluationCount = caAEvaluationCount;
  }


  public Echo03 caAFormalActionCount(String caAFormalActionCount) {
    this.caAFormalActionCount = caAFormalActionCount;
    return this;
  }

  /**
   * Indicates the number of enforcement actions taken against the facility within the last five years under the Clean Air Act.
   * @return caAFormalActionCount
   */
  @javax.annotation.Nonnull
  public String getCaAFormalActionCount() {
    return caAFormalActionCount;
  }

  public void setCaAFormalActionCount(String caAFormalActionCount) {
    this.caAFormalActionCount = caAFormalActionCount;
  }


  public Echo03 caAHpvFlag(String caAHpvFlag) {
    this.caAHpvFlag = caAHpvFlag;
    return this;
  }

  /**
   * The High Priority Violator (HPV) status for the facility during the most recent quarter reflects the time the records were extracted from the program data system. \&quot;Y\&quot; indicates the facility is in HPV for the permit or site in question and may pose a more severe level of environmental threat. \&quot;N\&quot; indicates the permit or site is not considered in HPV.
   * @return caAHpvFlag
   */
  @javax.annotation.Nonnull
  public String getCaAHpvFlag() {
    return caAHpvFlag;
  }

  public void setCaAHpvFlag(String caAHpvFlag) {
    this.caAHpvFlag = caAHpvFlag;
  }


  public Echo03 caAInformalCount(String caAInformalCount) {
    this.caAInformalCount = caAInformalCount;
    return this;
  }

  /**
   * Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Clean Air Act.
   * @return caAInformalCount
   */
  @javax.annotation.Nonnull
  public String getCaAInformalCount() {
    return caAInformalCount;
  }

  public void setCaAInformalCount(String caAInformalCount) {
    this.caAInformalCount = caAInformalCount;
  }


  public Echo03 caALastPenaltyAmt(String caALastPenaltyAmt) {
    this.caALastPenaltyAmt = caALastPenaltyAmt;
    return this;
  }

  /**
   * The amount of the most recent penalty entered into the CAA program database.
   * @return caALastPenaltyAmt
   */
  @javax.annotation.Nonnull
  public String getCaALastPenaltyAmt() {
    return caALastPenaltyAmt;
  }

  public void setCaALastPenaltyAmt(String caALastPenaltyAmt) {
    this.caALastPenaltyAmt = caALastPenaltyAmt;
  }


  public Echo03 caALastPenaltyDate(String caALastPenaltyDate) {
    this.caALastPenaltyDate = caALastPenaltyDate;
    return this;
  }

  /**
   * The effective date of the most recent penalty entered into the CAA program database.
   * @return caALastPenaltyDate
   */
  @javax.annotation.Nonnull
  public String getCaALastPenaltyDate() {
    return caALastPenaltyDate;
  }

  public void setCaALastPenaltyDate(String caALastPenaltyDate) {
    this.caALastPenaltyDate = caALastPenaltyDate;
  }


  public Echo03 CAANAICS(String CAANAICS) {
    this.CAANAICS = CAANAICS;
    return this;
  }

  /**
   * The CAA permit&#39;s primary North American Industry Classification System (NAICS) Codes.
   * @return CAANAICS
   */
  @javax.annotation.Nonnull
  public String getCAANAICS() {
    return CAANAICS;
  }

  public void setCAANAICS(String CAANAICS) {
    this.CAANAICS = CAANAICS;
  }


  public Echo03 caAPenalties(String caAPenalties) {
    this.caAPenalties = caAPenalties;
    return this;
  }

  /**
   * The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act.
   * @return caAPenalties
   */
  @javax.annotation.Nonnull
  public String getCaAPenalties() {
    return caAPenalties;
  }

  public void setCaAPenalties(String caAPenalties) {
    this.caAPenalties = caAPenalties;
  }


  public Echo03 caAPermitTypes(String caAPermitTypes) {
    this.caAPermitTypes = caAPermitTypes;
    return this;
  }

  /**
   * ICIS AIR Permit Types associated with the FRS Facility: - Major - Federally Reportable Minor - Other Minor - Synthetic Minor - NULL
   * @return caAPermitTypes
   */
  @javax.annotation.Nonnull
  public String getCaAPermitTypes() {
    return caAPermitTypes;
  }

  public void setCaAPermitTypes(String caAPermitTypes) {
    this.caAPermitTypes = caAPermitTypes;
  }


  public Echo03 caAQtrsWithNC(String caAQtrsWithNC) {
    this.caAQtrsWithNC = caAQtrsWithNC;
    return this;
  }

  /**
   * The number of quarters, out of the last twelve quarters, in which the CAA permit is considered in violation.
   * @return caAQtrsWithNC
   */
  @javax.annotation.Nonnull
  public String getCaAQtrsWithNC() {
    return caAQtrsWithNC;
  }

  public void setCaAQtrsWithNC(String caAQtrsWithNC) {
    this.caAQtrsWithNC = caAQtrsWithNC;
  }


  public Echo03 caASICs(String caASICs) {
    this.caASICs = caASICs;
    return this;
  }

  /**
   * The CAA permit&#39;s primary Standard Industrial Classification (SIC) Codes.
   * @return caASICs
   */
  @javax.annotation.Nonnull
  public String getCaASICs() {
    return caASICs;
  }

  public void setCaASICs(String caASICs) {
    this.caASICs = caASICs;
  }


  public Echo03 cwA13qtrsComplHistory(String cwA13qtrsComplHistory) {
    this.cwA13qtrsComplHistory = cwA13qtrsComplHistory;
    return this;
  }

  /**
   * The facility&#39;s 3-year compliance status history by quarter (3-month period) entered in the CWA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
   * @return cwA13qtrsComplHistory
   */
  @javax.annotation.Nonnull
  public String getCwA13qtrsComplHistory() {
    return cwA13qtrsComplHistory;
  }

  public void setCwA13qtrsComplHistory(String cwA13qtrsComplHistory) {
    this.cwA13qtrsComplHistory = cwA13qtrsComplHistory;
  }


  public Echo03 cwA13qtrsEfflntExceedances(String cwA13qtrsEfflntExceedances) {
    this.cwA13qtrsEfflntExceedances = cwA13qtrsEfflntExceedances;
    return this;
  }

  /**
   * The number of effluent violations at the facility in the past 13 quarters.
   * @return cwA13qtrsEfflntExceedances
   */
  @javax.annotation.Nonnull
  public String getCwA13qtrsEfflntExceedances() {
    return cwA13qtrsEfflntExceedances;
  }

  public void setCwA13qtrsEfflntExceedances(String cwA13qtrsEfflntExceedances) {
    this.cwA13qtrsEfflntExceedances = cwA13qtrsEfflntExceedances;
  }


  public Echo03 cwA3YrQncrCodes(String cwA3YrQncrCodes) {
    this.cwA3YrQncrCodes = cwA3YrQncrCodes;
    return this;
  }

  /**
   * No longer used.  Will be deleted in nthe future.
   * @return cwA3YrQncrCodes
   */
  @javax.annotation.Nonnull
  public String getCwA3YrQncrCodes() {
    return cwA3YrQncrCodes;
  }

  public void setCwA3YrQncrCodes(String cwA3YrQncrCodes) {
    this.cwA3YrQncrCodes = cwA3YrQncrCodes;
  }


  public Echo03 cwAComplianceStatus(String cwAComplianceStatus) {
    this.cwAComplianceStatus = cwAComplianceStatus;
    return this;
  }

  /**
   * An indication of the facility&#39;s compliance status under the Clean Water Act. When a major source is in significant noncompliance (SNC) or a non-major source has a Category I violation, the specific type of SNC/Category I will be displayed. If more than one type applies to a facility, this order of priority is used to determine which code appears: S(CSchVio) - an enforcement action has been issued, and the facility is not meeting its compliance schedule E(EffViol) - effluent violations of monthly average limits X(EffNMth) - effluent violations of non-monthly average limits T(CSchRpt) - compliance schedule reporting violation D(DMR NR) - non-receipt of discharge monitoring report
   * @return cwAComplianceStatus
   */
  @javax.annotation.Nonnull
  public String getCwAComplianceStatus() {
    return cwAComplianceStatus;
  }

  public void setCwAComplianceStatus(String cwAComplianceStatus) {
    this.cwAComplianceStatus = cwAComplianceStatus;
  }


  public Echo03 cwAComplianceTracking(String cwAComplianceTracking) {
    this.cwAComplianceTracking = cwAComplianceTracking;
    return this;
  }

  /**
   * The Compliance Tracking classifications which can assist in interpreting the facility&#39;s compliance status, particularly for non-major standard permittees.
   * @return cwAComplianceTracking
   */
  @javax.annotation.Nonnull
  public String getCwAComplianceTracking() {
    return cwAComplianceTracking;
  }

  public void setCwAComplianceTracking(String cwAComplianceTracking) {
    this.cwAComplianceTracking = cwAComplianceTracking;
  }


  public Echo03 cwADateLastFormalAction(String cwADateLastFormalAction) {
    this.cwADateLastFormalAction = cwADateLastFormalAction;
    return this;
  }

  /**
   * The effective date of the most recent listed enforcement action entered into the CWA program database.
   * @return cwADateLastFormalAction
   */
  @javax.annotation.Nonnull
  public String getCwADateLastFormalAction() {
    return cwADateLastFormalAction;
  }

  public void setCwADateLastFormalAction(String cwADateLastFormalAction) {
    this.cwADateLastFormalAction = cwADateLastFormalAction;
  }


  public Echo03 cwADaysLastInspection(String cwADaysLastInspection) {
    this.cwADaysLastInspection = cwADaysLastInspection;
    return this;
  }

  /**
   * The number of days since a CWA inspection was completed.
   * @return cwADaysLastInspection
   */
  @javax.annotation.Nonnull
  public String getCwADaysLastInspection() {
    return cwADaysLastInspection;
  }

  public void setCwADaysLastInspection(String cwADaysLastInspection) {
    this.cwADaysLastInspection = cwADaysLastInspection;
  }


  public Echo03 cwAFormalActionCount(String cwAFormalActionCount) {
    this.cwAFormalActionCount = cwAFormalActionCount;
    return this;
  }

  /**
   * Indicates the number of enforcement actions taken against the facility within the last five years under the Clean Water Act.
   * @return cwAFormalActionCount
   */
  @javax.annotation.Nonnull
  public String getCwAFormalActionCount() {
    return cwAFormalActionCount;
  }

  public void setCwAFormalActionCount(String cwAFormalActionCount) {
    this.cwAFormalActionCount = cwAFormalActionCount;
  }


  public Echo03 cwAInformalCount(String cwAInformalCount) {
    this.cwAInformalCount = cwAInformalCount;
    return this;
  }

  /**
   * Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Clean Water Act.
   * @return cwAInformalCount
   */
  @javax.annotation.Nonnull
  public String getCwAInformalCount() {
    return cwAInformalCount;
  }

  public void setCwAInformalCount(String cwAInformalCount) {
    this.cwAInformalCount = cwAInformalCount;
  }


  public Echo03 cwAInspectionCount(String cwAInspectionCount) {
    this.cwAInspectionCount = cwAInspectionCount;
    return this;
  }

  /**
   * The number of inspections/compliance evaluations under the Clean Water Act, occurring at the facility within the last five years.
   * @return cwAInspectionCount
   */
  @javax.annotation.Nonnull
  public String getCwAInspectionCount() {
    return cwAInspectionCount;
  }

  public void setCwAInspectionCount(String cwAInspectionCount) {
    this.cwAInspectionCount = cwAInspectionCount;
  }


  public Echo03 cwALastPenaltyAmt(String cwALastPenaltyAmt) {
    this.cwALastPenaltyAmt = cwALastPenaltyAmt;
    return this;
  }

  /**
   * The amount of the most recent penalty entered into the CWA program database.
   * @return cwALastPenaltyAmt
   */
  @javax.annotation.Nonnull
  public String getCwALastPenaltyAmt() {
    return cwALastPenaltyAmt;
  }

  public void setCwALastPenaltyAmt(String cwALastPenaltyAmt) {
    this.cwALastPenaltyAmt = cwALastPenaltyAmt;
  }


  public Echo03 cwALastPenaltyDate(String cwALastPenaltyDate) {
    this.cwALastPenaltyDate = cwALastPenaltyDate;
    return this;
  }

  /**
   * The effective date of the most recent penalty entered into the CWA program database.
   * @return cwALastPenaltyDate
   */
  @javax.annotation.Nonnull
  public String getCwALastPenaltyDate() {
    return cwALastPenaltyDate;
  }

  public void setCwALastPenaltyDate(String cwALastPenaltyDate) {
    this.cwALastPenaltyDate = cwALastPenaltyDate;
  }


  public Echo03 CWANAICS(String CWANAICS) {
    this.CWANAICS = CWANAICS;
    return this;
  }

  /**
   * The CWA permit&#39;s primary North American Industry Classification System (NAICS) Codes.
   * @return CWANAICS
   */
  @javax.annotation.Nonnull
  public String getCWANAICS() {
    return CWANAICS;
  }

  public void setCWANAICS(String CWANAICS) {
    this.CWANAICS = CWANAICS;
  }


  public Echo03 cwAPenalties(String cwAPenalties) {
    this.cwAPenalties = cwAPenalties;
    return this;
  }

  /**
   * The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Water Act.
   * @return cwAPenalties
   */
  @javax.annotation.Nonnull
  public String getCwAPenalties() {
    return cwAPenalties;
  }

  public void setCwAPenalties(String cwAPenalties) {
    this.cwAPenalties = cwAPenalties;
  }


  public Echo03 cwAPermitTypes(String cwAPermitTypes) {
    this.cwAPermitTypes = cwAPermitTypes;
    return this;
  }

  /**
   * Indicates the facility&#39;s permit type or designation. - Major - Minor
   * @return cwAPermitTypes
   */
  @javax.annotation.Nonnull
  public String getCwAPermitTypes() {
    return cwAPermitTypes;
  }

  public void setCwAPermitTypes(String cwAPermitTypes) {
    this.cwAPermitTypes = cwAPermitTypes;
  }


  public Echo03 cwAQtrsWithNC(String cwAQtrsWithNC) {
    this.cwAQtrsWithNC = cwAQtrsWithNC;
    return this;
  }

  /**
   * The number of quarters, out of the last twelve quarters, in which the CWA permit is considered in violation.
   * @return cwAQtrsWithNC
   */
  @javax.annotation.Nonnull
  public String getCwAQtrsWithNC() {
    return cwAQtrsWithNC;
  }

  public void setCwAQtrsWithNC(String cwAQtrsWithNC) {
    this.cwAQtrsWithNC = cwAQtrsWithNC;
  }


  public Echo03 cwASICs(String cwASICs) {
    this.cwASICs = cwASICs;
    return this;
  }

  /**
   * The CWA permit&#39;s primary Standard Industrial Classification (SIC) Codes.
   * @return cwASICs
   */
  @javax.annotation.Nonnull
  public String getCwASICs() {
    return cwASICs;
  }

  public void setCwASICs(String cwASICs) {
    this.cwASICs = cwASICs;
  }


  public Echo03 cwASNCFlag(String cwASNCFlag) {
    this.cwASNCFlag = cwASNCFlag;
    return this;
  }

  /**
   * The CWA Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \&quot;Y\&quot; indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \&quot;N\&quot; indicates the permit or site is not considered in SNC.
   * @return cwASNCFlag
   */
  @javax.annotation.Nonnull
  public String getCwASNCFlag() {
    return cwASNCFlag;
  }

  public void setCwASNCFlag(String cwASNCFlag) {
    this.cwASNCFlag = cwASNCFlag;
  }


  public Echo03 camdIDs(String camdIDs) {
    this.camdIDs = camdIDs;
    return this;
  }

  /**
   * Facility identifiers for the Clean Air Markets Division database.
   * @return camdIDs
   */
  @javax.annotation.Nonnull
  public String getCamdIDs() {
    return camdIDs;
  }

  public void setCamdIDs(String camdIDs) {
    this.camdIDs = camdIDs;
  }


  public Echo03 censusBlockGroup(String censusBlockGroup) {
    this.censusBlockGroup = censusBlockGroup;
    return this;
  }

  /**
   * A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
   * @return censusBlockGroup
   */
  @javax.annotation.Nonnull
  public String getCensusBlockGroup() {
    return censusBlockGroup;
  }

  public void setCensusBlockGroup(String censusBlockGroup) {
    this.censusBlockGroup = censusBlockGroup;
  }


  public Echo03 currSvFlag(String currSvFlag) {
    this.currSvFlag = currSvFlag;
    return this;
  }

  /**
   * Indicates if the facility has a current significant violation. 1 &#x3D; Yes
   * @return currSvFlag
   */
  @javax.annotation.Nonnull
  public String getCurrSvFlag() {
    return currSvFlag;
  }

  public void setCurrSvFlag(String currSvFlag) {
    this.currSvFlag = currSvFlag;
  }


  public Echo03 currVioFlag(String currVioFlag) {
    this.currVioFlag = currVioFlag;
    return this;
  }

  /**
   * Indicates if the facility has a current violation. 1 &#x3D; Yes
   * @return currVioFlag
   */
  @javax.annotation.Nonnull
  public String getCurrVioFlag() {
    return currVioFlag;
  }

  public void setCurrVioFlag(String currVioFlag) {
    this.currVioFlag = currVioFlag;
  }


  public Echo03 dfrUrl(String dfrUrl) {
    this.dfrUrl = dfrUrl;
    return this;
  }

  /**
   * The URL to the facility&#39;s Detailed Facility Report.
   * @return dfrUrl
   */
  @javax.annotation.Nonnull
  public String getDfrUrl() {
    return dfrUrl;
  }

  public void setDfrUrl(String dfrUrl) {
    this.dfrUrl = dfrUrl;
  }


  public Echo03 ea5yrFlag(String ea5yrFlag) {
    this.ea5yrFlag = ea5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has a formal enforcement action within the last 5 years. 1 &#x3D; Yes
   * @return ea5yrFlag
   */
  @javax.annotation.Nonnull
  public String getEa5yrFlag() {
    return ea5yrFlag;
  }

  public void setEa5yrFlag(String ea5yrFlag) {
    this.ea5yrFlag = ea5yrFlag;
  }


  public Echo03 effChartsFlag(String effChartsFlag) {
    this.effChartsFlag = effChartsFlag;
    return this;
  }

  /**
   * Get effChartsFlag
   * @return effChartsFlag
   */
  @javax.annotation.Nonnull
  public String getEffChartsFlag() {
    return effChartsFlag;
  }

  public void setEffChartsFlag(String effChartsFlag) {
    this.effChartsFlag = effChartsFlag;
  }


  public Echo03 eisFlag(String eisFlag) {
    this.eisFlag = eisFlag;
    return this;
  }

  /**
   * Indicates whether the facility reports to the Emissions Inventory System (EIS).
   * @return eisFlag
   */
  @javax.annotation.Nonnull
  public String getEisFlag() {
    return eisFlag;
  }

  public void setEisFlag(String eisFlag) {
    this.eisFlag = eisFlag;
  }


  public Echo03 eisIDs(String eisIDs) {
    this.eisIDs = eisIDs;
    return this;
  }

  /**
   * A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.
   * @return eisIDs
   */
  @javax.annotation.Nonnull
  public String getEisIDs() {
    return eisIDs;
  }

  public void setEisIDs(String eisIDs) {
    this.eisIDs = eisIDs;
  }


  public Echo03 ejscreenFlag(String ejscreenFlag) {
    this.ejscreenFlag = ejscreenFlag;
    return this;
  }

  /**
   * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
   * @return ejscreenFlag
   */
  @javax.annotation.Nonnull
  public String getEjscreenFlag() {
    return ejscreenFlag;
  }

  public void setEjscreenFlag(String ejscreenFlag) {
    this.ejscreenFlag = ejscreenFlag;
  }


  public Echo03 ejscreenFlagUs(String ejscreenFlagUs) {
    this.ejscreenFlagUs = ejscreenFlagUs;
    return this;
  }

  /**
   * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
   * @return ejscreenFlagUs
   */
  @javax.annotation.Nonnull
  public String getEjscreenFlagUs() {
    return ejscreenFlagUs;
  }

  public void setEjscreenFlagUs(String ejscreenFlagUs) {
    this.ejscreenFlagUs = ejscreenFlagUs;
  }


  public Echo03 epcraInspections5yr(String epcraInspections5yr) {
    this.epcraInspections5yr = epcraInspections5yr;
    return this;
  }

  /**
   * From ICIS FE&amp;C, the number of EPCRA inspections at the facility in the past five years.
   * @return epcraInspections5yr
   */
  @javax.annotation.Nonnull
  public String getEpcraInspections5yr() {
    return epcraInspections5yr;
  }

  public void setEpcraInspections5yr(String epcraInspections5yr) {
    this.epcraInspections5yr = epcraInspections5yr;
  }


  public Echo03 fac3yrComplianceHistory(String fac3yrComplianceHistory) {
    this.fac3yrComplianceHistory = fac3yrComplianceHistory;
    return this;
  }

  /**
   * The system&#39;s 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
   * @return fac3yrComplianceHistory
   */
  @javax.annotation.Nonnull
  public String getFac3yrComplianceHistory() {
    return fac3yrComplianceHistory;
  }

  public void setFac3yrComplianceHistory(String fac3yrComplianceHistory) {
    this.fac3yrComplianceHistory = fac3yrComplianceHistory;
  }


  public Echo03 facAccuracyMeters(String facAccuracyMeters) {
    this.facAccuracyMeters = facAccuracyMeters;
    return this;
  }

  /**
   * The estimate of accuracy, in meters, based on provided spatial metadata and quality assurance routines for the provided facility coordinate.
   * @return facAccuracyMeters
   */
  @javax.annotation.Nonnull
  public String getFacAccuracyMeters() {
    return facAccuracyMeters;
  }

  public void setFacAccuracyMeters(String facAccuracyMeters) {
    this.facAccuracyMeters = facAccuracyMeters;
  }


  public Echo03 facActiveFlag(String facActiveFlag) {
    this.facActiveFlag = facActiveFlag;
    return this;
  }

  /**
   * Indicates whether any of the associated ICIS-Air, ICIS-NPDES, RCRAInfo or SDWIS permits/facilities are in an active status.
   * @return facActiveFlag
   */
  @javax.annotation.Nonnull
  public String getFacActiveFlag() {
    return facActiveFlag;
  }

  public void setFacActiveFlag(String facActiveFlag) {
    this.facActiveFlag = facActiveFlag;
  }


  public Echo03 facChesapeakeBayFlg(String facChesapeakeBayFlg) {
    this.facChesapeakeBayFlg = facChesapeakeBayFlg;
    return this;
  }

  /**
   * Indicates whether the facility, based on the facility spatial coordinate, is within the Chesapeake Bay watershed.
   * @return facChesapeakeBayFlg
   */
  @javax.annotation.Nonnull
  public String getFacChesapeakeBayFlg() {
    return facChesapeakeBayFlg;
  }

  public void setFacChesapeakeBayFlg(String facChesapeakeBayFlg) {
    this.facChesapeakeBayFlg = facChesapeakeBayFlg;
  }


  public Echo03 facCity(String facCity) {
    this.facCity = facCity;
    return this;
  }

  /**
   * The city where the facility is located.
   * @return facCity
   */
  @javax.annotation.Nonnull
  public String getFacCity() {
    return facCity;
  }

  public void setFacCity(String facCity) {
    this.facCity = facCity;
  }


  public Echo03 facCollectionMethod(String facCollectionMethod) {
    this.facCollectionMethod = facCollectionMethod;
    return this;
  }

  /**
   * Indicates the collection method used (GPS, Photo Interpolation, Address Geocode, etc) to determine a facility&#39;s spatial coodinate.
   * @return facCollectionMethod
   */
  @javax.annotation.Nonnull
  public String getFacCollectionMethod() {
    return facCollectionMethod;
  }

  public void setFacCollectionMethod(String facCollectionMethod) {
    this.facCollectionMethod = facCollectionMethod;
  }


  public Echo03 facComplianceStatus(String facComplianceStatus) {
    this.facComplianceStatus = facComplianceStatus;
    return this;
  }

  /**
   * An indication of the facility&#39;s known overall compliance status. Status codes include: SNC/Serious Viol [significant noncompliance (SNC), high priority violation (HPV), or serious violator, depending on statute] In Violation (in violation of an environmental regulation) No Violation (no violations recorded in the national systems of record) Not Available Unknown
   * @return facComplianceStatus
   */
  @javax.annotation.Nonnull
  public String getFacComplianceStatus() {
    return facComplianceStatus;
  }

  public void setFacComplianceStatus(String facComplianceStatus) {
    this.facComplianceStatus = facComplianceStatus;
  }


  public Echo03 facCounty(String facCounty) {
    this.facCounty = facCounty;
    return this;
  }

  /**
   * The county where the facility is located.
   * @return facCounty
   */
  @javax.annotation.Nonnull
  public String getFacCounty() {
    return facCounty;
  }

  public void setFacCounty(String facCounty) {
    this.facCounty = facCounty;
  }


  public Echo03 facDateLastFormalActEPA(String facDateLastFormalActEPA) {
    this.facDateLastFormalActEPA = facDateLastFormalActEPA;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed formal enforcement action taken against the facility.
   * @return facDateLastFormalActEPA
   */
  @javax.annotation.Nonnull
  public String getFacDateLastFormalActEPA() {
    return facDateLastFormalActEPA;
  }

  public void setFacDateLastFormalActEPA(String facDateLastFormalActEPA) {
    this.facDateLastFormalActEPA = facDateLastFormalActEPA;
  }


  public Echo03 facDateLastFormalActSt(String facDateLastFormalActSt) {
    this.facDateLastFormalActSt = facDateLastFormalActSt;
    return this;
  }

  /**
   * The effective date of the most recent listed formal enforcement action taken against the facility by a state agency.
   * @return facDateLastFormalActSt
   */
  @javax.annotation.Nonnull
  public String getFacDateLastFormalActSt() {
    return facDateLastFormalActSt;
  }

  public void setFacDateLastFormalActSt(String facDateLastFormalActSt) {
    this.facDateLastFormalActSt = facDateLastFormalActSt;
  }


  public Echo03 facDateLastFormalAction(String facDateLastFormalAction) {
    this.facDateLastFormalAction = facDateLastFormalAction;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed enforcement action taken against the facility.
   * @return facDateLastFormalAction
   */
  @javax.annotation.Nonnull
  public String getFacDateLastFormalAction() {
    return facDateLastFormalAction;
  }

  public void setFacDateLastFormalAction(String facDateLastFormalAction) {
    this.facDateLastFormalAction = facDateLastFormalAction;
  }


  public Echo03 facDateLastInformalActEPA(String facDateLastInformalActEPA) {
    this.facDateLastInformalActEPA = facDateLastInformalActEPA;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed informal enforcement action taken against the facility.
   * @return facDateLastInformalActEPA
   */
  @javax.annotation.Nonnull
  public String getFacDateLastInformalActEPA() {
    return facDateLastInformalActEPA;
  }

  public void setFacDateLastInformalActEPA(String facDateLastInformalActEPA) {
    this.facDateLastInformalActEPA = facDateLastInformalActEPA;
  }


  public Echo03 facDateLastInformalActSt(String facDateLastInformalActSt) {
    this.facDateLastInformalActSt = facDateLastInformalActSt;
    return this;
  }

  /**
   * The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.
   * @return facDateLastInformalActSt
   */
  @javax.annotation.Nonnull
  public String getFacDateLastInformalActSt() {
    return facDateLastInformalActSt;
  }

  public void setFacDateLastInformalActSt(String facDateLastInformalActSt) {
    this.facDateLastInformalActSt = facDateLastInformalActSt;
  }


  public Echo03 facDateLastInformalAction(String facDateLastInformalAction) {
    this.facDateLastInformalAction = facDateLastInformalAction;
    return this;
  }

  /**
   * The date of the most recent informal action or NOV taken recorded in AFS, ICIS-NPDES, RCRA Info or SDWIS.
   * @return facDateLastInformalAction
   */
  @javax.annotation.Nonnull
  public String getFacDateLastInformalAction() {
    return facDateLastInformalAction;
  }

  public void setFacDateLastInformalAction(String facDateLastInformalAction) {
    this.facDateLastInformalAction = facDateLastInformalAction;
  }


  public Echo03 facDateLastInspection(String facDateLastInspection) {
    this.facDateLastInspection = facDateLastInspection;
    return this;
  }

  /**
   * The date on which most recent inspection of the facility took place. For the Clean Air Act, the date on which a Full Inspection (FCE) was completed. This date may or may not correspond to an actual site visit. A series of partial on- or off-site inspections may have been conducted during the fiscal year as part of this FCE.
   * @return facDateLastInspection
   */
  @javax.annotation.Nonnull
  public String getFacDateLastInspection() {
    return facDateLastInspection;
  }

  public void setFacDateLastInspection(String facDateLastInspection) {
    this.facDateLastInspection = facDateLastInspection;
  }


  public Echo03 facDateLastInspectionEPA(String facDateLastInspectionEPA) {
    this.facDateLastInspectionEPA = facDateLastInspectionEPA;
    return this;
  }

  /**
   * The date of the facility&#39;s last inspection.
   * @return facDateLastInspectionEPA
   */
  @javax.annotation.Nonnull
  public String getFacDateLastInspectionEPA() {
    return facDateLastInspectionEPA;
  }

  public void setFacDateLastInspectionEPA(String facDateLastInspectionEPA) {
    this.facDateLastInspectionEPA = facDateLastInspectionEPA;
  }


  public Echo03 facDateLastInspectionState(String facDateLastInspectionState) {
    this.facDateLastInspectionState = facDateLastInspectionState;
    return this;
  }

  /**
   * The date on which the most recent \&quot;olfficial\&quot;  inspection of the facility by a state agency took place.
   * @return facDateLastInspectionState
   */
  @javax.annotation.Nonnull
  public String getFacDateLastInspectionState() {
    return facDateLastInspectionState;
  }

  public void setFacDateLastInspectionState(String facDateLastInspectionState) {
    this.facDateLastInspectionState = facDateLastInspectionState;
  }


  public Echo03 facDateLastPenalty(String facDateLastPenalty) {
    this.facDateLastPenalty = facDateLastPenalty;
    return this;
  }

  /**
   * Indicates the date on which the most recent assessed (or final) penalty was taken against the facility.
   * @return facDateLastPenalty
   */
  @javax.annotation.Nonnull
  public String getFacDateLastPenalty() {
    return facDateLastPenalty;
  }

  public void setFacDateLastPenalty(String facDateLastPenalty) {
    this.facDateLastPenalty = facDateLastPenalty;
  }


  public Echo03 facDaysLastInspection(String facDaysLastInspection) {
    this.facDaysLastInspection = facDaysLastInspection;
    return this;
  }

  /**
   * The number of days from the last ECHO refresh to the date on which the most recent inspection of the facility took place based on data recorded into AFS, ICIS-NPDES, or RCRA Info.
   * @return facDaysLastInspection
   */
  @javax.annotation.Nonnull
  public String getFacDaysLastInspection() {
    return facDaysLastInspection;
  }

  public void setFacDaysLastInspection(String facDaysLastInspection) {
    this.facDaysLastInspection = facDaysLastInspection;
  }


  public Echo03 facDerivedCb2010(String facDerivedCb2010) {
    this.facDerivedCb2010 = facDerivedCb2010;
    return this;
  }

  /**
   * The 2010 Census Block derived from the facility coordinate.
   * @return facDerivedCb2010
   */
  @javax.annotation.Nonnull
  public String getFacDerivedCb2010() {
    return facDerivedCb2010;
  }

  public void setFacDerivedCb2010(String facDerivedCb2010) {
    this.facDerivedCb2010 = facDerivedCb2010;
  }


  public Echo03 facDerivedCd113(String facDerivedCd113) {
    this.facDerivedCd113 = facDerivedCd113;
    return this;
  }

  /**
   * The 113th Congressional District derived from the facility coordinate.
   * @return facDerivedCd113
   */
  @javax.annotation.Nonnull
  public String getFacDerivedCd113() {
    return facDerivedCd113;
  }

  public void setFacDerivedCd113(String facDerivedCd113) {
    this.facDerivedCd113 = facDerivedCd113;
  }


  public Echo03 facDerivedHuc(String facDerivedHuc) {
    this.facDerivedHuc = facDerivedHuc;
    return this;
  }

  /**
   * The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
   * @return facDerivedHuc
   */
  @javax.annotation.Nonnull
  public String getFacDerivedHuc() {
    return facDerivedHuc;
  }

  public void setFacDerivedHuc(String facDerivedHuc) {
    this.facDerivedHuc = facDerivedHuc;
  }


  public Echo03 facDerivedRadWBDHu12(String facDerivedRadWBDHu12) {
    this.facDerivedRadWBDHu12 = facDerivedRadWBDHu12;
    return this;
  }

  /**
   * The 12-digit Watershed Boundary Dataset code derived from Reach Indexing the facility&#39;s spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
   * @return facDerivedRadWBDHu12
   */
  @javax.annotation.Nonnull
  public String getFacDerivedRadWBDHu12() {
    return facDerivedRadWBDHu12;
  }

  public void setFacDerivedRadWBDHu12(String facDerivedRadWBDHu12) {
    this.facDerivedRadWBDHu12 = facDerivedRadWBDHu12;
  }


  public Echo03 facDerivedRadWBDHu12Name(String facDerivedRadWBDHu12Name) {
    this.facDerivedRadWBDHu12Name = facDerivedRadWBDHu12Name;
    return this;
  }

  /**
   * The 12 digit Watershed Boundary Dataset name derived from Reach Indexing the facility&#39;s spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
   * @return facDerivedRadWBDHu12Name
   */
  @javax.annotation.Nonnull
  public String getFacDerivedRadWBDHu12Name() {
    return facDerivedRadWBDHu12Name;
  }

  public void setFacDerivedRadWBDHu12Name(String facDerivedRadWBDHu12Name) {
    this.facDerivedRadWBDHu12Name = facDerivedRadWBDHu12Name;
  }


  public Echo03 facDerivedRadWBDHu8(String facDerivedRadWBDHu8) {
    this.facDerivedRadWBDHu8 = facDerivedRadWBDHu8;
    return this;
  }

  /**
   * The 8-digit Watershed Hydrologic Unit Code (HUC) derived from Reach Indexing the facility&#39;s spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
   * @return facDerivedRadWBDHu8
   */
  @javax.annotation.Nonnull
  public String getFacDerivedRadWBDHu8() {
    return facDerivedRadWBDHu8;
  }

  public void setFacDerivedRadWBDHu8(String facDerivedRadWBDHu8) {
    this.facDerivedRadWBDHu8 = facDerivedRadWBDHu8;
  }


  public Echo03 facDerivedRadWBDHu8Name(String facDerivedRadWBDHu8Name) {
    this.facDerivedRadWBDHu8Name = facDerivedRadWBDHu8Name;
    return this;
  }

  /**
   * The 8 digit watershed name derived from Reach Indexing the facility&#39;s spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
   * @return facDerivedRadWBDHu8Name
   */
  @javax.annotation.Nonnull
  public String getFacDerivedRadWBDHu8Name() {
    return facDerivedRadWBDHu8Name;
  }

  public void setFacDerivedRadWBDHu8Name(String facDerivedRadWBDHu8Name) {
    this.facDerivedRadWBDHu8Name = facDerivedRadWBDHu8Name;
  }


  public Echo03 facDerivedStctyFIPS(String facDerivedStctyFIPS) {
    this.facDerivedStctyFIPS = facDerivedStctyFIPS;
    return this;
  }

  /**
   * The Federal Information Processing Standard (FIPS) code which uniquely identifies the state and county in which the facility is located.
   * @return facDerivedStctyFIPS
   */
  @javax.annotation.Nonnull
  public String getFacDerivedStctyFIPS() {
    return facDerivedStctyFIPS;
  }

  public void setFacDerivedStctyFIPS(String facDerivedStctyFIPS) {
    this.facDerivedStctyFIPS = facDerivedStctyFIPS;
  }


  public Echo03 facDerivedTRIbes(String facDerivedTRIbes) {
    this.facDerivedTRIbes = facDerivedTRIbes;
    return this;
  }

  /**
   * The tribes or tribal territories located within 25 miles of the facility&#39;s location.
   * @return facDerivedTRIbes
   */
  @javax.annotation.Nonnull
  public String getFacDerivedTRIbes() {
    return facDerivedTRIbes;
  }

  public void setFacDerivedTRIbes(String facDerivedTRIbes) {
    this.facDerivedTRIbes = facDerivedTRIbes;
  }


  public Echo03 facDerivedWBD(String facDerivedWBD) {
    this.facDerivedWBD = facDerivedWBD;
    return this;
  }

  /**
   * The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.
   * @return facDerivedWBD
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBD() {
    return facDerivedWBD;
  }

  public void setFacDerivedWBD(String facDerivedWBD) {
    this.facDerivedWBD = facDerivedWBD;
  }


  public Echo03 facDerivedWBDHu12Name(String facDerivedWBDHu12Name) {
    this.facDerivedWBDHu12Name = facDerivedWBDHu12Name;
    return this;
  }

  /**
   * The Watershed Boundary Dataset name derived from the facility coordinate.
   * @return facDerivedWBDHu12Name
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBDHu12Name() {
    return facDerivedWBDHu12Name;
  }

  public void setFacDerivedWBDHu12Name(String facDerivedWBDHu12Name) {
    this.facDerivedWBDHu12Name = facDerivedWBDHu12Name;
  }


  public Echo03 facDerivedWBDHu8(String facDerivedWBDHu8) {
    this.facDerivedWBDHu8 = facDerivedWBDHu8;
    return this;
  }

  /**
   * Spatially derived HUC based on the facility&#39;s geographic coordinates in FRS.
   * @return facDerivedWBDHu8
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBDHu8() {
    return facDerivedWBDHu8;
  }

  public void setFacDerivedWBDHu8(String facDerivedWBDHu8) {
    this.facDerivedWBDHu8 = facDerivedWBDHu8;
  }


  public Echo03 facDerivedWBDHu8Name(String facDerivedWBDHu8Name) {
    this.facDerivedWBDHu8Name = facDerivedWBDHu8Name;
    return this;
  }

  /**
   * The name of the hydrologic unit in which the facility is located within, derived spatially based on the facility&#39;s geographic coordinates in FRS.
   * @return facDerivedWBDHu8Name
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBDHu8Name() {
    return facDerivedWBDHu8Name;
  }

  public void setFacDerivedWBDHu8Name(String facDerivedWBDHu8Name) {
    this.facDerivedWBDHu8Name = facDerivedWBDHu8Name;
  }


  public Echo03 facDerivedZip(String facDerivedZip) {
    this.facDerivedZip = facDerivedZip;
    return this;
  }

  /**
   * The ZIP Code derived from the facility coordinate.
   * @return facDerivedZip
   */
  @javax.annotation.Nonnull
  public String getFacDerivedZip() {
    return facDerivedZip;
  }

  public void setFacDerivedZip(String facDerivedZip) {
    this.facDerivedZip = facDerivedZip;
  }


  public Echo03 facEPARegion(String facEPARegion) {
    this.facEPARegion = facEPARegion;
    return this;
  }

  /**
   * The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories
   * @return facEPARegion
   */
  @javax.annotation.Nonnull
  public String getFacEPARegion() {
    return facEPARegion;
  }

  public void setFacEPARegion(String facEPARegion) {
    this.facEPARegion = facEPARegion;
  }


  public Echo03 facFIPSCode(String facFIPSCode) {
    this.facFIPSCode = facFIPSCode;
    return this;
  }

  /**
   * The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
   * @return facFIPSCode
   */
  @javax.annotation.Nonnull
  public String getFacFIPSCode() {
    return facFIPSCode;
  }

  public void setFacFIPSCode(String facFIPSCode) {
    this.facFIPSCode = facFIPSCode;
  }


  public Echo03 facFederalAgency(String facFederalAgency) {
    this.facFederalAgency = facFederalAgency;
    return this;
  }

  /**
   * The facility&#39;s federal agency code.
   * @return facFederalAgency
   */
  @javax.annotation.Nonnull
  public String getFacFederalAgency() {
    return facFederalAgency;
  }

  public void setFacFederalAgency(String facFederalAgency) {
    this.facFederalAgency = facFederalAgency;
  }


  public Echo03 facFederalAgencyName(String facFederalAgencyName) {
    this.facFederalAgencyName = facFederalAgencyName;
    return this;
  }

  /**
   * Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.
   * @return facFederalAgencyName
   */
  @javax.annotation.Nonnull
  public String getFacFederalAgencyName() {
    return facFederalAgencyName;
  }

  public void setFacFederalAgencyName(String facFederalAgencyName) {
    this.facFederalAgencyName = facFederalAgencyName;
  }


  public Echo03 facFederalFlg(String facFederalFlg) {
    this.facFederalFlg = facFederalFlg;
    return this;
  }

  /**
   * Indicates whether the facility is part of a federal agency.
   * @return facFederalFlg
   */
  @javax.annotation.Nonnull
  public String getFacFederalFlg() {
    return facFederalFlg;
  }

  public void setFacFederalFlg(String facFederalFlg) {
    this.facFederalFlg = facFederalFlg;
  }


  public Echo03 facFormalActionCount(String facFormalActionCount) {
    this.facFormalActionCount = facFormalActionCount;
    return this;
  }

  /**
   * Indicates the total number of enforcement actions taken against the facility within the last five years. NA indicates that this measure is not applicable for facilities with no associated CAA, CWA, or RCRA permits
   * @return facFormalActionCount
   */
  @javax.annotation.Nonnull
  public String getFacFormalActionCount() {
    return facFormalActionCount;
  }

  public void setFacFormalActionCount(String facFormalActionCount) {
    this.facFormalActionCount = facFormalActionCount;
  }


  public Echo03 facImpWaterFlg(String facImpWaterFlg) {
    this.facImpWaterFlg = facImpWaterFlg;
    return this;
  }

  /**
   * Indicates whether or not the facility discharges directly into category 4 or 5 impaired water, as designated under section 303(d) of the Clean Water Act.
   * @return facImpWaterFlg
   */
  @javax.annotation.Nonnull
  public String getFacImpWaterFlg() {
    return facImpWaterFlg;
  }

  public void setFacImpWaterFlg(String facImpWaterFlg) {
    this.facImpWaterFlg = facImpWaterFlg;
  }


  public Echo03 facIndianCntryFlg(String facIndianCntryFlg) {
    this.facIndianCntryFlg = facIndianCntryFlg;
    return this;
  }

  /**
   * Flag showing Y/N whether the facility is located in Indian Country.
   * @return facIndianCntryFlg
   */
  @javax.annotation.Nonnull
  public String getFacIndianCntryFlg() {
    return facIndianCntryFlg;
  }

  public void setFacIndianCntryFlg(String facIndianCntryFlg) {
    this.facIndianCntryFlg = facIndianCntryFlg;
  }


  public Echo03 facIndianSpatialFlg(String facIndianSpatialFlg) {
    this.facIndianSpatialFlg = facIndianSpatialFlg;
    return this;
  }

  /**
   * Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.
   * @return facIndianSpatialFlg
   */
  @javax.annotation.Nonnull
  public String getFacIndianSpatialFlg() {
    return facIndianSpatialFlg;
  }

  public void setFacIndianSpatialFlg(String facIndianSpatialFlg) {
    this.facIndianSpatialFlg = facIndianSpatialFlg;
  }


  public Echo03 facInformalCount(String facInformalCount) {
    this.facInformalCount = facInformalCount;
    return this;
  }

  /**
   * Indicates the total number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years
   * @return facInformalCount
   */
  @javax.annotation.Nonnull
  public String getFacInformalCount() {
    return facInformalCount;
  }

  public void setFacInformalCount(String facInformalCount) {
    this.facInformalCount = facInformalCount;
  }


  public Echo03 facInspectionCount(String facInspectionCount) {
    this.facInspectionCount = facInspectionCount;
    return this;
  }

  /**
   * The number of inspections/compliance evaluations that have occurred at the facility, under the AIR, CWA, and RCRA, within the last five years. The last 5 years will include data from the 20 most recently completed quarters, plus data from the current quarter up until the refresh date. This count only includes inspection types that are counted as inspections in official counts.
   * @return facInspectionCount
   */
  @javax.annotation.Nonnull
  public String getFacInspectionCount() {
    return facInspectionCount;
  }

  public void setFacInspectionCount(String facInspectionCount) {
    this.facInspectionCount = facInspectionCount;
  }


  public Echo03 facLastPenaltyAmt(String facLastPenaltyAmt) {
    this.facLastPenaltyAmt = facLastPenaltyAmt;
    return this;
  }

  /**
   * Indicates the dollar amount of the most recent assessed (or final) penalty taken against the facility.
   * @return facLastPenaltyAmt
   */
  @javax.annotation.Nonnull
  public String getFacLastPenaltyAmt() {
    return facLastPenaltyAmt;
  }

  public void setFacLastPenaltyAmt(String facLastPenaltyAmt) {
    this.facLastPenaltyAmt = facLastPenaltyAmt;
  }


  public Echo03 facLat(String facLat) {
    this.facLat = facLat;
    return this;
  }

  /**
   * The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
   * @return facLat
   */
  @javax.annotation.Nonnull
  public String getFacLat() {
    return facLat;
  }

  public void setFacLat(String facLat) {
    this.facLat = facLat;
  }


  public Echo03 facLong(String facLong) {
    this.facLong = facLong;
    return this;
  }

  /**
   * The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
   * @return facLong
   */
  @javax.annotation.Nonnull
  public String getFacLong() {
    return facLong;
  }

  public void setFacLong(String facLong) {
    this.facLong = facLong;
  }


  public Echo03 facMajorFlag(String facMajorFlag) {
    this.facMajorFlag = facMajorFlag;
    return this;
  }

  /**
   * Indicates whether the facility is designated as a “major” (usually a large facility).
   * @return facMajorFlag
   */
  @javax.annotation.Nonnull
  public String getFacMajorFlag() {
    return facMajorFlag;
  }

  public void setFacMajorFlag(String facMajorFlag) {
    this.facMajorFlag = facMajorFlag;
  }


  public Echo03 facMapFlg(String facMapFlg) {
    this.facMapFlg = facMapFlg;
    return this;
  }

  /**
   * Graphical indicator denoting whether geographical data required to map a facility are available.
   * @return facMapFlg
   */
  @javax.annotation.Nonnull
  public String getFacMapFlg() {
    return facMapFlg;
  }

  public void setFacMapFlg(String facMapFlg) {
    this.facMapFlg = facMapFlg;
  }


  public Echo03 facMapIcon(String facMapIcon) {
    this.facMapIcon = facMapIcon;
    return this;
  }

  /**
   * The default map icon image file calculated for the facility by the ECHO program.
   * @return facMapIcon
   */
  @javax.annotation.Nonnull
  public String getFacMapIcon() {
    return facMapIcon;
  }

  public void setFacMapIcon(String facMapIcon) {
    this.facMapIcon = facMapIcon;
  }


  public Echo03 facMyrtkUniverse(String facMyrtkUniverse) {
    this.facMyrtkUniverse = facMyrtkUniverse;
    return this;
  }

  /**
   * A 3-digit combination of Y/N flags indicating if the facility is considered a Right-to-Know Network (RTKNet) CAA (position 1), NPDES (position 2), or RCRA facility (position 3).
   * @return facMyrtkUniverse
   */
  @javax.annotation.Nonnull
  public String getFacMyrtkUniverse() {
    return facMyrtkUniverse;
  }

  public void setFacMyrtkUniverse(String facMyrtkUniverse) {
    this.facMyrtkUniverse = facMyrtkUniverse;
  }


  public Echo03 facNAICSCodes(String facNAICSCodes) {
    this.facNAICSCodes = facNAICSCodes;
    return this;
  }

  /**
   * The facility&#39;s North American Industry Classification System (NAICS) Codes.
   * @return facNAICSCodes
   */
  @javax.annotation.Nonnull
  public String getFacNAICSCodes() {
    return facNAICSCodes;
  }

  public void setFacNAICSCodes(String facNAICSCodes) {
    this.facNAICSCodes = facNAICSCodes;
  }


  public Echo03 facNaaFlag(String facNaaFlag) {
    this.facNaaFlag = facNaaFlag;
    return this;
  }

  /**
   * Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.
   * @return facNaaFlag
   */
  @javax.annotation.Nonnull
  public String getFacNaaFlag() {
    return facNaaFlag;
  }

  public void setFacNaaFlag(String facNaaFlag) {
    this.facNaaFlag = facNaaFlag;
  }


  public Echo03 facName(String facName) {
    this.facName = facName;
    return this;
  }

  /**
   * Name of facility
   * @return facName
   */
  @javax.annotation.Nonnull
  public String getFacName() {
    return facName;
  }

  public void setFacName(String facName) {
    this.facName = facName;
  }


  public Echo03 facPenaltyCount(String facPenaltyCount) {
    this.facPenaltyCount = facPenaltyCount;
    return this;
  }

  /**
   * The total number of penalties assessed (or final) taken against the facility within the last five years
   * @return facPenaltyCount
   */
  @javax.annotation.Nonnull
  public String getFacPenaltyCount() {
    return facPenaltyCount;
  }

  public void setFacPenaltyCount(String facPenaltyCount) {
    this.facPenaltyCount = facPenaltyCount;
  }


  public Echo03 facPercentMinority(String facPercentMinority) {
    this.facPercentMinority = facPercentMinority;
    return this;
  }

  /**
   * Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
   * @return facPercentMinority
   */
  @javax.annotation.Nonnull
  public String getFacPercentMinority() {
    return facPercentMinority;
  }

  public void setFacPercentMinority(String facPercentMinority) {
    this.facPercentMinority = facPercentMinority;
  }


  public Echo03 facPopDen(String facPopDen) {
    this.facPopDen = facPopDen;
    return this;
  }

  /**
   * The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field).
   * @return facPopDen
   */
  @javax.annotation.Nonnull
  public String getFacPopDen() {
    return facPopDen;
  }

  public void setFacPopDen(String facPopDen) {
    this.facPopDen = facPopDen;
  }


  public Echo03 facProgramsWithSNC(String facProgramsWithSNC) {
    this.facProgramsWithSNC = facProgramsWithSNC;
    return this;
  }

  /**
   * The number of programs (CAA, CWA, SDWA, RCRA) related to the facility that have a current serious violation.
   * @return facProgramsWithSNC
   */
  @javax.annotation.Nonnull
  public String getFacProgramsWithSNC() {
    return facProgramsWithSNC;
  }

  public void setFacProgramsWithSNC(String facProgramsWithSNC) {
    this.facProgramsWithSNC = facProgramsWithSNC;
  }


  public Echo03 facQtrsWithNC(String facQtrsWithNC) {
    this.facQtrsWithNC = facQtrsWithNC;
    return this;
  }

  /**
   * The number of quarters, out of the last twelve quarters, in which the facility is considered in violation.
   * @return facQtrsWithNC
   */
  @javax.annotation.Nonnull
  public String getFacQtrsWithNC() {
    return facQtrsWithNC;
  }

  public void setFacQtrsWithNC(String facQtrsWithNC) {
    this.facQtrsWithNC = facQtrsWithNC;
  }


  public Echo03 facReferencePoint(String facReferencePoint) {
    this.facReferencePoint = facReferencePoint;
    return this;
  }

  /**
   * A description of the location for the provided facility coordinate.
   * @return facReferencePoint
   */
  @javax.annotation.Nonnull
  public String getFacReferencePoint() {
    return facReferencePoint;
  }

  public void setFacReferencePoint(String facReferencePoint) {
    this.facReferencePoint = facReferencePoint;
  }


  public Echo03 facSICCodes(String facSICCodes) {
    this.facSICCodes = facSICCodes;
    return this;
  }

  /**
   * Indicates the facility’s or permit&#39;s primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.
   * @return facSICCodes
   */
  @javax.annotation.Nonnull
  public String getFacSICCodes() {
    return facSICCodes;
  }

  public void setFacSICCodes(String facSICCodes) {
    this.facSICCodes = facSICCodes;
  }


  public Echo03 facSNCFlg(String facSNCFlg) {
    this.facSNCFlg = facSNCFlg;
    return this;
  }

  /**
   * The Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \&quot;Y\&quot; indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \&quot;N\&quot; indicates the permit or site is not considered in SNC.
   * @return facSNCFlg
   */
  @javax.annotation.Nonnull
  public String getFacSNCFlg() {
    return facSNCFlg;
  }

  public void setFacSNCFlg(String facSNCFlg) {
    this.facSNCFlg = facSNCFlg;
  }


  public Echo03 facState(String facState) {
    this.facState = facState;
    return this;
  }

  /**
   * Facility state
   * @return facState
   */
  @javax.annotation.Nonnull
  public String getFacState() {
    return facState;
  }

  public void setFacState(String facState) {
    this.facState = facState;
  }


  public Echo03 facStdCountyName(String facStdCountyName) {
    this.facStdCountyName = facStdCountyName;
    return this;
  }

  /**
   * The standardized  facility county name from EPA&#39;s Facility Registry System
   * @return facStdCountyName
   */
  @javax.annotation.Nonnull
  public String getFacStdCountyName() {
    return facStdCountyName;
  }

  public void setFacStdCountyName(String facStdCountyName) {
    this.facStdCountyName = facStdCountyName;
  }


  public Echo03 facStreet(String facStreet) {
    this.facStreet = facStreet;
    return this;
  }

  /**
   * Street address where facility is located, as maintained by each data system. Certain data systems also maintain mailing address information, which is not used in this report. The street address may differ across EPA databases due to differences in reported information (e.g., use of mailing address), change in ownership, use of parent or subsidiary address, etc.
   * @return facStreet
   */
  @javax.annotation.Nonnull
  public String getFacStreet() {
    return facStreet;
  }

  public void setFacStreet(String facStreet) {
    this.facStreet = facStreet;
  }


  public Echo03 facTotalPenalties(String facTotalPenalties) {
    this.facTotalPenalties = facTotalPenalties;
    return this;
  }

  /**
   * The total dollar amount of either assessed (or final) penalties taken against the facility within the last five years
   * @return facTotalPenalties
   */
  @javax.annotation.Nonnull
  public String getFacTotalPenalties() {
    return facTotalPenalties;
  }

  public void setFacTotalPenalties(String facTotalPenalties) {
    this.facTotalPenalties = facTotalPenalties;
  }


  public Echo03 facUsMexBorderFlg(String facUsMexBorderFlg) {
    this.facUsMexBorderFlg = facUsMexBorderFlg;
    return this;
  }

  /**
   * A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
   * @return facUsMexBorderFlg
   */
  @javax.annotation.Nonnull
  public String getFacUsMexBorderFlg() {
    return facUsMexBorderFlg;
  }

  public void setFacUsMexBorderFlg(String facUsMexBorderFlg) {
    this.facUsMexBorderFlg = facUsMexBorderFlg;
  }


  public Echo03 facZip(String facZip) {
    this.facZip = facZip;
    return this;
  }

  /**
   * Facility ZIP code
   * @return facZip
   */
  @javax.annotation.Nonnull
  public String getFacZip() {
    return facZip;
  }

  public void setFacZip(String facZip) {
    this.facZip = facZip;
  }


  public Echo03 fecCaseIDs(String fecCaseIDs) {
    this.fecCaseIDs = fecCaseIDs;
    return this;
  }

  /**
   * All Case Numbers of Federal Enforcement Cases relating to the Facility from the ICIS System
   * @return fecCaseIDs
   */
  @javax.annotation.Nonnull
  public String getFecCaseIDs() {
    return fecCaseIDs;
  }

  public void setFecCaseIDs(String fecCaseIDs) {
    this.fecCaseIDs = fecCaseIDs;
  }


  public Echo03 fecLastCaseDate(String fecLastCaseDate) {
    this.fecLastCaseDate = fecLastCaseDate;
    return this;
  }

  /**
   * The date of the latest Federal Enforcement Case related to this Facility in the ICIS system.
   * @return fecLastCaseDate
   */
  @javax.annotation.Nonnull
  public String getFecLastCaseDate() {
    return fecLastCaseDate;
  }

  public void setFecLastCaseDate(String fecLastCaseDate) {
    this.fecLastCaseDate = fecLastCaseDate;
  }


  public Echo03 fecNumberOfCases(String fecNumberOfCases) {
    this.fecNumberOfCases = fecNumberOfCases;
    return this;
  }

  /**
   * The total number of Federal Enforcement Cases in the last 5 years related to this Facility in the ICIS system.
   * @return fecNumberOfCases
   */
  @javax.annotation.Nonnull
  public String getFecNumberOfCases() {
    return fecNumberOfCases;
  }

  public void setFecNumberOfCases(String fecNumberOfCases) {
    this.fecNumberOfCases = fecNumberOfCases;
  }


  public Echo03 fecTotalPenalties(String fecTotalPenalties) {
    this.fecTotalPenalties = fecTotalPenalties;
    return this;
  }

  /**
   * The total Federal Enforcement Case penalties assessed against this facility in the last 5 years.
   * @return fecTotalPenalties
   */
  @javax.annotation.Nonnull
  public String getFecTotalPenalties() {
    return fecTotalPenalties;
  }

  public void setFecTotalPenalties(String fecTotalPenalties) {
    this.fecTotalPenalties = fecTotalPenalties;
  }


  public Echo03 fifraInspections5yr(String fifraInspections5yr) {
    this.fifraInspections5yr = fifraInspections5yr;
    return this;
  }

  /**
   * From ICIS FE&amp;C, the number of FIFRA inspections at the facility in the past five years.
   * @return fifraInspections5yr
   */
  @javax.annotation.Nonnull
  public String getFifraInspections5yr() {
    return fifraInspections5yr;
  }

  public void setFifraInspections5yr(String fifraInspections5yr) {
    this.fifraInspections5yr = fifraInspections5yr;
  }


  public Echo03 ghGCO2Releases(String ghGCO2Releases) {
    this.ghGCO2Releases = ghGCO2Releases;
    return this;
  }

  /**
   * The sum of total release amounts of all linked Greenhouse Gas IDs reported as \&quot;metric tons of CO2 equivalents\&quot;
   * @return ghGCO2Releases
   */
  @javax.annotation.Nonnull
  public String getGhGCO2Releases() {
    return ghGCO2Releases;
  }

  public void setGhGCO2Releases(String ghGCO2Releases) {
    this.ghGCO2Releases = ghGCO2Releases;
  }


  public Echo03 ghGFlag(String ghGFlag) {
    this.ghGFlag = ghGFlag;
    return this;
  }

  /**
   * Indicates whether the facility has a Greenhouse Gas (GHG) permit.
   * @return ghGFlag
   */
  @javax.annotation.Nonnull
  public String getGhGFlag() {
    return ghGFlag;
  }

  public void setGhGFlag(String ghGFlag) {
    this.ghGFlag = ghGFlag;
  }


  public Echo03 ghGIDs(String ghGIDs) {
    this.ghGIDs = ghGIDs;
    return this;
  }

  /**
   * A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.
   * @return ghGIDs
   */
  @javax.annotation.Nonnull
  public String getGhGIDs() {
    return ghGIDs;
  }

  public void setGhGIDs(String ghGIDs) {
    this.ghGIDs = ghGIDs;
  }


  public Echo03 hasPollRpt(String hasPollRpt) {
    this.hasPollRpt = hasPollRpt;
    return this;
  }

  /**
   * ???
   * @return hasPollRpt
   */
  @javax.annotation.Nonnull
  public String getHasPollRpt() {
    return hasPollRpt;
  }

  public void setHasPollRpt(String hasPollRpt) {
    this.hasPollRpt = hasPollRpt;
  }


  public Echo03 infea5yrFlag(String infea5yrFlag) {
    this.infea5yrFlag = infea5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has an informal enforcement action within the last 5 years. 1 &#x3D; Yes.
   * @return infea5yrFlag
   */
  @javax.annotation.Nonnull
  public String getInfea5yrFlag() {
    return infea5yrFlag;
  }

  public void setInfea5yrFlag(String infea5yrFlag) {
    this.infea5yrFlag = infea5yrFlag;
  }


  public Echo03 insp5yrFlag(String insp5yrFlag) {
    this.insp5yrFlag = insp5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has an inspection within the last 5 years. 1 &#x3D; Yes
   * @return insp5yrFlag
   */
  @javax.annotation.Nonnull
  public String getInsp5yrFlag() {
    return insp5yrFlag;
  }

  public void setInsp5yrFlag(String insp5yrFlag) {
    this.insp5yrFlag = insp5yrFlag;
  }


  public Echo03 lower48(String lower48) {
    this.lower48 = lower48;
    return this;
  }

  /**
   * Flag showing Y/N whether location is within the contiguous (lower 48) United States.
   * @return lower48
   */
  @javax.annotation.Nonnull
  public String getLower48() {
    return lower48;
  }

  public void setLower48(String lower48) {
    this.lower48 = lower48;
  }


  public Echo03 maxPctileUs(String maxPctileUs) {
    this.maxPctileUs = maxPctileUs;
    return this;
  }

  /**
   * The maximum percentile from all individual EJSCREEN indicators.
   * @return maxPctileUs
   */
  @javax.annotation.Nonnull
  public String getMaxPctileUs() {
    return maxPctileUs;
  }

  public void setMaxPctileUs(String maxPctileUs) {
    this.maxPctileUs = maxPctileUs;
  }


  public Echo03 maxScore(String maxScore) {
    this.maxScore = maxScore;
    return this;
  }

  /**
   * A sorting score for internal use.
   * @return maxScore
   */
  @javax.annotation.Nonnull
  public String getMaxScore() {
    return maxScore;
  }

  public void setMaxScore(String maxScore) {
    this.maxScore = maxScore;
  }


  public Echo03 NC(String NC) {
    this.NC = NC;
    return this;
  }

  /**
   * Indicates whether or not the permit or site is considered either in Non-compliance (NC), Significant Non-compliance (SNC) or High Priority violation (HPV) status.
   * @return NC
   */
  @javax.annotation.Nonnull
  public String getNC() {
    return NC;
  }

  public void setNC(String NC) {
    this.NC = NC;
  }


  public Echo03 npDESFlag(String npDESFlag) {
    this.npDESFlag = npDESFlag;
    return this;
  }

  /**
   * Indicates whether the facility has a Clean Water Act (CWA) permit.
   * @return npDESFlag
   */
  @javax.annotation.Nonnull
  public String getNpDESFlag() {
    return npDESFlag;
  }

  public void setNpDESFlag(String npDESFlag) {
    this.npDESFlag = npDESFlag;
  }


  public Echo03 npDESIDs(String npDESIDs) {
    this.npDESIDs = npDESIDs;
    return this;
  }

  /**
   * Clean Water Act ID from the ICIS-NPDES (Integrated Compliance Information System - National Pollutant Discharge Elimination System)
   * @return npDESIDs
   */
  @javax.annotation.Nonnull
  public String getNpDESIDs() {
    return npDESIDs;
  }

  public void setNpDESIDs(String npDESIDs) {
    this.npDESIDs = npDESIDs;
  }


  public Echo03 naaCategories(String naaCategories) {
    this.naaCategories = naaCategories;
    return this;
  }

  /**
   * The nonattainment area categories that the facility is in, derived spatially based on the facility&#39;s geographic coordinates in FRS.�
   * @return naaCategories
   */
  @javax.annotation.Nonnull
  public String getNaaCategories() {
    return naaCategories;
  }

  public void setNaaCategories(String naaCategories) {
    this.naaCategories = naaCategories;
  }


  public Echo03 naaPollutants(String naaPollutants) {
    this.naaPollutants = naaPollutants;
    return this;
  }

  /**
   * All criteria pollutants that the facility is in nonattainment for.
   * @return naaPollutants
   */
  @javax.annotation.Nonnull
  public String getNaaPollutants() {
    return naaPollutants;
  }

  public void setNaaPollutants(String naaPollutants) {
    this.naaPollutants = naaPollutants;
  }


  public Echo03 over80CountUs(String over80CountUs) {
    this.over80CountUs = over80CountUs;
    return this;
  }

  /**
   * The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.
   * @return over80CountUs
   */
  @javax.annotation.Nonnull
  public String getOver80CountUs() {
    return over80CountUs;
  }

  public void setOver80CountUs(String over80CountUs) {
    this.over80CountUs = over80CountUs;
  }


  public Echo03 pctileCancerUs(String pctileCancerUs) {
    this.pctileCancerUs = pctileCancerUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
   * @return pctileCancerUs
   */
  @javax.annotation.Nonnull
  public String getPctileCancerUs() {
    return pctileCancerUs;
  }

  public void setPctileCancerUs(String pctileCancerUs) {
    this.pctileCancerUs = pctileCancerUs;
  }


  public Echo03 pctileDpmUs(String pctileDpmUs) {
    this.pctileDpmUs = pctileDpmUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
   * @return pctileDpmUs
   */
  @javax.annotation.Nonnull
  public String getPctileDpmUs() {
    return pctileDpmUs;
  }

  public void setPctileDpmUs(String pctileDpmUs) {
    this.pctileDpmUs = pctileDpmUs;
  }


  public Echo03 pctileO3Us(String pctileO3Us) {
    this.pctileO3Us = pctileO3Us;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN ozone indicator.
   * @return pctileO3Us
   */
  @javax.annotation.Nonnull
  public String getPctileO3Us() {
    return pctileO3Us;
  }

  public void setPctileO3Us(String pctileO3Us) {
    this.pctileO3Us = pctileO3Us;
  }


  public Echo03 pctilePctpre1960Us(String pctilePctpre1960Us) {
    this.pctilePctpre1960Us = pctilePctpre1960Us;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN Lead paint indicator.
   * @return pctilePctpre1960Us
   */
  @javax.annotation.Nonnull
  public String getPctilePctpre1960Us() {
    return pctilePctpre1960Us;
  }

  public void setPctilePctpre1960Us(String pctilePctpre1960Us) {
    this.pctilePctpre1960Us = pctilePctpre1960Us;
  }


  public Echo03 pctilePmUs(String pctilePmUs) {
    this.pctilePmUs = pctilePmUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN particulate matter indicator.
   * @return pctilePmUs
   */
  @javax.annotation.Nonnull
  public String getPctilePmUs() {
    return pctilePmUs;
  }

  public void setPctilePmUs(String pctilePmUs) {
    this.pctilePmUs = pctilePmUs;
  }


  public Echo03 pctileProximityNPDESUs(String pctileProximityNPDESUs) {
    this.pctileProximityNPDESUs = pctileProximityNPDESUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
   * @return pctileProximityNPDESUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityNPDESUs() {
    return pctileProximityNPDESUs;
  }

  public void setPctileProximityNPDESUs(String pctileProximityNPDESUs) {
    this.pctileProximityNPDESUs = pctileProximityNPDESUs;
  }


  public Echo03 pctileProximityNplUs(String pctileProximityNplUs) {
    this.pctileProximityNplUs = pctileProximityNplUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
   * @return pctileProximityNplUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityNplUs() {
    return pctileProximityNplUs;
  }

  public void setPctileProximityNplUs(String pctileProximityNplUs) {
    this.pctileProximityNplUs = pctileProximityNplUs;
  }


  public Echo03 pctileProximityRmpUs(String pctileProximityRmpUs) {
    this.pctileProximityRmpUs = pctileProximityRmpUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
   * @return pctileProximityRmpUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityRmpUs() {
    return pctileProximityRmpUs;
  }

  public void setPctileProximityRmpUs(String pctileProximityRmpUs) {
    this.pctileProximityRmpUs = pctileProximityRmpUs;
  }


  public Echo03 pctileProximityTsdfUs(String pctileProximityTsdfUs) {
    this.pctileProximityTsdfUs = pctileProximityTsdfUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
   * @return pctileProximityTsdfUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityTsdfUs() {
    return pctileProximityTsdfUs;
  }

  public void setPctileProximityTsdfUs(String pctileProximityTsdfUs) {
    this.pctileProximityTsdfUs = pctileProximityTsdfUs;
  }


  public Echo03 pctileRespUs(String pctileRespUs) {
    this.pctileRespUs = pctileRespUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
   * @return pctileRespUs
   */
  @javax.annotation.Nonnull
  public String getPctileRespUs() {
    return pctileRespUs;
  }

  public void setPctileRespUs(String pctileRespUs) {
    this.pctileRespUs = pctileRespUs;
  }


  public Echo03 pctileTrafficScoreUs(String pctileTrafficScoreUs) {
    this.pctileTrafficScoreUs = pctileTrafficScoreUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
   * @return pctileTrafficScoreUs
   */
  @javax.annotation.Nonnull
  public String getPctileTrafficScoreUs() {
    return pctileTrafficScoreUs;
  }

  public void setPctileTrafficScoreUs(String pctileTrafficScoreUs) {
    this.pctileTrafficScoreUs = pctileTrafficScoreUs;
  }


  public Echo03 rcRA3yrComplQtrsHistory(String rcRA3yrComplQtrsHistory) {
    this.rcRA3yrComplQtrsHistory = rcRA3yrComplQtrsHistory;
    return this;
  }

  /**
   * The system&#39;s 3-year compliance status history by quarter (3-month period) entered in the RCRA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
   * @return rcRA3yrComplQtrsHistory
   */
  @javax.annotation.Nonnull
  public String getRcRA3yrComplQtrsHistory() {
    return rcRA3yrComplQtrsHistory;
  }

  public void setRcRA3yrComplQtrsHistory(String rcRA3yrComplQtrsHistory) {
    this.rcRA3yrComplQtrsHistory = rcRA3yrComplQtrsHistory;
  }


  public Echo03 rcRAComplianceStatus(String rcRAComplianceStatus) {
    this.rcRAComplianceStatus = rcRAComplianceStatus;
    return this;
  }

  /**
   * An indication of the facility&#39;s compliance status under the Resource Conservation and Recovery Act (Significant Violation &#x3D; Significant Noncomplier, Noncompliance, or No Violation).
   * @return rcRAComplianceStatus
   */
  @javax.annotation.Nonnull
  public String getRcRAComplianceStatus() {
    return rcRAComplianceStatus;
  }

  public void setRcRAComplianceStatus(String rcRAComplianceStatus) {
    this.rcRAComplianceStatus = rcRAComplianceStatus;
  }


  public Echo03 rcRADateLastFormalAction(String rcRADateLastFormalAction) {
    this.rcRADateLastFormalAction = rcRADateLastFormalAction;
    return this;
  }

  /**
   * The effective date of the most recent listed enforcement action entered into the RCRA program database.
   * @return rcRADateLastFormalAction
   */
  @javax.annotation.Nonnull
  public String getRcRADateLastFormalAction() {
    return rcRADateLastFormalAction;
  }

  public void setRcRADateLastFormalAction(String rcRADateLastFormalAction) {
    this.rcRADateLastFormalAction = rcRADateLastFormalAction;
  }


  public Echo03 rcRADaysLastEvaluation(String rcRADaysLastEvaluation) {
    this.rcRADaysLastEvaluation = rcRADaysLastEvaluation;
    return this;
  }

  /**
   * The number of days since a RCRA inspection was completed.
   * @return rcRADaysLastEvaluation
   */
  @javax.annotation.Nonnull
  public String getRcRADaysLastEvaluation() {
    return rcRADaysLastEvaluation;
  }

  public void setRcRADaysLastEvaluation(String rcRADaysLastEvaluation) {
    this.rcRADaysLastEvaluation = rcRADaysLastEvaluation;
  }


  public Echo03 rcRAFlag(String rcRAFlag) {
    this.rcRAFlag = rcRAFlag;
    return this;
  }

  /**
   * Indicates whether the facility has a Resource Conservation and Recovery Action (RCRA) permit.
   * @return rcRAFlag
   */
  @javax.annotation.Nonnull
  public String getRcRAFlag() {
    return rcRAFlag;
  }

  public void setRcRAFlag(String rcRAFlag) {
    this.rcRAFlag = rcRAFlag;
  }


  public Echo03 rcRAFormalActionCount(String rcRAFormalActionCount) {
    this.rcRAFormalActionCount = rcRAFormalActionCount;
    return this;
  }

  /**
   * Indicates the number of enforcement actions taken against the facility within the last five years under the Resource Conservation and Recovery Act.
   * @return rcRAFormalActionCount
   */
  @javax.annotation.Nonnull
  public String getRcRAFormalActionCount() {
    return rcRAFormalActionCount;
  }

  public void setRcRAFormalActionCount(String rcRAFormalActionCount) {
    this.rcRAFormalActionCount = rcRAFormalActionCount;
  }


  public Echo03 rcRAIDs(String rcRAIDs) {
    this.rcRAIDs = rcRAIDs;
    return this;
  }

  /**
   * A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
   * @return rcRAIDs
   */
  @javax.annotation.Nonnull
  public String getRcRAIDs() {
    return rcRAIDs;
  }

  public void setRcRAIDs(String rcRAIDs) {
    this.rcRAIDs = rcRAIDs;
  }


  public Echo03 rcRAInformalCount(String rcRAInformalCount) {
    this.rcRAInformalCount = rcRAInformalCount;
    return this;
  }

  /**
   * Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Resource Conservation and Recovery Act.
   * @return rcRAInformalCount
   */
  @javax.annotation.Nonnull
  public String getRcRAInformalCount() {
    return rcRAInformalCount;
  }

  public void setRcRAInformalCount(String rcRAInformalCount) {
    this.rcRAInformalCount = rcRAInformalCount;
  }


  public Echo03 rcRAInspectionCount(String rcRAInspectionCount) {
    this.rcRAInspectionCount = rcRAInspectionCount;
    return this;
  }

  /**
   * The number of inspections/compliance evaluations under the Resource Conservation and Recovery Act, occurring at the facility within the last five years
   * @return rcRAInspectionCount
   */
  @javax.annotation.Nonnull
  public String getRcRAInspectionCount() {
    return rcRAInspectionCount;
  }

  public void setRcRAInspectionCount(String rcRAInspectionCount) {
    this.rcRAInspectionCount = rcRAInspectionCount;
  }


  public Echo03 rcRALastPenaltyAmt(String rcRALastPenaltyAmt) {
    this.rcRALastPenaltyAmt = rcRALastPenaltyAmt;
    return this;
  }

  /**
   * The amount of the most recent penalty entered into the RCRA program database.
   * @return rcRALastPenaltyAmt
   */
  @javax.annotation.Nonnull
  public String getRcRALastPenaltyAmt() {
    return rcRALastPenaltyAmt;
  }

  public void setRcRALastPenaltyAmt(String rcRALastPenaltyAmt) {
    this.rcRALastPenaltyAmt = rcRALastPenaltyAmt;
  }


  public Echo03 rcRALastPenaltyDate(String rcRALastPenaltyDate) {
    this.rcRALastPenaltyDate = rcRALastPenaltyDate;
    return this;
  }

  /**
   * Indicates the date on which the most recent assessed (or final) penalty was taken against the facility, entered in the RCRAInfo program database.
   * @return rcRALastPenaltyDate
   */
  @javax.annotation.Nonnull
  public String getRcRALastPenaltyDate() {
    return rcRALastPenaltyDate;
  }

  public void setRcRALastPenaltyDate(String rcRALastPenaltyDate) {
    this.rcRALastPenaltyDate = rcRALastPenaltyDate;
  }


  public Echo03 RCRANAICS(String RCRANAICS) {
    this.RCRANAICS = RCRANAICS;
    return this;
  }

  /**
   * The RCRA permit&#39;s primary North American Industry Classification System (NAICS) Code.
   * @return RCRANAICS
   */
  @javax.annotation.Nonnull
  public String getRCRANAICS() {
    return RCRANAICS;
  }

  public void setRCRANAICS(String RCRANAICS) {
    this.RCRANAICS = RCRANAICS;
  }


  public Echo03 rcRAPenalties(String rcRAPenalties) {
    this.rcRAPenalties = rcRAPenalties;
    return this;
  }

  /**
   * The total dollar amount of assessed (or final) penalties taken against the facility within the last five years, entered in the RCRAInfo program database.
   * @return rcRAPenalties
   */
  @javax.annotation.Nonnull
  public String getRcRAPenalties() {
    return rcRAPenalties;
  }

  public void setRcRAPenalties(String rcRAPenalties) {
    this.rcRAPenalties = rcRAPenalties;
  }


  public Echo03 rcRAPermitTypes(String rcRAPermitTypes) {
    this.rcRAPermitTypes = rcRAPermitTypes;
    return this;
  }

  /**
   * RCRA Facility Types include: - TSDF &#x3D; Treatment, Storage and Disposal facility - LQG &#x3D; Large Quantity Generator - SQG &#x3D; Small Quantity Generator - CESQG &#x3D; Conditionally-Exempt Small Quantity Generator - Operating TSDF - Transporters
   * @return rcRAPermitTypes
   */
  @javax.annotation.Nonnull
  public String getRcRAPermitTypes() {
    return rcRAPermitTypes;
  }

  public void setRcRAPermitTypes(String rcRAPermitTypes) {
    this.rcRAPermitTypes = rcRAPermitTypes;
  }


  public Echo03 rcRAQtrsWithNC(String rcRAQtrsWithNC) {
    this.rcRAQtrsWithNC = rcRAQtrsWithNC;
    return this;
  }

  /**
   * The number of quarters, out of the last twelve quarters, in which the RCRA permit is considered in violation.
   * @return rcRAQtrsWithNC
   */
  @javax.annotation.Nonnull
  public String getRcRAQtrsWithNC() {
    return rcRAQtrsWithNC;
  }

  public void setRcRAQtrsWithNC(String rcRAQtrsWithNC) {
    this.rcRAQtrsWithNC = rcRAQtrsWithNC;
  }


  public Echo03 rcRASNCFlag(String rcRASNCFlag) {
    this.rcRASNCFlag = rcRASNCFlag;
    return this;
  }

  /**
   * The RCRA Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \&quot;Y\&quot; indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \&quot;N\&quot; indicates the permit or site is not considered in SNC.
   * @return rcRASNCFlag
   */
  @javax.annotation.Nonnull
  public String getRcRASNCFlag() {
    return rcRASNCFlag;
  }

  public void setRcRASNCFlag(String rcRASNCFlag) {
    this.rcRASNCFlag = rcRASNCFlag;
  }


  public Echo03 registryID(String registryID) {
    this.registryID = registryID;
    return this;
  }

  /**
   * An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
   * @return registryID
   */
  @javax.annotation.Nonnull
  public String getRegistryID() {
    return registryID;
  }

  public void setRegistryID(String registryID) {
    this.registryID = registryID;
  }


  public Echo03 rmpIDs(String rmpIDs) {
    this.rmpIDs = rmpIDs;
    return this;
  }

  /**
   * A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.
   * @return rmpIDs
   */
  @javax.annotation.Nonnull
  public String getRmpIDs() {
    return rmpIDs;
  }

  public void setRmpIDs(String rmpIDs) {
    this.rmpIDs = rmpIDs;
  }


  public Echo03 sdWA3yrComplQtrsHistory(String sdWA3yrComplQtrsHistory) {
    this.sdWA3yrComplQtrsHistory = sdWA3yrComplQtrsHistory;
    return this;
  }

  /**
   * The system&#39;s 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ - No Violation Identified V - Noncompliance S - Significant Noncompliance U - Undetermined
   * @return sdWA3yrComplQtrsHistory
   */
  @javax.annotation.Nonnull
  public String getSdWA3yrComplQtrsHistory() {
    return sdWA3yrComplQtrsHistory;
  }

  public void setSdWA3yrComplQtrsHistory(String sdWA3yrComplQtrsHistory) {
    this.sdWA3yrComplQtrsHistory = sdWA3yrComplQtrsHistory;
  }


  public Echo03 sdWAComplianceStatus(String sdWAComplianceStatus) {
    this.sdWAComplianceStatus = sdWAComplianceStatus;
    return this;
  }

  /**
   * An indication of the facility&#39;s compliance status under the Safe Drinking Water Act (Serious Violator, Noncompliance, or No Violation).
   * @return sdWAComplianceStatus
   */
  @javax.annotation.Nonnull
  public String getSdWAComplianceStatus() {
    return sdWAComplianceStatus;
  }

  public void setSdWAComplianceStatus(String sdWAComplianceStatus) {
    this.sdWAComplianceStatus = sdWAComplianceStatus;
  }


  public Echo03 sdWAFormalActionCount(String sdWAFormalActionCount) {
    this.sdWAFormalActionCount = sdWAFormalActionCount;
    return this;
  }

  /**
   * Indicates the number of enforcement actions taken against the facility within the last five years under the Safe Drinking Water Act
   * @return sdWAFormalActionCount
   */
  @javax.annotation.Nonnull
  public String getSdWAFormalActionCount() {
    return sdWAFormalActionCount;
  }

  public void setSdWAFormalActionCount(String sdWAFormalActionCount) {
    this.sdWAFormalActionCount = sdWAFormalActionCount;
  }


  public Echo03 sdWAIDs(String sdWAIDs) {
    this.sdWAIDs = sdWAIDs;
    return this;
  }

  /**
   * A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
   * @return sdWAIDs
   */
  @javax.annotation.Nonnull
  public String getSdWAIDs() {
    return sdWAIDs;
  }

  public void setSdWAIDs(String sdWAIDs) {
    this.sdWAIDs = sdWAIDs;
  }


  public Echo03 sdWAInformalCount(String sdWAInformalCount) {
    this.sdWAInformalCount = sdWAInformalCount;
    return this;
  }

  /**
   * Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Safe Drinking Water Act
   * @return sdWAInformalCount
   */
  @javax.annotation.Nonnull
  public String getSdWAInformalCount() {
    return sdWAInformalCount;
  }

  public void setSdWAInformalCount(String sdWAInformalCount) {
    this.sdWAInformalCount = sdWAInformalCount;
  }


  public Echo03 sdWAInspections5yr(String sdWAInspections5yr) {
    this.sdWAInspections5yr = sdWAInspections5yr;
    return this;
  }

  /**
   * The number of SDWA inspections at the facility in the past five years.
   * @return sdWAInspections5yr
   */
  @javax.annotation.Nonnull
  public String getSdWAInspections5yr() {
    return sdWAInspections5yr;
  }

  public void setSdWAInspections5yr(String sdWAInspections5yr) {
    this.sdWAInspections5yr = sdWAInspections5yr;
  }


  public Echo03 sdWAQtrsWithNC(String sdWAQtrsWithNC) {
    this.sdWAQtrsWithNC = sdWAQtrsWithNC;
    return this;
  }

  /**
   * The number of quarters, out of the last twelve quarters, in which the SDWA permit is considered in violation.
   * @return sdWAQtrsWithNC
   */
  @javax.annotation.Nonnull
  public String getSdWAQtrsWithNC() {
    return sdWAQtrsWithNC;
  }

  public void setSdWAQtrsWithNC(String sdWAQtrsWithNC) {
    this.sdWAQtrsWithNC = sdWAQtrsWithNC;
  }


  public Echo03 sdWASNCFlag(String sdWASNCFlag) {
    this.sdWASNCFlag = sdWASNCFlag;
    return this;
  }

  /**
   * Indicates whether the Water System has a Serious Violation.
   * @return sdWASNCFlag
   */
  @javax.annotation.Nonnull
  public String getSdWASNCFlag() {
    return sdWASNCFlag;
  }

  public void setSdWASNCFlag(String sdWASNCFlag) {
    this.sdWASNCFlag = sdWASNCFlag;
  }


  public Echo03 sdWASystemTypes(String sdWASystemTypes) {
    this.sdWASystemTypes = sdWASystemTypes;
    return this;
  }

  /**
   * SDWIS System Types
   * @return sdWASystemTypes
   */
  @javax.annotation.Nonnull
  public String getSdWASystemTypes() {
    return sdWASystemTypes;
  }

  public void setSdWASystemTypes(String sdWASystemTypes) {
    this.sdWASystemTypes = sdWASystemTypes;
  }


  public Echo03 sdWISFlag(String sdWISFlag) {
    this.sdWISFlag = sdWISFlag;
    return this;
  }

  /**
   * Indicates whether the facility has a Safe Drinking Water Information System (SDWIS) ID.
   * @return sdWISFlag
   */
  @javax.annotation.Nonnull
  public String getSdWISFlag() {
    return sdWISFlag;
  }

  public void setSdWISFlag(String sdWISFlag) {
    this.sdWISFlag = sdWISFlag;
  }


  public Echo03 score(String score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }


  public Echo03 semsFlag(String semsFlag) {
    this.semsFlag = semsFlag;
    return this;
  }

  /**
   * Get semsFlag
   * @return semsFlag
   */
  @javax.annotation.Nonnull
  public String getSemsFlag() {
    return semsFlag;
  }

  public void setSemsFlag(String semsFlag) {
    this.semsFlag = semsFlag;
  }


  public Echo03 semsIDs(String semsIDs) {
    this.semsIDs = semsIDs;
    return this;
  }

  /**
   * Get semsIDs
   * @return semsIDs
   */
  @javax.annotation.Nonnull
  public String getSemsIDs() {
    return semsIDs;
  }

  public void setSemsIDs(String semsIDs) {
    this.semsIDs = semsIDs;
  }


  public Echo03 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Echo03 trIFlag(String trIFlag) {
    this.trIFlag = trIFlag;
    return this;
  }

  /**
   * Indicates whether the facility has a Toxics Release Inventory (TRI) permit.
   * @return trIFlag
   */
  @javax.annotation.Nonnull
  public String getTrIFlag() {
    return trIFlag;
  }

  public void setTrIFlag(String trIFlag) {
    this.trIFlag = trIFlag;
  }


  public Echo03 trIIDs(String trIIDs) {
    this.trIIDs = trIIDs;
    return this;
  }

  /**
   * A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ &#x3D; ZIP code, NNNNN &#x3D; the first 5 consonants of the name, and SSSSS &#x3D; the first 5 non-blank non-special characters in the street address.
   * @return trIIDs
   */
  @javax.annotation.Nonnull
  public String getTrIIDs() {
    return trIIDs;
  }

  public void setTrIIDs(String trIIDs) {
    this.trIIDs = trIIDs;
  }


  public Echo03 trIOffSiteTransfers(String trIOffSiteTransfers) {
    this.trIOffSiteTransfers = trIOffSiteTransfers;
    return this;
  }

  /**
   * Total pounds per year transferred off-site.
   * @return trIOffSiteTransfers
   */
  @javax.annotation.Nonnull
  public String getTrIOffSiteTransfers() {
    return trIOffSiteTransfers;
  }

  public void setTrIOffSiteTransfers(String trIOffSiteTransfers) {
    this.trIOffSiteTransfers = trIOffSiteTransfers;
  }


  public Echo03 trIOnSiteReleases(String trIOnSiteReleases) {
    this.trIOnSiteReleases = trIOnSiteReleases;
    return this;
  }

  /**
   * Total pounds per year released for Air Emissions, Surface Water Discharges, Underground Injections and Releases to Land.
   * @return trIOnSiteReleases
   */
  @javax.annotation.Nonnull
  public String getTrIOnSiteReleases() {
    return trIOnSiteReleases;
  }

  public void setTrIOnSiteReleases(String trIOnSiteReleases) {
    this.trIOnSiteReleases = trIOnSiteReleases;
  }


  public Echo03 trIReleasesTransfers(String trIReleasesTransfers) {
    this.trIReleasesTransfers = trIReleasesTransfers;
    return this;
  }

  /**
   * Total chemical releases, in pounds, as reported to the Toxics Release Inventory (TRI) by the facility for the most recent reporting year
   * @return trIReleasesTransfers
   */
  @javax.annotation.Nonnull
  public String getTrIReleasesTransfers() {
    return trIReleasesTransfers;
  }

  public void setTrIReleasesTransfers(String trIReleasesTransfers) {
    this.trIReleasesTransfers = trIReleasesTransfers;
  }


  public Echo03 trIReporter(String trIReporter) {
    this.trIReporter = trIReporter;
    return this;
  }

  /**
   * Indicates whether or not the facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
   * @return trIReporter
   */
  @javax.annotation.Nonnull
  public String getTrIReporter() {
    return trIReporter;
  }

  public void setTrIReporter(String trIReporter) {
    this.trIReporter = trIReporter;
  }


  public Echo03 trIReporterInPast(String trIReporterInPast) {
    this.trIReporterInPast = trIReporterInPast;
    return this;
  }

  /**
   * A &#39;Y&#39; indicates a TRI Reporter from a prior year.
   * @return trIReporterInPast
   */
  @javax.annotation.Nonnull
  public String getTrIReporterInPast() {
    return trIReporterInPast;
  }

  public void setTrIReporterInPast(String trIReporterInPast) {
    this.trIReporterInPast = trIReporterInPast;
  }


  public Echo03 trIbalFlag(String trIbalFlag) {
    this.trIbalFlag = trIbalFlag;
    return this;
  }

  /**
   * A flag indicating that the facility is within a tribal area.
   * @return trIbalFlag
   */
  @javax.annotation.Nonnull
  public String getTrIbalFlag() {
    return trIbalFlag;
  }

  public void setTrIbalFlag(String trIbalFlag) {
    this.trIbalFlag = trIbalFlag;
  }


  public Echo03 tscaFlag(String tscaFlag) {
    this.tscaFlag = tscaFlag;
    return this;
  }

  /**
   * Flag indicating whether or not a facility has a TSCA ID
   * @return tscaFlag
   */
  @javax.annotation.Nonnull
  public String getTscaFlag() {
    return tscaFlag;
  }

  public void setTscaFlag(String tscaFlag) {
    this.tscaFlag = tscaFlag;
  }


  public Echo03 tscaIDs(String tscaIDs) {
    this.tscaIDs = tscaIDs;
    return this;
  }

  /**
   * Toxic Substances Control Act ID assigned to a facility
   * @return tscaIDs
   */
  @javax.annotation.Nonnull
  public String getTscaIDs() {
    return tscaIDs;
  }

  public void setTscaIDs(String tscaIDs) {
    this.tscaIDs = tscaIDs;
  }


  public Echo03 tscaInspections5yr(String tscaInspections5yr) {
    this.tscaInspections5yr = tscaInspections5yr;
    return this;
  }

  /**
   * From ICIS FE&amp;C, the number of TSCA inspections at the facility in the past five years.
   * @return tscaInspections5yr
   */
  @javax.annotation.Nonnull
  public String getTscaInspections5yr() {
    return tscaInspections5yr;
  }

  public void setTscaInspections5yr(String tscaInspections5yr) {
    this.tscaInspections5yr = tscaInspections5yr;
  }


  public Echo03 violFlag(String violFlag) {
    this.violFlag = violFlag;
    return this;
  }

  /**
   * Indicates if the facility had a violation within the last 3 years. 1 &#x3D; Yes
   * @return violFlag
   */
  @javax.annotation.Nonnull
  public String getViolFlag() {
    return violFlag;
  }

  public void setViolFlag(String violFlag) {
    this.violFlag = violFlag;
  }


  public Echo03 webDocs(String webDocs) {
    this.webDocs = webDocs;
    return this;
  }

  /**
   * Contains flags that identify what web accessible documents are available for the facility.
   * @return webDocs
   */
  @javax.annotation.Nonnull
  public String getWebDocs() {
    return webDocs;
  }

  public void setWebDocs(String webDocs) {
    this.webDocs = webDocs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Echo03 echo03 = (Echo03) o;
    return Objects.equals(this.aiRFlag, echo03.aiRFlag) &&
        Objects.equals(this.aiRIDs, echo03.aiRIDs) &&
        Objects.equals(this.activeLower48, echo03.activeLower48) &&
        Objects.equals(this.biosolidsFlag, echo03.biosolidsFlag) &&
        Objects.equals(this.caA3yrComplQtrsHistory, echo03.caA3yrComplQtrsHistory) &&
        Objects.equals(this.caAComplianceStatus, echo03.caAComplianceStatus) &&
        Objects.equals(this.caADateLastFormalAction, echo03.caADateLastFormalAction) &&
        Objects.equals(this.caADaysLastEvaluation, echo03.caADaysLastEvaluation) &&
        Objects.equals(this.caAEvaluationCount, echo03.caAEvaluationCount) &&
        Objects.equals(this.caAFormalActionCount, echo03.caAFormalActionCount) &&
        Objects.equals(this.caAHpvFlag, echo03.caAHpvFlag) &&
        Objects.equals(this.caAInformalCount, echo03.caAInformalCount) &&
        Objects.equals(this.caALastPenaltyAmt, echo03.caALastPenaltyAmt) &&
        Objects.equals(this.caALastPenaltyDate, echo03.caALastPenaltyDate) &&
        Objects.equals(this.CAANAICS, echo03.CAANAICS) &&
        Objects.equals(this.caAPenalties, echo03.caAPenalties) &&
        Objects.equals(this.caAPermitTypes, echo03.caAPermitTypes) &&
        Objects.equals(this.caAQtrsWithNC, echo03.caAQtrsWithNC) &&
        Objects.equals(this.caASICs, echo03.caASICs) &&
        Objects.equals(this.cwA13qtrsComplHistory, echo03.cwA13qtrsComplHistory) &&
        Objects.equals(this.cwA13qtrsEfflntExceedances, echo03.cwA13qtrsEfflntExceedances) &&
        Objects.equals(this.cwA3YrQncrCodes, echo03.cwA3YrQncrCodes) &&
        Objects.equals(this.cwAComplianceStatus, echo03.cwAComplianceStatus) &&
        Objects.equals(this.cwAComplianceTracking, echo03.cwAComplianceTracking) &&
        Objects.equals(this.cwADateLastFormalAction, echo03.cwADateLastFormalAction) &&
        Objects.equals(this.cwADaysLastInspection, echo03.cwADaysLastInspection) &&
        Objects.equals(this.cwAFormalActionCount, echo03.cwAFormalActionCount) &&
        Objects.equals(this.cwAInformalCount, echo03.cwAInformalCount) &&
        Objects.equals(this.cwAInspectionCount, echo03.cwAInspectionCount) &&
        Objects.equals(this.cwALastPenaltyAmt, echo03.cwALastPenaltyAmt) &&
        Objects.equals(this.cwALastPenaltyDate, echo03.cwALastPenaltyDate) &&
        Objects.equals(this.CWANAICS, echo03.CWANAICS) &&
        Objects.equals(this.cwAPenalties, echo03.cwAPenalties) &&
        Objects.equals(this.cwAPermitTypes, echo03.cwAPermitTypes) &&
        Objects.equals(this.cwAQtrsWithNC, echo03.cwAQtrsWithNC) &&
        Objects.equals(this.cwASICs, echo03.cwASICs) &&
        Objects.equals(this.cwASNCFlag, echo03.cwASNCFlag) &&
        Objects.equals(this.camdIDs, echo03.camdIDs) &&
        Objects.equals(this.censusBlockGroup, echo03.censusBlockGroup) &&
        Objects.equals(this.currSvFlag, echo03.currSvFlag) &&
        Objects.equals(this.currVioFlag, echo03.currVioFlag) &&
        Objects.equals(this.dfrUrl, echo03.dfrUrl) &&
        Objects.equals(this.ea5yrFlag, echo03.ea5yrFlag) &&
        Objects.equals(this.effChartsFlag, echo03.effChartsFlag) &&
        Objects.equals(this.eisFlag, echo03.eisFlag) &&
        Objects.equals(this.eisIDs, echo03.eisIDs) &&
        Objects.equals(this.ejscreenFlag, echo03.ejscreenFlag) &&
        Objects.equals(this.ejscreenFlagUs, echo03.ejscreenFlagUs) &&
        Objects.equals(this.epcraInspections5yr, echo03.epcraInspections5yr) &&
        Objects.equals(this.fac3yrComplianceHistory, echo03.fac3yrComplianceHistory) &&
        Objects.equals(this.facAccuracyMeters, echo03.facAccuracyMeters) &&
        Objects.equals(this.facActiveFlag, echo03.facActiveFlag) &&
        Objects.equals(this.facChesapeakeBayFlg, echo03.facChesapeakeBayFlg) &&
        Objects.equals(this.facCity, echo03.facCity) &&
        Objects.equals(this.facCollectionMethod, echo03.facCollectionMethod) &&
        Objects.equals(this.facComplianceStatus, echo03.facComplianceStatus) &&
        Objects.equals(this.facCounty, echo03.facCounty) &&
        Objects.equals(this.facDateLastFormalActEPA, echo03.facDateLastFormalActEPA) &&
        Objects.equals(this.facDateLastFormalActSt, echo03.facDateLastFormalActSt) &&
        Objects.equals(this.facDateLastFormalAction, echo03.facDateLastFormalAction) &&
        Objects.equals(this.facDateLastInformalActEPA, echo03.facDateLastInformalActEPA) &&
        Objects.equals(this.facDateLastInformalActSt, echo03.facDateLastInformalActSt) &&
        Objects.equals(this.facDateLastInformalAction, echo03.facDateLastInformalAction) &&
        Objects.equals(this.facDateLastInspection, echo03.facDateLastInspection) &&
        Objects.equals(this.facDateLastInspectionEPA, echo03.facDateLastInspectionEPA) &&
        Objects.equals(this.facDateLastInspectionState, echo03.facDateLastInspectionState) &&
        Objects.equals(this.facDateLastPenalty, echo03.facDateLastPenalty) &&
        Objects.equals(this.facDaysLastInspection, echo03.facDaysLastInspection) &&
        Objects.equals(this.facDerivedCb2010, echo03.facDerivedCb2010) &&
        Objects.equals(this.facDerivedCd113, echo03.facDerivedCd113) &&
        Objects.equals(this.facDerivedHuc, echo03.facDerivedHuc) &&
        Objects.equals(this.facDerivedRadWBDHu12, echo03.facDerivedRadWBDHu12) &&
        Objects.equals(this.facDerivedRadWBDHu12Name, echo03.facDerivedRadWBDHu12Name) &&
        Objects.equals(this.facDerivedRadWBDHu8, echo03.facDerivedRadWBDHu8) &&
        Objects.equals(this.facDerivedRadWBDHu8Name, echo03.facDerivedRadWBDHu8Name) &&
        Objects.equals(this.facDerivedStctyFIPS, echo03.facDerivedStctyFIPS) &&
        Objects.equals(this.facDerivedTRIbes, echo03.facDerivedTRIbes) &&
        Objects.equals(this.facDerivedWBD, echo03.facDerivedWBD) &&
        Objects.equals(this.facDerivedWBDHu12Name, echo03.facDerivedWBDHu12Name) &&
        Objects.equals(this.facDerivedWBDHu8, echo03.facDerivedWBDHu8) &&
        Objects.equals(this.facDerivedWBDHu8Name, echo03.facDerivedWBDHu8Name) &&
        Objects.equals(this.facDerivedZip, echo03.facDerivedZip) &&
        Objects.equals(this.facEPARegion, echo03.facEPARegion) &&
        Objects.equals(this.facFIPSCode, echo03.facFIPSCode) &&
        Objects.equals(this.facFederalAgency, echo03.facFederalAgency) &&
        Objects.equals(this.facFederalAgencyName, echo03.facFederalAgencyName) &&
        Objects.equals(this.facFederalFlg, echo03.facFederalFlg) &&
        Objects.equals(this.facFormalActionCount, echo03.facFormalActionCount) &&
        Objects.equals(this.facImpWaterFlg, echo03.facImpWaterFlg) &&
        Objects.equals(this.facIndianCntryFlg, echo03.facIndianCntryFlg) &&
        Objects.equals(this.facIndianSpatialFlg, echo03.facIndianSpatialFlg) &&
        Objects.equals(this.facInformalCount, echo03.facInformalCount) &&
        Objects.equals(this.facInspectionCount, echo03.facInspectionCount) &&
        Objects.equals(this.facLastPenaltyAmt, echo03.facLastPenaltyAmt) &&
        Objects.equals(this.facLat, echo03.facLat) &&
        Objects.equals(this.facLong, echo03.facLong) &&
        Objects.equals(this.facMajorFlag, echo03.facMajorFlag) &&
        Objects.equals(this.facMapFlg, echo03.facMapFlg) &&
        Objects.equals(this.facMapIcon, echo03.facMapIcon) &&
        Objects.equals(this.facMyrtkUniverse, echo03.facMyrtkUniverse) &&
        Objects.equals(this.facNAICSCodes, echo03.facNAICSCodes) &&
        Objects.equals(this.facNaaFlag, echo03.facNaaFlag) &&
        Objects.equals(this.facName, echo03.facName) &&
        Objects.equals(this.facPenaltyCount, echo03.facPenaltyCount) &&
        Objects.equals(this.facPercentMinority, echo03.facPercentMinority) &&
        Objects.equals(this.facPopDen, echo03.facPopDen) &&
        Objects.equals(this.facProgramsWithSNC, echo03.facProgramsWithSNC) &&
        Objects.equals(this.facQtrsWithNC, echo03.facQtrsWithNC) &&
        Objects.equals(this.facReferencePoint, echo03.facReferencePoint) &&
        Objects.equals(this.facSICCodes, echo03.facSICCodes) &&
        Objects.equals(this.facSNCFlg, echo03.facSNCFlg) &&
        Objects.equals(this.facState, echo03.facState) &&
        Objects.equals(this.facStdCountyName, echo03.facStdCountyName) &&
        Objects.equals(this.facStreet, echo03.facStreet) &&
        Objects.equals(this.facTotalPenalties, echo03.facTotalPenalties) &&
        Objects.equals(this.facUsMexBorderFlg, echo03.facUsMexBorderFlg) &&
        Objects.equals(this.facZip, echo03.facZip) &&
        Objects.equals(this.fecCaseIDs, echo03.fecCaseIDs) &&
        Objects.equals(this.fecLastCaseDate, echo03.fecLastCaseDate) &&
        Objects.equals(this.fecNumberOfCases, echo03.fecNumberOfCases) &&
        Objects.equals(this.fecTotalPenalties, echo03.fecTotalPenalties) &&
        Objects.equals(this.fifraInspections5yr, echo03.fifraInspections5yr) &&
        Objects.equals(this.ghGCO2Releases, echo03.ghGCO2Releases) &&
        Objects.equals(this.ghGFlag, echo03.ghGFlag) &&
        Objects.equals(this.ghGIDs, echo03.ghGIDs) &&
        Objects.equals(this.hasPollRpt, echo03.hasPollRpt) &&
        Objects.equals(this.infea5yrFlag, echo03.infea5yrFlag) &&
        Objects.equals(this.insp5yrFlag, echo03.insp5yrFlag) &&
        Objects.equals(this.lower48, echo03.lower48) &&
        Objects.equals(this.maxPctileUs, echo03.maxPctileUs) &&
        Objects.equals(this.maxScore, echo03.maxScore) &&
        Objects.equals(this.NC, echo03.NC) &&
        Objects.equals(this.npDESFlag, echo03.npDESFlag) &&
        Objects.equals(this.npDESIDs, echo03.npDESIDs) &&
        Objects.equals(this.naaCategories, echo03.naaCategories) &&
        Objects.equals(this.naaPollutants, echo03.naaPollutants) &&
        Objects.equals(this.over80CountUs, echo03.over80CountUs) &&
        Objects.equals(this.pctileCancerUs, echo03.pctileCancerUs) &&
        Objects.equals(this.pctileDpmUs, echo03.pctileDpmUs) &&
        Objects.equals(this.pctileO3Us, echo03.pctileO3Us) &&
        Objects.equals(this.pctilePctpre1960Us, echo03.pctilePctpre1960Us) &&
        Objects.equals(this.pctilePmUs, echo03.pctilePmUs) &&
        Objects.equals(this.pctileProximityNPDESUs, echo03.pctileProximityNPDESUs) &&
        Objects.equals(this.pctileProximityNplUs, echo03.pctileProximityNplUs) &&
        Objects.equals(this.pctileProximityRmpUs, echo03.pctileProximityRmpUs) &&
        Objects.equals(this.pctileProximityTsdfUs, echo03.pctileProximityTsdfUs) &&
        Objects.equals(this.pctileRespUs, echo03.pctileRespUs) &&
        Objects.equals(this.pctileTrafficScoreUs, echo03.pctileTrafficScoreUs) &&
        Objects.equals(this.rcRA3yrComplQtrsHistory, echo03.rcRA3yrComplQtrsHistory) &&
        Objects.equals(this.rcRAComplianceStatus, echo03.rcRAComplianceStatus) &&
        Objects.equals(this.rcRADateLastFormalAction, echo03.rcRADateLastFormalAction) &&
        Objects.equals(this.rcRADaysLastEvaluation, echo03.rcRADaysLastEvaluation) &&
        Objects.equals(this.rcRAFlag, echo03.rcRAFlag) &&
        Objects.equals(this.rcRAFormalActionCount, echo03.rcRAFormalActionCount) &&
        Objects.equals(this.rcRAIDs, echo03.rcRAIDs) &&
        Objects.equals(this.rcRAInformalCount, echo03.rcRAInformalCount) &&
        Objects.equals(this.rcRAInspectionCount, echo03.rcRAInspectionCount) &&
        Objects.equals(this.rcRALastPenaltyAmt, echo03.rcRALastPenaltyAmt) &&
        Objects.equals(this.rcRALastPenaltyDate, echo03.rcRALastPenaltyDate) &&
        Objects.equals(this.RCRANAICS, echo03.RCRANAICS) &&
        Objects.equals(this.rcRAPenalties, echo03.rcRAPenalties) &&
        Objects.equals(this.rcRAPermitTypes, echo03.rcRAPermitTypes) &&
        Objects.equals(this.rcRAQtrsWithNC, echo03.rcRAQtrsWithNC) &&
        Objects.equals(this.rcRASNCFlag, echo03.rcRASNCFlag) &&
        Objects.equals(this.registryID, echo03.registryID) &&
        Objects.equals(this.rmpIDs, echo03.rmpIDs) &&
        Objects.equals(this.sdWA3yrComplQtrsHistory, echo03.sdWA3yrComplQtrsHistory) &&
        Objects.equals(this.sdWAComplianceStatus, echo03.sdWAComplianceStatus) &&
        Objects.equals(this.sdWAFormalActionCount, echo03.sdWAFormalActionCount) &&
        Objects.equals(this.sdWAIDs, echo03.sdWAIDs) &&
        Objects.equals(this.sdWAInformalCount, echo03.sdWAInformalCount) &&
        Objects.equals(this.sdWAInspections5yr, echo03.sdWAInspections5yr) &&
        Objects.equals(this.sdWAQtrsWithNC, echo03.sdWAQtrsWithNC) &&
        Objects.equals(this.sdWASNCFlag, echo03.sdWASNCFlag) &&
        Objects.equals(this.sdWASystemTypes, echo03.sdWASystemTypes) &&
        Objects.equals(this.sdWISFlag, echo03.sdWISFlag) &&
        Objects.equals(this.score, echo03.score) &&
        Objects.equals(this.semsFlag, echo03.semsFlag) &&
        Objects.equals(this.semsIDs, echo03.semsIDs) &&
        Objects.equals(this.sourceID, echo03.sourceID) &&
        Objects.equals(this.trIFlag, echo03.trIFlag) &&
        Objects.equals(this.trIIDs, echo03.trIIDs) &&
        Objects.equals(this.trIOffSiteTransfers, echo03.trIOffSiteTransfers) &&
        Objects.equals(this.trIOnSiteReleases, echo03.trIOnSiteReleases) &&
        Objects.equals(this.trIReleasesTransfers, echo03.trIReleasesTransfers) &&
        Objects.equals(this.trIReporter, echo03.trIReporter) &&
        Objects.equals(this.trIReporterInPast, echo03.trIReporterInPast) &&
        Objects.equals(this.trIbalFlag, echo03.trIbalFlag) &&
        Objects.equals(this.tscaFlag, echo03.tscaFlag) &&
        Objects.equals(this.tscaIDs, echo03.tscaIDs) &&
        Objects.equals(this.tscaInspections5yr, echo03.tscaInspections5yr) &&
        Objects.equals(this.violFlag, echo03.violFlag) &&
        Objects.equals(this.webDocs, echo03.webDocs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aiRFlag, aiRIDs, activeLower48, biosolidsFlag, caA3yrComplQtrsHistory, caAComplianceStatus, caADateLastFormalAction, caADaysLastEvaluation, caAEvaluationCount, caAFormalActionCount, caAHpvFlag, caAInformalCount, caALastPenaltyAmt, caALastPenaltyDate, CAANAICS, caAPenalties, caAPermitTypes, caAQtrsWithNC, caASICs, cwA13qtrsComplHistory, cwA13qtrsEfflntExceedances, cwA3YrQncrCodes, cwAComplianceStatus, cwAComplianceTracking, cwADateLastFormalAction, cwADaysLastInspection, cwAFormalActionCount, cwAInformalCount, cwAInspectionCount, cwALastPenaltyAmt, cwALastPenaltyDate, CWANAICS, cwAPenalties, cwAPermitTypes, cwAQtrsWithNC, cwASICs, cwASNCFlag, camdIDs, censusBlockGroup, currSvFlag, currVioFlag, dfrUrl, ea5yrFlag, effChartsFlag, eisFlag, eisIDs, ejscreenFlag, ejscreenFlagUs, epcraInspections5yr, fac3yrComplianceHistory, facAccuracyMeters, facActiveFlag, facChesapeakeBayFlg, facCity, facCollectionMethod, facComplianceStatus, facCounty, facDateLastFormalActEPA, facDateLastFormalActSt, facDateLastFormalAction, facDateLastInformalActEPA, facDateLastInformalActSt, facDateLastInformalAction, facDateLastInspection, facDateLastInspectionEPA, facDateLastInspectionState, facDateLastPenalty, facDaysLastInspection, facDerivedCb2010, facDerivedCd113, facDerivedHuc, facDerivedRadWBDHu12, facDerivedRadWBDHu12Name, facDerivedRadWBDHu8, facDerivedRadWBDHu8Name, facDerivedStctyFIPS, facDerivedTRIbes, facDerivedWBD, facDerivedWBDHu12Name, facDerivedWBDHu8, facDerivedWBDHu8Name, facDerivedZip, facEPARegion, facFIPSCode, facFederalAgency, facFederalAgencyName, facFederalFlg, facFormalActionCount, facImpWaterFlg, facIndianCntryFlg, facIndianSpatialFlg, facInformalCount, facInspectionCount, facLastPenaltyAmt, facLat, facLong, facMajorFlag, facMapFlg, facMapIcon, facMyrtkUniverse, facNAICSCodes, facNaaFlag, facName, facPenaltyCount, facPercentMinority, facPopDen, facProgramsWithSNC, facQtrsWithNC, facReferencePoint, facSICCodes, facSNCFlg, facState, facStdCountyName, facStreet, facTotalPenalties, facUsMexBorderFlg, facZip, fecCaseIDs, fecLastCaseDate, fecNumberOfCases, fecTotalPenalties, fifraInspections5yr, ghGCO2Releases, ghGFlag, ghGIDs, hasPollRpt, infea5yrFlag, insp5yrFlag, lower48, maxPctileUs, maxScore, NC, npDESFlag, npDESIDs, naaCategories, naaPollutants, over80CountUs, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rcRA3yrComplQtrsHistory, rcRAComplianceStatus, rcRADateLastFormalAction, rcRADaysLastEvaluation, rcRAFlag, rcRAFormalActionCount, rcRAIDs, rcRAInformalCount, rcRAInspectionCount, rcRALastPenaltyAmt, rcRALastPenaltyDate, RCRANAICS, rcRAPenalties, rcRAPermitTypes, rcRAQtrsWithNC, rcRASNCFlag, registryID, rmpIDs, sdWA3yrComplQtrsHistory, sdWAComplianceStatus, sdWAFormalActionCount, sdWAIDs, sdWAInformalCount, sdWAInspections5yr, sdWAQtrsWithNC, sdWASNCFlag, sdWASystemTypes, sdWISFlag, score, semsFlag, semsIDs, sourceID, trIFlag, trIIDs, trIOffSiteTransfers, trIOnSiteReleases, trIReleasesTransfers, trIReporter, trIReporterInPast, trIbalFlag, tscaFlag, tscaIDs, tscaInspections5yr, violFlag, webDocs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Echo03 {\n");
    sb.append("    aiRFlag: ").append(toIndentedString(aiRFlag)).append("\n");
    sb.append("    aiRIDs: ").append(toIndentedString(aiRIDs)).append("\n");
    sb.append("    activeLower48: ").append(toIndentedString(activeLower48)).append("\n");
    sb.append("    biosolidsFlag: ").append(toIndentedString(biosolidsFlag)).append("\n");
    sb.append("    caA3yrComplQtrsHistory: ").append(toIndentedString(caA3yrComplQtrsHistory)).append("\n");
    sb.append("    caAComplianceStatus: ").append(toIndentedString(caAComplianceStatus)).append("\n");
    sb.append("    caADateLastFormalAction: ").append(toIndentedString(caADateLastFormalAction)).append("\n");
    sb.append("    caADaysLastEvaluation: ").append(toIndentedString(caADaysLastEvaluation)).append("\n");
    sb.append("    caAEvaluationCount: ").append(toIndentedString(caAEvaluationCount)).append("\n");
    sb.append("    caAFormalActionCount: ").append(toIndentedString(caAFormalActionCount)).append("\n");
    sb.append("    caAHpvFlag: ").append(toIndentedString(caAHpvFlag)).append("\n");
    sb.append("    caAInformalCount: ").append(toIndentedString(caAInformalCount)).append("\n");
    sb.append("    caALastPenaltyAmt: ").append(toIndentedString(caALastPenaltyAmt)).append("\n");
    sb.append("    caALastPenaltyDate: ").append(toIndentedString(caALastPenaltyDate)).append("\n");
    sb.append("    CAANAICS: ").append(toIndentedString(CAANAICS)).append("\n");
    sb.append("    caAPenalties: ").append(toIndentedString(caAPenalties)).append("\n");
    sb.append("    caAPermitTypes: ").append(toIndentedString(caAPermitTypes)).append("\n");
    sb.append("    caAQtrsWithNC: ").append(toIndentedString(caAQtrsWithNC)).append("\n");
    sb.append("    caASICs: ").append(toIndentedString(caASICs)).append("\n");
    sb.append("    cwA13qtrsComplHistory: ").append(toIndentedString(cwA13qtrsComplHistory)).append("\n");
    sb.append("    cwA13qtrsEfflntExceedances: ").append(toIndentedString(cwA13qtrsEfflntExceedances)).append("\n");
    sb.append("    cwA3YrQncrCodes: ").append(toIndentedString(cwA3YrQncrCodes)).append("\n");
    sb.append("    cwAComplianceStatus: ").append(toIndentedString(cwAComplianceStatus)).append("\n");
    sb.append("    cwAComplianceTracking: ").append(toIndentedString(cwAComplianceTracking)).append("\n");
    sb.append("    cwADateLastFormalAction: ").append(toIndentedString(cwADateLastFormalAction)).append("\n");
    sb.append("    cwADaysLastInspection: ").append(toIndentedString(cwADaysLastInspection)).append("\n");
    sb.append("    cwAFormalActionCount: ").append(toIndentedString(cwAFormalActionCount)).append("\n");
    sb.append("    cwAInformalCount: ").append(toIndentedString(cwAInformalCount)).append("\n");
    sb.append("    cwAInspectionCount: ").append(toIndentedString(cwAInspectionCount)).append("\n");
    sb.append("    cwALastPenaltyAmt: ").append(toIndentedString(cwALastPenaltyAmt)).append("\n");
    sb.append("    cwALastPenaltyDate: ").append(toIndentedString(cwALastPenaltyDate)).append("\n");
    sb.append("    CWANAICS: ").append(toIndentedString(CWANAICS)).append("\n");
    sb.append("    cwAPenalties: ").append(toIndentedString(cwAPenalties)).append("\n");
    sb.append("    cwAPermitTypes: ").append(toIndentedString(cwAPermitTypes)).append("\n");
    sb.append("    cwAQtrsWithNC: ").append(toIndentedString(cwAQtrsWithNC)).append("\n");
    sb.append("    cwASICs: ").append(toIndentedString(cwASICs)).append("\n");
    sb.append("    cwASNCFlag: ").append(toIndentedString(cwASNCFlag)).append("\n");
    sb.append("    camdIDs: ").append(toIndentedString(camdIDs)).append("\n");
    sb.append("    censusBlockGroup: ").append(toIndentedString(censusBlockGroup)).append("\n");
    sb.append("    currSvFlag: ").append(toIndentedString(currSvFlag)).append("\n");
    sb.append("    currVioFlag: ").append(toIndentedString(currVioFlag)).append("\n");
    sb.append("    dfrUrl: ").append(toIndentedString(dfrUrl)).append("\n");
    sb.append("    ea5yrFlag: ").append(toIndentedString(ea5yrFlag)).append("\n");
    sb.append("    effChartsFlag: ").append(toIndentedString(effChartsFlag)).append("\n");
    sb.append("    eisFlag: ").append(toIndentedString(eisFlag)).append("\n");
    sb.append("    eisIDs: ").append(toIndentedString(eisIDs)).append("\n");
    sb.append("    ejscreenFlag: ").append(toIndentedString(ejscreenFlag)).append("\n");
    sb.append("    ejscreenFlagUs: ").append(toIndentedString(ejscreenFlagUs)).append("\n");
    sb.append("    epcraInspections5yr: ").append(toIndentedString(epcraInspections5yr)).append("\n");
    sb.append("    fac3yrComplianceHistory: ").append(toIndentedString(fac3yrComplianceHistory)).append("\n");
    sb.append("    facAccuracyMeters: ").append(toIndentedString(facAccuracyMeters)).append("\n");
    sb.append("    facActiveFlag: ").append(toIndentedString(facActiveFlag)).append("\n");
    sb.append("    facChesapeakeBayFlg: ").append(toIndentedString(facChesapeakeBayFlg)).append("\n");
    sb.append("    facCity: ").append(toIndentedString(facCity)).append("\n");
    sb.append("    facCollectionMethod: ").append(toIndentedString(facCollectionMethod)).append("\n");
    sb.append("    facComplianceStatus: ").append(toIndentedString(facComplianceStatus)).append("\n");
    sb.append("    facCounty: ").append(toIndentedString(facCounty)).append("\n");
    sb.append("    facDateLastFormalActEPA: ").append(toIndentedString(facDateLastFormalActEPA)).append("\n");
    sb.append("    facDateLastFormalActSt: ").append(toIndentedString(facDateLastFormalActSt)).append("\n");
    sb.append("    facDateLastFormalAction: ").append(toIndentedString(facDateLastFormalAction)).append("\n");
    sb.append("    facDateLastInformalActEPA: ").append(toIndentedString(facDateLastInformalActEPA)).append("\n");
    sb.append("    facDateLastInformalActSt: ").append(toIndentedString(facDateLastInformalActSt)).append("\n");
    sb.append("    facDateLastInformalAction: ").append(toIndentedString(facDateLastInformalAction)).append("\n");
    sb.append("    facDateLastInspection: ").append(toIndentedString(facDateLastInspection)).append("\n");
    sb.append("    facDateLastInspectionEPA: ").append(toIndentedString(facDateLastInspectionEPA)).append("\n");
    sb.append("    facDateLastInspectionState: ").append(toIndentedString(facDateLastInspectionState)).append("\n");
    sb.append("    facDateLastPenalty: ").append(toIndentedString(facDateLastPenalty)).append("\n");
    sb.append("    facDaysLastInspection: ").append(toIndentedString(facDaysLastInspection)).append("\n");
    sb.append("    facDerivedCb2010: ").append(toIndentedString(facDerivedCb2010)).append("\n");
    sb.append("    facDerivedCd113: ").append(toIndentedString(facDerivedCd113)).append("\n");
    sb.append("    facDerivedHuc: ").append(toIndentedString(facDerivedHuc)).append("\n");
    sb.append("    facDerivedRadWBDHu12: ").append(toIndentedString(facDerivedRadWBDHu12)).append("\n");
    sb.append("    facDerivedRadWBDHu12Name: ").append(toIndentedString(facDerivedRadWBDHu12Name)).append("\n");
    sb.append("    facDerivedRadWBDHu8: ").append(toIndentedString(facDerivedRadWBDHu8)).append("\n");
    sb.append("    facDerivedRadWBDHu8Name: ").append(toIndentedString(facDerivedRadWBDHu8Name)).append("\n");
    sb.append("    facDerivedStctyFIPS: ").append(toIndentedString(facDerivedStctyFIPS)).append("\n");
    sb.append("    facDerivedTRIbes: ").append(toIndentedString(facDerivedTRIbes)).append("\n");
    sb.append("    facDerivedWBD: ").append(toIndentedString(facDerivedWBD)).append("\n");
    sb.append("    facDerivedWBDHu12Name: ").append(toIndentedString(facDerivedWBDHu12Name)).append("\n");
    sb.append("    facDerivedWBDHu8: ").append(toIndentedString(facDerivedWBDHu8)).append("\n");
    sb.append("    facDerivedWBDHu8Name: ").append(toIndentedString(facDerivedWBDHu8Name)).append("\n");
    sb.append("    facDerivedZip: ").append(toIndentedString(facDerivedZip)).append("\n");
    sb.append("    facEPARegion: ").append(toIndentedString(facEPARegion)).append("\n");
    sb.append("    facFIPSCode: ").append(toIndentedString(facFIPSCode)).append("\n");
    sb.append("    facFederalAgency: ").append(toIndentedString(facFederalAgency)).append("\n");
    sb.append("    facFederalAgencyName: ").append(toIndentedString(facFederalAgencyName)).append("\n");
    sb.append("    facFederalFlg: ").append(toIndentedString(facFederalFlg)).append("\n");
    sb.append("    facFormalActionCount: ").append(toIndentedString(facFormalActionCount)).append("\n");
    sb.append("    facImpWaterFlg: ").append(toIndentedString(facImpWaterFlg)).append("\n");
    sb.append("    facIndianCntryFlg: ").append(toIndentedString(facIndianCntryFlg)).append("\n");
    sb.append("    facIndianSpatialFlg: ").append(toIndentedString(facIndianSpatialFlg)).append("\n");
    sb.append("    facInformalCount: ").append(toIndentedString(facInformalCount)).append("\n");
    sb.append("    facInspectionCount: ").append(toIndentedString(facInspectionCount)).append("\n");
    sb.append("    facLastPenaltyAmt: ").append(toIndentedString(facLastPenaltyAmt)).append("\n");
    sb.append("    facLat: ").append(toIndentedString(facLat)).append("\n");
    sb.append("    facLong: ").append(toIndentedString(facLong)).append("\n");
    sb.append("    facMajorFlag: ").append(toIndentedString(facMajorFlag)).append("\n");
    sb.append("    facMapFlg: ").append(toIndentedString(facMapFlg)).append("\n");
    sb.append("    facMapIcon: ").append(toIndentedString(facMapIcon)).append("\n");
    sb.append("    facMyrtkUniverse: ").append(toIndentedString(facMyrtkUniverse)).append("\n");
    sb.append("    facNAICSCodes: ").append(toIndentedString(facNAICSCodes)).append("\n");
    sb.append("    facNaaFlag: ").append(toIndentedString(facNaaFlag)).append("\n");
    sb.append("    facName: ").append(toIndentedString(facName)).append("\n");
    sb.append("    facPenaltyCount: ").append(toIndentedString(facPenaltyCount)).append("\n");
    sb.append("    facPercentMinority: ").append(toIndentedString(facPercentMinority)).append("\n");
    sb.append("    facPopDen: ").append(toIndentedString(facPopDen)).append("\n");
    sb.append("    facProgramsWithSNC: ").append(toIndentedString(facProgramsWithSNC)).append("\n");
    sb.append("    facQtrsWithNC: ").append(toIndentedString(facQtrsWithNC)).append("\n");
    sb.append("    facReferencePoint: ").append(toIndentedString(facReferencePoint)).append("\n");
    sb.append("    facSICCodes: ").append(toIndentedString(facSICCodes)).append("\n");
    sb.append("    facSNCFlg: ").append(toIndentedString(facSNCFlg)).append("\n");
    sb.append("    facState: ").append(toIndentedString(facState)).append("\n");
    sb.append("    facStdCountyName: ").append(toIndentedString(facStdCountyName)).append("\n");
    sb.append("    facStreet: ").append(toIndentedString(facStreet)).append("\n");
    sb.append("    facTotalPenalties: ").append(toIndentedString(facTotalPenalties)).append("\n");
    sb.append("    facUsMexBorderFlg: ").append(toIndentedString(facUsMexBorderFlg)).append("\n");
    sb.append("    facZip: ").append(toIndentedString(facZip)).append("\n");
    sb.append("    fecCaseIDs: ").append(toIndentedString(fecCaseIDs)).append("\n");
    sb.append("    fecLastCaseDate: ").append(toIndentedString(fecLastCaseDate)).append("\n");
    sb.append("    fecNumberOfCases: ").append(toIndentedString(fecNumberOfCases)).append("\n");
    sb.append("    fecTotalPenalties: ").append(toIndentedString(fecTotalPenalties)).append("\n");
    sb.append("    fifraInspections5yr: ").append(toIndentedString(fifraInspections5yr)).append("\n");
    sb.append("    ghGCO2Releases: ").append(toIndentedString(ghGCO2Releases)).append("\n");
    sb.append("    ghGFlag: ").append(toIndentedString(ghGFlag)).append("\n");
    sb.append("    ghGIDs: ").append(toIndentedString(ghGIDs)).append("\n");
    sb.append("    hasPollRpt: ").append(toIndentedString(hasPollRpt)).append("\n");
    sb.append("    infea5yrFlag: ").append(toIndentedString(infea5yrFlag)).append("\n");
    sb.append("    insp5yrFlag: ").append(toIndentedString(insp5yrFlag)).append("\n");
    sb.append("    lower48: ").append(toIndentedString(lower48)).append("\n");
    sb.append("    maxPctileUs: ").append(toIndentedString(maxPctileUs)).append("\n");
    sb.append("    maxScore: ").append(toIndentedString(maxScore)).append("\n");
    sb.append("    NC: ").append(toIndentedString(NC)).append("\n");
    sb.append("    npDESFlag: ").append(toIndentedString(npDESFlag)).append("\n");
    sb.append("    npDESIDs: ").append(toIndentedString(npDESIDs)).append("\n");
    sb.append("    naaCategories: ").append(toIndentedString(naaCategories)).append("\n");
    sb.append("    naaPollutants: ").append(toIndentedString(naaPollutants)).append("\n");
    sb.append("    over80CountUs: ").append(toIndentedString(over80CountUs)).append("\n");
    sb.append("    pctileCancerUs: ").append(toIndentedString(pctileCancerUs)).append("\n");
    sb.append("    pctileDpmUs: ").append(toIndentedString(pctileDpmUs)).append("\n");
    sb.append("    pctileO3Us: ").append(toIndentedString(pctileO3Us)).append("\n");
    sb.append("    pctilePctpre1960Us: ").append(toIndentedString(pctilePctpre1960Us)).append("\n");
    sb.append("    pctilePmUs: ").append(toIndentedString(pctilePmUs)).append("\n");
    sb.append("    pctileProximityNPDESUs: ").append(toIndentedString(pctileProximityNPDESUs)).append("\n");
    sb.append("    pctileProximityNplUs: ").append(toIndentedString(pctileProximityNplUs)).append("\n");
    sb.append("    pctileProximityRmpUs: ").append(toIndentedString(pctileProximityRmpUs)).append("\n");
    sb.append("    pctileProximityTsdfUs: ").append(toIndentedString(pctileProximityTsdfUs)).append("\n");
    sb.append("    pctileRespUs: ").append(toIndentedString(pctileRespUs)).append("\n");
    sb.append("    pctileTrafficScoreUs: ").append(toIndentedString(pctileTrafficScoreUs)).append("\n");
    sb.append("    rcRA3yrComplQtrsHistory: ").append(toIndentedString(rcRA3yrComplQtrsHistory)).append("\n");
    sb.append("    rcRAComplianceStatus: ").append(toIndentedString(rcRAComplianceStatus)).append("\n");
    sb.append("    rcRADateLastFormalAction: ").append(toIndentedString(rcRADateLastFormalAction)).append("\n");
    sb.append("    rcRADaysLastEvaluation: ").append(toIndentedString(rcRADaysLastEvaluation)).append("\n");
    sb.append("    rcRAFlag: ").append(toIndentedString(rcRAFlag)).append("\n");
    sb.append("    rcRAFormalActionCount: ").append(toIndentedString(rcRAFormalActionCount)).append("\n");
    sb.append("    rcRAIDs: ").append(toIndentedString(rcRAIDs)).append("\n");
    sb.append("    rcRAInformalCount: ").append(toIndentedString(rcRAInformalCount)).append("\n");
    sb.append("    rcRAInspectionCount: ").append(toIndentedString(rcRAInspectionCount)).append("\n");
    sb.append("    rcRALastPenaltyAmt: ").append(toIndentedString(rcRALastPenaltyAmt)).append("\n");
    sb.append("    rcRALastPenaltyDate: ").append(toIndentedString(rcRALastPenaltyDate)).append("\n");
    sb.append("    RCRANAICS: ").append(toIndentedString(RCRANAICS)).append("\n");
    sb.append("    rcRAPenalties: ").append(toIndentedString(rcRAPenalties)).append("\n");
    sb.append("    rcRAPermitTypes: ").append(toIndentedString(rcRAPermitTypes)).append("\n");
    sb.append("    rcRAQtrsWithNC: ").append(toIndentedString(rcRAQtrsWithNC)).append("\n");
    sb.append("    rcRASNCFlag: ").append(toIndentedString(rcRASNCFlag)).append("\n");
    sb.append("    registryID: ").append(toIndentedString(registryID)).append("\n");
    sb.append("    rmpIDs: ").append(toIndentedString(rmpIDs)).append("\n");
    sb.append("    sdWA3yrComplQtrsHistory: ").append(toIndentedString(sdWA3yrComplQtrsHistory)).append("\n");
    sb.append("    sdWAComplianceStatus: ").append(toIndentedString(sdWAComplianceStatus)).append("\n");
    sb.append("    sdWAFormalActionCount: ").append(toIndentedString(sdWAFormalActionCount)).append("\n");
    sb.append("    sdWAIDs: ").append(toIndentedString(sdWAIDs)).append("\n");
    sb.append("    sdWAInformalCount: ").append(toIndentedString(sdWAInformalCount)).append("\n");
    sb.append("    sdWAInspections5yr: ").append(toIndentedString(sdWAInspections5yr)).append("\n");
    sb.append("    sdWAQtrsWithNC: ").append(toIndentedString(sdWAQtrsWithNC)).append("\n");
    sb.append("    sdWASNCFlag: ").append(toIndentedString(sdWASNCFlag)).append("\n");
    sb.append("    sdWASystemTypes: ").append(toIndentedString(sdWASystemTypes)).append("\n");
    sb.append("    sdWISFlag: ").append(toIndentedString(sdWISFlag)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    semsFlag: ").append(toIndentedString(semsFlag)).append("\n");
    sb.append("    semsIDs: ").append(toIndentedString(semsIDs)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    trIFlag: ").append(toIndentedString(trIFlag)).append("\n");
    sb.append("    trIIDs: ").append(toIndentedString(trIIDs)).append("\n");
    sb.append("    trIOffSiteTransfers: ").append(toIndentedString(trIOffSiteTransfers)).append("\n");
    sb.append("    trIOnSiteReleases: ").append(toIndentedString(trIOnSiteReleases)).append("\n");
    sb.append("    trIReleasesTransfers: ").append(toIndentedString(trIReleasesTransfers)).append("\n");
    sb.append("    trIReporter: ").append(toIndentedString(trIReporter)).append("\n");
    sb.append("    trIReporterInPast: ").append(toIndentedString(trIReporterInPast)).append("\n");
    sb.append("    trIbalFlag: ").append(toIndentedString(trIbalFlag)).append("\n");
    sb.append("    tscaFlag: ").append(toIndentedString(tscaFlag)).append("\n");
    sb.append("    tscaIDs: ").append(toIndentedString(tscaIDs)).append("\n");
    sb.append("    tscaInspections5yr: ").append(toIndentedString(tscaInspections5yr)).append("\n");
    sb.append("    violFlag: ").append(toIndentedString(violFlag)).append("\n");
    sb.append("    webDocs: ").append(toIndentedString(webDocs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AIRFlag");
    openapiFields.add("AIRIDs");
    openapiFields.add("ActiveLower48");
    openapiFields.add("BiosolidsFlag");
    openapiFields.add("CAA3yrComplQtrsHistory");
    openapiFields.add("CAAComplianceStatus");
    openapiFields.add("CAADateLastFormalAction");
    openapiFields.add("CAADaysLastEvaluation");
    openapiFields.add("CAAEvaluationCount");
    openapiFields.add("CAAFormalActionCount");
    openapiFields.add("CAAHpvFlag");
    openapiFields.add("CAAInformalCount");
    openapiFields.add("CAALastPenaltyAmt");
    openapiFields.add("CAALastPenaltyDate");
    openapiFields.add("CAANAICS");
    openapiFields.add("CAAPenalties");
    openapiFields.add("CAAPermitTypes");
    openapiFields.add("CAAQtrsWithNC");
    openapiFields.add("CAASICs");
    openapiFields.add("CWA13qtrsComplHistory");
    openapiFields.add("CWA13qtrsEfflntExceedances");
    openapiFields.add("CWA3YrQncrCodes");
    openapiFields.add("CWAComplianceStatus");
    openapiFields.add("CWAComplianceTracking");
    openapiFields.add("CWADateLastFormalAction");
    openapiFields.add("CWADaysLastInspection");
    openapiFields.add("CWAFormalActionCount");
    openapiFields.add("CWAInformalCount");
    openapiFields.add("CWAInspectionCount");
    openapiFields.add("CWALastPenaltyAmt");
    openapiFields.add("CWALastPenaltyDate");
    openapiFields.add("CWANAICS");
    openapiFields.add("CWAPenalties");
    openapiFields.add("CWAPermitTypes");
    openapiFields.add("CWAQtrsWithNC");
    openapiFields.add("CWASICs");
    openapiFields.add("CWASNCFlag");
    openapiFields.add("CamdIDs");
    openapiFields.add("CensusBlockGroup");
    openapiFields.add("CurrSvFlag");
    openapiFields.add("CurrVioFlag");
    openapiFields.add("DfrUrl");
    openapiFields.add("Ea5yrFlag");
    openapiFields.add("EffChartsFlag");
    openapiFields.add("EisFlag");
    openapiFields.add("EisIDs");
    openapiFields.add("EjscreenFlag");
    openapiFields.add("EjscreenFlagUs");
    openapiFields.add("EpcraInspections5yr");
    openapiFields.add("Fac3yrComplianceHistory");
    openapiFields.add("FacAccuracyMeters");
    openapiFields.add("FacActiveFlag");
    openapiFields.add("FacChesapeakeBayFlg");
    openapiFields.add("FacCity");
    openapiFields.add("FacCollectionMethod");
    openapiFields.add("FacComplianceStatus");
    openapiFields.add("FacCounty");
    openapiFields.add("FacDateLastFormalActEPA");
    openapiFields.add("FacDateLastFormalActSt");
    openapiFields.add("FacDateLastFormalAction");
    openapiFields.add("FacDateLastInformalActEPA");
    openapiFields.add("FacDateLastInformalActSt");
    openapiFields.add("FacDateLastInformalAction");
    openapiFields.add("FacDateLastInspection");
    openapiFields.add("FacDateLastInspectionEPA");
    openapiFields.add("FacDateLastInspectionState");
    openapiFields.add("FacDateLastPenalty");
    openapiFields.add("FacDaysLastInspection");
    openapiFields.add("FacDerivedCb2010");
    openapiFields.add("FacDerivedCd113");
    openapiFields.add("FacDerivedHuc");
    openapiFields.add("FacDerivedRadWBDHu12");
    openapiFields.add("FacDerivedRadWBDHu12Name");
    openapiFields.add("FacDerivedRadWBDHu8");
    openapiFields.add("FacDerivedRadWBDHu8Name");
    openapiFields.add("FacDerivedStctyFIPS");
    openapiFields.add("FacDerivedTRIbes");
    openapiFields.add("FacDerivedWBD");
    openapiFields.add("FacDerivedWBDHu12Name");
    openapiFields.add("FacDerivedWBDHu8");
    openapiFields.add("FacDerivedWBDHu8Name");
    openapiFields.add("FacDerivedZip");
    openapiFields.add("FacEPARegion");
    openapiFields.add("FacFIPSCode");
    openapiFields.add("FacFederalAgency");
    openapiFields.add("FacFederalAgencyName");
    openapiFields.add("FacFederalFlg");
    openapiFields.add("FacFormalActionCount");
    openapiFields.add("FacImpWaterFlg");
    openapiFields.add("FacIndianCntryFlg");
    openapiFields.add("FacIndianSpatialFlg");
    openapiFields.add("FacInformalCount");
    openapiFields.add("FacInspectionCount");
    openapiFields.add("FacLastPenaltyAmt");
    openapiFields.add("FacLat");
    openapiFields.add("FacLong");
    openapiFields.add("FacMajorFlag");
    openapiFields.add("FacMapFlg");
    openapiFields.add("FacMapIcon");
    openapiFields.add("FacMyrtkUniverse");
    openapiFields.add("FacNAICSCodes");
    openapiFields.add("FacNaaFlag");
    openapiFields.add("FacName");
    openapiFields.add("FacPenaltyCount");
    openapiFields.add("FacPercentMinority");
    openapiFields.add("FacPopDen");
    openapiFields.add("FacProgramsWithSNC");
    openapiFields.add("FacQtrsWithNC");
    openapiFields.add("FacReferencePoint");
    openapiFields.add("FacSICCodes");
    openapiFields.add("FacSNCFlg");
    openapiFields.add("FacState");
    openapiFields.add("FacStdCountyName");
    openapiFields.add("FacStreet");
    openapiFields.add("FacTotalPenalties");
    openapiFields.add("FacUsMexBorderFlg");
    openapiFields.add("FacZip");
    openapiFields.add("FecCaseIDs");
    openapiFields.add("FecLastCaseDate");
    openapiFields.add("FecNumberOfCases");
    openapiFields.add("FecTotalPenalties");
    openapiFields.add("FifraInspections5yr");
    openapiFields.add("GHGCO2Releases");
    openapiFields.add("GHGFlag");
    openapiFields.add("GHGIDs");
    openapiFields.add("HasPollRpt");
    openapiFields.add("Infea5yrFlag");
    openapiFields.add("Insp5yrFlag");
    openapiFields.add("Lower48");
    openapiFields.add("MaxPctileUs");
    openapiFields.add("MaxScore");
    openapiFields.add("NC");
    openapiFields.add("NPDESFlag");
    openapiFields.add("NPDESIDs");
    openapiFields.add("NaaCategories");
    openapiFields.add("NaaPollutants");
    openapiFields.add("Over80CountUs");
    openapiFields.add("PctileCancerUs");
    openapiFields.add("PctileDpmUs");
    openapiFields.add("PctileO3Us");
    openapiFields.add("PctilePctpre1960Us");
    openapiFields.add("PctilePmUs");
    openapiFields.add("PctileProximityNPDESUs");
    openapiFields.add("PctileProximityNplUs");
    openapiFields.add("PctileProximityRmpUs");
    openapiFields.add("PctileProximityTsdfUs");
    openapiFields.add("PctileRespUs");
    openapiFields.add("PctileTrafficScoreUs");
    openapiFields.add("RCRA3yrComplQtrsHistory");
    openapiFields.add("RCRAComplianceStatus");
    openapiFields.add("RCRADateLastFormalAction");
    openapiFields.add("RCRADaysLastEvaluation");
    openapiFields.add("RCRAFlag");
    openapiFields.add("RCRAFormalActionCount");
    openapiFields.add("RCRAIDs");
    openapiFields.add("RCRAInformalCount");
    openapiFields.add("RCRAInspectionCount");
    openapiFields.add("RCRALastPenaltyAmt");
    openapiFields.add("RCRALastPenaltyDate");
    openapiFields.add("RCRANAICS");
    openapiFields.add("RCRAPenalties");
    openapiFields.add("RCRAPermitTypes");
    openapiFields.add("RCRAQtrsWithNC");
    openapiFields.add("RCRASNCFlag");
    openapiFields.add("RegistryID");
    openapiFields.add("RmpIDs");
    openapiFields.add("SDWA3yrComplQtrsHistory");
    openapiFields.add("SDWAComplianceStatus");
    openapiFields.add("SDWAFormalActionCount");
    openapiFields.add("SDWAIDs");
    openapiFields.add("SDWAInformalCount");
    openapiFields.add("SDWAInspections5yr");
    openapiFields.add("SDWAQtrsWithNC");
    openapiFields.add("SDWASNCFlag");
    openapiFields.add("SDWASystemTypes");
    openapiFields.add("SDWISFlag");
    openapiFields.add("Score");
    openapiFields.add("SemsFlag");
    openapiFields.add("SemsIDs");
    openapiFields.add("SourceID");
    openapiFields.add("TRIFlag");
    openapiFields.add("TRIIDs");
    openapiFields.add("TRIOffSiteTransfers");
    openapiFields.add("TRIOnSiteReleases");
    openapiFields.add("TRIReleasesTransfers");
    openapiFields.add("TRIReporter");
    openapiFields.add("TRIReporterInPast");
    openapiFields.add("TRIbalFlag");
    openapiFields.add("TscaFlag");
    openapiFields.add("TscaIDs");
    openapiFields.add("TscaInspections5yr");
    openapiFields.add("ViolFlag");
    openapiFields.add("WebDocs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AIRFlag");
    openapiRequiredFields.add("AIRIDs");
    openapiRequiredFields.add("ActiveLower48");
    openapiRequiredFields.add("BiosolidsFlag");
    openapiRequiredFields.add("CAA3yrComplQtrsHistory");
    openapiRequiredFields.add("CAAComplianceStatus");
    openapiRequiredFields.add("CAADateLastFormalAction");
    openapiRequiredFields.add("CAADaysLastEvaluation");
    openapiRequiredFields.add("CAAEvaluationCount");
    openapiRequiredFields.add("CAAFormalActionCount");
    openapiRequiredFields.add("CAAHpvFlag");
    openapiRequiredFields.add("CAAInformalCount");
    openapiRequiredFields.add("CAALastPenaltyAmt");
    openapiRequiredFields.add("CAALastPenaltyDate");
    openapiRequiredFields.add("CAANAICS");
    openapiRequiredFields.add("CAAPenalties");
    openapiRequiredFields.add("CAAPermitTypes");
    openapiRequiredFields.add("CAAQtrsWithNC");
    openapiRequiredFields.add("CAASICs");
    openapiRequiredFields.add("CWA13qtrsComplHistory");
    openapiRequiredFields.add("CWA13qtrsEfflntExceedances");
    openapiRequiredFields.add("CWA3YrQncrCodes");
    openapiRequiredFields.add("CWAComplianceStatus");
    openapiRequiredFields.add("CWAComplianceTracking");
    openapiRequiredFields.add("CWADateLastFormalAction");
    openapiRequiredFields.add("CWADaysLastInspection");
    openapiRequiredFields.add("CWAFormalActionCount");
    openapiRequiredFields.add("CWAInformalCount");
    openapiRequiredFields.add("CWAInspectionCount");
    openapiRequiredFields.add("CWALastPenaltyAmt");
    openapiRequiredFields.add("CWALastPenaltyDate");
    openapiRequiredFields.add("CWANAICS");
    openapiRequiredFields.add("CWAPenalties");
    openapiRequiredFields.add("CWAPermitTypes");
    openapiRequiredFields.add("CWAQtrsWithNC");
    openapiRequiredFields.add("CWASICs");
    openapiRequiredFields.add("CWASNCFlag");
    openapiRequiredFields.add("CamdIDs");
    openapiRequiredFields.add("CensusBlockGroup");
    openapiRequiredFields.add("CurrSvFlag");
    openapiRequiredFields.add("CurrVioFlag");
    openapiRequiredFields.add("DfrUrl");
    openapiRequiredFields.add("Ea5yrFlag");
    openapiRequiredFields.add("EffChartsFlag");
    openapiRequiredFields.add("EisFlag");
    openapiRequiredFields.add("EisIDs");
    openapiRequiredFields.add("EjscreenFlag");
    openapiRequiredFields.add("EjscreenFlagUs");
    openapiRequiredFields.add("EpcraInspections5yr");
    openapiRequiredFields.add("Fac3yrComplianceHistory");
    openapiRequiredFields.add("FacAccuracyMeters");
    openapiRequiredFields.add("FacActiveFlag");
    openapiRequiredFields.add("FacChesapeakeBayFlg");
    openapiRequiredFields.add("FacCity");
    openapiRequiredFields.add("FacCollectionMethod");
    openapiRequiredFields.add("FacComplianceStatus");
    openapiRequiredFields.add("FacCounty");
    openapiRequiredFields.add("FacDateLastFormalActEPA");
    openapiRequiredFields.add("FacDateLastFormalActSt");
    openapiRequiredFields.add("FacDateLastFormalAction");
    openapiRequiredFields.add("FacDateLastInformalActEPA");
    openapiRequiredFields.add("FacDateLastInformalActSt");
    openapiRequiredFields.add("FacDateLastInformalAction");
    openapiRequiredFields.add("FacDateLastInspection");
    openapiRequiredFields.add("FacDateLastInspectionEPA");
    openapiRequiredFields.add("FacDateLastInspectionState");
    openapiRequiredFields.add("FacDateLastPenalty");
    openapiRequiredFields.add("FacDaysLastInspection");
    openapiRequiredFields.add("FacDerivedCb2010");
    openapiRequiredFields.add("FacDerivedCd113");
    openapiRequiredFields.add("FacDerivedHuc");
    openapiRequiredFields.add("FacDerivedRadWBDHu12");
    openapiRequiredFields.add("FacDerivedRadWBDHu12Name");
    openapiRequiredFields.add("FacDerivedRadWBDHu8");
    openapiRequiredFields.add("FacDerivedRadWBDHu8Name");
    openapiRequiredFields.add("FacDerivedStctyFIPS");
    openapiRequiredFields.add("FacDerivedTRIbes");
    openapiRequiredFields.add("FacDerivedWBD");
    openapiRequiredFields.add("FacDerivedWBDHu12Name");
    openapiRequiredFields.add("FacDerivedWBDHu8");
    openapiRequiredFields.add("FacDerivedWBDHu8Name");
    openapiRequiredFields.add("FacDerivedZip");
    openapiRequiredFields.add("FacEPARegion");
    openapiRequiredFields.add("FacFIPSCode");
    openapiRequiredFields.add("FacFederalAgency");
    openapiRequiredFields.add("FacFederalAgencyName");
    openapiRequiredFields.add("FacFederalFlg");
    openapiRequiredFields.add("FacFormalActionCount");
    openapiRequiredFields.add("FacImpWaterFlg");
    openapiRequiredFields.add("FacIndianCntryFlg");
    openapiRequiredFields.add("FacIndianSpatialFlg");
    openapiRequiredFields.add("FacInformalCount");
    openapiRequiredFields.add("FacInspectionCount");
    openapiRequiredFields.add("FacLastPenaltyAmt");
    openapiRequiredFields.add("FacLat");
    openapiRequiredFields.add("FacLong");
    openapiRequiredFields.add("FacMajorFlag");
    openapiRequiredFields.add("FacMapFlg");
    openapiRequiredFields.add("FacMapIcon");
    openapiRequiredFields.add("FacMyrtkUniverse");
    openapiRequiredFields.add("FacNAICSCodes");
    openapiRequiredFields.add("FacNaaFlag");
    openapiRequiredFields.add("FacName");
    openapiRequiredFields.add("FacPenaltyCount");
    openapiRequiredFields.add("FacPercentMinority");
    openapiRequiredFields.add("FacPopDen");
    openapiRequiredFields.add("FacProgramsWithSNC");
    openapiRequiredFields.add("FacQtrsWithNC");
    openapiRequiredFields.add("FacReferencePoint");
    openapiRequiredFields.add("FacSICCodes");
    openapiRequiredFields.add("FacSNCFlg");
    openapiRequiredFields.add("FacState");
    openapiRequiredFields.add("FacStdCountyName");
    openapiRequiredFields.add("FacStreet");
    openapiRequiredFields.add("FacTotalPenalties");
    openapiRequiredFields.add("FacUsMexBorderFlg");
    openapiRequiredFields.add("FacZip");
    openapiRequiredFields.add("FecCaseIDs");
    openapiRequiredFields.add("FecLastCaseDate");
    openapiRequiredFields.add("FecNumberOfCases");
    openapiRequiredFields.add("FecTotalPenalties");
    openapiRequiredFields.add("FifraInspections5yr");
    openapiRequiredFields.add("GHGCO2Releases");
    openapiRequiredFields.add("GHGFlag");
    openapiRequiredFields.add("GHGIDs");
    openapiRequiredFields.add("HasPollRpt");
    openapiRequiredFields.add("Infea5yrFlag");
    openapiRequiredFields.add("Insp5yrFlag");
    openapiRequiredFields.add("Lower48");
    openapiRequiredFields.add("MaxPctileUs");
    openapiRequiredFields.add("MaxScore");
    openapiRequiredFields.add("NC");
    openapiRequiredFields.add("NPDESFlag");
    openapiRequiredFields.add("NPDESIDs");
    openapiRequiredFields.add("NaaCategories");
    openapiRequiredFields.add("NaaPollutants");
    openapiRequiredFields.add("Over80CountUs");
    openapiRequiredFields.add("PctileCancerUs");
    openapiRequiredFields.add("PctileDpmUs");
    openapiRequiredFields.add("PctileO3Us");
    openapiRequiredFields.add("PctilePctpre1960Us");
    openapiRequiredFields.add("PctilePmUs");
    openapiRequiredFields.add("PctileProximityNPDESUs");
    openapiRequiredFields.add("PctileProximityNplUs");
    openapiRequiredFields.add("PctileProximityRmpUs");
    openapiRequiredFields.add("PctileProximityTsdfUs");
    openapiRequiredFields.add("PctileRespUs");
    openapiRequiredFields.add("PctileTrafficScoreUs");
    openapiRequiredFields.add("RCRA3yrComplQtrsHistory");
    openapiRequiredFields.add("RCRAComplianceStatus");
    openapiRequiredFields.add("RCRADateLastFormalAction");
    openapiRequiredFields.add("RCRADaysLastEvaluation");
    openapiRequiredFields.add("RCRAFlag");
    openapiRequiredFields.add("RCRAFormalActionCount");
    openapiRequiredFields.add("RCRAIDs");
    openapiRequiredFields.add("RCRAInformalCount");
    openapiRequiredFields.add("RCRAInspectionCount");
    openapiRequiredFields.add("RCRALastPenaltyAmt");
    openapiRequiredFields.add("RCRALastPenaltyDate");
    openapiRequiredFields.add("RCRANAICS");
    openapiRequiredFields.add("RCRAPenalties");
    openapiRequiredFields.add("RCRAPermitTypes");
    openapiRequiredFields.add("RCRAQtrsWithNC");
    openapiRequiredFields.add("RCRASNCFlag");
    openapiRequiredFields.add("RegistryID");
    openapiRequiredFields.add("RmpIDs");
    openapiRequiredFields.add("SDWA3yrComplQtrsHistory");
    openapiRequiredFields.add("SDWAComplianceStatus");
    openapiRequiredFields.add("SDWAFormalActionCount");
    openapiRequiredFields.add("SDWAIDs");
    openapiRequiredFields.add("SDWAInformalCount");
    openapiRequiredFields.add("SDWAInspections5yr");
    openapiRequiredFields.add("SDWAQtrsWithNC");
    openapiRequiredFields.add("SDWASNCFlag");
    openapiRequiredFields.add("SDWASystemTypes");
    openapiRequiredFields.add("SDWISFlag");
    openapiRequiredFields.add("Score");
    openapiRequiredFields.add("SemsFlag");
    openapiRequiredFields.add("SemsIDs");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("TRIFlag");
    openapiRequiredFields.add("TRIIDs");
    openapiRequiredFields.add("TRIOffSiteTransfers");
    openapiRequiredFields.add("TRIOnSiteReleases");
    openapiRequiredFields.add("TRIReleasesTransfers");
    openapiRequiredFields.add("TRIReporter");
    openapiRequiredFields.add("TRIReporterInPast");
    openapiRequiredFields.add("TRIbalFlag");
    openapiRequiredFields.add("TscaFlag");
    openapiRequiredFields.add("TscaIDs");
    openapiRequiredFields.add("TscaInspections5yr");
    openapiRequiredFields.add("ViolFlag");
    openapiRequiredFields.add("WebDocs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Echo03
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Echo03.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Echo03 is not found in the empty JSON string", Echo03.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Echo03.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Echo03` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Echo03.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AIRFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRFlag").toString()));
      }
      if (!jsonObj.get("AIRIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRIDs").toString()));
      }
      if (!jsonObj.get("ActiveLower48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActiveLower48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActiveLower48").toString()));
      }
      if (!jsonObj.get("BiosolidsFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BiosolidsFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BiosolidsFlag").toString()));
      }
      if (!jsonObj.get("CAA3yrComplQtrsHistory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAA3yrComplQtrsHistory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAA3yrComplQtrsHistory").toString()));
      }
      if (!jsonObj.get("CAAComplianceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAAComplianceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAAComplianceStatus").toString()));
      }
      if (!jsonObj.get("CAADateLastFormalAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAADateLastFormalAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAADateLastFormalAction").toString()));
      }
      if (!jsonObj.get("CAADaysLastEvaluation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAADaysLastEvaluation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAADaysLastEvaluation").toString()));
      }
      if (!jsonObj.get("CAAEvaluationCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAAEvaluationCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAAEvaluationCount").toString()));
      }
      if (!jsonObj.get("CAAFormalActionCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAAFormalActionCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAAFormalActionCount").toString()));
      }
      if (!jsonObj.get("CAAHpvFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAAHpvFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAAHpvFlag").toString()));
      }
      if (!jsonObj.get("CAAInformalCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAAInformalCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAAInformalCount").toString()));
      }
      if (!jsonObj.get("CAALastPenaltyAmt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAALastPenaltyAmt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAALastPenaltyAmt").toString()));
      }
      if (!jsonObj.get("CAALastPenaltyDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAALastPenaltyDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAALastPenaltyDate").toString()));
      }
      if (!jsonObj.get("CAANAICS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAANAICS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAANAICS").toString()));
      }
      if (!jsonObj.get("CAAPenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAAPenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAAPenalties").toString()));
      }
      if (!jsonObj.get("CAAPermitTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAAPermitTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAAPermitTypes").toString()));
      }
      if (!jsonObj.get("CAAQtrsWithNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAAQtrsWithNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAAQtrsWithNC").toString()));
      }
      if (!jsonObj.get("CAASICs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAASICs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAASICs").toString()));
      }
      if (!jsonObj.get("CWA13qtrsComplHistory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWA13qtrsComplHistory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWA13qtrsComplHistory").toString()));
      }
      if (!jsonObj.get("CWA13qtrsEfflntExceedances").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWA13qtrsEfflntExceedances` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWA13qtrsEfflntExceedances").toString()));
      }
      if (!jsonObj.get("CWA3YrQncrCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWA3YrQncrCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWA3YrQncrCodes").toString()));
      }
      if (!jsonObj.get("CWAComplianceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWAComplianceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWAComplianceStatus").toString()));
      }
      if (!jsonObj.get("CWAComplianceTracking").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWAComplianceTracking` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWAComplianceTracking").toString()));
      }
      if (!jsonObj.get("CWADateLastFormalAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWADateLastFormalAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWADateLastFormalAction").toString()));
      }
      if (!jsonObj.get("CWADaysLastInspection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWADaysLastInspection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWADaysLastInspection").toString()));
      }
      if (!jsonObj.get("CWAFormalActionCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWAFormalActionCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWAFormalActionCount").toString()));
      }
      if (!jsonObj.get("CWAInformalCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWAInformalCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWAInformalCount").toString()));
      }
      if (!jsonObj.get("CWAInspectionCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWAInspectionCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWAInspectionCount").toString()));
      }
      if (!jsonObj.get("CWALastPenaltyAmt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWALastPenaltyAmt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWALastPenaltyAmt").toString()));
      }
      if (!jsonObj.get("CWALastPenaltyDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWALastPenaltyDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWALastPenaltyDate").toString()));
      }
      if (!jsonObj.get("CWANAICS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWANAICS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWANAICS").toString()));
      }
      if (!jsonObj.get("CWAPenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWAPenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWAPenalties").toString()));
      }
      if (!jsonObj.get("CWAPermitTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWAPermitTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWAPermitTypes").toString()));
      }
      if (!jsonObj.get("CWAQtrsWithNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWAQtrsWithNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWAQtrsWithNC").toString()));
      }
      if (!jsonObj.get("CWASICs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWASICs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWASICs").toString()));
      }
      if (!jsonObj.get("CWASNCFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWASNCFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWASNCFlag").toString()));
      }
      if (!jsonObj.get("CamdIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CamdIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CamdIDs").toString()));
      }
      if (!jsonObj.get("CensusBlockGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CensusBlockGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CensusBlockGroup").toString()));
      }
      if (!jsonObj.get("CurrSvFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrSvFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrSvFlag").toString()));
      }
      if (!jsonObj.get("CurrVioFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrVioFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrVioFlag").toString()));
      }
      if (!jsonObj.get("DfrUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DfrUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DfrUrl").toString()));
      }
      if (!jsonObj.get("Ea5yrFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ea5yrFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ea5yrFlag").toString()));
      }
      if (!jsonObj.get("EffChartsFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EffChartsFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EffChartsFlag").toString()));
      }
      if (!jsonObj.get("EisFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EisFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EisFlag").toString()));
      }
      if (!jsonObj.get("EisIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EisIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EisIDs").toString()));
      }
      if (!jsonObj.get("EjscreenFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EjscreenFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EjscreenFlag").toString()));
      }
      if (!jsonObj.get("EjscreenFlagUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EjscreenFlagUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EjscreenFlagUs").toString()));
      }
      if (!jsonObj.get("EpcraInspections5yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EpcraInspections5yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EpcraInspections5yr").toString()));
      }
      if (!jsonObj.get("Fac3yrComplianceHistory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Fac3yrComplianceHistory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Fac3yrComplianceHistory").toString()));
      }
      if (!jsonObj.get("FacAccuracyMeters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacAccuracyMeters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacAccuracyMeters").toString()));
      }
      if (!jsonObj.get("FacActiveFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacActiveFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacActiveFlag").toString()));
      }
      if (!jsonObj.get("FacChesapeakeBayFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacChesapeakeBayFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacChesapeakeBayFlg").toString()));
      }
      if (!jsonObj.get("FacCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacCity").toString()));
      }
      if (!jsonObj.get("FacCollectionMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacCollectionMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacCollectionMethod").toString()));
      }
      if (!jsonObj.get("FacComplianceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacComplianceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacComplianceStatus").toString()));
      }
      if (!jsonObj.get("FacCounty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacCounty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacCounty").toString()));
      }
      if (!jsonObj.get("FacDateLastFormalActEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDateLastFormalActEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDateLastFormalActEPA").toString()));
      }
      if (!jsonObj.get("FacDateLastFormalActSt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDateLastFormalActSt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDateLastFormalActSt").toString()));
      }
      if (!jsonObj.get("FacDateLastFormalAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDateLastFormalAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDateLastFormalAction").toString()));
      }
      if (!jsonObj.get("FacDateLastInformalActEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDateLastInformalActEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDateLastInformalActEPA").toString()));
      }
      if (!jsonObj.get("FacDateLastInformalActSt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDateLastInformalActSt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDateLastInformalActSt").toString()));
      }
      if (!jsonObj.get("FacDateLastInformalAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDateLastInformalAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDateLastInformalAction").toString()));
      }
      if (!jsonObj.get("FacDateLastInspection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDateLastInspection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDateLastInspection").toString()));
      }
      if (!jsonObj.get("FacDateLastInspectionEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDateLastInspectionEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDateLastInspectionEPA").toString()));
      }
      if (!jsonObj.get("FacDateLastInspectionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDateLastInspectionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDateLastInspectionState").toString()));
      }
      if (!jsonObj.get("FacDateLastPenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDateLastPenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDateLastPenalty").toString()));
      }
      if (!jsonObj.get("FacDaysLastInspection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDaysLastInspection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDaysLastInspection").toString()));
      }
      if (!jsonObj.get("FacDerivedCb2010").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedCb2010` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedCb2010").toString()));
      }
      if (!jsonObj.get("FacDerivedCd113").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedCd113` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedCd113").toString()));
      }
      if (!jsonObj.get("FacDerivedHuc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedHuc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedHuc").toString()));
      }
      if (!jsonObj.get("FacDerivedRadWBDHu12").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedRadWBDHu12` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedRadWBDHu12").toString()));
      }
      if (!jsonObj.get("FacDerivedRadWBDHu12Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedRadWBDHu12Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedRadWBDHu12Name").toString()));
      }
      if (!jsonObj.get("FacDerivedRadWBDHu8").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedRadWBDHu8` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedRadWBDHu8").toString()));
      }
      if (!jsonObj.get("FacDerivedRadWBDHu8Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedRadWBDHu8Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedRadWBDHu8Name").toString()));
      }
      if (!jsonObj.get("FacDerivedStctyFIPS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedStctyFIPS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedStctyFIPS").toString()));
      }
      if (!jsonObj.get("FacDerivedTRIbes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedTRIbes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedTRIbes").toString()));
      }
      if (!jsonObj.get("FacDerivedWBD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBD").toString()));
      }
      if (!jsonObj.get("FacDerivedWBDHu12Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBDHu12Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBDHu12Name").toString()));
      }
      if (!jsonObj.get("FacDerivedWBDHu8").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBDHu8` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBDHu8").toString()));
      }
      if (!jsonObj.get("FacDerivedWBDHu8Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBDHu8Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBDHu8Name").toString()));
      }
      if (!jsonObj.get("FacDerivedZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedZip").toString()));
      }
      if (!jsonObj.get("FacEPARegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacEPARegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacEPARegion").toString()));
      }
      if (!jsonObj.get("FacFIPSCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFIPSCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFIPSCode").toString()));
      }
      if (!jsonObj.get("FacFederalAgency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFederalAgency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFederalAgency").toString()));
      }
      if (!jsonObj.get("FacFederalAgencyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFederalAgencyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFederalAgencyName").toString()));
      }
      if (!jsonObj.get("FacFederalFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFederalFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFederalFlg").toString()));
      }
      if (!jsonObj.get("FacFormalActionCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFormalActionCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFormalActionCount").toString()));
      }
      if (!jsonObj.get("FacImpWaterFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacImpWaterFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacImpWaterFlg").toString()));
      }
      if (!jsonObj.get("FacIndianCntryFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacIndianCntryFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacIndianCntryFlg").toString()));
      }
      if (!jsonObj.get("FacIndianSpatialFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacIndianSpatialFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacIndianSpatialFlg").toString()));
      }
      if (!jsonObj.get("FacInformalCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacInformalCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacInformalCount").toString()));
      }
      if (!jsonObj.get("FacInspectionCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacInspectionCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacInspectionCount").toString()));
      }
      if (!jsonObj.get("FacLastPenaltyAmt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacLastPenaltyAmt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacLastPenaltyAmt").toString()));
      }
      if (!jsonObj.get("FacLat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacLat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacLat").toString()));
      }
      if (!jsonObj.get("FacLong").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacLong` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacLong").toString()));
      }
      if (!jsonObj.get("FacMajorFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacMajorFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacMajorFlag").toString()));
      }
      if (!jsonObj.get("FacMapFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacMapFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacMapFlg").toString()));
      }
      if (!jsonObj.get("FacMapIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacMapIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacMapIcon").toString()));
      }
      if (!jsonObj.get("FacMyrtkUniverse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacMyrtkUniverse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacMyrtkUniverse").toString()));
      }
      if (!jsonObj.get("FacNAICSCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacNAICSCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacNAICSCodes").toString()));
      }
      if (!jsonObj.get("FacNaaFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacNaaFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacNaaFlag").toString()));
      }
      if (!jsonObj.get("FacName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacName").toString()));
      }
      if (!jsonObj.get("FacPenaltyCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacPenaltyCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacPenaltyCount").toString()));
      }
      if (!jsonObj.get("FacPercentMinority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacPercentMinority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacPercentMinority").toString()));
      }
      if (!jsonObj.get("FacPopDen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacPopDen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacPopDen").toString()));
      }
      if (!jsonObj.get("FacProgramsWithSNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacProgramsWithSNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacProgramsWithSNC").toString()));
      }
      if (!jsonObj.get("FacQtrsWithNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacQtrsWithNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacQtrsWithNC").toString()));
      }
      if (!jsonObj.get("FacReferencePoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacReferencePoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacReferencePoint").toString()));
      }
      if (!jsonObj.get("FacSICCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacSICCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacSICCodes").toString()));
      }
      if (!jsonObj.get("FacSNCFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacSNCFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacSNCFlg").toString()));
      }
      if (!jsonObj.get("FacState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacState").toString()));
      }
      if (!jsonObj.get("FacStdCountyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacStdCountyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacStdCountyName").toString()));
      }
      if (!jsonObj.get("FacStreet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacStreet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacStreet").toString()));
      }
      if (!jsonObj.get("FacTotalPenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTotalPenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTotalPenalties").toString()));
      }
      if (!jsonObj.get("FacUsMexBorderFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacUsMexBorderFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacUsMexBorderFlg").toString()));
      }
      if (!jsonObj.get("FacZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacZip").toString()));
      }
      if (!jsonObj.get("FecCaseIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FecCaseIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FecCaseIDs").toString()));
      }
      if (!jsonObj.get("FecLastCaseDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FecLastCaseDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FecLastCaseDate").toString()));
      }
      if (!jsonObj.get("FecNumberOfCases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FecNumberOfCases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FecNumberOfCases").toString()));
      }
      if (!jsonObj.get("FecTotalPenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FecTotalPenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FecTotalPenalties").toString()));
      }
      if (!jsonObj.get("FifraInspections5yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FifraInspections5yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FifraInspections5yr").toString()));
      }
      if (!jsonObj.get("GHGCO2Releases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GHGCO2Releases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GHGCO2Releases").toString()));
      }
      if (!jsonObj.get("GHGFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GHGFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GHGFlag").toString()));
      }
      if (!jsonObj.get("GHGIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GHGIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GHGIDs").toString()));
      }
      if (!jsonObj.get("HasPollRpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HasPollRpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HasPollRpt").toString()));
      }
      if (!jsonObj.get("Infea5yrFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Infea5yrFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Infea5yrFlag").toString()));
      }
      if (!jsonObj.get("Insp5yrFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Insp5yrFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Insp5yrFlag").toString()));
      }
      if (!jsonObj.get("Lower48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Lower48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Lower48").toString()));
      }
      if (!jsonObj.get("MaxPctileUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxPctileUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxPctileUs").toString()));
      }
      if (!jsonObj.get("MaxScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxScore").toString()));
      }
      if (!jsonObj.get("NC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NC").toString()));
      }
      if (!jsonObj.get("NPDESFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NPDESFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NPDESFlag").toString()));
      }
      if (!jsonObj.get("NPDESIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NPDESIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NPDESIDs").toString()));
      }
      if (!jsonObj.get("NaaCategories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NaaCategories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NaaCategories").toString()));
      }
      if (!jsonObj.get("NaaPollutants").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NaaPollutants` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NaaPollutants").toString()));
      }
      if (!jsonObj.get("Over80CountUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Over80CountUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Over80CountUs").toString()));
      }
      if (!jsonObj.get("PctileCancerUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileCancerUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileCancerUs").toString()));
      }
      if (!jsonObj.get("PctileDpmUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileDpmUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileDpmUs").toString()));
      }
      if (!jsonObj.get("PctileO3Us").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileO3Us` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileO3Us").toString()));
      }
      if (!jsonObj.get("PctilePctpre1960Us").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctilePctpre1960Us` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctilePctpre1960Us").toString()));
      }
      if (!jsonObj.get("PctilePmUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctilePmUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctilePmUs").toString()));
      }
      if (!jsonObj.get("PctileProximityNPDESUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityNPDESUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityNPDESUs").toString()));
      }
      if (!jsonObj.get("PctileProximityNplUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityNplUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityNplUs").toString()));
      }
      if (!jsonObj.get("PctileProximityRmpUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityRmpUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityRmpUs").toString()));
      }
      if (!jsonObj.get("PctileProximityTsdfUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityTsdfUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityTsdfUs").toString()));
      }
      if (!jsonObj.get("PctileRespUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileRespUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileRespUs").toString()));
      }
      if (!jsonObj.get("PctileTrafficScoreUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileTrafficScoreUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileTrafficScoreUs").toString()));
      }
      if (!jsonObj.get("RCRA3yrComplQtrsHistory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRA3yrComplQtrsHistory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRA3yrComplQtrsHistory").toString()));
      }
      if (!jsonObj.get("RCRAComplianceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAComplianceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAComplianceStatus").toString()));
      }
      if (!jsonObj.get("RCRADateLastFormalAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRADateLastFormalAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRADateLastFormalAction").toString()));
      }
      if (!jsonObj.get("RCRADaysLastEvaluation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRADaysLastEvaluation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRADaysLastEvaluation").toString()));
      }
      if (!jsonObj.get("RCRAFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAFlag").toString()));
      }
      if (!jsonObj.get("RCRAFormalActionCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAFormalActionCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAFormalActionCount").toString()));
      }
      if (!jsonObj.get("RCRAIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAIDs").toString()));
      }
      if (!jsonObj.get("RCRAInformalCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAInformalCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAInformalCount").toString()));
      }
      if (!jsonObj.get("RCRAInspectionCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAInspectionCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAInspectionCount").toString()));
      }
      if (!jsonObj.get("RCRALastPenaltyAmt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastPenaltyAmt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastPenaltyAmt").toString()));
      }
      if (!jsonObj.get("RCRALastPenaltyDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastPenaltyDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastPenaltyDate").toString()));
      }
      if (!jsonObj.get("RCRANAICS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRANAICS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRANAICS").toString()));
      }
      if (!jsonObj.get("RCRAPenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAPenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAPenalties").toString()));
      }
      if (!jsonObj.get("RCRAPermitTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAPermitTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAPermitTypes").toString()));
      }
      if (!jsonObj.get("RCRAQtrsWithNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAQtrsWithNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAQtrsWithNC").toString()));
      }
      if (!jsonObj.get("RCRASNCFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRASNCFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRASNCFlag").toString()));
      }
      if (!jsonObj.get("RegistryID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistryID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistryID").toString()));
      }
      if (!jsonObj.get("RmpIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RmpIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RmpIDs").toString()));
      }
      if (!jsonObj.get("SDWA3yrComplQtrsHistory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWA3yrComplQtrsHistory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWA3yrComplQtrsHistory").toString()));
      }
      if (!jsonObj.get("SDWAComplianceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAComplianceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAComplianceStatus").toString()));
      }
      if (!jsonObj.get("SDWAFormalActionCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAFormalActionCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAFormalActionCount").toString()));
      }
      if (!jsonObj.get("SDWAIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAIDs").toString()));
      }
      if (!jsonObj.get("SDWAInformalCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAInformalCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAInformalCount").toString()));
      }
      if (!jsonObj.get("SDWAInspections5yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAInspections5yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAInspections5yr").toString()));
      }
      if (!jsonObj.get("SDWAQtrsWithNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAQtrsWithNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAQtrsWithNC").toString()));
      }
      if (!jsonObj.get("SDWASNCFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWASNCFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWASNCFlag").toString()));
      }
      if (!jsonObj.get("SDWASystemTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWASystemTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWASystemTypes").toString()));
      }
      if (!jsonObj.get("SDWISFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWISFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWISFlag").toString()));
      }
      if (!jsonObj.get("Score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Score").toString()));
      }
      if (!jsonObj.get("SemsFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SemsFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SemsFlag").toString()));
      }
      if (!jsonObj.get("SemsIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SemsIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SemsIDs").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("TRIFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIFlag").toString()));
      }
      if (!jsonObj.get("TRIIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIIDs").toString()));
      }
      if (!jsonObj.get("TRIOffSiteTransfers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIOffSiteTransfers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIOffSiteTransfers").toString()));
      }
      if (!jsonObj.get("TRIOnSiteReleases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIOnSiteReleases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIOnSiteReleases").toString()));
      }
      if (!jsonObj.get("TRIReleasesTransfers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIReleasesTransfers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIReleasesTransfers").toString()));
      }
      if (!jsonObj.get("TRIReporter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIReporter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIReporter").toString()));
      }
      if (!jsonObj.get("TRIReporterInPast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIReporterInPast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIReporterInPast").toString()));
      }
      if (!jsonObj.get("TRIbalFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIbalFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIbalFlag").toString()));
      }
      if (!jsonObj.get("TscaFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TscaFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TscaFlag").toString()));
      }
      if (!jsonObj.get("TscaIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TscaIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TscaIDs").toString()));
      }
      if (!jsonObj.get("TscaInspections5yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TscaInspections5yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TscaInspections5yr").toString()));
      }
      if (!jsonObj.get("ViolFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolFlag").toString()));
      }
      if (!jsonObj.get("WebDocs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebDocs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebDocs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Echo03.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Echo03' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Echo03> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Echo03.class));

       return (TypeAdapter<T>) new TypeAdapter<Echo03>() {
           @Override
           public void write(JsonWriter out, Echo03 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Echo03 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Echo03 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Echo03
   * @throws IOException if the JSON string is invalid with respect to Echo03
   */
  public static Echo03 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Echo03.class);
  }

  /**
   * Convert an instance of Echo03 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

