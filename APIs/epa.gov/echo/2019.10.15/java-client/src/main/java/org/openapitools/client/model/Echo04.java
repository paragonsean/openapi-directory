/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - All Data
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.  ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    ECHO Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated as Clean Air Act (CAA) stationary sources, Clean Water Act (CWA) dischargers, Resource Conservation and Recovery Act (RCRA) hazardous waste generators/handlers, and Safe Drinking Water Act (SDWA) public water systems.  Data of interest from other EPA sources, such as the Toxics Release Inventory, is also supplied for context.   \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.     The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Echo02;
import org.openapitools.client.model.Echo03;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Results Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:25.812615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Echo04 {
  public static final String SERIALIZED_NAME_BAD_SYSTEM_I_DS = "BadSystemIDs";
  @SerializedName(SERIALIZED_NAME_BAD_SYSTEM_I_DS)
  private String badSystemIDs;

  public static final String SERIALIZED_NAME_CA_A_ROWS = "CAARows";
  @SerializedName(SERIALIZED_NAME_CA_A_ROWS)
  private String caARows;

  public static final String SERIALIZED_NAME_CV_ROWS = "CVRows";
  @SerializedName(SERIALIZED_NAME_CV_ROWS)
  private String cvRows;

  public static final String SERIALIZED_NAME_CW_A_ROWS = "CWARows";
  @SerializedName(SERIALIZED_NAME_CW_A_ROWS)
  private String cwARows;

  public static final String SERIALIZED_NAME_FE_A_ROWS = "FEARows";
  @SerializedName(SERIALIZED_NAME_FE_A_ROWS)
  private String feARows;

  public static final String SERIALIZED_NAME_FACILITIES = "Facilities";
  @SerializedName(SERIALIZED_NAME_FACILITIES)
  private List<Echo03> facilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_IN_S_P_ROWS = "INSPRows";
  @SerializedName(SERIALIZED_NAME_IN_S_P_ROWS)
  private String inSPRows;

  public static final String SERIALIZED_NAME_INDIAN_COUNTRY_ROWS = "IndianCountryRows";
  @SerializedName(SERIALIZED_NAME_INDIAN_COUNTRY_ROWS)
  private String indianCountryRows;

  public static final String SERIALIZED_NAME_INF_F_E_A_ROWS = "InfFEARows";
  @SerializedName(SERIALIZED_NAME_INF_F_E_A_ROWS)
  private String infFEARows;

  public static final String SERIALIZED_NAME_MAP_OUTPUT = "MapOutput";
  @SerializedName(SERIALIZED_NAME_MAP_OUTPUT)
  private Echo02 mapOutput;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PAGE_NO = "PageNo";
  @SerializedName(SERIALIZED_NAME_PAGE_NO)
  private String pageNo;

  public static final String SERIALIZED_NAME_QUERY_I_D = "QueryID";
  @SerializedName(SERIALIZED_NAME_QUERY_I_D)
  private String queryID;

  public static final String SERIALIZED_NAME_QUERY_ROWS = "QueryRows";
  @SerializedName(SERIALIZED_NAME_QUERY_ROWS)
  private String queryRows;

  public static final String SERIALIZED_NAME_RC_R_ROWS = "RCRRows";
  @SerializedName(SERIALIZED_NAME_RC_R_ROWS)
  private String rcRRows;

  public static final String SERIALIZED_NAME_SV_ROWS = "SVRows";
  @SerializedName(SERIALIZED_NAME_SV_ROWS)
  private String svRows;

  public static final String SERIALIZED_NAME_TR_I_ROWS = "TRIRows";
  @SerializedName(SERIALIZED_NAME_TR_I_ROWS)
  private String trIRows;

  public static final String SERIALIZED_NAME_TOTAL_PENALTIES = "TotalPenalties";
  @SerializedName(SERIALIZED_NAME_TOTAL_PENALTIES)
  private String totalPenalties;

  public static final String SERIALIZED_NAME_V3_ROWS = "V3Rows";
  @SerializedName(SERIALIZED_NAME_V3_ROWS)
  private String v3Rows;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Echo04() {
  }

  public Echo04 badSystemIDs(String badSystemIDs) {
    this.badSystemIDs = badSystemIDs;
    return this;
  }

  /**
   * Identifies which passed query system identifiers are invalid.
   * @return badSystemIDs
   */
  @javax.annotation.Nonnull
  public String getBadSystemIDs() {
    return badSystemIDs;
  }

  public void setBadSystemIDs(String badSystemIDs) {
    this.badSystemIDs = badSystemIDs;
  }


  public Echo04 caARows(String caARows) {
    this.caARows = caARows;
    return this;
  }

  /**
   * The number of facilities or cases within the result set that have Clean Air Act (CAA) permits.
   * @return caARows
   */
  @javax.annotation.Nonnull
  public String getCaARows() {
    return caARows;
  }

  public void setCaARows(String caARows) {
    this.caARows = caARows;
  }


  public Echo04 cvRows(String cvRows) {
    this.cvRows = cvRows;
    return this;
  }

  /**
   * Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.
   * @return cvRows
   */
  @javax.annotation.Nonnull
  public String getCvRows() {
    return cvRows;
  }

  public void setCvRows(String cvRows) {
    this.cvRows = cvRows;
  }


  public Echo04 cwARows(String cwARows) {
    this.cwARows = cwARows;
    return this;
  }

  /**
   * The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.
   * @return cwARows
   */
  @javax.annotation.Nonnull
  public String getCwARows() {
    return cwARows;
  }

  public void setCwARows(String cwARows) {
    this.cwARows = cwARows;
  }


  public Echo04 feARows(String feARows) {
    this.feARows = feARows;
    return this;
  }

  /**
   * Summary count of the number of facilities with a formal enforcement action in the past five years
   * @return feARows
   */
  @javax.annotation.Nonnull
  public String getFeARows() {
    return feARows;
  }

  public void setFeARows(String feARows) {
    this.feARows = feARows;
  }


  public Echo04 facilities(List<Echo03> facilities) {
    this.facilities = facilities;
    return this;
  }

  public Echo04 addFacilitiesItem(Echo03 facilitiesItem) {
    if (this.facilities == null) {
      this.facilities = new ArrayList<>();
    }
    this.facilities.add(facilitiesItem);
    return this;
  }

  /**
   * A complex array of facility information.
   * @return facilities
   */
  @javax.annotation.Nullable
  public List<Echo03> getFacilities() {
    return facilities;
  }

  public void setFacilities(List<Echo03> facilities) {
    this.facilities = facilities;
  }


  public Echo04 inSPRows(String inSPRows) {
    this.inSPRows = inSPRows;
    return this;
  }

  /**
   * Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)
   * @return inSPRows
   */
  @javax.annotation.Nonnull
  public String getInSPRows() {
    return inSPRows;
  }

  public void setInSPRows(String inSPRows) {
    this.inSPRows = inSPRows;
  }


  public Echo04 indianCountryRows(String indianCountryRows) {
    this.indianCountryRows = indianCountryRows;
    return this;
  }

  /**
   * Number of facilities with tribal_flag populated
   * @return indianCountryRows
   */
  @javax.annotation.Nonnull
  public String getIndianCountryRows() {
    return indianCountryRows;
  }

  public void setIndianCountryRows(String indianCountryRows) {
    this.indianCountryRows = indianCountryRows;
  }


  public Echo04 infFEARows(String infFEARows) {
    this.infFEARows = infFEARows;
    return this;
  }

  /**
   * Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT &gt; 0)
   * @return infFEARows
   */
  @javax.annotation.Nonnull
  public String getInfFEARows() {
    return infFEARows;
  }

  public void setInfFEARows(String infFEARows) {
    this.infFEARows = infFEARows;
  }


  public Echo04 mapOutput(Echo02 mapOutput) {
    this.mapOutput = mapOutput;
    return this;
  }

  /**
   * Get mapOutput
   * @return mapOutput
   */
  @javax.annotation.Nullable
  public Echo02 getMapOutput() {
    return mapOutput;
  }

  public void setMapOutput(Echo02 mapOutput) {
    this.mapOutput = mapOutput;
  }


  public Echo04 message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Field to record messages (typically performance-related) about packet processing
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public Echo04 pageNo(String pageNo) {
    this.pageNo = pageNo;
    return this;
  }

  /**
   * The number of pages of results returned
   * @return pageNo
   */
  @javax.annotation.Nonnull
  public String getPageNo() {
    return pageNo;
  }

  public void setPageNo(String pageNo) {
    this.pageNo = pageNo;
  }


  public Echo04 queryID(String queryID) {
    this.queryID = queryID;
    return this;
  }

  /**
   * Sequential number assigned to entire search result
   * @return queryID
   */
  @javax.annotation.Nonnull
  public String getQueryID() {
    return queryID;
  }

  public void setQueryID(String queryID) {
    this.queryID = queryID;
  }


  public Echo04 queryRows(String queryRows) {
    this.queryRows = queryRows;
    return this;
  }

  /**
   * Number of query results returned
   * @return queryRows
   */
  @javax.annotation.Nonnull
  public String getQueryRows() {
    return queryRows;
  }

  public void setQueryRows(String queryRows) {
    this.queryRows = queryRows;
  }


  public Echo04 rcRRows(String rcRRows) {
    this.rcRRows = rcRRows;
    return this;
  }

  /**
   * The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.
   * @return rcRRows
   */
  @javax.annotation.Nonnull
  public String getRcRRows() {
    return rcRRows;
  }

  public void setRcRRows(String rcRRows) {
    this.rcRRows = rcRRows;
  }


  public Echo04 svRows(String svRows) {
    this.svRows = svRows;
    return this;
  }

  /**
   * Number of facilities with curr_sv_flag populated (CWP_STATUS &#x3D; \&quot;Significant Violation\&quot;)
   * @return svRows
   */
  @javax.annotation.Nonnull
  public String getSvRows() {
    return svRows;
  }

  public void setSvRows(String svRows) {
    this.svRows = svRows;
  }


  public Echo04 trIRows(String trIRows) {
    this.trIRows = trIRows;
    return this;
  }

  /**
   * The number of facilities within the results set that have Toxics Release Inventory (TRI) permits.
   * @return trIRows
   */
  @javax.annotation.Nonnull
  public String getTrIRows() {
    return trIRows;
  }

  public void setTrIRows(String trIRows) {
    this.trIRows = trIRows;
  }


  public Echo04 totalPenalties(String totalPenalties) {
    this.totalPenalties = totalPenalties;
    return this;
  }

  /**
   * The total dollar amount of either assessed or final penalties within the five year time period
   * @return totalPenalties
   */
  @javax.annotation.Nonnull
  public String getTotalPenalties() {
    return totalPenalties;
  }

  public void setTotalPenalties(String totalPenalties) {
    this.totalPenalties = totalPenalties;
  }


  public Echo04 v3Rows(String v3Rows) {
    this.v3Rows = v3Rows;
    return this;
  }

  /**
   * Number of facilities having one or more quarters in non-compliance (QNC) in the last three years
   * @return v3Rows
   */
  @javax.annotation.Nonnull
  public String getV3Rows() {
    return v3Rows;
  }

  public void setV3Rows(String v3Rows) {
    this.v3Rows = v3Rows;
  }


  public Echo04 version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the SDWA system service
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Echo04 echo04 = (Echo04) o;
    return Objects.equals(this.badSystemIDs, echo04.badSystemIDs) &&
        Objects.equals(this.caARows, echo04.caARows) &&
        Objects.equals(this.cvRows, echo04.cvRows) &&
        Objects.equals(this.cwARows, echo04.cwARows) &&
        Objects.equals(this.feARows, echo04.feARows) &&
        Objects.equals(this.facilities, echo04.facilities) &&
        Objects.equals(this.inSPRows, echo04.inSPRows) &&
        Objects.equals(this.indianCountryRows, echo04.indianCountryRows) &&
        Objects.equals(this.infFEARows, echo04.infFEARows) &&
        Objects.equals(this.mapOutput, echo04.mapOutput) &&
        Objects.equals(this.message, echo04.message) &&
        Objects.equals(this.pageNo, echo04.pageNo) &&
        Objects.equals(this.queryID, echo04.queryID) &&
        Objects.equals(this.queryRows, echo04.queryRows) &&
        Objects.equals(this.rcRRows, echo04.rcRRows) &&
        Objects.equals(this.svRows, echo04.svRows) &&
        Objects.equals(this.trIRows, echo04.trIRows) &&
        Objects.equals(this.totalPenalties, echo04.totalPenalties) &&
        Objects.equals(this.v3Rows, echo04.v3Rows) &&
        Objects.equals(this.version, echo04.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badSystemIDs, caARows, cvRows, cwARows, feARows, facilities, inSPRows, indianCountryRows, infFEARows, mapOutput, message, pageNo, queryID, queryRows, rcRRows, svRows, trIRows, totalPenalties, v3Rows, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Echo04 {\n");
    sb.append("    badSystemIDs: ").append(toIndentedString(badSystemIDs)).append("\n");
    sb.append("    caARows: ").append(toIndentedString(caARows)).append("\n");
    sb.append("    cvRows: ").append(toIndentedString(cvRows)).append("\n");
    sb.append("    cwARows: ").append(toIndentedString(cwARows)).append("\n");
    sb.append("    feARows: ").append(toIndentedString(feARows)).append("\n");
    sb.append("    facilities: ").append(toIndentedString(facilities)).append("\n");
    sb.append("    inSPRows: ").append(toIndentedString(inSPRows)).append("\n");
    sb.append("    indianCountryRows: ").append(toIndentedString(indianCountryRows)).append("\n");
    sb.append("    infFEARows: ").append(toIndentedString(infFEARows)).append("\n");
    sb.append("    mapOutput: ").append(toIndentedString(mapOutput)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    pageNo: ").append(toIndentedString(pageNo)).append("\n");
    sb.append("    queryID: ").append(toIndentedString(queryID)).append("\n");
    sb.append("    queryRows: ").append(toIndentedString(queryRows)).append("\n");
    sb.append("    rcRRows: ").append(toIndentedString(rcRRows)).append("\n");
    sb.append("    svRows: ").append(toIndentedString(svRows)).append("\n");
    sb.append("    trIRows: ").append(toIndentedString(trIRows)).append("\n");
    sb.append("    totalPenalties: ").append(toIndentedString(totalPenalties)).append("\n");
    sb.append("    v3Rows: ").append(toIndentedString(v3Rows)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BadSystemIDs");
    openapiFields.add("CAARows");
    openapiFields.add("CVRows");
    openapiFields.add("CWARows");
    openapiFields.add("FEARows");
    openapiFields.add("Facilities");
    openapiFields.add("INSPRows");
    openapiFields.add("IndianCountryRows");
    openapiFields.add("InfFEARows");
    openapiFields.add("MapOutput");
    openapiFields.add("Message");
    openapiFields.add("PageNo");
    openapiFields.add("QueryID");
    openapiFields.add("QueryRows");
    openapiFields.add("RCRRows");
    openapiFields.add("SVRows");
    openapiFields.add("TRIRows");
    openapiFields.add("TotalPenalties");
    openapiFields.add("V3Rows");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BadSystemIDs");
    openapiRequiredFields.add("CAARows");
    openapiRequiredFields.add("CVRows");
    openapiRequiredFields.add("CWARows");
    openapiRequiredFields.add("FEARows");
    openapiRequiredFields.add("INSPRows");
    openapiRequiredFields.add("IndianCountryRows");
    openapiRequiredFields.add("InfFEARows");
    openapiRequiredFields.add("Message");
    openapiRequiredFields.add("PageNo");
    openapiRequiredFields.add("QueryID");
    openapiRequiredFields.add("QueryRows");
    openapiRequiredFields.add("RCRRows");
    openapiRequiredFields.add("SVRows");
    openapiRequiredFields.add("TRIRows");
    openapiRequiredFields.add("TotalPenalties");
    openapiRequiredFields.add("V3Rows");
    openapiRequiredFields.add("Version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Echo04
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Echo04.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Echo04 is not found in the empty JSON string", Echo04.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Echo04.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Echo04` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Echo04.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("BadSystemIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BadSystemIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BadSystemIDs").toString()));
      }
      if (!jsonObj.get("CAARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAARows").toString()));
      }
      if (!jsonObj.get("CVRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CVRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CVRows").toString()));
      }
      if (!jsonObj.get("CWARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWARows").toString()));
      }
      if (!jsonObj.get("FEARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FEARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FEARows").toString()));
      }
      if (jsonObj.get("Facilities") != null && !jsonObj.get("Facilities").isJsonNull()) {
        JsonArray jsonArrayfacilities = jsonObj.getAsJsonArray("Facilities");
        if (jsonArrayfacilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Facilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Facilities` to be an array in the JSON string but got `%s`", jsonObj.get("Facilities").toString()));
          }

          // validate the optional field `Facilities` (array)
          for (int i = 0; i < jsonArrayfacilities.size(); i++) {
            Echo03.validateJsonElement(jsonArrayfacilities.get(i));
          };
        }
      }
      if (!jsonObj.get("INSPRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `INSPRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("INSPRows").toString()));
      }
      if (!jsonObj.get("IndianCountryRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndianCountryRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndianCountryRows").toString()));
      }
      if (!jsonObj.get("InfFEARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InfFEARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InfFEARows").toString()));
      }
      // validate the optional field `MapOutput`
      if (jsonObj.get("MapOutput") != null && !jsonObj.get("MapOutput").isJsonNull()) {
        Echo02.validateJsonElement(jsonObj.get("MapOutput"));
      }
      if (!jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      if (!jsonObj.get("PageNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PageNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PageNo").toString()));
      }
      if (!jsonObj.get("QueryID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueryID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QueryID").toString()));
      }
      if (!jsonObj.get("QueryRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueryRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QueryRows").toString()));
      }
      if (!jsonObj.get("RCRRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRRows").toString()));
      }
      if (!jsonObj.get("SVRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SVRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SVRows").toString()));
      }
      if (!jsonObj.get("TRIRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIRows").toString()));
      }
      if (!jsonObj.get("TotalPenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalPenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalPenalties").toString()));
      }
      if (!jsonObj.get("V3Rows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `V3Rows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("V3Rows").toString()));
      }
      if (!jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Echo04.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Echo04' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Echo04> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Echo04.class));

       return (TypeAdapter<T>) new TypeAdapter<Echo04>() {
           @Override
           public void write(JsonWriter out, Echo04 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Echo04 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Echo04 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Echo04
   * @throws IOException if the JSON string is invalid with respect to Echo04
   */
  public static Echo04 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Echo04.class);
  }

  /**
   * Convert an instance of Echo04 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

