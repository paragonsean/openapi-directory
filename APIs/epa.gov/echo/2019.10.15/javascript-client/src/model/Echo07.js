/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - All Data
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.  ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    ECHO Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated as Clean Air Act (CAA) stationary sources, Clean Water Act (CWA) dischargers, Resource Conservation and Recovery Act (RCRA) hazardous waste generators/handlers, and Safe Drinking Water Act (SDWA) public water systems.  Data of interest from other EPA sources, such as the Toxics Release Inventory, is also supplied for context.   \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.     The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Echo07 model module.
 * @module model/Echo07
 * @version 2019.10.15
 */
class Echo07 {
    /**
     * Constructs a new <code>Echo07</code>.
     * Facilities Object
     * @alias module:model/Echo07
     * @param aIRFlag {String} Indicates whether the facility has a Clean Air Act (CAA) permit.
     * @param aIRIDs {String} Air Facility System (AFS) ID.
     * @param activeLower48 {String} A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.
     * @param biosolidsFlag {String} A Yes/No field to indicate permits with biosolids management and compliance information.
     * @param cAA3yrComplQtrsHistory {String} The facility's 3-year compliance status history by quarter (3-month period) entered in the CAA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined
     * @param cAAComplianceStatus {String} An indication of the facility's compliance status under the Clean Air Act. When a source has a high priority violation (HPV), the specific type of HPV will be displayed. If more than one type applies to a source, this order of priority is used to determine which type appears: Violation Unaddressed, EPA has Lead Enforcement Violation Unaddressed, State has Lead Enforcement Violation Unaddressed, Local has Lead Enforcement Violation Addressed, EPA has Lead Enforcement Violation Addressed, State has Lead Enforcement Violation Addressed, Local has Lead Enforcement When there is no Federally-Reportable Violation determination date in the past year and no open High Priority Violation in the most recent quarter in the data system of record, “Not Available” is displayed.
     * @param cAADateLastFormalAction {String} The effective date of the most recent listed enforcement action entered into the CAA program database.
     * @param cAADaysLastEvaluation {String} The number of days since a CAA Full Compliance Evaluation (FCE) was completed.
     * @param cAAEvaluationCount {String} The number of inspections/compliance evaluations under the Clean Air Act, occurring at the facility within the last five years
     * @param cAAFormalActionCount {String} Indicates the number of enforcement actions taken against the facility within the last five years under the Clean Air Act.
     * @param cAAHpvFlag {String} The High Priority Violator (HPV) status for the facility during the most recent quarter reflects the time the records were extracted from the program data system. \"Y\" indicates the facility is in HPV for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in HPV.
     * @param cAAInformalCount {String} Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Clean Air Act.
     * @param cAALastPenaltyAmt {String} The amount of the most recent penalty entered into the CAA program database.
     * @param cAALastPenaltyDate {String} The effective date of the most recent penalty entered into the CAA program database.
     * @param CAANAICS {String} The CAA permit's primary North American Industry Classification System (NAICS) Codes.
     * @param cAAPenalties {String} The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act.
     * @param cAAPermitTypes {String} ICIS AIR Permit Types associated with the FRS Facility: - Major - Federally Reportable Minor - Other Minor - Synthetic Minor - NULL
     * @param cAAQtrsWithNC {String} The number of quarters, out of the last twelve quarters, in which the CAA permit is considered in violation.
     * @param cAASICs {String} The CAA permit's primary Standard Industrial Classification (SIC) Codes.
     * @param cWA13qtrsComplHistory {String} The facility's 3-year compliance status history by quarter (3-month period) entered in the CWA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
     * @param cWA13qtrsEfflntExceedances {String} The number of effluent violations at the facility in the past 13 quarters.
     * @param cWA3YrQncrCodes {String} No longer used.  Will be deleted in nthe future.
     * @param cWAComplianceStatus {String} An indication of the facility's compliance status under the Clean Water Act. When a major source is in significant noncompliance (SNC) or a non-major source has a Category I violation, the specific type of SNC/Category I will be displayed. If more than one type applies to a facility, this order of priority is used to determine which code appears: S(CSchVio) - an enforcement action has been issued, and the facility is not meeting its compliance schedule E(EffViol) - effluent violations of monthly average limits X(EffNMth) - effluent violations of non-monthly average limits T(CSchRpt) - compliance schedule reporting violation D(DMR NR) - non-receipt of discharge monitoring report
     * @param cWAComplianceTracking {String} The Compliance Tracking classifications which can assist in interpreting the facility's compliance status, particularly for non-major standard permittees.
     * @param cWADateLastFormalAction {String} The effective date of the most recent listed enforcement action entered into the CWA program database.
     * @param cWADaysLastInspection {String} The number of days since a CWA inspection was completed.
     * @param cWAFormalActionCount {String} Indicates the number of enforcement actions taken against the facility within the last five years under the Clean Water Act.
     * @param cWAInformalCount {String} Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Clean Water Act.
     * @param cWAInspectionCount {String} The number of inspections/compliance evaluations under the Clean Water Act, occurring at the facility within the last five years.
     * @param cWALastPenaltyAmt {String} The amount of the most recent penalty entered into the CWA program database.
     * @param cWALastPenaltyDate {String} The effective date of the most recent penalty entered into the CWA program database.
     * @param CWANAICS {String} The CWA permit's primary North American Industry Classification System (NAICS) Codes.
     * @param cWAPenalties {String} The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Water Act.
     * @param cWAPermitTypes {String} Indicates the facility's permit type or designation. - Major - Minor
     * @param cWAQtrsWithNC {String} The number of quarters, out of the last twelve quarters, in which the CWA permit is considered in violation.
     * @param cWASICs {String} The CWA permit's primary Standard Industrial Classification (SIC) Codes.
     * @param cWASNCFlag {String} The CWA Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.
     * @param camdIDs {String} Facility identifiers for the Clean Air Markets Division database.
     * @param censusBlockGroup {String} A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
     * @param currSvFlag {String} Indicates if the facility has a current significant violation. 1 = Yes
     * @param currVioFlag {String} Indicates if the facility has a current violation. 1 = Yes
     * @param dfrUrl {String} The URL to the facility's Detailed Facility Report.
     * @param ea5yrFlag {String} Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes
     * @param effChartsFlag {String} 
     * @param eisFlag {String} Indicates whether the facility reports to the Emissions Inventory System (EIS).
     * @param eisIDs {String} A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.
     * @param ejscreenFlag {String} A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
     * @param ejscreenFlagUs {String} A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
     * @param epcraInspections5yr {String} From ICIS FE&C, the number of EPCRA inspections at the facility in the past five years.
     * @param fac3yrComplianceHistory {String} The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
     * @param facAccuracyMeters {String} The estimate of accuracy, in meters, based on provided spatial metadata and quality assurance routines for the provided facility coordinate.
     * @param facActiveFlag {String} Indicates whether any of the associated ICIS-Air, ICIS-NPDES, RCRAInfo or SDWIS permits/facilities are in an active status.
     * @param facChesapeakeBayFlg {String} Indicates whether the facility, based on the facility spatial coordinate, is within the Chesapeake Bay watershed.
     * @param facCity {String} The city where the facility is located.
     * @param facCollectionMethod {String} Indicates the collection method used (GPS, Photo Interpolation, Address Geocode, etc) to determine a facility's spatial coodinate.
     * @param facComplianceStatus {String} An indication of the facility's known overall compliance status. Status codes include: SNC/Serious Viol [significant noncompliance (SNC), high priority violation (HPV), or serious violator, depending on statute] In Violation (in violation of an environmental regulation) No Violation (no violations recorded in the national systems of record) Not Available Unknown
     * @param facCounty {String} The county where the facility is located.
     * @param facDateLastFormalActEPA {String} Indicates the effective date of the most recent listed formal enforcement action taken against the facility.
     * @param facDateLastFormalActSt {String} The effective date of the most recent listed formal enforcement action taken against the facility by a state agency.
     * @param facDateLastFormalAction {String} Indicates the effective date of the most recent listed enforcement action taken against the facility.
     * @param facDateLastInformalActEPA {String} Indicates the effective date of the most recent listed informal enforcement action taken against the facility.
     * @param facDateLastInformalActSt {String} The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.
     * @param facDateLastInformalAction {String} The date of the most recent informal action or NOV taken recorded in AFS, ICIS-NPDES, RCRA Info or SDWIS.
     * @param facDateLastInspection {String} The date on which most recent inspection of the facility took place. For the Clean Air Act, the date on which a Full Inspection (FCE) was completed. This date may or may not correspond to an actual site visit. A series of partial on- or off-site inspections may have been conducted during the fiscal year as part of this FCE.
     * @param facDateLastInspectionEPA {String} The date of the facility's last inspection.
     * @param facDateLastInspectionState {String} The date on which the most recent \"olfficial\"  inspection of the facility by a state agency took place.
     * @param facDateLastPenalty {String} Indicates the date on which the most recent assessed (or final) penalty was taken against the facility.
     * @param facDaysLastInspection {String} The number of days from the last ECHO refresh to the date on which the most recent inspection of the facility took place based on data recorded into AFS, ICIS-NPDES, or RCRA Info.
     * @param facDerivedCb2010 {String} The 2010 Census Block derived from the facility coordinate.
     * @param facDerivedCd113 {String} The 113th Congressional District derived from the facility coordinate.
     * @param facDerivedHuc {String} The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
     * @param facDerivedRadWBDHu12 {String} The 12-digit Watershed Boundary Dataset code derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
     * @param facDerivedRadWBDHu12Name {String} The 12 digit Watershed Boundary Dataset name derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
     * @param facDerivedRadWBDHu8 {String} The 8-digit Watershed Hydrologic Unit Code (HUC) derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
     * @param facDerivedRadWBDHu8Name {String} The 8 digit watershed name derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
     * @param facDerivedStctyFIPS {String} The Federal Information Processing Standard (FIPS) code which uniquely identifies the state and county in which the facility is located.
     * @param facDerivedTRIbes {String} The tribes or tribal territories located within 25 miles of the facility's location.
     * @param facDerivedWBD {String} The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.
     * @param facDerivedWBDHu12Name {String} The Watershed Boundary Dataset name derived from the facility coordinate.
     * @param facDerivedWBDHu8 {String} Spatially derived HUC based on the facility's geographic coordinates in FRS.
     * @param facDerivedWBDHu8Name {String} The name of the hydrologic unit in which the facility is located within, derived spatially based on the facility's geographic coordinates in FRS.
     * @param facDerivedZip {String} The ZIP Code derived from the facility coordinate.
     * @param facEPARegion {String} The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories
     * @param facFIPSCode {String} The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
     * @param facFederalAgency {String} The facility's federal agency code.
     * @param facFederalAgencyName {String} Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.
     * @param facFederalFlg {String} Indicates whether the facility is part of a federal agency.
     * @param facFormalActionCount {String} Indicates the total number of enforcement actions taken against the facility within the last five years. NA indicates that this measure is not applicable for facilities with no associated CAA, CWA, or RCRA permits
     * @param facImpWaterFlg {String} Indicates whether or not the facility discharges directly into category 4 or 5 impaired water, as designated under section 303(d) of the Clean Water Act.
     * @param facIndianCntryFlg {String} Flag showing Y/N whether the facility is located in Indian Country.
     * @param facIndianSpatialFlg {String} Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.
     * @param facInformalCount {String} Indicates the total number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years
     * @param facInspectionCount {String} The number of inspections/compliance evaluations that have occurred at the facility, under the AIR, CWA, and RCRA, within the last five years. The last 5 years will include data from the 20 most recently completed quarters, plus data from the current quarter up until the refresh date. This count only includes inspection types that are counted as inspections in official counts.
     * @param facLastPenaltyAmt {String} Indicates the dollar amount of the most recent assessed (or final) penalty taken against the facility.
     * @param facLat {String} The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
     * @param facLong {String} The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
     * @param facMajorFlag {String} Indicates whether the facility is designated as a “major” (usually a large facility).
     * @param facMapFlg {String} Graphical indicator denoting whether geographical data required to map a facility are available.
     * @param facMapIcon {String} The default map icon image file calculated for the facility by the ECHO program.
     * @param facMyrtkUniverse {String} A 3-digit combination of Y/N flags indicating if the facility is considered a Right-to-Know Network (RTKNet) CAA (position 1), NPDES (position 2), or RCRA facility (position 3).
     * @param facNAICSCodes {String} The facility's North American Industry Classification System (NAICS) Codes.
     * @param facNaaFlag {String} Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.
     * @param facName {String} Name of facility
     * @param facPenaltyCount {String} The total number of penalties assessed (or final) taken against the facility within the last five years
     * @param facPercentMinority {String} Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
     * @param facPopDen {String} The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field).
     * @param facProgramsWithSNC {String} The number of programs (CAA, CWA, SDWA, RCRA) related to the facility that have a current serious violation.
     * @param facQtrsWithNC {String} The number of quarters, out of the last twelve quarters, in which the facility is considered in violation.
     * @param facReferencePoint {String} A description of the location for the provided facility coordinate.
     * @param facSICCodes {String} Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.
     * @param facSNCFlg {String} The Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.
     * @param facState {String} Facility state
     * @param facStdCountyName {String} The standardized  facility county name from EPA's Facility Registry System
     * @param facStreet {String} Street address where facility is located, as maintained by each data system. Certain data systems also maintain mailing address information, which is not used in this report. The street address may differ across EPA databases due to differences in reported information (e.g., use of mailing address), change in ownership, use of parent or subsidiary address, etc.
     * @param facTotalPenalties {String} The total dollar amount of either assessed (or final) penalties taken against the facility within the last five years
     * @param facUsMexBorderFlg {String} A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
     * @param facZip {String} Facility ZIP code
     * @param fecCaseIDs {String} All Case Numbers of Federal Enforcement Cases relating to the Facility from the ICIS System
     * @param fecLastCaseDate {String} The date of the latest Federal Enforcement Case related to this Facility in the ICIS system.
     * @param fecNumberOfCases {String} The total number of Federal Enforcement Cases in the last 5 years related to this Facility in the ICIS system.
     * @param fecTotalPenalties {String} The total Federal Enforcement Case penalties assessed against this facility in the last 5 years.
     * @param fifraInspections5yr {String} From ICIS FE&C, the number of FIFRA inspections at the facility in the past five years.
     * @param gHGCO2Releases {String} The sum of total release amounts of all linked Greenhouse Gas IDs reported as \"metric tons of CO2 equivalents\"
     * @param gHGFlag {String} Indicates whether the facility has a Greenhouse Gas (GHG) permit.
     * @param gHGIDs {String} A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.
     * @param hasPollRpt {String} ???
     * @param infea5yrFlag {String} Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.
     * @param insp5yrFlag {String} Indicates if the facility has an inspection within the last 5 years. 1 = Yes
     * @param lower48 {String} Flag showing Y/N whether location is within the contiguous (lower 48) United States.
     * @param maxPctileUs {String} The maximum percentile from all individual EJSCREEN indicators.
     * @param maxScore {String} A sorting score for internal use.
     * @param NC {String} Indicates whether or not the permit or site is considered either in Non-compliance (NC), Significant Non-compliance (SNC) or High Priority violation (HPV) status.
     * @param nPDESFlag {String} Indicates whether the facility has a Clean Water Act (CWA) permit.
     * @param nPDESIDs {String} Clean Water Act ID from the ICIS-NPDES (Integrated Compliance Information System - National Pollutant Discharge Elimination System)
     * @param naaCategories {String} The nonattainment area categories that the facility is in, derived spatially based on the facility's geographic coordinates in FRS.�
     * @param naaPollutants {String} All criteria pollutants that the facility is in nonattainment for.
     * @param objectId {String} Sequential number assigned to each facility or cluster returned.
     * @param over80CountUs {String} The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.
     * @param pctileCancerUs {String} The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
     * @param pctileDpmUs {String} The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
     * @param pctileO3Us {String} The national percentile of the census block group for the EJSCREEN ozone indicator.
     * @param pctilePctpre1960Us {String} The national percentile of the census block group for the EJSCREEN Lead paint indicator.
     * @param pctilePmUs {String} The national percentile of the census block group for the EJSCREEN particulate matter indicator.
     * @param pctileProximityNPDESUs {String} The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
     * @param pctileProximityNplUs {String} The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
     * @param pctileProximityRmpUs {String} The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
     * @param pctileProximityTsdfUs {String} The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
     * @param pctileRespUs {String} The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
     * @param pctileTrafficScoreUs {String} The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
     * @param rCRA3yrComplQtrsHistory {String} The system's 3-year compliance status history by quarter (3-month period) entered in the RCRA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
     * @param rCRAComplianceStatus {String} An indication of the facility's compliance status under the Resource Conservation and Recovery Act (Significant Violation = Significant Noncomplier, Noncompliance, or No Violation).
     * @param rCRADateLastFormalAction {String} The effective date of the most recent listed enforcement action entered into the RCRA program database.
     * @param rCRADaysLastEvaluation {String} The number of days since a RCRA inspection was completed.
     * @param rCRAFlag {String} Indicates whether the facility has a Resource Conservation and Recovery Action (RCRA) permit.
     * @param rCRAFormalActionCount {String} Indicates the number of enforcement actions taken against the facility within the last five years under the Resource Conservation and Recovery Act.
     * @param rCRAIDs {String} A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
     * @param rCRAInformalCount {String} Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Resource Conservation and Recovery Act.
     * @param rCRAInspectionCount {String} The number of inspections/compliance evaluations under the Resource Conservation and Recovery Act, occurring at the facility within the last five years
     * @param rCRALastPenaltyAmt {String} The amount of the most recent penalty entered into the RCRA program database.
     * @param rCRALastPenaltyDate {String} Indicates the date on which the most recent assessed (or final) penalty was taken against the facility, entered in the RCRAInfo program database.
     * @param RCRANAICS {String} The RCRA permit's primary North American Industry Classification System (NAICS) Code.
     * @param rCRAPenalties {String} The total dollar amount of assessed (or final) penalties taken against the facility within the last five years, entered in the RCRAInfo program database.
     * @param rCRAPermitTypes {String} RCRA Facility Types include: - TSDF = Treatment, Storage and Disposal facility - LQG = Large Quantity Generator - SQG = Small Quantity Generator - CESQG = Conditionally-Exempt Small Quantity Generator - Operating TSDF - Transporters
     * @param rCRAQtrsWithNC {String} The number of quarters, out of the last twelve quarters, in which the RCRA permit is considered in violation.
     * @param rCRASNCFlag {String} The RCRA Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.
     * @param registryID {String} An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
     * @param rmpIDs {String} A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.
     * @param sDWA3yrComplQtrsHistory {String} The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ - No Violation Identified V - Noncompliance S - Significant Noncompliance U - Undetermined
     * @param sDWAComplianceStatus {String} An indication of the facility's compliance status under the Safe Drinking Water Act (Serious Violator, Noncompliance, or No Violation).
     * @param sDWAFormalActionCount {String} Indicates the number of enforcement actions taken against the facility within the last five years under the Safe Drinking Water Act
     * @param sDWAIDs {String} A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
     * @param sDWAInformalCount {String} Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Safe Drinking Water Act
     * @param sDWAInspections5yr {String} The number of SDWA inspections at the facility in the past five years.
     * @param sDWAQtrsWithNC {String} The number of quarters, out of the last twelve quarters, in which the SDWA permit is considered in violation.
     * @param sDWASNCFlag {String} Indicates whether the Water System has a Serious Violation.
     * @param sDWASystemTypes {String} SDWIS System Types
     * @param sDWISFlag {String} Indicates whether the facility has a Safe Drinking Water Information System (SDWIS) ID.
     * @param score {String} 
     * @param semsFlag {String} 
     * @param semsIDs {String} 
     * @param sourceID {String} Unique Identifier assigned by EPA.
     * @param tRIFlag {String} Indicates whether the facility has a Toxics Release Inventory (TRI) permit.
     * @param tRIIDs {String} A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.
     * @param tRIOffSiteTransfers {String} Total pounds per year transferred off-site.
     * @param tRIOnSiteReleases {String} Total pounds per year released for Air Emissions, Surface Water Discharges, Underground Injections and Releases to Land.
     * @param tRIReleasesTransfers {String} Total chemical releases, in pounds, as reported to the Toxics Release Inventory (TRI) by the facility for the most recent reporting year
     * @param tRIReporter {String} Indicates whether or not the facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
     * @param tRIReporterInPast {String} A 'Y' indicates a TRI Reporter from a prior year.
     * @param tRIbalFlag {String} A flag indicating that the facility is within a tribal area.
     * @param tscaFlag {String} Flag indicating whether or not a facility has a TSCA ID
     * @param tscaIDs {String} Toxic Substances Control Act ID assigned to a facility
     * @param tscaInspections5yr {String} From ICIS FE&C, the number of TSCA inspections at the facility in the past five years.
     * @param violFlag {String} Indicates if the facility had a violation within the last 3 years. 1 = Yes
     * @param webDocs {String} Contains flags that identify what web accessible documents are available for the facility.
     */
    constructor(aIRFlag, aIRIDs, activeLower48, biosolidsFlag, cAA3yrComplQtrsHistory, cAAComplianceStatus, cAADateLastFormalAction, cAADaysLastEvaluation, cAAEvaluationCount, cAAFormalActionCount, cAAHpvFlag, cAAInformalCount, cAALastPenaltyAmt, cAALastPenaltyDate, CAANAICS, cAAPenalties, cAAPermitTypes, cAAQtrsWithNC, cAASICs, cWA13qtrsComplHistory, cWA13qtrsEfflntExceedances, cWA3YrQncrCodes, cWAComplianceStatus, cWAComplianceTracking, cWADateLastFormalAction, cWADaysLastInspection, cWAFormalActionCount, cWAInformalCount, cWAInspectionCount, cWALastPenaltyAmt, cWALastPenaltyDate, CWANAICS, cWAPenalties, cWAPermitTypes, cWAQtrsWithNC, cWASICs, cWASNCFlag, camdIDs, censusBlockGroup, currSvFlag, currVioFlag, dfrUrl, ea5yrFlag, effChartsFlag, eisFlag, eisIDs, ejscreenFlag, ejscreenFlagUs, epcraInspections5yr, fac3yrComplianceHistory, facAccuracyMeters, facActiveFlag, facChesapeakeBayFlg, facCity, facCollectionMethod, facComplianceStatus, facCounty, facDateLastFormalActEPA, facDateLastFormalActSt, facDateLastFormalAction, facDateLastInformalActEPA, facDateLastInformalActSt, facDateLastInformalAction, facDateLastInspection, facDateLastInspectionEPA, facDateLastInspectionState, facDateLastPenalty, facDaysLastInspection, facDerivedCb2010, facDerivedCd113, facDerivedHuc, facDerivedRadWBDHu12, facDerivedRadWBDHu12Name, facDerivedRadWBDHu8, facDerivedRadWBDHu8Name, facDerivedStctyFIPS, facDerivedTRIbes, facDerivedWBD, facDerivedWBDHu12Name, facDerivedWBDHu8, facDerivedWBDHu8Name, facDerivedZip, facEPARegion, facFIPSCode, facFederalAgency, facFederalAgencyName, facFederalFlg, facFormalActionCount, facImpWaterFlg, facIndianCntryFlg, facIndianSpatialFlg, facInformalCount, facInspectionCount, facLastPenaltyAmt, facLat, facLong, facMajorFlag, facMapFlg, facMapIcon, facMyrtkUniverse, facNAICSCodes, facNaaFlag, facName, facPenaltyCount, facPercentMinority, facPopDen, facProgramsWithSNC, facQtrsWithNC, facReferencePoint, facSICCodes, facSNCFlg, facState, facStdCountyName, facStreet, facTotalPenalties, facUsMexBorderFlg, facZip, fecCaseIDs, fecLastCaseDate, fecNumberOfCases, fecTotalPenalties, fifraInspections5yr, gHGCO2Releases, gHGFlag, gHGIDs, hasPollRpt, infea5yrFlag, insp5yrFlag, lower48, maxPctileUs, maxScore, NC, nPDESFlag, nPDESIDs, naaCategories, naaPollutants, objectId, over80CountUs, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rCRA3yrComplQtrsHistory, rCRAComplianceStatus, rCRADateLastFormalAction, rCRADaysLastEvaluation, rCRAFlag, rCRAFormalActionCount, rCRAIDs, rCRAInformalCount, rCRAInspectionCount, rCRALastPenaltyAmt, rCRALastPenaltyDate, RCRANAICS, rCRAPenalties, rCRAPermitTypes, rCRAQtrsWithNC, rCRASNCFlag, registryID, rmpIDs, sDWA3yrComplQtrsHistory, sDWAComplianceStatus, sDWAFormalActionCount, sDWAIDs, sDWAInformalCount, sDWAInspections5yr, sDWAQtrsWithNC, sDWASNCFlag, sDWASystemTypes, sDWISFlag, score, semsFlag, semsIDs, sourceID, tRIFlag, tRIIDs, tRIOffSiteTransfers, tRIOnSiteReleases, tRIReleasesTransfers, tRIReporter, tRIReporterInPast, tRIbalFlag, tscaFlag, tscaIDs, tscaInspections5yr, violFlag, webDocs) { 
        
        Echo07.initialize(this, aIRFlag, aIRIDs, activeLower48, biosolidsFlag, cAA3yrComplQtrsHistory, cAAComplianceStatus, cAADateLastFormalAction, cAADaysLastEvaluation, cAAEvaluationCount, cAAFormalActionCount, cAAHpvFlag, cAAInformalCount, cAALastPenaltyAmt, cAALastPenaltyDate, CAANAICS, cAAPenalties, cAAPermitTypes, cAAQtrsWithNC, cAASICs, cWA13qtrsComplHistory, cWA13qtrsEfflntExceedances, cWA3YrQncrCodes, cWAComplianceStatus, cWAComplianceTracking, cWADateLastFormalAction, cWADaysLastInspection, cWAFormalActionCount, cWAInformalCount, cWAInspectionCount, cWALastPenaltyAmt, cWALastPenaltyDate, CWANAICS, cWAPenalties, cWAPermitTypes, cWAQtrsWithNC, cWASICs, cWASNCFlag, camdIDs, censusBlockGroup, currSvFlag, currVioFlag, dfrUrl, ea5yrFlag, effChartsFlag, eisFlag, eisIDs, ejscreenFlag, ejscreenFlagUs, epcraInspections5yr, fac3yrComplianceHistory, facAccuracyMeters, facActiveFlag, facChesapeakeBayFlg, facCity, facCollectionMethod, facComplianceStatus, facCounty, facDateLastFormalActEPA, facDateLastFormalActSt, facDateLastFormalAction, facDateLastInformalActEPA, facDateLastInformalActSt, facDateLastInformalAction, facDateLastInspection, facDateLastInspectionEPA, facDateLastInspectionState, facDateLastPenalty, facDaysLastInspection, facDerivedCb2010, facDerivedCd113, facDerivedHuc, facDerivedRadWBDHu12, facDerivedRadWBDHu12Name, facDerivedRadWBDHu8, facDerivedRadWBDHu8Name, facDerivedStctyFIPS, facDerivedTRIbes, facDerivedWBD, facDerivedWBDHu12Name, facDerivedWBDHu8, facDerivedWBDHu8Name, facDerivedZip, facEPARegion, facFIPSCode, facFederalAgency, facFederalAgencyName, facFederalFlg, facFormalActionCount, facImpWaterFlg, facIndianCntryFlg, facIndianSpatialFlg, facInformalCount, facInspectionCount, facLastPenaltyAmt, facLat, facLong, facMajorFlag, facMapFlg, facMapIcon, facMyrtkUniverse, facNAICSCodes, facNaaFlag, facName, facPenaltyCount, facPercentMinority, facPopDen, facProgramsWithSNC, facQtrsWithNC, facReferencePoint, facSICCodes, facSNCFlg, facState, facStdCountyName, facStreet, facTotalPenalties, facUsMexBorderFlg, facZip, fecCaseIDs, fecLastCaseDate, fecNumberOfCases, fecTotalPenalties, fifraInspections5yr, gHGCO2Releases, gHGFlag, gHGIDs, hasPollRpt, infea5yrFlag, insp5yrFlag, lower48, maxPctileUs, maxScore, NC, nPDESFlag, nPDESIDs, naaCategories, naaPollutants, objectId, over80CountUs, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rCRA3yrComplQtrsHistory, rCRAComplianceStatus, rCRADateLastFormalAction, rCRADaysLastEvaluation, rCRAFlag, rCRAFormalActionCount, rCRAIDs, rCRAInformalCount, rCRAInspectionCount, rCRALastPenaltyAmt, rCRALastPenaltyDate, RCRANAICS, rCRAPenalties, rCRAPermitTypes, rCRAQtrsWithNC, rCRASNCFlag, registryID, rmpIDs, sDWA3yrComplQtrsHistory, sDWAComplianceStatus, sDWAFormalActionCount, sDWAIDs, sDWAInformalCount, sDWAInspections5yr, sDWAQtrsWithNC, sDWASNCFlag, sDWASystemTypes, sDWISFlag, score, semsFlag, semsIDs, sourceID, tRIFlag, tRIIDs, tRIOffSiteTransfers, tRIOnSiteReleases, tRIReleasesTransfers, tRIReporter, tRIReporterInPast, tRIbalFlag, tscaFlag, tscaIDs, tscaInspections5yr, violFlag, webDocs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aIRFlag, aIRIDs, activeLower48, biosolidsFlag, cAA3yrComplQtrsHistory, cAAComplianceStatus, cAADateLastFormalAction, cAADaysLastEvaluation, cAAEvaluationCount, cAAFormalActionCount, cAAHpvFlag, cAAInformalCount, cAALastPenaltyAmt, cAALastPenaltyDate, CAANAICS, cAAPenalties, cAAPermitTypes, cAAQtrsWithNC, cAASICs, cWA13qtrsComplHistory, cWA13qtrsEfflntExceedances, cWA3YrQncrCodes, cWAComplianceStatus, cWAComplianceTracking, cWADateLastFormalAction, cWADaysLastInspection, cWAFormalActionCount, cWAInformalCount, cWAInspectionCount, cWALastPenaltyAmt, cWALastPenaltyDate, CWANAICS, cWAPenalties, cWAPermitTypes, cWAQtrsWithNC, cWASICs, cWASNCFlag, camdIDs, censusBlockGroup, currSvFlag, currVioFlag, dfrUrl, ea5yrFlag, effChartsFlag, eisFlag, eisIDs, ejscreenFlag, ejscreenFlagUs, epcraInspections5yr, fac3yrComplianceHistory, facAccuracyMeters, facActiveFlag, facChesapeakeBayFlg, facCity, facCollectionMethod, facComplianceStatus, facCounty, facDateLastFormalActEPA, facDateLastFormalActSt, facDateLastFormalAction, facDateLastInformalActEPA, facDateLastInformalActSt, facDateLastInformalAction, facDateLastInspection, facDateLastInspectionEPA, facDateLastInspectionState, facDateLastPenalty, facDaysLastInspection, facDerivedCb2010, facDerivedCd113, facDerivedHuc, facDerivedRadWBDHu12, facDerivedRadWBDHu12Name, facDerivedRadWBDHu8, facDerivedRadWBDHu8Name, facDerivedStctyFIPS, facDerivedTRIbes, facDerivedWBD, facDerivedWBDHu12Name, facDerivedWBDHu8, facDerivedWBDHu8Name, facDerivedZip, facEPARegion, facFIPSCode, facFederalAgency, facFederalAgencyName, facFederalFlg, facFormalActionCount, facImpWaterFlg, facIndianCntryFlg, facIndianSpatialFlg, facInformalCount, facInspectionCount, facLastPenaltyAmt, facLat, facLong, facMajorFlag, facMapFlg, facMapIcon, facMyrtkUniverse, facNAICSCodes, facNaaFlag, facName, facPenaltyCount, facPercentMinority, facPopDen, facProgramsWithSNC, facQtrsWithNC, facReferencePoint, facSICCodes, facSNCFlg, facState, facStdCountyName, facStreet, facTotalPenalties, facUsMexBorderFlg, facZip, fecCaseIDs, fecLastCaseDate, fecNumberOfCases, fecTotalPenalties, fifraInspections5yr, gHGCO2Releases, gHGFlag, gHGIDs, hasPollRpt, infea5yrFlag, insp5yrFlag, lower48, maxPctileUs, maxScore, NC, nPDESFlag, nPDESIDs, naaCategories, naaPollutants, objectId, over80CountUs, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rCRA3yrComplQtrsHistory, rCRAComplianceStatus, rCRADateLastFormalAction, rCRADaysLastEvaluation, rCRAFlag, rCRAFormalActionCount, rCRAIDs, rCRAInformalCount, rCRAInspectionCount, rCRALastPenaltyAmt, rCRALastPenaltyDate, RCRANAICS, rCRAPenalties, rCRAPermitTypes, rCRAQtrsWithNC, rCRASNCFlag, registryID, rmpIDs, sDWA3yrComplQtrsHistory, sDWAComplianceStatus, sDWAFormalActionCount, sDWAIDs, sDWAInformalCount, sDWAInspections5yr, sDWAQtrsWithNC, sDWASNCFlag, sDWASystemTypes, sDWISFlag, score, semsFlag, semsIDs, sourceID, tRIFlag, tRIIDs, tRIOffSiteTransfers, tRIOnSiteReleases, tRIReleasesTransfers, tRIReporter, tRIReporterInPast, tRIbalFlag, tscaFlag, tscaIDs, tscaInspections5yr, violFlag, webDocs) { 
        obj['AIRFlag'] = aIRFlag;
        obj['AIRIDs'] = aIRIDs;
        obj['ActiveLower48'] = activeLower48;
        obj['BiosolidsFlag'] = biosolidsFlag;
        obj['CAA3yrComplQtrsHistory'] = cAA3yrComplQtrsHistory;
        obj['CAAComplianceStatus'] = cAAComplianceStatus;
        obj['CAADateLastFormalAction'] = cAADateLastFormalAction;
        obj['CAADaysLastEvaluation'] = cAADaysLastEvaluation;
        obj['CAAEvaluationCount'] = cAAEvaluationCount;
        obj['CAAFormalActionCount'] = cAAFormalActionCount;
        obj['CAAHpvFlag'] = cAAHpvFlag;
        obj['CAAInformalCount'] = cAAInformalCount;
        obj['CAALastPenaltyAmt'] = cAALastPenaltyAmt;
        obj['CAALastPenaltyDate'] = cAALastPenaltyDate;
        obj['CAANAICS'] = CAANAICS;
        obj['CAAPenalties'] = cAAPenalties;
        obj['CAAPermitTypes'] = cAAPermitTypes;
        obj['CAAQtrsWithNC'] = cAAQtrsWithNC;
        obj['CAASICs'] = cAASICs;
        obj['CWA13qtrsComplHistory'] = cWA13qtrsComplHistory;
        obj['CWA13qtrsEfflntExceedances'] = cWA13qtrsEfflntExceedances;
        obj['CWA3YrQncrCodes'] = cWA3YrQncrCodes;
        obj['CWAComplianceStatus'] = cWAComplianceStatus;
        obj['CWAComplianceTracking'] = cWAComplianceTracking;
        obj['CWADateLastFormalAction'] = cWADateLastFormalAction;
        obj['CWADaysLastInspection'] = cWADaysLastInspection;
        obj['CWAFormalActionCount'] = cWAFormalActionCount;
        obj['CWAInformalCount'] = cWAInformalCount;
        obj['CWAInspectionCount'] = cWAInspectionCount;
        obj['CWALastPenaltyAmt'] = cWALastPenaltyAmt;
        obj['CWALastPenaltyDate'] = cWALastPenaltyDate;
        obj['CWANAICS'] = CWANAICS;
        obj['CWAPenalties'] = cWAPenalties;
        obj['CWAPermitTypes'] = cWAPermitTypes;
        obj['CWAQtrsWithNC'] = cWAQtrsWithNC;
        obj['CWASICs'] = cWASICs;
        obj['CWASNCFlag'] = cWASNCFlag;
        obj['CamdIDs'] = camdIDs;
        obj['CensusBlockGroup'] = censusBlockGroup;
        obj['CurrSvFlag'] = currSvFlag;
        obj['CurrVioFlag'] = currVioFlag;
        obj['DfrUrl'] = dfrUrl;
        obj['Ea5yrFlag'] = ea5yrFlag;
        obj['EffChartsFlag'] = effChartsFlag;
        obj['EisFlag'] = eisFlag;
        obj['EisIDs'] = eisIDs;
        obj['EjscreenFlag'] = ejscreenFlag;
        obj['EjscreenFlagUs'] = ejscreenFlagUs;
        obj['EpcraInspections5yr'] = epcraInspections5yr;
        obj['Fac3yrComplianceHistory'] = fac3yrComplianceHistory;
        obj['FacAccuracyMeters'] = facAccuracyMeters;
        obj['FacActiveFlag'] = facActiveFlag;
        obj['FacChesapeakeBayFlg'] = facChesapeakeBayFlg;
        obj['FacCity'] = facCity;
        obj['FacCollectionMethod'] = facCollectionMethod;
        obj['FacComplianceStatus'] = facComplianceStatus;
        obj['FacCounty'] = facCounty;
        obj['FacDateLastFormalActEPA'] = facDateLastFormalActEPA;
        obj['FacDateLastFormalActSt'] = facDateLastFormalActSt;
        obj['FacDateLastFormalAction'] = facDateLastFormalAction;
        obj['FacDateLastInformalActEPA'] = facDateLastInformalActEPA;
        obj['FacDateLastInformalActSt'] = facDateLastInformalActSt;
        obj['FacDateLastInformalAction'] = facDateLastInformalAction;
        obj['FacDateLastInspection'] = facDateLastInspection;
        obj['FacDateLastInspectionEPA'] = facDateLastInspectionEPA;
        obj['FacDateLastInspectionState'] = facDateLastInspectionState;
        obj['FacDateLastPenalty'] = facDateLastPenalty;
        obj['FacDaysLastInspection'] = facDaysLastInspection;
        obj['FacDerivedCb2010'] = facDerivedCb2010;
        obj['FacDerivedCd113'] = facDerivedCd113;
        obj['FacDerivedHuc'] = facDerivedHuc;
        obj['FacDerivedRadWBDHu12'] = facDerivedRadWBDHu12;
        obj['FacDerivedRadWBDHu12Name'] = facDerivedRadWBDHu12Name;
        obj['FacDerivedRadWBDHu8'] = facDerivedRadWBDHu8;
        obj['FacDerivedRadWBDHu8Name'] = facDerivedRadWBDHu8Name;
        obj['FacDerivedStctyFIPS'] = facDerivedStctyFIPS;
        obj['FacDerivedTRIbes'] = facDerivedTRIbes;
        obj['FacDerivedWBD'] = facDerivedWBD;
        obj['FacDerivedWBDHu12Name'] = facDerivedWBDHu12Name;
        obj['FacDerivedWBDHu8'] = facDerivedWBDHu8;
        obj['FacDerivedWBDHu8Name'] = facDerivedWBDHu8Name;
        obj['FacDerivedZip'] = facDerivedZip;
        obj['FacEPARegion'] = facEPARegion;
        obj['FacFIPSCode'] = facFIPSCode;
        obj['FacFederalAgency'] = facFederalAgency;
        obj['FacFederalAgencyName'] = facFederalAgencyName;
        obj['FacFederalFlg'] = facFederalFlg;
        obj['FacFormalActionCount'] = facFormalActionCount;
        obj['FacImpWaterFlg'] = facImpWaterFlg;
        obj['FacIndianCntryFlg'] = facIndianCntryFlg;
        obj['FacIndianSpatialFlg'] = facIndianSpatialFlg;
        obj['FacInformalCount'] = facInformalCount;
        obj['FacInspectionCount'] = facInspectionCount;
        obj['FacLastPenaltyAmt'] = facLastPenaltyAmt;
        obj['FacLat'] = facLat;
        obj['FacLong'] = facLong;
        obj['FacMajorFlag'] = facMajorFlag;
        obj['FacMapFlg'] = facMapFlg;
        obj['FacMapIcon'] = facMapIcon;
        obj['FacMyrtkUniverse'] = facMyrtkUniverse;
        obj['FacNAICSCodes'] = facNAICSCodes;
        obj['FacNaaFlag'] = facNaaFlag;
        obj['FacName'] = facName;
        obj['FacPenaltyCount'] = facPenaltyCount;
        obj['FacPercentMinority'] = facPercentMinority;
        obj['FacPopDen'] = facPopDen;
        obj['FacProgramsWithSNC'] = facProgramsWithSNC;
        obj['FacQtrsWithNC'] = facQtrsWithNC;
        obj['FacReferencePoint'] = facReferencePoint;
        obj['FacSICCodes'] = facSICCodes;
        obj['FacSNCFlg'] = facSNCFlg;
        obj['FacState'] = facState;
        obj['FacStdCountyName'] = facStdCountyName;
        obj['FacStreet'] = facStreet;
        obj['FacTotalPenalties'] = facTotalPenalties;
        obj['FacUsMexBorderFlg'] = facUsMexBorderFlg;
        obj['FacZip'] = facZip;
        obj['FecCaseIDs'] = fecCaseIDs;
        obj['FecLastCaseDate'] = fecLastCaseDate;
        obj['FecNumberOfCases'] = fecNumberOfCases;
        obj['FecTotalPenalties'] = fecTotalPenalties;
        obj['FifraInspections5yr'] = fifraInspections5yr;
        obj['GHGCO2Releases'] = gHGCO2Releases;
        obj['GHGFlag'] = gHGFlag;
        obj['GHGIDs'] = gHGIDs;
        obj['HasPollRpt'] = hasPollRpt;
        obj['Infea5yrFlag'] = infea5yrFlag;
        obj['Insp5yrFlag'] = insp5yrFlag;
        obj['Lower48'] = lower48;
        obj['MaxPctileUs'] = maxPctileUs;
        obj['MaxScore'] = maxScore;
        obj['NC'] = NC;
        obj['NPDESFlag'] = nPDESFlag;
        obj['NPDESIDs'] = nPDESIDs;
        obj['NaaCategories'] = naaCategories;
        obj['NaaPollutants'] = naaPollutants;
        obj['ObjectId'] = objectId;
        obj['Over80CountUs'] = over80CountUs;
        obj['PctileCancerUs'] = pctileCancerUs;
        obj['PctileDpmUs'] = pctileDpmUs;
        obj['PctileO3Us'] = pctileO3Us;
        obj['PctilePctpre1960Us'] = pctilePctpre1960Us;
        obj['PctilePmUs'] = pctilePmUs;
        obj['PctileProximityNPDESUs'] = pctileProximityNPDESUs;
        obj['PctileProximityNplUs'] = pctileProximityNplUs;
        obj['PctileProximityRmpUs'] = pctileProximityRmpUs;
        obj['PctileProximityTsdfUs'] = pctileProximityTsdfUs;
        obj['PctileRespUs'] = pctileRespUs;
        obj['PctileTrafficScoreUs'] = pctileTrafficScoreUs;
        obj['RCRA3yrComplQtrsHistory'] = rCRA3yrComplQtrsHistory;
        obj['RCRAComplianceStatus'] = rCRAComplianceStatus;
        obj['RCRADateLastFormalAction'] = rCRADateLastFormalAction;
        obj['RCRADaysLastEvaluation'] = rCRADaysLastEvaluation;
        obj['RCRAFlag'] = rCRAFlag;
        obj['RCRAFormalActionCount'] = rCRAFormalActionCount;
        obj['RCRAIDs'] = rCRAIDs;
        obj['RCRAInformalCount'] = rCRAInformalCount;
        obj['RCRAInspectionCount'] = rCRAInspectionCount;
        obj['RCRALastPenaltyAmt'] = rCRALastPenaltyAmt;
        obj['RCRALastPenaltyDate'] = rCRALastPenaltyDate;
        obj['RCRANAICS'] = RCRANAICS;
        obj['RCRAPenalties'] = rCRAPenalties;
        obj['RCRAPermitTypes'] = rCRAPermitTypes;
        obj['RCRAQtrsWithNC'] = rCRAQtrsWithNC;
        obj['RCRASNCFlag'] = rCRASNCFlag;
        obj['RegistryID'] = registryID;
        obj['RmpIDs'] = rmpIDs;
        obj['SDWA3yrComplQtrsHistory'] = sDWA3yrComplQtrsHistory;
        obj['SDWAComplianceStatus'] = sDWAComplianceStatus;
        obj['SDWAFormalActionCount'] = sDWAFormalActionCount;
        obj['SDWAIDs'] = sDWAIDs;
        obj['SDWAInformalCount'] = sDWAInformalCount;
        obj['SDWAInspections5yr'] = sDWAInspections5yr;
        obj['SDWAQtrsWithNC'] = sDWAQtrsWithNC;
        obj['SDWASNCFlag'] = sDWASNCFlag;
        obj['SDWASystemTypes'] = sDWASystemTypes;
        obj['SDWISFlag'] = sDWISFlag;
        obj['Score'] = score;
        obj['SemsFlag'] = semsFlag;
        obj['SemsIDs'] = semsIDs;
        obj['SourceID'] = sourceID;
        obj['TRIFlag'] = tRIFlag;
        obj['TRIIDs'] = tRIIDs;
        obj['TRIOffSiteTransfers'] = tRIOffSiteTransfers;
        obj['TRIOnSiteReleases'] = tRIOnSiteReleases;
        obj['TRIReleasesTransfers'] = tRIReleasesTransfers;
        obj['TRIReporter'] = tRIReporter;
        obj['TRIReporterInPast'] = tRIReporterInPast;
        obj['TRIbalFlag'] = tRIbalFlag;
        obj['TscaFlag'] = tscaFlag;
        obj['TscaIDs'] = tscaIDs;
        obj['TscaInspections5yr'] = tscaInspections5yr;
        obj['ViolFlag'] = violFlag;
        obj['WebDocs'] = webDocs;
    }

    /**
     * Constructs a <code>Echo07</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Echo07} obj Optional instance to populate.
     * @return {module:model/Echo07} The populated <code>Echo07</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Echo07();

            if (data.hasOwnProperty('AIRFlag')) {
                obj['AIRFlag'] = ApiClient.convertToType(data['AIRFlag'], 'String');
            }
            if (data.hasOwnProperty('AIRIDs')) {
                obj['AIRIDs'] = ApiClient.convertToType(data['AIRIDs'], 'String');
            }
            if (data.hasOwnProperty('ActiveLower48')) {
                obj['ActiveLower48'] = ApiClient.convertToType(data['ActiveLower48'], 'String');
            }
            if (data.hasOwnProperty('BiosolidsFlag')) {
                obj['BiosolidsFlag'] = ApiClient.convertToType(data['BiosolidsFlag'], 'String');
            }
            if (data.hasOwnProperty('CAA3yrComplQtrsHistory')) {
                obj['CAA3yrComplQtrsHistory'] = ApiClient.convertToType(data['CAA3yrComplQtrsHistory'], 'String');
            }
            if (data.hasOwnProperty('CAAComplianceStatus')) {
                obj['CAAComplianceStatus'] = ApiClient.convertToType(data['CAAComplianceStatus'], 'String');
            }
            if (data.hasOwnProperty('CAADateLastFormalAction')) {
                obj['CAADateLastFormalAction'] = ApiClient.convertToType(data['CAADateLastFormalAction'], 'String');
            }
            if (data.hasOwnProperty('CAADaysLastEvaluation')) {
                obj['CAADaysLastEvaluation'] = ApiClient.convertToType(data['CAADaysLastEvaluation'], 'String');
            }
            if (data.hasOwnProperty('CAAEvaluationCount')) {
                obj['CAAEvaluationCount'] = ApiClient.convertToType(data['CAAEvaluationCount'], 'String');
            }
            if (data.hasOwnProperty('CAAFormalActionCount')) {
                obj['CAAFormalActionCount'] = ApiClient.convertToType(data['CAAFormalActionCount'], 'String');
            }
            if (data.hasOwnProperty('CAAHpvFlag')) {
                obj['CAAHpvFlag'] = ApiClient.convertToType(data['CAAHpvFlag'], 'String');
            }
            if (data.hasOwnProperty('CAAInformalCount')) {
                obj['CAAInformalCount'] = ApiClient.convertToType(data['CAAInformalCount'], 'String');
            }
            if (data.hasOwnProperty('CAALastPenaltyAmt')) {
                obj['CAALastPenaltyAmt'] = ApiClient.convertToType(data['CAALastPenaltyAmt'], 'String');
            }
            if (data.hasOwnProperty('CAALastPenaltyDate')) {
                obj['CAALastPenaltyDate'] = ApiClient.convertToType(data['CAALastPenaltyDate'], 'String');
            }
            if (data.hasOwnProperty('CAANAICS')) {
                obj['CAANAICS'] = ApiClient.convertToType(data['CAANAICS'], 'String');
            }
            if (data.hasOwnProperty('CAAPenalties')) {
                obj['CAAPenalties'] = ApiClient.convertToType(data['CAAPenalties'], 'String');
            }
            if (data.hasOwnProperty('CAAPermitTypes')) {
                obj['CAAPermitTypes'] = ApiClient.convertToType(data['CAAPermitTypes'], 'String');
            }
            if (data.hasOwnProperty('CAAQtrsWithNC')) {
                obj['CAAQtrsWithNC'] = ApiClient.convertToType(data['CAAQtrsWithNC'], 'String');
            }
            if (data.hasOwnProperty('CAASICs')) {
                obj['CAASICs'] = ApiClient.convertToType(data['CAASICs'], 'String');
            }
            if (data.hasOwnProperty('CWA13qtrsComplHistory')) {
                obj['CWA13qtrsComplHistory'] = ApiClient.convertToType(data['CWA13qtrsComplHistory'], 'String');
            }
            if (data.hasOwnProperty('CWA13qtrsEfflntExceedances')) {
                obj['CWA13qtrsEfflntExceedances'] = ApiClient.convertToType(data['CWA13qtrsEfflntExceedances'], 'String');
            }
            if (data.hasOwnProperty('CWA3YrQncrCodes')) {
                obj['CWA3YrQncrCodes'] = ApiClient.convertToType(data['CWA3YrQncrCodes'], 'String');
            }
            if (data.hasOwnProperty('CWAComplianceStatus')) {
                obj['CWAComplianceStatus'] = ApiClient.convertToType(data['CWAComplianceStatus'], 'String');
            }
            if (data.hasOwnProperty('CWAComplianceTracking')) {
                obj['CWAComplianceTracking'] = ApiClient.convertToType(data['CWAComplianceTracking'], 'String');
            }
            if (data.hasOwnProperty('CWADateLastFormalAction')) {
                obj['CWADateLastFormalAction'] = ApiClient.convertToType(data['CWADateLastFormalAction'], 'String');
            }
            if (data.hasOwnProperty('CWADaysLastInspection')) {
                obj['CWADaysLastInspection'] = ApiClient.convertToType(data['CWADaysLastInspection'], 'String');
            }
            if (data.hasOwnProperty('CWAFormalActionCount')) {
                obj['CWAFormalActionCount'] = ApiClient.convertToType(data['CWAFormalActionCount'], 'String');
            }
            if (data.hasOwnProperty('CWAInformalCount')) {
                obj['CWAInformalCount'] = ApiClient.convertToType(data['CWAInformalCount'], 'String');
            }
            if (data.hasOwnProperty('CWAInspectionCount')) {
                obj['CWAInspectionCount'] = ApiClient.convertToType(data['CWAInspectionCount'], 'String');
            }
            if (data.hasOwnProperty('CWALastPenaltyAmt')) {
                obj['CWALastPenaltyAmt'] = ApiClient.convertToType(data['CWALastPenaltyAmt'], 'String');
            }
            if (data.hasOwnProperty('CWALastPenaltyDate')) {
                obj['CWALastPenaltyDate'] = ApiClient.convertToType(data['CWALastPenaltyDate'], 'String');
            }
            if (data.hasOwnProperty('CWANAICS')) {
                obj['CWANAICS'] = ApiClient.convertToType(data['CWANAICS'], 'String');
            }
            if (data.hasOwnProperty('CWAPenalties')) {
                obj['CWAPenalties'] = ApiClient.convertToType(data['CWAPenalties'], 'String');
            }
            if (data.hasOwnProperty('CWAPermitTypes')) {
                obj['CWAPermitTypes'] = ApiClient.convertToType(data['CWAPermitTypes'], 'String');
            }
            if (data.hasOwnProperty('CWAQtrsWithNC')) {
                obj['CWAQtrsWithNC'] = ApiClient.convertToType(data['CWAQtrsWithNC'], 'String');
            }
            if (data.hasOwnProperty('CWASICs')) {
                obj['CWASICs'] = ApiClient.convertToType(data['CWASICs'], 'String');
            }
            if (data.hasOwnProperty('CWASNCFlag')) {
                obj['CWASNCFlag'] = ApiClient.convertToType(data['CWASNCFlag'], 'String');
            }
            if (data.hasOwnProperty('CamdIDs')) {
                obj['CamdIDs'] = ApiClient.convertToType(data['CamdIDs'], 'String');
            }
            if (data.hasOwnProperty('CensusBlockGroup')) {
                obj['CensusBlockGroup'] = ApiClient.convertToType(data['CensusBlockGroup'], 'String');
            }
            if (data.hasOwnProperty('CurrSvFlag')) {
                obj['CurrSvFlag'] = ApiClient.convertToType(data['CurrSvFlag'], 'String');
            }
            if (data.hasOwnProperty('CurrVioFlag')) {
                obj['CurrVioFlag'] = ApiClient.convertToType(data['CurrVioFlag'], 'String');
            }
            if (data.hasOwnProperty('DfrUrl')) {
                obj['DfrUrl'] = ApiClient.convertToType(data['DfrUrl'], 'String');
            }
            if (data.hasOwnProperty('Ea5yrFlag')) {
                obj['Ea5yrFlag'] = ApiClient.convertToType(data['Ea5yrFlag'], 'String');
            }
            if (data.hasOwnProperty('EffChartsFlag')) {
                obj['EffChartsFlag'] = ApiClient.convertToType(data['EffChartsFlag'], 'String');
            }
            if (data.hasOwnProperty('EisFlag')) {
                obj['EisFlag'] = ApiClient.convertToType(data['EisFlag'], 'String');
            }
            if (data.hasOwnProperty('EisIDs')) {
                obj['EisIDs'] = ApiClient.convertToType(data['EisIDs'], 'String');
            }
            if (data.hasOwnProperty('EjscreenFlag')) {
                obj['EjscreenFlag'] = ApiClient.convertToType(data['EjscreenFlag'], 'String');
            }
            if (data.hasOwnProperty('EjscreenFlagUs')) {
                obj['EjscreenFlagUs'] = ApiClient.convertToType(data['EjscreenFlagUs'], 'String');
            }
            if (data.hasOwnProperty('EpcraInspections5yr')) {
                obj['EpcraInspections5yr'] = ApiClient.convertToType(data['EpcraInspections5yr'], 'String');
            }
            if (data.hasOwnProperty('Fac3yrComplianceHistory')) {
                obj['Fac3yrComplianceHistory'] = ApiClient.convertToType(data['Fac3yrComplianceHistory'], 'String');
            }
            if (data.hasOwnProperty('FacAccuracyMeters')) {
                obj['FacAccuracyMeters'] = ApiClient.convertToType(data['FacAccuracyMeters'], 'String');
            }
            if (data.hasOwnProperty('FacActiveFlag')) {
                obj['FacActiveFlag'] = ApiClient.convertToType(data['FacActiveFlag'], 'String');
            }
            if (data.hasOwnProperty('FacChesapeakeBayFlg')) {
                obj['FacChesapeakeBayFlg'] = ApiClient.convertToType(data['FacChesapeakeBayFlg'], 'String');
            }
            if (data.hasOwnProperty('FacCity')) {
                obj['FacCity'] = ApiClient.convertToType(data['FacCity'], 'String');
            }
            if (data.hasOwnProperty('FacCollectionMethod')) {
                obj['FacCollectionMethod'] = ApiClient.convertToType(data['FacCollectionMethod'], 'String');
            }
            if (data.hasOwnProperty('FacComplianceStatus')) {
                obj['FacComplianceStatus'] = ApiClient.convertToType(data['FacComplianceStatus'], 'String');
            }
            if (data.hasOwnProperty('FacCounty')) {
                obj['FacCounty'] = ApiClient.convertToType(data['FacCounty'], 'String');
            }
            if (data.hasOwnProperty('FacDateLastFormalActEPA')) {
                obj['FacDateLastFormalActEPA'] = ApiClient.convertToType(data['FacDateLastFormalActEPA'], 'String');
            }
            if (data.hasOwnProperty('FacDateLastFormalActSt')) {
                obj['FacDateLastFormalActSt'] = ApiClient.convertToType(data['FacDateLastFormalActSt'], 'String');
            }
            if (data.hasOwnProperty('FacDateLastFormalAction')) {
                obj['FacDateLastFormalAction'] = ApiClient.convertToType(data['FacDateLastFormalAction'], 'String');
            }
            if (data.hasOwnProperty('FacDateLastInformalActEPA')) {
                obj['FacDateLastInformalActEPA'] = ApiClient.convertToType(data['FacDateLastInformalActEPA'], 'String');
            }
            if (data.hasOwnProperty('FacDateLastInformalActSt')) {
                obj['FacDateLastInformalActSt'] = ApiClient.convertToType(data['FacDateLastInformalActSt'], 'String');
            }
            if (data.hasOwnProperty('FacDateLastInformalAction')) {
                obj['FacDateLastInformalAction'] = ApiClient.convertToType(data['FacDateLastInformalAction'], 'String');
            }
            if (data.hasOwnProperty('FacDateLastInspection')) {
                obj['FacDateLastInspection'] = ApiClient.convertToType(data['FacDateLastInspection'], 'String');
            }
            if (data.hasOwnProperty('FacDateLastInspectionEPA')) {
                obj['FacDateLastInspectionEPA'] = ApiClient.convertToType(data['FacDateLastInspectionEPA'], 'String');
            }
            if (data.hasOwnProperty('FacDateLastInspectionState')) {
                obj['FacDateLastInspectionState'] = ApiClient.convertToType(data['FacDateLastInspectionState'], 'String');
            }
            if (data.hasOwnProperty('FacDateLastPenalty')) {
                obj['FacDateLastPenalty'] = ApiClient.convertToType(data['FacDateLastPenalty'], 'String');
            }
            if (data.hasOwnProperty('FacDaysLastInspection')) {
                obj['FacDaysLastInspection'] = ApiClient.convertToType(data['FacDaysLastInspection'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedCb2010')) {
                obj['FacDerivedCb2010'] = ApiClient.convertToType(data['FacDerivedCb2010'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedCd113')) {
                obj['FacDerivedCd113'] = ApiClient.convertToType(data['FacDerivedCd113'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedHuc')) {
                obj['FacDerivedHuc'] = ApiClient.convertToType(data['FacDerivedHuc'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedRadWBDHu12')) {
                obj['FacDerivedRadWBDHu12'] = ApiClient.convertToType(data['FacDerivedRadWBDHu12'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedRadWBDHu12Name')) {
                obj['FacDerivedRadWBDHu12Name'] = ApiClient.convertToType(data['FacDerivedRadWBDHu12Name'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedRadWBDHu8')) {
                obj['FacDerivedRadWBDHu8'] = ApiClient.convertToType(data['FacDerivedRadWBDHu8'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedRadWBDHu8Name')) {
                obj['FacDerivedRadWBDHu8Name'] = ApiClient.convertToType(data['FacDerivedRadWBDHu8Name'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedStctyFIPS')) {
                obj['FacDerivedStctyFIPS'] = ApiClient.convertToType(data['FacDerivedStctyFIPS'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedTRIbes')) {
                obj['FacDerivedTRIbes'] = ApiClient.convertToType(data['FacDerivedTRIbes'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedWBD')) {
                obj['FacDerivedWBD'] = ApiClient.convertToType(data['FacDerivedWBD'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedWBDHu12Name')) {
                obj['FacDerivedWBDHu12Name'] = ApiClient.convertToType(data['FacDerivedWBDHu12Name'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedWBDHu8')) {
                obj['FacDerivedWBDHu8'] = ApiClient.convertToType(data['FacDerivedWBDHu8'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedWBDHu8Name')) {
                obj['FacDerivedWBDHu8Name'] = ApiClient.convertToType(data['FacDerivedWBDHu8Name'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedZip')) {
                obj['FacDerivedZip'] = ApiClient.convertToType(data['FacDerivedZip'], 'String');
            }
            if (data.hasOwnProperty('FacEPARegion')) {
                obj['FacEPARegion'] = ApiClient.convertToType(data['FacEPARegion'], 'String');
            }
            if (data.hasOwnProperty('FacFIPSCode')) {
                obj['FacFIPSCode'] = ApiClient.convertToType(data['FacFIPSCode'], 'String');
            }
            if (data.hasOwnProperty('FacFederalAgency')) {
                obj['FacFederalAgency'] = ApiClient.convertToType(data['FacFederalAgency'], 'String');
            }
            if (data.hasOwnProperty('FacFederalAgencyName')) {
                obj['FacFederalAgencyName'] = ApiClient.convertToType(data['FacFederalAgencyName'], 'String');
            }
            if (data.hasOwnProperty('FacFederalFlg')) {
                obj['FacFederalFlg'] = ApiClient.convertToType(data['FacFederalFlg'], 'String');
            }
            if (data.hasOwnProperty('FacFormalActionCount')) {
                obj['FacFormalActionCount'] = ApiClient.convertToType(data['FacFormalActionCount'], 'String');
            }
            if (data.hasOwnProperty('FacImpWaterFlg')) {
                obj['FacImpWaterFlg'] = ApiClient.convertToType(data['FacImpWaterFlg'], 'String');
            }
            if (data.hasOwnProperty('FacIndianCntryFlg')) {
                obj['FacIndianCntryFlg'] = ApiClient.convertToType(data['FacIndianCntryFlg'], 'String');
            }
            if (data.hasOwnProperty('FacIndianSpatialFlg')) {
                obj['FacIndianSpatialFlg'] = ApiClient.convertToType(data['FacIndianSpatialFlg'], 'String');
            }
            if (data.hasOwnProperty('FacInformalCount')) {
                obj['FacInformalCount'] = ApiClient.convertToType(data['FacInformalCount'], 'String');
            }
            if (data.hasOwnProperty('FacInspectionCount')) {
                obj['FacInspectionCount'] = ApiClient.convertToType(data['FacInspectionCount'], 'String');
            }
            if (data.hasOwnProperty('FacLastPenaltyAmt')) {
                obj['FacLastPenaltyAmt'] = ApiClient.convertToType(data['FacLastPenaltyAmt'], 'String');
            }
            if (data.hasOwnProperty('FacLat')) {
                obj['FacLat'] = ApiClient.convertToType(data['FacLat'], 'String');
            }
            if (data.hasOwnProperty('FacLong')) {
                obj['FacLong'] = ApiClient.convertToType(data['FacLong'], 'String');
            }
            if (data.hasOwnProperty('FacMajorFlag')) {
                obj['FacMajorFlag'] = ApiClient.convertToType(data['FacMajorFlag'], 'String');
            }
            if (data.hasOwnProperty('FacMapFlg')) {
                obj['FacMapFlg'] = ApiClient.convertToType(data['FacMapFlg'], 'String');
            }
            if (data.hasOwnProperty('FacMapIcon')) {
                obj['FacMapIcon'] = ApiClient.convertToType(data['FacMapIcon'], 'String');
            }
            if (data.hasOwnProperty('FacMyrtkUniverse')) {
                obj['FacMyrtkUniverse'] = ApiClient.convertToType(data['FacMyrtkUniverse'], 'String');
            }
            if (data.hasOwnProperty('FacNAICSCodes')) {
                obj['FacNAICSCodes'] = ApiClient.convertToType(data['FacNAICSCodes'], 'String');
            }
            if (data.hasOwnProperty('FacNaaFlag')) {
                obj['FacNaaFlag'] = ApiClient.convertToType(data['FacNaaFlag'], 'String');
            }
            if (data.hasOwnProperty('FacName')) {
                obj['FacName'] = ApiClient.convertToType(data['FacName'], 'String');
            }
            if (data.hasOwnProperty('FacPenaltyCount')) {
                obj['FacPenaltyCount'] = ApiClient.convertToType(data['FacPenaltyCount'], 'String');
            }
            if (data.hasOwnProperty('FacPercentMinority')) {
                obj['FacPercentMinority'] = ApiClient.convertToType(data['FacPercentMinority'], 'String');
            }
            if (data.hasOwnProperty('FacPopDen')) {
                obj['FacPopDen'] = ApiClient.convertToType(data['FacPopDen'], 'String');
            }
            if (data.hasOwnProperty('FacProgramsWithSNC')) {
                obj['FacProgramsWithSNC'] = ApiClient.convertToType(data['FacProgramsWithSNC'], 'String');
            }
            if (data.hasOwnProperty('FacQtrsWithNC')) {
                obj['FacQtrsWithNC'] = ApiClient.convertToType(data['FacQtrsWithNC'], 'String');
            }
            if (data.hasOwnProperty('FacReferencePoint')) {
                obj['FacReferencePoint'] = ApiClient.convertToType(data['FacReferencePoint'], 'String');
            }
            if (data.hasOwnProperty('FacSICCodes')) {
                obj['FacSICCodes'] = ApiClient.convertToType(data['FacSICCodes'], 'String');
            }
            if (data.hasOwnProperty('FacSNCFlg')) {
                obj['FacSNCFlg'] = ApiClient.convertToType(data['FacSNCFlg'], 'String');
            }
            if (data.hasOwnProperty('FacState')) {
                obj['FacState'] = ApiClient.convertToType(data['FacState'], 'String');
            }
            if (data.hasOwnProperty('FacStdCountyName')) {
                obj['FacStdCountyName'] = ApiClient.convertToType(data['FacStdCountyName'], 'String');
            }
            if (data.hasOwnProperty('FacStreet')) {
                obj['FacStreet'] = ApiClient.convertToType(data['FacStreet'], 'String');
            }
            if (data.hasOwnProperty('FacTotalPenalties')) {
                obj['FacTotalPenalties'] = ApiClient.convertToType(data['FacTotalPenalties'], 'String');
            }
            if (data.hasOwnProperty('FacUsMexBorderFlg')) {
                obj['FacUsMexBorderFlg'] = ApiClient.convertToType(data['FacUsMexBorderFlg'], 'String');
            }
            if (data.hasOwnProperty('FacZip')) {
                obj['FacZip'] = ApiClient.convertToType(data['FacZip'], 'String');
            }
            if (data.hasOwnProperty('FecCaseIDs')) {
                obj['FecCaseIDs'] = ApiClient.convertToType(data['FecCaseIDs'], 'String');
            }
            if (data.hasOwnProperty('FecLastCaseDate')) {
                obj['FecLastCaseDate'] = ApiClient.convertToType(data['FecLastCaseDate'], 'String');
            }
            if (data.hasOwnProperty('FecNumberOfCases')) {
                obj['FecNumberOfCases'] = ApiClient.convertToType(data['FecNumberOfCases'], 'String');
            }
            if (data.hasOwnProperty('FecTotalPenalties')) {
                obj['FecTotalPenalties'] = ApiClient.convertToType(data['FecTotalPenalties'], 'String');
            }
            if (data.hasOwnProperty('FifraInspections5yr')) {
                obj['FifraInspections5yr'] = ApiClient.convertToType(data['FifraInspections5yr'], 'String');
            }
            if (data.hasOwnProperty('GHGCO2Releases')) {
                obj['GHGCO2Releases'] = ApiClient.convertToType(data['GHGCO2Releases'], 'String');
            }
            if (data.hasOwnProperty('GHGFlag')) {
                obj['GHGFlag'] = ApiClient.convertToType(data['GHGFlag'], 'String');
            }
            if (data.hasOwnProperty('GHGIDs')) {
                obj['GHGIDs'] = ApiClient.convertToType(data['GHGIDs'], 'String');
            }
            if (data.hasOwnProperty('HasPollRpt')) {
                obj['HasPollRpt'] = ApiClient.convertToType(data['HasPollRpt'], 'String');
            }
            if (data.hasOwnProperty('Infea5yrFlag')) {
                obj['Infea5yrFlag'] = ApiClient.convertToType(data['Infea5yrFlag'], 'String');
            }
            if (data.hasOwnProperty('Insp5yrFlag')) {
                obj['Insp5yrFlag'] = ApiClient.convertToType(data['Insp5yrFlag'], 'String');
            }
            if (data.hasOwnProperty('Lower48')) {
                obj['Lower48'] = ApiClient.convertToType(data['Lower48'], 'String');
            }
            if (data.hasOwnProperty('MaxPctileUs')) {
                obj['MaxPctileUs'] = ApiClient.convertToType(data['MaxPctileUs'], 'String');
            }
            if (data.hasOwnProperty('MaxScore')) {
                obj['MaxScore'] = ApiClient.convertToType(data['MaxScore'], 'String');
            }
            if (data.hasOwnProperty('NC')) {
                obj['NC'] = ApiClient.convertToType(data['NC'], 'String');
            }
            if (data.hasOwnProperty('NPDESFlag')) {
                obj['NPDESFlag'] = ApiClient.convertToType(data['NPDESFlag'], 'String');
            }
            if (data.hasOwnProperty('NPDESIDs')) {
                obj['NPDESIDs'] = ApiClient.convertToType(data['NPDESIDs'], 'String');
            }
            if (data.hasOwnProperty('NaaCategories')) {
                obj['NaaCategories'] = ApiClient.convertToType(data['NaaCategories'], 'String');
            }
            if (data.hasOwnProperty('NaaPollutants')) {
                obj['NaaPollutants'] = ApiClient.convertToType(data['NaaPollutants'], 'String');
            }
            if (data.hasOwnProperty('ObjectId')) {
                obj['ObjectId'] = ApiClient.convertToType(data['ObjectId'], 'String');
            }
            if (data.hasOwnProperty('Over80CountUs')) {
                obj['Over80CountUs'] = ApiClient.convertToType(data['Over80CountUs'], 'String');
            }
            if (data.hasOwnProperty('PctileCancerUs')) {
                obj['PctileCancerUs'] = ApiClient.convertToType(data['PctileCancerUs'], 'String');
            }
            if (data.hasOwnProperty('PctileDpmUs')) {
                obj['PctileDpmUs'] = ApiClient.convertToType(data['PctileDpmUs'], 'String');
            }
            if (data.hasOwnProperty('PctileO3Us')) {
                obj['PctileO3Us'] = ApiClient.convertToType(data['PctileO3Us'], 'String');
            }
            if (data.hasOwnProperty('PctilePctpre1960Us')) {
                obj['PctilePctpre1960Us'] = ApiClient.convertToType(data['PctilePctpre1960Us'], 'String');
            }
            if (data.hasOwnProperty('PctilePmUs')) {
                obj['PctilePmUs'] = ApiClient.convertToType(data['PctilePmUs'], 'String');
            }
            if (data.hasOwnProperty('PctileProximityNPDESUs')) {
                obj['PctileProximityNPDESUs'] = ApiClient.convertToType(data['PctileProximityNPDESUs'], 'String');
            }
            if (data.hasOwnProperty('PctileProximityNplUs')) {
                obj['PctileProximityNplUs'] = ApiClient.convertToType(data['PctileProximityNplUs'], 'String');
            }
            if (data.hasOwnProperty('PctileProximityRmpUs')) {
                obj['PctileProximityRmpUs'] = ApiClient.convertToType(data['PctileProximityRmpUs'], 'String');
            }
            if (data.hasOwnProperty('PctileProximityTsdfUs')) {
                obj['PctileProximityTsdfUs'] = ApiClient.convertToType(data['PctileProximityTsdfUs'], 'String');
            }
            if (data.hasOwnProperty('PctileRespUs')) {
                obj['PctileRespUs'] = ApiClient.convertToType(data['PctileRespUs'], 'String');
            }
            if (data.hasOwnProperty('PctileTrafficScoreUs')) {
                obj['PctileTrafficScoreUs'] = ApiClient.convertToType(data['PctileTrafficScoreUs'], 'String');
            }
            if (data.hasOwnProperty('RCRA3yrComplQtrsHistory')) {
                obj['RCRA3yrComplQtrsHistory'] = ApiClient.convertToType(data['RCRA3yrComplQtrsHistory'], 'String');
            }
            if (data.hasOwnProperty('RCRAComplianceStatus')) {
                obj['RCRAComplianceStatus'] = ApiClient.convertToType(data['RCRAComplianceStatus'], 'String');
            }
            if (data.hasOwnProperty('RCRADateLastFormalAction')) {
                obj['RCRADateLastFormalAction'] = ApiClient.convertToType(data['RCRADateLastFormalAction'], 'String');
            }
            if (data.hasOwnProperty('RCRADaysLastEvaluation')) {
                obj['RCRADaysLastEvaluation'] = ApiClient.convertToType(data['RCRADaysLastEvaluation'], 'String');
            }
            if (data.hasOwnProperty('RCRAFlag')) {
                obj['RCRAFlag'] = ApiClient.convertToType(data['RCRAFlag'], 'String');
            }
            if (data.hasOwnProperty('RCRAFormalActionCount')) {
                obj['RCRAFormalActionCount'] = ApiClient.convertToType(data['RCRAFormalActionCount'], 'String');
            }
            if (data.hasOwnProperty('RCRAIDs')) {
                obj['RCRAIDs'] = ApiClient.convertToType(data['RCRAIDs'], 'String');
            }
            if (data.hasOwnProperty('RCRAInformalCount')) {
                obj['RCRAInformalCount'] = ApiClient.convertToType(data['RCRAInformalCount'], 'String');
            }
            if (data.hasOwnProperty('RCRAInspectionCount')) {
                obj['RCRAInspectionCount'] = ApiClient.convertToType(data['RCRAInspectionCount'], 'String');
            }
            if (data.hasOwnProperty('RCRALastPenaltyAmt')) {
                obj['RCRALastPenaltyAmt'] = ApiClient.convertToType(data['RCRALastPenaltyAmt'], 'String');
            }
            if (data.hasOwnProperty('RCRALastPenaltyDate')) {
                obj['RCRALastPenaltyDate'] = ApiClient.convertToType(data['RCRALastPenaltyDate'], 'String');
            }
            if (data.hasOwnProperty('RCRANAICS')) {
                obj['RCRANAICS'] = ApiClient.convertToType(data['RCRANAICS'], 'String');
            }
            if (data.hasOwnProperty('RCRAPenalties')) {
                obj['RCRAPenalties'] = ApiClient.convertToType(data['RCRAPenalties'], 'String');
            }
            if (data.hasOwnProperty('RCRAPermitTypes')) {
                obj['RCRAPermitTypes'] = ApiClient.convertToType(data['RCRAPermitTypes'], 'String');
            }
            if (data.hasOwnProperty('RCRAQtrsWithNC')) {
                obj['RCRAQtrsWithNC'] = ApiClient.convertToType(data['RCRAQtrsWithNC'], 'String');
            }
            if (data.hasOwnProperty('RCRASNCFlag')) {
                obj['RCRASNCFlag'] = ApiClient.convertToType(data['RCRASNCFlag'], 'String');
            }
            if (data.hasOwnProperty('RegistryID')) {
                obj['RegistryID'] = ApiClient.convertToType(data['RegistryID'], 'String');
            }
            if (data.hasOwnProperty('RmpIDs')) {
                obj['RmpIDs'] = ApiClient.convertToType(data['RmpIDs'], 'String');
            }
            if (data.hasOwnProperty('SDWA3yrComplQtrsHistory')) {
                obj['SDWA3yrComplQtrsHistory'] = ApiClient.convertToType(data['SDWA3yrComplQtrsHistory'], 'String');
            }
            if (data.hasOwnProperty('SDWAComplianceStatus')) {
                obj['SDWAComplianceStatus'] = ApiClient.convertToType(data['SDWAComplianceStatus'], 'String');
            }
            if (data.hasOwnProperty('SDWAFormalActionCount')) {
                obj['SDWAFormalActionCount'] = ApiClient.convertToType(data['SDWAFormalActionCount'], 'String');
            }
            if (data.hasOwnProperty('SDWAIDs')) {
                obj['SDWAIDs'] = ApiClient.convertToType(data['SDWAIDs'], 'String');
            }
            if (data.hasOwnProperty('SDWAInformalCount')) {
                obj['SDWAInformalCount'] = ApiClient.convertToType(data['SDWAInformalCount'], 'String');
            }
            if (data.hasOwnProperty('SDWAInspections5yr')) {
                obj['SDWAInspections5yr'] = ApiClient.convertToType(data['SDWAInspections5yr'], 'String');
            }
            if (data.hasOwnProperty('SDWAQtrsWithNC')) {
                obj['SDWAQtrsWithNC'] = ApiClient.convertToType(data['SDWAQtrsWithNC'], 'String');
            }
            if (data.hasOwnProperty('SDWASNCFlag')) {
                obj['SDWASNCFlag'] = ApiClient.convertToType(data['SDWASNCFlag'], 'String');
            }
            if (data.hasOwnProperty('SDWASystemTypes')) {
                obj['SDWASystemTypes'] = ApiClient.convertToType(data['SDWASystemTypes'], 'String');
            }
            if (data.hasOwnProperty('SDWISFlag')) {
                obj['SDWISFlag'] = ApiClient.convertToType(data['SDWISFlag'], 'String');
            }
            if (data.hasOwnProperty('Score')) {
                obj['Score'] = ApiClient.convertToType(data['Score'], 'String');
            }
            if (data.hasOwnProperty('SemsFlag')) {
                obj['SemsFlag'] = ApiClient.convertToType(data['SemsFlag'], 'String');
            }
            if (data.hasOwnProperty('SemsIDs')) {
                obj['SemsIDs'] = ApiClient.convertToType(data['SemsIDs'], 'String');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('TRIFlag')) {
                obj['TRIFlag'] = ApiClient.convertToType(data['TRIFlag'], 'String');
            }
            if (data.hasOwnProperty('TRIIDs')) {
                obj['TRIIDs'] = ApiClient.convertToType(data['TRIIDs'], 'String');
            }
            if (data.hasOwnProperty('TRIOffSiteTransfers')) {
                obj['TRIOffSiteTransfers'] = ApiClient.convertToType(data['TRIOffSiteTransfers'], 'String');
            }
            if (data.hasOwnProperty('TRIOnSiteReleases')) {
                obj['TRIOnSiteReleases'] = ApiClient.convertToType(data['TRIOnSiteReleases'], 'String');
            }
            if (data.hasOwnProperty('TRIReleasesTransfers')) {
                obj['TRIReleasesTransfers'] = ApiClient.convertToType(data['TRIReleasesTransfers'], 'String');
            }
            if (data.hasOwnProperty('TRIReporter')) {
                obj['TRIReporter'] = ApiClient.convertToType(data['TRIReporter'], 'String');
            }
            if (data.hasOwnProperty('TRIReporterInPast')) {
                obj['TRIReporterInPast'] = ApiClient.convertToType(data['TRIReporterInPast'], 'String');
            }
            if (data.hasOwnProperty('TRIbalFlag')) {
                obj['TRIbalFlag'] = ApiClient.convertToType(data['TRIbalFlag'], 'String');
            }
            if (data.hasOwnProperty('TscaFlag')) {
                obj['TscaFlag'] = ApiClient.convertToType(data['TscaFlag'], 'String');
            }
            if (data.hasOwnProperty('TscaIDs')) {
                obj['TscaIDs'] = ApiClient.convertToType(data['TscaIDs'], 'String');
            }
            if (data.hasOwnProperty('TscaInspections5yr')) {
                obj['TscaInspections5yr'] = ApiClient.convertToType(data['TscaInspections5yr'], 'String');
            }
            if (data.hasOwnProperty('ViolFlag')) {
                obj['ViolFlag'] = ApiClient.convertToType(data['ViolFlag'], 'String');
            }
            if (data.hasOwnProperty('WebDocs')) {
                obj['WebDocs'] = ApiClient.convertToType(data['WebDocs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Echo07</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Echo07</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Echo07.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AIRFlag'] && !(typeof data['AIRFlag'] === 'string' || data['AIRFlag'] instanceof String)) {
            throw new Error("Expected the field `AIRFlag` to be a primitive type in the JSON string but got " + data['AIRFlag']);
        }
        // ensure the json data is a string
        if (data['AIRIDs'] && !(typeof data['AIRIDs'] === 'string' || data['AIRIDs'] instanceof String)) {
            throw new Error("Expected the field `AIRIDs` to be a primitive type in the JSON string but got " + data['AIRIDs']);
        }
        // ensure the json data is a string
        if (data['ActiveLower48'] && !(typeof data['ActiveLower48'] === 'string' || data['ActiveLower48'] instanceof String)) {
            throw new Error("Expected the field `ActiveLower48` to be a primitive type in the JSON string but got " + data['ActiveLower48']);
        }
        // ensure the json data is a string
        if (data['BiosolidsFlag'] && !(typeof data['BiosolidsFlag'] === 'string' || data['BiosolidsFlag'] instanceof String)) {
            throw new Error("Expected the field `BiosolidsFlag` to be a primitive type in the JSON string but got " + data['BiosolidsFlag']);
        }
        // ensure the json data is a string
        if (data['CAA3yrComplQtrsHistory'] && !(typeof data['CAA3yrComplQtrsHistory'] === 'string' || data['CAA3yrComplQtrsHistory'] instanceof String)) {
            throw new Error("Expected the field `CAA3yrComplQtrsHistory` to be a primitive type in the JSON string but got " + data['CAA3yrComplQtrsHistory']);
        }
        // ensure the json data is a string
        if (data['CAAComplianceStatus'] && !(typeof data['CAAComplianceStatus'] === 'string' || data['CAAComplianceStatus'] instanceof String)) {
            throw new Error("Expected the field `CAAComplianceStatus` to be a primitive type in the JSON string but got " + data['CAAComplianceStatus']);
        }
        // ensure the json data is a string
        if (data['CAADateLastFormalAction'] && !(typeof data['CAADateLastFormalAction'] === 'string' || data['CAADateLastFormalAction'] instanceof String)) {
            throw new Error("Expected the field `CAADateLastFormalAction` to be a primitive type in the JSON string but got " + data['CAADateLastFormalAction']);
        }
        // ensure the json data is a string
        if (data['CAADaysLastEvaluation'] && !(typeof data['CAADaysLastEvaluation'] === 'string' || data['CAADaysLastEvaluation'] instanceof String)) {
            throw new Error("Expected the field `CAADaysLastEvaluation` to be a primitive type in the JSON string but got " + data['CAADaysLastEvaluation']);
        }
        // ensure the json data is a string
        if (data['CAAEvaluationCount'] && !(typeof data['CAAEvaluationCount'] === 'string' || data['CAAEvaluationCount'] instanceof String)) {
            throw new Error("Expected the field `CAAEvaluationCount` to be a primitive type in the JSON string but got " + data['CAAEvaluationCount']);
        }
        // ensure the json data is a string
        if (data['CAAFormalActionCount'] && !(typeof data['CAAFormalActionCount'] === 'string' || data['CAAFormalActionCount'] instanceof String)) {
            throw new Error("Expected the field `CAAFormalActionCount` to be a primitive type in the JSON string but got " + data['CAAFormalActionCount']);
        }
        // ensure the json data is a string
        if (data['CAAHpvFlag'] && !(typeof data['CAAHpvFlag'] === 'string' || data['CAAHpvFlag'] instanceof String)) {
            throw new Error("Expected the field `CAAHpvFlag` to be a primitive type in the JSON string but got " + data['CAAHpvFlag']);
        }
        // ensure the json data is a string
        if (data['CAAInformalCount'] && !(typeof data['CAAInformalCount'] === 'string' || data['CAAInformalCount'] instanceof String)) {
            throw new Error("Expected the field `CAAInformalCount` to be a primitive type in the JSON string but got " + data['CAAInformalCount']);
        }
        // ensure the json data is a string
        if (data['CAALastPenaltyAmt'] && !(typeof data['CAALastPenaltyAmt'] === 'string' || data['CAALastPenaltyAmt'] instanceof String)) {
            throw new Error("Expected the field `CAALastPenaltyAmt` to be a primitive type in the JSON string but got " + data['CAALastPenaltyAmt']);
        }
        // ensure the json data is a string
        if (data['CAALastPenaltyDate'] && !(typeof data['CAALastPenaltyDate'] === 'string' || data['CAALastPenaltyDate'] instanceof String)) {
            throw new Error("Expected the field `CAALastPenaltyDate` to be a primitive type in the JSON string but got " + data['CAALastPenaltyDate']);
        }
        // ensure the json data is a string
        if (data['CAANAICS'] && !(typeof data['CAANAICS'] === 'string' || data['CAANAICS'] instanceof String)) {
            throw new Error("Expected the field `CAANAICS` to be a primitive type in the JSON string but got " + data['CAANAICS']);
        }
        // ensure the json data is a string
        if (data['CAAPenalties'] && !(typeof data['CAAPenalties'] === 'string' || data['CAAPenalties'] instanceof String)) {
            throw new Error("Expected the field `CAAPenalties` to be a primitive type in the JSON string but got " + data['CAAPenalties']);
        }
        // ensure the json data is a string
        if (data['CAAPermitTypes'] && !(typeof data['CAAPermitTypes'] === 'string' || data['CAAPermitTypes'] instanceof String)) {
            throw new Error("Expected the field `CAAPermitTypes` to be a primitive type in the JSON string but got " + data['CAAPermitTypes']);
        }
        // ensure the json data is a string
        if (data['CAAQtrsWithNC'] && !(typeof data['CAAQtrsWithNC'] === 'string' || data['CAAQtrsWithNC'] instanceof String)) {
            throw new Error("Expected the field `CAAQtrsWithNC` to be a primitive type in the JSON string but got " + data['CAAQtrsWithNC']);
        }
        // ensure the json data is a string
        if (data['CAASICs'] && !(typeof data['CAASICs'] === 'string' || data['CAASICs'] instanceof String)) {
            throw new Error("Expected the field `CAASICs` to be a primitive type in the JSON string but got " + data['CAASICs']);
        }
        // ensure the json data is a string
        if (data['CWA13qtrsComplHistory'] && !(typeof data['CWA13qtrsComplHistory'] === 'string' || data['CWA13qtrsComplHistory'] instanceof String)) {
            throw new Error("Expected the field `CWA13qtrsComplHistory` to be a primitive type in the JSON string but got " + data['CWA13qtrsComplHistory']);
        }
        // ensure the json data is a string
        if (data['CWA13qtrsEfflntExceedances'] && !(typeof data['CWA13qtrsEfflntExceedances'] === 'string' || data['CWA13qtrsEfflntExceedances'] instanceof String)) {
            throw new Error("Expected the field `CWA13qtrsEfflntExceedances` to be a primitive type in the JSON string but got " + data['CWA13qtrsEfflntExceedances']);
        }
        // ensure the json data is a string
        if (data['CWA3YrQncrCodes'] && !(typeof data['CWA3YrQncrCodes'] === 'string' || data['CWA3YrQncrCodes'] instanceof String)) {
            throw new Error("Expected the field `CWA3YrQncrCodes` to be a primitive type in the JSON string but got " + data['CWA3YrQncrCodes']);
        }
        // ensure the json data is a string
        if (data['CWAComplianceStatus'] && !(typeof data['CWAComplianceStatus'] === 'string' || data['CWAComplianceStatus'] instanceof String)) {
            throw new Error("Expected the field `CWAComplianceStatus` to be a primitive type in the JSON string but got " + data['CWAComplianceStatus']);
        }
        // ensure the json data is a string
        if (data['CWAComplianceTracking'] && !(typeof data['CWAComplianceTracking'] === 'string' || data['CWAComplianceTracking'] instanceof String)) {
            throw new Error("Expected the field `CWAComplianceTracking` to be a primitive type in the JSON string but got " + data['CWAComplianceTracking']);
        }
        // ensure the json data is a string
        if (data['CWADateLastFormalAction'] && !(typeof data['CWADateLastFormalAction'] === 'string' || data['CWADateLastFormalAction'] instanceof String)) {
            throw new Error("Expected the field `CWADateLastFormalAction` to be a primitive type in the JSON string but got " + data['CWADateLastFormalAction']);
        }
        // ensure the json data is a string
        if (data['CWADaysLastInspection'] && !(typeof data['CWADaysLastInspection'] === 'string' || data['CWADaysLastInspection'] instanceof String)) {
            throw new Error("Expected the field `CWADaysLastInspection` to be a primitive type in the JSON string but got " + data['CWADaysLastInspection']);
        }
        // ensure the json data is a string
        if (data['CWAFormalActionCount'] && !(typeof data['CWAFormalActionCount'] === 'string' || data['CWAFormalActionCount'] instanceof String)) {
            throw new Error("Expected the field `CWAFormalActionCount` to be a primitive type in the JSON string but got " + data['CWAFormalActionCount']);
        }
        // ensure the json data is a string
        if (data['CWAInformalCount'] && !(typeof data['CWAInformalCount'] === 'string' || data['CWAInformalCount'] instanceof String)) {
            throw new Error("Expected the field `CWAInformalCount` to be a primitive type in the JSON string but got " + data['CWAInformalCount']);
        }
        // ensure the json data is a string
        if (data['CWAInspectionCount'] && !(typeof data['CWAInspectionCount'] === 'string' || data['CWAInspectionCount'] instanceof String)) {
            throw new Error("Expected the field `CWAInspectionCount` to be a primitive type in the JSON string but got " + data['CWAInspectionCount']);
        }
        // ensure the json data is a string
        if (data['CWALastPenaltyAmt'] && !(typeof data['CWALastPenaltyAmt'] === 'string' || data['CWALastPenaltyAmt'] instanceof String)) {
            throw new Error("Expected the field `CWALastPenaltyAmt` to be a primitive type in the JSON string but got " + data['CWALastPenaltyAmt']);
        }
        // ensure the json data is a string
        if (data['CWALastPenaltyDate'] && !(typeof data['CWALastPenaltyDate'] === 'string' || data['CWALastPenaltyDate'] instanceof String)) {
            throw new Error("Expected the field `CWALastPenaltyDate` to be a primitive type in the JSON string but got " + data['CWALastPenaltyDate']);
        }
        // ensure the json data is a string
        if (data['CWANAICS'] && !(typeof data['CWANAICS'] === 'string' || data['CWANAICS'] instanceof String)) {
            throw new Error("Expected the field `CWANAICS` to be a primitive type in the JSON string but got " + data['CWANAICS']);
        }
        // ensure the json data is a string
        if (data['CWAPenalties'] && !(typeof data['CWAPenalties'] === 'string' || data['CWAPenalties'] instanceof String)) {
            throw new Error("Expected the field `CWAPenalties` to be a primitive type in the JSON string but got " + data['CWAPenalties']);
        }
        // ensure the json data is a string
        if (data['CWAPermitTypes'] && !(typeof data['CWAPermitTypes'] === 'string' || data['CWAPermitTypes'] instanceof String)) {
            throw new Error("Expected the field `CWAPermitTypes` to be a primitive type in the JSON string but got " + data['CWAPermitTypes']);
        }
        // ensure the json data is a string
        if (data['CWAQtrsWithNC'] && !(typeof data['CWAQtrsWithNC'] === 'string' || data['CWAQtrsWithNC'] instanceof String)) {
            throw new Error("Expected the field `CWAQtrsWithNC` to be a primitive type in the JSON string but got " + data['CWAQtrsWithNC']);
        }
        // ensure the json data is a string
        if (data['CWASICs'] && !(typeof data['CWASICs'] === 'string' || data['CWASICs'] instanceof String)) {
            throw new Error("Expected the field `CWASICs` to be a primitive type in the JSON string but got " + data['CWASICs']);
        }
        // ensure the json data is a string
        if (data['CWASNCFlag'] && !(typeof data['CWASNCFlag'] === 'string' || data['CWASNCFlag'] instanceof String)) {
            throw new Error("Expected the field `CWASNCFlag` to be a primitive type in the JSON string but got " + data['CWASNCFlag']);
        }
        // ensure the json data is a string
        if (data['CamdIDs'] && !(typeof data['CamdIDs'] === 'string' || data['CamdIDs'] instanceof String)) {
            throw new Error("Expected the field `CamdIDs` to be a primitive type in the JSON string but got " + data['CamdIDs']);
        }
        // ensure the json data is a string
        if (data['CensusBlockGroup'] && !(typeof data['CensusBlockGroup'] === 'string' || data['CensusBlockGroup'] instanceof String)) {
            throw new Error("Expected the field `CensusBlockGroup` to be a primitive type in the JSON string but got " + data['CensusBlockGroup']);
        }
        // ensure the json data is a string
        if (data['CurrSvFlag'] && !(typeof data['CurrSvFlag'] === 'string' || data['CurrSvFlag'] instanceof String)) {
            throw new Error("Expected the field `CurrSvFlag` to be a primitive type in the JSON string but got " + data['CurrSvFlag']);
        }
        // ensure the json data is a string
        if (data['CurrVioFlag'] && !(typeof data['CurrVioFlag'] === 'string' || data['CurrVioFlag'] instanceof String)) {
            throw new Error("Expected the field `CurrVioFlag` to be a primitive type in the JSON string but got " + data['CurrVioFlag']);
        }
        // ensure the json data is a string
        if (data['DfrUrl'] && !(typeof data['DfrUrl'] === 'string' || data['DfrUrl'] instanceof String)) {
            throw new Error("Expected the field `DfrUrl` to be a primitive type in the JSON string but got " + data['DfrUrl']);
        }
        // ensure the json data is a string
        if (data['Ea5yrFlag'] && !(typeof data['Ea5yrFlag'] === 'string' || data['Ea5yrFlag'] instanceof String)) {
            throw new Error("Expected the field `Ea5yrFlag` to be a primitive type in the JSON string but got " + data['Ea5yrFlag']);
        }
        // ensure the json data is a string
        if (data['EffChartsFlag'] && !(typeof data['EffChartsFlag'] === 'string' || data['EffChartsFlag'] instanceof String)) {
            throw new Error("Expected the field `EffChartsFlag` to be a primitive type in the JSON string but got " + data['EffChartsFlag']);
        }
        // ensure the json data is a string
        if (data['EisFlag'] && !(typeof data['EisFlag'] === 'string' || data['EisFlag'] instanceof String)) {
            throw new Error("Expected the field `EisFlag` to be a primitive type in the JSON string but got " + data['EisFlag']);
        }
        // ensure the json data is a string
        if (data['EisIDs'] && !(typeof data['EisIDs'] === 'string' || data['EisIDs'] instanceof String)) {
            throw new Error("Expected the field `EisIDs` to be a primitive type in the JSON string but got " + data['EisIDs']);
        }
        // ensure the json data is a string
        if (data['EjscreenFlag'] && !(typeof data['EjscreenFlag'] === 'string' || data['EjscreenFlag'] instanceof String)) {
            throw new Error("Expected the field `EjscreenFlag` to be a primitive type in the JSON string but got " + data['EjscreenFlag']);
        }
        // ensure the json data is a string
        if (data['EjscreenFlagUs'] && !(typeof data['EjscreenFlagUs'] === 'string' || data['EjscreenFlagUs'] instanceof String)) {
            throw new Error("Expected the field `EjscreenFlagUs` to be a primitive type in the JSON string but got " + data['EjscreenFlagUs']);
        }
        // ensure the json data is a string
        if (data['EpcraInspections5yr'] && !(typeof data['EpcraInspections5yr'] === 'string' || data['EpcraInspections5yr'] instanceof String)) {
            throw new Error("Expected the field `EpcraInspections5yr` to be a primitive type in the JSON string but got " + data['EpcraInspections5yr']);
        }
        // ensure the json data is a string
        if (data['Fac3yrComplianceHistory'] && !(typeof data['Fac3yrComplianceHistory'] === 'string' || data['Fac3yrComplianceHistory'] instanceof String)) {
            throw new Error("Expected the field `Fac3yrComplianceHistory` to be a primitive type in the JSON string but got " + data['Fac3yrComplianceHistory']);
        }
        // ensure the json data is a string
        if (data['FacAccuracyMeters'] && !(typeof data['FacAccuracyMeters'] === 'string' || data['FacAccuracyMeters'] instanceof String)) {
            throw new Error("Expected the field `FacAccuracyMeters` to be a primitive type in the JSON string but got " + data['FacAccuracyMeters']);
        }
        // ensure the json data is a string
        if (data['FacActiveFlag'] && !(typeof data['FacActiveFlag'] === 'string' || data['FacActiveFlag'] instanceof String)) {
            throw new Error("Expected the field `FacActiveFlag` to be a primitive type in the JSON string but got " + data['FacActiveFlag']);
        }
        // ensure the json data is a string
        if (data['FacChesapeakeBayFlg'] && !(typeof data['FacChesapeakeBayFlg'] === 'string' || data['FacChesapeakeBayFlg'] instanceof String)) {
            throw new Error("Expected the field `FacChesapeakeBayFlg` to be a primitive type in the JSON string but got " + data['FacChesapeakeBayFlg']);
        }
        // ensure the json data is a string
        if (data['FacCity'] && !(typeof data['FacCity'] === 'string' || data['FacCity'] instanceof String)) {
            throw new Error("Expected the field `FacCity` to be a primitive type in the JSON string but got " + data['FacCity']);
        }
        // ensure the json data is a string
        if (data['FacCollectionMethod'] && !(typeof data['FacCollectionMethod'] === 'string' || data['FacCollectionMethod'] instanceof String)) {
            throw new Error("Expected the field `FacCollectionMethod` to be a primitive type in the JSON string but got " + data['FacCollectionMethod']);
        }
        // ensure the json data is a string
        if (data['FacComplianceStatus'] && !(typeof data['FacComplianceStatus'] === 'string' || data['FacComplianceStatus'] instanceof String)) {
            throw new Error("Expected the field `FacComplianceStatus` to be a primitive type in the JSON string but got " + data['FacComplianceStatus']);
        }
        // ensure the json data is a string
        if (data['FacCounty'] && !(typeof data['FacCounty'] === 'string' || data['FacCounty'] instanceof String)) {
            throw new Error("Expected the field `FacCounty` to be a primitive type in the JSON string but got " + data['FacCounty']);
        }
        // ensure the json data is a string
        if (data['FacDateLastFormalActEPA'] && !(typeof data['FacDateLastFormalActEPA'] === 'string' || data['FacDateLastFormalActEPA'] instanceof String)) {
            throw new Error("Expected the field `FacDateLastFormalActEPA` to be a primitive type in the JSON string but got " + data['FacDateLastFormalActEPA']);
        }
        // ensure the json data is a string
        if (data['FacDateLastFormalActSt'] && !(typeof data['FacDateLastFormalActSt'] === 'string' || data['FacDateLastFormalActSt'] instanceof String)) {
            throw new Error("Expected the field `FacDateLastFormalActSt` to be a primitive type in the JSON string but got " + data['FacDateLastFormalActSt']);
        }
        // ensure the json data is a string
        if (data['FacDateLastFormalAction'] && !(typeof data['FacDateLastFormalAction'] === 'string' || data['FacDateLastFormalAction'] instanceof String)) {
            throw new Error("Expected the field `FacDateLastFormalAction` to be a primitive type in the JSON string but got " + data['FacDateLastFormalAction']);
        }
        // ensure the json data is a string
        if (data['FacDateLastInformalActEPA'] && !(typeof data['FacDateLastInformalActEPA'] === 'string' || data['FacDateLastInformalActEPA'] instanceof String)) {
            throw new Error("Expected the field `FacDateLastInformalActEPA` to be a primitive type in the JSON string but got " + data['FacDateLastInformalActEPA']);
        }
        // ensure the json data is a string
        if (data['FacDateLastInformalActSt'] && !(typeof data['FacDateLastInformalActSt'] === 'string' || data['FacDateLastInformalActSt'] instanceof String)) {
            throw new Error("Expected the field `FacDateLastInformalActSt` to be a primitive type in the JSON string but got " + data['FacDateLastInformalActSt']);
        }
        // ensure the json data is a string
        if (data['FacDateLastInformalAction'] && !(typeof data['FacDateLastInformalAction'] === 'string' || data['FacDateLastInformalAction'] instanceof String)) {
            throw new Error("Expected the field `FacDateLastInformalAction` to be a primitive type in the JSON string but got " + data['FacDateLastInformalAction']);
        }
        // ensure the json data is a string
        if (data['FacDateLastInspection'] && !(typeof data['FacDateLastInspection'] === 'string' || data['FacDateLastInspection'] instanceof String)) {
            throw new Error("Expected the field `FacDateLastInspection` to be a primitive type in the JSON string but got " + data['FacDateLastInspection']);
        }
        // ensure the json data is a string
        if (data['FacDateLastInspectionEPA'] && !(typeof data['FacDateLastInspectionEPA'] === 'string' || data['FacDateLastInspectionEPA'] instanceof String)) {
            throw new Error("Expected the field `FacDateLastInspectionEPA` to be a primitive type in the JSON string but got " + data['FacDateLastInspectionEPA']);
        }
        // ensure the json data is a string
        if (data['FacDateLastInspectionState'] && !(typeof data['FacDateLastInspectionState'] === 'string' || data['FacDateLastInspectionState'] instanceof String)) {
            throw new Error("Expected the field `FacDateLastInspectionState` to be a primitive type in the JSON string but got " + data['FacDateLastInspectionState']);
        }
        // ensure the json data is a string
        if (data['FacDateLastPenalty'] && !(typeof data['FacDateLastPenalty'] === 'string' || data['FacDateLastPenalty'] instanceof String)) {
            throw new Error("Expected the field `FacDateLastPenalty` to be a primitive type in the JSON string but got " + data['FacDateLastPenalty']);
        }
        // ensure the json data is a string
        if (data['FacDaysLastInspection'] && !(typeof data['FacDaysLastInspection'] === 'string' || data['FacDaysLastInspection'] instanceof String)) {
            throw new Error("Expected the field `FacDaysLastInspection` to be a primitive type in the JSON string but got " + data['FacDaysLastInspection']);
        }
        // ensure the json data is a string
        if (data['FacDerivedCb2010'] && !(typeof data['FacDerivedCb2010'] === 'string' || data['FacDerivedCb2010'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedCb2010` to be a primitive type in the JSON string but got " + data['FacDerivedCb2010']);
        }
        // ensure the json data is a string
        if (data['FacDerivedCd113'] && !(typeof data['FacDerivedCd113'] === 'string' || data['FacDerivedCd113'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedCd113` to be a primitive type in the JSON string but got " + data['FacDerivedCd113']);
        }
        // ensure the json data is a string
        if (data['FacDerivedHuc'] && !(typeof data['FacDerivedHuc'] === 'string' || data['FacDerivedHuc'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedHuc` to be a primitive type in the JSON string but got " + data['FacDerivedHuc']);
        }
        // ensure the json data is a string
        if (data['FacDerivedRadWBDHu12'] && !(typeof data['FacDerivedRadWBDHu12'] === 'string' || data['FacDerivedRadWBDHu12'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedRadWBDHu12` to be a primitive type in the JSON string but got " + data['FacDerivedRadWBDHu12']);
        }
        // ensure the json data is a string
        if (data['FacDerivedRadWBDHu12Name'] && !(typeof data['FacDerivedRadWBDHu12Name'] === 'string' || data['FacDerivedRadWBDHu12Name'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedRadWBDHu12Name` to be a primitive type in the JSON string but got " + data['FacDerivedRadWBDHu12Name']);
        }
        // ensure the json data is a string
        if (data['FacDerivedRadWBDHu8'] && !(typeof data['FacDerivedRadWBDHu8'] === 'string' || data['FacDerivedRadWBDHu8'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedRadWBDHu8` to be a primitive type in the JSON string but got " + data['FacDerivedRadWBDHu8']);
        }
        // ensure the json data is a string
        if (data['FacDerivedRadWBDHu8Name'] && !(typeof data['FacDerivedRadWBDHu8Name'] === 'string' || data['FacDerivedRadWBDHu8Name'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedRadWBDHu8Name` to be a primitive type in the JSON string but got " + data['FacDerivedRadWBDHu8Name']);
        }
        // ensure the json data is a string
        if (data['FacDerivedStctyFIPS'] && !(typeof data['FacDerivedStctyFIPS'] === 'string' || data['FacDerivedStctyFIPS'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedStctyFIPS` to be a primitive type in the JSON string but got " + data['FacDerivedStctyFIPS']);
        }
        // ensure the json data is a string
        if (data['FacDerivedTRIbes'] && !(typeof data['FacDerivedTRIbes'] === 'string' || data['FacDerivedTRIbes'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedTRIbes` to be a primitive type in the JSON string but got " + data['FacDerivedTRIbes']);
        }
        // ensure the json data is a string
        if (data['FacDerivedWBD'] && !(typeof data['FacDerivedWBD'] === 'string' || data['FacDerivedWBD'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedWBD` to be a primitive type in the JSON string but got " + data['FacDerivedWBD']);
        }
        // ensure the json data is a string
        if (data['FacDerivedWBDHu12Name'] && !(typeof data['FacDerivedWBDHu12Name'] === 'string' || data['FacDerivedWBDHu12Name'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedWBDHu12Name` to be a primitive type in the JSON string but got " + data['FacDerivedWBDHu12Name']);
        }
        // ensure the json data is a string
        if (data['FacDerivedWBDHu8'] && !(typeof data['FacDerivedWBDHu8'] === 'string' || data['FacDerivedWBDHu8'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedWBDHu8` to be a primitive type in the JSON string but got " + data['FacDerivedWBDHu8']);
        }
        // ensure the json data is a string
        if (data['FacDerivedWBDHu8Name'] && !(typeof data['FacDerivedWBDHu8Name'] === 'string' || data['FacDerivedWBDHu8Name'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedWBDHu8Name` to be a primitive type in the JSON string but got " + data['FacDerivedWBDHu8Name']);
        }
        // ensure the json data is a string
        if (data['FacDerivedZip'] && !(typeof data['FacDerivedZip'] === 'string' || data['FacDerivedZip'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedZip` to be a primitive type in the JSON string but got " + data['FacDerivedZip']);
        }
        // ensure the json data is a string
        if (data['FacEPARegion'] && !(typeof data['FacEPARegion'] === 'string' || data['FacEPARegion'] instanceof String)) {
            throw new Error("Expected the field `FacEPARegion` to be a primitive type in the JSON string but got " + data['FacEPARegion']);
        }
        // ensure the json data is a string
        if (data['FacFIPSCode'] && !(typeof data['FacFIPSCode'] === 'string' || data['FacFIPSCode'] instanceof String)) {
            throw new Error("Expected the field `FacFIPSCode` to be a primitive type in the JSON string but got " + data['FacFIPSCode']);
        }
        // ensure the json data is a string
        if (data['FacFederalAgency'] && !(typeof data['FacFederalAgency'] === 'string' || data['FacFederalAgency'] instanceof String)) {
            throw new Error("Expected the field `FacFederalAgency` to be a primitive type in the JSON string but got " + data['FacFederalAgency']);
        }
        // ensure the json data is a string
        if (data['FacFederalAgencyName'] && !(typeof data['FacFederalAgencyName'] === 'string' || data['FacFederalAgencyName'] instanceof String)) {
            throw new Error("Expected the field `FacFederalAgencyName` to be a primitive type in the JSON string but got " + data['FacFederalAgencyName']);
        }
        // ensure the json data is a string
        if (data['FacFederalFlg'] && !(typeof data['FacFederalFlg'] === 'string' || data['FacFederalFlg'] instanceof String)) {
            throw new Error("Expected the field `FacFederalFlg` to be a primitive type in the JSON string but got " + data['FacFederalFlg']);
        }
        // ensure the json data is a string
        if (data['FacFormalActionCount'] && !(typeof data['FacFormalActionCount'] === 'string' || data['FacFormalActionCount'] instanceof String)) {
            throw new Error("Expected the field `FacFormalActionCount` to be a primitive type in the JSON string but got " + data['FacFormalActionCount']);
        }
        // ensure the json data is a string
        if (data['FacImpWaterFlg'] && !(typeof data['FacImpWaterFlg'] === 'string' || data['FacImpWaterFlg'] instanceof String)) {
            throw new Error("Expected the field `FacImpWaterFlg` to be a primitive type in the JSON string but got " + data['FacImpWaterFlg']);
        }
        // ensure the json data is a string
        if (data['FacIndianCntryFlg'] && !(typeof data['FacIndianCntryFlg'] === 'string' || data['FacIndianCntryFlg'] instanceof String)) {
            throw new Error("Expected the field `FacIndianCntryFlg` to be a primitive type in the JSON string but got " + data['FacIndianCntryFlg']);
        }
        // ensure the json data is a string
        if (data['FacIndianSpatialFlg'] && !(typeof data['FacIndianSpatialFlg'] === 'string' || data['FacIndianSpatialFlg'] instanceof String)) {
            throw new Error("Expected the field `FacIndianSpatialFlg` to be a primitive type in the JSON string but got " + data['FacIndianSpatialFlg']);
        }
        // ensure the json data is a string
        if (data['FacInformalCount'] && !(typeof data['FacInformalCount'] === 'string' || data['FacInformalCount'] instanceof String)) {
            throw new Error("Expected the field `FacInformalCount` to be a primitive type in the JSON string but got " + data['FacInformalCount']);
        }
        // ensure the json data is a string
        if (data['FacInspectionCount'] && !(typeof data['FacInspectionCount'] === 'string' || data['FacInspectionCount'] instanceof String)) {
            throw new Error("Expected the field `FacInspectionCount` to be a primitive type in the JSON string but got " + data['FacInspectionCount']);
        }
        // ensure the json data is a string
        if (data['FacLastPenaltyAmt'] && !(typeof data['FacLastPenaltyAmt'] === 'string' || data['FacLastPenaltyAmt'] instanceof String)) {
            throw new Error("Expected the field `FacLastPenaltyAmt` to be a primitive type in the JSON string but got " + data['FacLastPenaltyAmt']);
        }
        // ensure the json data is a string
        if (data['FacLat'] && !(typeof data['FacLat'] === 'string' || data['FacLat'] instanceof String)) {
            throw new Error("Expected the field `FacLat` to be a primitive type in the JSON string but got " + data['FacLat']);
        }
        // ensure the json data is a string
        if (data['FacLong'] && !(typeof data['FacLong'] === 'string' || data['FacLong'] instanceof String)) {
            throw new Error("Expected the field `FacLong` to be a primitive type in the JSON string but got " + data['FacLong']);
        }
        // ensure the json data is a string
        if (data['FacMajorFlag'] && !(typeof data['FacMajorFlag'] === 'string' || data['FacMajorFlag'] instanceof String)) {
            throw new Error("Expected the field `FacMajorFlag` to be a primitive type in the JSON string but got " + data['FacMajorFlag']);
        }
        // ensure the json data is a string
        if (data['FacMapFlg'] && !(typeof data['FacMapFlg'] === 'string' || data['FacMapFlg'] instanceof String)) {
            throw new Error("Expected the field `FacMapFlg` to be a primitive type in the JSON string but got " + data['FacMapFlg']);
        }
        // ensure the json data is a string
        if (data['FacMapIcon'] && !(typeof data['FacMapIcon'] === 'string' || data['FacMapIcon'] instanceof String)) {
            throw new Error("Expected the field `FacMapIcon` to be a primitive type in the JSON string but got " + data['FacMapIcon']);
        }
        // ensure the json data is a string
        if (data['FacMyrtkUniverse'] && !(typeof data['FacMyrtkUniverse'] === 'string' || data['FacMyrtkUniverse'] instanceof String)) {
            throw new Error("Expected the field `FacMyrtkUniverse` to be a primitive type in the JSON string but got " + data['FacMyrtkUniverse']);
        }
        // ensure the json data is a string
        if (data['FacNAICSCodes'] && !(typeof data['FacNAICSCodes'] === 'string' || data['FacNAICSCodes'] instanceof String)) {
            throw new Error("Expected the field `FacNAICSCodes` to be a primitive type in the JSON string but got " + data['FacNAICSCodes']);
        }
        // ensure the json data is a string
        if (data['FacNaaFlag'] && !(typeof data['FacNaaFlag'] === 'string' || data['FacNaaFlag'] instanceof String)) {
            throw new Error("Expected the field `FacNaaFlag` to be a primitive type in the JSON string but got " + data['FacNaaFlag']);
        }
        // ensure the json data is a string
        if (data['FacName'] && !(typeof data['FacName'] === 'string' || data['FacName'] instanceof String)) {
            throw new Error("Expected the field `FacName` to be a primitive type in the JSON string but got " + data['FacName']);
        }
        // ensure the json data is a string
        if (data['FacPenaltyCount'] && !(typeof data['FacPenaltyCount'] === 'string' || data['FacPenaltyCount'] instanceof String)) {
            throw new Error("Expected the field `FacPenaltyCount` to be a primitive type in the JSON string but got " + data['FacPenaltyCount']);
        }
        // ensure the json data is a string
        if (data['FacPercentMinority'] && !(typeof data['FacPercentMinority'] === 'string' || data['FacPercentMinority'] instanceof String)) {
            throw new Error("Expected the field `FacPercentMinority` to be a primitive type in the JSON string but got " + data['FacPercentMinority']);
        }
        // ensure the json data is a string
        if (data['FacPopDen'] && !(typeof data['FacPopDen'] === 'string' || data['FacPopDen'] instanceof String)) {
            throw new Error("Expected the field `FacPopDen` to be a primitive type in the JSON string but got " + data['FacPopDen']);
        }
        // ensure the json data is a string
        if (data['FacProgramsWithSNC'] && !(typeof data['FacProgramsWithSNC'] === 'string' || data['FacProgramsWithSNC'] instanceof String)) {
            throw new Error("Expected the field `FacProgramsWithSNC` to be a primitive type in the JSON string but got " + data['FacProgramsWithSNC']);
        }
        // ensure the json data is a string
        if (data['FacQtrsWithNC'] && !(typeof data['FacQtrsWithNC'] === 'string' || data['FacQtrsWithNC'] instanceof String)) {
            throw new Error("Expected the field `FacQtrsWithNC` to be a primitive type in the JSON string but got " + data['FacQtrsWithNC']);
        }
        // ensure the json data is a string
        if (data['FacReferencePoint'] && !(typeof data['FacReferencePoint'] === 'string' || data['FacReferencePoint'] instanceof String)) {
            throw new Error("Expected the field `FacReferencePoint` to be a primitive type in the JSON string but got " + data['FacReferencePoint']);
        }
        // ensure the json data is a string
        if (data['FacSICCodes'] && !(typeof data['FacSICCodes'] === 'string' || data['FacSICCodes'] instanceof String)) {
            throw new Error("Expected the field `FacSICCodes` to be a primitive type in the JSON string but got " + data['FacSICCodes']);
        }
        // ensure the json data is a string
        if (data['FacSNCFlg'] && !(typeof data['FacSNCFlg'] === 'string' || data['FacSNCFlg'] instanceof String)) {
            throw new Error("Expected the field `FacSNCFlg` to be a primitive type in the JSON string but got " + data['FacSNCFlg']);
        }
        // ensure the json data is a string
        if (data['FacState'] && !(typeof data['FacState'] === 'string' || data['FacState'] instanceof String)) {
            throw new Error("Expected the field `FacState` to be a primitive type in the JSON string but got " + data['FacState']);
        }
        // ensure the json data is a string
        if (data['FacStdCountyName'] && !(typeof data['FacStdCountyName'] === 'string' || data['FacStdCountyName'] instanceof String)) {
            throw new Error("Expected the field `FacStdCountyName` to be a primitive type in the JSON string but got " + data['FacStdCountyName']);
        }
        // ensure the json data is a string
        if (data['FacStreet'] && !(typeof data['FacStreet'] === 'string' || data['FacStreet'] instanceof String)) {
            throw new Error("Expected the field `FacStreet` to be a primitive type in the JSON string but got " + data['FacStreet']);
        }
        // ensure the json data is a string
        if (data['FacTotalPenalties'] && !(typeof data['FacTotalPenalties'] === 'string' || data['FacTotalPenalties'] instanceof String)) {
            throw new Error("Expected the field `FacTotalPenalties` to be a primitive type in the JSON string but got " + data['FacTotalPenalties']);
        }
        // ensure the json data is a string
        if (data['FacUsMexBorderFlg'] && !(typeof data['FacUsMexBorderFlg'] === 'string' || data['FacUsMexBorderFlg'] instanceof String)) {
            throw new Error("Expected the field `FacUsMexBorderFlg` to be a primitive type in the JSON string but got " + data['FacUsMexBorderFlg']);
        }
        // ensure the json data is a string
        if (data['FacZip'] && !(typeof data['FacZip'] === 'string' || data['FacZip'] instanceof String)) {
            throw new Error("Expected the field `FacZip` to be a primitive type in the JSON string but got " + data['FacZip']);
        }
        // ensure the json data is a string
        if (data['FecCaseIDs'] && !(typeof data['FecCaseIDs'] === 'string' || data['FecCaseIDs'] instanceof String)) {
            throw new Error("Expected the field `FecCaseIDs` to be a primitive type in the JSON string but got " + data['FecCaseIDs']);
        }
        // ensure the json data is a string
        if (data['FecLastCaseDate'] && !(typeof data['FecLastCaseDate'] === 'string' || data['FecLastCaseDate'] instanceof String)) {
            throw new Error("Expected the field `FecLastCaseDate` to be a primitive type in the JSON string but got " + data['FecLastCaseDate']);
        }
        // ensure the json data is a string
        if (data['FecNumberOfCases'] && !(typeof data['FecNumberOfCases'] === 'string' || data['FecNumberOfCases'] instanceof String)) {
            throw new Error("Expected the field `FecNumberOfCases` to be a primitive type in the JSON string but got " + data['FecNumberOfCases']);
        }
        // ensure the json data is a string
        if (data['FecTotalPenalties'] && !(typeof data['FecTotalPenalties'] === 'string' || data['FecTotalPenalties'] instanceof String)) {
            throw new Error("Expected the field `FecTotalPenalties` to be a primitive type in the JSON string but got " + data['FecTotalPenalties']);
        }
        // ensure the json data is a string
        if (data['FifraInspections5yr'] && !(typeof data['FifraInspections5yr'] === 'string' || data['FifraInspections5yr'] instanceof String)) {
            throw new Error("Expected the field `FifraInspections5yr` to be a primitive type in the JSON string but got " + data['FifraInspections5yr']);
        }
        // ensure the json data is a string
        if (data['GHGCO2Releases'] && !(typeof data['GHGCO2Releases'] === 'string' || data['GHGCO2Releases'] instanceof String)) {
            throw new Error("Expected the field `GHGCO2Releases` to be a primitive type in the JSON string but got " + data['GHGCO2Releases']);
        }
        // ensure the json data is a string
        if (data['GHGFlag'] && !(typeof data['GHGFlag'] === 'string' || data['GHGFlag'] instanceof String)) {
            throw new Error("Expected the field `GHGFlag` to be a primitive type in the JSON string but got " + data['GHGFlag']);
        }
        // ensure the json data is a string
        if (data['GHGIDs'] && !(typeof data['GHGIDs'] === 'string' || data['GHGIDs'] instanceof String)) {
            throw new Error("Expected the field `GHGIDs` to be a primitive type in the JSON string but got " + data['GHGIDs']);
        }
        // ensure the json data is a string
        if (data['HasPollRpt'] && !(typeof data['HasPollRpt'] === 'string' || data['HasPollRpt'] instanceof String)) {
            throw new Error("Expected the field `HasPollRpt` to be a primitive type in the JSON string but got " + data['HasPollRpt']);
        }
        // ensure the json data is a string
        if (data['Infea5yrFlag'] && !(typeof data['Infea5yrFlag'] === 'string' || data['Infea5yrFlag'] instanceof String)) {
            throw new Error("Expected the field `Infea5yrFlag` to be a primitive type in the JSON string but got " + data['Infea5yrFlag']);
        }
        // ensure the json data is a string
        if (data['Insp5yrFlag'] && !(typeof data['Insp5yrFlag'] === 'string' || data['Insp5yrFlag'] instanceof String)) {
            throw new Error("Expected the field `Insp5yrFlag` to be a primitive type in the JSON string but got " + data['Insp5yrFlag']);
        }
        // ensure the json data is a string
        if (data['Lower48'] && !(typeof data['Lower48'] === 'string' || data['Lower48'] instanceof String)) {
            throw new Error("Expected the field `Lower48` to be a primitive type in the JSON string but got " + data['Lower48']);
        }
        // ensure the json data is a string
        if (data['MaxPctileUs'] && !(typeof data['MaxPctileUs'] === 'string' || data['MaxPctileUs'] instanceof String)) {
            throw new Error("Expected the field `MaxPctileUs` to be a primitive type in the JSON string but got " + data['MaxPctileUs']);
        }
        // ensure the json data is a string
        if (data['MaxScore'] && !(typeof data['MaxScore'] === 'string' || data['MaxScore'] instanceof String)) {
            throw new Error("Expected the field `MaxScore` to be a primitive type in the JSON string but got " + data['MaxScore']);
        }
        // ensure the json data is a string
        if (data['NC'] && !(typeof data['NC'] === 'string' || data['NC'] instanceof String)) {
            throw new Error("Expected the field `NC` to be a primitive type in the JSON string but got " + data['NC']);
        }
        // ensure the json data is a string
        if (data['NPDESFlag'] && !(typeof data['NPDESFlag'] === 'string' || data['NPDESFlag'] instanceof String)) {
            throw new Error("Expected the field `NPDESFlag` to be a primitive type in the JSON string but got " + data['NPDESFlag']);
        }
        // ensure the json data is a string
        if (data['NPDESIDs'] && !(typeof data['NPDESIDs'] === 'string' || data['NPDESIDs'] instanceof String)) {
            throw new Error("Expected the field `NPDESIDs` to be a primitive type in the JSON string but got " + data['NPDESIDs']);
        }
        // ensure the json data is a string
        if (data['NaaCategories'] && !(typeof data['NaaCategories'] === 'string' || data['NaaCategories'] instanceof String)) {
            throw new Error("Expected the field `NaaCategories` to be a primitive type in the JSON string but got " + data['NaaCategories']);
        }
        // ensure the json data is a string
        if (data['NaaPollutants'] && !(typeof data['NaaPollutants'] === 'string' || data['NaaPollutants'] instanceof String)) {
            throw new Error("Expected the field `NaaPollutants` to be a primitive type in the JSON string but got " + data['NaaPollutants']);
        }
        // ensure the json data is a string
        if (data['ObjectId'] && !(typeof data['ObjectId'] === 'string' || data['ObjectId'] instanceof String)) {
            throw new Error("Expected the field `ObjectId` to be a primitive type in the JSON string but got " + data['ObjectId']);
        }
        // ensure the json data is a string
        if (data['Over80CountUs'] && !(typeof data['Over80CountUs'] === 'string' || data['Over80CountUs'] instanceof String)) {
            throw new Error("Expected the field `Over80CountUs` to be a primitive type in the JSON string but got " + data['Over80CountUs']);
        }
        // ensure the json data is a string
        if (data['PctileCancerUs'] && !(typeof data['PctileCancerUs'] === 'string' || data['PctileCancerUs'] instanceof String)) {
            throw new Error("Expected the field `PctileCancerUs` to be a primitive type in the JSON string but got " + data['PctileCancerUs']);
        }
        // ensure the json data is a string
        if (data['PctileDpmUs'] && !(typeof data['PctileDpmUs'] === 'string' || data['PctileDpmUs'] instanceof String)) {
            throw new Error("Expected the field `PctileDpmUs` to be a primitive type in the JSON string but got " + data['PctileDpmUs']);
        }
        // ensure the json data is a string
        if (data['PctileO3Us'] && !(typeof data['PctileO3Us'] === 'string' || data['PctileO3Us'] instanceof String)) {
            throw new Error("Expected the field `PctileO3Us` to be a primitive type in the JSON string but got " + data['PctileO3Us']);
        }
        // ensure the json data is a string
        if (data['PctilePctpre1960Us'] && !(typeof data['PctilePctpre1960Us'] === 'string' || data['PctilePctpre1960Us'] instanceof String)) {
            throw new Error("Expected the field `PctilePctpre1960Us` to be a primitive type in the JSON string but got " + data['PctilePctpre1960Us']);
        }
        // ensure the json data is a string
        if (data['PctilePmUs'] && !(typeof data['PctilePmUs'] === 'string' || data['PctilePmUs'] instanceof String)) {
            throw new Error("Expected the field `PctilePmUs` to be a primitive type in the JSON string but got " + data['PctilePmUs']);
        }
        // ensure the json data is a string
        if (data['PctileProximityNPDESUs'] && !(typeof data['PctileProximityNPDESUs'] === 'string' || data['PctileProximityNPDESUs'] instanceof String)) {
            throw new Error("Expected the field `PctileProximityNPDESUs` to be a primitive type in the JSON string but got " + data['PctileProximityNPDESUs']);
        }
        // ensure the json data is a string
        if (data['PctileProximityNplUs'] && !(typeof data['PctileProximityNplUs'] === 'string' || data['PctileProximityNplUs'] instanceof String)) {
            throw new Error("Expected the field `PctileProximityNplUs` to be a primitive type in the JSON string but got " + data['PctileProximityNplUs']);
        }
        // ensure the json data is a string
        if (data['PctileProximityRmpUs'] && !(typeof data['PctileProximityRmpUs'] === 'string' || data['PctileProximityRmpUs'] instanceof String)) {
            throw new Error("Expected the field `PctileProximityRmpUs` to be a primitive type in the JSON string but got " + data['PctileProximityRmpUs']);
        }
        // ensure the json data is a string
        if (data['PctileProximityTsdfUs'] && !(typeof data['PctileProximityTsdfUs'] === 'string' || data['PctileProximityTsdfUs'] instanceof String)) {
            throw new Error("Expected the field `PctileProximityTsdfUs` to be a primitive type in the JSON string but got " + data['PctileProximityTsdfUs']);
        }
        // ensure the json data is a string
        if (data['PctileRespUs'] && !(typeof data['PctileRespUs'] === 'string' || data['PctileRespUs'] instanceof String)) {
            throw new Error("Expected the field `PctileRespUs` to be a primitive type in the JSON string but got " + data['PctileRespUs']);
        }
        // ensure the json data is a string
        if (data['PctileTrafficScoreUs'] && !(typeof data['PctileTrafficScoreUs'] === 'string' || data['PctileTrafficScoreUs'] instanceof String)) {
            throw new Error("Expected the field `PctileTrafficScoreUs` to be a primitive type in the JSON string but got " + data['PctileTrafficScoreUs']);
        }
        // ensure the json data is a string
        if (data['RCRA3yrComplQtrsHistory'] && !(typeof data['RCRA3yrComplQtrsHistory'] === 'string' || data['RCRA3yrComplQtrsHistory'] instanceof String)) {
            throw new Error("Expected the field `RCRA3yrComplQtrsHistory` to be a primitive type in the JSON string but got " + data['RCRA3yrComplQtrsHistory']);
        }
        // ensure the json data is a string
        if (data['RCRAComplianceStatus'] && !(typeof data['RCRAComplianceStatus'] === 'string' || data['RCRAComplianceStatus'] instanceof String)) {
            throw new Error("Expected the field `RCRAComplianceStatus` to be a primitive type in the JSON string but got " + data['RCRAComplianceStatus']);
        }
        // ensure the json data is a string
        if (data['RCRADateLastFormalAction'] && !(typeof data['RCRADateLastFormalAction'] === 'string' || data['RCRADateLastFormalAction'] instanceof String)) {
            throw new Error("Expected the field `RCRADateLastFormalAction` to be a primitive type in the JSON string but got " + data['RCRADateLastFormalAction']);
        }
        // ensure the json data is a string
        if (data['RCRADaysLastEvaluation'] && !(typeof data['RCRADaysLastEvaluation'] === 'string' || data['RCRADaysLastEvaluation'] instanceof String)) {
            throw new Error("Expected the field `RCRADaysLastEvaluation` to be a primitive type in the JSON string but got " + data['RCRADaysLastEvaluation']);
        }
        // ensure the json data is a string
        if (data['RCRAFlag'] && !(typeof data['RCRAFlag'] === 'string' || data['RCRAFlag'] instanceof String)) {
            throw new Error("Expected the field `RCRAFlag` to be a primitive type in the JSON string but got " + data['RCRAFlag']);
        }
        // ensure the json data is a string
        if (data['RCRAFormalActionCount'] && !(typeof data['RCRAFormalActionCount'] === 'string' || data['RCRAFormalActionCount'] instanceof String)) {
            throw new Error("Expected the field `RCRAFormalActionCount` to be a primitive type in the JSON string but got " + data['RCRAFormalActionCount']);
        }
        // ensure the json data is a string
        if (data['RCRAIDs'] && !(typeof data['RCRAIDs'] === 'string' || data['RCRAIDs'] instanceof String)) {
            throw new Error("Expected the field `RCRAIDs` to be a primitive type in the JSON string but got " + data['RCRAIDs']);
        }
        // ensure the json data is a string
        if (data['RCRAInformalCount'] && !(typeof data['RCRAInformalCount'] === 'string' || data['RCRAInformalCount'] instanceof String)) {
            throw new Error("Expected the field `RCRAInformalCount` to be a primitive type in the JSON string but got " + data['RCRAInformalCount']);
        }
        // ensure the json data is a string
        if (data['RCRAInspectionCount'] && !(typeof data['RCRAInspectionCount'] === 'string' || data['RCRAInspectionCount'] instanceof String)) {
            throw new Error("Expected the field `RCRAInspectionCount` to be a primitive type in the JSON string but got " + data['RCRAInspectionCount']);
        }
        // ensure the json data is a string
        if (data['RCRALastPenaltyAmt'] && !(typeof data['RCRALastPenaltyAmt'] === 'string' || data['RCRALastPenaltyAmt'] instanceof String)) {
            throw new Error("Expected the field `RCRALastPenaltyAmt` to be a primitive type in the JSON string but got " + data['RCRALastPenaltyAmt']);
        }
        // ensure the json data is a string
        if (data['RCRALastPenaltyDate'] && !(typeof data['RCRALastPenaltyDate'] === 'string' || data['RCRALastPenaltyDate'] instanceof String)) {
            throw new Error("Expected the field `RCRALastPenaltyDate` to be a primitive type in the JSON string but got " + data['RCRALastPenaltyDate']);
        }
        // ensure the json data is a string
        if (data['RCRANAICS'] && !(typeof data['RCRANAICS'] === 'string' || data['RCRANAICS'] instanceof String)) {
            throw new Error("Expected the field `RCRANAICS` to be a primitive type in the JSON string but got " + data['RCRANAICS']);
        }
        // ensure the json data is a string
        if (data['RCRAPenalties'] && !(typeof data['RCRAPenalties'] === 'string' || data['RCRAPenalties'] instanceof String)) {
            throw new Error("Expected the field `RCRAPenalties` to be a primitive type in the JSON string but got " + data['RCRAPenalties']);
        }
        // ensure the json data is a string
        if (data['RCRAPermitTypes'] && !(typeof data['RCRAPermitTypes'] === 'string' || data['RCRAPermitTypes'] instanceof String)) {
            throw new Error("Expected the field `RCRAPermitTypes` to be a primitive type in the JSON string but got " + data['RCRAPermitTypes']);
        }
        // ensure the json data is a string
        if (data['RCRAQtrsWithNC'] && !(typeof data['RCRAQtrsWithNC'] === 'string' || data['RCRAQtrsWithNC'] instanceof String)) {
            throw new Error("Expected the field `RCRAQtrsWithNC` to be a primitive type in the JSON string but got " + data['RCRAQtrsWithNC']);
        }
        // ensure the json data is a string
        if (data['RCRASNCFlag'] && !(typeof data['RCRASNCFlag'] === 'string' || data['RCRASNCFlag'] instanceof String)) {
            throw new Error("Expected the field `RCRASNCFlag` to be a primitive type in the JSON string but got " + data['RCRASNCFlag']);
        }
        // ensure the json data is a string
        if (data['RegistryID'] && !(typeof data['RegistryID'] === 'string' || data['RegistryID'] instanceof String)) {
            throw new Error("Expected the field `RegistryID` to be a primitive type in the JSON string but got " + data['RegistryID']);
        }
        // ensure the json data is a string
        if (data['RmpIDs'] && !(typeof data['RmpIDs'] === 'string' || data['RmpIDs'] instanceof String)) {
            throw new Error("Expected the field `RmpIDs` to be a primitive type in the JSON string but got " + data['RmpIDs']);
        }
        // ensure the json data is a string
        if (data['SDWA3yrComplQtrsHistory'] && !(typeof data['SDWA3yrComplQtrsHistory'] === 'string' || data['SDWA3yrComplQtrsHistory'] instanceof String)) {
            throw new Error("Expected the field `SDWA3yrComplQtrsHistory` to be a primitive type in the JSON string but got " + data['SDWA3yrComplQtrsHistory']);
        }
        // ensure the json data is a string
        if (data['SDWAComplianceStatus'] && !(typeof data['SDWAComplianceStatus'] === 'string' || data['SDWAComplianceStatus'] instanceof String)) {
            throw new Error("Expected the field `SDWAComplianceStatus` to be a primitive type in the JSON string but got " + data['SDWAComplianceStatus']);
        }
        // ensure the json data is a string
        if (data['SDWAFormalActionCount'] && !(typeof data['SDWAFormalActionCount'] === 'string' || data['SDWAFormalActionCount'] instanceof String)) {
            throw new Error("Expected the field `SDWAFormalActionCount` to be a primitive type in the JSON string but got " + data['SDWAFormalActionCount']);
        }
        // ensure the json data is a string
        if (data['SDWAIDs'] && !(typeof data['SDWAIDs'] === 'string' || data['SDWAIDs'] instanceof String)) {
            throw new Error("Expected the field `SDWAIDs` to be a primitive type in the JSON string but got " + data['SDWAIDs']);
        }
        // ensure the json data is a string
        if (data['SDWAInformalCount'] && !(typeof data['SDWAInformalCount'] === 'string' || data['SDWAInformalCount'] instanceof String)) {
            throw new Error("Expected the field `SDWAInformalCount` to be a primitive type in the JSON string but got " + data['SDWAInformalCount']);
        }
        // ensure the json data is a string
        if (data['SDWAInspections5yr'] && !(typeof data['SDWAInspections5yr'] === 'string' || data['SDWAInspections5yr'] instanceof String)) {
            throw new Error("Expected the field `SDWAInspections5yr` to be a primitive type in the JSON string but got " + data['SDWAInspections5yr']);
        }
        // ensure the json data is a string
        if (data['SDWAQtrsWithNC'] && !(typeof data['SDWAQtrsWithNC'] === 'string' || data['SDWAQtrsWithNC'] instanceof String)) {
            throw new Error("Expected the field `SDWAQtrsWithNC` to be a primitive type in the JSON string but got " + data['SDWAQtrsWithNC']);
        }
        // ensure the json data is a string
        if (data['SDWASNCFlag'] && !(typeof data['SDWASNCFlag'] === 'string' || data['SDWASNCFlag'] instanceof String)) {
            throw new Error("Expected the field `SDWASNCFlag` to be a primitive type in the JSON string but got " + data['SDWASNCFlag']);
        }
        // ensure the json data is a string
        if (data['SDWASystemTypes'] && !(typeof data['SDWASystemTypes'] === 'string' || data['SDWASystemTypes'] instanceof String)) {
            throw new Error("Expected the field `SDWASystemTypes` to be a primitive type in the JSON string but got " + data['SDWASystemTypes']);
        }
        // ensure the json data is a string
        if (data['SDWISFlag'] && !(typeof data['SDWISFlag'] === 'string' || data['SDWISFlag'] instanceof String)) {
            throw new Error("Expected the field `SDWISFlag` to be a primitive type in the JSON string but got " + data['SDWISFlag']);
        }
        // ensure the json data is a string
        if (data['Score'] && !(typeof data['Score'] === 'string' || data['Score'] instanceof String)) {
            throw new Error("Expected the field `Score` to be a primitive type in the JSON string but got " + data['Score']);
        }
        // ensure the json data is a string
        if (data['SemsFlag'] && !(typeof data['SemsFlag'] === 'string' || data['SemsFlag'] instanceof String)) {
            throw new Error("Expected the field `SemsFlag` to be a primitive type in the JSON string but got " + data['SemsFlag']);
        }
        // ensure the json data is a string
        if (data['SemsIDs'] && !(typeof data['SemsIDs'] === 'string' || data['SemsIDs'] instanceof String)) {
            throw new Error("Expected the field `SemsIDs` to be a primitive type in the JSON string but got " + data['SemsIDs']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['TRIFlag'] && !(typeof data['TRIFlag'] === 'string' || data['TRIFlag'] instanceof String)) {
            throw new Error("Expected the field `TRIFlag` to be a primitive type in the JSON string but got " + data['TRIFlag']);
        }
        // ensure the json data is a string
        if (data['TRIIDs'] && !(typeof data['TRIIDs'] === 'string' || data['TRIIDs'] instanceof String)) {
            throw new Error("Expected the field `TRIIDs` to be a primitive type in the JSON string but got " + data['TRIIDs']);
        }
        // ensure the json data is a string
        if (data['TRIOffSiteTransfers'] && !(typeof data['TRIOffSiteTransfers'] === 'string' || data['TRIOffSiteTransfers'] instanceof String)) {
            throw new Error("Expected the field `TRIOffSiteTransfers` to be a primitive type in the JSON string but got " + data['TRIOffSiteTransfers']);
        }
        // ensure the json data is a string
        if (data['TRIOnSiteReleases'] && !(typeof data['TRIOnSiteReleases'] === 'string' || data['TRIOnSiteReleases'] instanceof String)) {
            throw new Error("Expected the field `TRIOnSiteReleases` to be a primitive type in the JSON string but got " + data['TRIOnSiteReleases']);
        }
        // ensure the json data is a string
        if (data['TRIReleasesTransfers'] && !(typeof data['TRIReleasesTransfers'] === 'string' || data['TRIReleasesTransfers'] instanceof String)) {
            throw new Error("Expected the field `TRIReleasesTransfers` to be a primitive type in the JSON string but got " + data['TRIReleasesTransfers']);
        }
        // ensure the json data is a string
        if (data['TRIReporter'] && !(typeof data['TRIReporter'] === 'string' || data['TRIReporter'] instanceof String)) {
            throw new Error("Expected the field `TRIReporter` to be a primitive type in the JSON string but got " + data['TRIReporter']);
        }
        // ensure the json data is a string
        if (data['TRIReporterInPast'] && !(typeof data['TRIReporterInPast'] === 'string' || data['TRIReporterInPast'] instanceof String)) {
            throw new Error("Expected the field `TRIReporterInPast` to be a primitive type in the JSON string but got " + data['TRIReporterInPast']);
        }
        // ensure the json data is a string
        if (data['TRIbalFlag'] && !(typeof data['TRIbalFlag'] === 'string' || data['TRIbalFlag'] instanceof String)) {
            throw new Error("Expected the field `TRIbalFlag` to be a primitive type in the JSON string but got " + data['TRIbalFlag']);
        }
        // ensure the json data is a string
        if (data['TscaFlag'] && !(typeof data['TscaFlag'] === 'string' || data['TscaFlag'] instanceof String)) {
            throw new Error("Expected the field `TscaFlag` to be a primitive type in the JSON string but got " + data['TscaFlag']);
        }
        // ensure the json data is a string
        if (data['TscaIDs'] && !(typeof data['TscaIDs'] === 'string' || data['TscaIDs'] instanceof String)) {
            throw new Error("Expected the field `TscaIDs` to be a primitive type in the JSON string but got " + data['TscaIDs']);
        }
        // ensure the json data is a string
        if (data['TscaInspections5yr'] && !(typeof data['TscaInspections5yr'] === 'string' || data['TscaInspections5yr'] instanceof String)) {
            throw new Error("Expected the field `TscaInspections5yr` to be a primitive type in the JSON string but got " + data['TscaInspections5yr']);
        }
        // ensure the json data is a string
        if (data['ViolFlag'] && !(typeof data['ViolFlag'] === 'string' || data['ViolFlag'] instanceof String)) {
            throw new Error("Expected the field `ViolFlag` to be a primitive type in the JSON string but got " + data['ViolFlag']);
        }
        // ensure the json data is a string
        if (data['WebDocs'] && !(typeof data['WebDocs'] === 'string' || data['WebDocs'] instanceof String)) {
            throw new Error("Expected the field `WebDocs` to be a primitive type in the JSON string but got " + data['WebDocs']);
        }

        return true;
    }


}

Echo07.RequiredProperties = ["AIRFlag", "AIRIDs", "ActiveLower48", "BiosolidsFlag", "CAA3yrComplQtrsHistory", "CAAComplianceStatus", "CAADateLastFormalAction", "CAADaysLastEvaluation", "CAAEvaluationCount", "CAAFormalActionCount", "CAAHpvFlag", "CAAInformalCount", "CAALastPenaltyAmt", "CAALastPenaltyDate", "CAANAICS", "CAAPenalties", "CAAPermitTypes", "CAAQtrsWithNC", "CAASICs", "CWA13qtrsComplHistory", "CWA13qtrsEfflntExceedances", "CWA3YrQncrCodes", "CWAComplianceStatus", "CWAComplianceTracking", "CWADateLastFormalAction", "CWADaysLastInspection", "CWAFormalActionCount", "CWAInformalCount", "CWAInspectionCount", "CWALastPenaltyAmt", "CWALastPenaltyDate", "CWANAICS", "CWAPenalties", "CWAPermitTypes", "CWAQtrsWithNC", "CWASICs", "CWASNCFlag", "CamdIDs", "CensusBlockGroup", "CurrSvFlag", "CurrVioFlag", "DfrUrl", "Ea5yrFlag", "EffChartsFlag", "EisFlag", "EisIDs", "EjscreenFlag", "EjscreenFlagUs", "EpcraInspections5yr", "Fac3yrComplianceHistory", "FacAccuracyMeters", "FacActiveFlag", "FacChesapeakeBayFlg", "FacCity", "FacCollectionMethod", "FacComplianceStatus", "FacCounty", "FacDateLastFormalActEPA", "FacDateLastFormalActSt", "FacDateLastFormalAction", "FacDateLastInformalActEPA", "FacDateLastInformalActSt", "FacDateLastInformalAction", "FacDateLastInspection", "FacDateLastInspectionEPA", "FacDateLastInspectionState", "FacDateLastPenalty", "FacDaysLastInspection", "FacDerivedCb2010", "FacDerivedCd113", "FacDerivedHuc", "FacDerivedRadWBDHu12", "FacDerivedRadWBDHu12Name", "FacDerivedRadWBDHu8", "FacDerivedRadWBDHu8Name", "FacDerivedStctyFIPS", "FacDerivedTRIbes", "FacDerivedWBD", "FacDerivedWBDHu12Name", "FacDerivedWBDHu8", "FacDerivedWBDHu8Name", "FacDerivedZip", "FacEPARegion", "FacFIPSCode", "FacFederalAgency", "FacFederalAgencyName", "FacFederalFlg", "FacFormalActionCount", "FacImpWaterFlg", "FacIndianCntryFlg", "FacIndianSpatialFlg", "FacInformalCount", "FacInspectionCount", "FacLastPenaltyAmt", "FacLat", "FacLong", "FacMajorFlag", "FacMapFlg", "FacMapIcon", "FacMyrtkUniverse", "FacNAICSCodes", "FacNaaFlag", "FacName", "FacPenaltyCount", "FacPercentMinority", "FacPopDen", "FacProgramsWithSNC", "FacQtrsWithNC", "FacReferencePoint", "FacSICCodes", "FacSNCFlg", "FacState", "FacStdCountyName", "FacStreet", "FacTotalPenalties", "FacUsMexBorderFlg", "FacZip", "FecCaseIDs", "FecLastCaseDate", "FecNumberOfCases", "FecTotalPenalties", "FifraInspections5yr", "GHGCO2Releases", "GHGFlag", "GHGIDs", "HasPollRpt", "Infea5yrFlag", "Insp5yrFlag", "Lower48", "MaxPctileUs", "MaxScore", "NC", "NPDESFlag", "NPDESIDs", "NaaCategories", "NaaPollutants", "ObjectId", "Over80CountUs", "PctileCancerUs", "PctileDpmUs", "PctileO3Us", "PctilePctpre1960Us", "PctilePmUs", "PctileProximityNPDESUs", "PctileProximityNplUs", "PctileProximityRmpUs", "PctileProximityTsdfUs", "PctileRespUs", "PctileTrafficScoreUs", "RCRA3yrComplQtrsHistory", "RCRAComplianceStatus", "RCRADateLastFormalAction", "RCRADaysLastEvaluation", "RCRAFlag", "RCRAFormalActionCount", "RCRAIDs", "RCRAInformalCount", "RCRAInspectionCount", "RCRALastPenaltyAmt", "RCRALastPenaltyDate", "RCRANAICS", "RCRAPenalties", "RCRAPermitTypes", "RCRAQtrsWithNC", "RCRASNCFlag", "RegistryID", "RmpIDs", "SDWA3yrComplQtrsHistory", "SDWAComplianceStatus", "SDWAFormalActionCount", "SDWAIDs", "SDWAInformalCount", "SDWAInspections5yr", "SDWAQtrsWithNC", "SDWASNCFlag", "SDWASystemTypes", "SDWISFlag", "Score", "SemsFlag", "SemsIDs", "SourceID", "TRIFlag", "TRIIDs", "TRIOffSiteTransfers", "TRIOnSiteReleases", "TRIReleasesTransfers", "TRIReporter", "TRIReporterInPast", "TRIbalFlag", "TscaFlag", "TscaIDs", "TscaInspections5yr", "ViolFlag", "WebDocs"];

/**
 * Indicates whether the facility has a Clean Air Act (CAA) permit.
 * @member {String} AIRFlag
 */
Echo07.prototype['AIRFlag'] = undefined;

/**
 * Air Facility System (AFS) ID.
 * @member {String} AIRIDs
 */
Echo07.prototype['AIRIDs'] = undefined;

/**
 * A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.
 * @member {String} ActiveLower48
 */
Echo07.prototype['ActiveLower48'] = undefined;

/**
 * A Yes/No field to indicate permits with biosolids management and compliance information.
 * @member {String} BiosolidsFlag
 */
Echo07.prototype['BiosolidsFlag'] = undefined;

/**
 * The facility's 3-year compliance status history by quarter (3-month period) entered in the CAA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined
 * @member {String} CAA3yrComplQtrsHistory
 */
Echo07.prototype['CAA3yrComplQtrsHistory'] = undefined;

/**
 * An indication of the facility's compliance status under the Clean Air Act. When a source has a high priority violation (HPV), the specific type of HPV will be displayed. If more than one type applies to a source, this order of priority is used to determine which type appears: Violation Unaddressed, EPA has Lead Enforcement Violation Unaddressed, State has Lead Enforcement Violation Unaddressed, Local has Lead Enforcement Violation Addressed, EPA has Lead Enforcement Violation Addressed, State has Lead Enforcement Violation Addressed, Local has Lead Enforcement When there is no Federally-Reportable Violation determination date in the past year and no open High Priority Violation in the most recent quarter in the data system of record, “Not Available” is displayed.
 * @member {String} CAAComplianceStatus
 */
Echo07.prototype['CAAComplianceStatus'] = undefined;

/**
 * The effective date of the most recent listed enforcement action entered into the CAA program database.
 * @member {String} CAADateLastFormalAction
 */
Echo07.prototype['CAADateLastFormalAction'] = undefined;

/**
 * The number of days since a CAA Full Compliance Evaluation (FCE) was completed.
 * @member {String} CAADaysLastEvaluation
 */
Echo07.prototype['CAADaysLastEvaluation'] = undefined;

/**
 * The number of inspections/compliance evaluations under the Clean Air Act, occurring at the facility within the last five years
 * @member {String} CAAEvaluationCount
 */
Echo07.prototype['CAAEvaluationCount'] = undefined;

/**
 * Indicates the number of enforcement actions taken against the facility within the last five years under the Clean Air Act.
 * @member {String} CAAFormalActionCount
 */
Echo07.prototype['CAAFormalActionCount'] = undefined;

/**
 * The High Priority Violator (HPV) status for the facility during the most recent quarter reflects the time the records were extracted from the program data system. \"Y\" indicates the facility is in HPV for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in HPV.
 * @member {String} CAAHpvFlag
 */
Echo07.prototype['CAAHpvFlag'] = undefined;

/**
 * Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Clean Air Act.
 * @member {String} CAAInformalCount
 */
Echo07.prototype['CAAInformalCount'] = undefined;

/**
 * The amount of the most recent penalty entered into the CAA program database.
 * @member {String} CAALastPenaltyAmt
 */
Echo07.prototype['CAALastPenaltyAmt'] = undefined;

/**
 * The effective date of the most recent penalty entered into the CAA program database.
 * @member {String} CAALastPenaltyDate
 */
Echo07.prototype['CAALastPenaltyDate'] = undefined;

/**
 * The CAA permit's primary North American Industry Classification System (NAICS) Codes.
 * @member {String} CAANAICS
 */
Echo07.prototype['CAANAICS'] = undefined;

/**
 * The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act.
 * @member {String} CAAPenalties
 */
Echo07.prototype['CAAPenalties'] = undefined;

/**
 * ICIS AIR Permit Types associated with the FRS Facility: - Major - Federally Reportable Minor - Other Minor - Synthetic Minor - NULL
 * @member {String} CAAPermitTypes
 */
Echo07.prototype['CAAPermitTypes'] = undefined;

/**
 * The number of quarters, out of the last twelve quarters, in which the CAA permit is considered in violation.
 * @member {String} CAAQtrsWithNC
 */
Echo07.prototype['CAAQtrsWithNC'] = undefined;

/**
 * The CAA permit's primary Standard Industrial Classification (SIC) Codes.
 * @member {String} CAASICs
 */
Echo07.prototype['CAASICs'] = undefined;

/**
 * The facility's 3-year compliance status history by quarter (3-month period) entered in the CWA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
 * @member {String} CWA13qtrsComplHistory
 */
Echo07.prototype['CWA13qtrsComplHistory'] = undefined;

/**
 * The number of effluent violations at the facility in the past 13 quarters.
 * @member {String} CWA13qtrsEfflntExceedances
 */
Echo07.prototype['CWA13qtrsEfflntExceedances'] = undefined;

/**
 * No longer used.  Will be deleted in nthe future.
 * @member {String} CWA3YrQncrCodes
 */
Echo07.prototype['CWA3YrQncrCodes'] = undefined;

/**
 * An indication of the facility's compliance status under the Clean Water Act. When a major source is in significant noncompliance (SNC) or a non-major source has a Category I violation, the specific type of SNC/Category I will be displayed. If more than one type applies to a facility, this order of priority is used to determine which code appears: S(CSchVio) - an enforcement action has been issued, and the facility is not meeting its compliance schedule E(EffViol) - effluent violations of monthly average limits X(EffNMth) - effluent violations of non-monthly average limits T(CSchRpt) - compliance schedule reporting violation D(DMR NR) - non-receipt of discharge monitoring report
 * @member {String} CWAComplianceStatus
 */
Echo07.prototype['CWAComplianceStatus'] = undefined;

/**
 * The Compliance Tracking classifications which can assist in interpreting the facility's compliance status, particularly for non-major standard permittees.
 * @member {String} CWAComplianceTracking
 */
Echo07.prototype['CWAComplianceTracking'] = undefined;

/**
 * The effective date of the most recent listed enforcement action entered into the CWA program database.
 * @member {String} CWADateLastFormalAction
 */
Echo07.prototype['CWADateLastFormalAction'] = undefined;

/**
 * The number of days since a CWA inspection was completed.
 * @member {String} CWADaysLastInspection
 */
Echo07.prototype['CWADaysLastInspection'] = undefined;

/**
 * Indicates the number of enforcement actions taken against the facility within the last five years under the Clean Water Act.
 * @member {String} CWAFormalActionCount
 */
Echo07.prototype['CWAFormalActionCount'] = undefined;

/**
 * Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Clean Water Act.
 * @member {String} CWAInformalCount
 */
Echo07.prototype['CWAInformalCount'] = undefined;

/**
 * The number of inspections/compliance evaluations under the Clean Water Act, occurring at the facility within the last five years.
 * @member {String} CWAInspectionCount
 */
Echo07.prototype['CWAInspectionCount'] = undefined;

/**
 * The amount of the most recent penalty entered into the CWA program database.
 * @member {String} CWALastPenaltyAmt
 */
Echo07.prototype['CWALastPenaltyAmt'] = undefined;

/**
 * The effective date of the most recent penalty entered into the CWA program database.
 * @member {String} CWALastPenaltyDate
 */
Echo07.prototype['CWALastPenaltyDate'] = undefined;

/**
 * The CWA permit's primary North American Industry Classification System (NAICS) Codes.
 * @member {String} CWANAICS
 */
Echo07.prototype['CWANAICS'] = undefined;

/**
 * The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Water Act.
 * @member {String} CWAPenalties
 */
Echo07.prototype['CWAPenalties'] = undefined;

/**
 * Indicates the facility's permit type or designation. - Major - Minor
 * @member {String} CWAPermitTypes
 */
Echo07.prototype['CWAPermitTypes'] = undefined;

/**
 * The number of quarters, out of the last twelve quarters, in which the CWA permit is considered in violation.
 * @member {String} CWAQtrsWithNC
 */
Echo07.prototype['CWAQtrsWithNC'] = undefined;

/**
 * The CWA permit's primary Standard Industrial Classification (SIC) Codes.
 * @member {String} CWASICs
 */
Echo07.prototype['CWASICs'] = undefined;

/**
 * The CWA Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.
 * @member {String} CWASNCFlag
 */
Echo07.prototype['CWASNCFlag'] = undefined;

/**
 * Facility identifiers for the Clean Air Markets Division database.
 * @member {String} CamdIDs
 */
Echo07.prototype['CamdIDs'] = undefined;

/**
 * A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
 * @member {String} CensusBlockGroup
 */
Echo07.prototype['CensusBlockGroup'] = undefined;

/**
 * Indicates if the facility has a current significant violation. 1 = Yes
 * @member {String} CurrSvFlag
 */
Echo07.prototype['CurrSvFlag'] = undefined;

/**
 * Indicates if the facility has a current violation. 1 = Yes
 * @member {String} CurrVioFlag
 */
Echo07.prototype['CurrVioFlag'] = undefined;

/**
 * The URL to the facility's Detailed Facility Report.
 * @member {String} DfrUrl
 */
Echo07.prototype['DfrUrl'] = undefined;

/**
 * Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes
 * @member {String} Ea5yrFlag
 */
Echo07.prototype['Ea5yrFlag'] = undefined;

/**
 * @member {String} EffChartsFlag
 */
Echo07.prototype['EffChartsFlag'] = undefined;

/**
 * Indicates whether the facility reports to the Emissions Inventory System (EIS).
 * @member {String} EisFlag
 */
Echo07.prototype['EisFlag'] = undefined;

/**
 * A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.
 * @member {String} EisIDs
 */
Echo07.prototype['EisIDs'] = undefined;

/**
 * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
 * @member {String} EjscreenFlag
 */
Echo07.prototype['EjscreenFlag'] = undefined;

/**
 * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
 * @member {String} EjscreenFlagUs
 */
Echo07.prototype['EjscreenFlagUs'] = undefined;

/**
 * From ICIS FE&C, the number of EPCRA inspections at the facility in the past five years.
 * @member {String} EpcraInspections5yr
 */
Echo07.prototype['EpcraInspections5yr'] = undefined;

/**
 * The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
 * @member {String} Fac3yrComplianceHistory
 */
Echo07.prototype['Fac3yrComplianceHistory'] = undefined;

/**
 * The estimate of accuracy, in meters, based on provided spatial metadata and quality assurance routines for the provided facility coordinate.
 * @member {String} FacAccuracyMeters
 */
Echo07.prototype['FacAccuracyMeters'] = undefined;

/**
 * Indicates whether any of the associated ICIS-Air, ICIS-NPDES, RCRAInfo or SDWIS permits/facilities are in an active status.
 * @member {String} FacActiveFlag
 */
Echo07.prototype['FacActiveFlag'] = undefined;

/**
 * Indicates whether the facility, based on the facility spatial coordinate, is within the Chesapeake Bay watershed.
 * @member {String} FacChesapeakeBayFlg
 */
Echo07.prototype['FacChesapeakeBayFlg'] = undefined;

/**
 * The city where the facility is located.
 * @member {String} FacCity
 */
Echo07.prototype['FacCity'] = undefined;

/**
 * Indicates the collection method used (GPS, Photo Interpolation, Address Geocode, etc) to determine a facility's spatial coodinate.
 * @member {String} FacCollectionMethod
 */
Echo07.prototype['FacCollectionMethod'] = undefined;

/**
 * An indication of the facility's known overall compliance status. Status codes include: SNC/Serious Viol [significant noncompliance (SNC), high priority violation (HPV), or serious violator, depending on statute] In Violation (in violation of an environmental regulation) No Violation (no violations recorded in the national systems of record) Not Available Unknown
 * @member {String} FacComplianceStatus
 */
Echo07.prototype['FacComplianceStatus'] = undefined;

/**
 * The county where the facility is located.
 * @member {String} FacCounty
 */
Echo07.prototype['FacCounty'] = undefined;

/**
 * Indicates the effective date of the most recent listed formal enforcement action taken against the facility.
 * @member {String} FacDateLastFormalActEPA
 */
Echo07.prototype['FacDateLastFormalActEPA'] = undefined;

/**
 * The effective date of the most recent listed formal enforcement action taken against the facility by a state agency.
 * @member {String} FacDateLastFormalActSt
 */
Echo07.prototype['FacDateLastFormalActSt'] = undefined;

/**
 * Indicates the effective date of the most recent listed enforcement action taken against the facility.
 * @member {String} FacDateLastFormalAction
 */
Echo07.prototype['FacDateLastFormalAction'] = undefined;

/**
 * Indicates the effective date of the most recent listed informal enforcement action taken against the facility.
 * @member {String} FacDateLastInformalActEPA
 */
Echo07.prototype['FacDateLastInformalActEPA'] = undefined;

/**
 * The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.
 * @member {String} FacDateLastInformalActSt
 */
Echo07.prototype['FacDateLastInformalActSt'] = undefined;

/**
 * The date of the most recent informal action or NOV taken recorded in AFS, ICIS-NPDES, RCRA Info or SDWIS.
 * @member {String} FacDateLastInformalAction
 */
Echo07.prototype['FacDateLastInformalAction'] = undefined;

/**
 * The date on which most recent inspection of the facility took place. For the Clean Air Act, the date on which a Full Inspection (FCE) was completed. This date may or may not correspond to an actual site visit. A series of partial on- or off-site inspections may have been conducted during the fiscal year as part of this FCE.
 * @member {String} FacDateLastInspection
 */
Echo07.prototype['FacDateLastInspection'] = undefined;

/**
 * The date of the facility's last inspection.
 * @member {String} FacDateLastInspectionEPA
 */
Echo07.prototype['FacDateLastInspectionEPA'] = undefined;

/**
 * The date on which the most recent \"olfficial\"  inspection of the facility by a state agency took place.
 * @member {String} FacDateLastInspectionState
 */
Echo07.prototype['FacDateLastInspectionState'] = undefined;

/**
 * Indicates the date on which the most recent assessed (or final) penalty was taken against the facility.
 * @member {String} FacDateLastPenalty
 */
Echo07.prototype['FacDateLastPenalty'] = undefined;

/**
 * The number of days from the last ECHO refresh to the date on which the most recent inspection of the facility took place based on data recorded into AFS, ICIS-NPDES, or RCRA Info.
 * @member {String} FacDaysLastInspection
 */
Echo07.prototype['FacDaysLastInspection'] = undefined;

/**
 * The 2010 Census Block derived from the facility coordinate.
 * @member {String} FacDerivedCb2010
 */
Echo07.prototype['FacDerivedCb2010'] = undefined;

/**
 * The 113th Congressional District derived from the facility coordinate.
 * @member {String} FacDerivedCd113
 */
Echo07.prototype['FacDerivedCd113'] = undefined;

/**
 * The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
 * @member {String} FacDerivedHuc
 */
Echo07.prototype['FacDerivedHuc'] = undefined;

/**
 * The 12-digit Watershed Boundary Dataset code derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
 * @member {String} FacDerivedRadWBDHu12
 */
Echo07.prototype['FacDerivedRadWBDHu12'] = undefined;

/**
 * The 12 digit Watershed Boundary Dataset name derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
 * @member {String} FacDerivedRadWBDHu12Name
 */
Echo07.prototype['FacDerivedRadWBDHu12Name'] = undefined;

/**
 * The 8-digit Watershed Hydrologic Unit Code (HUC) derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
 * @member {String} FacDerivedRadWBDHu8
 */
Echo07.prototype['FacDerivedRadWBDHu8'] = undefined;

/**
 * The 8 digit watershed name derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.
 * @member {String} FacDerivedRadWBDHu8Name
 */
Echo07.prototype['FacDerivedRadWBDHu8Name'] = undefined;

/**
 * The Federal Information Processing Standard (FIPS) code which uniquely identifies the state and county in which the facility is located.
 * @member {String} FacDerivedStctyFIPS
 */
Echo07.prototype['FacDerivedStctyFIPS'] = undefined;

/**
 * The tribes or tribal territories located within 25 miles of the facility's location.
 * @member {String} FacDerivedTRIbes
 */
Echo07.prototype['FacDerivedTRIbes'] = undefined;

/**
 * The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.
 * @member {String} FacDerivedWBD
 */
Echo07.prototype['FacDerivedWBD'] = undefined;

/**
 * The Watershed Boundary Dataset name derived from the facility coordinate.
 * @member {String} FacDerivedWBDHu12Name
 */
Echo07.prototype['FacDerivedWBDHu12Name'] = undefined;

/**
 * Spatially derived HUC based on the facility's geographic coordinates in FRS.
 * @member {String} FacDerivedWBDHu8
 */
Echo07.prototype['FacDerivedWBDHu8'] = undefined;

/**
 * The name of the hydrologic unit in which the facility is located within, derived spatially based on the facility's geographic coordinates in FRS.
 * @member {String} FacDerivedWBDHu8Name
 */
Echo07.prototype['FacDerivedWBDHu8Name'] = undefined;

/**
 * The ZIP Code derived from the facility coordinate.
 * @member {String} FacDerivedZip
 */
Echo07.prototype['FacDerivedZip'] = undefined;

/**
 * The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories
 * @member {String} FacEPARegion
 */
Echo07.prototype['FacEPARegion'] = undefined;

/**
 * The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
 * @member {String} FacFIPSCode
 */
Echo07.prototype['FacFIPSCode'] = undefined;

/**
 * The facility's federal agency code.
 * @member {String} FacFederalAgency
 */
Echo07.prototype['FacFederalAgency'] = undefined;

/**
 * Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.
 * @member {String} FacFederalAgencyName
 */
Echo07.prototype['FacFederalAgencyName'] = undefined;

/**
 * Indicates whether the facility is part of a federal agency.
 * @member {String} FacFederalFlg
 */
Echo07.prototype['FacFederalFlg'] = undefined;

/**
 * Indicates the total number of enforcement actions taken against the facility within the last five years. NA indicates that this measure is not applicable for facilities with no associated CAA, CWA, or RCRA permits
 * @member {String} FacFormalActionCount
 */
Echo07.prototype['FacFormalActionCount'] = undefined;

/**
 * Indicates whether or not the facility discharges directly into category 4 or 5 impaired water, as designated under section 303(d) of the Clean Water Act.
 * @member {String} FacImpWaterFlg
 */
Echo07.prototype['FacImpWaterFlg'] = undefined;

/**
 * Flag showing Y/N whether the facility is located in Indian Country.
 * @member {String} FacIndianCntryFlg
 */
Echo07.prototype['FacIndianCntryFlg'] = undefined;

/**
 * Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.
 * @member {String} FacIndianSpatialFlg
 */
Echo07.prototype['FacIndianSpatialFlg'] = undefined;

/**
 * Indicates the total number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years
 * @member {String} FacInformalCount
 */
Echo07.prototype['FacInformalCount'] = undefined;

/**
 * The number of inspections/compliance evaluations that have occurred at the facility, under the AIR, CWA, and RCRA, within the last five years. The last 5 years will include data from the 20 most recently completed quarters, plus data from the current quarter up until the refresh date. This count only includes inspection types that are counted as inspections in official counts.
 * @member {String} FacInspectionCount
 */
Echo07.prototype['FacInspectionCount'] = undefined;

/**
 * Indicates the dollar amount of the most recent assessed (or final) penalty taken against the facility.
 * @member {String} FacLastPenaltyAmt
 */
Echo07.prototype['FacLastPenaltyAmt'] = undefined;

/**
 * The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
 * @member {String} FacLat
 */
Echo07.prototype['FacLat'] = undefined;

/**
 * The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
 * @member {String} FacLong
 */
Echo07.prototype['FacLong'] = undefined;

/**
 * Indicates whether the facility is designated as a “major” (usually a large facility).
 * @member {String} FacMajorFlag
 */
Echo07.prototype['FacMajorFlag'] = undefined;

/**
 * Graphical indicator denoting whether geographical data required to map a facility are available.
 * @member {String} FacMapFlg
 */
Echo07.prototype['FacMapFlg'] = undefined;

/**
 * The default map icon image file calculated for the facility by the ECHO program.
 * @member {String} FacMapIcon
 */
Echo07.prototype['FacMapIcon'] = undefined;

/**
 * A 3-digit combination of Y/N flags indicating if the facility is considered a Right-to-Know Network (RTKNet) CAA (position 1), NPDES (position 2), or RCRA facility (position 3).
 * @member {String} FacMyrtkUniverse
 */
Echo07.prototype['FacMyrtkUniverse'] = undefined;

/**
 * The facility's North American Industry Classification System (NAICS) Codes.
 * @member {String} FacNAICSCodes
 */
Echo07.prototype['FacNAICSCodes'] = undefined;

/**
 * Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.
 * @member {String} FacNaaFlag
 */
Echo07.prototype['FacNaaFlag'] = undefined;

/**
 * Name of facility
 * @member {String} FacName
 */
Echo07.prototype['FacName'] = undefined;

/**
 * The total number of penalties assessed (or final) taken against the facility within the last five years
 * @member {String} FacPenaltyCount
 */
Echo07.prototype['FacPenaltyCount'] = undefined;

/**
 * Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
 * @member {String} FacPercentMinority
 */
Echo07.prototype['FacPercentMinority'] = undefined;

/**
 * The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field).
 * @member {String} FacPopDen
 */
Echo07.prototype['FacPopDen'] = undefined;

/**
 * The number of programs (CAA, CWA, SDWA, RCRA) related to the facility that have a current serious violation.
 * @member {String} FacProgramsWithSNC
 */
Echo07.prototype['FacProgramsWithSNC'] = undefined;

/**
 * The number of quarters, out of the last twelve quarters, in which the facility is considered in violation.
 * @member {String} FacQtrsWithNC
 */
Echo07.prototype['FacQtrsWithNC'] = undefined;

/**
 * A description of the location for the provided facility coordinate.
 * @member {String} FacReferencePoint
 */
Echo07.prototype['FacReferencePoint'] = undefined;

/**
 * Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.
 * @member {String} FacSICCodes
 */
Echo07.prototype['FacSICCodes'] = undefined;

/**
 * The Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.
 * @member {String} FacSNCFlg
 */
Echo07.prototype['FacSNCFlg'] = undefined;

/**
 * Facility state
 * @member {String} FacState
 */
Echo07.prototype['FacState'] = undefined;

/**
 * The standardized  facility county name from EPA's Facility Registry System
 * @member {String} FacStdCountyName
 */
Echo07.prototype['FacStdCountyName'] = undefined;

/**
 * Street address where facility is located, as maintained by each data system. Certain data systems also maintain mailing address information, which is not used in this report. The street address may differ across EPA databases due to differences in reported information (e.g., use of mailing address), change in ownership, use of parent or subsidiary address, etc.
 * @member {String} FacStreet
 */
Echo07.prototype['FacStreet'] = undefined;

/**
 * The total dollar amount of either assessed (or final) penalties taken against the facility within the last five years
 * @member {String} FacTotalPenalties
 */
Echo07.prototype['FacTotalPenalties'] = undefined;

/**
 * A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
 * @member {String} FacUsMexBorderFlg
 */
Echo07.prototype['FacUsMexBorderFlg'] = undefined;

/**
 * Facility ZIP code
 * @member {String} FacZip
 */
Echo07.prototype['FacZip'] = undefined;

/**
 * All Case Numbers of Federal Enforcement Cases relating to the Facility from the ICIS System
 * @member {String} FecCaseIDs
 */
Echo07.prototype['FecCaseIDs'] = undefined;

/**
 * The date of the latest Federal Enforcement Case related to this Facility in the ICIS system.
 * @member {String} FecLastCaseDate
 */
Echo07.prototype['FecLastCaseDate'] = undefined;

/**
 * The total number of Federal Enforcement Cases in the last 5 years related to this Facility in the ICIS system.
 * @member {String} FecNumberOfCases
 */
Echo07.prototype['FecNumberOfCases'] = undefined;

/**
 * The total Federal Enforcement Case penalties assessed against this facility in the last 5 years.
 * @member {String} FecTotalPenalties
 */
Echo07.prototype['FecTotalPenalties'] = undefined;

/**
 * From ICIS FE&C, the number of FIFRA inspections at the facility in the past five years.
 * @member {String} FifraInspections5yr
 */
Echo07.prototype['FifraInspections5yr'] = undefined;

/**
 * The sum of total release amounts of all linked Greenhouse Gas IDs reported as \"metric tons of CO2 equivalents\"
 * @member {String} GHGCO2Releases
 */
Echo07.prototype['GHGCO2Releases'] = undefined;

/**
 * Indicates whether the facility has a Greenhouse Gas (GHG) permit.
 * @member {String} GHGFlag
 */
Echo07.prototype['GHGFlag'] = undefined;

/**
 * A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.
 * @member {String} GHGIDs
 */
Echo07.prototype['GHGIDs'] = undefined;

/**
 * ???
 * @member {String} HasPollRpt
 */
Echo07.prototype['HasPollRpt'] = undefined;

/**
 * Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.
 * @member {String} Infea5yrFlag
 */
Echo07.prototype['Infea5yrFlag'] = undefined;

/**
 * Indicates if the facility has an inspection within the last 5 years. 1 = Yes
 * @member {String} Insp5yrFlag
 */
Echo07.prototype['Insp5yrFlag'] = undefined;

/**
 * Flag showing Y/N whether location is within the contiguous (lower 48) United States.
 * @member {String} Lower48
 */
Echo07.prototype['Lower48'] = undefined;

/**
 * The maximum percentile from all individual EJSCREEN indicators.
 * @member {String} MaxPctileUs
 */
Echo07.prototype['MaxPctileUs'] = undefined;

/**
 * A sorting score for internal use.
 * @member {String} MaxScore
 */
Echo07.prototype['MaxScore'] = undefined;

/**
 * Indicates whether or not the permit or site is considered either in Non-compliance (NC), Significant Non-compliance (SNC) or High Priority violation (HPV) status.
 * @member {String} NC
 */
Echo07.prototype['NC'] = undefined;

/**
 * Indicates whether the facility has a Clean Water Act (CWA) permit.
 * @member {String} NPDESFlag
 */
Echo07.prototype['NPDESFlag'] = undefined;

/**
 * Clean Water Act ID from the ICIS-NPDES (Integrated Compliance Information System - National Pollutant Discharge Elimination System)
 * @member {String} NPDESIDs
 */
Echo07.prototype['NPDESIDs'] = undefined;

/**
 * The nonattainment area categories that the facility is in, derived spatially based on the facility's geographic coordinates in FRS.�
 * @member {String} NaaCategories
 */
Echo07.prototype['NaaCategories'] = undefined;

/**
 * All criteria pollutants that the facility is in nonattainment for.
 * @member {String} NaaPollutants
 */
Echo07.prototype['NaaPollutants'] = undefined;

/**
 * Sequential number assigned to each facility or cluster returned.
 * @member {String} ObjectId
 */
Echo07.prototype['ObjectId'] = undefined;

/**
 * The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.
 * @member {String} Over80CountUs
 */
Echo07.prototype['Over80CountUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
 * @member {String} PctileCancerUs
 */
Echo07.prototype['PctileCancerUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
 * @member {String} PctileDpmUs
 */
Echo07.prototype['PctileDpmUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN ozone indicator.
 * @member {String} PctileO3Us
 */
Echo07.prototype['PctileO3Us'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN Lead paint indicator.
 * @member {String} PctilePctpre1960Us
 */
Echo07.prototype['PctilePctpre1960Us'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN particulate matter indicator.
 * @member {String} PctilePmUs
 */
Echo07.prototype['PctilePmUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
 * @member {String} PctileProximityNPDESUs
 */
Echo07.prototype['PctileProximityNPDESUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
 * @member {String} PctileProximityNplUs
 */
Echo07.prototype['PctileProximityNplUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
 * @member {String} PctileProximityRmpUs
 */
Echo07.prototype['PctileProximityRmpUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
 * @member {String} PctileProximityTsdfUs
 */
Echo07.prototype['PctileProximityTsdfUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
 * @member {String} PctileRespUs
 */
Echo07.prototype['PctileRespUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
 * @member {String} PctileTrafficScoreUs
 */
Echo07.prototype['PctileTrafficScoreUs'] = undefined;

/**
 * The system's 3-year compliance status history by quarter (3-month period) entered in the RCRA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
 * @member {String} RCRA3yrComplQtrsHistory
 */
Echo07.prototype['RCRA3yrComplQtrsHistory'] = undefined;

/**
 * An indication of the facility's compliance status under the Resource Conservation and Recovery Act (Significant Violation = Significant Noncomplier, Noncompliance, or No Violation).
 * @member {String} RCRAComplianceStatus
 */
Echo07.prototype['RCRAComplianceStatus'] = undefined;

/**
 * The effective date of the most recent listed enforcement action entered into the RCRA program database.
 * @member {String} RCRADateLastFormalAction
 */
Echo07.prototype['RCRADateLastFormalAction'] = undefined;

/**
 * The number of days since a RCRA inspection was completed.
 * @member {String} RCRADaysLastEvaluation
 */
Echo07.prototype['RCRADaysLastEvaluation'] = undefined;

/**
 * Indicates whether the facility has a Resource Conservation and Recovery Action (RCRA) permit.
 * @member {String} RCRAFlag
 */
Echo07.prototype['RCRAFlag'] = undefined;

/**
 * Indicates the number of enforcement actions taken against the facility within the last five years under the Resource Conservation and Recovery Act.
 * @member {String} RCRAFormalActionCount
 */
Echo07.prototype['RCRAFormalActionCount'] = undefined;

/**
 * A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
 * @member {String} RCRAIDs
 */
Echo07.prototype['RCRAIDs'] = undefined;

/**
 * Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Resource Conservation and Recovery Act.
 * @member {String} RCRAInformalCount
 */
Echo07.prototype['RCRAInformalCount'] = undefined;

/**
 * The number of inspections/compliance evaluations under the Resource Conservation and Recovery Act, occurring at the facility within the last five years
 * @member {String} RCRAInspectionCount
 */
Echo07.prototype['RCRAInspectionCount'] = undefined;

/**
 * The amount of the most recent penalty entered into the RCRA program database.
 * @member {String} RCRALastPenaltyAmt
 */
Echo07.prototype['RCRALastPenaltyAmt'] = undefined;

/**
 * Indicates the date on which the most recent assessed (or final) penalty was taken against the facility, entered in the RCRAInfo program database.
 * @member {String} RCRALastPenaltyDate
 */
Echo07.prototype['RCRALastPenaltyDate'] = undefined;

/**
 * The RCRA permit's primary North American Industry Classification System (NAICS) Code.
 * @member {String} RCRANAICS
 */
Echo07.prototype['RCRANAICS'] = undefined;

/**
 * The total dollar amount of assessed (or final) penalties taken against the facility within the last five years, entered in the RCRAInfo program database.
 * @member {String} RCRAPenalties
 */
Echo07.prototype['RCRAPenalties'] = undefined;

/**
 * RCRA Facility Types include: - TSDF = Treatment, Storage and Disposal facility - LQG = Large Quantity Generator - SQG = Small Quantity Generator - CESQG = Conditionally-Exempt Small Quantity Generator - Operating TSDF - Transporters
 * @member {String} RCRAPermitTypes
 */
Echo07.prototype['RCRAPermitTypes'] = undefined;

/**
 * The number of quarters, out of the last twelve quarters, in which the RCRA permit is considered in violation.
 * @member {String} RCRAQtrsWithNC
 */
Echo07.prototype['RCRAQtrsWithNC'] = undefined;

/**
 * The RCRA Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.
 * @member {String} RCRASNCFlag
 */
Echo07.prototype['RCRASNCFlag'] = undefined;

/**
 * An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
 * @member {String} RegistryID
 */
Echo07.prototype['RegistryID'] = undefined;

/**
 * A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.
 * @member {String} RmpIDs
 */
Echo07.prototype['RmpIDs'] = undefined;

/**
 * The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ - No Violation Identified V - Noncompliance S - Significant Noncompliance U - Undetermined
 * @member {String} SDWA3yrComplQtrsHistory
 */
Echo07.prototype['SDWA3yrComplQtrsHistory'] = undefined;

/**
 * An indication of the facility's compliance status under the Safe Drinking Water Act (Serious Violator, Noncompliance, or No Violation).
 * @member {String} SDWAComplianceStatus
 */
Echo07.prototype['SDWAComplianceStatus'] = undefined;

/**
 * Indicates the number of enforcement actions taken against the facility within the last five years under the Safe Drinking Water Act
 * @member {String} SDWAFormalActionCount
 */
Echo07.prototype['SDWAFormalActionCount'] = undefined;

/**
 * A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
 * @member {String} SDWAIDs
 */
Echo07.prototype['SDWAIDs'] = undefined;

/**
 * Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Safe Drinking Water Act
 * @member {String} SDWAInformalCount
 */
Echo07.prototype['SDWAInformalCount'] = undefined;

/**
 * The number of SDWA inspections at the facility in the past five years.
 * @member {String} SDWAInspections5yr
 */
Echo07.prototype['SDWAInspections5yr'] = undefined;

/**
 * The number of quarters, out of the last twelve quarters, in which the SDWA permit is considered in violation.
 * @member {String} SDWAQtrsWithNC
 */
Echo07.prototype['SDWAQtrsWithNC'] = undefined;

/**
 * Indicates whether the Water System has a Serious Violation.
 * @member {String} SDWASNCFlag
 */
Echo07.prototype['SDWASNCFlag'] = undefined;

/**
 * SDWIS System Types
 * @member {String} SDWASystemTypes
 */
Echo07.prototype['SDWASystemTypes'] = undefined;

/**
 * Indicates whether the facility has a Safe Drinking Water Information System (SDWIS) ID.
 * @member {String} SDWISFlag
 */
Echo07.prototype['SDWISFlag'] = undefined;

/**
 * @member {String} Score
 */
Echo07.prototype['Score'] = undefined;

/**
 * @member {String} SemsFlag
 */
Echo07.prototype['SemsFlag'] = undefined;

/**
 * @member {String} SemsIDs
 */
Echo07.prototype['SemsIDs'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceID
 */
Echo07.prototype['SourceID'] = undefined;

/**
 * Indicates whether the facility has a Toxics Release Inventory (TRI) permit.
 * @member {String} TRIFlag
 */
Echo07.prototype['TRIFlag'] = undefined;

/**
 * A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.
 * @member {String} TRIIDs
 */
Echo07.prototype['TRIIDs'] = undefined;

/**
 * Total pounds per year transferred off-site.
 * @member {String} TRIOffSiteTransfers
 */
Echo07.prototype['TRIOffSiteTransfers'] = undefined;

/**
 * Total pounds per year released for Air Emissions, Surface Water Discharges, Underground Injections and Releases to Land.
 * @member {String} TRIOnSiteReleases
 */
Echo07.prototype['TRIOnSiteReleases'] = undefined;

/**
 * Total chemical releases, in pounds, as reported to the Toxics Release Inventory (TRI) by the facility for the most recent reporting year
 * @member {String} TRIReleasesTransfers
 */
Echo07.prototype['TRIReleasesTransfers'] = undefined;

/**
 * Indicates whether or not the facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
 * @member {String} TRIReporter
 */
Echo07.prototype['TRIReporter'] = undefined;

/**
 * A 'Y' indicates a TRI Reporter from a prior year.
 * @member {String} TRIReporterInPast
 */
Echo07.prototype['TRIReporterInPast'] = undefined;

/**
 * A flag indicating that the facility is within a tribal area.
 * @member {String} TRIbalFlag
 */
Echo07.prototype['TRIbalFlag'] = undefined;

/**
 * Flag indicating whether or not a facility has a TSCA ID
 * @member {String} TscaFlag
 */
Echo07.prototype['TscaFlag'] = undefined;

/**
 * Toxic Substances Control Act ID assigned to a facility
 * @member {String} TscaIDs
 */
Echo07.prototype['TscaIDs'] = undefined;

/**
 * From ICIS FE&C, the number of TSCA inspections at the facility in the past five years.
 * @member {String} TscaInspections5yr
 */
Echo07.prototype['TscaInspections5yr'] = undefined;

/**
 * Indicates if the facility had a violation within the last 3 years. 1 = Yes
 * @member {String} ViolFlag
 */
Echo07.prototype['ViolFlag'] = undefined;

/**
 * Contains flags that identify what web accessible documents are available for the facility.
 * @member {String} WebDocs
 */
Echo07.prototype['WebDocs'] = undefined;






export default Echo07;

