/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - All Data
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.  ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    ECHO Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated as Clean Air Act (CAA) stationary sources, Clean Water Act (CWA) dischargers, Resource Conservation and Recovery Act (RCRA) hazardous waste generators/handlers, and Safe Drinking Water Act (SDWA) public water systems.  Data of interest from other EPA sources, such as the Toxics Release Inventory, is also supplied for context.   \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.     The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Echo06 from './Echo06';
import Echo07 from './Echo07';
import Qp0 from './Qp0';

/**
 * The Echo08 model module.
 * @module model/Echo08
 * @version 2019.10.15
 */
class Echo08 {
    /**
     * Constructs a new <code>Echo08</code>.
     * Results Object
     * @alias module:model/Echo08
     * @param badSystemIDs {String} Identifies which passed query system identifiers are invalid.
     * @param cAARows {String} The number of facilities or cases within the result set that have Clean Air Act (CAA) permits.
     * @param cVRows {String} Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.
     * @param cWARows {String} The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.
     * @param fEARows {String} Summary count of the number of facilities with a formal enforcement action in the past five years
     * @param iNSPRows {String} Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)
     * @param iconBaseURL {String} URL where all the icons are located
     * @param indianCountryRows {String} Number of facilities with tribal_flag populated
     * @param infFEARows {String} Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)
     * @param message {String} Field to record messages (typically performance-related) about packet processing
     * @param popUpBaseURL {String} Combine this URL with the PUC to get popup info
     * @param queryID {String} Sequential number assigned to entire search result
     * @param queryParameters {Array.<module:model/Qp0>} A list of submitted query parameters and their values.
     * @param queryRows {String} Number of query results returned
     * @param rCRRows {String} The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.
     * @param sVRows {String} Number of facilities with curr_sv_flag populated (CWP_STATUS = \"Significant Violation\")
     * @param serviceBaseURL {String} The base service URL.
     * @param tRIRows {String} The number of facilities within the results set that have Toxics Release Inventory (TRI) permits.
     * @param totalPenalties {String} The total dollar amount of either assessed or final penalties within the five year time period
     * @param v3Rows {String} Number of facilities having one or more quarters in non-compliance (QNC) in the last three years
     */
    constructor(badSystemIDs, cAARows, cVRows, cWARows, fEARows, iNSPRows, iconBaseURL, indianCountryRows, infFEARows, message, popUpBaseURL, queryID, queryParameters, queryRows, rCRRows, sVRows, serviceBaseURL, tRIRows, totalPenalties, v3Rows) { 
        
        Echo08.initialize(this, badSystemIDs, cAARows, cVRows, cWARows, fEARows, iNSPRows, iconBaseURL, indianCountryRows, infFEARows, message, popUpBaseURL, queryID, queryParameters, queryRows, rCRRows, sVRows, serviceBaseURL, tRIRows, totalPenalties, v3Rows);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, badSystemIDs, cAARows, cVRows, cWARows, fEARows, iNSPRows, iconBaseURL, indianCountryRows, infFEARows, message, popUpBaseURL, queryID, queryParameters, queryRows, rCRRows, sVRows, serviceBaseURL, tRIRows, totalPenalties, v3Rows) { 
        obj['BadSystemIDs'] = badSystemIDs;
        obj['CAARows'] = cAARows;
        obj['CVRows'] = cVRows;
        obj['CWARows'] = cWARows;
        obj['FEARows'] = fEARows;
        obj['INSPRows'] = iNSPRows;
        obj['IconBaseURL'] = iconBaseURL;
        obj['IndianCountryRows'] = indianCountryRows;
        obj['InfFEARows'] = infFEARows;
        obj['Message'] = message;
        obj['PopUpBaseURL'] = popUpBaseURL;
        obj['QueryID'] = queryID;
        obj['QueryParameters'] = queryParameters;
        obj['QueryRows'] = queryRows;
        obj['RCRRows'] = rCRRows;
        obj['SVRows'] = sVRows;
        obj['ServiceBaseURL'] = serviceBaseURL;
        obj['TRIRows'] = tRIRows;
        obj['TotalPenalties'] = totalPenalties;
        obj['V3Rows'] = v3Rows;
    }

    /**
     * Constructs a <code>Echo08</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Echo08} obj Optional instance to populate.
     * @return {module:model/Echo08} The populated <code>Echo08</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Echo08();

            if (data.hasOwnProperty('BadSystemIDs')) {
                obj['BadSystemIDs'] = ApiClient.convertToType(data['BadSystemIDs'], 'String');
            }
            if (data.hasOwnProperty('CAARows')) {
                obj['CAARows'] = ApiClient.convertToType(data['CAARows'], 'String');
            }
            if (data.hasOwnProperty('CVRows')) {
                obj['CVRows'] = ApiClient.convertToType(data['CVRows'], 'String');
            }
            if (data.hasOwnProperty('CWARows')) {
                obj['CWARows'] = ApiClient.convertToType(data['CWARows'], 'String');
            }
            if (data.hasOwnProperty('ClusterOutput')) {
                obj['ClusterOutput'] = Echo06.constructFromObject(data['ClusterOutput']);
            }
            if (data.hasOwnProperty('ClusterRecords')) {
                obj['ClusterRecords'] = ApiClient.convertToType(data['ClusterRecords'], 'String');
            }
            if (data.hasOwnProperty('FEARows')) {
                obj['FEARows'] = ApiClient.convertToType(data['FEARows'], 'String');
            }
            if (data.hasOwnProperty('Facilities')) {
                obj['Facilities'] = ApiClient.convertToType(data['Facilities'], [Echo07]);
            }
            if (data.hasOwnProperty('INSPRows')) {
                obj['INSPRows'] = ApiClient.convertToType(data['INSPRows'], 'String');
            }
            if (data.hasOwnProperty('IconBaseURL')) {
                obj['IconBaseURL'] = ApiClient.convertToType(data['IconBaseURL'], 'String');
            }
            if (data.hasOwnProperty('IndianCountryRows')) {
                obj['IndianCountryRows'] = ApiClient.convertToType(data['IndianCountryRows'], 'String');
            }
            if (data.hasOwnProperty('InfFEARows')) {
                obj['InfFEARows'] = ApiClient.convertToType(data['InfFEARows'], 'String');
            }
            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('PopUpBaseURL')) {
                obj['PopUpBaseURL'] = ApiClient.convertToType(data['PopUpBaseURL'], 'String');
            }
            if (data.hasOwnProperty('QueryID')) {
                obj['QueryID'] = ApiClient.convertToType(data['QueryID'], 'String');
            }
            if (data.hasOwnProperty('QueryParameters')) {
                obj['QueryParameters'] = ApiClient.convertToType(data['QueryParameters'], [Qp0]);
            }
            if (data.hasOwnProperty('QueryRows')) {
                obj['QueryRows'] = ApiClient.convertToType(data['QueryRows'], 'String');
            }
            if (data.hasOwnProperty('RCRRows')) {
                obj['RCRRows'] = ApiClient.convertToType(data['RCRRows'], 'String');
            }
            if (data.hasOwnProperty('SVRows')) {
                obj['SVRows'] = ApiClient.convertToType(data['SVRows'], 'String');
            }
            if (data.hasOwnProperty('ServiceBaseURL')) {
                obj['ServiceBaseURL'] = ApiClient.convertToType(data['ServiceBaseURL'], 'String');
            }
            if (data.hasOwnProperty('TRIRows')) {
                obj['TRIRows'] = ApiClient.convertToType(data['TRIRows'], 'String');
            }
            if (data.hasOwnProperty('TotalPenalties')) {
                obj['TotalPenalties'] = ApiClient.convertToType(data['TotalPenalties'], 'String');
            }
            if (data.hasOwnProperty('V3Rows')) {
                obj['V3Rows'] = ApiClient.convertToType(data['V3Rows'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Echo08</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Echo08</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Echo08.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['BadSystemIDs'] && !(typeof data['BadSystemIDs'] === 'string' || data['BadSystemIDs'] instanceof String)) {
            throw new Error("Expected the field `BadSystemIDs` to be a primitive type in the JSON string but got " + data['BadSystemIDs']);
        }
        // ensure the json data is a string
        if (data['CAARows'] && !(typeof data['CAARows'] === 'string' || data['CAARows'] instanceof String)) {
            throw new Error("Expected the field `CAARows` to be a primitive type in the JSON string but got " + data['CAARows']);
        }
        // ensure the json data is a string
        if (data['CVRows'] && !(typeof data['CVRows'] === 'string' || data['CVRows'] instanceof String)) {
            throw new Error("Expected the field `CVRows` to be a primitive type in the JSON string but got " + data['CVRows']);
        }
        // ensure the json data is a string
        if (data['CWARows'] && !(typeof data['CWARows'] === 'string' || data['CWARows'] instanceof String)) {
            throw new Error("Expected the field `CWARows` to be a primitive type in the JSON string but got " + data['CWARows']);
        }
        // validate the optional field `ClusterOutput`
        if (data['ClusterOutput']) { // data not null
          Echo06.validateJSON(data['ClusterOutput']);
        }
        // ensure the json data is a string
        if (data['ClusterRecords'] && !(typeof data['ClusterRecords'] === 'string' || data['ClusterRecords'] instanceof String)) {
            throw new Error("Expected the field `ClusterRecords` to be a primitive type in the JSON string but got " + data['ClusterRecords']);
        }
        // ensure the json data is a string
        if (data['FEARows'] && !(typeof data['FEARows'] === 'string' || data['FEARows'] instanceof String)) {
            throw new Error("Expected the field `FEARows` to be a primitive type in the JSON string but got " + data['FEARows']);
        }
        if (data['Facilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Facilities'])) {
                throw new Error("Expected the field `Facilities` to be an array in the JSON data but got " + data['Facilities']);
            }
            // validate the optional field `Facilities` (array)
            for (const item of data['Facilities']) {
                Echo07.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['INSPRows'] && !(typeof data['INSPRows'] === 'string' || data['INSPRows'] instanceof String)) {
            throw new Error("Expected the field `INSPRows` to be a primitive type in the JSON string but got " + data['INSPRows']);
        }
        // ensure the json data is a string
        if (data['IconBaseURL'] && !(typeof data['IconBaseURL'] === 'string' || data['IconBaseURL'] instanceof String)) {
            throw new Error("Expected the field `IconBaseURL` to be a primitive type in the JSON string but got " + data['IconBaseURL']);
        }
        // ensure the json data is a string
        if (data['IndianCountryRows'] && !(typeof data['IndianCountryRows'] === 'string' || data['IndianCountryRows'] instanceof String)) {
            throw new Error("Expected the field `IndianCountryRows` to be a primitive type in the JSON string but got " + data['IndianCountryRows']);
        }
        // ensure the json data is a string
        if (data['InfFEARows'] && !(typeof data['InfFEARows'] === 'string' || data['InfFEARows'] instanceof String)) {
            throw new Error("Expected the field `InfFEARows` to be a primitive type in the JSON string but got " + data['InfFEARows']);
        }
        // ensure the json data is a string
        if (data['Message'] && !(typeof data['Message'] === 'string' || data['Message'] instanceof String)) {
            throw new Error("Expected the field `Message` to be a primitive type in the JSON string but got " + data['Message']);
        }
        // ensure the json data is a string
        if (data['PopUpBaseURL'] && !(typeof data['PopUpBaseURL'] === 'string' || data['PopUpBaseURL'] instanceof String)) {
            throw new Error("Expected the field `PopUpBaseURL` to be a primitive type in the JSON string but got " + data['PopUpBaseURL']);
        }
        // ensure the json data is a string
        if (data['QueryID'] && !(typeof data['QueryID'] === 'string' || data['QueryID'] instanceof String)) {
            throw new Error("Expected the field `QueryID` to be a primitive type in the JSON string but got " + data['QueryID']);
        }
        if (data['QueryParameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['QueryParameters'])) {
                throw new Error("Expected the field `QueryParameters` to be an array in the JSON data but got " + data['QueryParameters']);
            }
            // validate the optional field `QueryParameters` (array)
            for (const item of data['QueryParameters']) {
                Qp0.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['QueryRows'] && !(typeof data['QueryRows'] === 'string' || data['QueryRows'] instanceof String)) {
            throw new Error("Expected the field `QueryRows` to be a primitive type in the JSON string but got " + data['QueryRows']);
        }
        // ensure the json data is a string
        if (data['RCRRows'] && !(typeof data['RCRRows'] === 'string' || data['RCRRows'] instanceof String)) {
            throw new Error("Expected the field `RCRRows` to be a primitive type in the JSON string but got " + data['RCRRows']);
        }
        // ensure the json data is a string
        if (data['SVRows'] && !(typeof data['SVRows'] === 'string' || data['SVRows'] instanceof String)) {
            throw new Error("Expected the field `SVRows` to be a primitive type in the JSON string but got " + data['SVRows']);
        }
        // ensure the json data is a string
        if (data['ServiceBaseURL'] && !(typeof data['ServiceBaseURL'] === 'string' || data['ServiceBaseURL'] instanceof String)) {
            throw new Error("Expected the field `ServiceBaseURL` to be a primitive type in the JSON string but got " + data['ServiceBaseURL']);
        }
        // ensure the json data is a string
        if (data['TRIRows'] && !(typeof data['TRIRows'] === 'string' || data['TRIRows'] instanceof String)) {
            throw new Error("Expected the field `TRIRows` to be a primitive type in the JSON string but got " + data['TRIRows']);
        }
        // ensure the json data is a string
        if (data['TotalPenalties'] && !(typeof data['TotalPenalties'] === 'string' || data['TotalPenalties'] instanceof String)) {
            throw new Error("Expected the field `TotalPenalties` to be a primitive type in the JSON string but got " + data['TotalPenalties']);
        }
        // ensure the json data is a string
        if (data['V3Rows'] && !(typeof data['V3Rows'] === 'string' || data['V3Rows'] instanceof String)) {
            throw new Error("Expected the field `V3Rows` to be a primitive type in the JSON string but got " + data['V3Rows']);
        }

        return true;
    }


}

Echo08.RequiredProperties = ["BadSystemIDs", "CAARows", "CVRows", "CWARows", "FEARows", "INSPRows", "IconBaseURL", "IndianCountryRows", "InfFEARows", "Message", "PopUpBaseURL", "QueryID", "QueryParameters", "QueryRows", "RCRRows", "SVRows", "ServiceBaseURL", "TRIRows", "TotalPenalties", "V3Rows"];

/**
 * Identifies which passed query system identifiers are invalid.
 * @member {String} BadSystemIDs
 */
Echo08.prototype['BadSystemIDs'] = undefined;

/**
 * The number of facilities or cases within the result set that have Clean Air Act (CAA) permits.
 * @member {String} CAARows
 */
Echo08.prototype['CAARows'] = undefined;

/**
 * Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.
 * @member {String} CVRows
 */
Echo08.prototype['CVRows'] = undefined;

/**
 * The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.
 * @member {String} CWARows
 */
Echo08.prototype['CWARows'] = undefined;

/**
 * @member {module:model/Echo06} ClusterOutput
 */
Echo08.prototype['ClusterOutput'] = undefined;

/**
 * Number of clusters returned.
 * @member {String} ClusterRecords
 */
Echo08.prototype['ClusterRecords'] = undefined;

/**
 * Summary count of the number of facilities with a formal enforcement action in the past five years
 * @member {String} FEARows
 */
Echo08.prototype['FEARows'] = undefined;

/**
 * A complex array of facility information.
 * @member {Array.<module:model/Echo07>} Facilities
 */
Echo08.prototype['Facilities'] = undefined;

/**
 * Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)
 * @member {String} INSPRows
 */
Echo08.prototype['INSPRows'] = undefined;

/**
 * URL where all the icons are located
 * @member {String} IconBaseURL
 */
Echo08.prototype['IconBaseURL'] = undefined;

/**
 * Number of facilities with tribal_flag populated
 * @member {String} IndianCountryRows
 */
Echo08.prototype['IndianCountryRows'] = undefined;

/**
 * Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)
 * @member {String} InfFEARows
 */
Echo08.prototype['InfFEARows'] = undefined;

/**
 * Field to record messages (typically performance-related) about packet processing
 * @member {String} Message
 */
Echo08.prototype['Message'] = undefined;

/**
 * Combine this URL with the PUC to get popup info
 * @member {String} PopUpBaseURL
 */
Echo08.prototype['PopUpBaseURL'] = undefined;

/**
 * Sequential number assigned to entire search result
 * @member {String} QueryID
 */
Echo08.prototype['QueryID'] = undefined;

/**
 * A list of submitted query parameters and their values.
 * @member {Array.<module:model/Qp0>} QueryParameters
 */
Echo08.prototype['QueryParameters'] = undefined;

/**
 * Number of query results returned
 * @member {String} QueryRows
 */
Echo08.prototype['QueryRows'] = undefined;

/**
 * The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.
 * @member {String} RCRRows
 */
Echo08.prototype['RCRRows'] = undefined;

/**
 * Number of facilities with curr_sv_flag populated (CWP_STATUS = \"Significant Violation\")
 * @member {String} SVRows
 */
Echo08.prototype['SVRows'] = undefined;

/**
 * The base service URL.
 * @member {String} ServiceBaseURL
 */
Echo08.prototype['ServiceBaseURL'] = undefined;

/**
 * The number of facilities within the results set that have Toxics Release Inventory (TRI) permits.
 * @member {String} TRIRows
 */
Echo08.prototype['TRIRows'] = undefined;

/**
 * The total dollar amount of either assessed or final penalties within the five year time period
 * @member {String} TotalPenalties
 */
Echo08.prototype['TotalPenalties'] = undefined;

/**
 * Number of facilities having one or more quarters in non-compliance (QNC) in the last three years
 * @member {String} V3Rows
 */
Echo08.prototype['V3Rows'] = undefined;






export default Echo08;

