/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Air10 model module.
 * @module model/Air10
 * @version 2019.10.15
 */
class Air10 {
    /**
     * Constructs a new <code>Air10</code>.
     * GeoJSON Properties Object
     * @alias module:model/Air10
     * @param aIR3yrComplQtrsHistory {String} The facility's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined
     * @param aIRCaseIDs {String} Space-delimited list of AIR cases associated with the facility.
     * @param aIRCity {String} The city where the AIR facility is located.
     * @param aIRClassification {String} 
     * @param aIRComplStatus {String} The facility's recent violation status under the Clean Air Act.
     * @param aIRCounty {String} The name of the county where the AIR facility is located.
     * @param aIRDaysLastEval {Number} The number of days since the most recent compliance evaluation of the facility.
     * @param aIREPARegion {String} The EPA region where the AIR facility is located.
     * @param aIREvalCnt {Number} The number of compliance evaluations, under the Clean Air Act, occurring at the facility within the last five years.
     * @param aIRFIPSCode {String} A 5 digit combination of the 2 digit Federal Information Processing Standards (FIPS) code for the state and the 3 digit FIPS code of the county that a facility is located in.
     * @param aIRFacilityTypeCode {String} A three-character code indicating if plant is government facility. COR - Corporation CNG - County Government DIS - District FDF - Federal Facility (U.S. Government) GOC - GOCO (Gov Owned/Contractor Operated) IND - Individual MXO - Mixed Ownership (e.g., Public/Private) MWD - Municipal or Water District CTG - Municipality NON - Non-Government POF - Privately Owned Facility SDT - School District STF - State Government TRB - Tribal Government UNK - Unknown
     * @param aIRFacilityTypeDesc {String} 
     * @param aIRFeaCnt {String} The total number of formal enforcement actions taken against the facility within the last five years.
     * @param aIRHpvStatus {String} Indicates whether the facility currently has an unresolved High Priority Violation (HPV) under the Clean Air Act.
     * @param aIRIDs {String} Air Facility System (AFS) ID.
     * @param aIRIeaCnt {String} The total number of informal enforcement actions taken against the facility within the last five years.
     * @param aIRIndianCntryFlg {String} Flag indicating whether the AIR facility is located in Indian country.
     * @param aIRLastEvalDate {String} The date on which the most recent Full Compliance Evaluation (FCE) of the facility by EPA or a state agency was completed.
     * @param aIRLastEvalDateEPA {String} The last Air Inspection Date performed by EPA.
     * @param aIRLastEvalDateState {String} The last Air Inspection Date performed by State or local authorities.
     * @param aIRLastFeaDate {String} The effective date of the most recent listed formal enforcement action taken against the facility.
     * @param aIRLastFeaDateEPA {String} The last Air Formal Enforcement Action Date take by EPA.
     * @param aIRLastFeaDateState {String} The last Air Formal Enforcement Action Date take by State or Local authorities.
     * @param aIRLastIeaDate {String} The effective date of the most recent listed informal enforcement action taken against the facility.
     * @param aIRLastIeaDateEPA {String} The effective date of the most recent listed informal enforcement action taken against the facility by EPA.
     * @param aIRLastIeaDateState {String} The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.
     * @param aIRLastPenaltyDate {String} Indicates the date on which the most recent assessed (or final) penalty was taken against the facility for AIR.
     * @param aIRLastStckDateEPA {String} The date on which the most recent stack test by EPA occurred.
     * @param aIRLastStckDateState {String} The date on which the most recent stack test by a state agency occurred.
     * @param aIRLastStckTestDate {String} The date on which the most recent stack test occurred.
     * @param aIRLastStckTestResults {String} The result of the most recent stack test (Pass, Fail, Pending, or Blank).
     * @param aIRLastViolDate {String} The date on which the most recent violation was reported.
     * @param aIRMacts {String} The Maximum Achievable Control Technology (MACT) Subpart associated with the facility.
     * @param aIRMajorFlag {String} Indicated whether the facility is designated as a major facilitiy.
     * @param aIRMnthsWithHpv {Number} The number of months in the last three years in which the permit or site is considered in High Priority Violation (HPV) status
     * @param AIRNAICS {String} The facility’s or permit's primary North American Industry Classification System (NAICS) Code.
     * @param aIRName {String} The name of the AIR Facility.
     * @param aIRNsps {String} The New Source Performance Standards (NSPS) Subpart associated with the facility.
     * @param aIRNspsm {String} The Non-Major New Source Performance Standards (NSPS) Subpart associated with the facility.
     * @param aIRPenalties {String} The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act. This value only includes penalties that have been entered in the national program database, ICIS-Air.
     * @param aIRPollRecentViol {String} The names of pollutants or pollutant categories with violations reported in the last year.
     * @param aIRPrograms {String} Comma-delimited list of AIR programs.
     * @param aIRQtrsWithHpv {Number} The number of quarters in the last three years in which the permit or site is considered in High Priority Violation (HPV) status.
     * @param aIRQtrsWithViol {Number} The number of quarters in the last three years in which the permit or site has had unresolved violation(s) reported.
     * @param aIRRecentViolCnt {Number} The number of violations reported in the last year.
     * @param aIRStackTest5YrAll {String} 
     * @param aIRStackTest5YrFail {String} 
     * @param aIRState {String} The state where the AIR facility is located.
     * @param aIRStatus {String} The status of the AIR facility location.
     * @param aIRStreet {String} The street address of the AIR facility location.
     * @param aIRTRIbalEPAids {String} The EPA Tribal or Native Alaskan Village Identifier for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.
     * @param aIRTRIbalNames {String} The EPA Tribal or Native Alaskan Village Name for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.
     * @param aIRUniverse {String} The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable source include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement action, or included on a Compliance Monitoring Strategy plan.
     * @param aIRZip {String} The five-digit zip code of the AIR facility.
     * @param activeLower48 {String} A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.
     * @param cWAIDs {String} A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.
     * @param calculatedAccuracyMeters {Number} Indicates the calculated accuracy in meters for the facilities geospatial coordinate.  Generally, the accuracy is directly linked to the collection method where GPS methods are more accurate that manual methods like map or photo interpolations.
     * @param camdIDs {String} Facility identifiers for the Clean Air Markets Division database.
     * @param censusBlockGroup {String} A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
     * @param chesapeakeBayFlag {String} Displays \"Y\" if the facility is located within the Chesapeake Bay watershed.
     * @param collectionMethod {String} ??
     * @param currSvFlag {Number} Indicates if the facility has a current significant violation. 1 = Yes
     * @param currVioFlag {Number} Indicates if the facility has a current violation. 1 = Yes
     * @param ePASystem {String} The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
     * @param ea5yrFlag {Number} Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes
     * @param eisIDs {String} A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.
     * @param ejscreenFlag {String} A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
     * @param ejscreenFlagUs {String} A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
     * @param facCamdReporter {String} Indicates whether the facility reports to the Clean Air Markets Division (CAMD).
     * @param facCountyName {String} The facility county name from EPA's Facility Registry System
     * @param facDerivedHuc {String} The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
     * @param facDerivedTRIbes {String} The tribes or tribal territories located within 25 miles of the facility's location.
     * @param facDerivedWBD {String} The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.
     * @param facDerivedWBDName {String} The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate
     * @param facEisAIRReleases {String} The amount of hazardous air pollutants released to air in tons per year, as reported in the most recent National Emissions Inventory (NEI).
     * @param facEisReporter {String} Indicates whether the facility reports to the Emissions Inventory System (EIS).
     * @param facFIPSCode {String} The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
     * @param facFederalAgencyCode {String} Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.
     * @param facFederalAgencyName {String} Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.
     * @param facGHGCO2Releases {String} The annual sum of total release amounts and \"associated quantities\" of all linked Greenhouse Gas IDs from the Office of Air and Radiation \"Summary 2010 Greenhouse Gas Data.\" Units are reported as metric tons of CO2 equivalents per year (MTCO2e/year).
     * @param facGHGReporter {String} Indicates whether the facility reports to the Greenhouse Gas Reporting Program (GHGRP)
     * @param facIndianCntryFlg {String} Flag showing Y/N whether the facility is located in Indian Country.
     * @param facIndianSpatialFlg {String} Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.
     * @param facMapFlg {String} Graphical indicator denoting whether geographical data required to map a facility are available.
     * @param facMapIcon {String} The default map icon image file calculated for the facility by the ECHO program.
     * @param facNaaFlag {String} Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.
     * @param facPercentMinority {Number} Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
     * @param facPopulationDensity {Number} The number of persons per square mile in the profiled area.
     * @param facSICCodes {String} Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.
     * @param facStdCountyName {String} The standardized  facility county name from EPA's Facility Registry System
     * @param facTRIAIRReleases {String} The total chemical releases to air, in pounds, as reported to TRI by the facility for the most recent reporting year.
     * @param facTRICarcAIRReleases {String} The pounds of chemicals considered to be carcinogens released to air, as reported to TRI for the most recent reporting year. Chemicals are classified as carcinogens under the requirements of the Occupational Safety and Health Administration (OSHA).
     * @param facTRIHapsReleases {String} The pounds of chemicals classified as hazardous air pollutants (HAPS) released to air in pounds per year, as reported to TRI for the most recent reporting year.
     * @param facTRIReporter {String} Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
     * @param facUsMexBorderFlg {String} A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
     * @param gHGIDs {String} A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.
     * @param hasPollRpt {String} ???
     * @param infea5yrFlag {Number} Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.
     * @param insp5yrFlag {Number} Indicates if the facility has an inspection within the last 5 years. 1 = Yes
     * @param lastDatePce {String} The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA or a state agency was completed.
     * @param lastDatePceEPA {String} The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA was completed.
     * @param lastDatePceSta {String} The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by a state agency was completed.
     * @param localControlRegionCode {String} Code for regions within a state. Search criteria for DFR in OTIS.
     * @param localControlRegionName {String} Regions within a state. Search criteria for DFR in OTIS.
     * @param lower48 {String} Flag showing Y/N whether location is within the contiguous (lower 48) United States.
     * @param maintPollutantsNaa {String} 
     * @param maintStandardsNaa {String} 
     * @param maintStatusNaa {String} 
     * @param map {String} No Longer Used.
     * @param maxPctileUs {Number} The maximum percentile from all individual EJSCREEN indicators.
     * @param maxScore {Number} [Col. 121]
     * @param naPollutantsNaa {String} 
     * @param naStandardsNaa {String} 
     * @param naStatusNaa {String} 
     * @param naaCategories {String} The nonattainment area categories that the facility is in, derived spatially based on the facility's geographic coordinates in FRS.�
     * @param naaPollutants {String} All criteria pollutants that the facility is in nonattainment for.
     * @param otherPermitIDs {String} 
     * @param over80CountUs {Number} The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.
     * @param pctileCancerUs {Number} The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
     * @param pctileDpmUs {Number} The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
     * @param pctileO3Us {Number} The national percentile of the census block group for the EJSCREEN ozone indicator.
     * @param pctilePctpre1960Us {Number} The national percentile of the census block group for the EJSCREEN Lead paint indicator.
     * @param pctilePmUs {Number} The national percentile of the census block group for the EJSCREEN particulate matter indicator.
     * @param pctileProximityNPDESUs {Number} The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
     * @param pctileProximityNplUs {Number} The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
     * @param pctileProximityRmpUs {Number} The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
     * @param pctileProximityTsdfUs {Number} The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
     * @param pctileRespUs {Number} The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
     * @param pctileTrafficScoreUs {Number} The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
     * @param rCRAIDs {String} A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
     * @param referencePoint {String} ??
     * @param registryID {String} An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
     * @param rmpIDs {String} A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.
     * @param sDWAIDs {String} A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
     * @param score {Number} 
     * @param sourceID {String} Unique Identifier assigned by EPA.
     * @param statute {String} The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
     * @param tRIIDs {String} A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.
     * @param tRIbalFlag {Number} A value of \"1\" indicates that the facility is within an Indian Tribal or Alaskan Native Village area.
     * @param violFlag {Number} Indicates if the facility had a violation within the last 3 years. 1 = Yes
     * @param webDocs {String} Contains flags that identify what web accessible documents are available for the facility.
     */
    constructor(aIR3yrComplQtrsHistory, aIRCaseIDs, aIRCity, aIRClassification, aIRComplStatus, aIRCounty, aIRDaysLastEval, aIREPARegion, aIREvalCnt, aIRFIPSCode, aIRFacilityTypeCode, aIRFacilityTypeDesc, aIRFeaCnt, aIRHpvStatus, aIRIDs, aIRIeaCnt, aIRIndianCntryFlg, aIRLastEvalDate, aIRLastEvalDateEPA, aIRLastEvalDateState, aIRLastFeaDate, aIRLastFeaDateEPA, aIRLastFeaDateState, aIRLastIeaDate, aIRLastIeaDateEPA, aIRLastIeaDateState, aIRLastPenaltyDate, aIRLastStckDateEPA, aIRLastStckDateState, aIRLastStckTestDate, aIRLastStckTestResults, aIRLastViolDate, aIRMacts, aIRMajorFlag, aIRMnthsWithHpv, AIRNAICS, aIRName, aIRNsps, aIRNspsm, aIRPenalties, aIRPollRecentViol, aIRPrograms, aIRQtrsWithHpv, aIRQtrsWithViol, aIRRecentViolCnt, aIRStackTest5YrAll, aIRStackTest5YrFail, aIRState, aIRStatus, aIRStreet, aIRTRIbalEPAids, aIRTRIbalNames, aIRUniverse, aIRZip, activeLower48, cWAIDs, calculatedAccuracyMeters, camdIDs, censusBlockGroup, chesapeakeBayFlag, collectionMethod, currSvFlag, currVioFlag, ePASystem, ea5yrFlag, eisIDs, ejscreenFlag, ejscreenFlagUs, facCamdReporter, facCountyName, facDerivedHuc, facDerivedTRIbes, facDerivedWBD, facDerivedWBDName, facEisAIRReleases, facEisReporter, facFIPSCode, facFederalAgencyCode, facFederalAgencyName, facGHGCO2Releases, facGHGReporter, facIndianCntryFlg, facIndianSpatialFlg, facMapFlg, facMapIcon, facNaaFlag, facPercentMinority, facPopulationDensity, facSICCodes, facStdCountyName, facTRIAIRReleases, facTRICarcAIRReleases, facTRIHapsReleases, facTRIReporter, facUsMexBorderFlg, gHGIDs, hasPollRpt, infea5yrFlag, insp5yrFlag, lastDatePce, lastDatePceEPA, lastDatePceSta, localControlRegionCode, localControlRegionName, lower48, maintPollutantsNaa, maintStandardsNaa, maintStatusNaa, map, maxPctileUs, maxScore, naPollutantsNaa, naStandardsNaa, naStatusNaa, naaCategories, naaPollutants, otherPermitIDs, over80CountUs, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rCRAIDs, referencePoint, registryID, rmpIDs, sDWAIDs, score, sourceID, statute, tRIIDs, tRIbalFlag, violFlag, webDocs) { 
        
        Air10.initialize(this, aIR3yrComplQtrsHistory, aIRCaseIDs, aIRCity, aIRClassification, aIRComplStatus, aIRCounty, aIRDaysLastEval, aIREPARegion, aIREvalCnt, aIRFIPSCode, aIRFacilityTypeCode, aIRFacilityTypeDesc, aIRFeaCnt, aIRHpvStatus, aIRIDs, aIRIeaCnt, aIRIndianCntryFlg, aIRLastEvalDate, aIRLastEvalDateEPA, aIRLastEvalDateState, aIRLastFeaDate, aIRLastFeaDateEPA, aIRLastFeaDateState, aIRLastIeaDate, aIRLastIeaDateEPA, aIRLastIeaDateState, aIRLastPenaltyDate, aIRLastStckDateEPA, aIRLastStckDateState, aIRLastStckTestDate, aIRLastStckTestResults, aIRLastViolDate, aIRMacts, aIRMajorFlag, aIRMnthsWithHpv, AIRNAICS, aIRName, aIRNsps, aIRNspsm, aIRPenalties, aIRPollRecentViol, aIRPrograms, aIRQtrsWithHpv, aIRQtrsWithViol, aIRRecentViolCnt, aIRStackTest5YrAll, aIRStackTest5YrFail, aIRState, aIRStatus, aIRStreet, aIRTRIbalEPAids, aIRTRIbalNames, aIRUniverse, aIRZip, activeLower48, cWAIDs, calculatedAccuracyMeters, camdIDs, censusBlockGroup, chesapeakeBayFlag, collectionMethod, currSvFlag, currVioFlag, ePASystem, ea5yrFlag, eisIDs, ejscreenFlag, ejscreenFlagUs, facCamdReporter, facCountyName, facDerivedHuc, facDerivedTRIbes, facDerivedWBD, facDerivedWBDName, facEisAIRReleases, facEisReporter, facFIPSCode, facFederalAgencyCode, facFederalAgencyName, facGHGCO2Releases, facGHGReporter, facIndianCntryFlg, facIndianSpatialFlg, facMapFlg, facMapIcon, facNaaFlag, facPercentMinority, facPopulationDensity, facSICCodes, facStdCountyName, facTRIAIRReleases, facTRICarcAIRReleases, facTRIHapsReleases, facTRIReporter, facUsMexBorderFlg, gHGIDs, hasPollRpt, infea5yrFlag, insp5yrFlag, lastDatePce, lastDatePceEPA, lastDatePceSta, localControlRegionCode, localControlRegionName, lower48, maintPollutantsNaa, maintStandardsNaa, maintStatusNaa, map, maxPctileUs, maxScore, naPollutantsNaa, naStandardsNaa, naStatusNaa, naaCategories, naaPollutants, otherPermitIDs, over80CountUs, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rCRAIDs, referencePoint, registryID, rmpIDs, sDWAIDs, score, sourceID, statute, tRIIDs, tRIbalFlag, violFlag, webDocs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aIR3yrComplQtrsHistory, aIRCaseIDs, aIRCity, aIRClassification, aIRComplStatus, aIRCounty, aIRDaysLastEval, aIREPARegion, aIREvalCnt, aIRFIPSCode, aIRFacilityTypeCode, aIRFacilityTypeDesc, aIRFeaCnt, aIRHpvStatus, aIRIDs, aIRIeaCnt, aIRIndianCntryFlg, aIRLastEvalDate, aIRLastEvalDateEPA, aIRLastEvalDateState, aIRLastFeaDate, aIRLastFeaDateEPA, aIRLastFeaDateState, aIRLastIeaDate, aIRLastIeaDateEPA, aIRLastIeaDateState, aIRLastPenaltyDate, aIRLastStckDateEPA, aIRLastStckDateState, aIRLastStckTestDate, aIRLastStckTestResults, aIRLastViolDate, aIRMacts, aIRMajorFlag, aIRMnthsWithHpv, AIRNAICS, aIRName, aIRNsps, aIRNspsm, aIRPenalties, aIRPollRecentViol, aIRPrograms, aIRQtrsWithHpv, aIRQtrsWithViol, aIRRecentViolCnt, aIRStackTest5YrAll, aIRStackTest5YrFail, aIRState, aIRStatus, aIRStreet, aIRTRIbalEPAids, aIRTRIbalNames, aIRUniverse, aIRZip, activeLower48, cWAIDs, calculatedAccuracyMeters, camdIDs, censusBlockGroup, chesapeakeBayFlag, collectionMethod, currSvFlag, currVioFlag, ePASystem, ea5yrFlag, eisIDs, ejscreenFlag, ejscreenFlagUs, facCamdReporter, facCountyName, facDerivedHuc, facDerivedTRIbes, facDerivedWBD, facDerivedWBDName, facEisAIRReleases, facEisReporter, facFIPSCode, facFederalAgencyCode, facFederalAgencyName, facGHGCO2Releases, facGHGReporter, facIndianCntryFlg, facIndianSpatialFlg, facMapFlg, facMapIcon, facNaaFlag, facPercentMinority, facPopulationDensity, facSICCodes, facStdCountyName, facTRIAIRReleases, facTRICarcAIRReleases, facTRIHapsReleases, facTRIReporter, facUsMexBorderFlg, gHGIDs, hasPollRpt, infea5yrFlag, insp5yrFlag, lastDatePce, lastDatePceEPA, lastDatePceSta, localControlRegionCode, localControlRegionName, lower48, maintPollutantsNaa, maintStandardsNaa, maintStatusNaa, map, maxPctileUs, maxScore, naPollutantsNaa, naStandardsNaa, naStatusNaa, naaCategories, naaPollutants, otherPermitIDs, over80CountUs, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rCRAIDs, referencePoint, registryID, rmpIDs, sDWAIDs, score, sourceID, statute, tRIIDs, tRIbalFlag, violFlag, webDocs) { 
        obj['AIR3yrComplQtrsHistory'] = aIR3yrComplQtrsHistory;
        obj['AIRCaseIDs'] = aIRCaseIDs;
        obj['AIRCity'] = aIRCity;
        obj['AIRClassification'] = aIRClassification;
        obj['AIRComplStatus'] = aIRComplStatus;
        obj['AIRCounty'] = aIRCounty;
        obj['AIRDaysLastEval'] = aIRDaysLastEval;
        obj['AIREPARegion'] = aIREPARegion;
        obj['AIREvalCnt'] = aIREvalCnt;
        obj['AIRFIPSCode'] = aIRFIPSCode;
        obj['AIRFacilityTypeCode'] = aIRFacilityTypeCode;
        obj['AIRFacilityTypeDesc'] = aIRFacilityTypeDesc;
        obj['AIRFeaCnt'] = aIRFeaCnt;
        obj['AIRHpvStatus'] = aIRHpvStatus;
        obj['AIRIDs'] = aIRIDs;
        obj['AIRIeaCnt'] = aIRIeaCnt;
        obj['AIRIndianCntryFlg'] = aIRIndianCntryFlg;
        obj['AIRLastEvalDate'] = aIRLastEvalDate;
        obj['AIRLastEvalDateEPA'] = aIRLastEvalDateEPA;
        obj['AIRLastEvalDateState'] = aIRLastEvalDateState;
        obj['AIRLastFeaDate'] = aIRLastFeaDate;
        obj['AIRLastFeaDateEPA'] = aIRLastFeaDateEPA;
        obj['AIRLastFeaDateState'] = aIRLastFeaDateState;
        obj['AIRLastIeaDate'] = aIRLastIeaDate;
        obj['AIRLastIeaDateEPA'] = aIRLastIeaDateEPA;
        obj['AIRLastIeaDateState'] = aIRLastIeaDateState;
        obj['AIRLastPenaltyDate'] = aIRLastPenaltyDate;
        obj['AIRLastStckDateEPA'] = aIRLastStckDateEPA;
        obj['AIRLastStckDateState'] = aIRLastStckDateState;
        obj['AIRLastStckTestDate'] = aIRLastStckTestDate;
        obj['AIRLastStckTestResults'] = aIRLastStckTestResults;
        obj['AIRLastViolDate'] = aIRLastViolDate;
        obj['AIRMacts'] = aIRMacts;
        obj['AIRMajorFlag'] = aIRMajorFlag;
        obj['AIRMnthsWithHpv'] = aIRMnthsWithHpv;
        obj['AIRNAICS'] = AIRNAICS;
        obj['AIRName'] = aIRName;
        obj['AIRNsps'] = aIRNsps;
        obj['AIRNspsm'] = aIRNspsm;
        obj['AIRPenalties'] = aIRPenalties;
        obj['AIRPollRecentViol'] = aIRPollRecentViol;
        obj['AIRPrograms'] = aIRPrograms;
        obj['AIRQtrsWithHpv'] = aIRQtrsWithHpv;
        obj['AIRQtrsWithViol'] = aIRQtrsWithViol;
        obj['AIRRecentViolCnt'] = aIRRecentViolCnt;
        obj['AIRStackTest5YrAll'] = aIRStackTest5YrAll;
        obj['AIRStackTest5YrFail'] = aIRStackTest5YrFail;
        obj['AIRState'] = aIRState;
        obj['AIRStatus'] = aIRStatus;
        obj['AIRStreet'] = aIRStreet;
        obj['AIRTRIbalEPAids'] = aIRTRIbalEPAids;
        obj['AIRTRIbalNames'] = aIRTRIbalNames;
        obj['AIRUniverse'] = aIRUniverse;
        obj['AIRZip'] = aIRZip;
        obj['ActiveLower48'] = activeLower48;
        obj['CWAIDs'] = cWAIDs;
        obj['CalculatedAccuracyMeters'] = calculatedAccuracyMeters;
        obj['CamdIDs'] = camdIDs;
        obj['CensusBlockGroup'] = censusBlockGroup;
        obj['ChesapeakeBayFlag'] = chesapeakeBayFlag;
        obj['CollectionMethod'] = collectionMethod;
        obj['CurrSvFlag'] = currSvFlag;
        obj['CurrVioFlag'] = currVioFlag;
        obj['EPASystem'] = ePASystem;
        obj['Ea5yrFlag'] = ea5yrFlag;
        obj['EisIDs'] = eisIDs;
        obj['EjscreenFlag'] = ejscreenFlag;
        obj['EjscreenFlagUs'] = ejscreenFlagUs;
        obj['FacCamdReporter'] = facCamdReporter;
        obj['FacCountyName'] = facCountyName;
        obj['FacDerivedHuc'] = facDerivedHuc;
        obj['FacDerivedTRIbes'] = facDerivedTRIbes;
        obj['FacDerivedWBD'] = facDerivedWBD;
        obj['FacDerivedWBDName'] = facDerivedWBDName;
        obj['FacEisAIRReleases'] = facEisAIRReleases;
        obj['FacEisReporter'] = facEisReporter;
        obj['FacFIPSCode'] = facFIPSCode;
        obj['FacFederalAgencyCode'] = facFederalAgencyCode;
        obj['FacFederalAgencyName'] = facFederalAgencyName;
        obj['FacGHGCO2Releases'] = facGHGCO2Releases;
        obj['FacGHGReporter'] = facGHGReporter;
        obj['FacIndianCntryFlg'] = facIndianCntryFlg;
        obj['FacIndianSpatialFlg'] = facIndianSpatialFlg;
        obj['FacMapFlg'] = facMapFlg;
        obj['FacMapIcon'] = facMapIcon;
        obj['FacNaaFlag'] = facNaaFlag;
        obj['FacPercentMinority'] = facPercentMinority;
        obj['FacPopulationDensity'] = facPopulationDensity;
        obj['FacSICCodes'] = facSICCodes;
        obj['FacStdCountyName'] = facStdCountyName;
        obj['FacTRIAIRReleases'] = facTRIAIRReleases;
        obj['FacTRICarcAIRReleases'] = facTRICarcAIRReleases;
        obj['FacTRIHapsReleases'] = facTRIHapsReleases;
        obj['FacTRIReporter'] = facTRIReporter;
        obj['FacUsMexBorderFlg'] = facUsMexBorderFlg;
        obj['GHGIDs'] = gHGIDs;
        obj['HasPollRpt'] = hasPollRpt;
        obj['Infea5yrFlag'] = infea5yrFlag;
        obj['Insp5yrFlag'] = insp5yrFlag;
        obj['LastDatePce'] = lastDatePce;
        obj['LastDatePceEPA'] = lastDatePceEPA;
        obj['LastDatePceSta'] = lastDatePceSta;
        obj['LocalControlRegionCode'] = localControlRegionCode;
        obj['LocalControlRegionName'] = localControlRegionName;
        obj['Lower48'] = lower48;
        obj['MaintPollutantsNaa'] = maintPollutantsNaa;
        obj['MaintStandardsNaa'] = maintStandardsNaa;
        obj['MaintStatusNaa'] = maintStatusNaa;
        obj['Map'] = map;
        obj['MaxPctileUs'] = maxPctileUs;
        obj['MaxScore'] = maxScore;
        obj['NaPollutantsNaa'] = naPollutantsNaa;
        obj['NaStandardsNaa'] = naStandardsNaa;
        obj['NaStatusNaa'] = naStatusNaa;
        obj['NaaCategories'] = naaCategories;
        obj['NaaPollutants'] = naaPollutants;
        obj['OtherPermitIDs'] = otherPermitIDs;
        obj['Over80CountUs'] = over80CountUs;
        obj['PctileCancerUs'] = pctileCancerUs;
        obj['PctileDpmUs'] = pctileDpmUs;
        obj['PctileO3Us'] = pctileO3Us;
        obj['PctilePctpre1960Us'] = pctilePctpre1960Us;
        obj['PctilePmUs'] = pctilePmUs;
        obj['PctileProximityNPDESUs'] = pctileProximityNPDESUs;
        obj['PctileProximityNplUs'] = pctileProximityNplUs;
        obj['PctileProximityRmpUs'] = pctileProximityRmpUs;
        obj['PctileProximityTsdfUs'] = pctileProximityTsdfUs;
        obj['PctileRespUs'] = pctileRespUs;
        obj['PctileTrafficScoreUs'] = pctileTrafficScoreUs;
        obj['RCRAIDs'] = rCRAIDs;
        obj['ReferencePoint'] = referencePoint;
        obj['RegistryID'] = registryID;
        obj['RmpIDs'] = rmpIDs;
        obj['SDWAIDs'] = sDWAIDs;
        obj['Score'] = score;
        obj['SourceID'] = sourceID;
        obj['Statute'] = statute;
        obj['TRIIDs'] = tRIIDs;
        obj['TRIbalFlag'] = tRIbalFlag;
        obj['ViolFlag'] = violFlag;
        obj['WebDocs'] = webDocs;
    }

    /**
     * Constructs a <code>Air10</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Air10} obj Optional instance to populate.
     * @return {module:model/Air10} The populated <code>Air10</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Air10();

            if (data.hasOwnProperty('AIR3yrComplQtrsHistory')) {
                obj['AIR3yrComplQtrsHistory'] = ApiClient.convertToType(data['AIR3yrComplQtrsHistory'], 'String');
            }
            if (data.hasOwnProperty('AIRCaseIDs')) {
                obj['AIRCaseIDs'] = ApiClient.convertToType(data['AIRCaseIDs'], 'String');
            }
            if (data.hasOwnProperty('AIRCity')) {
                obj['AIRCity'] = ApiClient.convertToType(data['AIRCity'], 'String');
            }
            if (data.hasOwnProperty('AIRClassification')) {
                obj['AIRClassification'] = ApiClient.convertToType(data['AIRClassification'], 'String');
            }
            if (data.hasOwnProperty('AIRComplStatus')) {
                obj['AIRComplStatus'] = ApiClient.convertToType(data['AIRComplStatus'], 'String');
            }
            if (data.hasOwnProperty('AIRCounty')) {
                obj['AIRCounty'] = ApiClient.convertToType(data['AIRCounty'], 'String');
            }
            if (data.hasOwnProperty('AIRDaysLastEval')) {
                obj['AIRDaysLastEval'] = ApiClient.convertToType(data['AIRDaysLastEval'], 'Number');
            }
            if (data.hasOwnProperty('AIREPARegion')) {
                obj['AIREPARegion'] = ApiClient.convertToType(data['AIREPARegion'], 'String');
            }
            if (data.hasOwnProperty('AIREvalCnt')) {
                obj['AIREvalCnt'] = ApiClient.convertToType(data['AIREvalCnt'], 'Number');
            }
            if (data.hasOwnProperty('AIRFIPSCode')) {
                obj['AIRFIPSCode'] = ApiClient.convertToType(data['AIRFIPSCode'], 'String');
            }
            if (data.hasOwnProperty('AIRFacilityTypeCode')) {
                obj['AIRFacilityTypeCode'] = ApiClient.convertToType(data['AIRFacilityTypeCode'], 'String');
            }
            if (data.hasOwnProperty('AIRFacilityTypeDesc')) {
                obj['AIRFacilityTypeDesc'] = ApiClient.convertToType(data['AIRFacilityTypeDesc'], 'String');
            }
            if (data.hasOwnProperty('AIRFeaCnt')) {
                obj['AIRFeaCnt'] = ApiClient.convertToType(data['AIRFeaCnt'], 'String');
            }
            if (data.hasOwnProperty('AIRHpvStatus')) {
                obj['AIRHpvStatus'] = ApiClient.convertToType(data['AIRHpvStatus'], 'String');
            }
            if (data.hasOwnProperty('AIRIDs')) {
                obj['AIRIDs'] = ApiClient.convertToType(data['AIRIDs'], 'String');
            }
            if (data.hasOwnProperty('AIRIeaCnt')) {
                obj['AIRIeaCnt'] = ApiClient.convertToType(data['AIRIeaCnt'], 'String');
            }
            if (data.hasOwnProperty('AIRIndianCntryFlg')) {
                obj['AIRIndianCntryFlg'] = ApiClient.convertToType(data['AIRIndianCntryFlg'], 'String');
            }
            if (data.hasOwnProperty('AIRLastEvalDate')) {
                obj['AIRLastEvalDate'] = ApiClient.convertToType(data['AIRLastEvalDate'], 'String');
            }
            if (data.hasOwnProperty('AIRLastEvalDateEPA')) {
                obj['AIRLastEvalDateEPA'] = ApiClient.convertToType(data['AIRLastEvalDateEPA'], 'String');
            }
            if (data.hasOwnProperty('AIRLastEvalDateState')) {
                obj['AIRLastEvalDateState'] = ApiClient.convertToType(data['AIRLastEvalDateState'], 'String');
            }
            if (data.hasOwnProperty('AIRLastFeaDate')) {
                obj['AIRLastFeaDate'] = ApiClient.convertToType(data['AIRLastFeaDate'], 'String');
            }
            if (data.hasOwnProperty('AIRLastFeaDateEPA')) {
                obj['AIRLastFeaDateEPA'] = ApiClient.convertToType(data['AIRLastFeaDateEPA'], 'String');
            }
            if (data.hasOwnProperty('AIRLastFeaDateState')) {
                obj['AIRLastFeaDateState'] = ApiClient.convertToType(data['AIRLastFeaDateState'], 'String');
            }
            if (data.hasOwnProperty('AIRLastIeaDate')) {
                obj['AIRLastIeaDate'] = ApiClient.convertToType(data['AIRLastIeaDate'], 'String');
            }
            if (data.hasOwnProperty('AIRLastIeaDateEPA')) {
                obj['AIRLastIeaDateEPA'] = ApiClient.convertToType(data['AIRLastIeaDateEPA'], 'String');
            }
            if (data.hasOwnProperty('AIRLastIeaDateState')) {
                obj['AIRLastIeaDateState'] = ApiClient.convertToType(data['AIRLastIeaDateState'], 'String');
            }
            if (data.hasOwnProperty('AIRLastPenaltyDate')) {
                obj['AIRLastPenaltyDate'] = ApiClient.convertToType(data['AIRLastPenaltyDate'], 'String');
            }
            if (data.hasOwnProperty('AIRLastStckDateEPA')) {
                obj['AIRLastStckDateEPA'] = ApiClient.convertToType(data['AIRLastStckDateEPA'], 'String');
            }
            if (data.hasOwnProperty('AIRLastStckDateState')) {
                obj['AIRLastStckDateState'] = ApiClient.convertToType(data['AIRLastStckDateState'], 'String');
            }
            if (data.hasOwnProperty('AIRLastStckTestDate')) {
                obj['AIRLastStckTestDate'] = ApiClient.convertToType(data['AIRLastStckTestDate'], 'String');
            }
            if (data.hasOwnProperty('AIRLastStckTestResults')) {
                obj['AIRLastStckTestResults'] = ApiClient.convertToType(data['AIRLastStckTestResults'], 'String');
            }
            if (data.hasOwnProperty('AIRLastViolDate')) {
                obj['AIRLastViolDate'] = ApiClient.convertToType(data['AIRLastViolDate'], 'String');
            }
            if (data.hasOwnProperty('AIRMacts')) {
                obj['AIRMacts'] = ApiClient.convertToType(data['AIRMacts'], 'String');
            }
            if (data.hasOwnProperty('AIRMajorFlag')) {
                obj['AIRMajorFlag'] = ApiClient.convertToType(data['AIRMajorFlag'], 'String');
            }
            if (data.hasOwnProperty('AIRMnthsWithHpv')) {
                obj['AIRMnthsWithHpv'] = ApiClient.convertToType(data['AIRMnthsWithHpv'], 'Number');
            }
            if (data.hasOwnProperty('AIRNAICS')) {
                obj['AIRNAICS'] = ApiClient.convertToType(data['AIRNAICS'], 'String');
            }
            if (data.hasOwnProperty('AIRName')) {
                obj['AIRName'] = ApiClient.convertToType(data['AIRName'], 'String');
            }
            if (data.hasOwnProperty('AIRNsps')) {
                obj['AIRNsps'] = ApiClient.convertToType(data['AIRNsps'], 'String');
            }
            if (data.hasOwnProperty('AIRNspsm')) {
                obj['AIRNspsm'] = ApiClient.convertToType(data['AIRNspsm'], 'String');
            }
            if (data.hasOwnProperty('AIRPenalties')) {
                obj['AIRPenalties'] = ApiClient.convertToType(data['AIRPenalties'], 'String');
            }
            if (data.hasOwnProperty('AIRPollRecentViol')) {
                obj['AIRPollRecentViol'] = ApiClient.convertToType(data['AIRPollRecentViol'], 'String');
            }
            if (data.hasOwnProperty('AIRPrograms')) {
                obj['AIRPrograms'] = ApiClient.convertToType(data['AIRPrograms'], 'String');
            }
            if (data.hasOwnProperty('AIRQtrsWithHpv')) {
                obj['AIRQtrsWithHpv'] = ApiClient.convertToType(data['AIRQtrsWithHpv'], 'Number');
            }
            if (data.hasOwnProperty('AIRQtrsWithViol')) {
                obj['AIRQtrsWithViol'] = ApiClient.convertToType(data['AIRQtrsWithViol'], 'Number');
            }
            if (data.hasOwnProperty('AIRRecentViolCnt')) {
                obj['AIRRecentViolCnt'] = ApiClient.convertToType(data['AIRRecentViolCnt'], 'Number');
            }
            if (data.hasOwnProperty('AIRStackTest5YrAll')) {
                obj['AIRStackTest5YrAll'] = ApiClient.convertToType(data['AIRStackTest5YrAll'], 'String');
            }
            if (data.hasOwnProperty('AIRStackTest5YrFail')) {
                obj['AIRStackTest5YrFail'] = ApiClient.convertToType(data['AIRStackTest5YrFail'], 'String');
            }
            if (data.hasOwnProperty('AIRState')) {
                obj['AIRState'] = ApiClient.convertToType(data['AIRState'], 'String');
            }
            if (data.hasOwnProperty('AIRStatus')) {
                obj['AIRStatus'] = ApiClient.convertToType(data['AIRStatus'], 'String');
            }
            if (data.hasOwnProperty('AIRStreet')) {
                obj['AIRStreet'] = ApiClient.convertToType(data['AIRStreet'], 'String');
            }
            if (data.hasOwnProperty('AIRTRIbalEPAids')) {
                obj['AIRTRIbalEPAids'] = ApiClient.convertToType(data['AIRTRIbalEPAids'], 'String');
            }
            if (data.hasOwnProperty('AIRTRIbalNames')) {
                obj['AIRTRIbalNames'] = ApiClient.convertToType(data['AIRTRIbalNames'], 'String');
            }
            if (data.hasOwnProperty('AIRUniverse')) {
                obj['AIRUniverse'] = ApiClient.convertToType(data['AIRUniverse'], 'String');
            }
            if (data.hasOwnProperty('AIRZip')) {
                obj['AIRZip'] = ApiClient.convertToType(data['AIRZip'], 'String');
            }
            if (data.hasOwnProperty('ActiveLower48')) {
                obj['ActiveLower48'] = ApiClient.convertToType(data['ActiveLower48'], 'String');
            }
            if (data.hasOwnProperty('CWAIDs')) {
                obj['CWAIDs'] = ApiClient.convertToType(data['CWAIDs'], 'String');
            }
            if (data.hasOwnProperty('CalculatedAccuracyMeters')) {
                obj['CalculatedAccuracyMeters'] = ApiClient.convertToType(data['CalculatedAccuracyMeters'], 'Number');
            }
            if (data.hasOwnProperty('CamdIDs')) {
                obj['CamdIDs'] = ApiClient.convertToType(data['CamdIDs'], 'String');
            }
            if (data.hasOwnProperty('CensusBlockGroup')) {
                obj['CensusBlockGroup'] = ApiClient.convertToType(data['CensusBlockGroup'], 'String');
            }
            if (data.hasOwnProperty('ChesapeakeBayFlag')) {
                obj['ChesapeakeBayFlag'] = ApiClient.convertToType(data['ChesapeakeBayFlag'], 'String');
            }
            if (data.hasOwnProperty('CollectionMethod')) {
                obj['CollectionMethod'] = ApiClient.convertToType(data['CollectionMethod'], 'String');
            }
            if (data.hasOwnProperty('CurrSvFlag')) {
                obj['CurrSvFlag'] = ApiClient.convertToType(data['CurrSvFlag'], 'Number');
            }
            if (data.hasOwnProperty('CurrVioFlag')) {
                obj['CurrVioFlag'] = ApiClient.convertToType(data['CurrVioFlag'], 'Number');
            }
            if (data.hasOwnProperty('EPASystem')) {
                obj['EPASystem'] = ApiClient.convertToType(data['EPASystem'], 'String');
            }
            if (data.hasOwnProperty('Ea5yrFlag')) {
                obj['Ea5yrFlag'] = ApiClient.convertToType(data['Ea5yrFlag'], 'Number');
            }
            if (data.hasOwnProperty('EisIDs')) {
                obj['EisIDs'] = ApiClient.convertToType(data['EisIDs'], 'String');
            }
            if (data.hasOwnProperty('EjscreenFlag')) {
                obj['EjscreenFlag'] = ApiClient.convertToType(data['EjscreenFlag'], 'String');
            }
            if (data.hasOwnProperty('EjscreenFlagUs')) {
                obj['EjscreenFlagUs'] = ApiClient.convertToType(data['EjscreenFlagUs'], 'String');
            }
            if (data.hasOwnProperty('FacCamdReporter')) {
                obj['FacCamdReporter'] = ApiClient.convertToType(data['FacCamdReporter'], 'String');
            }
            if (data.hasOwnProperty('FacCountyName')) {
                obj['FacCountyName'] = ApiClient.convertToType(data['FacCountyName'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedHuc')) {
                obj['FacDerivedHuc'] = ApiClient.convertToType(data['FacDerivedHuc'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedTRIbes')) {
                obj['FacDerivedTRIbes'] = ApiClient.convertToType(data['FacDerivedTRIbes'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedWBD')) {
                obj['FacDerivedWBD'] = ApiClient.convertToType(data['FacDerivedWBD'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedWBDName')) {
                obj['FacDerivedWBDName'] = ApiClient.convertToType(data['FacDerivedWBDName'], 'String');
            }
            if (data.hasOwnProperty('FacEisAIRReleases')) {
                obj['FacEisAIRReleases'] = ApiClient.convertToType(data['FacEisAIRReleases'], 'String');
            }
            if (data.hasOwnProperty('FacEisReporter')) {
                obj['FacEisReporter'] = ApiClient.convertToType(data['FacEisReporter'], 'String');
            }
            if (data.hasOwnProperty('FacFIPSCode')) {
                obj['FacFIPSCode'] = ApiClient.convertToType(data['FacFIPSCode'], 'String');
            }
            if (data.hasOwnProperty('FacFederalAgencyCode')) {
                obj['FacFederalAgencyCode'] = ApiClient.convertToType(data['FacFederalAgencyCode'], 'String');
            }
            if (data.hasOwnProperty('FacFederalAgencyName')) {
                obj['FacFederalAgencyName'] = ApiClient.convertToType(data['FacFederalAgencyName'], 'String');
            }
            if (data.hasOwnProperty('FacGHGCO2Releases')) {
                obj['FacGHGCO2Releases'] = ApiClient.convertToType(data['FacGHGCO2Releases'], 'String');
            }
            if (data.hasOwnProperty('FacGHGReporter')) {
                obj['FacGHGReporter'] = ApiClient.convertToType(data['FacGHGReporter'], 'String');
            }
            if (data.hasOwnProperty('FacIndianCntryFlg')) {
                obj['FacIndianCntryFlg'] = ApiClient.convertToType(data['FacIndianCntryFlg'], 'String');
            }
            if (data.hasOwnProperty('FacIndianSpatialFlg')) {
                obj['FacIndianSpatialFlg'] = ApiClient.convertToType(data['FacIndianSpatialFlg'], 'String');
            }
            if (data.hasOwnProperty('FacMapFlg')) {
                obj['FacMapFlg'] = ApiClient.convertToType(data['FacMapFlg'], 'String');
            }
            if (data.hasOwnProperty('FacMapIcon')) {
                obj['FacMapIcon'] = ApiClient.convertToType(data['FacMapIcon'], 'String');
            }
            if (data.hasOwnProperty('FacNaaFlag')) {
                obj['FacNaaFlag'] = ApiClient.convertToType(data['FacNaaFlag'], 'String');
            }
            if (data.hasOwnProperty('FacPercentMinority')) {
                obj['FacPercentMinority'] = ApiClient.convertToType(data['FacPercentMinority'], 'Number');
            }
            if (data.hasOwnProperty('FacPopulationDensity')) {
                obj['FacPopulationDensity'] = ApiClient.convertToType(data['FacPopulationDensity'], 'Number');
            }
            if (data.hasOwnProperty('FacSICCodes')) {
                obj['FacSICCodes'] = ApiClient.convertToType(data['FacSICCodes'], 'String');
            }
            if (data.hasOwnProperty('FacStdCountyName')) {
                obj['FacStdCountyName'] = ApiClient.convertToType(data['FacStdCountyName'], 'String');
            }
            if (data.hasOwnProperty('FacTRIAIRReleases')) {
                obj['FacTRIAIRReleases'] = ApiClient.convertToType(data['FacTRIAIRReleases'], 'String');
            }
            if (data.hasOwnProperty('FacTRICarcAIRReleases')) {
                obj['FacTRICarcAIRReleases'] = ApiClient.convertToType(data['FacTRICarcAIRReleases'], 'String');
            }
            if (data.hasOwnProperty('FacTRIHapsReleases')) {
                obj['FacTRIHapsReleases'] = ApiClient.convertToType(data['FacTRIHapsReleases'], 'String');
            }
            if (data.hasOwnProperty('FacTRIReporter')) {
                obj['FacTRIReporter'] = ApiClient.convertToType(data['FacTRIReporter'], 'String');
            }
            if (data.hasOwnProperty('FacUsMexBorderFlg')) {
                obj['FacUsMexBorderFlg'] = ApiClient.convertToType(data['FacUsMexBorderFlg'], 'String');
            }
            if (data.hasOwnProperty('GHGIDs')) {
                obj['GHGIDs'] = ApiClient.convertToType(data['GHGIDs'], 'String');
            }
            if (data.hasOwnProperty('HasPollRpt')) {
                obj['HasPollRpt'] = ApiClient.convertToType(data['HasPollRpt'], 'String');
            }
            if (data.hasOwnProperty('Infea5yrFlag')) {
                obj['Infea5yrFlag'] = ApiClient.convertToType(data['Infea5yrFlag'], 'Number');
            }
            if (data.hasOwnProperty('Insp5yrFlag')) {
                obj['Insp5yrFlag'] = ApiClient.convertToType(data['Insp5yrFlag'], 'Number');
            }
            if (data.hasOwnProperty('LastDatePce')) {
                obj['LastDatePce'] = ApiClient.convertToType(data['LastDatePce'], 'String');
            }
            if (data.hasOwnProperty('LastDatePceEPA')) {
                obj['LastDatePceEPA'] = ApiClient.convertToType(data['LastDatePceEPA'], 'String');
            }
            if (data.hasOwnProperty('LastDatePceSta')) {
                obj['LastDatePceSta'] = ApiClient.convertToType(data['LastDatePceSta'], 'String');
            }
            if (data.hasOwnProperty('LocalControlRegionCode')) {
                obj['LocalControlRegionCode'] = ApiClient.convertToType(data['LocalControlRegionCode'], 'String');
            }
            if (data.hasOwnProperty('LocalControlRegionName')) {
                obj['LocalControlRegionName'] = ApiClient.convertToType(data['LocalControlRegionName'], 'String');
            }
            if (data.hasOwnProperty('Lower48')) {
                obj['Lower48'] = ApiClient.convertToType(data['Lower48'], 'String');
            }
            if (data.hasOwnProperty('MaintPollutantsNaa')) {
                obj['MaintPollutantsNaa'] = ApiClient.convertToType(data['MaintPollutantsNaa'], 'String');
            }
            if (data.hasOwnProperty('MaintStandardsNaa')) {
                obj['MaintStandardsNaa'] = ApiClient.convertToType(data['MaintStandardsNaa'], 'String');
            }
            if (data.hasOwnProperty('MaintStatusNaa')) {
                obj['MaintStatusNaa'] = ApiClient.convertToType(data['MaintStatusNaa'], 'String');
            }
            if (data.hasOwnProperty('Map')) {
                obj['Map'] = ApiClient.convertToType(data['Map'], 'String');
            }
            if (data.hasOwnProperty('MaxPctileUs')) {
                obj['MaxPctileUs'] = ApiClient.convertToType(data['MaxPctileUs'], 'Number');
            }
            if (data.hasOwnProperty('MaxScore')) {
                obj['MaxScore'] = ApiClient.convertToType(data['MaxScore'], 'Number');
            }
            if (data.hasOwnProperty('NaPollutantsNaa')) {
                obj['NaPollutantsNaa'] = ApiClient.convertToType(data['NaPollutantsNaa'], 'String');
            }
            if (data.hasOwnProperty('NaStandardsNaa')) {
                obj['NaStandardsNaa'] = ApiClient.convertToType(data['NaStandardsNaa'], 'String');
            }
            if (data.hasOwnProperty('NaStatusNaa')) {
                obj['NaStatusNaa'] = ApiClient.convertToType(data['NaStatusNaa'], 'String');
            }
            if (data.hasOwnProperty('NaaCategories')) {
                obj['NaaCategories'] = ApiClient.convertToType(data['NaaCategories'], 'String');
            }
            if (data.hasOwnProperty('NaaPollutants')) {
                obj['NaaPollutants'] = ApiClient.convertToType(data['NaaPollutants'], 'String');
            }
            if (data.hasOwnProperty('OtherPermitIDs')) {
                obj['OtherPermitIDs'] = ApiClient.convertToType(data['OtherPermitIDs'], 'String');
            }
            if (data.hasOwnProperty('Over80CountUs')) {
                obj['Over80CountUs'] = ApiClient.convertToType(data['Over80CountUs'], 'Number');
            }
            if (data.hasOwnProperty('PctileCancerUs')) {
                obj['PctileCancerUs'] = ApiClient.convertToType(data['PctileCancerUs'], 'Number');
            }
            if (data.hasOwnProperty('PctileDpmUs')) {
                obj['PctileDpmUs'] = ApiClient.convertToType(data['PctileDpmUs'], 'Number');
            }
            if (data.hasOwnProperty('PctileO3Us')) {
                obj['PctileO3Us'] = ApiClient.convertToType(data['PctileO3Us'], 'Number');
            }
            if (data.hasOwnProperty('PctilePctpre1960Us')) {
                obj['PctilePctpre1960Us'] = ApiClient.convertToType(data['PctilePctpre1960Us'], 'Number');
            }
            if (data.hasOwnProperty('PctilePmUs')) {
                obj['PctilePmUs'] = ApiClient.convertToType(data['PctilePmUs'], 'Number');
            }
            if (data.hasOwnProperty('PctileProximityNPDESUs')) {
                obj['PctileProximityNPDESUs'] = ApiClient.convertToType(data['PctileProximityNPDESUs'], 'Number');
            }
            if (data.hasOwnProperty('PctileProximityNplUs')) {
                obj['PctileProximityNplUs'] = ApiClient.convertToType(data['PctileProximityNplUs'], 'Number');
            }
            if (data.hasOwnProperty('PctileProximityRmpUs')) {
                obj['PctileProximityRmpUs'] = ApiClient.convertToType(data['PctileProximityRmpUs'], 'Number');
            }
            if (data.hasOwnProperty('PctileProximityTsdfUs')) {
                obj['PctileProximityTsdfUs'] = ApiClient.convertToType(data['PctileProximityTsdfUs'], 'Number');
            }
            if (data.hasOwnProperty('PctileRespUs')) {
                obj['PctileRespUs'] = ApiClient.convertToType(data['PctileRespUs'], 'Number');
            }
            if (data.hasOwnProperty('PctileTrafficScoreUs')) {
                obj['PctileTrafficScoreUs'] = ApiClient.convertToType(data['PctileTrafficScoreUs'], 'Number');
            }
            if (data.hasOwnProperty('RCRAIDs')) {
                obj['RCRAIDs'] = ApiClient.convertToType(data['RCRAIDs'], 'String');
            }
            if (data.hasOwnProperty('ReferencePoint')) {
                obj['ReferencePoint'] = ApiClient.convertToType(data['ReferencePoint'], 'String');
            }
            if (data.hasOwnProperty('RegistryID')) {
                obj['RegistryID'] = ApiClient.convertToType(data['RegistryID'], 'String');
            }
            if (data.hasOwnProperty('RmpIDs')) {
                obj['RmpIDs'] = ApiClient.convertToType(data['RmpIDs'], 'String');
            }
            if (data.hasOwnProperty('SDWAIDs')) {
                obj['SDWAIDs'] = ApiClient.convertToType(data['SDWAIDs'], 'String');
            }
            if (data.hasOwnProperty('Score')) {
                obj['Score'] = ApiClient.convertToType(data['Score'], 'Number');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('Statute')) {
                obj['Statute'] = ApiClient.convertToType(data['Statute'], 'String');
            }
            if (data.hasOwnProperty('TRIIDs')) {
                obj['TRIIDs'] = ApiClient.convertToType(data['TRIIDs'], 'String');
            }
            if (data.hasOwnProperty('TRIbalFlag')) {
                obj['TRIbalFlag'] = ApiClient.convertToType(data['TRIbalFlag'], 'Number');
            }
            if (data.hasOwnProperty('ViolFlag')) {
                obj['ViolFlag'] = ApiClient.convertToType(data['ViolFlag'], 'Number');
            }
            if (data.hasOwnProperty('WebDocs')) {
                obj['WebDocs'] = ApiClient.convertToType(data['WebDocs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Air10</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Air10</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Air10.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AIR3yrComplQtrsHistory'] && !(typeof data['AIR3yrComplQtrsHistory'] === 'string' || data['AIR3yrComplQtrsHistory'] instanceof String)) {
            throw new Error("Expected the field `AIR3yrComplQtrsHistory` to be a primitive type in the JSON string but got " + data['AIR3yrComplQtrsHistory']);
        }
        // ensure the json data is a string
        if (data['AIRCaseIDs'] && !(typeof data['AIRCaseIDs'] === 'string' || data['AIRCaseIDs'] instanceof String)) {
            throw new Error("Expected the field `AIRCaseIDs` to be a primitive type in the JSON string but got " + data['AIRCaseIDs']);
        }
        // ensure the json data is a string
        if (data['AIRCity'] && !(typeof data['AIRCity'] === 'string' || data['AIRCity'] instanceof String)) {
            throw new Error("Expected the field `AIRCity` to be a primitive type in the JSON string but got " + data['AIRCity']);
        }
        // ensure the json data is a string
        if (data['AIRClassification'] && !(typeof data['AIRClassification'] === 'string' || data['AIRClassification'] instanceof String)) {
            throw new Error("Expected the field `AIRClassification` to be a primitive type in the JSON string but got " + data['AIRClassification']);
        }
        // ensure the json data is a string
        if (data['AIRComplStatus'] && !(typeof data['AIRComplStatus'] === 'string' || data['AIRComplStatus'] instanceof String)) {
            throw new Error("Expected the field `AIRComplStatus` to be a primitive type in the JSON string but got " + data['AIRComplStatus']);
        }
        // ensure the json data is a string
        if (data['AIRCounty'] && !(typeof data['AIRCounty'] === 'string' || data['AIRCounty'] instanceof String)) {
            throw new Error("Expected the field `AIRCounty` to be a primitive type in the JSON string but got " + data['AIRCounty']);
        }
        // ensure the json data is a string
        if (data['AIREPARegion'] && !(typeof data['AIREPARegion'] === 'string' || data['AIREPARegion'] instanceof String)) {
            throw new Error("Expected the field `AIREPARegion` to be a primitive type in the JSON string but got " + data['AIREPARegion']);
        }
        // ensure the json data is a string
        if (data['AIRFIPSCode'] && !(typeof data['AIRFIPSCode'] === 'string' || data['AIRFIPSCode'] instanceof String)) {
            throw new Error("Expected the field `AIRFIPSCode` to be a primitive type in the JSON string but got " + data['AIRFIPSCode']);
        }
        // ensure the json data is a string
        if (data['AIRFacilityTypeCode'] && !(typeof data['AIRFacilityTypeCode'] === 'string' || data['AIRFacilityTypeCode'] instanceof String)) {
            throw new Error("Expected the field `AIRFacilityTypeCode` to be a primitive type in the JSON string but got " + data['AIRFacilityTypeCode']);
        }
        // ensure the json data is a string
        if (data['AIRFacilityTypeDesc'] && !(typeof data['AIRFacilityTypeDesc'] === 'string' || data['AIRFacilityTypeDesc'] instanceof String)) {
            throw new Error("Expected the field `AIRFacilityTypeDesc` to be a primitive type in the JSON string but got " + data['AIRFacilityTypeDesc']);
        }
        // ensure the json data is a string
        if (data['AIRFeaCnt'] && !(typeof data['AIRFeaCnt'] === 'string' || data['AIRFeaCnt'] instanceof String)) {
            throw new Error("Expected the field `AIRFeaCnt` to be a primitive type in the JSON string but got " + data['AIRFeaCnt']);
        }
        // ensure the json data is a string
        if (data['AIRHpvStatus'] && !(typeof data['AIRHpvStatus'] === 'string' || data['AIRHpvStatus'] instanceof String)) {
            throw new Error("Expected the field `AIRHpvStatus` to be a primitive type in the JSON string but got " + data['AIRHpvStatus']);
        }
        // ensure the json data is a string
        if (data['AIRIDs'] && !(typeof data['AIRIDs'] === 'string' || data['AIRIDs'] instanceof String)) {
            throw new Error("Expected the field `AIRIDs` to be a primitive type in the JSON string but got " + data['AIRIDs']);
        }
        // ensure the json data is a string
        if (data['AIRIeaCnt'] && !(typeof data['AIRIeaCnt'] === 'string' || data['AIRIeaCnt'] instanceof String)) {
            throw new Error("Expected the field `AIRIeaCnt` to be a primitive type in the JSON string but got " + data['AIRIeaCnt']);
        }
        // ensure the json data is a string
        if (data['AIRIndianCntryFlg'] && !(typeof data['AIRIndianCntryFlg'] === 'string' || data['AIRIndianCntryFlg'] instanceof String)) {
            throw new Error("Expected the field `AIRIndianCntryFlg` to be a primitive type in the JSON string but got " + data['AIRIndianCntryFlg']);
        }
        // ensure the json data is a string
        if (data['AIRLastEvalDate'] && !(typeof data['AIRLastEvalDate'] === 'string' || data['AIRLastEvalDate'] instanceof String)) {
            throw new Error("Expected the field `AIRLastEvalDate` to be a primitive type in the JSON string but got " + data['AIRLastEvalDate']);
        }
        // ensure the json data is a string
        if (data['AIRLastEvalDateEPA'] && !(typeof data['AIRLastEvalDateEPA'] === 'string' || data['AIRLastEvalDateEPA'] instanceof String)) {
            throw new Error("Expected the field `AIRLastEvalDateEPA` to be a primitive type in the JSON string but got " + data['AIRLastEvalDateEPA']);
        }
        // ensure the json data is a string
        if (data['AIRLastEvalDateState'] && !(typeof data['AIRLastEvalDateState'] === 'string' || data['AIRLastEvalDateState'] instanceof String)) {
            throw new Error("Expected the field `AIRLastEvalDateState` to be a primitive type in the JSON string but got " + data['AIRLastEvalDateState']);
        }
        // ensure the json data is a string
        if (data['AIRLastFeaDate'] && !(typeof data['AIRLastFeaDate'] === 'string' || data['AIRLastFeaDate'] instanceof String)) {
            throw new Error("Expected the field `AIRLastFeaDate` to be a primitive type in the JSON string but got " + data['AIRLastFeaDate']);
        }
        // ensure the json data is a string
        if (data['AIRLastFeaDateEPA'] && !(typeof data['AIRLastFeaDateEPA'] === 'string' || data['AIRLastFeaDateEPA'] instanceof String)) {
            throw new Error("Expected the field `AIRLastFeaDateEPA` to be a primitive type in the JSON string but got " + data['AIRLastFeaDateEPA']);
        }
        // ensure the json data is a string
        if (data['AIRLastFeaDateState'] && !(typeof data['AIRLastFeaDateState'] === 'string' || data['AIRLastFeaDateState'] instanceof String)) {
            throw new Error("Expected the field `AIRLastFeaDateState` to be a primitive type in the JSON string but got " + data['AIRLastFeaDateState']);
        }
        // ensure the json data is a string
        if (data['AIRLastIeaDate'] && !(typeof data['AIRLastIeaDate'] === 'string' || data['AIRLastIeaDate'] instanceof String)) {
            throw new Error("Expected the field `AIRLastIeaDate` to be a primitive type in the JSON string but got " + data['AIRLastIeaDate']);
        }
        // ensure the json data is a string
        if (data['AIRLastIeaDateEPA'] && !(typeof data['AIRLastIeaDateEPA'] === 'string' || data['AIRLastIeaDateEPA'] instanceof String)) {
            throw new Error("Expected the field `AIRLastIeaDateEPA` to be a primitive type in the JSON string but got " + data['AIRLastIeaDateEPA']);
        }
        // ensure the json data is a string
        if (data['AIRLastIeaDateState'] && !(typeof data['AIRLastIeaDateState'] === 'string' || data['AIRLastIeaDateState'] instanceof String)) {
            throw new Error("Expected the field `AIRLastIeaDateState` to be a primitive type in the JSON string but got " + data['AIRLastIeaDateState']);
        }
        // ensure the json data is a string
        if (data['AIRLastPenaltyDate'] && !(typeof data['AIRLastPenaltyDate'] === 'string' || data['AIRLastPenaltyDate'] instanceof String)) {
            throw new Error("Expected the field `AIRLastPenaltyDate` to be a primitive type in the JSON string but got " + data['AIRLastPenaltyDate']);
        }
        // ensure the json data is a string
        if (data['AIRLastStckDateEPA'] && !(typeof data['AIRLastStckDateEPA'] === 'string' || data['AIRLastStckDateEPA'] instanceof String)) {
            throw new Error("Expected the field `AIRLastStckDateEPA` to be a primitive type in the JSON string but got " + data['AIRLastStckDateEPA']);
        }
        // ensure the json data is a string
        if (data['AIRLastStckDateState'] && !(typeof data['AIRLastStckDateState'] === 'string' || data['AIRLastStckDateState'] instanceof String)) {
            throw new Error("Expected the field `AIRLastStckDateState` to be a primitive type in the JSON string but got " + data['AIRLastStckDateState']);
        }
        // ensure the json data is a string
        if (data['AIRLastStckTestDate'] && !(typeof data['AIRLastStckTestDate'] === 'string' || data['AIRLastStckTestDate'] instanceof String)) {
            throw new Error("Expected the field `AIRLastStckTestDate` to be a primitive type in the JSON string but got " + data['AIRLastStckTestDate']);
        }
        // ensure the json data is a string
        if (data['AIRLastStckTestResults'] && !(typeof data['AIRLastStckTestResults'] === 'string' || data['AIRLastStckTestResults'] instanceof String)) {
            throw new Error("Expected the field `AIRLastStckTestResults` to be a primitive type in the JSON string but got " + data['AIRLastStckTestResults']);
        }
        // ensure the json data is a string
        if (data['AIRLastViolDate'] && !(typeof data['AIRLastViolDate'] === 'string' || data['AIRLastViolDate'] instanceof String)) {
            throw new Error("Expected the field `AIRLastViolDate` to be a primitive type in the JSON string but got " + data['AIRLastViolDate']);
        }
        // ensure the json data is a string
        if (data['AIRMacts'] && !(typeof data['AIRMacts'] === 'string' || data['AIRMacts'] instanceof String)) {
            throw new Error("Expected the field `AIRMacts` to be a primitive type in the JSON string but got " + data['AIRMacts']);
        }
        // ensure the json data is a string
        if (data['AIRMajorFlag'] && !(typeof data['AIRMajorFlag'] === 'string' || data['AIRMajorFlag'] instanceof String)) {
            throw new Error("Expected the field `AIRMajorFlag` to be a primitive type in the JSON string but got " + data['AIRMajorFlag']);
        }
        // ensure the json data is a string
        if (data['AIRNAICS'] && !(typeof data['AIRNAICS'] === 'string' || data['AIRNAICS'] instanceof String)) {
            throw new Error("Expected the field `AIRNAICS` to be a primitive type in the JSON string but got " + data['AIRNAICS']);
        }
        // ensure the json data is a string
        if (data['AIRName'] && !(typeof data['AIRName'] === 'string' || data['AIRName'] instanceof String)) {
            throw new Error("Expected the field `AIRName` to be a primitive type in the JSON string but got " + data['AIRName']);
        }
        // ensure the json data is a string
        if (data['AIRNsps'] && !(typeof data['AIRNsps'] === 'string' || data['AIRNsps'] instanceof String)) {
            throw new Error("Expected the field `AIRNsps` to be a primitive type in the JSON string but got " + data['AIRNsps']);
        }
        // ensure the json data is a string
        if (data['AIRNspsm'] && !(typeof data['AIRNspsm'] === 'string' || data['AIRNspsm'] instanceof String)) {
            throw new Error("Expected the field `AIRNspsm` to be a primitive type in the JSON string but got " + data['AIRNspsm']);
        }
        // ensure the json data is a string
        if (data['AIRPenalties'] && !(typeof data['AIRPenalties'] === 'string' || data['AIRPenalties'] instanceof String)) {
            throw new Error("Expected the field `AIRPenalties` to be a primitive type in the JSON string but got " + data['AIRPenalties']);
        }
        // ensure the json data is a string
        if (data['AIRPollRecentViol'] && !(typeof data['AIRPollRecentViol'] === 'string' || data['AIRPollRecentViol'] instanceof String)) {
            throw new Error("Expected the field `AIRPollRecentViol` to be a primitive type in the JSON string but got " + data['AIRPollRecentViol']);
        }
        // ensure the json data is a string
        if (data['AIRPrograms'] && !(typeof data['AIRPrograms'] === 'string' || data['AIRPrograms'] instanceof String)) {
            throw new Error("Expected the field `AIRPrograms` to be a primitive type in the JSON string but got " + data['AIRPrograms']);
        }
        // ensure the json data is a string
        if (data['AIRStackTest5YrAll'] && !(typeof data['AIRStackTest5YrAll'] === 'string' || data['AIRStackTest5YrAll'] instanceof String)) {
            throw new Error("Expected the field `AIRStackTest5YrAll` to be a primitive type in the JSON string but got " + data['AIRStackTest5YrAll']);
        }
        // ensure the json data is a string
        if (data['AIRStackTest5YrFail'] && !(typeof data['AIRStackTest5YrFail'] === 'string' || data['AIRStackTest5YrFail'] instanceof String)) {
            throw new Error("Expected the field `AIRStackTest5YrFail` to be a primitive type in the JSON string but got " + data['AIRStackTest5YrFail']);
        }
        // ensure the json data is a string
        if (data['AIRState'] && !(typeof data['AIRState'] === 'string' || data['AIRState'] instanceof String)) {
            throw new Error("Expected the field `AIRState` to be a primitive type in the JSON string but got " + data['AIRState']);
        }
        // ensure the json data is a string
        if (data['AIRStatus'] && !(typeof data['AIRStatus'] === 'string' || data['AIRStatus'] instanceof String)) {
            throw new Error("Expected the field `AIRStatus` to be a primitive type in the JSON string but got " + data['AIRStatus']);
        }
        // ensure the json data is a string
        if (data['AIRStreet'] && !(typeof data['AIRStreet'] === 'string' || data['AIRStreet'] instanceof String)) {
            throw new Error("Expected the field `AIRStreet` to be a primitive type in the JSON string but got " + data['AIRStreet']);
        }
        // ensure the json data is a string
        if (data['AIRTRIbalEPAids'] && !(typeof data['AIRTRIbalEPAids'] === 'string' || data['AIRTRIbalEPAids'] instanceof String)) {
            throw new Error("Expected the field `AIRTRIbalEPAids` to be a primitive type in the JSON string but got " + data['AIRTRIbalEPAids']);
        }
        // ensure the json data is a string
        if (data['AIRTRIbalNames'] && !(typeof data['AIRTRIbalNames'] === 'string' || data['AIRTRIbalNames'] instanceof String)) {
            throw new Error("Expected the field `AIRTRIbalNames` to be a primitive type in the JSON string but got " + data['AIRTRIbalNames']);
        }
        // ensure the json data is a string
        if (data['AIRUniverse'] && !(typeof data['AIRUniverse'] === 'string' || data['AIRUniverse'] instanceof String)) {
            throw new Error("Expected the field `AIRUniverse` to be a primitive type in the JSON string but got " + data['AIRUniverse']);
        }
        // ensure the json data is a string
        if (data['AIRZip'] && !(typeof data['AIRZip'] === 'string' || data['AIRZip'] instanceof String)) {
            throw new Error("Expected the field `AIRZip` to be a primitive type in the JSON string but got " + data['AIRZip']);
        }
        // ensure the json data is a string
        if (data['ActiveLower48'] && !(typeof data['ActiveLower48'] === 'string' || data['ActiveLower48'] instanceof String)) {
            throw new Error("Expected the field `ActiveLower48` to be a primitive type in the JSON string but got " + data['ActiveLower48']);
        }
        // ensure the json data is a string
        if (data['CWAIDs'] && !(typeof data['CWAIDs'] === 'string' || data['CWAIDs'] instanceof String)) {
            throw new Error("Expected the field `CWAIDs` to be a primitive type in the JSON string but got " + data['CWAIDs']);
        }
        // ensure the json data is a string
        if (data['CamdIDs'] && !(typeof data['CamdIDs'] === 'string' || data['CamdIDs'] instanceof String)) {
            throw new Error("Expected the field `CamdIDs` to be a primitive type in the JSON string but got " + data['CamdIDs']);
        }
        // ensure the json data is a string
        if (data['CensusBlockGroup'] && !(typeof data['CensusBlockGroup'] === 'string' || data['CensusBlockGroup'] instanceof String)) {
            throw new Error("Expected the field `CensusBlockGroup` to be a primitive type in the JSON string but got " + data['CensusBlockGroup']);
        }
        // ensure the json data is a string
        if (data['ChesapeakeBayFlag'] && !(typeof data['ChesapeakeBayFlag'] === 'string' || data['ChesapeakeBayFlag'] instanceof String)) {
            throw new Error("Expected the field `ChesapeakeBayFlag` to be a primitive type in the JSON string but got " + data['ChesapeakeBayFlag']);
        }
        // ensure the json data is a string
        if (data['CollectionMethod'] && !(typeof data['CollectionMethod'] === 'string' || data['CollectionMethod'] instanceof String)) {
            throw new Error("Expected the field `CollectionMethod` to be a primitive type in the JSON string but got " + data['CollectionMethod']);
        }
        // ensure the json data is a string
        if (data['EPASystem'] && !(typeof data['EPASystem'] === 'string' || data['EPASystem'] instanceof String)) {
            throw new Error("Expected the field `EPASystem` to be a primitive type in the JSON string but got " + data['EPASystem']);
        }
        // ensure the json data is a string
        if (data['EisIDs'] && !(typeof data['EisIDs'] === 'string' || data['EisIDs'] instanceof String)) {
            throw new Error("Expected the field `EisIDs` to be a primitive type in the JSON string but got " + data['EisIDs']);
        }
        // ensure the json data is a string
        if (data['EjscreenFlag'] && !(typeof data['EjscreenFlag'] === 'string' || data['EjscreenFlag'] instanceof String)) {
            throw new Error("Expected the field `EjscreenFlag` to be a primitive type in the JSON string but got " + data['EjscreenFlag']);
        }
        // ensure the json data is a string
        if (data['EjscreenFlagUs'] && !(typeof data['EjscreenFlagUs'] === 'string' || data['EjscreenFlagUs'] instanceof String)) {
            throw new Error("Expected the field `EjscreenFlagUs` to be a primitive type in the JSON string but got " + data['EjscreenFlagUs']);
        }
        // ensure the json data is a string
        if (data['FacCamdReporter'] && !(typeof data['FacCamdReporter'] === 'string' || data['FacCamdReporter'] instanceof String)) {
            throw new Error("Expected the field `FacCamdReporter` to be a primitive type in the JSON string but got " + data['FacCamdReporter']);
        }
        // ensure the json data is a string
        if (data['FacCountyName'] && !(typeof data['FacCountyName'] === 'string' || data['FacCountyName'] instanceof String)) {
            throw new Error("Expected the field `FacCountyName` to be a primitive type in the JSON string but got " + data['FacCountyName']);
        }
        // ensure the json data is a string
        if (data['FacDerivedHuc'] && !(typeof data['FacDerivedHuc'] === 'string' || data['FacDerivedHuc'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedHuc` to be a primitive type in the JSON string but got " + data['FacDerivedHuc']);
        }
        // ensure the json data is a string
        if (data['FacDerivedTRIbes'] && !(typeof data['FacDerivedTRIbes'] === 'string' || data['FacDerivedTRIbes'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedTRIbes` to be a primitive type in the JSON string but got " + data['FacDerivedTRIbes']);
        }
        // ensure the json data is a string
        if (data['FacDerivedWBD'] && !(typeof data['FacDerivedWBD'] === 'string' || data['FacDerivedWBD'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedWBD` to be a primitive type in the JSON string but got " + data['FacDerivedWBD']);
        }
        // ensure the json data is a string
        if (data['FacDerivedWBDName'] && !(typeof data['FacDerivedWBDName'] === 'string' || data['FacDerivedWBDName'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedWBDName` to be a primitive type in the JSON string but got " + data['FacDerivedWBDName']);
        }
        // ensure the json data is a string
        if (data['FacEisAIRReleases'] && !(typeof data['FacEisAIRReleases'] === 'string' || data['FacEisAIRReleases'] instanceof String)) {
            throw new Error("Expected the field `FacEisAIRReleases` to be a primitive type in the JSON string but got " + data['FacEisAIRReleases']);
        }
        // ensure the json data is a string
        if (data['FacEisReporter'] && !(typeof data['FacEisReporter'] === 'string' || data['FacEisReporter'] instanceof String)) {
            throw new Error("Expected the field `FacEisReporter` to be a primitive type in the JSON string but got " + data['FacEisReporter']);
        }
        // ensure the json data is a string
        if (data['FacFIPSCode'] && !(typeof data['FacFIPSCode'] === 'string' || data['FacFIPSCode'] instanceof String)) {
            throw new Error("Expected the field `FacFIPSCode` to be a primitive type in the JSON string but got " + data['FacFIPSCode']);
        }
        // ensure the json data is a string
        if (data['FacFederalAgencyCode'] && !(typeof data['FacFederalAgencyCode'] === 'string' || data['FacFederalAgencyCode'] instanceof String)) {
            throw new Error("Expected the field `FacFederalAgencyCode` to be a primitive type in the JSON string but got " + data['FacFederalAgencyCode']);
        }
        // ensure the json data is a string
        if (data['FacFederalAgencyName'] && !(typeof data['FacFederalAgencyName'] === 'string' || data['FacFederalAgencyName'] instanceof String)) {
            throw new Error("Expected the field `FacFederalAgencyName` to be a primitive type in the JSON string but got " + data['FacFederalAgencyName']);
        }
        // ensure the json data is a string
        if (data['FacGHGCO2Releases'] && !(typeof data['FacGHGCO2Releases'] === 'string' || data['FacGHGCO2Releases'] instanceof String)) {
            throw new Error("Expected the field `FacGHGCO2Releases` to be a primitive type in the JSON string but got " + data['FacGHGCO2Releases']);
        }
        // ensure the json data is a string
        if (data['FacGHGReporter'] && !(typeof data['FacGHGReporter'] === 'string' || data['FacGHGReporter'] instanceof String)) {
            throw new Error("Expected the field `FacGHGReporter` to be a primitive type in the JSON string but got " + data['FacGHGReporter']);
        }
        // ensure the json data is a string
        if (data['FacIndianCntryFlg'] && !(typeof data['FacIndianCntryFlg'] === 'string' || data['FacIndianCntryFlg'] instanceof String)) {
            throw new Error("Expected the field `FacIndianCntryFlg` to be a primitive type in the JSON string but got " + data['FacIndianCntryFlg']);
        }
        // ensure the json data is a string
        if (data['FacIndianSpatialFlg'] && !(typeof data['FacIndianSpatialFlg'] === 'string' || data['FacIndianSpatialFlg'] instanceof String)) {
            throw new Error("Expected the field `FacIndianSpatialFlg` to be a primitive type in the JSON string but got " + data['FacIndianSpatialFlg']);
        }
        // ensure the json data is a string
        if (data['FacMapFlg'] && !(typeof data['FacMapFlg'] === 'string' || data['FacMapFlg'] instanceof String)) {
            throw new Error("Expected the field `FacMapFlg` to be a primitive type in the JSON string but got " + data['FacMapFlg']);
        }
        // ensure the json data is a string
        if (data['FacMapIcon'] && !(typeof data['FacMapIcon'] === 'string' || data['FacMapIcon'] instanceof String)) {
            throw new Error("Expected the field `FacMapIcon` to be a primitive type in the JSON string but got " + data['FacMapIcon']);
        }
        // ensure the json data is a string
        if (data['FacNaaFlag'] && !(typeof data['FacNaaFlag'] === 'string' || data['FacNaaFlag'] instanceof String)) {
            throw new Error("Expected the field `FacNaaFlag` to be a primitive type in the JSON string but got " + data['FacNaaFlag']);
        }
        // ensure the json data is a string
        if (data['FacSICCodes'] && !(typeof data['FacSICCodes'] === 'string' || data['FacSICCodes'] instanceof String)) {
            throw new Error("Expected the field `FacSICCodes` to be a primitive type in the JSON string but got " + data['FacSICCodes']);
        }
        // ensure the json data is a string
        if (data['FacStdCountyName'] && !(typeof data['FacStdCountyName'] === 'string' || data['FacStdCountyName'] instanceof String)) {
            throw new Error("Expected the field `FacStdCountyName` to be a primitive type in the JSON string but got " + data['FacStdCountyName']);
        }
        // ensure the json data is a string
        if (data['FacTRIAIRReleases'] && !(typeof data['FacTRIAIRReleases'] === 'string' || data['FacTRIAIRReleases'] instanceof String)) {
            throw new Error("Expected the field `FacTRIAIRReleases` to be a primitive type in the JSON string but got " + data['FacTRIAIRReleases']);
        }
        // ensure the json data is a string
        if (data['FacTRICarcAIRReleases'] && !(typeof data['FacTRICarcAIRReleases'] === 'string' || data['FacTRICarcAIRReleases'] instanceof String)) {
            throw new Error("Expected the field `FacTRICarcAIRReleases` to be a primitive type in the JSON string but got " + data['FacTRICarcAIRReleases']);
        }
        // ensure the json data is a string
        if (data['FacTRIHapsReleases'] && !(typeof data['FacTRIHapsReleases'] === 'string' || data['FacTRIHapsReleases'] instanceof String)) {
            throw new Error("Expected the field `FacTRIHapsReleases` to be a primitive type in the JSON string but got " + data['FacTRIHapsReleases']);
        }
        // ensure the json data is a string
        if (data['FacTRIReporter'] && !(typeof data['FacTRIReporter'] === 'string' || data['FacTRIReporter'] instanceof String)) {
            throw new Error("Expected the field `FacTRIReporter` to be a primitive type in the JSON string but got " + data['FacTRIReporter']);
        }
        // ensure the json data is a string
        if (data['FacUsMexBorderFlg'] && !(typeof data['FacUsMexBorderFlg'] === 'string' || data['FacUsMexBorderFlg'] instanceof String)) {
            throw new Error("Expected the field `FacUsMexBorderFlg` to be a primitive type in the JSON string but got " + data['FacUsMexBorderFlg']);
        }
        // ensure the json data is a string
        if (data['GHGIDs'] && !(typeof data['GHGIDs'] === 'string' || data['GHGIDs'] instanceof String)) {
            throw new Error("Expected the field `GHGIDs` to be a primitive type in the JSON string but got " + data['GHGIDs']);
        }
        // ensure the json data is a string
        if (data['HasPollRpt'] && !(typeof data['HasPollRpt'] === 'string' || data['HasPollRpt'] instanceof String)) {
            throw new Error("Expected the field `HasPollRpt` to be a primitive type in the JSON string but got " + data['HasPollRpt']);
        }
        // ensure the json data is a string
        if (data['LastDatePce'] && !(typeof data['LastDatePce'] === 'string' || data['LastDatePce'] instanceof String)) {
            throw new Error("Expected the field `LastDatePce` to be a primitive type in the JSON string but got " + data['LastDatePce']);
        }
        // ensure the json data is a string
        if (data['LastDatePceEPA'] && !(typeof data['LastDatePceEPA'] === 'string' || data['LastDatePceEPA'] instanceof String)) {
            throw new Error("Expected the field `LastDatePceEPA` to be a primitive type in the JSON string but got " + data['LastDatePceEPA']);
        }
        // ensure the json data is a string
        if (data['LastDatePceSta'] && !(typeof data['LastDatePceSta'] === 'string' || data['LastDatePceSta'] instanceof String)) {
            throw new Error("Expected the field `LastDatePceSta` to be a primitive type in the JSON string but got " + data['LastDatePceSta']);
        }
        // ensure the json data is a string
        if (data['LocalControlRegionCode'] && !(typeof data['LocalControlRegionCode'] === 'string' || data['LocalControlRegionCode'] instanceof String)) {
            throw new Error("Expected the field `LocalControlRegionCode` to be a primitive type in the JSON string but got " + data['LocalControlRegionCode']);
        }
        // ensure the json data is a string
        if (data['LocalControlRegionName'] && !(typeof data['LocalControlRegionName'] === 'string' || data['LocalControlRegionName'] instanceof String)) {
            throw new Error("Expected the field `LocalControlRegionName` to be a primitive type in the JSON string but got " + data['LocalControlRegionName']);
        }
        // ensure the json data is a string
        if (data['Lower48'] && !(typeof data['Lower48'] === 'string' || data['Lower48'] instanceof String)) {
            throw new Error("Expected the field `Lower48` to be a primitive type in the JSON string but got " + data['Lower48']);
        }
        // ensure the json data is a string
        if (data['MaintPollutantsNaa'] && !(typeof data['MaintPollutantsNaa'] === 'string' || data['MaintPollutantsNaa'] instanceof String)) {
            throw new Error("Expected the field `MaintPollutantsNaa` to be a primitive type in the JSON string but got " + data['MaintPollutantsNaa']);
        }
        // ensure the json data is a string
        if (data['MaintStandardsNaa'] && !(typeof data['MaintStandardsNaa'] === 'string' || data['MaintStandardsNaa'] instanceof String)) {
            throw new Error("Expected the field `MaintStandardsNaa` to be a primitive type in the JSON string but got " + data['MaintStandardsNaa']);
        }
        // ensure the json data is a string
        if (data['MaintStatusNaa'] && !(typeof data['MaintStatusNaa'] === 'string' || data['MaintStatusNaa'] instanceof String)) {
            throw new Error("Expected the field `MaintStatusNaa` to be a primitive type in the JSON string but got " + data['MaintStatusNaa']);
        }
        // ensure the json data is a string
        if (data['Map'] && !(typeof data['Map'] === 'string' || data['Map'] instanceof String)) {
            throw new Error("Expected the field `Map` to be a primitive type in the JSON string but got " + data['Map']);
        }
        // ensure the json data is a string
        if (data['NaPollutantsNaa'] && !(typeof data['NaPollutantsNaa'] === 'string' || data['NaPollutantsNaa'] instanceof String)) {
            throw new Error("Expected the field `NaPollutantsNaa` to be a primitive type in the JSON string but got " + data['NaPollutantsNaa']);
        }
        // ensure the json data is a string
        if (data['NaStandardsNaa'] && !(typeof data['NaStandardsNaa'] === 'string' || data['NaStandardsNaa'] instanceof String)) {
            throw new Error("Expected the field `NaStandardsNaa` to be a primitive type in the JSON string but got " + data['NaStandardsNaa']);
        }
        // ensure the json data is a string
        if (data['NaStatusNaa'] && !(typeof data['NaStatusNaa'] === 'string' || data['NaStatusNaa'] instanceof String)) {
            throw new Error("Expected the field `NaStatusNaa` to be a primitive type in the JSON string but got " + data['NaStatusNaa']);
        }
        // ensure the json data is a string
        if (data['NaaCategories'] && !(typeof data['NaaCategories'] === 'string' || data['NaaCategories'] instanceof String)) {
            throw new Error("Expected the field `NaaCategories` to be a primitive type in the JSON string but got " + data['NaaCategories']);
        }
        // ensure the json data is a string
        if (data['NaaPollutants'] && !(typeof data['NaaPollutants'] === 'string' || data['NaaPollutants'] instanceof String)) {
            throw new Error("Expected the field `NaaPollutants` to be a primitive type in the JSON string but got " + data['NaaPollutants']);
        }
        // ensure the json data is a string
        if (data['OtherPermitIDs'] && !(typeof data['OtherPermitIDs'] === 'string' || data['OtherPermitIDs'] instanceof String)) {
            throw new Error("Expected the field `OtherPermitIDs` to be a primitive type in the JSON string but got " + data['OtherPermitIDs']);
        }
        // ensure the json data is a string
        if (data['RCRAIDs'] && !(typeof data['RCRAIDs'] === 'string' || data['RCRAIDs'] instanceof String)) {
            throw new Error("Expected the field `RCRAIDs` to be a primitive type in the JSON string but got " + data['RCRAIDs']);
        }
        // ensure the json data is a string
        if (data['ReferencePoint'] && !(typeof data['ReferencePoint'] === 'string' || data['ReferencePoint'] instanceof String)) {
            throw new Error("Expected the field `ReferencePoint` to be a primitive type in the JSON string but got " + data['ReferencePoint']);
        }
        // ensure the json data is a string
        if (data['RegistryID'] && !(typeof data['RegistryID'] === 'string' || data['RegistryID'] instanceof String)) {
            throw new Error("Expected the field `RegistryID` to be a primitive type in the JSON string but got " + data['RegistryID']);
        }
        // ensure the json data is a string
        if (data['RmpIDs'] && !(typeof data['RmpIDs'] === 'string' || data['RmpIDs'] instanceof String)) {
            throw new Error("Expected the field `RmpIDs` to be a primitive type in the JSON string but got " + data['RmpIDs']);
        }
        // ensure the json data is a string
        if (data['SDWAIDs'] && !(typeof data['SDWAIDs'] === 'string' || data['SDWAIDs'] instanceof String)) {
            throw new Error("Expected the field `SDWAIDs` to be a primitive type in the JSON string but got " + data['SDWAIDs']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['Statute'] && !(typeof data['Statute'] === 'string' || data['Statute'] instanceof String)) {
            throw new Error("Expected the field `Statute` to be a primitive type in the JSON string but got " + data['Statute']);
        }
        // ensure the json data is a string
        if (data['TRIIDs'] && !(typeof data['TRIIDs'] === 'string' || data['TRIIDs'] instanceof String)) {
            throw new Error("Expected the field `TRIIDs` to be a primitive type in the JSON string but got " + data['TRIIDs']);
        }
        // ensure the json data is a string
        if (data['WebDocs'] && !(typeof data['WebDocs'] === 'string' || data['WebDocs'] instanceof String)) {
            throw new Error("Expected the field `WebDocs` to be a primitive type in the JSON string but got " + data['WebDocs']);
        }

        return true;
    }


}

Air10.RequiredProperties = ["AIR3yrComplQtrsHistory", "AIRCaseIDs", "AIRCity", "AIRClassification", "AIRComplStatus", "AIRCounty", "AIRDaysLastEval", "AIREPARegion", "AIREvalCnt", "AIRFIPSCode", "AIRFacilityTypeCode", "AIRFacilityTypeDesc", "AIRFeaCnt", "AIRHpvStatus", "AIRIDs", "AIRIeaCnt", "AIRIndianCntryFlg", "AIRLastEvalDate", "AIRLastEvalDateEPA", "AIRLastEvalDateState", "AIRLastFeaDate", "AIRLastFeaDateEPA", "AIRLastFeaDateState", "AIRLastIeaDate", "AIRLastIeaDateEPA", "AIRLastIeaDateState", "AIRLastPenaltyDate", "AIRLastStckDateEPA", "AIRLastStckDateState", "AIRLastStckTestDate", "AIRLastStckTestResults", "AIRLastViolDate", "AIRMacts", "AIRMajorFlag", "AIRMnthsWithHpv", "AIRNAICS", "AIRName", "AIRNsps", "AIRNspsm", "AIRPenalties", "AIRPollRecentViol", "AIRPrograms", "AIRQtrsWithHpv", "AIRQtrsWithViol", "AIRRecentViolCnt", "AIRStackTest5YrAll", "AIRStackTest5YrFail", "AIRState", "AIRStatus", "AIRStreet", "AIRTRIbalEPAids", "AIRTRIbalNames", "AIRUniverse", "AIRZip", "ActiveLower48", "CWAIDs", "CalculatedAccuracyMeters", "CamdIDs", "CensusBlockGroup", "ChesapeakeBayFlag", "CollectionMethod", "CurrSvFlag", "CurrVioFlag", "EPASystem", "Ea5yrFlag", "EisIDs", "EjscreenFlag", "EjscreenFlagUs", "FacCamdReporter", "FacCountyName", "FacDerivedHuc", "FacDerivedTRIbes", "FacDerivedWBD", "FacDerivedWBDName", "FacEisAIRReleases", "FacEisReporter", "FacFIPSCode", "FacFederalAgencyCode", "FacFederalAgencyName", "FacGHGCO2Releases", "FacGHGReporter", "FacIndianCntryFlg", "FacIndianSpatialFlg", "FacMapFlg", "FacMapIcon", "FacNaaFlag", "FacPercentMinority", "FacPopulationDensity", "FacSICCodes", "FacStdCountyName", "FacTRIAIRReleases", "FacTRICarcAIRReleases", "FacTRIHapsReleases", "FacTRIReporter", "FacUsMexBorderFlg", "GHGIDs", "HasPollRpt", "Infea5yrFlag", "Insp5yrFlag", "LastDatePce", "LastDatePceEPA", "LastDatePceSta", "LocalControlRegionCode", "LocalControlRegionName", "Lower48", "MaintPollutantsNaa", "MaintStandardsNaa", "MaintStatusNaa", "Map", "MaxPctileUs", "MaxScore", "NaPollutantsNaa", "NaStandardsNaa", "NaStatusNaa", "NaaCategories", "NaaPollutants", "OtherPermitIDs", "Over80CountUs", "PctileCancerUs", "PctileDpmUs", "PctileO3Us", "PctilePctpre1960Us", "PctilePmUs", "PctileProximityNPDESUs", "PctileProximityNplUs", "PctileProximityRmpUs", "PctileProximityTsdfUs", "PctileRespUs", "PctileTrafficScoreUs", "RCRAIDs", "ReferencePoint", "RegistryID", "RmpIDs", "SDWAIDs", "Score", "SourceID", "Statute", "TRIIDs", "TRIbalFlag", "ViolFlag", "WebDocs"];

/**
 * The facility's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined
 * @member {String} AIR3yrComplQtrsHistory
 */
Air10.prototype['AIR3yrComplQtrsHistory'] = undefined;

/**
 * Space-delimited list of AIR cases associated with the facility.
 * @member {String} AIRCaseIDs
 */
Air10.prototype['AIRCaseIDs'] = undefined;

/**
 * The city where the AIR facility is located.
 * @member {String} AIRCity
 */
Air10.prototype['AIRCity'] = undefined;

/**
 * @member {String} AIRClassification
 */
Air10.prototype['AIRClassification'] = undefined;

/**
 * The facility's recent violation status under the Clean Air Act.
 * @member {String} AIRComplStatus
 */
Air10.prototype['AIRComplStatus'] = undefined;

/**
 * The name of the county where the AIR facility is located.
 * @member {String} AIRCounty
 */
Air10.prototype['AIRCounty'] = undefined;

/**
 * The number of days since the most recent compliance evaluation of the facility.
 * @member {Number} AIRDaysLastEval
 */
Air10.prototype['AIRDaysLastEval'] = undefined;

/**
 * The EPA region where the AIR facility is located.
 * @member {String} AIREPARegion
 */
Air10.prototype['AIREPARegion'] = undefined;

/**
 * The number of compliance evaluations, under the Clean Air Act, occurring at the facility within the last five years.
 * @member {Number} AIREvalCnt
 */
Air10.prototype['AIREvalCnt'] = undefined;

/**
 * A 5 digit combination of the 2 digit Federal Information Processing Standards (FIPS) code for the state and the 3 digit FIPS code of the county that a facility is located in.
 * @member {String} AIRFIPSCode
 */
Air10.prototype['AIRFIPSCode'] = undefined;

/**
 * A three-character code indicating if plant is government facility. COR - Corporation CNG - County Government DIS - District FDF - Federal Facility (U.S. Government) GOC - GOCO (Gov Owned/Contractor Operated) IND - Individual MXO - Mixed Ownership (e.g., Public/Private) MWD - Municipal or Water District CTG - Municipality NON - Non-Government POF - Privately Owned Facility SDT - School District STF - State Government TRB - Tribal Government UNK - Unknown
 * @member {String} AIRFacilityTypeCode
 */
Air10.prototype['AIRFacilityTypeCode'] = undefined;

/**
 * @member {String} AIRFacilityTypeDesc
 */
Air10.prototype['AIRFacilityTypeDesc'] = undefined;

/**
 * The total number of formal enforcement actions taken against the facility within the last five years.
 * @member {String} AIRFeaCnt
 */
Air10.prototype['AIRFeaCnt'] = undefined;

/**
 * Indicates whether the facility currently has an unresolved High Priority Violation (HPV) under the Clean Air Act.
 * @member {String} AIRHpvStatus
 */
Air10.prototype['AIRHpvStatus'] = undefined;

/**
 * Air Facility System (AFS) ID.
 * @member {String} AIRIDs
 */
Air10.prototype['AIRIDs'] = undefined;

/**
 * The total number of informal enforcement actions taken against the facility within the last five years.
 * @member {String} AIRIeaCnt
 */
Air10.prototype['AIRIeaCnt'] = undefined;

/**
 * Flag indicating whether the AIR facility is located in Indian country.
 * @member {String} AIRIndianCntryFlg
 */
Air10.prototype['AIRIndianCntryFlg'] = undefined;

/**
 * The date on which the most recent Full Compliance Evaluation (FCE) of the facility by EPA or a state agency was completed.
 * @member {String} AIRLastEvalDate
 */
Air10.prototype['AIRLastEvalDate'] = undefined;

/**
 * The last Air Inspection Date performed by EPA.
 * @member {String} AIRLastEvalDateEPA
 */
Air10.prototype['AIRLastEvalDateEPA'] = undefined;

/**
 * The last Air Inspection Date performed by State or local authorities.
 * @member {String} AIRLastEvalDateState
 */
Air10.prototype['AIRLastEvalDateState'] = undefined;

/**
 * The effective date of the most recent listed formal enforcement action taken against the facility.
 * @member {String} AIRLastFeaDate
 */
Air10.prototype['AIRLastFeaDate'] = undefined;

/**
 * The last Air Formal Enforcement Action Date take by EPA.
 * @member {String} AIRLastFeaDateEPA
 */
Air10.prototype['AIRLastFeaDateEPA'] = undefined;

/**
 * The last Air Formal Enforcement Action Date take by State or Local authorities.
 * @member {String} AIRLastFeaDateState
 */
Air10.prototype['AIRLastFeaDateState'] = undefined;

/**
 * The effective date of the most recent listed informal enforcement action taken against the facility.
 * @member {String} AIRLastIeaDate
 */
Air10.prototype['AIRLastIeaDate'] = undefined;

/**
 * The effective date of the most recent listed informal enforcement action taken against the facility by EPA.
 * @member {String} AIRLastIeaDateEPA
 */
Air10.prototype['AIRLastIeaDateEPA'] = undefined;

/**
 * The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.
 * @member {String} AIRLastIeaDateState
 */
Air10.prototype['AIRLastIeaDateState'] = undefined;

/**
 * Indicates the date on which the most recent assessed (or final) penalty was taken against the facility for AIR.
 * @member {String} AIRLastPenaltyDate
 */
Air10.prototype['AIRLastPenaltyDate'] = undefined;

/**
 * The date on which the most recent stack test by EPA occurred.
 * @member {String} AIRLastStckDateEPA
 */
Air10.prototype['AIRLastStckDateEPA'] = undefined;

/**
 * The date on which the most recent stack test by a state agency occurred.
 * @member {String} AIRLastStckDateState
 */
Air10.prototype['AIRLastStckDateState'] = undefined;

/**
 * The date on which the most recent stack test occurred.
 * @member {String} AIRLastStckTestDate
 */
Air10.prototype['AIRLastStckTestDate'] = undefined;

/**
 * The result of the most recent stack test (Pass, Fail, Pending, or Blank).
 * @member {String} AIRLastStckTestResults
 */
Air10.prototype['AIRLastStckTestResults'] = undefined;

/**
 * The date on which the most recent violation was reported.
 * @member {String} AIRLastViolDate
 */
Air10.prototype['AIRLastViolDate'] = undefined;

/**
 * The Maximum Achievable Control Technology (MACT) Subpart associated with the facility.
 * @member {String} AIRMacts
 */
Air10.prototype['AIRMacts'] = undefined;

/**
 * Indicated whether the facility is designated as a major facilitiy.
 * @member {String} AIRMajorFlag
 */
Air10.prototype['AIRMajorFlag'] = undefined;

/**
 * The number of months in the last three years in which the permit or site is considered in High Priority Violation (HPV) status
 * @member {Number} AIRMnthsWithHpv
 */
Air10.prototype['AIRMnthsWithHpv'] = undefined;

/**
 * The facility’s or permit's primary North American Industry Classification System (NAICS) Code.
 * @member {String} AIRNAICS
 */
Air10.prototype['AIRNAICS'] = undefined;

/**
 * The name of the AIR Facility.
 * @member {String} AIRName
 */
Air10.prototype['AIRName'] = undefined;

/**
 * The New Source Performance Standards (NSPS) Subpart associated with the facility.
 * @member {String} AIRNsps
 */
Air10.prototype['AIRNsps'] = undefined;

/**
 * The Non-Major New Source Performance Standards (NSPS) Subpart associated with the facility.
 * @member {String} AIRNspsm
 */
Air10.prototype['AIRNspsm'] = undefined;

/**
 * The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act. This value only includes penalties that have been entered in the national program database, ICIS-Air.
 * @member {String} AIRPenalties
 */
Air10.prototype['AIRPenalties'] = undefined;

/**
 * The names of pollutants or pollutant categories with violations reported in the last year.
 * @member {String} AIRPollRecentViol
 */
Air10.prototype['AIRPollRecentViol'] = undefined;

/**
 * Comma-delimited list of AIR programs.
 * @member {String} AIRPrograms
 */
Air10.prototype['AIRPrograms'] = undefined;

/**
 * The number of quarters in the last three years in which the permit or site is considered in High Priority Violation (HPV) status.
 * @member {Number} AIRQtrsWithHpv
 */
Air10.prototype['AIRQtrsWithHpv'] = undefined;

/**
 * The number of quarters in the last three years in which the permit or site has had unresolved violation(s) reported.
 * @member {Number} AIRQtrsWithViol
 */
Air10.prototype['AIRQtrsWithViol'] = undefined;

/**
 * The number of violations reported in the last year.
 * @member {Number} AIRRecentViolCnt
 */
Air10.prototype['AIRRecentViolCnt'] = undefined;

/**
 * @member {String} AIRStackTest5YrAll
 */
Air10.prototype['AIRStackTest5YrAll'] = undefined;

/**
 * @member {String} AIRStackTest5YrFail
 */
Air10.prototype['AIRStackTest5YrFail'] = undefined;

/**
 * The state where the AIR facility is located.
 * @member {String} AIRState
 */
Air10.prototype['AIRState'] = undefined;

/**
 * The status of the AIR facility location.
 * @member {String} AIRStatus
 */
Air10.prototype['AIRStatus'] = undefined;

/**
 * The street address of the AIR facility location.
 * @member {String} AIRStreet
 */
Air10.prototype['AIRStreet'] = undefined;

/**
 * The EPA Tribal or Native Alaskan Village Identifier for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.
 * @member {String} AIRTRIbalEPAids
 */
Air10.prototype['AIRTRIbalEPAids'] = undefined;

/**
 * The EPA Tribal or Native Alaskan Village Name for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.
 * @member {String} AIRTRIbalNames
 */
Air10.prototype['AIRTRIbalNames'] = undefined;

/**
 * The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable source include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement action, or included on a Compliance Monitoring Strategy plan.
 * @member {String} AIRUniverse
 */
Air10.prototype['AIRUniverse'] = undefined;

/**
 * The five-digit zip code of the AIR facility.
 * @member {String} AIRZip
 */
Air10.prototype['AIRZip'] = undefined;

/**
 * A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.
 * @member {String} ActiveLower48
 */
Air10.prototype['ActiveLower48'] = undefined;

/**
 * A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.
 * @member {String} CWAIDs
 */
Air10.prototype['CWAIDs'] = undefined;

/**
 * Indicates the calculated accuracy in meters for the facilities geospatial coordinate.  Generally, the accuracy is directly linked to the collection method where GPS methods are more accurate that manual methods like map or photo interpolations.
 * @member {Number} CalculatedAccuracyMeters
 */
Air10.prototype['CalculatedAccuracyMeters'] = undefined;

/**
 * Facility identifiers for the Clean Air Markets Division database.
 * @member {String} CamdIDs
 */
Air10.prototype['CamdIDs'] = undefined;

/**
 * A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
 * @member {String} CensusBlockGroup
 */
Air10.prototype['CensusBlockGroup'] = undefined;

/**
 * Displays \"Y\" if the facility is located within the Chesapeake Bay watershed.
 * @member {String} ChesapeakeBayFlag
 */
Air10.prototype['ChesapeakeBayFlag'] = undefined;

/**
 * ??
 * @member {String} CollectionMethod
 */
Air10.prototype['CollectionMethod'] = undefined;

/**
 * Indicates if the facility has a current significant violation. 1 = Yes
 * @member {Number} CurrSvFlag
 */
Air10.prototype['CurrSvFlag'] = undefined;

/**
 * Indicates if the facility has a current violation. 1 = Yes
 * @member {Number} CurrVioFlag
 */
Air10.prototype['CurrVioFlag'] = undefined;

/**
 * The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
 * @member {String} EPASystem
 */
Air10.prototype['EPASystem'] = undefined;

/**
 * Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes
 * @member {Number} Ea5yrFlag
 */
Air10.prototype['Ea5yrFlag'] = undefined;

/**
 * A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.
 * @member {String} EisIDs
 */
Air10.prototype['EisIDs'] = undefined;

/**
 * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
 * @member {String} EjscreenFlag
 */
Air10.prototype['EjscreenFlag'] = undefined;

/**
 * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
 * @member {String} EjscreenFlagUs
 */
Air10.prototype['EjscreenFlagUs'] = undefined;

/**
 * Indicates whether the facility reports to the Clean Air Markets Division (CAMD).
 * @member {String} FacCamdReporter
 */
Air10.prototype['FacCamdReporter'] = undefined;

/**
 * The facility county name from EPA's Facility Registry System
 * @member {String} FacCountyName
 */
Air10.prototype['FacCountyName'] = undefined;

/**
 * The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
 * @member {String} FacDerivedHuc
 */
Air10.prototype['FacDerivedHuc'] = undefined;

/**
 * The tribes or tribal territories located within 25 miles of the facility's location.
 * @member {String} FacDerivedTRIbes
 */
Air10.prototype['FacDerivedTRIbes'] = undefined;

/**
 * The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.
 * @member {String} FacDerivedWBD
 */
Air10.prototype['FacDerivedWBD'] = undefined;

/**
 * The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate
 * @member {String} FacDerivedWBDName
 */
Air10.prototype['FacDerivedWBDName'] = undefined;

/**
 * The amount of hazardous air pollutants released to air in tons per year, as reported in the most recent National Emissions Inventory (NEI).
 * @member {String} FacEisAIRReleases
 */
Air10.prototype['FacEisAIRReleases'] = undefined;

/**
 * Indicates whether the facility reports to the Emissions Inventory System (EIS).
 * @member {String} FacEisReporter
 */
Air10.prototype['FacEisReporter'] = undefined;

/**
 * The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
 * @member {String} FacFIPSCode
 */
Air10.prototype['FacFIPSCode'] = undefined;

/**
 * Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.
 * @member {String} FacFederalAgencyCode
 */
Air10.prototype['FacFederalAgencyCode'] = undefined;

/**
 * Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.
 * @member {String} FacFederalAgencyName
 */
Air10.prototype['FacFederalAgencyName'] = undefined;

/**
 * The annual sum of total release amounts and \"associated quantities\" of all linked Greenhouse Gas IDs from the Office of Air and Radiation \"Summary 2010 Greenhouse Gas Data.\" Units are reported as metric tons of CO2 equivalents per year (MTCO2e/year).
 * @member {String} FacGHGCO2Releases
 */
Air10.prototype['FacGHGCO2Releases'] = undefined;

/**
 * Indicates whether the facility reports to the Greenhouse Gas Reporting Program (GHGRP)
 * @member {String} FacGHGReporter
 */
Air10.prototype['FacGHGReporter'] = undefined;

/**
 * Flag showing Y/N whether the facility is located in Indian Country.
 * @member {String} FacIndianCntryFlg
 */
Air10.prototype['FacIndianCntryFlg'] = undefined;

/**
 * Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.
 * @member {String} FacIndianSpatialFlg
 */
Air10.prototype['FacIndianSpatialFlg'] = undefined;

/**
 * Graphical indicator denoting whether geographical data required to map a facility are available.
 * @member {String} FacMapFlg
 */
Air10.prototype['FacMapFlg'] = undefined;

/**
 * The default map icon image file calculated for the facility by the ECHO program.
 * @member {String} FacMapIcon
 */
Air10.prototype['FacMapIcon'] = undefined;

/**
 * Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.
 * @member {String} FacNaaFlag
 */
Air10.prototype['FacNaaFlag'] = undefined;

/**
 * Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
 * @member {Number} FacPercentMinority
 */
Air10.prototype['FacPercentMinority'] = undefined;

/**
 * The number of persons per square mile in the profiled area.
 * @member {Number} FacPopulationDensity
 */
Air10.prototype['FacPopulationDensity'] = undefined;

/**
 * Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.
 * @member {String} FacSICCodes
 */
Air10.prototype['FacSICCodes'] = undefined;

/**
 * The standardized  facility county name from EPA's Facility Registry System
 * @member {String} FacStdCountyName
 */
Air10.prototype['FacStdCountyName'] = undefined;

/**
 * The total chemical releases to air, in pounds, as reported to TRI by the facility for the most recent reporting year.
 * @member {String} FacTRIAIRReleases
 */
Air10.prototype['FacTRIAIRReleases'] = undefined;

/**
 * The pounds of chemicals considered to be carcinogens released to air, as reported to TRI for the most recent reporting year. Chemicals are classified as carcinogens under the requirements of the Occupational Safety and Health Administration (OSHA).
 * @member {String} FacTRICarcAIRReleases
 */
Air10.prototype['FacTRICarcAIRReleases'] = undefined;

/**
 * The pounds of chemicals classified as hazardous air pollutants (HAPS) released to air in pounds per year, as reported to TRI for the most recent reporting year.
 * @member {String} FacTRIHapsReleases
 */
Air10.prototype['FacTRIHapsReleases'] = undefined;

/**
 * Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
 * @member {String} FacTRIReporter
 */
Air10.prototype['FacTRIReporter'] = undefined;

/**
 * A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
 * @member {String} FacUsMexBorderFlg
 */
Air10.prototype['FacUsMexBorderFlg'] = undefined;

/**
 * A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.
 * @member {String} GHGIDs
 */
Air10.prototype['GHGIDs'] = undefined;

/**
 * ???
 * @member {String} HasPollRpt
 */
Air10.prototype['HasPollRpt'] = undefined;

/**
 * Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.
 * @member {Number} Infea5yrFlag
 */
Air10.prototype['Infea5yrFlag'] = undefined;

/**
 * Indicates if the facility has an inspection within the last 5 years. 1 = Yes
 * @member {Number} Insp5yrFlag
 */
Air10.prototype['Insp5yrFlag'] = undefined;

/**
 * The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA or a state agency was completed.
 * @member {String} LastDatePce
 */
Air10.prototype['LastDatePce'] = undefined;

/**
 * The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA was completed.
 * @member {String} LastDatePceEPA
 */
Air10.prototype['LastDatePceEPA'] = undefined;

/**
 * The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by a state agency was completed.
 * @member {String} LastDatePceSta
 */
Air10.prototype['LastDatePceSta'] = undefined;

/**
 * Code for regions within a state. Search criteria for DFR in OTIS.
 * @member {String} LocalControlRegionCode
 */
Air10.prototype['LocalControlRegionCode'] = undefined;

/**
 * Regions within a state. Search criteria for DFR in OTIS.
 * @member {String} LocalControlRegionName
 */
Air10.prototype['LocalControlRegionName'] = undefined;

/**
 * Flag showing Y/N whether location is within the contiguous (lower 48) United States.
 * @member {String} Lower48
 */
Air10.prototype['Lower48'] = undefined;

/**
 * @member {String} MaintPollutantsNaa
 */
Air10.prototype['MaintPollutantsNaa'] = undefined;

/**
 * @member {String} MaintStandardsNaa
 */
Air10.prototype['MaintStandardsNaa'] = undefined;

/**
 * @member {String} MaintStatusNaa
 */
Air10.prototype['MaintStatusNaa'] = undefined;

/**
 * No Longer Used.
 * @member {String} Map
 */
Air10.prototype['Map'] = undefined;

/**
 * The maximum percentile from all individual EJSCREEN indicators.
 * @member {Number} MaxPctileUs
 */
Air10.prototype['MaxPctileUs'] = undefined;

/**
 * [Col. 121]
 * @member {Number} MaxScore
 */
Air10.prototype['MaxScore'] = undefined;

/**
 * @member {String} NaPollutantsNaa
 */
Air10.prototype['NaPollutantsNaa'] = undefined;

/**
 * @member {String} NaStandardsNaa
 */
Air10.prototype['NaStandardsNaa'] = undefined;

/**
 * @member {String} NaStatusNaa
 */
Air10.prototype['NaStatusNaa'] = undefined;

/**
 * The nonattainment area categories that the facility is in, derived spatially based on the facility's geographic coordinates in FRS.�
 * @member {String} NaaCategories
 */
Air10.prototype['NaaCategories'] = undefined;

/**
 * All criteria pollutants that the facility is in nonattainment for.
 * @member {String} NaaPollutants
 */
Air10.prototype['NaaPollutants'] = undefined;

/**
 * @member {String} OtherPermitIDs
 */
Air10.prototype['OtherPermitIDs'] = undefined;

/**
 * The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.
 * @member {Number} Over80CountUs
 */
Air10.prototype['Over80CountUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
 * @member {Number} PctileCancerUs
 */
Air10.prototype['PctileCancerUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
 * @member {Number} PctileDpmUs
 */
Air10.prototype['PctileDpmUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN ozone indicator.
 * @member {Number} PctileO3Us
 */
Air10.prototype['PctileO3Us'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN Lead paint indicator.
 * @member {Number} PctilePctpre1960Us
 */
Air10.prototype['PctilePctpre1960Us'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN particulate matter indicator.
 * @member {Number} PctilePmUs
 */
Air10.prototype['PctilePmUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
 * @member {Number} PctileProximityNPDESUs
 */
Air10.prototype['PctileProximityNPDESUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
 * @member {Number} PctileProximityNplUs
 */
Air10.prototype['PctileProximityNplUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
 * @member {Number} PctileProximityRmpUs
 */
Air10.prototype['PctileProximityRmpUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
 * @member {Number} PctileProximityTsdfUs
 */
Air10.prototype['PctileProximityTsdfUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
 * @member {Number} PctileRespUs
 */
Air10.prototype['PctileRespUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
 * @member {Number} PctileTrafficScoreUs
 */
Air10.prototype['PctileTrafficScoreUs'] = undefined;

/**
 * A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
 * @member {String} RCRAIDs
 */
Air10.prototype['RCRAIDs'] = undefined;

/**
 * ??
 * @member {String} ReferencePoint
 */
Air10.prototype['ReferencePoint'] = undefined;

/**
 * An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
 * @member {String} RegistryID
 */
Air10.prototype['RegistryID'] = undefined;

/**
 * A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.
 * @member {String} RmpIDs
 */
Air10.prototype['RmpIDs'] = undefined;

/**
 * A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
 * @member {String} SDWAIDs
 */
Air10.prototype['SDWAIDs'] = undefined;

/**
 * @member {Number} Score
 */
Air10.prototype['Score'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceID
 */
Air10.prototype['SourceID'] = undefined;

/**
 * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
 * @member {String} Statute
 */
Air10.prototype['Statute'] = undefined;

/**
 * A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.
 * @member {String} TRIIDs
 */
Air10.prototype['TRIIDs'] = undefined;

/**
 * A value of \"1\" indicates that the facility is within an Indian Tribal or Alaskan Native Village area.
 * @member {Number} TRIbalFlag
 */
Air10.prototype['TRIbalFlag'] = undefined;

/**
 * Indicates if the facility had a violation within the last 3 years. 1 = Yes
 * @member {Number} ViolFlag
 */
Air10.prototype['ViolFlag'] = undefined;

/**
 * Contains flags that identify what web accessible documents are available for the facility.
 * @member {String} WebDocs
 */
Air10.prototype['WebDocs'] = undefined;






export default Air10;

