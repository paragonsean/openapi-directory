# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.air03 import Air03
from openapi_server.models.air04 import Air04
from openapi_server import util


class Air05(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bad_system_ids: str=None, cv_rows: str=None, fea_rows: str=None, facilities: List[Air03]=None, insp_rows: str=None, indian_country_rows: str=None, inf_fea_rows: str=None, map_output: Air04=None, message: str=None, page_no: str=None, query_id: str=None, query_rows: str=None, sv_rows: str=None, total_penalties: str=None, v3_rows: str=None):
        """Air05 - a model defined in OpenAPI

        :param bad_system_ids: The bad_system_ids of this Air05.
        :param cv_rows: The cv_rows of this Air05.
        :param fea_rows: The fea_rows of this Air05.
        :param facilities: The facilities of this Air05.
        :param insp_rows: The insp_rows of this Air05.
        :param indian_country_rows: The indian_country_rows of this Air05.
        :param inf_fea_rows: The inf_fea_rows of this Air05.
        :param map_output: The map_output of this Air05.
        :param message: The message of this Air05.
        :param page_no: The page_no of this Air05.
        :param query_id: The query_id of this Air05.
        :param query_rows: The query_rows of this Air05.
        :param sv_rows: The sv_rows of this Air05.
        :param total_penalties: The total_penalties of this Air05.
        :param v3_rows: The v3_rows of this Air05.
        """
        self.openapi_types = {
            'bad_system_ids': str,
            'cv_rows': str,
            'fea_rows': str,
            'facilities': List[Air03],
            'insp_rows': str,
            'indian_country_rows': str,
            'inf_fea_rows': str,
            'map_output': Air04,
            'message': str,
            'page_no': str,
            'query_id': str,
            'query_rows': str,
            'sv_rows': str,
            'total_penalties': str,
            'v3_rows': str
        }

        self.attribute_map = {
            'bad_system_ids': 'BadSystemIDs',
            'cv_rows': 'CVRows',
            'fea_rows': 'FEARows',
            'facilities': 'Facilities',
            'insp_rows': 'INSPRows',
            'indian_country_rows': 'IndianCountryRows',
            'inf_fea_rows': 'InfFEARows',
            'map_output': 'MapOutput',
            'message': 'Message',
            'page_no': 'PageNo',
            'query_id': 'QueryID',
            'query_rows': 'QueryRows',
            'sv_rows': 'SVRows',
            'total_penalties': 'TotalPenalties',
            'v3_rows': 'V3Rows'
        }

        self._bad_system_ids = bad_system_ids
        self._cv_rows = cv_rows
        self._fea_rows = fea_rows
        self._facilities = facilities
        self._insp_rows = insp_rows
        self._indian_country_rows = indian_country_rows
        self._inf_fea_rows = inf_fea_rows
        self._map_output = map_output
        self._message = message
        self._page_no = page_no
        self._query_id = query_id
        self._query_rows = query_rows
        self._sv_rows = sv_rows
        self._total_penalties = total_penalties
        self._v3_rows = v3_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Air05':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The air05 of this Air05.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bad_system_ids(self):
        """Gets the bad_system_ids of this Air05.

        Identifies which passed query system identifiers are invalid.

        :return: The bad_system_ids of this Air05.
        :rtype: str
        """
        return self._bad_system_ids

    @bad_system_ids.setter
    def bad_system_ids(self, bad_system_ids):
        """Sets the bad_system_ids of this Air05.

        Identifies which passed query system identifiers are invalid.

        :param bad_system_ids: The bad_system_ids of this Air05.
        :type bad_system_ids: str
        """
        if bad_system_ids is None:
            raise ValueError("Invalid value for `bad_system_ids`, must not be `None`")

        self._bad_system_ids = bad_system_ids

    @property
    def cv_rows(self):
        """Gets the cv_rows of this Air05.

        Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.

        :return: The cv_rows of this Air05.
        :rtype: str
        """
        return self._cv_rows

    @cv_rows.setter
    def cv_rows(self, cv_rows):
        """Sets the cv_rows of this Air05.

        Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.

        :param cv_rows: The cv_rows of this Air05.
        :type cv_rows: str
        """
        if cv_rows is None:
            raise ValueError("Invalid value for `cv_rows`, must not be `None`")

        self._cv_rows = cv_rows

    @property
    def fea_rows(self):
        """Gets the fea_rows of this Air05.

        Summary count of the number of facilities with a formal enforcement action in the past five years

        :return: The fea_rows of this Air05.
        :rtype: str
        """
        return self._fea_rows

    @fea_rows.setter
    def fea_rows(self, fea_rows):
        """Sets the fea_rows of this Air05.

        Summary count of the number of facilities with a formal enforcement action in the past five years

        :param fea_rows: The fea_rows of this Air05.
        :type fea_rows: str
        """
        if fea_rows is None:
            raise ValueError("Invalid value for `fea_rows`, must not be `None`")

        self._fea_rows = fea_rows

    @property
    def facilities(self):
        """Gets the facilities of this Air05.

        A complex array of facility information.

        :return: The facilities of this Air05.
        :rtype: List[Air03]
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities):
        """Sets the facilities of this Air05.

        A complex array of facility information.

        :param facilities: The facilities of this Air05.
        :type facilities: List[Air03]
        """

        self._facilities = facilities

    @property
    def insp_rows(self):
        """Gets the insp_rows of this Air05.

        Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)

        :return: The insp_rows of this Air05.
        :rtype: str
        """
        return self._insp_rows

    @insp_rows.setter
    def insp_rows(self, insp_rows):
        """Sets the insp_rows of this Air05.

        Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)

        :param insp_rows: The insp_rows of this Air05.
        :type insp_rows: str
        """
        if insp_rows is None:
            raise ValueError("Invalid value for `insp_rows`, must not be `None`")

        self._insp_rows = insp_rows

    @property
    def indian_country_rows(self):
        """Gets the indian_country_rows of this Air05.

        Number of facilities with tribal_flag populated

        :return: The indian_country_rows of this Air05.
        :rtype: str
        """
        return self._indian_country_rows

    @indian_country_rows.setter
    def indian_country_rows(self, indian_country_rows):
        """Sets the indian_country_rows of this Air05.

        Number of facilities with tribal_flag populated

        :param indian_country_rows: The indian_country_rows of this Air05.
        :type indian_country_rows: str
        """
        if indian_country_rows is None:
            raise ValueError("Invalid value for `indian_country_rows`, must not be `None`")

        self._indian_country_rows = indian_country_rows

    @property
    def inf_fea_rows(self):
        """Gets the inf_fea_rows of this Air05.

        Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)

        :return: The inf_fea_rows of this Air05.
        :rtype: str
        """
        return self._inf_fea_rows

    @inf_fea_rows.setter
    def inf_fea_rows(self, inf_fea_rows):
        """Sets the inf_fea_rows of this Air05.

        Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)

        :param inf_fea_rows: The inf_fea_rows of this Air05.
        :type inf_fea_rows: str
        """
        if inf_fea_rows is None:
            raise ValueError("Invalid value for `inf_fea_rows`, must not be `None`")

        self._inf_fea_rows = inf_fea_rows

    @property
    def map_output(self):
        """Gets the map_output of this Air05.


        :return: The map_output of this Air05.
        :rtype: Air04
        """
        return self._map_output

    @map_output.setter
    def map_output(self, map_output):
        """Sets the map_output of this Air05.


        :param map_output: The map_output of this Air05.
        :type map_output: Air04
        """

        self._map_output = map_output

    @property
    def message(self):
        """Gets the message of this Air05.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Air05.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Air05.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Air05.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def page_no(self):
        """Gets the page_no of this Air05.

        The number of pages of results returned

        :return: The page_no of this Air05.
        :rtype: str
        """
        return self._page_no

    @page_no.setter
    def page_no(self, page_no):
        """Sets the page_no of this Air05.

        The number of pages of results returned

        :param page_no: The page_no of this Air05.
        :type page_no: str
        """
        if page_no is None:
            raise ValueError("Invalid value for `page_no`, must not be `None`")

        self._page_no = page_no

    @property
    def query_id(self):
        """Gets the query_id of this Air05.

        Sequential number assigned to entire search result

        :return: The query_id of this Air05.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this Air05.

        Sequential number assigned to entire search result

        :param query_id: The query_id of this Air05.
        :type query_id: str
        """
        if query_id is None:
            raise ValueError("Invalid value for `query_id`, must not be `None`")

        self._query_id = query_id

    @property
    def query_rows(self):
        """Gets the query_rows of this Air05.

        Number of query results returned

        :return: The query_rows of this Air05.
        :rtype: str
        """
        return self._query_rows

    @query_rows.setter
    def query_rows(self, query_rows):
        """Sets the query_rows of this Air05.

        Number of query results returned

        :param query_rows: The query_rows of this Air05.
        :type query_rows: str
        """
        if query_rows is None:
            raise ValueError("Invalid value for `query_rows`, must not be `None`")

        self._query_rows = query_rows

    @property
    def sv_rows(self):
        """Gets the sv_rows of this Air05.

        Number of facilities with curr_sv_flag populated (CWP_STATUS = \"Significant Violation\")

        :return: The sv_rows of this Air05.
        :rtype: str
        """
        return self._sv_rows

    @sv_rows.setter
    def sv_rows(self, sv_rows):
        """Sets the sv_rows of this Air05.

        Number of facilities with curr_sv_flag populated (CWP_STATUS = \"Significant Violation\")

        :param sv_rows: The sv_rows of this Air05.
        :type sv_rows: str
        """
        if sv_rows is None:
            raise ValueError("Invalid value for `sv_rows`, must not be `None`")

        self._sv_rows = sv_rows

    @property
    def total_penalties(self):
        """Gets the total_penalties of this Air05.

        The total dollar amount of either assessed or final penalties within the five year time period

        :return: The total_penalties of this Air05.
        :rtype: str
        """
        return self._total_penalties

    @total_penalties.setter
    def total_penalties(self, total_penalties):
        """Sets the total_penalties of this Air05.

        The total dollar amount of either assessed or final penalties within the five year time period

        :param total_penalties: The total_penalties of this Air05.
        :type total_penalties: str
        """
        if total_penalties is None:
            raise ValueError("Invalid value for `total_penalties`, must not be `None`")

        self._total_penalties = total_penalties

    @property
    def v3_rows(self):
        """Gets the v3_rows of this Air05.

        Number of facilities having one or more quarters in non-compliance (QNC) in the last three years

        :return: The v3_rows of this Air05.
        :rtype: str
        """
        return self._v3_rows

    @v3_rows.setter
    def v3_rows(self, v3_rows):
        """Sets the v3_rows of this Air05.

        Number of facilities having one or more quarters in non-compliance (QNC) in the last three years

        :param v3_rows: The v3_rows of this Air05.
        :type v3_rows: str
        """
        if v3_rows is None:
            raise ValueError("Invalid value for `v3_rows`, must not be `None`")

        self._v3_rows = v3_rows
