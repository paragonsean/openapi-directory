# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Air03(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, air3yr_compl_qtrs_history: str=None, air_case_ids: str=None, air_city: str=None, air_classification: str=None, air_compl_status: str=None, air_county: str=None, air_days_last_eval: str=None, airepa_region: str=None, air_eval_cnt: str=None, airfips_code: str=None, air_facility_type_code: str=None, air_facility_type_desc: str=None, air_fea_cnt: str=None, air_hpv_status: str=None, airids: str=None, air_iea_cnt: str=None, air_indian_cntry_flg: str=None, air_last_eval_date: str=None, air_last_eval_date_epa: str=None, air_last_eval_date_state: str=None, air_last_fea_date: str=None, air_last_fea_date_epa: str=None, air_last_fea_date_state: str=None, air_last_iea_date: str=None, air_last_iea_date_epa: str=None, air_last_iea_date_state: str=None, air_last_penalty_date: str=None, air_last_stck_date_epa: str=None, air_last_stck_date_state: str=None, air_last_stck_test_date: str=None, air_last_stck_test_results: str=None, air_last_viol_date: str=None, air_macts: str=None, air_major_flag: str=None, air_mnths_with_hpv: str=None, airnaics: str=None, air_name: str=None, air_nsps: str=None, air_nspsm: str=None, air_penalties: str=None, air_poll_recent_viol: str=None, air_programs: str=None, air_qtrs_with_hpv: str=None, air_qtrs_with_viol: str=None, air_recent_viol_cnt: str=None, air_stack_test5_yr_all: str=None, air_stack_test5_yr_fail: str=None, air_state: str=None, air_status: str=None, air_street: str=None, airtr_ibal_ep_aids: str=None, airtr_ibal_names: str=None, air_universe: str=None, air_zip: str=None, active_lower48: str=None, cwaids: str=None, calculated_accuracy_meters: str=None, camd_ids: str=None, census_block_group: str=None, chesapeake_bay_flag: str=None, collection_method: str=None, curr_sv_flag: str=None, curr_vio_flag: str=None, epa_system: str=None, ea5yr_flag: str=None, eis_ids: str=None, ejscreen_flag: str=None, ejscreen_flag_us: str=None, fac_camd_reporter: str=None, fac_county_name: str=None, fac_derived_huc: str=None, fac_derived_tr_ibes: str=None, fac_derived_wbd: str=None, fac_derived_wbd_name: str=None, fac_eis_air_releases: str=None, fac_eis_reporter: str=None, fac_fips_code: str=None, fac_federal_agency_code: str=None, fac_federal_agency_name: str=None, fac_ghgco2_releases: str=None, fac_ghg_reporter: str=None, fac_indian_cntry_flg: str=None, fac_indian_spatial_flg: str=None, fac_lat: str=None, fac_long: str=None, fac_map_flg: str=None, fac_map_icon: str=None, fac_naa_flag: str=None, fac_percent_minority: str=None, fac_population_density: str=None, fac_sic_codes: str=None, fac_std_county_name: str=None, fac_triair_releases: str=None, fac_tri_carc_air_releases: str=None, fac_tri_haps_releases: str=None, fac_tri_reporter: str=None, fac_us_mex_border_flg: str=None, ghgids: str=None, has_poll_rpt: str=None, infea5yr_flag: str=None, insp5yr_flag: str=None, last_date_pce: str=None, last_date_pce_epa: str=None, last_date_pce_sta: str=None, local_control_region_code: str=None, local_control_region_name: str=None, lower48: str=None, maint_pollutants_naa: str=None, maint_standards_naa: str=None, maint_status_naa: str=None, map: str=None, max_pctile_us: str=None, max_score: str=None, na_pollutants_naa: str=None, na_standards_naa: str=None, na_status_naa: str=None, naa_categories: str=None, naa_pollutants: str=None, other_permit_ids: str=None, over80_count_us: str=None, pctile_cancer_us: str=None, pctile_dpm_us: str=None, pctile_o3_us: str=None, pctile_pctpre1960_us: str=None, pctile_pm_us: str=None, pctile_proximity_npdesus: str=None, pctile_proximity_npl_us: str=None, pctile_proximity_rmp_us: str=None, pctile_proximity_tsdf_us: str=None, pctile_resp_us: str=None, pctile_traffic_score_us: str=None, rcraids: str=None, reference_point: str=None, registry_id: str=None, rmp_ids: str=None, sdwaids: str=None, score: str=None, source_id: str=None, statute: str=None, triids: str=None, tr_ibal_flag: str=None, viol_flag: str=None, web_docs: str=None):
        """Air03 - a model defined in OpenAPI

        :param air3yr_compl_qtrs_history: The air3yr_compl_qtrs_history of this Air03.
        :param air_case_ids: The air_case_ids of this Air03.
        :param air_city: The air_city of this Air03.
        :param air_classification: The air_classification of this Air03.
        :param air_compl_status: The air_compl_status of this Air03.
        :param air_county: The air_county of this Air03.
        :param air_days_last_eval: The air_days_last_eval of this Air03.
        :param airepa_region: The airepa_region of this Air03.
        :param air_eval_cnt: The air_eval_cnt of this Air03.
        :param airfips_code: The airfips_code of this Air03.
        :param air_facility_type_code: The air_facility_type_code of this Air03.
        :param air_facility_type_desc: The air_facility_type_desc of this Air03.
        :param air_fea_cnt: The air_fea_cnt of this Air03.
        :param air_hpv_status: The air_hpv_status of this Air03.
        :param airids: The airids of this Air03.
        :param air_iea_cnt: The air_iea_cnt of this Air03.
        :param air_indian_cntry_flg: The air_indian_cntry_flg of this Air03.
        :param air_last_eval_date: The air_last_eval_date of this Air03.
        :param air_last_eval_date_epa: The air_last_eval_date_epa of this Air03.
        :param air_last_eval_date_state: The air_last_eval_date_state of this Air03.
        :param air_last_fea_date: The air_last_fea_date of this Air03.
        :param air_last_fea_date_epa: The air_last_fea_date_epa of this Air03.
        :param air_last_fea_date_state: The air_last_fea_date_state of this Air03.
        :param air_last_iea_date: The air_last_iea_date of this Air03.
        :param air_last_iea_date_epa: The air_last_iea_date_epa of this Air03.
        :param air_last_iea_date_state: The air_last_iea_date_state of this Air03.
        :param air_last_penalty_date: The air_last_penalty_date of this Air03.
        :param air_last_stck_date_epa: The air_last_stck_date_epa of this Air03.
        :param air_last_stck_date_state: The air_last_stck_date_state of this Air03.
        :param air_last_stck_test_date: The air_last_stck_test_date of this Air03.
        :param air_last_stck_test_results: The air_last_stck_test_results of this Air03.
        :param air_last_viol_date: The air_last_viol_date of this Air03.
        :param air_macts: The air_macts of this Air03.
        :param air_major_flag: The air_major_flag of this Air03.
        :param air_mnths_with_hpv: The air_mnths_with_hpv of this Air03.
        :param airnaics: The airnaics of this Air03.
        :param air_name: The air_name of this Air03.
        :param air_nsps: The air_nsps of this Air03.
        :param air_nspsm: The air_nspsm of this Air03.
        :param air_penalties: The air_penalties of this Air03.
        :param air_poll_recent_viol: The air_poll_recent_viol of this Air03.
        :param air_programs: The air_programs of this Air03.
        :param air_qtrs_with_hpv: The air_qtrs_with_hpv of this Air03.
        :param air_qtrs_with_viol: The air_qtrs_with_viol of this Air03.
        :param air_recent_viol_cnt: The air_recent_viol_cnt of this Air03.
        :param air_stack_test5_yr_all: The air_stack_test5_yr_all of this Air03.
        :param air_stack_test5_yr_fail: The air_stack_test5_yr_fail of this Air03.
        :param air_state: The air_state of this Air03.
        :param air_status: The air_status of this Air03.
        :param air_street: The air_street of this Air03.
        :param airtr_ibal_ep_aids: The airtr_ibal_ep_aids of this Air03.
        :param airtr_ibal_names: The airtr_ibal_names of this Air03.
        :param air_universe: The air_universe of this Air03.
        :param air_zip: The air_zip of this Air03.
        :param active_lower48: The active_lower48 of this Air03.
        :param cwaids: The cwaids of this Air03.
        :param calculated_accuracy_meters: The calculated_accuracy_meters of this Air03.
        :param camd_ids: The camd_ids of this Air03.
        :param census_block_group: The census_block_group of this Air03.
        :param chesapeake_bay_flag: The chesapeake_bay_flag of this Air03.
        :param collection_method: The collection_method of this Air03.
        :param curr_sv_flag: The curr_sv_flag of this Air03.
        :param curr_vio_flag: The curr_vio_flag of this Air03.
        :param epa_system: The epa_system of this Air03.
        :param ea5yr_flag: The ea5yr_flag of this Air03.
        :param eis_ids: The eis_ids of this Air03.
        :param ejscreen_flag: The ejscreen_flag of this Air03.
        :param ejscreen_flag_us: The ejscreen_flag_us of this Air03.
        :param fac_camd_reporter: The fac_camd_reporter of this Air03.
        :param fac_county_name: The fac_county_name of this Air03.
        :param fac_derived_huc: The fac_derived_huc of this Air03.
        :param fac_derived_tr_ibes: The fac_derived_tr_ibes of this Air03.
        :param fac_derived_wbd: The fac_derived_wbd of this Air03.
        :param fac_derived_wbd_name: The fac_derived_wbd_name of this Air03.
        :param fac_eis_air_releases: The fac_eis_air_releases of this Air03.
        :param fac_eis_reporter: The fac_eis_reporter of this Air03.
        :param fac_fips_code: The fac_fips_code of this Air03.
        :param fac_federal_agency_code: The fac_federal_agency_code of this Air03.
        :param fac_federal_agency_name: The fac_federal_agency_name of this Air03.
        :param fac_ghgco2_releases: The fac_ghgco2_releases of this Air03.
        :param fac_ghg_reporter: The fac_ghg_reporter of this Air03.
        :param fac_indian_cntry_flg: The fac_indian_cntry_flg of this Air03.
        :param fac_indian_spatial_flg: The fac_indian_spatial_flg of this Air03.
        :param fac_lat: The fac_lat of this Air03.
        :param fac_long: The fac_long of this Air03.
        :param fac_map_flg: The fac_map_flg of this Air03.
        :param fac_map_icon: The fac_map_icon of this Air03.
        :param fac_naa_flag: The fac_naa_flag of this Air03.
        :param fac_percent_minority: The fac_percent_minority of this Air03.
        :param fac_population_density: The fac_population_density of this Air03.
        :param fac_sic_codes: The fac_sic_codes of this Air03.
        :param fac_std_county_name: The fac_std_county_name of this Air03.
        :param fac_triair_releases: The fac_triair_releases of this Air03.
        :param fac_tri_carc_air_releases: The fac_tri_carc_air_releases of this Air03.
        :param fac_tri_haps_releases: The fac_tri_haps_releases of this Air03.
        :param fac_tri_reporter: The fac_tri_reporter of this Air03.
        :param fac_us_mex_border_flg: The fac_us_mex_border_flg of this Air03.
        :param ghgids: The ghgids of this Air03.
        :param has_poll_rpt: The has_poll_rpt of this Air03.
        :param infea5yr_flag: The infea5yr_flag of this Air03.
        :param insp5yr_flag: The insp5yr_flag of this Air03.
        :param last_date_pce: The last_date_pce of this Air03.
        :param last_date_pce_epa: The last_date_pce_epa of this Air03.
        :param last_date_pce_sta: The last_date_pce_sta of this Air03.
        :param local_control_region_code: The local_control_region_code of this Air03.
        :param local_control_region_name: The local_control_region_name of this Air03.
        :param lower48: The lower48 of this Air03.
        :param maint_pollutants_naa: The maint_pollutants_naa of this Air03.
        :param maint_standards_naa: The maint_standards_naa of this Air03.
        :param maint_status_naa: The maint_status_naa of this Air03.
        :param map: The map of this Air03.
        :param max_pctile_us: The max_pctile_us of this Air03.
        :param max_score: The max_score of this Air03.
        :param na_pollutants_naa: The na_pollutants_naa of this Air03.
        :param na_standards_naa: The na_standards_naa of this Air03.
        :param na_status_naa: The na_status_naa of this Air03.
        :param naa_categories: The naa_categories of this Air03.
        :param naa_pollutants: The naa_pollutants of this Air03.
        :param other_permit_ids: The other_permit_ids of this Air03.
        :param over80_count_us: The over80_count_us of this Air03.
        :param pctile_cancer_us: The pctile_cancer_us of this Air03.
        :param pctile_dpm_us: The pctile_dpm_us of this Air03.
        :param pctile_o3_us: The pctile_o3_us of this Air03.
        :param pctile_pctpre1960_us: The pctile_pctpre1960_us of this Air03.
        :param pctile_pm_us: The pctile_pm_us of this Air03.
        :param pctile_proximity_npdesus: The pctile_proximity_npdesus of this Air03.
        :param pctile_proximity_npl_us: The pctile_proximity_npl_us of this Air03.
        :param pctile_proximity_rmp_us: The pctile_proximity_rmp_us of this Air03.
        :param pctile_proximity_tsdf_us: The pctile_proximity_tsdf_us of this Air03.
        :param pctile_resp_us: The pctile_resp_us of this Air03.
        :param pctile_traffic_score_us: The pctile_traffic_score_us of this Air03.
        :param rcraids: The rcraids of this Air03.
        :param reference_point: The reference_point of this Air03.
        :param registry_id: The registry_id of this Air03.
        :param rmp_ids: The rmp_ids of this Air03.
        :param sdwaids: The sdwaids of this Air03.
        :param score: The score of this Air03.
        :param source_id: The source_id of this Air03.
        :param statute: The statute of this Air03.
        :param triids: The triids of this Air03.
        :param tr_ibal_flag: The tr_ibal_flag of this Air03.
        :param viol_flag: The viol_flag of this Air03.
        :param web_docs: The web_docs of this Air03.
        """
        self.openapi_types = {
            'air3yr_compl_qtrs_history': str,
            'air_case_ids': str,
            'air_city': str,
            'air_classification': str,
            'air_compl_status': str,
            'air_county': str,
            'air_days_last_eval': str,
            'airepa_region': str,
            'air_eval_cnt': str,
            'airfips_code': str,
            'air_facility_type_code': str,
            'air_facility_type_desc': str,
            'air_fea_cnt': str,
            'air_hpv_status': str,
            'airids': str,
            'air_iea_cnt': str,
            'air_indian_cntry_flg': str,
            'air_last_eval_date': str,
            'air_last_eval_date_epa': str,
            'air_last_eval_date_state': str,
            'air_last_fea_date': str,
            'air_last_fea_date_epa': str,
            'air_last_fea_date_state': str,
            'air_last_iea_date': str,
            'air_last_iea_date_epa': str,
            'air_last_iea_date_state': str,
            'air_last_penalty_date': str,
            'air_last_stck_date_epa': str,
            'air_last_stck_date_state': str,
            'air_last_stck_test_date': str,
            'air_last_stck_test_results': str,
            'air_last_viol_date': str,
            'air_macts': str,
            'air_major_flag': str,
            'air_mnths_with_hpv': str,
            'airnaics': str,
            'air_name': str,
            'air_nsps': str,
            'air_nspsm': str,
            'air_penalties': str,
            'air_poll_recent_viol': str,
            'air_programs': str,
            'air_qtrs_with_hpv': str,
            'air_qtrs_with_viol': str,
            'air_recent_viol_cnt': str,
            'air_stack_test5_yr_all': str,
            'air_stack_test5_yr_fail': str,
            'air_state': str,
            'air_status': str,
            'air_street': str,
            'airtr_ibal_ep_aids': str,
            'airtr_ibal_names': str,
            'air_universe': str,
            'air_zip': str,
            'active_lower48': str,
            'cwaids': str,
            'calculated_accuracy_meters': str,
            'camd_ids': str,
            'census_block_group': str,
            'chesapeake_bay_flag': str,
            'collection_method': str,
            'curr_sv_flag': str,
            'curr_vio_flag': str,
            'epa_system': str,
            'ea5yr_flag': str,
            'eis_ids': str,
            'ejscreen_flag': str,
            'ejscreen_flag_us': str,
            'fac_camd_reporter': str,
            'fac_county_name': str,
            'fac_derived_huc': str,
            'fac_derived_tr_ibes': str,
            'fac_derived_wbd': str,
            'fac_derived_wbd_name': str,
            'fac_eis_air_releases': str,
            'fac_eis_reporter': str,
            'fac_fips_code': str,
            'fac_federal_agency_code': str,
            'fac_federal_agency_name': str,
            'fac_ghgco2_releases': str,
            'fac_ghg_reporter': str,
            'fac_indian_cntry_flg': str,
            'fac_indian_spatial_flg': str,
            'fac_lat': str,
            'fac_long': str,
            'fac_map_flg': str,
            'fac_map_icon': str,
            'fac_naa_flag': str,
            'fac_percent_minority': str,
            'fac_population_density': str,
            'fac_sic_codes': str,
            'fac_std_county_name': str,
            'fac_triair_releases': str,
            'fac_tri_carc_air_releases': str,
            'fac_tri_haps_releases': str,
            'fac_tri_reporter': str,
            'fac_us_mex_border_flg': str,
            'ghgids': str,
            'has_poll_rpt': str,
            'infea5yr_flag': str,
            'insp5yr_flag': str,
            'last_date_pce': str,
            'last_date_pce_epa': str,
            'last_date_pce_sta': str,
            'local_control_region_code': str,
            'local_control_region_name': str,
            'lower48': str,
            'maint_pollutants_naa': str,
            'maint_standards_naa': str,
            'maint_status_naa': str,
            'map': str,
            'max_pctile_us': str,
            'max_score': str,
            'na_pollutants_naa': str,
            'na_standards_naa': str,
            'na_status_naa': str,
            'naa_categories': str,
            'naa_pollutants': str,
            'other_permit_ids': str,
            'over80_count_us': str,
            'pctile_cancer_us': str,
            'pctile_dpm_us': str,
            'pctile_o3_us': str,
            'pctile_pctpre1960_us': str,
            'pctile_pm_us': str,
            'pctile_proximity_npdesus': str,
            'pctile_proximity_npl_us': str,
            'pctile_proximity_rmp_us': str,
            'pctile_proximity_tsdf_us': str,
            'pctile_resp_us': str,
            'pctile_traffic_score_us': str,
            'rcraids': str,
            'reference_point': str,
            'registry_id': str,
            'rmp_ids': str,
            'sdwaids': str,
            'score': str,
            'source_id': str,
            'statute': str,
            'triids': str,
            'tr_ibal_flag': str,
            'viol_flag': str,
            'web_docs': str
        }

        self.attribute_map = {
            'air3yr_compl_qtrs_history': 'AIR3yrComplQtrsHistory',
            'air_case_ids': 'AIRCaseIDs',
            'air_city': 'AIRCity',
            'air_classification': 'AIRClassification',
            'air_compl_status': 'AIRComplStatus',
            'air_county': 'AIRCounty',
            'air_days_last_eval': 'AIRDaysLastEval',
            'airepa_region': 'AIREPARegion',
            'air_eval_cnt': 'AIREvalCnt',
            'airfips_code': 'AIRFIPSCode',
            'air_facility_type_code': 'AIRFacilityTypeCode',
            'air_facility_type_desc': 'AIRFacilityTypeDesc',
            'air_fea_cnt': 'AIRFeaCnt',
            'air_hpv_status': 'AIRHpvStatus',
            'airids': 'AIRIDs',
            'air_iea_cnt': 'AIRIeaCnt',
            'air_indian_cntry_flg': 'AIRIndianCntryFlg',
            'air_last_eval_date': 'AIRLastEvalDate',
            'air_last_eval_date_epa': 'AIRLastEvalDateEPA',
            'air_last_eval_date_state': 'AIRLastEvalDateState',
            'air_last_fea_date': 'AIRLastFeaDate',
            'air_last_fea_date_epa': 'AIRLastFeaDateEPA',
            'air_last_fea_date_state': 'AIRLastFeaDateState',
            'air_last_iea_date': 'AIRLastIeaDate',
            'air_last_iea_date_epa': 'AIRLastIeaDateEPA',
            'air_last_iea_date_state': 'AIRLastIeaDateState',
            'air_last_penalty_date': 'AIRLastPenaltyDate',
            'air_last_stck_date_epa': 'AIRLastStckDateEPA',
            'air_last_stck_date_state': 'AIRLastStckDateState',
            'air_last_stck_test_date': 'AIRLastStckTestDate',
            'air_last_stck_test_results': 'AIRLastStckTestResults',
            'air_last_viol_date': 'AIRLastViolDate',
            'air_macts': 'AIRMacts',
            'air_major_flag': 'AIRMajorFlag',
            'air_mnths_with_hpv': 'AIRMnthsWithHpv',
            'airnaics': 'AIRNAICS',
            'air_name': 'AIRName',
            'air_nsps': 'AIRNsps',
            'air_nspsm': 'AIRNspsm',
            'air_penalties': 'AIRPenalties',
            'air_poll_recent_viol': 'AIRPollRecentViol',
            'air_programs': 'AIRPrograms',
            'air_qtrs_with_hpv': 'AIRQtrsWithHpv',
            'air_qtrs_with_viol': 'AIRQtrsWithViol',
            'air_recent_viol_cnt': 'AIRRecentViolCnt',
            'air_stack_test5_yr_all': 'AIRStackTest5YrAll',
            'air_stack_test5_yr_fail': 'AIRStackTest5YrFail',
            'air_state': 'AIRState',
            'air_status': 'AIRStatus',
            'air_street': 'AIRStreet',
            'airtr_ibal_ep_aids': 'AIRTRIbalEPAids',
            'airtr_ibal_names': 'AIRTRIbalNames',
            'air_universe': 'AIRUniverse',
            'air_zip': 'AIRZip',
            'active_lower48': 'ActiveLower48',
            'cwaids': 'CWAIDs',
            'calculated_accuracy_meters': 'CalculatedAccuracyMeters',
            'camd_ids': 'CamdIDs',
            'census_block_group': 'CensusBlockGroup',
            'chesapeake_bay_flag': 'ChesapeakeBayFlag',
            'collection_method': 'CollectionMethod',
            'curr_sv_flag': 'CurrSvFlag',
            'curr_vio_flag': 'CurrVioFlag',
            'epa_system': 'EPASystem',
            'ea5yr_flag': 'Ea5yrFlag',
            'eis_ids': 'EisIDs',
            'ejscreen_flag': 'EjscreenFlag',
            'ejscreen_flag_us': 'EjscreenFlagUs',
            'fac_camd_reporter': 'FacCamdReporter',
            'fac_county_name': 'FacCountyName',
            'fac_derived_huc': 'FacDerivedHuc',
            'fac_derived_tr_ibes': 'FacDerivedTRIbes',
            'fac_derived_wbd': 'FacDerivedWBD',
            'fac_derived_wbd_name': 'FacDerivedWBDName',
            'fac_eis_air_releases': 'FacEisAIRReleases',
            'fac_eis_reporter': 'FacEisReporter',
            'fac_fips_code': 'FacFIPSCode',
            'fac_federal_agency_code': 'FacFederalAgencyCode',
            'fac_federal_agency_name': 'FacFederalAgencyName',
            'fac_ghgco2_releases': 'FacGHGCO2Releases',
            'fac_ghg_reporter': 'FacGHGReporter',
            'fac_indian_cntry_flg': 'FacIndianCntryFlg',
            'fac_indian_spatial_flg': 'FacIndianSpatialFlg',
            'fac_lat': 'FacLat',
            'fac_long': 'FacLong',
            'fac_map_flg': 'FacMapFlg',
            'fac_map_icon': 'FacMapIcon',
            'fac_naa_flag': 'FacNaaFlag',
            'fac_percent_minority': 'FacPercentMinority',
            'fac_population_density': 'FacPopulationDensity',
            'fac_sic_codes': 'FacSICCodes',
            'fac_std_county_name': 'FacStdCountyName',
            'fac_triair_releases': 'FacTRIAIRReleases',
            'fac_tri_carc_air_releases': 'FacTRICarcAIRReleases',
            'fac_tri_haps_releases': 'FacTRIHapsReleases',
            'fac_tri_reporter': 'FacTRIReporter',
            'fac_us_mex_border_flg': 'FacUsMexBorderFlg',
            'ghgids': 'GHGIDs',
            'has_poll_rpt': 'HasPollRpt',
            'infea5yr_flag': 'Infea5yrFlag',
            'insp5yr_flag': 'Insp5yrFlag',
            'last_date_pce': 'LastDatePce',
            'last_date_pce_epa': 'LastDatePceEPA',
            'last_date_pce_sta': 'LastDatePceSta',
            'local_control_region_code': 'LocalControlRegionCode',
            'local_control_region_name': 'LocalControlRegionName',
            'lower48': 'Lower48',
            'maint_pollutants_naa': 'MaintPollutantsNaa',
            'maint_standards_naa': 'MaintStandardsNaa',
            'maint_status_naa': 'MaintStatusNaa',
            'map': 'Map',
            'max_pctile_us': 'MaxPctileUs',
            'max_score': 'MaxScore',
            'na_pollutants_naa': 'NaPollutantsNaa',
            'na_standards_naa': 'NaStandardsNaa',
            'na_status_naa': 'NaStatusNaa',
            'naa_categories': 'NaaCategories',
            'naa_pollutants': 'NaaPollutants',
            'other_permit_ids': 'OtherPermitIDs',
            'over80_count_us': 'Over80CountUs',
            'pctile_cancer_us': 'PctileCancerUs',
            'pctile_dpm_us': 'PctileDpmUs',
            'pctile_o3_us': 'PctileO3Us',
            'pctile_pctpre1960_us': 'PctilePctpre1960Us',
            'pctile_pm_us': 'PctilePmUs',
            'pctile_proximity_npdesus': 'PctileProximityNPDESUs',
            'pctile_proximity_npl_us': 'PctileProximityNplUs',
            'pctile_proximity_rmp_us': 'PctileProximityRmpUs',
            'pctile_proximity_tsdf_us': 'PctileProximityTsdfUs',
            'pctile_resp_us': 'PctileRespUs',
            'pctile_traffic_score_us': 'PctileTrafficScoreUs',
            'rcraids': 'RCRAIDs',
            'reference_point': 'ReferencePoint',
            'registry_id': 'RegistryID',
            'rmp_ids': 'RmpIDs',
            'sdwaids': 'SDWAIDs',
            'score': 'Score',
            'source_id': 'SourceID',
            'statute': 'Statute',
            'triids': 'TRIIDs',
            'tr_ibal_flag': 'TRIbalFlag',
            'viol_flag': 'ViolFlag',
            'web_docs': 'WebDocs'
        }

        self._air3yr_compl_qtrs_history = air3yr_compl_qtrs_history
        self._air_case_ids = air_case_ids
        self._air_city = air_city
        self._air_classification = air_classification
        self._air_compl_status = air_compl_status
        self._air_county = air_county
        self._air_days_last_eval = air_days_last_eval
        self._airepa_region = airepa_region
        self._air_eval_cnt = air_eval_cnt
        self._airfips_code = airfips_code
        self._air_facility_type_code = air_facility_type_code
        self._air_facility_type_desc = air_facility_type_desc
        self._air_fea_cnt = air_fea_cnt
        self._air_hpv_status = air_hpv_status
        self._airids = airids
        self._air_iea_cnt = air_iea_cnt
        self._air_indian_cntry_flg = air_indian_cntry_flg
        self._air_last_eval_date = air_last_eval_date
        self._air_last_eval_date_epa = air_last_eval_date_epa
        self._air_last_eval_date_state = air_last_eval_date_state
        self._air_last_fea_date = air_last_fea_date
        self._air_last_fea_date_epa = air_last_fea_date_epa
        self._air_last_fea_date_state = air_last_fea_date_state
        self._air_last_iea_date = air_last_iea_date
        self._air_last_iea_date_epa = air_last_iea_date_epa
        self._air_last_iea_date_state = air_last_iea_date_state
        self._air_last_penalty_date = air_last_penalty_date
        self._air_last_stck_date_epa = air_last_stck_date_epa
        self._air_last_stck_date_state = air_last_stck_date_state
        self._air_last_stck_test_date = air_last_stck_test_date
        self._air_last_stck_test_results = air_last_stck_test_results
        self._air_last_viol_date = air_last_viol_date
        self._air_macts = air_macts
        self._air_major_flag = air_major_flag
        self._air_mnths_with_hpv = air_mnths_with_hpv
        self._airnaics = airnaics
        self._air_name = air_name
        self._air_nsps = air_nsps
        self._air_nspsm = air_nspsm
        self._air_penalties = air_penalties
        self._air_poll_recent_viol = air_poll_recent_viol
        self._air_programs = air_programs
        self._air_qtrs_with_hpv = air_qtrs_with_hpv
        self._air_qtrs_with_viol = air_qtrs_with_viol
        self._air_recent_viol_cnt = air_recent_viol_cnt
        self._air_stack_test5_yr_all = air_stack_test5_yr_all
        self._air_stack_test5_yr_fail = air_stack_test5_yr_fail
        self._air_state = air_state
        self._air_status = air_status
        self._air_street = air_street
        self._airtr_ibal_ep_aids = airtr_ibal_ep_aids
        self._airtr_ibal_names = airtr_ibal_names
        self._air_universe = air_universe
        self._air_zip = air_zip
        self._active_lower48 = active_lower48
        self._cwaids = cwaids
        self._calculated_accuracy_meters = calculated_accuracy_meters
        self._camd_ids = camd_ids
        self._census_block_group = census_block_group
        self._chesapeake_bay_flag = chesapeake_bay_flag
        self._collection_method = collection_method
        self._curr_sv_flag = curr_sv_flag
        self._curr_vio_flag = curr_vio_flag
        self._epa_system = epa_system
        self._ea5yr_flag = ea5yr_flag
        self._eis_ids = eis_ids
        self._ejscreen_flag = ejscreen_flag
        self._ejscreen_flag_us = ejscreen_flag_us
        self._fac_camd_reporter = fac_camd_reporter
        self._fac_county_name = fac_county_name
        self._fac_derived_huc = fac_derived_huc
        self._fac_derived_tr_ibes = fac_derived_tr_ibes
        self._fac_derived_wbd = fac_derived_wbd
        self._fac_derived_wbd_name = fac_derived_wbd_name
        self._fac_eis_air_releases = fac_eis_air_releases
        self._fac_eis_reporter = fac_eis_reporter
        self._fac_fips_code = fac_fips_code
        self._fac_federal_agency_code = fac_federal_agency_code
        self._fac_federal_agency_name = fac_federal_agency_name
        self._fac_ghgco2_releases = fac_ghgco2_releases
        self._fac_ghg_reporter = fac_ghg_reporter
        self._fac_indian_cntry_flg = fac_indian_cntry_flg
        self._fac_indian_spatial_flg = fac_indian_spatial_flg
        self._fac_lat = fac_lat
        self._fac_long = fac_long
        self._fac_map_flg = fac_map_flg
        self._fac_map_icon = fac_map_icon
        self._fac_naa_flag = fac_naa_flag
        self._fac_percent_minority = fac_percent_minority
        self._fac_population_density = fac_population_density
        self._fac_sic_codes = fac_sic_codes
        self._fac_std_county_name = fac_std_county_name
        self._fac_triair_releases = fac_triair_releases
        self._fac_tri_carc_air_releases = fac_tri_carc_air_releases
        self._fac_tri_haps_releases = fac_tri_haps_releases
        self._fac_tri_reporter = fac_tri_reporter
        self._fac_us_mex_border_flg = fac_us_mex_border_flg
        self._ghgids = ghgids
        self._has_poll_rpt = has_poll_rpt
        self._infea5yr_flag = infea5yr_flag
        self._insp5yr_flag = insp5yr_flag
        self._last_date_pce = last_date_pce
        self._last_date_pce_epa = last_date_pce_epa
        self._last_date_pce_sta = last_date_pce_sta
        self._local_control_region_code = local_control_region_code
        self._local_control_region_name = local_control_region_name
        self._lower48 = lower48
        self._maint_pollutants_naa = maint_pollutants_naa
        self._maint_standards_naa = maint_standards_naa
        self._maint_status_naa = maint_status_naa
        self._map = map
        self._max_pctile_us = max_pctile_us
        self._max_score = max_score
        self._na_pollutants_naa = na_pollutants_naa
        self._na_standards_naa = na_standards_naa
        self._na_status_naa = na_status_naa
        self._naa_categories = naa_categories
        self._naa_pollutants = naa_pollutants
        self._other_permit_ids = other_permit_ids
        self._over80_count_us = over80_count_us
        self._pctile_cancer_us = pctile_cancer_us
        self._pctile_dpm_us = pctile_dpm_us
        self._pctile_o3_us = pctile_o3_us
        self._pctile_pctpre1960_us = pctile_pctpre1960_us
        self._pctile_pm_us = pctile_pm_us
        self._pctile_proximity_npdesus = pctile_proximity_npdesus
        self._pctile_proximity_npl_us = pctile_proximity_npl_us
        self._pctile_proximity_rmp_us = pctile_proximity_rmp_us
        self._pctile_proximity_tsdf_us = pctile_proximity_tsdf_us
        self._pctile_resp_us = pctile_resp_us
        self._pctile_traffic_score_us = pctile_traffic_score_us
        self._rcraids = rcraids
        self._reference_point = reference_point
        self._registry_id = registry_id
        self._rmp_ids = rmp_ids
        self._sdwaids = sdwaids
        self._score = score
        self._source_id = source_id
        self._statute = statute
        self._triids = triids
        self._tr_ibal_flag = tr_ibal_flag
        self._viol_flag = viol_flag
        self._web_docs = web_docs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Air03':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The air03 of this Air03.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def air3yr_compl_qtrs_history(self):
        """Gets the air3yr_compl_qtrs_history of this Air03.

        The facility's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined

        :return: The air3yr_compl_qtrs_history of this Air03.
        :rtype: str
        """
        return self._air3yr_compl_qtrs_history

    @air3yr_compl_qtrs_history.setter
    def air3yr_compl_qtrs_history(self, air3yr_compl_qtrs_history):
        """Sets the air3yr_compl_qtrs_history of this Air03.

        The facility's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined

        :param air3yr_compl_qtrs_history: The air3yr_compl_qtrs_history of this Air03.
        :type air3yr_compl_qtrs_history: str
        """
        if air3yr_compl_qtrs_history is None:
            raise ValueError("Invalid value for `air3yr_compl_qtrs_history`, must not be `None`")

        self._air3yr_compl_qtrs_history = air3yr_compl_qtrs_history

    @property
    def air_case_ids(self):
        """Gets the air_case_ids of this Air03.

        Space-delimited list of AIR cases associated with the facility.

        :return: The air_case_ids of this Air03.
        :rtype: str
        """
        return self._air_case_ids

    @air_case_ids.setter
    def air_case_ids(self, air_case_ids):
        """Sets the air_case_ids of this Air03.

        Space-delimited list of AIR cases associated with the facility.

        :param air_case_ids: The air_case_ids of this Air03.
        :type air_case_ids: str
        """
        if air_case_ids is None:
            raise ValueError("Invalid value for `air_case_ids`, must not be `None`")

        self._air_case_ids = air_case_ids

    @property
    def air_city(self):
        """Gets the air_city of this Air03.

        The city where the AIR facility is located.

        :return: The air_city of this Air03.
        :rtype: str
        """
        return self._air_city

    @air_city.setter
    def air_city(self, air_city):
        """Sets the air_city of this Air03.

        The city where the AIR facility is located.

        :param air_city: The air_city of this Air03.
        :type air_city: str
        """
        if air_city is None:
            raise ValueError("Invalid value for `air_city`, must not be `None`")

        self._air_city = air_city

    @property
    def air_classification(self):
        """Gets the air_classification of this Air03.


        :return: The air_classification of this Air03.
        :rtype: str
        """
        return self._air_classification

    @air_classification.setter
    def air_classification(self, air_classification):
        """Sets the air_classification of this Air03.


        :param air_classification: The air_classification of this Air03.
        :type air_classification: str
        """
        if air_classification is None:
            raise ValueError("Invalid value for `air_classification`, must not be `None`")

        self._air_classification = air_classification

    @property
    def air_compl_status(self):
        """Gets the air_compl_status of this Air03.

        The facility's recent violation status under the Clean Air Act.

        :return: The air_compl_status of this Air03.
        :rtype: str
        """
        return self._air_compl_status

    @air_compl_status.setter
    def air_compl_status(self, air_compl_status):
        """Sets the air_compl_status of this Air03.

        The facility's recent violation status under the Clean Air Act.

        :param air_compl_status: The air_compl_status of this Air03.
        :type air_compl_status: str
        """
        if air_compl_status is None:
            raise ValueError("Invalid value for `air_compl_status`, must not be `None`")

        self._air_compl_status = air_compl_status

    @property
    def air_county(self):
        """Gets the air_county of this Air03.

        The name of the county where the AIR facility is located.

        :return: The air_county of this Air03.
        :rtype: str
        """
        return self._air_county

    @air_county.setter
    def air_county(self, air_county):
        """Sets the air_county of this Air03.

        The name of the county where the AIR facility is located.

        :param air_county: The air_county of this Air03.
        :type air_county: str
        """
        if air_county is None:
            raise ValueError("Invalid value for `air_county`, must not be `None`")

        self._air_county = air_county

    @property
    def air_days_last_eval(self):
        """Gets the air_days_last_eval of this Air03.

        The number of days since the most recent compliance evaluation of the facility.

        :return: The air_days_last_eval of this Air03.
        :rtype: str
        """
        return self._air_days_last_eval

    @air_days_last_eval.setter
    def air_days_last_eval(self, air_days_last_eval):
        """Sets the air_days_last_eval of this Air03.

        The number of days since the most recent compliance evaluation of the facility.

        :param air_days_last_eval: The air_days_last_eval of this Air03.
        :type air_days_last_eval: str
        """
        if air_days_last_eval is None:
            raise ValueError("Invalid value for `air_days_last_eval`, must not be `None`")

        self._air_days_last_eval = air_days_last_eval

    @property
    def airepa_region(self):
        """Gets the airepa_region of this Air03.

        The EPA region where the AIR facility is located.

        :return: The airepa_region of this Air03.
        :rtype: str
        """
        return self._airepa_region

    @airepa_region.setter
    def airepa_region(self, airepa_region):
        """Sets the airepa_region of this Air03.

        The EPA region where the AIR facility is located.

        :param airepa_region: The airepa_region of this Air03.
        :type airepa_region: str
        """
        if airepa_region is None:
            raise ValueError("Invalid value for `airepa_region`, must not be `None`")

        self._airepa_region = airepa_region

    @property
    def air_eval_cnt(self):
        """Gets the air_eval_cnt of this Air03.

        The number of compliance evaluations, under the Clean Air Act, occurring at the facility within the last five years.

        :return: The air_eval_cnt of this Air03.
        :rtype: str
        """
        return self._air_eval_cnt

    @air_eval_cnt.setter
    def air_eval_cnt(self, air_eval_cnt):
        """Sets the air_eval_cnt of this Air03.

        The number of compliance evaluations, under the Clean Air Act, occurring at the facility within the last five years.

        :param air_eval_cnt: The air_eval_cnt of this Air03.
        :type air_eval_cnt: str
        """
        if air_eval_cnt is None:
            raise ValueError("Invalid value for `air_eval_cnt`, must not be `None`")

        self._air_eval_cnt = air_eval_cnt

    @property
    def airfips_code(self):
        """Gets the airfips_code of this Air03.

        A 5 digit combination of the 2 digit Federal Information Processing Standards (FIPS) code for the state and the 3 digit FIPS code of the county that a facility is located in.

        :return: The airfips_code of this Air03.
        :rtype: str
        """
        return self._airfips_code

    @airfips_code.setter
    def airfips_code(self, airfips_code):
        """Sets the airfips_code of this Air03.

        A 5 digit combination of the 2 digit Federal Information Processing Standards (FIPS) code for the state and the 3 digit FIPS code of the county that a facility is located in.

        :param airfips_code: The airfips_code of this Air03.
        :type airfips_code: str
        """
        if airfips_code is None:
            raise ValueError("Invalid value for `airfips_code`, must not be `None`")

        self._airfips_code = airfips_code

    @property
    def air_facility_type_code(self):
        """Gets the air_facility_type_code of this Air03.

        A three-character code indicating if plant is government facility. COR - Corporation CNG - County Government DIS - District FDF - Federal Facility (U.S. Government) GOC - GOCO (Gov Owned/Contractor Operated) IND - Individual MXO - Mixed Ownership (e.g., Public/Private) MWD - Municipal or Water District CTG - Municipality NON - Non-Government POF - Privately Owned Facility SDT - School District STF - State Government TRB - Tribal Government UNK - Unknown

        :return: The air_facility_type_code of this Air03.
        :rtype: str
        """
        return self._air_facility_type_code

    @air_facility_type_code.setter
    def air_facility_type_code(self, air_facility_type_code):
        """Sets the air_facility_type_code of this Air03.

        A three-character code indicating if plant is government facility. COR - Corporation CNG - County Government DIS - District FDF - Federal Facility (U.S. Government) GOC - GOCO (Gov Owned/Contractor Operated) IND - Individual MXO - Mixed Ownership (e.g., Public/Private) MWD - Municipal or Water District CTG - Municipality NON - Non-Government POF - Privately Owned Facility SDT - School District STF - State Government TRB - Tribal Government UNK - Unknown

        :param air_facility_type_code: The air_facility_type_code of this Air03.
        :type air_facility_type_code: str
        """
        if air_facility_type_code is None:
            raise ValueError("Invalid value for `air_facility_type_code`, must not be `None`")

        self._air_facility_type_code = air_facility_type_code

    @property
    def air_facility_type_desc(self):
        """Gets the air_facility_type_desc of this Air03.


        :return: The air_facility_type_desc of this Air03.
        :rtype: str
        """
        return self._air_facility_type_desc

    @air_facility_type_desc.setter
    def air_facility_type_desc(self, air_facility_type_desc):
        """Sets the air_facility_type_desc of this Air03.


        :param air_facility_type_desc: The air_facility_type_desc of this Air03.
        :type air_facility_type_desc: str
        """
        if air_facility_type_desc is None:
            raise ValueError("Invalid value for `air_facility_type_desc`, must not be `None`")

        self._air_facility_type_desc = air_facility_type_desc

    @property
    def air_fea_cnt(self):
        """Gets the air_fea_cnt of this Air03.

        The total number of formal enforcement actions taken against the facility within the last five years.

        :return: The air_fea_cnt of this Air03.
        :rtype: str
        """
        return self._air_fea_cnt

    @air_fea_cnt.setter
    def air_fea_cnt(self, air_fea_cnt):
        """Sets the air_fea_cnt of this Air03.

        The total number of formal enforcement actions taken against the facility within the last five years.

        :param air_fea_cnt: The air_fea_cnt of this Air03.
        :type air_fea_cnt: str
        """
        if air_fea_cnt is None:
            raise ValueError("Invalid value for `air_fea_cnt`, must not be `None`")

        self._air_fea_cnt = air_fea_cnt

    @property
    def air_hpv_status(self):
        """Gets the air_hpv_status of this Air03.

        Indicates whether the facility currently has an unresolved High Priority Violation (HPV) under the Clean Air Act.

        :return: The air_hpv_status of this Air03.
        :rtype: str
        """
        return self._air_hpv_status

    @air_hpv_status.setter
    def air_hpv_status(self, air_hpv_status):
        """Sets the air_hpv_status of this Air03.

        Indicates whether the facility currently has an unresolved High Priority Violation (HPV) under the Clean Air Act.

        :param air_hpv_status: The air_hpv_status of this Air03.
        :type air_hpv_status: str
        """
        if air_hpv_status is None:
            raise ValueError("Invalid value for `air_hpv_status`, must not be `None`")

        self._air_hpv_status = air_hpv_status

    @property
    def airids(self):
        """Gets the airids of this Air03.

        Air Facility System (AFS) ID.

        :return: The airids of this Air03.
        :rtype: str
        """
        return self._airids

    @airids.setter
    def airids(self, airids):
        """Sets the airids of this Air03.

        Air Facility System (AFS) ID.

        :param airids: The airids of this Air03.
        :type airids: str
        """
        if airids is None:
            raise ValueError("Invalid value for `airids`, must not be `None`")

        self._airids = airids

    @property
    def air_iea_cnt(self):
        """Gets the air_iea_cnt of this Air03.

        The total number of informal enforcement actions taken against the facility within the last five years.

        :return: The air_iea_cnt of this Air03.
        :rtype: str
        """
        return self._air_iea_cnt

    @air_iea_cnt.setter
    def air_iea_cnt(self, air_iea_cnt):
        """Sets the air_iea_cnt of this Air03.

        The total number of informal enforcement actions taken against the facility within the last five years.

        :param air_iea_cnt: The air_iea_cnt of this Air03.
        :type air_iea_cnt: str
        """
        if air_iea_cnt is None:
            raise ValueError("Invalid value for `air_iea_cnt`, must not be `None`")

        self._air_iea_cnt = air_iea_cnt

    @property
    def air_indian_cntry_flg(self):
        """Gets the air_indian_cntry_flg of this Air03.

        Flag indicating whether the AIR facility is located in Indian country.

        :return: The air_indian_cntry_flg of this Air03.
        :rtype: str
        """
        return self._air_indian_cntry_flg

    @air_indian_cntry_flg.setter
    def air_indian_cntry_flg(self, air_indian_cntry_flg):
        """Sets the air_indian_cntry_flg of this Air03.

        Flag indicating whether the AIR facility is located in Indian country.

        :param air_indian_cntry_flg: The air_indian_cntry_flg of this Air03.
        :type air_indian_cntry_flg: str
        """
        if air_indian_cntry_flg is None:
            raise ValueError("Invalid value for `air_indian_cntry_flg`, must not be `None`")

        self._air_indian_cntry_flg = air_indian_cntry_flg

    @property
    def air_last_eval_date(self):
        """Gets the air_last_eval_date of this Air03.

        The date on which the most recent Full Compliance Evaluation (FCE) of the facility by EPA or a state agency was completed.

        :return: The air_last_eval_date of this Air03.
        :rtype: str
        """
        return self._air_last_eval_date

    @air_last_eval_date.setter
    def air_last_eval_date(self, air_last_eval_date):
        """Sets the air_last_eval_date of this Air03.

        The date on which the most recent Full Compliance Evaluation (FCE) of the facility by EPA or a state agency was completed.

        :param air_last_eval_date: The air_last_eval_date of this Air03.
        :type air_last_eval_date: str
        """
        if air_last_eval_date is None:
            raise ValueError("Invalid value for `air_last_eval_date`, must not be `None`")

        self._air_last_eval_date = air_last_eval_date

    @property
    def air_last_eval_date_epa(self):
        """Gets the air_last_eval_date_epa of this Air03.

        The last Air Inspection Date performed by EPA.

        :return: The air_last_eval_date_epa of this Air03.
        :rtype: str
        """
        return self._air_last_eval_date_epa

    @air_last_eval_date_epa.setter
    def air_last_eval_date_epa(self, air_last_eval_date_epa):
        """Sets the air_last_eval_date_epa of this Air03.

        The last Air Inspection Date performed by EPA.

        :param air_last_eval_date_epa: The air_last_eval_date_epa of this Air03.
        :type air_last_eval_date_epa: str
        """
        if air_last_eval_date_epa is None:
            raise ValueError("Invalid value for `air_last_eval_date_epa`, must not be `None`")

        self._air_last_eval_date_epa = air_last_eval_date_epa

    @property
    def air_last_eval_date_state(self):
        """Gets the air_last_eval_date_state of this Air03.

        The last Air Inspection Date performed by State or local authorities.

        :return: The air_last_eval_date_state of this Air03.
        :rtype: str
        """
        return self._air_last_eval_date_state

    @air_last_eval_date_state.setter
    def air_last_eval_date_state(self, air_last_eval_date_state):
        """Sets the air_last_eval_date_state of this Air03.

        The last Air Inspection Date performed by State or local authorities.

        :param air_last_eval_date_state: The air_last_eval_date_state of this Air03.
        :type air_last_eval_date_state: str
        """
        if air_last_eval_date_state is None:
            raise ValueError("Invalid value for `air_last_eval_date_state`, must not be `None`")

        self._air_last_eval_date_state = air_last_eval_date_state

    @property
    def air_last_fea_date(self):
        """Gets the air_last_fea_date of this Air03.

        The effective date of the most recent listed formal enforcement action taken against the facility.

        :return: The air_last_fea_date of this Air03.
        :rtype: str
        """
        return self._air_last_fea_date

    @air_last_fea_date.setter
    def air_last_fea_date(self, air_last_fea_date):
        """Sets the air_last_fea_date of this Air03.

        The effective date of the most recent listed formal enforcement action taken against the facility.

        :param air_last_fea_date: The air_last_fea_date of this Air03.
        :type air_last_fea_date: str
        """
        if air_last_fea_date is None:
            raise ValueError("Invalid value for `air_last_fea_date`, must not be `None`")

        self._air_last_fea_date = air_last_fea_date

    @property
    def air_last_fea_date_epa(self):
        """Gets the air_last_fea_date_epa of this Air03.

        The last Air Formal Enforcement Action Date take by EPA.

        :return: The air_last_fea_date_epa of this Air03.
        :rtype: str
        """
        return self._air_last_fea_date_epa

    @air_last_fea_date_epa.setter
    def air_last_fea_date_epa(self, air_last_fea_date_epa):
        """Sets the air_last_fea_date_epa of this Air03.

        The last Air Formal Enforcement Action Date take by EPA.

        :param air_last_fea_date_epa: The air_last_fea_date_epa of this Air03.
        :type air_last_fea_date_epa: str
        """
        if air_last_fea_date_epa is None:
            raise ValueError("Invalid value for `air_last_fea_date_epa`, must not be `None`")

        self._air_last_fea_date_epa = air_last_fea_date_epa

    @property
    def air_last_fea_date_state(self):
        """Gets the air_last_fea_date_state of this Air03.

        The last Air Formal Enforcement Action Date take by State or Local authorities.

        :return: The air_last_fea_date_state of this Air03.
        :rtype: str
        """
        return self._air_last_fea_date_state

    @air_last_fea_date_state.setter
    def air_last_fea_date_state(self, air_last_fea_date_state):
        """Sets the air_last_fea_date_state of this Air03.

        The last Air Formal Enforcement Action Date take by State or Local authorities.

        :param air_last_fea_date_state: The air_last_fea_date_state of this Air03.
        :type air_last_fea_date_state: str
        """
        if air_last_fea_date_state is None:
            raise ValueError("Invalid value for `air_last_fea_date_state`, must not be `None`")

        self._air_last_fea_date_state = air_last_fea_date_state

    @property
    def air_last_iea_date(self):
        """Gets the air_last_iea_date of this Air03.

        The effective date of the most recent listed informal enforcement action taken against the facility.

        :return: The air_last_iea_date of this Air03.
        :rtype: str
        """
        return self._air_last_iea_date

    @air_last_iea_date.setter
    def air_last_iea_date(self, air_last_iea_date):
        """Sets the air_last_iea_date of this Air03.

        The effective date of the most recent listed informal enforcement action taken against the facility.

        :param air_last_iea_date: The air_last_iea_date of this Air03.
        :type air_last_iea_date: str
        """
        if air_last_iea_date is None:
            raise ValueError("Invalid value for `air_last_iea_date`, must not be `None`")

        self._air_last_iea_date = air_last_iea_date

    @property
    def air_last_iea_date_epa(self):
        """Gets the air_last_iea_date_epa of this Air03.

        The effective date of the most recent listed informal enforcement action taken against the facility by EPA.

        :return: The air_last_iea_date_epa of this Air03.
        :rtype: str
        """
        return self._air_last_iea_date_epa

    @air_last_iea_date_epa.setter
    def air_last_iea_date_epa(self, air_last_iea_date_epa):
        """Sets the air_last_iea_date_epa of this Air03.

        The effective date of the most recent listed informal enforcement action taken against the facility by EPA.

        :param air_last_iea_date_epa: The air_last_iea_date_epa of this Air03.
        :type air_last_iea_date_epa: str
        """
        if air_last_iea_date_epa is None:
            raise ValueError("Invalid value for `air_last_iea_date_epa`, must not be `None`")

        self._air_last_iea_date_epa = air_last_iea_date_epa

    @property
    def air_last_iea_date_state(self):
        """Gets the air_last_iea_date_state of this Air03.

        The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.

        :return: The air_last_iea_date_state of this Air03.
        :rtype: str
        """
        return self._air_last_iea_date_state

    @air_last_iea_date_state.setter
    def air_last_iea_date_state(self, air_last_iea_date_state):
        """Sets the air_last_iea_date_state of this Air03.

        The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.

        :param air_last_iea_date_state: The air_last_iea_date_state of this Air03.
        :type air_last_iea_date_state: str
        """
        if air_last_iea_date_state is None:
            raise ValueError("Invalid value for `air_last_iea_date_state`, must not be `None`")

        self._air_last_iea_date_state = air_last_iea_date_state

    @property
    def air_last_penalty_date(self):
        """Gets the air_last_penalty_date of this Air03.

        Indicates the date on which the most recent assessed (or final) penalty was taken against the facility for AIR.

        :return: The air_last_penalty_date of this Air03.
        :rtype: str
        """
        return self._air_last_penalty_date

    @air_last_penalty_date.setter
    def air_last_penalty_date(self, air_last_penalty_date):
        """Sets the air_last_penalty_date of this Air03.

        Indicates the date on which the most recent assessed (or final) penalty was taken against the facility for AIR.

        :param air_last_penalty_date: The air_last_penalty_date of this Air03.
        :type air_last_penalty_date: str
        """
        if air_last_penalty_date is None:
            raise ValueError("Invalid value for `air_last_penalty_date`, must not be `None`")

        self._air_last_penalty_date = air_last_penalty_date

    @property
    def air_last_stck_date_epa(self):
        """Gets the air_last_stck_date_epa of this Air03.

        The date on which the most recent stack test by EPA occurred.

        :return: The air_last_stck_date_epa of this Air03.
        :rtype: str
        """
        return self._air_last_stck_date_epa

    @air_last_stck_date_epa.setter
    def air_last_stck_date_epa(self, air_last_stck_date_epa):
        """Sets the air_last_stck_date_epa of this Air03.

        The date on which the most recent stack test by EPA occurred.

        :param air_last_stck_date_epa: The air_last_stck_date_epa of this Air03.
        :type air_last_stck_date_epa: str
        """
        if air_last_stck_date_epa is None:
            raise ValueError("Invalid value for `air_last_stck_date_epa`, must not be `None`")

        self._air_last_stck_date_epa = air_last_stck_date_epa

    @property
    def air_last_stck_date_state(self):
        """Gets the air_last_stck_date_state of this Air03.

        The date on which the most recent stack test by a state agency occurred.

        :return: The air_last_stck_date_state of this Air03.
        :rtype: str
        """
        return self._air_last_stck_date_state

    @air_last_stck_date_state.setter
    def air_last_stck_date_state(self, air_last_stck_date_state):
        """Sets the air_last_stck_date_state of this Air03.

        The date on which the most recent stack test by a state agency occurred.

        :param air_last_stck_date_state: The air_last_stck_date_state of this Air03.
        :type air_last_stck_date_state: str
        """
        if air_last_stck_date_state is None:
            raise ValueError("Invalid value for `air_last_stck_date_state`, must not be `None`")

        self._air_last_stck_date_state = air_last_stck_date_state

    @property
    def air_last_stck_test_date(self):
        """Gets the air_last_stck_test_date of this Air03.

        The date on which the most recent stack test occurred.

        :return: The air_last_stck_test_date of this Air03.
        :rtype: str
        """
        return self._air_last_stck_test_date

    @air_last_stck_test_date.setter
    def air_last_stck_test_date(self, air_last_stck_test_date):
        """Sets the air_last_stck_test_date of this Air03.

        The date on which the most recent stack test occurred.

        :param air_last_stck_test_date: The air_last_stck_test_date of this Air03.
        :type air_last_stck_test_date: str
        """
        if air_last_stck_test_date is None:
            raise ValueError("Invalid value for `air_last_stck_test_date`, must not be `None`")

        self._air_last_stck_test_date = air_last_stck_test_date

    @property
    def air_last_stck_test_results(self):
        """Gets the air_last_stck_test_results of this Air03.

        The result of the most recent stack test (Pass, Fail, Pending, or Blank).

        :return: The air_last_stck_test_results of this Air03.
        :rtype: str
        """
        return self._air_last_stck_test_results

    @air_last_stck_test_results.setter
    def air_last_stck_test_results(self, air_last_stck_test_results):
        """Sets the air_last_stck_test_results of this Air03.

        The result of the most recent stack test (Pass, Fail, Pending, or Blank).

        :param air_last_stck_test_results: The air_last_stck_test_results of this Air03.
        :type air_last_stck_test_results: str
        """
        if air_last_stck_test_results is None:
            raise ValueError("Invalid value for `air_last_stck_test_results`, must not be `None`")

        self._air_last_stck_test_results = air_last_stck_test_results

    @property
    def air_last_viol_date(self):
        """Gets the air_last_viol_date of this Air03.

        The date on which the most recent violation was reported.

        :return: The air_last_viol_date of this Air03.
        :rtype: str
        """
        return self._air_last_viol_date

    @air_last_viol_date.setter
    def air_last_viol_date(self, air_last_viol_date):
        """Sets the air_last_viol_date of this Air03.

        The date on which the most recent violation was reported.

        :param air_last_viol_date: The air_last_viol_date of this Air03.
        :type air_last_viol_date: str
        """
        if air_last_viol_date is None:
            raise ValueError("Invalid value for `air_last_viol_date`, must not be `None`")

        self._air_last_viol_date = air_last_viol_date

    @property
    def air_macts(self):
        """Gets the air_macts of this Air03.

        The Maximum Achievable Control Technology (MACT) Subpart associated with the facility.

        :return: The air_macts of this Air03.
        :rtype: str
        """
        return self._air_macts

    @air_macts.setter
    def air_macts(self, air_macts):
        """Sets the air_macts of this Air03.

        The Maximum Achievable Control Technology (MACT) Subpart associated with the facility.

        :param air_macts: The air_macts of this Air03.
        :type air_macts: str
        """
        if air_macts is None:
            raise ValueError("Invalid value for `air_macts`, must not be `None`")

        self._air_macts = air_macts

    @property
    def air_major_flag(self):
        """Gets the air_major_flag of this Air03.

        Indicated whether the facility is designated as a major facilitiy.

        :return: The air_major_flag of this Air03.
        :rtype: str
        """
        return self._air_major_flag

    @air_major_flag.setter
    def air_major_flag(self, air_major_flag):
        """Sets the air_major_flag of this Air03.

        Indicated whether the facility is designated as a major facilitiy.

        :param air_major_flag: The air_major_flag of this Air03.
        :type air_major_flag: str
        """
        if air_major_flag is None:
            raise ValueError("Invalid value for `air_major_flag`, must not be `None`")

        self._air_major_flag = air_major_flag

    @property
    def air_mnths_with_hpv(self):
        """Gets the air_mnths_with_hpv of this Air03.

        The number of months in the last three years in which the permit or site is considered in High Priority Violation (HPV) status

        :return: The air_mnths_with_hpv of this Air03.
        :rtype: str
        """
        return self._air_mnths_with_hpv

    @air_mnths_with_hpv.setter
    def air_mnths_with_hpv(self, air_mnths_with_hpv):
        """Sets the air_mnths_with_hpv of this Air03.

        The number of months in the last three years in which the permit or site is considered in High Priority Violation (HPV) status

        :param air_mnths_with_hpv: The air_mnths_with_hpv of this Air03.
        :type air_mnths_with_hpv: str
        """
        if air_mnths_with_hpv is None:
            raise ValueError("Invalid value for `air_mnths_with_hpv`, must not be `None`")

        self._air_mnths_with_hpv = air_mnths_with_hpv

    @property
    def airnaics(self):
        """Gets the airnaics of this Air03.

        The facility’s or permit's primary North American Industry Classification System (NAICS) Code.

        :return: The airnaics of this Air03.
        :rtype: str
        """
        return self._airnaics

    @airnaics.setter
    def airnaics(self, airnaics):
        """Sets the airnaics of this Air03.

        The facility’s or permit's primary North American Industry Classification System (NAICS) Code.

        :param airnaics: The airnaics of this Air03.
        :type airnaics: str
        """
        if airnaics is None:
            raise ValueError("Invalid value for `airnaics`, must not be `None`")

        self._airnaics = airnaics

    @property
    def air_name(self):
        """Gets the air_name of this Air03.

        The name of the AIR Facility.

        :return: The air_name of this Air03.
        :rtype: str
        """
        return self._air_name

    @air_name.setter
    def air_name(self, air_name):
        """Sets the air_name of this Air03.

        The name of the AIR Facility.

        :param air_name: The air_name of this Air03.
        :type air_name: str
        """
        if air_name is None:
            raise ValueError("Invalid value for `air_name`, must not be `None`")

        self._air_name = air_name

    @property
    def air_nsps(self):
        """Gets the air_nsps of this Air03.

        The New Source Performance Standards (NSPS) Subpart associated with the facility.

        :return: The air_nsps of this Air03.
        :rtype: str
        """
        return self._air_nsps

    @air_nsps.setter
    def air_nsps(self, air_nsps):
        """Sets the air_nsps of this Air03.

        The New Source Performance Standards (NSPS) Subpart associated with the facility.

        :param air_nsps: The air_nsps of this Air03.
        :type air_nsps: str
        """
        if air_nsps is None:
            raise ValueError("Invalid value for `air_nsps`, must not be `None`")

        self._air_nsps = air_nsps

    @property
    def air_nspsm(self):
        """Gets the air_nspsm of this Air03.

        The Non-Major New Source Performance Standards (NSPS) Subpart associated with the facility.

        :return: The air_nspsm of this Air03.
        :rtype: str
        """
        return self._air_nspsm

    @air_nspsm.setter
    def air_nspsm(self, air_nspsm):
        """Sets the air_nspsm of this Air03.

        The Non-Major New Source Performance Standards (NSPS) Subpart associated with the facility.

        :param air_nspsm: The air_nspsm of this Air03.
        :type air_nspsm: str
        """
        if air_nspsm is None:
            raise ValueError("Invalid value for `air_nspsm`, must not be `None`")

        self._air_nspsm = air_nspsm

    @property
    def air_penalties(self):
        """Gets the air_penalties of this Air03.

        The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act. This value only includes penalties that have been entered in the national program database, ICIS-Air.

        :return: The air_penalties of this Air03.
        :rtype: str
        """
        return self._air_penalties

    @air_penalties.setter
    def air_penalties(self, air_penalties):
        """Sets the air_penalties of this Air03.

        The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act. This value only includes penalties that have been entered in the national program database, ICIS-Air.

        :param air_penalties: The air_penalties of this Air03.
        :type air_penalties: str
        """
        if air_penalties is None:
            raise ValueError("Invalid value for `air_penalties`, must not be `None`")

        self._air_penalties = air_penalties

    @property
    def air_poll_recent_viol(self):
        """Gets the air_poll_recent_viol of this Air03.

        The names of pollutants or pollutant categories with violations reported in the last year.

        :return: The air_poll_recent_viol of this Air03.
        :rtype: str
        """
        return self._air_poll_recent_viol

    @air_poll_recent_viol.setter
    def air_poll_recent_viol(self, air_poll_recent_viol):
        """Sets the air_poll_recent_viol of this Air03.

        The names of pollutants or pollutant categories with violations reported in the last year.

        :param air_poll_recent_viol: The air_poll_recent_viol of this Air03.
        :type air_poll_recent_viol: str
        """
        if air_poll_recent_viol is None:
            raise ValueError("Invalid value for `air_poll_recent_viol`, must not be `None`")

        self._air_poll_recent_viol = air_poll_recent_viol

    @property
    def air_programs(self):
        """Gets the air_programs of this Air03.

        Comma-delimited list of AIR programs.

        :return: The air_programs of this Air03.
        :rtype: str
        """
        return self._air_programs

    @air_programs.setter
    def air_programs(self, air_programs):
        """Sets the air_programs of this Air03.

        Comma-delimited list of AIR programs.

        :param air_programs: The air_programs of this Air03.
        :type air_programs: str
        """
        if air_programs is None:
            raise ValueError("Invalid value for `air_programs`, must not be `None`")

        self._air_programs = air_programs

    @property
    def air_qtrs_with_hpv(self):
        """Gets the air_qtrs_with_hpv of this Air03.

        The number of quarters in the last three years in which the permit or site is considered in High Priority Violation (HPV) status.

        :return: The air_qtrs_with_hpv of this Air03.
        :rtype: str
        """
        return self._air_qtrs_with_hpv

    @air_qtrs_with_hpv.setter
    def air_qtrs_with_hpv(self, air_qtrs_with_hpv):
        """Sets the air_qtrs_with_hpv of this Air03.

        The number of quarters in the last three years in which the permit or site is considered in High Priority Violation (HPV) status.

        :param air_qtrs_with_hpv: The air_qtrs_with_hpv of this Air03.
        :type air_qtrs_with_hpv: str
        """
        if air_qtrs_with_hpv is None:
            raise ValueError("Invalid value for `air_qtrs_with_hpv`, must not be `None`")

        self._air_qtrs_with_hpv = air_qtrs_with_hpv

    @property
    def air_qtrs_with_viol(self):
        """Gets the air_qtrs_with_viol of this Air03.

        The number of quarters in the last three years in which the permit or site has had unresolved violation(s) reported.

        :return: The air_qtrs_with_viol of this Air03.
        :rtype: str
        """
        return self._air_qtrs_with_viol

    @air_qtrs_with_viol.setter
    def air_qtrs_with_viol(self, air_qtrs_with_viol):
        """Sets the air_qtrs_with_viol of this Air03.

        The number of quarters in the last three years in which the permit or site has had unresolved violation(s) reported.

        :param air_qtrs_with_viol: The air_qtrs_with_viol of this Air03.
        :type air_qtrs_with_viol: str
        """
        if air_qtrs_with_viol is None:
            raise ValueError("Invalid value for `air_qtrs_with_viol`, must not be `None`")

        self._air_qtrs_with_viol = air_qtrs_with_viol

    @property
    def air_recent_viol_cnt(self):
        """Gets the air_recent_viol_cnt of this Air03.

        The number of violations reported in the last year.

        :return: The air_recent_viol_cnt of this Air03.
        :rtype: str
        """
        return self._air_recent_viol_cnt

    @air_recent_viol_cnt.setter
    def air_recent_viol_cnt(self, air_recent_viol_cnt):
        """Sets the air_recent_viol_cnt of this Air03.

        The number of violations reported in the last year.

        :param air_recent_viol_cnt: The air_recent_viol_cnt of this Air03.
        :type air_recent_viol_cnt: str
        """
        if air_recent_viol_cnt is None:
            raise ValueError("Invalid value for `air_recent_viol_cnt`, must not be `None`")

        self._air_recent_viol_cnt = air_recent_viol_cnt

    @property
    def air_stack_test5_yr_all(self):
        """Gets the air_stack_test5_yr_all of this Air03.


        :return: The air_stack_test5_yr_all of this Air03.
        :rtype: str
        """
        return self._air_stack_test5_yr_all

    @air_stack_test5_yr_all.setter
    def air_stack_test5_yr_all(self, air_stack_test5_yr_all):
        """Sets the air_stack_test5_yr_all of this Air03.


        :param air_stack_test5_yr_all: The air_stack_test5_yr_all of this Air03.
        :type air_stack_test5_yr_all: str
        """
        if air_stack_test5_yr_all is None:
            raise ValueError("Invalid value for `air_stack_test5_yr_all`, must not be `None`")

        self._air_stack_test5_yr_all = air_stack_test5_yr_all

    @property
    def air_stack_test5_yr_fail(self):
        """Gets the air_stack_test5_yr_fail of this Air03.


        :return: The air_stack_test5_yr_fail of this Air03.
        :rtype: str
        """
        return self._air_stack_test5_yr_fail

    @air_stack_test5_yr_fail.setter
    def air_stack_test5_yr_fail(self, air_stack_test5_yr_fail):
        """Sets the air_stack_test5_yr_fail of this Air03.


        :param air_stack_test5_yr_fail: The air_stack_test5_yr_fail of this Air03.
        :type air_stack_test5_yr_fail: str
        """
        if air_stack_test5_yr_fail is None:
            raise ValueError("Invalid value for `air_stack_test5_yr_fail`, must not be `None`")

        self._air_stack_test5_yr_fail = air_stack_test5_yr_fail

    @property
    def air_state(self):
        """Gets the air_state of this Air03.

        The state where the AIR facility is located.

        :return: The air_state of this Air03.
        :rtype: str
        """
        return self._air_state

    @air_state.setter
    def air_state(self, air_state):
        """Sets the air_state of this Air03.

        The state where the AIR facility is located.

        :param air_state: The air_state of this Air03.
        :type air_state: str
        """
        if air_state is None:
            raise ValueError("Invalid value for `air_state`, must not be `None`")

        self._air_state = air_state

    @property
    def air_status(self):
        """Gets the air_status of this Air03.

        The status of the AIR facility location.

        :return: The air_status of this Air03.
        :rtype: str
        """
        return self._air_status

    @air_status.setter
    def air_status(self, air_status):
        """Sets the air_status of this Air03.

        The status of the AIR facility location.

        :param air_status: The air_status of this Air03.
        :type air_status: str
        """
        if air_status is None:
            raise ValueError("Invalid value for `air_status`, must not be `None`")

        self._air_status = air_status

    @property
    def air_street(self):
        """Gets the air_street of this Air03.

        The street address of the AIR facility location.

        :return: The air_street of this Air03.
        :rtype: str
        """
        return self._air_street

    @air_street.setter
    def air_street(self, air_street):
        """Sets the air_street of this Air03.

        The street address of the AIR facility location.

        :param air_street: The air_street of this Air03.
        :type air_street: str
        """
        if air_street is None:
            raise ValueError("Invalid value for `air_street`, must not be `None`")

        self._air_street = air_street

    @property
    def airtr_ibal_ep_aids(self):
        """Gets the airtr_ibal_ep_aids of this Air03.

        The EPA Tribal or Native Alaskan Village Identifier for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.

        :return: The airtr_ibal_ep_aids of this Air03.
        :rtype: str
        """
        return self._airtr_ibal_ep_aids

    @airtr_ibal_ep_aids.setter
    def airtr_ibal_ep_aids(self, airtr_ibal_ep_aids):
        """Sets the airtr_ibal_ep_aids of this Air03.

        The EPA Tribal or Native Alaskan Village Identifier for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.

        :param airtr_ibal_ep_aids: The airtr_ibal_ep_aids of this Air03.
        :type airtr_ibal_ep_aids: str
        """
        if airtr_ibal_ep_aids is None:
            raise ValueError("Invalid value for `airtr_ibal_ep_aids`, must not be `None`")

        self._airtr_ibal_ep_aids = airtr_ibal_ep_aids

    @property
    def airtr_ibal_names(self):
        """Gets the airtr_ibal_names of this Air03.

        The EPA Tribal or Native Alaskan Village Name for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.

        :return: The airtr_ibal_names of this Air03.
        :rtype: str
        """
        return self._airtr_ibal_names

    @airtr_ibal_names.setter
    def airtr_ibal_names(self, airtr_ibal_names):
        """Sets the airtr_ibal_names of this Air03.

        The EPA Tribal or Native Alaskan Village Name for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.

        :param airtr_ibal_names: The airtr_ibal_names of this Air03.
        :type airtr_ibal_names: str
        """
        if airtr_ibal_names is None:
            raise ValueError("Invalid value for `airtr_ibal_names`, must not be `None`")

        self._airtr_ibal_names = airtr_ibal_names

    @property
    def air_universe(self):
        """Gets the air_universe of this Air03.

        The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable source include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement action, or included on a Compliance Monitoring Strategy plan.

        :return: The air_universe of this Air03.
        :rtype: str
        """
        return self._air_universe

    @air_universe.setter
    def air_universe(self, air_universe):
        """Sets the air_universe of this Air03.

        The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable source include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement action, or included on a Compliance Monitoring Strategy plan.

        :param air_universe: The air_universe of this Air03.
        :type air_universe: str
        """
        if air_universe is None:
            raise ValueError("Invalid value for `air_universe`, must not be `None`")

        self._air_universe = air_universe

    @property
    def air_zip(self):
        """Gets the air_zip of this Air03.

        The five-digit zip code of the AIR facility.

        :return: The air_zip of this Air03.
        :rtype: str
        """
        return self._air_zip

    @air_zip.setter
    def air_zip(self, air_zip):
        """Sets the air_zip of this Air03.

        The five-digit zip code of the AIR facility.

        :param air_zip: The air_zip of this Air03.
        :type air_zip: str
        """
        if air_zip is None:
            raise ValueError("Invalid value for `air_zip`, must not be `None`")

        self._air_zip = air_zip

    @property
    def active_lower48(self):
        """Gets the active_lower48 of this Air03.

        A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.

        :return: The active_lower48 of this Air03.
        :rtype: str
        """
        return self._active_lower48

    @active_lower48.setter
    def active_lower48(self, active_lower48):
        """Sets the active_lower48 of this Air03.

        A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.

        :param active_lower48: The active_lower48 of this Air03.
        :type active_lower48: str
        """
        if active_lower48 is None:
            raise ValueError("Invalid value for `active_lower48`, must not be `None`")

        self._active_lower48 = active_lower48

    @property
    def cwaids(self):
        """Gets the cwaids of this Air03.

        A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.

        :return: The cwaids of this Air03.
        :rtype: str
        """
        return self._cwaids

    @cwaids.setter
    def cwaids(self, cwaids):
        """Sets the cwaids of this Air03.

        A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.

        :param cwaids: The cwaids of this Air03.
        :type cwaids: str
        """
        if cwaids is None:
            raise ValueError("Invalid value for `cwaids`, must not be `None`")

        self._cwaids = cwaids

    @property
    def calculated_accuracy_meters(self):
        """Gets the calculated_accuracy_meters of this Air03.

        The estimated accuracy in Meters for the facility's geospatial coordinate.

        :return: The calculated_accuracy_meters of this Air03.
        :rtype: str
        """
        return self._calculated_accuracy_meters

    @calculated_accuracy_meters.setter
    def calculated_accuracy_meters(self, calculated_accuracy_meters):
        """Sets the calculated_accuracy_meters of this Air03.

        The estimated accuracy in Meters for the facility's geospatial coordinate.

        :param calculated_accuracy_meters: The calculated_accuracy_meters of this Air03.
        :type calculated_accuracy_meters: str
        """
        if calculated_accuracy_meters is None:
            raise ValueError("Invalid value for `calculated_accuracy_meters`, must not be `None`")

        self._calculated_accuracy_meters = calculated_accuracy_meters

    @property
    def camd_ids(self):
        """Gets the camd_ids of this Air03.

        Facility identifiers for the Clean Air Markets Division database.

        :return: The camd_ids of this Air03.
        :rtype: str
        """
        return self._camd_ids

    @camd_ids.setter
    def camd_ids(self, camd_ids):
        """Sets the camd_ids of this Air03.

        Facility identifiers for the Clean Air Markets Division database.

        :param camd_ids: The camd_ids of this Air03.
        :type camd_ids: str
        """
        if camd_ids is None:
            raise ValueError("Invalid value for `camd_ids`, must not be `None`")

        self._camd_ids = camd_ids

    @property
    def census_block_group(self):
        """Gets the census_block_group of this Air03.

        A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.

        :return: The census_block_group of this Air03.
        :rtype: str
        """
        return self._census_block_group

    @census_block_group.setter
    def census_block_group(self, census_block_group):
        """Sets the census_block_group of this Air03.

        A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.

        :param census_block_group: The census_block_group of this Air03.
        :type census_block_group: str
        """
        if census_block_group is None:
            raise ValueError("Invalid value for `census_block_group`, must not be `None`")

        self._census_block_group = census_block_group

    @property
    def chesapeake_bay_flag(self):
        """Gets the chesapeake_bay_flag of this Air03.

        Displays \"Y\" if the facility is located within the Chesapeake Bay watershed.

        :return: The chesapeake_bay_flag of this Air03.
        :rtype: str
        """
        return self._chesapeake_bay_flag

    @chesapeake_bay_flag.setter
    def chesapeake_bay_flag(self, chesapeake_bay_flag):
        """Sets the chesapeake_bay_flag of this Air03.

        Displays \"Y\" if the facility is located within the Chesapeake Bay watershed.

        :param chesapeake_bay_flag: The chesapeake_bay_flag of this Air03.
        :type chesapeake_bay_flag: str
        """
        if chesapeake_bay_flag is None:
            raise ValueError("Invalid value for `chesapeake_bay_flag`, must not be `None`")

        self._chesapeake_bay_flag = chesapeake_bay_flag

    @property
    def collection_method(self):
        """Gets the collection_method of this Air03.

        ??

        :return: The collection_method of this Air03.
        :rtype: str
        """
        return self._collection_method

    @collection_method.setter
    def collection_method(self, collection_method):
        """Sets the collection_method of this Air03.

        ??

        :param collection_method: The collection_method of this Air03.
        :type collection_method: str
        """
        if collection_method is None:
            raise ValueError("Invalid value for `collection_method`, must not be `None`")

        self._collection_method = collection_method

    @property
    def curr_sv_flag(self):
        """Gets the curr_sv_flag of this Air03.

        Indicates if the facility has a current significant violation. 1 = Yes

        :return: The curr_sv_flag of this Air03.
        :rtype: str
        """
        return self._curr_sv_flag

    @curr_sv_flag.setter
    def curr_sv_flag(self, curr_sv_flag):
        """Sets the curr_sv_flag of this Air03.

        Indicates if the facility has a current significant violation. 1 = Yes

        :param curr_sv_flag: The curr_sv_flag of this Air03.
        :type curr_sv_flag: str
        """
        if curr_sv_flag is None:
            raise ValueError("Invalid value for `curr_sv_flag`, must not be `None`")

        self._curr_sv_flag = curr_sv_flag

    @property
    def curr_vio_flag(self):
        """Gets the curr_vio_flag of this Air03.

        Indicates if the facility has a current violation. 1 = Yes

        :return: The curr_vio_flag of this Air03.
        :rtype: str
        """
        return self._curr_vio_flag

    @curr_vio_flag.setter
    def curr_vio_flag(self, curr_vio_flag):
        """Sets the curr_vio_flag of this Air03.

        Indicates if the facility has a current violation. 1 = Yes

        :param curr_vio_flag: The curr_vio_flag of this Air03.
        :type curr_vio_flag: str
        """
        if curr_vio_flag is None:
            raise ValueError("Invalid value for `curr_vio_flag`, must not be `None`")

        self._curr_vio_flag = curr_vio_flag

    @property
    def epa_system(self):
        """Gets the epa_system of this Air03.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Air03.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Air03.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Air03.
        :type epa_system: str
        """
        if epa_system is None:
            raise ValueError("Invalid value for `epa_system`, must not be `None`")

        self._epa_system = epa_system

    @property
    def ea5yr_flag(self):
        """Gets the ea5yr_flag of this Air03.

        Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes

        :return: The ea5yr_flag of this Air03.
        :rtype: str
        """
        return self._ea5yr_flag

    @ea5yr_flag.setter
    def ea5yr_flag(self, ea5yr_flag):
        """Sets the ea5yr_flag of this Air03.

        Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes

        :param ea5yr_flag: The ea5yr_flag of this Air03.
        :type ea5yr_flag: str
        """
        if ea5yr_flag is None:
            raise ValueError("Invalid value for `ea5yr_flag`, must not be `None`")

        self._ea5yr_flag = ea5yr_flag

    @property
    def eis_ids(self):
        """Gets the eis_ids of this Air03.

        A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.

        :return: The eis_ids of this Air03.
        :rtype: str
        """
        return self._eis_ids

    @eis_ids.setter
    def eis_ids(self, eis_ids):
        """Sets the eis_ids of this Air03.

        A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.

        :param eis_ids: The eis_ids of this Air03.
        :type eis_ids: str
        """
        if eis_ids is None:
            raise ValueError("Invalid value for `eis_ids`, must not be `None`")

        self._eis_ids = eis_ids

    @property
    def ejscreen_flag(self):
        """Gets the ejscreen_flag of this Air03.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :return: The ejscreen_flag of this Air03.
        :rtype: str
        """
        return self._ejscreen_flag

    @ejscreen_flag.setter
    def ejscreen_flag(self, ejscreen_flag):
        """Sets the ejscreen_flag of this Air03.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :param ejscreen_flag: The ejscreen_flag of this Air03.
        :type ejscreen_flag: str
        """
        if ejscreen_flag is None:
            raise ValueError("Invalid value for `ejscreen_flag`, must not be `None`")

        self._ejscreen_flag = ejscreen_flag

    @property
    def ejscreen_flag_us(self):
        """Gets the ejscreen_flag_us of this Air03.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :return: The ejscreen_flag_us of this Air03.
        :rtype: str
        """
        return self._ejscreen_flag_us

    @ejscreen_flag_us.setter
    def ejscreen_flag_us(self, ejscreen_flag_us):
        """Sets the ejscreen_flag_us of this Air03.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :param ejscreen_flag_us: The ejscreen_flag_us of this Air03.
        :type ejscreen_flag_us: str
        """
        if ejscreen_flag_us is None:
            raise ValueError("Invalid value for `ejscreen_flag_us`, must not be `None`")

        self._ejscreen_flag_us = ejscreen_flag_us

    @property
    def fac_camd_reporter(self):
        """Gets the fac_camd_reporter of this Air03.

        Indicates whether the facility reports to the Clean Air Markets Division (CAMD).

        :return: The fac_camd_reporter of this Air03.
        :rtype: str
        """
        return self._fac_camd_reporter

    @fac_camd_reporter.setter
    def fac_camd_reporter(self, fac_camd_reporter):
        """Sets the fac_camd_reporter of this Air03.

        Indicates whether the facility reports to the Clean Air Markets Division (CAMD).

        :param fac_camd_reporter: The fac_camd_reporter of this Air03.
        :type fac_camd_reporter: str
        """
        if fac_camd_reporter is None:
            raise ValueError("Invalid value for `fac_camd_reporter`, must not be `None`")

        self._fac_camd_reporter = fac_camd_reporter

    @property
    def fac_county_name(self):
        """Gets the fac_county_name of this Air03.

        The facility county name from EPA's Facility Registry System

        :return: The fac_county_name of this Air03.
        :rtype: str
        """
        return self._fac_county_name

    @fac_county_name.setter
    def fac_county_name(self, fac_county_name):
        """Sets the fac_county_name of this Air03.

        The facility county name from EPA's Facility Registry System

        :param fac_county_name: The fac_county_name of this Air03.
        :type fac_county_name: str
        """
        if fac_county_name is None:
            raise ValueError("Invalid value for `fac_county_name`, must not be `None`")

        self._fac_county_name = fac_county_name

    @property
    def fac_derived_huc(self):
        """Gets the fac_derived_huc of this Air03.

        The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.

        :return: The fac_derived_huc of this Air03.
        :rtype: str
        """
        return self._fac_derived_huc

    @fac_derived_huc.setter
    def fac_derived_huc(self, fac_derived_huc):
        """Sets the fac_derived_huc of this Air03.

        The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.

        :param fac_derived_huc: The fac_derived_huc of this Air03.
        :type fac_derived_huc: str
        """
        if fac_derived_huc is None:
            raise ValueError("Invalid value for `fac_derived_huc`, must not be `None`")

        self._fac_derived_huc = fac_derived_huc

    @property
    def fac_derived_tr_ibes(self):
        """Gets the fac_derived_tr_ibes of this Air03.

        The tribes or tribal territories located within 25 miles of the facility's location.

        :return: The fac_derived_tr_ibes of this Air03.
        :rtype: str
        """
        return self._fac_derived_tr_ibes

    @fac_derived_tr_ibes.setter
    def fac_derived_tr_ibes(self, fac_derived_tr_ibes):
        """Sets the fac_derived_tr_ibes of this Air03.

        The tribes or tribal territories located within 25 miles of the facility's location.

        :param fac_derived_tr_ibes: The fac_derived_tr_ibes of this Air03.
        :type fac_derived_tr_ibes: str
        """
        if fac_derived_tr_ibes is None:
            raise ValueError("Invalid value for `fac_derived_tr_ibes`, must not be `None`")

        self._fac_derived_tr_ibes = fac_derived_tr_ibes

    @property
    def fac_derived_wbd(self):
        """Gets the fac_derived_wbd of this Air03.

        The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.

        :return: The fac_derived_wbd of this Air03.
        :rtype: str
        """
        return self._fac_derived_wbd

    @fac_derived_wbd.setter
    def fac_derived_wbd(self, fac_derived_wbd):
        """Sets the fac_derived_wbd of this Air03.

        The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.

        :param fac_derived_wbd: The fac_derived_wbd of this Air03.
        :type fac_derived_wbd: str
        """
        if fac_derived_wbd is None:
            raise ValueError("Invalid value for `fac_derived_wbd`, must not be `None`")

        self._fac_derived_wbd = fac_derived_wbd

    @property
    def fac_derived_wbd_name(self):
        """Gets the fac_derived_wbd_name of this Air03.

        The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate

        :return: The fac_derived_wbd_name of this Air03.
        :rtype: str
        """
        return self._fac_derived_wbd_name

    @fac_derived_wbd_name.setter
    def fac_derived_wbd_name(self, fac_derived_wbd_name):
        """Sets the fac_derived_wbd_name of this Air03.

        The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate

        :param fac_derived_wbd_name: The fac_derived_wbd_name of this Air03.
        :type fac_derived_wbd_name: str
        """
        if fac_derived_wbd_name is None:
            raise ValueError("Invalid value for `fac_derived_wbd_name`, must not be `None`")

        self._fac_derived_wbd_name = fac_derived_wbd_name

    @property
    def fac_eis_air_releases(self):
        """Gets the fac_eis_air_releases of this Air03.

        The amount of hazardous air pollutants released to air in tons per year, as reported in the most recent National Emissions Inventory (NEI).

        :return: The fac_eis_air_releases of this Air03.
        :rtype: str
        """
        return self._fac_eis_air_releases

    @fac_eis_air_releases.setter
    def fac_eis_air_releases(self, fac_eis_air_releases):
        """Sets the fac_eis_air_releases of this Air03.

        The amount of hazardous air pollutants released to air in tons per year, as reported in the most recent National Emissions Inventory (NEI).

        :param fac_eis_air_releases: The fac_eis_air_releases of this Air03.
        :type fac_eis_air_releases: str
        """
        if fac_eis_air_releases is None:
            raise ValueError("Invalid value for `fac_eis_air_releases`, must not be `None`")

        self._fac_eis_air_releases = fac_eis_air_releases

    @property
    def fac_eis_reporter(self):
        """Gets the fac_eis_reporter of this Air03.

        Indicates whether the facility reports to the Emissions Inventory System (EIS).

        :return: The fac_eis_reporter of this Air03.
        :rtype: str
        """
        return self._fac_eis_reporter

    @fac_eis_reporter.setter
    def fac_eis_reporter(self, fac_eis_reporter):
        """Sets the fac_eis_reporter of this Air03.

        Indicates whether the facility reports to the Emissions Inventory System (EIS).

        :param fac_eis_reporter: The fac_eis_reporter of this Air03.
        :type fac_eis_reporter: str
        """
        if fac_eis_reporter is None:
            raise ValueError("Invalid value for `fac_eis_reporter`, must not be `None`")

        self._fac_eis_reporter = fac_eis_reporter

    @property
    def fac_fips_code(self):
        """Gets the fac_fips_code of this Air03.

        The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.

        :return: The fac_fips_code of this Air03.
        :rtype: str
        """
        return self._fac_fips_code

    @fac_fips_code.setter
    def fac_fips_code(self, fac_fips_code):
        """Sets the fac_fips_code of this Air03.

        The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.

        :param fac_fips_code: The fac_fips_code of this Air03.
        :type fac_fips_code: str
        """
        if fac_fips_code is None:
            raise ValueError("Invalid value for `fac_fips_code`, must not be `None`")

        self._fac_fips_code = fac_fips_code

    @property
    def fac_federal_agency_code(self):
        """Gets the fac_federal_agency_code of this Air03.

        Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.

        :return: The fac_federal_agency_code of this Air03.
        :rtype: str
        """
        return self._fac_federal_agency_code

    @fac_federal_agency_code.setter
    def fac_federal_agency_code(self, fac_federal_agency_code):
        """Sets the fac_federal_agency_code of this Air03.

        Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.

        :param fac_federal_agency_code: The fac_federal_agency_code of this Air03.
        :type fac_federal_agency_code: str
        """
        if fac_federal_agency_code is None:
            raise ValueError("Invalid value for `fac_federal_agency_code`, must not be `None`")

        self._fac_federal_agency_code = fac_federal_agency_code

    @property
    def fac_federal_agency_name(self):
        """Gets the fac_federal_agency_name of this Air03.

        Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.

        :return: The fac_federal_agency_name of this Air03.
        :rtype: str
        """
        return self._fac_federal_agency_name

    @fac_federal_agency_name.setter
    def fac_federal_agency_name(self, fac_federal_agency_name):
        """Sets the fac_federal_agency_name of this Air03.

        Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.

        :param fac_federal_agency_name: The fac_federal_agency_name of this Air03.
        :type fac_federal_agency_name: str
        """
        if fac_federal_agency_name is None:
            raise ValueError("Invalid value for `fac_federal_agency_name`, must not be `None`")

        self._fac_federal_agency_name = fac_federal_agency_name

    @property
    def fac_ghgco2_releases(self):
        """Gets the fac_ghgco2_releases of this Air03.

        The annual sum of total release amounts and \"associated quantities\" of all linked Greenhouse Gas IDs from the Office of Air and Radiation \"Summary 2010 Greenhouse Gas Data.\" Units are reported as metric tons of CO2 equivalents per year (MTCO2e/year).

        :return: The fac_ghgco2_releases of this Air03.
        :rtype: str
        """
        return self._fac_ghgco2_releases

    @fac_ghgco2_releases.setter
    def fac_ghgco2_releases(self, fac_ghgco2_releases):
        """Sets the fac_ghgco2_releases of this Air03.

        The annual sum of total release amounts and \"associated quantities\" of all linked Greenhouse Gas IDs from the Office of Air and Radiation \"Summary 2010 Greenhouse Gas Data.\" Units are reported as metric tons of CO2 equivalents per year (MTCO2e/year).

        :param fac_ghgco2_releases: The fac_ghgco2_releases of this Air03.
        :type fac_ghgco2_releases: str
        """
        if fac_ghgco2_releases is None:
            raise ValueError("Invalid value for `fac_ghgco2_releases`, must not be `None`")

        self._fac_ghgco2_releases = fac_ghgco2_releases

    @property
    def fac_ghg_reporter(self):
        """Gets the fac_ghg_reporter of this Air03.

        Indicates whether the facility reports to the Greenhouse Gas Reporting Program (GHGRP)

        :return: The fac_ghg_reporter of this Air03.
        :rtype: str
        """
        return self._fac_ghg_reporter

    @fac_ghg_reporter.setter
    def fac_ghg_reporter(self, fac_ghg_reporter):
        """Sets the fac_ghg_reporter of this Air03.

        Indicates whether the facility reports to the Greenhouse Gas Reporting Program (GHGRP)

        :param fac_ghg_reporter: The fac_ghg_reporter of this Air03.
        :type fac_ghg_reporter: str
        """
        if fac_ghg_reporter is None:
            raise ValueError("Invalid value for `fac_ghg_reporter`, must not be `None`")

        self._fac_ghg_reporter = fac_ghg_reporter

    @property
    def fac_indian_cntry_flg(self):
        """Gets the fac_indian_cntry_flg of this Air03.

        Flag showing Y/N whether the facility is located in Indian Country.

        :return: The fac_indian_cntry_flg of this Air03.
        :rtype: str
        """
        return self._fac_indian_cntry_flg

    @fac_indian_cntry_flg.setter
    def fac_indian_cntry_flg(self, fac_indian_cntry_flg):
        """Sets the fac_indian_cntry_flg of this Air03.

        Flag showing Y/N whether the facility is located in Indian Country.

        :param fac_indian_cntry_flg: The fac_indian_cntry_flg of this Air03.
        :type fac_indian_cntry_flg: str
        """
        if fac_indian_cntry_flg is None:
            raise ValueError("Invalid value for `fac_indian_cntry_flg`, must not be `None`")

        self._fac_indian_cntry_flg = fac_indian_cntry_flg

    @property
    def fac_indian_spatial_flg(self):
        """Gets the fac_indian_spatial_flg of this Air03.

        Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.

        :return: The fac_indian_spatial_flg of this Air03.
        :rtype: str
        """
        return self._fac_indian_spatial_flg

    @fac_indian_spatial_flg.setter
    def fac_indian_spatial_flg(self, fac_indian_spatial_flg):
        """Sets the fac_indian_spatial_flg of this Air03.

        Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.

        :param fac_indian_spatial_flg: The fac_indian_spatial_flg of this Air03.
        :type fac_indian_spatial_flg: str
        """
        if fac_indian_spatial_flg is None:
            raise ValueError("Invalid value for `fac_indian_spatial_flg`, must not be `None`")

        self._fac_indian_spatial_flg = fac_indian_spatial_flg

    @property
    def fac_lat(self):
        """Gets the fac_lat of this Air03.

        The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :return: The fac_lat of this Air03.
        :rtype: str
        """
        return self._fac_lat

    @fac_lat.setter
    def fac_lat(self, fac_lat):
        """Sets the fac_lat of this Air03.

        The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :param fac_lat: The fac_lat of this Air03.
        :type fac_lat: str
        """
        if fac_lat is None:
            raise ValueError("Invalid value for `fac_lat`, must not be `None`")

        self._fac_lat = fac_lat

    @property
    def fac_long(self):
        """Gets the fac_long of this Air03.

        The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :return: The fac_long of this Air03.
        :rtype: str
        """
        return self._fac_long

    @fac_long.setter
    def fac_long(self, fac_long):
        """Sets the fac_long of this Air03.

        The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :param fac_long: The fac_long of this Air03.
        :type fac_long: str
        """
        if fac_long is None:
            raise ValueError("Invalid value for `fac_long`, must not be `None`")

        self._fac_long = fac_long

    @property
    def fac_map_flg(self):
        """Gets the fac_map_flg of this Air03.

        Graphical indicator denoting whether geographical data required to map a facility are available.

        :return: The fac_map_flg of this Air03.
        :rtype: str
        """
        return self._fac_map_flg

    @fac_map_flg.setter
    def fac_map_flg(self, fac_map_flg):
        """Sets the fac_map_flg of this Air03.

        Graphical indicator denoting whether geographical data required to map a facility are available.

        :param fac_map_flg: The fac_map_flg of this Air03.
        :type fac_map_flg: str
        """
        if fac_map_flg is None:
            raise ValueError("Invalid value for `fac_map_flg`, must not be `None`")

        self._fac_map_flg = fac_map_flg

    @property
    def fac_map_icon(self):
        """Gets the fac_map_icon of this Air03.

        The default map icon image file calculated for the facility by the ECHO program.

        :return: The fac_map_icon of this Air03.
        :rtype: str
        """
        return self._fac_map_icon

    @fac_map_icon.setter
    def fac_map_icon(self, fac_map_icon):
        """Sets the fac_map_icon of this Air03.

        The default map icon image file calculated for the facility by the ECHO program.

        :param fac_map_icon: The fac_map_icon of this Air03.
        :type fac_map_icon: str
        """
        if fac_map_icon is None:
            raise ValueError("Invalid value for `fac_map_icon`, must not be `None`")

        self._fac_map_icon = fac_map_icon

    @property
    def fac_naa_flag(self):
        """Gets the fac_naa_flag of this Air03.

        Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.

        :return: The fac_naa_flag of this Air03.
        :rtype: str
        """
        return self._fac_naa_flag

    @fac_naa_flag.setter
    def fac_naa_flag(self, fac_naa_flag):
        """Sets the fac_naa_flag of this Air03.

        Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.

        :param fac_naa_flag: The fac_naa_flag of this Air03.
        :type fac_naa_flag: str
        """
        if fac_naa_flag is None:
            raise ValueError("Invalid value for `fac_naa_flag`, must not be `None`")

        self._fac_naa_flag = fac_naa_flag

    @property
    def fac_percent_minority(self):
        """Gets the fac_percent_minority of this Air03.

        Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.

        :return: The fac_percent_minority of this Air03.
        :rtype: str
        """
        return self._fac_percent_minority

    @fac_percent_minority.setter
    def fac_percent_minority(self, fac_percent_minority):
        """Sets the fac_percent_minority of this Air03.

        Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.

        :param fac_percent_minority: The fac_percent_minority of this Air03.
        :type fac_percent_minority: str
        """
        if fac_percent_minority is None:
            raise ValueError("Invalid value for `fac_percent_minority`, must not be `None`")

        self._fac_percent_minority = fac_percent_minority

    @property
    def fac_population_density(self):
        """Gets the fac_population_density of this Air03.

        The number of persons per square mile in the profiled area.

        :return: The fac_population_density of this Air03.
        :rtype: str
        """
        return self._fac_population_density

    @fac_population_density.setter
    def fac_population_density(self, fac_population_density):
        """Sets the fac_population_density of this Air03.

        The number of persons per square mile in the profiled area.

        :param fac_population_density: The fac_population_density of this Air03.
        :type fac_population_density: str
        """
        if fac_population_density is None:
            raise ValueError("Invalid value for `fac_population_density`, must not be `None`")

        self._fac_population_density = fac_population_density

    @property
    def fac_sic_codes(self):
        """Gets the fac_sic_codes of this Air03.

        Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.

        :return: The fac_sic_codes of this Air03.
        :rtype: str
        """
        return self._fac_sic_codes

    @fac_sic_codes.setter
    def fac_sic_codes(self, fac_sic_codes):
        """Sets the fac_sic_codes of this Air03.

        Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.

        :param fac_sic_codes: The fac_sic_codes of this Air03.
        :type fac_sic_codes: str
        """
        if fac_sic_codes is None:
            raise ValueError("Invalid value for `fac_sic_codes`, must not be `None`")

        self._fac_sic_codes = fac_sic_codes

    @property
    def fac_std_county_name(self):
        """Gets the fac_std_county_name of this Air03.

        The standardized  facility county name from EPA's Facility Registry System

        :return: The fac_std_county_name of this Air03.
        :rtype: str
        """
        return self._fac_std_county_name

    @fac_std_county_name.setter
    def fac_std_county_name(self, fac_std_county_name):
        """Sets the fac_std_county_name of this Air03.

        The standardized  facility county name from EPA's Facility Registry System

        :param fac_std_county_name: The fac_std_county_name of this Air03.
        :type fac_std_county_name: str
        """
        if fac_std_county_name is None:
            raise ValueError("Invalid value for `fac_std_county_name`, must not be `None`")

        self._fac_std_county_name = fac_std_county_name

    @property
    def fac_triair_releases(self):
        """Gets the fac_triair_releases of this Air03.

        The total chemical releases to air, in pounds, as reported to TRI by the facility for the most recent reporting year.

        :return: The fac_triair_releases of this Air03.
        :rtype: str
        """
        return self._fac_triair_releases

    @fac_triair_releases.setter
    def fac_triair_releases(self, fac_triair_releases):
        """Sets the fac_triair_releases of this Air03.

        The total chemical releases to air, in pounds, as reported to TRI by the facility for the most recent reporting year.

        :param fac_triair_releases: The fac_triair_releases of this Air03.
        :type fac_triair_releases: str
        """
        if fac_triair_releases is None:
            raise ValueError("Invalid value for `fac_triair_releases`, must not be `None`")

        self._fac_triair_releases = fac_triair_releases

    @property
    def fac_tri_carc_air_releases(self):
        """Gets the fac_tri_carc_air_releases of this Air03.

        The pounds of chemicals considered to be carcinogens released to air, as reported to TRI for the most recent reporting year. Chemicals are classified as carcinogens under the requirements of the Occupational Safety and Health Administration (OSHA).

        :return: The fac_tri_carc_air_releases of this Air03.
        :rtype: str
        """
        return self._fac_tri_carc_air_releases

    @fac_tri_carc_air_releases.setter
    def fac_tri_carc_air_releases(self, fac_tri_carc_air_releases):
        """Sets the fac_tri_carc_air_releases of this Air03.

        The pounds of chemicals considered to be carcinogens released to air, as reported to TRI for the most recent reporting year. Chemicals are classified as carcinogens under the requirements of the Occupational Safety and Health Administration (OSHA).

        :param fac_tri_carc_air_releases: The fac_tri_carc_air_releases of this Air03.
        :type fac_tri_carc_air_releases: str
        """
        if fac_tri_carc_air_releases is None:
            raise ValueError("Invalid value for `fac_tri_carc_air_releases`, must not be `None`")

        self._fac_tri_carc_air_releases = fac_tri_carc_air_releases

    @property
    def fac_tri_haps_releases(self):
        """Gets the fac_tri_haps_releases of this Air03.

        The pounds of chemicals classified as hazardous air pollutants (HAPS) released to air in pounds per year, as reported to TRI for the most recent reporting year.

        :return: The fac_tri_haps_releases of this Air03.
        :rtype: str
        """
        return self._fac_tri_haps_releases

    @fac_tri_haps_releases.setter
    def fac_tri_haps_releases(self, fac_tri_haps_releases):
        """Sets the fac_tri_haps_releases of this Air03.

        The pounds of chemicals classified as hazardous air pollutants (HAPS) released to air in pounds per year, as reported to TRI for the most recent reporting year.

        :param fac_tri_haps_releases: The fac_tri_haps_releases of this Air03.
        :type fac_tri_haps_releases: str
        """
        if fac_tri_haps_releases is None:
            raise ValueError("Invalid value for `fac_tri_haps_releases`, must not be `None`")

        self._fac_tri_haps_releases = fac_tri_haps_releases

    @property
    def fac_tri_reporter(self):
        """Gets the fac_tri_reporter of this Air03.

        Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.

        :return: The fac_tri_reporter of this Air03.
        :rtype: str
        """
        return self._fac_tri_reporter

    @fac_tri_reporter.setter
    def fac_tri_reporter(self, fac_tri_reporter):
        """Sets the fac_tri_reporter of this Air03.

        Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.

        :param fac_tri_reporter: The fac_tri_reporter of this Air03.
        :type fac_tri_reporter: str
        """
        if fac_tri_reporter is None:
            raise ValueError("Invalid value for `fac_tri_reporter`, must not be `None`")

        self._fac_tri_reporter = fac_tri_reporter

    @property
    def fac_us_mex_border_flg(self):
        """Gets the fac_us_mex_border_flg of this Air03.

        A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.

        :return: The fac_us_mex_border_flg of this Air03.
        :rtype: str
        """
        return self._fac_us_mex_border_flg

    @fac_us_mex_border_flg.setter
    def fac_us_mex_border_flg(self, fac_us_mex_border_flg):
        """Sets the fac_us_mex_border_flg of this Air03.

        A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.

        :param fac_us_mex_border_flg: The fac_us_mex_border_flg of this Air03.
        :type fac_us_mex_border_flg: str
        """
        if fac_us_mex_border_flg is None:
            raise ValueError("Invalid value for `fac_us_mex_border_flg`, must not be `None`")

        self._fac_us_mex_border_flg = fac_us_mex_border_flg

    @property
    def ghgids(self):
        """Gets the ghgids of this Air03.

        A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.

        :return: The ghgids of this Air03.
        :rtype: str
        """
        return self._ghgids

    @ghgids.setter
    def ghgids(self, ghgids):
        """Sets the ghgids of this Air03.

        A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.

        :param ghgids: The ghgids of this Air03.
        :type ghgids: str
        """
        if ghgids is None:
            raise ValueError("Invalid value for `ghgids`, must not be `None`")

        self._ghgids = ghgids

    @property
    def has_poll_rpt(self):
        """Gets the has_poll_rpt of this Air03.

        ???

        :return: The has_poll_rpt of this Air03.
        :rtype: str
        """
        return self._has_poll_rpt

    @has_poll_rpt.setter
    def has_poll_rpt(self, has_poll_rpt):
        """Sets the has_poll_rpt of this Air03.

        ???

        :param has_poll_rpt: The has_poll_rpt of this Air03.
        :type has_poll_rpt: str
        """
        if has_poll_rpt is None:
            raise ValueError("Invalid value for `has_poll_rpt`, must not be `None`")

        self._has_poll_rpt = has_poll_rpt

    @property
    def infea5yr_flag(self):
        """Gets the infea5yr_flag of this Air03.

        Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.

        :return: The infea5yr_flag of this Air03.
        :rtype: str
        """
        return self._infea5yr_flag

    @infea5yr_flag.setter
    def infea5yr_flag(self, infea5yr_flag):
        """Sets the infea5yr_flag of this Air03.

        Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.

        :param infea5yr_flag: The infea5yr_flag of this Air03.
        :type infea5yr_flag: str
        """
        if infea5yr_flag is None:
            raise ValueError("Invalid value for `infea5yr_flag`, must not be `None`")

        self._infea5yr_flag = infea5yr_flag

    @property
    def insp5yr_flag(self):
        """Gets the insp5yr_flag of this Air03.

        Indicates if the facility has an inspection within the last 5 years. 1 = Yes

        :return: The insp5yr_flag of this Air03.
        :rtype: str
        """
        return self._insp5yr_flag

    @insp5yr_flag.setter
    def insp5yr_flag(self, insp5yr_flag):
        """Sets the insp5yr_flag of this Air03.

        Indicates if the facility has an inspection within the last 5 years. 1 = Yes

        :param insp5yr_flag: The insp5yr_flag of this Air03.
        :type insp5yr_flag: str
        """
        if insp5yr_flag is None:
            raise ValueError("Invalid value for `insp5yr_flag`, must not be `None`")

        self._insp5yr_flag = insp5yr_flag

    @property
    def last_date_pce(self):
        """Gets the last_date_pce of this Air03.

        The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA or a state agency was completed.

        :return: The last_date_pce of this Air03.
        :rtype: str
        """
        return self._last_date_pce

    @last_date_pce.setter
    def last_date_pce(self, last_date_pce):
        """Sets the last_date_pce of this Air03.

        The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA or a state agency was completed.

        :param last_date_pce: The last_date_pce of this Air03.
        :type last_date_pce: str
        """
        if last_date_pce is None:
            raise ValueError("Invalid value for `last_date_pce`, must not be `None`")

        self._last_date_pce = last_date_pce

    @property
    def last_date_pce_epa(self):
        """Gets the last_date_pce_epa of this Air03.

        The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA was completed.

        :return: The last_date_pce_epa of this Air03.
        :rtype: str
        """
        return self._last_date_pce_epa

    @last_date_pce_epa.setter
    def last_date_pce_epa(self, last_date_pce_epa):
        """Sets the last_date_pce_epa of this Air03.

        The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA was completed.

        :param last_date_pce_epa: The last_date_pce_epa of this Air03.
        :type last_date_pce_epa: str
        """
        if last_date_pce_epa is None:
            raise ValueError("Invalid value for `last_date_pce_epa`, must not be `None`")

        self._last_date_pce_epa = last_date_pce_epa

    @property
    def last_date_pce_sta(self):
        """Gets the last_date_pce_sta of this Air03.

        The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by a state agency was completed.

        :return: The last_date_pce_sta of this Air03.
        :rtype: str
        """
        return self._last_date_pce_sta

    @last_date_pce_sta.setter
    def last_date_pce_sta(self, last_date_pce_sta):
        """Sets the last_date_pce_sta of this Air03.

        The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by a state agency was completed.

        :param last_date_pce_sta: The last_date_pce_sta of this Air03.
        :type last_date_pce_sta: str
        """
        if last_date_pce_sta is None:
            raise ValueError("Invalid value for `last_date_pce_sta`, must not be `None`")

        self._last_date_pce_sta = last_date_pce_sta

    @property
    def local_control_region_code(self):
        """Gets the local_control_region_code of this Air03.

        Code for regions within a state. Search criteria for DFR in OTIS.

        :return: The local_control_region_code of this Air03.
        :rtype: str
        """
        return self._local_control_region_code

    @local_control_region_code.setter
    def local_control_region_code(self, local_control_region_code):
        """Sets the local_control_region_code of this Air03.

        Code for regions within a state. Search criteria for DFR in OTIS.

        :param local_control_region_code: The local_control_region_code of this Air03.
        :type local_control_region_code: str
        """
        if local_control_region_code is None:
            raise ValueError("Invalid value for `local_control_region_code`, must not be `None`")

        self._local_control_region_code = local_control_region_code

    @property
    def local_control_region_name(self):
        """Gets the local_control_region_name of this Air03.

        Regions within a state. Search criteria for DFR in OTIS.

        :return: The local_control_region_name of this Air03.
        :rtype: str
        """
        return self._local_control_region_name

    @local_control_region_name.setter
    def local_control_region_name(self, local_control_region_name):
        """Sets the local_control_region_name of this Air03.

        Regions within a state. Search criteria for DFR in OTIS.

        :param local_control_region_name: The local_control_region_name of this Air03.
        :type local_control_region_name: str
        """
        if local_control_region_name is None:
            raise ValueError("Invalid value for `local_control_region_name`, must not be `None`")

        self._local_control_region_name = local_control_region_name

    @property
    def lower48(self):
        """Gets the lower48 of this Air03.

        Flag showing Y/N whether location is within the contiguous (lower 48) United States.

        :return: The lower48 of this Air03.
        :rtype: str
        """
        return self._lower48

    @lower48.setter
    def lower48(self, lower48):
        """Sets the lower48 of this Air03.

        Flag showing Y/N whether location is within the contiguous (lower 48) United States.

        :param lower48: The lower48 of this Air03.
        :type lower48: str
        """
        if lower48 is None:
            raise ValueError("Invalid value for `lower48`, must not be `None`")

        self._lower48 = lower48

    @property
    def maint_pollutants_naa(self):
        """Gets the maint_pollutants_naa of this Air03.


        :return: The maint_pollutants_naa of this Air03.
        :rtype: str
        """
        return self._maint_pollutants_naa

    @maint_pollutants_naa.setter
    def maint_pollutants_naa(self, maint_pollutants_naa):
        """Sets the maint_pollutants_naa of this Air03.


        :param maint_pollutants_naa: The maint_pollutants_naa of this Air03.
        :type maint_pollutants_naa: str
        """
        if maint_pollutants_naa is None:
            raise ValueError("Invalid value for `maint_pollutants_naa`, must not be `None`")

        self._maint_pollutants_naa = maint_pollutants_naa

    @property
    def maint_standards_naa(self):
        """Gets the maint_standards_naa of this Air03.


        :return: The maint_standards_naa of this Air03.
        :rtype: str
        """
        return self._maint_standards_naa

    @maint_standards_naa.setter
    def maint_standards_naa(self, maint_standards_naa):
        """Sets the maint_standards_naa of this Air03.


        :param maint_standards_naa: The maint_standards_naa of this Air03.
        :type maint_standards_naa: str
        """
        if maint_standards_naa is None:
            raise ValueError("Invalid value for `maint_standards_naa`, must not be `None`")

        self._maint_standards_naa = maint_standards_naa

    @property
    def maint_status_naa(self):
        """Gets the maint_status_naa of this Air03.


        :return: The maint_status_naa of this Air03.
        :rtype: str
        """
        return self._maint_status_naa

    @maint_status_naa.setter
    def maint_status_naa(self, maint_status_naa):
        """Sets the maint_status_naa of this Air03.


        :param maint_status_naa: The maint_status_naa of this Air03.
        :type maint_status_naa: str
        """
        if maint_status_naa is None:
            raise ValueError("Invalid value for `maint_status_naa`, must not be `None`")

        self._maint_status_naa = maint_status_naa

    @property
    def map(self):
        """Gets the map of this Air03.

        No Longer Used.

        :return: The map of this Air03.
        :rtype: str
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this Air03.

        No Longer Used.

        :param map: The map of this Air03.
        :type map: str
        """
        if map is None:
            raise ValueError("Invalid value for `map`, must not be `None`")

        self._map = map

    @property
    def max_pctile_us(self):
        """Gets the max_pctile_us of this Air03.

        The maximum percentile from all individual EJSCREEN indicators.

        :return: The max_pctile_us of this Air03.
        :rtype: str
        """
        return self._max_pctile_us

    @max_pctile_us.setter
    def max_pctile_us(self, max_pctile_us):
        """Sets the max_pctile_us of this Air03.

        The maximum percentile from all individual EJSCREEN indicators.

        :param max_pctile_us: The max_pctile_us of this Air03.
        :type max_pctile_us: str
        """
        if max_pctile_us is None:
            raise ValueError("Invalid value for `max_pctile_us`, must not be `None`")

        self._max_pctile_us = max_pctile_us

    @property
    def max_score(self):
        """Gets the max_score of this Air03.

        A sorting score for internal use.

        :return: The max_score of this Air03.
        :rtype: str
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this Air03.

        A sorting score for internal use.

        :param max_score: The max_score of this Air03.
        :type max_score: str
        """
        if max_score is None:
            raise ValueError("Invalid value for `max_score`, must not be `None`")

        self._max_score = max_score

    @property
    def na_pollutants_naa(self):
        """Gets the na_pollutants_naa of this Air03.


        :return: The na_pollutants_naa of this Air03.
        :rtype: str
        """
        return self._na_pollutants_naa

    @na_pollutants_naa.setter
    def na_pollutants_naa(self, na_pollutants_naa):
        """Sets the na_pollutants_naa of this Air03.


        :param na_pollutants_naa: The na_pollutants_naa of this Air03.
        :type na_pollutants_naa: str
        """
        if na_pollutants_naa is None:
            raise ValueError("Invalid value for `na_pollutants_naa`, must not be `None`")

        self._na_pollutants_naa = na_pollutants_naa

    @property
    def na_standards_naa(self):
        """Gets the na_standards_naa of this Air03.


        :return: The na_standards_naa of this Air03.
        :rtype: str
        """
        return self._na_standards_naa

    @na_standards_naa.setter
    def na_standards_naa(self, na_standards_naa):
        """Sets the na_standards_naa of this Air03.


        :param na_standards_naa: The na_standards_naa of this Air03.
        :type na_standards_naa: str
        """
        if na_standards_naa is None:
            raise ValueError("Invalid value for `na_standards_naa`, must not be `None`")

        self._na_standards_naa = na_standards_naa

    @property
    def na_status_naa(self):
        """Gets the na_status_naa of this Air03.


        :return: The na_status_naa of this Air03.
        :rtype: str
        """
        return self._na_status_naa

    @na_status_naa.setter
    def na_status_naa(self, na_status_naa):
        """Sets the na_status_naa of this Air03.


        :param na_status_naa: The na_status_naa of this Air03.
        :type na_status_naa: str
        """
        if na_status_naa is None:
            raise ValueError("Invalid value for `na_status_naa`, must not be `None`")

        self._na_status_naa = na_status_naa

    @property
    def naa_categories(self):
        """Gets the naa_categories of this Air03.

        The nonattainment area categories that the facility is in, derived spatially based on the facility's geographic coordinates in FRS.�

        :return: The naa_categories of this Air03.
        :rtype: str
        """
        return self._naa_categories

    @naa_categories.setter
    def naa_categories(self, naa_categories):
        """Sets the naa_categories of this Air03.

        The nonattainment area categories that the facility is in, derived spatially based on the facility's geographic coordinates in FRS.�

        :param naa_categories: The naa_categories of this Air03.
        :type naa_categories: str
        """
        if naa_categories is None:
            raise ValueError("Invalid value for `naa_categories`, must not be `None`")

        self._naa_categories = naa_categories

    @property
    def naa_pollutants(self):
        """Gets the naa_pollutants of this Air03.

        All criteria pollutants that the facility is in nonattainment for.

        :return: The naa_pollutants of this Air03.
        :rtype: str
        """
        return self._naa_pollutants

    @naa_pollutants.setter
    def naa_pollutants(self, naa_pollutants):
        """Sets the naa_pollutants of this Air03.

        All criteria pollutants that the facility is in nonattainment for.

        :param naa_pollutants: The naa_pollutants of this Air03.
        :type naa_pollutants: str
        """
        if naa_pollutants is None:
            raise ValueError("Invalid value for `naa_pollutants`, must not be `None`")

        self._naa_pollutants = naa_pollutants

    @property
    def other_permit_ids(self):
        """Gets the other_permit_ids of this Air03.


        :return: The other_permit_ids of this Air03.
        :rtype: str
        """
        return self._other_permit_ids

    @other_permit_ids.setter
    def other_permit_ids(self, other_permit_ids):
        """Sets the other_permit_ids of this Air03.


        :param other_permit_ids: The other_permit_ids of this Air03.
        :type other_permit_ids: str
        """
        if other_permit_ids is None:
            raise ValueError("Invalid value for `other_permit_ids`, must not be `None`")

        self._other_permit_ids = other_permit_ids

    @property
    def over80_count_us(self):
        """Gets the over80_count_us of this Air03.

        The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.

        :return: The over80_count_us of this Air03.
        :rtype: str
        """
        return self._over80_count_us

    @over80_count_us.setter
    def over80_count_us(self, over80_count_us):
        """Sets the over80_count_us of this Air03.

        The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.

        :param over80_count_us: The over80_count_us of this Air03.
        :type over80_count_us: str
        """
        if over80_count_us is None:
            raise ValueError("Invalid value for `over80_count_us`, must not be `None`")

        self._over80_count_us = over80_count_us

    @property
    def pctile_cancer_us(self):
        """Gets the pctile_cancer_us of this Air03.

        The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.

        :return: The pctile_cancer_us of this Air03.
        :rtype: str
        """
        return self._pctile_cancer_us

    @pctile_cancer_us.setter
    def pctile_cancer_us(self, pctile_cancer_us):
        """Sets the pctile_cancer_us of this Air03.

        The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.

        :param pctile_cancer_us: The pctile_cancer_us of this Air03.
        :type pctile_cancer_us: str
        """
        if pctile_cancer_us is None:
            raise ValueError("Invalid value for `pctile_cancer_us`, must not be `None`")

        self._pctile_cancer_us = pctile_cancer_us

    @property
    def pctile_dpm_us(self):
        """Gets the pctile_dpm_us of this Air03.

        The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.

        :return: The pctile_dpm_us of this Air03.
        :rtype: str
        """
        return self._pctile_dpm_us

    @pctile_dpm_us.setter
    def pctile_dpm_us(self, pctile_dpm_us):
        """Sets the pctile_dpm_us of this Air03.

        The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.

        :param pctile_dpm_us: The pctile_dpm_us of this Air03.
        :type pctile_dpm_us: str
        """
        if pctile_dpm_us is None:
            raise ValueError("Invalid value for `pctile_dpm_us`, must not be `None`")

        self._pctile_dpm_us = pctile_dpm_us

    @property
    def pctile_o3_us(self):
        """Gets the pctile_o3_us of this Air03.

        The national percentile of the census block group for the EJSCREEN ozone indicator.

        :return: The pctile_o3_us of this Air03.
        :rtype: str
        """
        return self._pctile_o3_us

    @pctile_o3_us.setter
    def pctile_o3_us(self, pctile_o3_us):
        """Sets the pctile_o3_us of this Air03.

        The national percentile of the census block group for the EJSCREEN ozone indicator.

        :param pctile_o3_us: The pctile_o3_us of this Air03.
        :type pctile_o3_us: str
        """
        if pctile_o3_us is None:
            raise ValueError("Invalid value for `pctile_o3_us`, must not be `None`")

        self._pctile_o3_us = pctile_o3_us

    @property
    def pctile_pctpre1960_us(self):
        """Gets the pctile_pctpre1960_us of this Air03.

        The national percentile of the census block group for the EJSCREEN Lead paint indicator.

        :return: The pctile_pctpre1960_us of this Air03.
        :rtype: str
        """
        return self._pctile_pctpre1960_us

    @pctile_pctpre1960_us.setter
    def pctile_pctpre1960_us(self, pctile_pctpre1960_us):
        """Sets the pctile_pctpre1960_us of this Air03.

        The national percentile of the census block group for the EJSCREEN Lead paint indicator.

        :param pctile_pctpre1960_us: The pctile_pctpre1960_us of this Air03.
        :type pctile_pctpre1960_us: str
        """
        if pctile_pctpre1960_us is None:
            raise ValueError("Invalid value for `pctile_pctpre1960_us`, must not be `None`")

        self._pctile_pctpre1960_us = pctile_pctpre1960_us

    @property
    def pctile_pm_us(self):
        """Gets the pctile_pm_us of this Air03.

        The national percentile of the census block group for the EJSCREEN particulate matter indicator.

        :return: The pctile_pm_us of this Air03.
        :rtype: str
        """
        return self._pctile_pm_us

    @pctile_pm_us.setter
    def pctile_pm_us(self, pctile_pm_us):
        """Sets the pctile_pm_us of this Air03.

        The national percentile of the census block group for the EJSCREEN particulate matter indicator.

        :param pctile_pm_us: The pctile_pm_us of this Air03.
        :type pctile_pm_us: str
        """
        if pctile_pm_us is None:
            raise ValueError("Invalid value for `pctile_pm_us`, must not be `None`")

        self._pctile_pm_us = pctile_pm_us

    @property
    def pctile_proximity_npdesus(self):
        """Gets the pctile_proximity_npdesus of this Air03.

        The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.

        :return: The pctile_proximity_npdesus of this Air03.
        :rtype: str
        """
        return self._pctile_proximity_npdesus

    @pctile_proximity_npdesus.setter
    def pctile_proximity_npdesus(self, pctile_proximity_npdesus):
        """Sets the pctile_proximity_npdesus of this Air03.

        The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.

        :param pctile_proximity_npdesus: The pctile_proximity_npdesus of this Air03.
        :type pctile_proximity_npdesus: str
        """
        if pctile_proximity_npdesus is None:
            raise ValueError("Invalid value for `pctile_proximity_npdesus`, must not be `None`")

        self._pctile_proximity_npdesus = pctile_proximity_npdesus

    @property
    def pctile_proximity_npl_us(self):
        """Gets the pctile_proximity_npl_us of this Air03.

        The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.

        :return: The pctile_proximity_npl_us of this Air03.
        :rtype: str
        """
        return self._pctile_proximity_npl_us

    @pctile_proximity_npl_us.setter
    def pctile_proximity_npl_us(self, pctile_proximity_npl_us):
        """Sets the pctile_proximity_npl_us of this Air03.

        The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.

        :param pctile_proximity_npl_us: The pctile_proximity_npl_us of this Air03.
        :type pctile_proximity_npl_us: str
        """
        if pctile_proximity_npl_us is None:
            raise ValueError("Invalid value for `pctile_proximity_npl_us`, must not be `None`")

        self._pctile_proximity_npl_us = pctile_proximity_npl_us

    @property
    def pctile_proximity_rmp_us(self):
        """Gets the pctile_proximity_rmp_us of this Air03.

        The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.

        :return: The pctile_proximity_rmp_us of this Air03.
        :rtype: str
        """
        return self._pctile_proximity_rmp_us

    @pctile_proximity_rmp_us.setter
    def pctile_proximity_rmp_us(self, pctile_proximity_rmp_us):
        """Sets the pctile_proximity_rmp_us of this Air03.

        The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.

        :param pctile_proximity_rmp_us: The pctile_proximity_rmp_us of this Air03.
        :type pctile_proximity_rmp_us: str
        """
        if pctile_proximity_rmp_us is None:
            raise ValueError("Invalid value for `pctile_proximity_rmp_us`, must not be `None`")

        self._pctile_proximity_rmp_us = pctile_proximity_rmp_us

    @property
    def pctile_proximity_tsdf_us(self):
        """Gets the pctile_proximity_tsdf_us of this Air03.

        The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.

        :return: The pctile_proximity_tsdf_us of this Air03.
        :rtype: str
        """
        return self._pctile_proximity_tsdf_us

    @pctile_proximity_tsdf_us.setter
    def pctile_proximity_tsdf_us(self, pctile_proximity_tsdf_us):
        """Sets the pctile_proximity_tsdf_us of this Air03.

        The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.

        :param pctile_proximity_tsdf_us: The pctile_proximity_tsdf_us of this Air03.
        :type pctile_proximity_tsdf_us: str
        """
        if pctile_proximity_tsdf_us is None:
            raise ValueError("Invalid value for `pctile_proximity_tsdf_us`, must not be `None`")

        self._pctile_proximity_tsdf_us = pctile_proximity_tsdf_us

    @property
    def pctile_resp_us(self):
        """Gets the pctile_resp_us of this Air03.

        The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.

        :return: The pctile_resp_us of this Air03.
        :rtype: str
        """
        return self._pctile_resp_us

    @pctile_resp_us.setter
    def pctile_resp_us(self, pctile_resp_us):
        """Sets the pctile_resp_us of this Air03.

        The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.

        :param pctile_resp_us: The pctile_resp_us of this Air03.
        :type pctile_resp_us: str
        """
        if pctile_resp_us is None:
            raise ValueError("Invalid value for `pctile_resp_us`, must not be `None`")

        self._pctile_resp_us = pctile_resp_us

    @property
    def pctile_traffic_score_us(self):
        """Gets the pctile_traffic_score_us of this Air03.

        The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.

        :return: The pctile_traffic_score_us of this Air03.
        :rtype: str
        """
        return self._pctile_traffic_score_us

    @pctile_traffic_score_us.setter
    def pctile_traffic_score_us(self, pctile_traffic_score_us):
        """Sets the pctile_traffic_score_us of this Air03.

        The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.

        :param pctile_traffic_score_us: The pctile_traffic_score_us of this Air03.
        :type pctile_traffic_score_us: str
        """
        if pctile_traffic_score_us is None:
            raise ValueError("Invalid value for `pctile_traffic_score_us`, must not be `None`")

        self._pctile_traffic_score_us = pctile_traffic_score_us

    @property
    def rcraids(self):
        """Gets the rcraids of this Air03.

        A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.

        :return: The rcraids of this Air03.
        :rtype: str
        """
        return self._rcraids

    @rcraids.setter
    def rcraids(self, rcraids):
        """Sets the rcraids of this Air03.

        A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.

        :param rcraids: The rcraids of this Air03.
        :type rcraids: str
        """
        if rcraids is None:
            raise ValueError("Invalid value for `rcraids`, must not be `None`")

        self._rcraids = rcraids

    @property
    def reference_point(self):
        """Gets the reference_point of this Air03.

        ??

        :return: The reference_point of this Air03.
        :rtype: str
        """
        return self._reference_point

    @reference_point.setter
    def reference_point(self, reference_point):
        """Sets the reference_point of this Air03.

        ??

        :param reference_point: The reference_point of this Air03.
        :type reference_point: str
        """
        if reference_point is None:
            raise ValueError("Invalid value for `reference_point`, must not be `None`")

        self._reference_point = reference_point

    @property
    def registry_id(self):
        """Gets the registry_id of this Air03.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :return: The registry_id of this Air03.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this Air03.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :param registry_id: The registry_id of this Air03.
        :type registry_id: str
        """
        if registry_id is None:
            raise ValueError("Invalid value for `registry_id`, must not be `None`")

        self._registry_id = registry_id

    @property
    def rmp_ids(self):
        """Gets the rmp_ids of this Air03.

        A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.

        :return: The rmp_ids of this Air03.
        :rtype: str
        """
        return self._rmp_ids

    @rmp_ids.setter
    def rmp_ids(self, rmp_ids):
        """Sets the rmp_ids of this Air03.

        A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.

        :param rmp_ids: The rmp_ids of this Air03.
        :type rmp_ids: str
        """
        if rmp_ids is None:
            raise ValueError("Invalid value for `rmp_ids`, must not be `None`")

        self._rmp_ids = rmp_ids

    @property
    def sdwaids(self):
        """Gets the sdwaids of this Air03.

        A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).

        :return: The sdwaids of this Air03.
        :rtype: str
        """
        return self._sdwaids

    @sdwaids.setter
    def sdwaids(self, sdwaids):
        """Sets the sdwaids of this Air03.

        A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).

        :param sdwaids: The sdwaids of this Air03.
        :type sdwaids: str
        """
        if sdwaids is None:
            raise ValueError("Invalid value for `sdwaids`, must not be `None`")

        self._sdwaids = sdwaids

    @property
    def score(self):
        """Gets the score of this Air03.


        :return: The score of this Air03.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Air03.


        :param score: The score of this Air03.
        :type score: str
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def source_id(self):
        """Gets the source_id of this Air03.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Air03.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Air03.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Air03.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def statute(self):
        """Gets the statute of this Air03.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :return: The statute of this Air03.
        :rtype: str
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this Air03.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :param statute: The statute of this Air03.
        :type statute: str
        """
        if statute is None:
            raise ValueError("Invalid value for `statute`, must not be `None`")

        self._statute = statute

    @property
    def triids(self):
        """Gets the triids of this Air03.

        A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.

        :return: The triids of this Air03.
        :rtype: str
        """
        return self._triids

    @triids.setter
    def triids(self, triids):
        """Sets the triids of this Air03.

        A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.

        :param triids: The triids of this Air03.
        :type triids: str
        """
        if triids is None:
            raise ValueError("Invalid value for `triids`, must not be `None`")

        self._triids = triids

    @property
    def tr_ibal_flag(self):
        """Gets the tr_ibal_flag of this Air03.

        A flag indicating that the facility is within a tribal area.

        :return: The tr_ibal_flag of this Air03.
        :rtype: str
        """
        return self._tr_ibal_flag

    @tr_ibal_flag.setter
    def tr_ibal_flag(self, tr_ibal_flag):
        """Sets the tr_ibal_flag of this Air03.

        A flag indicating that the facility is within a tribal area.

        :param tr_ibal_flag: The tr_ibal_flag of this Air03.
        :type tr_ibal_flag: str
        """
        if tr_ibal_flag is None:
            raise ValueError("Invalid value for `tr_ibal_flag`, must not be `None`")

        self._tr_ibal_flag = tr_ibal_flag

    @property
    def viol_flag(self):
        """Gets the viol_flag of this Air03.

        Indicates if the facility had a violation within the last 3 years. 1 = Yes

        :return: The viol_flag of this Air03.
        :rtype: str
        """
        return self._viol_flag

    @viol_flag.setter
    def viol_flag(self, viol_flag):
        """Sets the viol_flag of this Air03.

        Indicates if the facility had a violation within the last 3 years. 1 = Yes

        :param viol_flag: The viol_flag of this Air03.
        :type viol_flag: str
        """
        if viol_flag is None:
            raise ValueError("Invalid value for `viol_flag`, must not be `None`")

        self._viol_flag = viol_flag

    @property
    def web_docs(self):
        """Gets the web_docs of this Air03.

        Contains flags that identify what web accessible documents are available for the facility.

        :return: The web_docs of this Air03.
        :rtype: str
        """
        return self._web_docs

    @web_docs.setter
    def web_docs(self, web_docs):
        """Sets the web_docs of this Air03.

        Contains flags that identify what web accessible documents are available for the facility.

        :param web_docs: The web_docs of this Air03.
        :type web_docs: str
        """
        if web_docs is None:
            raise ValueError("Invalid value for `web_docs`, must not be `None`")

        self._web_docs = web_docs
