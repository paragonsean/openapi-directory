/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAir06.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAir06::OAIAir06(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAir06::OAIAir06() {
    this->initializeModel();
}

OAIAir06::~OAIAir06() {}

void OAIAir06::initializeModel() {

    m_air3yr_compl_qtrs_history_isSet = false;
    m_air3yr_compl_qtrs_history_isValid = false;

    m_air_case_ids_isSet = false;
    m_air_case_ids_isValid = false;

    m_air_city_isSet = false;
    m_air_city_isValid = false;

    m_air_classification_isSet = false;
    m_air_classification_isValid = false;

    m_air_compl_status_isSet = false;
    m_air_compl_status_isValid = false;

    m_air_county_isSet = false;
    m_air_county_isValid = false;

    m_air_days_last_eval_isSet = false;
    m_air_days_last_eval_isValid = false;

    m_airepa_region_isSet = false;
    m_airepa_region_isValid = false;

    m_air_eval_cnt_isSet = false;
    m_air_eval_cnt_isValid = false;

    m_airfips_code_isSet = false;
    m_airfips_code_isValid = false;

    m_air_facility_type_code_isSet = false;
    m_air_facility_type_code_isValid = false;

    m_air_facility_type_desc_isSet = false;
    m_air_facility_type_desc_isValid = false;

    m_air_fea_cnt_isSet = false;
    m_air_fea_cnt_isValid = false;

    m_air_hpv_status_isSet = false;
    m_air_hpv_status_isValid = false;

    m_airids_isSet = false;
    m_airids_isValid = false;

    m_air_iea_cnt_isSet = false;
    m_air_iea_cnt_isValid = false;

    m_air_indian_cntry_flg_isSet = false;
    m_air_indian_cntry_flg_isValid = false;

    m_air_last_eval_date_isSet = false;
    m_air_last_eval_date_isValid = false;

    m_air_last_eval_date_epa_isSet = false;
    m_air_last_eval_date_epa_isValid = false;

    m_air_last_eval_date_state_isSet = false;
    m_air_last_eval_date_state_isValid = false;

    m_air_last_fea_date_isSet = false;
    m_air_last_fea_date_isValid = false;

    m_air_last_fea_date_epa_isSet = false;
    m_air_last_fea_date_epa_isValid = false;

    m_air_last_fea_date_state_isSet = false;
    m_air_last_fea_date_state_isValid = false;

    m_air_last_iea_date_isSet = false;
    m_air_last_iea_date_isValid = false;

    m_air_last_iea_date_epa_isSet = false;
    m_air_last_iea_date_epa_isValid = false;

    m_air_last_iea_date_state_isSet = false;
    m_air_last_iea_date_state_isValid = false;

    m_air_last_penalty_date_isSet = false;
    m_air_last_penalty_date_isValid = false;

    m_air_last_stck_date_epa_isSet = false;
    m_air_last_stck_date_epa_isValid = false;

    m_air_last_stck_date_state_isSet = false;
    m_air_last_stck_date_state_isValid = false;

    m_air_last_stck_test_date_isSet = false;
    m_air_last_stck_test_date_isValid = false;

    m_air_last_stck_test_results_isSet = false;
    m_air_last_stck_test_results_isValid = false;

    m_air_last_viol_date_isSet = false;
    m_air_last_viol_date_isValid = false;

    m_air_macts_isSet = false;
    m_air_macts_isValid = false;

    m_air_major_flag_isSet = false;
    m_air_major_flag_isValid = false;

    m_air_mnths_with_hpv_isSet = false;
    m_air_mnths_with_hpv_isValid = false;

    m_airnaics_isSet = false;
    m_airnaics_isValid = false;

    m_air_name_isSet = false;
    m_air_name_isValid = false;

    m_air_nsps_isSet = false;
    m_air_nsps_isValid = false;

    m_air_nspsm_isSet = false;
    m_air_nspsm_isValid = false;

    m_air_penalties_isSet = false;
    m_air_penalties_isValid = false;

    m_air_poll_recent_viol_isSet = false;
    m_air_poll_recent_viol_isValid = false;

    m_air_programs_isSet = false;
    m_air_programs_isValid = false;

    m_air_qtrs_with_hpv_isSet = false;
    m_air_qtrs_with_hpv_isValid = false;

    m_air_qtrs_with_viol_isSet = false;
    m_air_qtrs_with_viol_isValid = false;

    m_air_recent_viol_cnt_isSet = false;
    m_air_recent_viol_cnt_isValid = false;

    m_air_stack_test5_yr_all_isSet = false;
    m_air_stack_test5_yr_all_isValid = false;

    m_air_stack_test5_yr_fail_isSet = false;
    m_air_stack_test5_yr_fail_isValid = false;

    m_air_state_isSet = false;
    m_air_state_isValid = false;

    m_air_status_isSet = false;
    m_air_status_isValid = false;

    m_air_street_isSet = false;
    m_air_street_isValid = false;

    m_airtr_ibal_ep_aids_isSet = false;
    m_airtr_ibal_ep_aids_isValid = false;

    m_airtr_ibal_names_isSet = false;
    m_airtr_ibal_names_isValid = false;

    m_air_universe_isSet = false;
    m_air_universe_isValid = false;

    m_air_zip_isSet = false;
    m_air_zip_isValid = false;

    m_active_lower48_isSet = false;
    m_active_lower48_isValid = false;

    m_cwaids_isSet = false;
    m_cwaids_isValid = false;

    m_calculated_accuracy_meters_isSet = false;
    m_calculated_accuracy_meters_isValid = false;

    m_camd_ids_isSet = false;
    m_camd_ids_isValid = false;

    m_census_block_group_isSet = false;
    m_census_block_group_isValid = false;

    m_chesapeake_bay_flag_isSet = false;
    m_chesapeake_bay_flag_isValid = false;

    m_collection_method_isSet = false;
    m_collection_method_isValid = false;

    m_curr_sv_flag_isSet = false;
    m_curr_sv_flag_isValid = false;

    m_curr_vio_flag_isSet = false;
    m_curr_vio_flag_isValid = false;

    m_epa_system_isSet = false;
    m_epa_system_isValid = false;

    m_ea5yr_flag_isSet = false;
    m_ea5yr_flag_isValid = false;

    m_eis_ids_isSet = false;
    m_eis_ids_isValid = false;

    m_ejscreen_flag_isSet = false;
    m_ejscreen_flag_isValid = false;

    m_ejscreen_flag_us_isSet = false;
    m_ejscreen_flag_us_isValid = false;

    m_fac_camd_reporter_isSet = false;
    m_fac_camd_reporter_isValid = false;

    m_fac_county_name_isSet = false;
    m_fac_county_name_isValid = false;

    m_fac_derived_huc_isSet = false;
    m_fac_derived_huc_isValid = false;

    m_fac_derived_tr_ibes_isSet = false;
    m_fac_derived_tr_ibes_isValid = false;

    m_fac_derived_wbd_isSet = false;
    m_fac_derived_wbd_isValid = false;

    m_fac_derived_wbd_name_isSet = false;
    m_fac_derived_wbd_name_isValid = false;

    m_fac_eis_air_releases_isSet = false;
    m_fac_eis_air_releases_isValid = false;

    m_fac_eis_reporter_isSet = false;
    m_fac_eis_reporter_isValid = false;

    m_fac_fips_code_isSet = false;
    m_fac_fips_code_isValid = false;

    m_fac_federal_agency_code_isSet = false;
    m_fac_federal_agency_code_isValid = false;

    m_fac_federal_agency_name_isSet = false;
    m_fac_federal_agency_name_isValid = false;

    m_fac_ghgco2_releases_isSet = false;
    m_fac_ghgco2_releases_isValid = false;

    m_fac_ghg_reporter_isSet = false;
    m_fac_ghg_reporter_isValid = false;

    m_fac_indian_cntry_flg_isSet = false;
    m_fac_indian_cntry_flg_isValid = false;

    m_fac_indian_spatial_flg_isSet = false;
    m_fac_indian_spatial_flg_isValid = false;

    m_fac_lat_isSet = false;
    m_fac_lat_isValid = false;

    m_fac_long_isSet = false;
    m_fac_long_isValid = false;

    m_fac_map_flg_isSet = false;
    m_fac_map_flg_isValid = false;

    m_fac_map_icon_isSet = false;
    m_fac_map_icon_isValid = false;

    m_fac_naa_flag_isSet = false;
    m_fac_naa_flag_isValid = false;

    m_fac_percent_minority_isSet = false;
    m_fac_percent_minority_isValid = false;

    m_fac_population_density_isSet = false;
    m_fac_population_density_isValid = false;

    m_fac_sic_codes_isSet = false;
    m_fac_sic_codes_isValid = false;

    m_fac_std_county_name_isSet = false;
    m_fac_std_county_name_isValid = false;

    m_fac_triair_releases_isSet = false;
    m_fac_triair_releases_isValid = false;

    m_fac_tri_carc_air_releases_isSet = false;
    m_fac_tri_carc_air_releases_isValid = false;

    m_fac_tri_haps_releases_isSet = false;
    m_fac_tri_haps_releases_isValid = false;

    m_fac_tri_reporter_isSet = false;
    m_fac_tri_reporter_isValid = false;

    m_fac_us_mex_border_flg_isSet = false;
    m_fac_us_mex_border_flg_isValid = false;

    m_ghgids_isSet = false;
    m_ghgids_isValid = false;

    m_has_poll_rpt_isSet = false;
    m_has_poll_rpt_isValid = false;

    m_infea5yr_flag_isSet = false;
    m_infea5yr_flag_isValid = false;

    m_insp5yr_flag_isSet = false;
    m_insp5yr_flag_isValid = false;

    m_last_date_pce_isSet = false;
    m_last_date_pce_isValid = false;

    m_last_date_pce_epa_isSet = false;
    m_last_date_pce_epa_isValid = false;

    m_last_date_pce_sta_isSet = false;
    m_last_date_pce_sta_isValid = false;

    m_local_control_region_code_isSet = false;
    m_local_control_region_code_isValid = false;

    m_local_control_region_name_isSet = false;
    m_local_control_region_name_isValid = false;

    m_lower48_isSet = false;
    m_lower48_isValid = false;

    m_maint_pollutants_naa_isSet = false;
    m_maint_pollutants_naa_isValid = false;

    m_maint_standards_naa_isSet = false;
    m_maint_standards_naa_isValid = false;

    m_maint_status_naa_isSet = false;
    m_maint_status_naa_isValid = false;

    m_map_isSet = false;
    m_map_isValid = false;

    m_max_pctile_us_isSet = false;
    m_max_pctile_us_isValid = false;

    m_max_score_isSet = false;
    m_max_score_isValid = false;

    m_na_pollutants_naa_isSet = false;
    m_na_pollutants_naa_isValid = false;

    m_na_standards_naa_isSet = false;
    m_na_standards_naa_isValid = false;

    m_na_status_naa_isSet = false;
    m_na_status_naa_isValid = false;

    m_naa_categories_isSet = false;
    m_naa_categories_isValid = false;

    m_naa_pollutants_isSet = false;
    m_naa_pollutants_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_other_permit_ids_isSet = false;
    m_other_permit_ids_isValid = false;

    m_over80_count_us_isSet = false;
    m_over80_count_us_isValid = false;

    m_pctile_cancer_us_isSet = false;
    m_pctile_cancer_us_isValid = false;

    m_pctile_dpm_us_isSet = false;
    m_pctile_dpm_us_isValid = false;

    m_pctile_o3_us_isSet = false;
    m_pctile_o3_us_isValid = false;

    m_pctile_pctpre1960_us_isSet = false;
    m_pctile_pctpre1960_us_isValid = false;

    m_pctile_pm_us_isSet = false;
    m_pctile_pm_us_isValid = false;

    m_pctile_proximity_npdesus_isSet = false;
    m_pctile_proximity_npdesus_isValid = false;

    m_pctile_proximity_npl_us_isSet = false;
    m_pctile_proximity_npl_us_isValid = false;

    m_pctile_proximity_rmp_us_isSet = false;
    m_pctile_proximity_rmp_us_isValid = false;

    m_pctile_proximity_tsdf_us_isSet = false;
    m_pctile_proximity_tsdf_us_isValid = false;

    m_pctile_resp_us_isSet = false;
    m_pctile_resp_us_isValid = false;

    m_pctile_traffic_score_us_isSet = false;
    m_pctile_traffic_score_us_isValid = false;

    m_rcraids_isSet = false;
    m_rcraids_isValid = false;

    m_reference_point_isSet = false;
    m_reference_point_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_rmp_ids_isSet = false;
    m_rmp_ids_isValid = false;

    m_sdwaids_isSet = false;
    m_sdwaids_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_statute_isSet = false;
    m_statute_isValid = false;

    m_triids_isSet = false;
    m_triids_isValid = false;

    m_tr_ibal_flag_isSet = false;
    m_tr_ibal_flag_isValid = false;

    m_viol_flag_isSet = false;
    m_viol_flag_isValid = false;

    m_web_docs_isSet = false;
    m_web_docs_isValid = false;
}

void OAIAir06::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAir06::fromJsonObject(QJsonObject json) {

    m_air3yr_compl_qtrs_history_isValid = ::OpenAPI::fromJsonValue(m_air3yr_compl_qtrs_history, json[QString("AIR3yrComplQtrsHistory")]);
    m_air3yr_compl_qtrs_history_isSet = !json[QString("AIR3yrComplQtrsHistory")].isNull() && m_air3yr_compl_qtrs_history_isValid;

    m_air_case_ids_isValid = ::OpenAPI::fromJsonValue(m_air_case_ids, json[QString("AIRCaseIDs")]);
    m_air_case_ids_isSet = !json[QString("AIRCaseIDs")].isNull() && m_air_case_ids_isValid;

    m_air_city_isValid = ::OpenAPI::fromJsonValue(m_air_city, json[QString("AIRCity")]);
    m_air_city_isSet = !json[QString("AIRCity")].isNull() && m_air_city_isValid;

    m_air_classification_isValid = ::OpenAPI::fromJsonValue(m_air_classification, json[QString("AIRClassification")]);
    m_air_classification_isSet = !json[QString("AIRClassification")].isNull() && m_air_classification_isValid;

    m_air_compl_status_isValid = ::OpenAPI::fromJsonValue(m_air_compl_status, json[QString("AIRComplStatus")]);
    m_air_compl_status_isSet = !json[QString("AIRComplStatus")].isNull() && m_air_compl_status_isValid;

    m_air_county_isValid = ::OpenAPI::fromJsonValue(m_air_county, json[QString("AIRCounty")]);
    m_air_county_isSet = !json[QString("AIRCounty")].isNull() && m_air_county_isValid;

    m_air_days_last_eval_isValid = ::OpenAPI::fromJsonValue(m_air_days_last_eval, json[QString("AIRDaysLastEval")]);
    m_air_days_last_eval_isSet = !json[QString("AIRDaysLastEval")].isNull() && m_air_days_last_eval_isValid;

    m_airepa_region_isValid = ::OpenAPI::fromJsonValue(m_airepa_region, json[QString("AIREPARegion")]);
    m_airepa_region_isSet = !json[QString("AIREPARegion")].isNull() && m_airepa_region_isValid;

    m_air_eval_cnt_isValid = ::OpenAPI::fromJsonValue(m_air_eval_cnt, json[QString("AIREvalCnt")]);
    m_air_eval_cnt_isSet = !json[QString("AIREvalCnt")].isNull() && m_air_eval_cnt_isValid;

    m_airfips_code_isValid = ::OpenAPI::fromJsonValue(m_airfips_code, json[QString("AIRFIPSCode")]);
    m_airfips_code_isSet = !json[QString("AIRFIPSCode")].isNull() && m_airfips_code_isValid;

    m_air_facility_type_code_isValid = ::OpenAPI::fromJsonValue(m_air_facility_type_code, json[QString("AIRFacilityTypeCode")]);
    m_air_facility_type_code_isSet = !json[QString("AIRFacilityTypeCode")].isNull() && m_air_facility_type_code_isValid;

    m_air_facility_type_desc_isValid = ::OpenAPI::fromJsonValue(m_air_facility_type_desc, json[QString("AIRFacilityTypeDesc")]);
    m_air_facility_type_desc_isSet = !json[QString("AIRFacilityTypeDesc")].isNull() && m_air_facility_type_desc_isValid;

    m_air_fea_cnt_isValid = ::OpenAPI::fromJsonValue(m_air_fea_cnt, json[QString("AIRFeaCnt")]);
    m_air_fea_cnt_isSet = !json[QString("AIRFeaCnt")].isNull() && m_air_fea_cnt_isValid;

    m_air_hpv_status_isValid = ::OpenAPI::fromJsonValue(m_air_hpv_status, json[QString("AIRHpvStatus")]);
    m_air_hpv_status_isSet = !json[QString("AIRHpvStatus")].isNull() && m_air_hpv_status_isValid;

    m_airids_isValid = ::OpenAPI::fromJsonValue(m_airids, json[QString("AIRIDs")]);
    m_airids_isSet = !json[QString("AIRIDs")].isNull() && m_airids_isValid;

    m_air_iea_cnt_isValid = ::OpenAPI::fromJsonValue(m_air_iea_cnt, json[QString("AIRIeaCnt")]);
    m_air_iea_cnt_isSet = !json[QString("AIRIeaCnt")].isNull() && m_air_iea_cnt_isValid;

    m_air_indian_cntry_flg_isValid = ::OpenAPI::fromJsonValue(m_air_indian_cntry_flg, json[QString("AIRIndianCntryFlg")]);
    m_air_indian_cntry_flg_isSet = !json[QString("AIRIndianCntryFlg")].isNull() && m_air_indian_cntry_flg_isValid;

    m_air_last_eval_date_isValid = ::OpenAPI::fromJsonValue(m_air_last_eval_date, json[QString("AIRLastEvalDate")]);
    m_air_last_eval_date_isSet = !json[QString("AIRLastEvalDate")].isNull() && m_air_last_eval_date_isValid;

    m_air_last_eval_date_epa_isValid = ::OpenAPI::fromJsonValue(m_air_last_eval_date_epa, json[QString("AIRLastEvalDateEPA")]);
    m_air_last_eval_date_epa_isSet = !json[QString("AIRLastEvalDateEPA")].isNull() && m_air_last_eval_date_epa_isValid;

    m_air_last_eval_date_state_isValid = ::OpenAPI::fromJsonValue(m_air_last_eval_date_state, json[QString("AIRLastEvalDateState")]);
    m_air_last_eval_date_state_isSet = !json[QString("AIRLastEvalDateState")].isNull() && m_air_last_eval_date_state_isValid;

    m_air_last_fea_date_isValid = ::OpenAPI::fromJsonValue(m_air_last_fea_date, json[QString("AIRLastFeaDate")]);
    m_air_last_fea_date_isSet = !json[QString("AIRLastFeaDate")].isNull() && m_air_last_fea_date_isValid;

    m_air_last_fea_date_epa_isValid = ::OpenAPI::fromJsonValue(m_air_last_fea_date_epa, json[QString("AIRLastFeaDateEPA")]);
    m_air_last_fea_date_epa_isSet = !json[QString("AIRLastFeaDateEPA")].isNull() && m_air_last_fea_date_epa_isValid;

    m_air_last_fea_date_state_isValid = ::OpenAPI::fromJsonValue(m_air_last_fea_date_state, json[QString("AIRLastFeaDateState")]);
    m_air_last_fea_date_state_isSet = !json[QString("AIRLastFeaDateState")].isNull() && m_air_last_fea_date_state_isValid;

    m_air_last_iea_date_isValid = ::OpenAPI::fromJsonValue(m_air_last_iea_date, json[QString("AIRLastIeaDate")]);
    m_air_last_iea_date_isSet = !json[QString("AIRLastIeaDate")].isNull() && m_air_last_iea_date_isValid;

    m_air_last_iea_date_epa_isValid = ::OpenAPI::fromJsonValue(m_air_last_iea_date_epa, json[QString("AIRLastIeaDateEPA")]);
    m_air_last_iea_date_epa_isSet = !json[QString("AIRLastIeaDateEPA")].isNull() && m_air_last_iea_date_epa_isValid;

    m_air_last_iea_date_state_isValid = ::OpenAPI::fromJsonValue(m_air_last_iea_date_state, json[QString("AIRLastIeaDateState")]);
    m_air_last_iea_date_state_isSet = !json[QString("AIRLastIeaDateState")].isNull() && m_air_last_iea_date_state_isValid;

    m_air_last_penalty_date_isValid = ::OpenAPI::fromJsonValue(m_air_last_penalty_date, json[QString("AIRLastPenaltyDate")]);
    m_air_last_penalty_date_isSet = !json[QString("AIRLastPenaltyDate")].isNull() && m_air_last_penalty_date_isValid;

    m_air_last_stck_date_epa_isValid = ::OpenAPI::fromJsonValue(m_air_last_stck_date_epa, json[QString("AIRLastStckDateEPA")]);
    m_air_last_stck_date_epa_isSet = !json[QString("AIRLastStckDateEPA")].isNull() && m_air_last_stck_date_epa_isValid;

    m_air_last_stck_date_state_isValid = ::OpenAPI::fromJsonValue(m_air_last_stck_date_state, json[QString("AIRLastStckDateState")]);
    m_air_last_stck_date_state_isSet = !json[QString("AIRLastStckDateState")].isNull() && m_air_last_stck_date_state_isValid;

    m_air_last_stck_test_date_isValid = ::OpenAPI::fromJsonValue(m_air_last_stck_test_date, json[QString("AIRLastStckTestDate")]);
    m_air_last_stck_test_date_isSet = !json[QString("AIRLastStckTestDate")].isNull() && m_air_last_stck_test_date_isValid;

    m_air_last_stck_test_results_isValid = ::OpenAPI::fromJsonValue(m_air_last_stck_test_results, json[QString("AIRLastStckTestResults")]);
    m_air_last_stck_test_results_isSet = !json[QString("AIRLastStckTestResults")].isNull() && m_air_last_stck_test_results_isValid;

    m_air_last_viol_date_isValid = ::OpenAPI::fromJsonValue(m_air_last_viol_date, json[QString("AIRLastViolDate")]);
    m_air_last_viol_date_isSet = !json[QString("AIRLastViolDate")].isNull() && m_air_last_viol_date_isValid;

    m_air_macts_isValid = ::OpenAPI::fromJsonValue(m_air_macts, json[QString("AIRMacts")]);
    m_air_macts_isSet = !json[QString("AIRMacts")].isNull() && m_air_macts_isValid;

    m_air_major_flag_isValid = ::OpenAPI::fromJsonValue(m_air_major_flag, json[QString("AIRMajorFlag")]);
    m_air_major_flag_isSet = !json[QString("AIRMajorFlag")].isNull() && m_air_major_flag_isValid;

    m_air_mnths_with_hpv_isValid = ::OpenAPI::fromJsonValue(m_air_mnths_with_hpv, json[QString("AIRMnthsWithHpv")]);
    m_air_mnths_with_hpv_isSet = !json[QString("AIRMnthsWithHpv")].isNull() && m_air_mnths_with_hpv_isValid;

    m_airnaics_isValid = ::OpenAPI::fromJsonValue(m_airnaics, json[QString("AIRNAICS")]);
    m_airnaics_isSet = !json[QString("AIRNAICS")].isNull() && m_airnaics_isValid;

    m_air_name_isValid = ::OpenAPI::fromJsonValue(m_air_name, json[QString("AIRName")]);
    m_air_name_isSet = !json[QString("AIRName")].isNull() && m_air_name_isValid;

    m_air_nsps_isValid = ::OpenAPI::fromJsonValue(m_air_nsps, json[QString("AIRNsps")]);
    m_air_nsps_isSet = !json[QString("AIRNsps")].isNull() && m_air_nsps_isValid;

    m_air_nspsm_isValid = ::OpenAPI::fromJsonValue(m_air_nspsm, json[QString("AIRNspsm")]);
    m_air_nspsm_isSet = !json[QString("AIRNspsm")].isNull() && m_air_nspsm_isValid;

    m_air_penalties_isValid = ::OpenAPI::fromJsonValue(m_air_penalties, json[QString("AIRPenalties")]);
    m_air_penalties_isSet = !json[QString("AIRPenalties")].isNull() && m_air_penalties_isValid;

    m_air_poll_recent_viol_isValid = ::OpenAPI::fromJsonValue(m_air_poll_recent_viol, json[QString("AIRPollRecentViol")]);
    m_air_poll_recent_viol_isSet = !json[QString("AIRPollRecentViol")].isNull() && m_air_poll_recent_viol_isValid;

    m_air_programs_isValid = ::OpenAPI::fromJsonValue(m_air_programs, json[QString("AIRPrograms")]);
    m_air_programs_isSet = !json[QString("AIRPrograms")].isNull() && m_air_programs_isValid;

    m_air_qtrs_with_hpv_isValid = ::OpenAPI::fromJsonValue(m_air_qtrs_with_hpv, json[QString("AIRQtrsWithHpv")]);
    m_air_qtrs_with_hpv_isSet = !json[QString("AIRQtrsWithHpv")].isNull() && m_air_qtrs_with_hpv_isValid;

    m_air_qtrs_with_viol_isValid = ::OpenAPI::fromJsonValue(m_air_qtrs_with_viol, json[QString("AIRQtrsWithViol")]);
    m_air_qtrs_with_viol_isSet = !json[QString("AIRQtrsWithViol")].isNull() && m_air_qtrs_with_viol_isValid;

    m_air_recent_viol_cnt_isValid = ::OpenAPI::fromJsonValue(m_air_recent_viol_cnt, json[QString("AIRRecentViolCnt")]);
    m_air_recent_viol_cnt_isSet = !json[QString("AIRRecentViolCnt")].isNull() && m_air_recent_viol_cnt_isValid;

    m_air_stack_test5_yr_all_isValid = ::OpenAPI::fromJsonValue(m_air_stack_test5_yr_all, json[QString("AIRStackTest5YrAll")]);
    m_air_stack_test5_yr_all_isSet = !json[QString("AIRStackTest5YrAll")].isNull() && m_air_stack_test5_yr_all_isValid;

    m_air_stack_test5_yr_fail_isValid = ::OpenAPI::fromJsonValue(m_air_stack_test5_yr_fail, json[QString("AIRStackTest5YrFail")]);
    m_air_stack_test5_yr_fail_isSet = !json[QString("AIRStackTest5YrFail")].isNull() && m_air_stack_test5_yr_fail_isValid;

    m_air_state_isValid = ::OpenAPI::fromJsonValue(m_air_state, json[QString("AIRState")]);
    m_air_state_isSet = !json[QString("AIRState")].isNull() && m_air_state_isValid;

    m_air_status_isValid = ::OpenAPI::fromJsonValue(m_air_status, json[QString("AIRStatus")]);
    m_air_status_isSet = !json[QString("AIRStatus")].isNull() && m_air_status_isValid;

    m_air_street_isValid = ::OpenAPI::fromJsonValue(m_air_street, json[QString("AIRStreet")]);
    m_air_street_isSet = !json[QString("AIRStreet")].isNull() && m_air_street_isValid;

    m_airtr_ibal_ep_aids_isValid = ::OpenAPI::fromJsonValue(m_airtr_ibal_ep_aids, json[QString("AIRTRIbalEPAids")]);
    m_airtr_ibal_ep_aids_isSet = !json[QString("AIRTRIbalEPAids")].isNull() && m_airtr_ibal_ep_aids_isValid;

    m_airtr_ibal_names_isValid = ::OpenAPI::fromJsonValue(m_airtr_ibal_names, json[QString("AIRTRIbalNames")]);
    m_airtr_ibal_names_isSet = !json[QString("AIRTRIbalNames")].isNull() && m_airtr_ibal_names_isValid;

    m_air_universe_isValid = ::OpenAPI::fromJsonValue(m_air_universe, json[QString("AIRUniverse")]);
    m_air_universe_isSet = !json[QString("AIRUniverse")].isNull() && m_air_universe_isValid;

    m_air_zip_isValid = ::OpenAPI::fromJsonValue(m_air_zip, json[QString("AIRZip")]);
    m_air_zip_isSet = !json[QString("AIRZip")].isNull() && m_air_zip_isValid;

    m_active_lower48_isValid = ::OpenAPI::fromJsonValue(m_active_lower48, json[QString("ActiveLower48")]);
    m_active_lower48_isSet = !json[QString("ActiveLower48")].isNull() && m_active_lower48_isValid;

    m_cwaids_isValid = ::OpenAPI::fromJsonValue(m_cwaids, json[QString("CWAIDs")]);
    m_cwaids_isSet = !json[QString("CWAIDs")].isNull() && m_cwaids_isValid;

    m_calculated_accuracy_meters_isValid = ::OpenAPI::fromJsonValue(m_calculated_accuracy_meters, json[QString("CalculatedAccuracyMeters")]);
    m_calculated_accuracy_meters_isSet = !json[QString("CalculatedAccuracyMeters")].isNull() && m_calculated_accuracy_meters_isValid;

    m_camd_ids_isValid = ::OpenAPI::fromJsonValue(m_camd_ids, json[QString("CamdIDs")]);
    m_camd_ids_isSet = !json[QString("CamdIDs")].isNull() && m_camd_ids_isValid;

    m_census_block_group_isValid = ::OpenAPI::fromJsonValue(m_census_block_group, json[QString("CensusBlockGroup")]);
    m_census_block_group_isSet = !json[QString("CensusBlockGroup")].isNull() && m_census_block_group_isValid;

    m_chesapeake_bay_flag_isValid = ::OpenAPI::fromJsonValue(m_chesapeake_bay_flag, json[QString("ChesapeakeBayFlag")]);
    m_chesapeake_bay_flag_isSet = !json[QString("ChesapeakeBayFlag")].isNull() && m_chesapeake_bay_flag_isValid;

    m_collection_method_isValid = ::OpenAPI::fromJsonValue(m_collection_method, json[QString("CollectionMethod")]);
    m_collection_method_isSet = !json[QString("CollectionMethod")].isNull() && m_collection_method_isValid;

    m_curr_sv_flag_isValid = ::OpenAPI::fromJsonValue(m_curr_sv_flag, json[QString("CurrSvFlag")]);
    m_curr_sv_flag_isSet = !json[QString("CurrSvFlag")].isNull() && m_curr_sv_flag_isValid;

    m_curr_vio_flag_isValid = ::OpenAPI::fromJsonValue(m_curr_vio_flag, json[QString("CurrVioFlag")]);
    m_curr_vio_flag_isSet = !json[QString("CurrVioFlag")].isNull() && m_curr_vio_flag_isValid;

    m_epa_system_isValid = ::OpenAPI::fromJsonValue(m_epa_system, json[QString("EPASystem")]);
    m_epa_system_isSet = !json[QString("EPASystem")].isNull() && m_epa_system_isValid;

    m_ea5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_ea5yr_flag, json[QString("Ea5yrFlag")]);
    m_ea5yr_flag_isSet = !json[QString("Ea5yrFlag")].isNull() && m_ea5yr_flag_isValid;

    m_eis_ids_isValid = ::OpenAPI::fromJsonValue(m_eis_ids, json[QString("EisIDs")]);
    m_eis_ids_isSet = !json[QString("EisIDs")].isNull() && m_eis_ids_isValid;

    m_ejscreen_flag_isValid = ::OpenAPI::fromJsonValue(m_ejscreen_flag, json[QString("EjscreenFlag")]);
    m_ejscreen_flag_isSet = !json[QString("EjscreenFlag")].isNull() && m_ejscreen_flag_isValid;

    m_ejscreen_flag_us_isValid = ::OpenAPI::fromJsonValue(m_ejscreen_flag_us, json[QString("EjscreenFlagUs")]);
    m_ejscreen_flag_us_isSet = !json[QString("EjscreenFlagUs")].isNull() && m_ejscreen_flag_us_isValid;

    m_fac_camd_reporter_isValid = ::OpenAPI::fromJsonValue(m_fac_camd_reporter, json[QString("FacCamdReporter")]);
    m_fac_camd_reporter_isSet = !json[QString("FacCamdReporter")].isNull() && m_fac_camd_reporter_isValid;

    m_fac_county_name_isValid = ::OpenAPI::fromJsonValue(m_fac_county_name, json[QString("FacCountyName")]);
    m_fac_county_name_isSet = !json[QString("FacCountyName")].isNull() && m_fac_county_name_isValid;

    m_fac_derived_huc_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_huc, json[QString("FacDerivedHuc")]);
    m_fac_derived_huc_isSet = !json[QString("FacDerivedHuc")].isNull() && m_fac_derived_huc_isValid;

    m_fac_derived_tr_ibes_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_tr_ibes, json[QString("FacDerivedTRIbes")]);
    m_fac_derived_tr_ibes_isSet = !json[QString("FacDerivedTRIbes")].isNull() && m_fac_derived_tr_ibes_isValid;

    m_fac_derived_wbd_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbd, json[QString("FacDerivedWBD")]);
    m_fac_derived_wbd_isSet = !json[QString("FacDerivedWBD")].isNull() && m_fac_derived_wbd_isValid;

    m_fac_derived_wbd_name_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbd_name, json[QString("FacDerivedWBDName")]);
    m_fac_derived_wbd_name_isSet = !json[QString("FacDerivedWBDName")].isNull() && m_fac_derived_wbd_name_isValid;

    m_fac_eis_air_releases_isValid = ::OpenAPI::fromJsonValue(m_fac_eis_air_releases, json[QString("FacEisAIRReleases")]);
    m_fac_eis_air_releases_isSet = !json[QString("FacEisAIRReleases")].isNull() && m_fac_eis_air_releases_isValid;

    m_fac_eis_reporter_isValid = ::OpenAPI::fromJsonValue(m_fac_eis_reporter, json[QString("FacEisReporter")]);
    m_fac_eis_reporter_isSet = !json[QString("FacEisReporter")].isNull() && m_fac_eis_reporter_isValid;

    m_fac_fips_code_isValid = ::OpenAPI::fromJsonValue(m_fac_fips_code, json[QString("FacFIPSCode")]);
    m_fac_fips_code_isSet = !json[QString("FacFIPSCode")].isNull() && m_fac_fips_code_isValid;

    m_fac_federal_agency_code_isValid = ::OpenAPI::fromJsonValue(m_fac_federal_agency_code, json[QString("FacFederalAgencyCode")]);
    m_fac_federal_agency_code_isSet = !json[QString("FacFederalAgencyCode")].isNull() && m_fac_federal_agency_code_isValid;

    m_fac_federal_agency_name_isValid = ::OpenAPI::fromJsonValue(m_fac_federal_agency_name, json[QString("FacFederalAgencyName")]);
    m_fac_federal_agency_name_isSet = !json[QString("FacFederalAgencyName")].isNull() && m_fac_federal_agency_name_isValid;

    m_fac_ghgco2_releases_isValid = ::OpenAPI::fromJsonValue(m_fac_ghgco2_releases, json[QString("FacGHGCO2Releases")]);
    m_fac_ghgco2_releases_isSet = !json[QString("FacGHGCO2Releases")].isNull() && m_fac_ghgco2_releases_isValid;

    m_fac_ghg_reporter_isValid = ::OpenAPI::fromJsonValue(m_fac_ghg_reporter, json[QString("FacGHGReporter")]);
    m_fac_ghg_reporter_isSet = !json[QString("FacGHGReporter")].isNull() && m_fac_ghg_reporter_isValid;

    m_fac_indian_cntry_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_indian_cntry_flg, json[QString("FacIndianCntryFlg")]);
    m_fac_indian_cntry_flg_isSet = !json[QString("FacIndianCntryFlg")].isNull() && m_fac_indian_cntry_flg_isValid;

    m_fac_indian_spatial_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_indian_spatial_flg, json[QString("FacIndianSpatialFlg")]);
    m_fac_indian_spatial_flg_isSet = !json[QString("FacIndianSpatialFlg")].isNull() && m_fac_indian_spatial_flg_isValid;

    m_fac_lat_isValid = ::OpenAPI::fromJsonValue(m_fac_lat, json[QString("FacLat")]);
    m_fac_lat_isSet = !json[QString("FacLat")].isNull() && m_fac_lat_isValid;

    m_fac_long_isValid = ::OpenAPI::fromJsonValue(m_fac_long, json[QString("FacLong")]);
    m_fac_long_isSet = !json[QString("FacLong")].isNull() && m_fac_long_isValid;

    m_fac_map_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_map_flg, json[QString("FacMapFlg")]);
    m_fac_map_flg_isSet = !json[QString("FacMapFlg")].isNull() && m_fac_map_flg_isValid;

    m_fac_map_icon_isValid = ::OpenAPI::fromJsonValue(m_fac_map_icon, json[QString("FacMapIcon")]);
    m_fac_map_icon_isSet = !json[QString("FacMapIcon")].isNull() && m_fac_map_icon_isValid;

    m_fac_naa_flag_isValid = ::OpenAPI::fromJsonValue(m_fac_naa_flag, json[QString("FacNaaFlag")]);
    m_fac_naa_flag_isSet = !json[QString("FacNaaFlag")].isNull() && m_fac_naa_flag_isValid;

    m_fac_percent_minority_isValid = ::OpenAPI::fromJsonValue(m_fac_percent_minority, json[QString("FacPercentMinority")]);
    m_fac_percent_minority_isSet = !json[QString("FacPercentMinority")].isNull() && m_fac_percent_minority_isValid;

    m_fac_population_density_isValid = ::OpenAPI::fromJsonValue(m_fac_population_density, json[QString("FacPopulationDensity")]);
    m_fac_population_density_isSet = !json[QString("FacPopulationDensity")].isNull() && m_fac_population_density_isValid;

    m_fac_sic_codes_isValid = ::OpenAPI::fromJsonValue(m_fac_sic_codes, json[QString("FacSICCodes")]);
    m_fac_sic_codes_isSet = !json[QString("FacSICCodes")].isNull() && m_fac_sic_codes_isValid;

    m_fac_std_county_name_isValid = ::OpenAPI::fromJsonValue(m_fac_std_county_name, json[QString("FacStdCountyName")]);
    m_fac_std_county_name_isSet = !json[QString("FacStdCountyName")].isNull() && m_fac_std_county_name_isValid;

    m_fac_triair_releases_isValid = ::OpenAPI::fromJsonValue(m_fac_triair_releases, json[QString("FacTRIAIRReleases")]);
    m_fac_triair_releases_isSet = !json[QString("FacTRIAIRReleases")].isNull() && m_fac_triair_releases_isValid;

    m_fac_tri_carc_air_releases_isValid = ::OpenAPI::fromJsonValue(m_fac_tri_carc_air_releases, json[QString("FacTRICarcAIRReleases")]);
    m_fac_tri_carc_air_releases_isSet = !json[QString("FacTRICarcAIRReleases")].isNull() && m_fac_tri_carc_air_releases_isValid;

    m_fac_tri_haps_releases_isValid = ::OpenAPI::fromJsonValue(m_fac_tri_haps_releases, json[QString("FacTRIHapsReleases")]);
    m_fac_tri_haps_releases_isSet = !json[QString("FacTRIHapsReleases")].isNull() && m_fac_tri_haps_releases_isValid;

    m_fac_tri_reporter_isValid = ::OpenAPI::fromJsonValue(m_fac_tri_reporter, json[QString("FacTRIReporter")]);
    m_fac_tri_reporter_isSet = !json[QString("FacTRIReporter")].isNull() && m_fac_tri_reporter_isValid;

    m_fac_us_mex_border_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_us_mex_border_flg, json[QString("FacUsMexBorderFlg")]);
    m_fac_us_mex_border_flg_isSet = !json[QString("FacUsMexBorderFlg")].isNull() && m_fac_us_mex_border_flg_isValid;

    m_ghgids_isValid = ::OpenAPI::fromJsonValue(m_ghgids, json[QString("GHGIDs")]);
    m_ghgids_isSet = !json[QString("GHGIDs")].isNull() && m_ghgids_isValid;

    m_has_poll_rpt_isValid = ::OpenAPI::fromJsonValue(m_has_poll_rpt, json[QString("HasPollRpt")]);
    m_has_poll_rpt_isSet = !json[QString("HasPollRpt")].isNull() && m_has_poll_rpt_isValid;

    m_infea5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_infea5yr_flag, json[QString("Infea5yrFlag")]);
    m_infea5yr_flag_isSet = !json[QString("Infea5yrFlag")].isNull() && m_infea5yr_flag_isValid;

    m_insp5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_insp5yr_flag, json[QString("Insp5yrFlag")]);
    m_insp5yr_flag_isSet = !json[QString("Insp5yrFlag")].isNull() && m_insp5yr_flag_isValid;

    m_last_date_pce_isValid = ::OpenAPI::fromJsonValue(m_last_date_pce, json[QString("LastDatePce")]);
    m_last_date_pce_isSet = !json[QString("LastDatePce")].isNull() && m_last_date_pce_isValid;

    m_last_date_pce_epa_isValid = ::OpenAPI::fromJsonValue(m_last_date_pce_epa, json[QString("LastDatePceEPA")]);
    m_last_date_pce_epa_isSet = !json[QString("LastDatePceEPA")].isNull() && m_last_date_pce_epa_isValid;

    m_last_date_pce_sta_isValid = ::OpenAPI::fromJsonValue(m_last_date_pce_sta, json[QString("LastDatePceSta")]);
    m_last_date_pce_sta_isSet = !json[QString("LastDatePceSta")].isNull() && m_last_date_pce_sta_isValid;

    m_local_control_region_code_isValid = ::OpenAPI::fromJsonValue(m_local_control_region_code, json[QString("LocalControlRegionCode")]);
    m_local_control_region_code_isSet = !json[QString("LocalControlRegionCode")].isNull() && m_local_control_region_code_isValid;

    m_local_control_region_name_isValid = ::OpenAPI::fromJsonValue(m_local_control_region_name, json[QString("LocalControlRegionName")]);
    m_local_control_region_name_isSet = !json[QString("LocalControlRegionName")].isNull() && m_local_control_region_name_isValid;

    m_lower48_isValid = ::OpenAPI::fromJsonValue(m_lower48, json[QString("Lower48")]);
    m_lower48_isSet = !json[QString("Lower48")].isNull() && m_lower48_isValid;

    m_maint_pollutants_naa_isValid = ::OpenAPI::fromJsonValue(m_maint_pollutants_naa, json[QString("MaintPollutantsNaa")]);
    m_maint_pollutants_naa_isSet = !json[QString("MaintPollutantsNaa")].isNull() && m_maint_pollutants_naa_isValid;

    m_maint_standards_naa_isValid = ::OpenAPI::fromJsonValue(m_maint_standards_naa, json[QString("MaintStandardsNaa")]);
    m_maint_standards_naa_isSet = !json[QString("MaintStandardsNaa")].isNull() && m_maint_standards_naa_isValid;

    m_maint_status_naa_isValid = ::OpenAPI::fromJsonValue(m_maint_status_naa, json[QString("MaintStatusNaa")]);
    m_maint_status_naa_isSet = !json[QString("MaintStatusNaa")].isNull() && m_maint_status_naa_isValid;

    m_map_isValid = ::OpenAPI::fromJsonValue(m_map, json[QString("Map")]);
    m_map_isSet = !json[QString("Map")].isNull() && m_map_isValid;

    m_max_pctile_us_isValid = ::OpenAPI::fromJsonValue(m_max_pctile_us, json[QString("MaxPctileUs")]);
    m_max_pctile_us_isSet = !json[QString("MaxPctileUs")].isNull() && m_max_pctile_us_isValid;

    m_max_score_isValid = ::OpenAPI::fromJsonValue(m_max_score, json[QString("MaxScore")]);
    m_max_score_isSet = !json[QString("MaxScore")].isNull() && m_max_score_isValid;

    m_na_pollutants_naa_isValid = ::OpenAPI::fromJsonValue(m_na_pollutants_naa, json[QString("NaPollutantsNaa")]);
    m_na_pollutants_naa_isSet = !json[QString("NaPollutantsNaa")].isNull() && m_na_pollutants_naa_isValid;

    m_na_standards_naa_isValid = ::OpenAPI::fromJsonValue(m_na_standards_naa, json[QString("NaStandardsNaa")]);
    m_na_standards_naa_isSet = !json[QString("NaStandardsNaa")].isNull() && m_na_standards_naa_isValid;

    m_na_status_naa_isValid = ::OpenAPI::fromJsonValue(m_na_status_naa, json[QString("NaStatusNaa")]);
    m_na_status_naa_isSet = !json[QString("NaStatusNaa")].isNull() && m_na_status_naa_isValid;

    m_naa_categories_isValid = ::OpenAPI::fromJsonValue(m_naa_categories, json[QString("NaaCategories")]);
    m_naa_categories_isSet = !json[QString("NaaCategories")].isNull() && m_naa_categories_isValid;

    m_naa_pollutants_isValid = ::OpenAPI::fromJsonValue(m_naa_pollutants, json[QString("NaaPollutants")]);
    m_naa_pollutants_isSet = !json[QString("NaaPollutants")].isNull() && m_naa_pollutants_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("ObjectId")]);
    m_object_id_isSet = !json[QString("ObjectId")].isNull() && m_object_id_isValid;

    m_other_permit_ids_isValid = ::OpenAPI::fromJsonValue(m_other_permit_ids, json[QString("OtherPermitIDs")]);
    m_other_permit_ids_isSet = !json[QString("OtherPermitIDs")].isNull() && m_other_permit_ids_isValid;

    m_over80_count_us_isValid = ::OpenAPI::fromJsonValue(m_over80_count_us, json[QString("Over80CountUs")]);
    m_over80_count_us_isSet = !json[QString("Over80CountUs")].isNull() && m_over80_count_us_isValid;

    m_pctile_cancer_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_cancer_us, json[QString("PctileCancerUs")]);
    m_pctile_cancer_us_isSet = !json[QString("PctileCancerUs")].isNull() && m_pctile_cancer_us_isValid;

    m_pctile_dpm_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_dpm_us, json[QString("PctileDpmUs")]);
    m_pctile_dpm_us_isSet = !json[QString("PctileDpmUs")].isNull() && m_pctile_dpm_us_isValid;

    m_pctile_o3_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_o3_us, json[QString("PctileO3Us")]);
    m_pctile_o3_us_isSet = !json[QString("PctileO3Us")].isNull() && m_pctile_o3_us_isValid;

    m_pctile_pctpre1960_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_pctpre1960_us, json[QString("PctilePctpre1960Us")]);
    m_pctile_pctpre1960_us_isSet = !json[QString("PctilePctpre1960Us")].isNull() && m_pctile_pctpre1960_us_isValid;

    m_pctile_pm_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_pm_us, json[QString("PctilePmUs")]);
    m_pctile_pm_us_isSet = !json[QString("PctilePmUs")].isNull() && m_pctile_pm_us_isValid;

    m_pctile_proximity_npdesus_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_npdesus, json[QString("PctileProximityNPDESUs")]);
    m_pctile_proximity_npdesus_isSet = !json[QString("PctileProximityNPDESUs")].isNull() && m_pctile_proximity_npdesus_isValid;

    m_pctile_proximity_npl_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_npl_us, json[QString("PctileProximityNplUs")]);
    m_pctile_proximity_npl_us_isSet = !json[QString("PctileProximityNplUs")].isNull() && m_pctile_proximity_npl_us_isValid;

    m_pctile_proximity_rmp_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_rmp_us, json[QString("PctileProximityRmpUs")]);
    m_pctile_proximity_rmp_us_isSet = !json[QString("PctileProximityRmpUs")].isNull() && m_pctile_proximity_rmp_us_isValid;

    m_pctile_proximity_tsdf_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_tsdf_us, json[QString("PctileProximityTsdfUs")]);
    m_pctile_proximity_tsdf_us_isSet = !json[QString("PctileProximityTsdfUs")].isNull() && m_pctile_proximity_tsdf_us_isValid;

    m_pctile_resp_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_resp_us, json[QString("PctileRespUs")]);
    m_pctile_resp_us_isSet = !json[QString("PctileRespUs")].isNull() && m_pctile_resp_us_isValid;

    m_pctile_traffic_score_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_traffic_score_us, json[QString("PctileTrafficScoreUs")]);
    m_pctile_traffic_score_us_isSet = !json[QString("PctileTrafficScoreUs")].isNull() && m_pctile_traffic_score_us_isValid;

    m_rcraids_isValid = ::OpenAPI::fromJsonValue(m_rcraids, json[QString("RCRAIDs")]);
    m_rcraids_isSet = !json[QString("RCRAIDs")].isNull() && m_rcraids_isValid;

    m_reference_point_isValid = ::OpenAPI::fromJsonValue(m_reference_point, json[QString("ReferencePoint")]);
    m_reference_point_isSet = !json[QString("ReferencePoint")].isNull() && m_reference_point_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("RegistryID")]);
    m_registry_id_isSet = !json[QString("RegistryID")].isNull() && m_registry_id_isValid;

    m_rmp_ids_isValid = ::OpenAPI::fromJsonValue(m_rmp_ids, json[QString("RmpIDs")]);
    m_rmp_ids_isSet = !json[QString("RmpIDs")].isNull() && m_rmp_ids_isValid;

    m_sdwaids_isValid = ::OpenAPI::fromJsonValue(m_sdwaids, json[QString("SDWAIDs")]);
    m_sdwaids_isSet = !json[QString("SDWAIDs")].isNull() && m_sdwaids_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_statute_isValid = ::OpenAPI::fromJsonValue(m_statute, json[QString("Statute")]);
    m_statute_isSet = !json[QString("Statute")].isNull() && m_statute_isValid;

    m_triids_isValid = ::OpenAPI::fromJsonValue(m_triids, json[QString("TRIIDs")]);
    m_triids_isSet = !json[QString("TRIIDs")].isNull() && m_triids_isValid;

    m_tr_ibal_flag_isValid = ::OpenAPI::fromJsonValue(m_tr_ibal_flag, json[QString("TRIbalFlag")]);
    m_tr_ibal_flag_isSet = !json[QString("TRIbalFlag")].isNull() && m_tr_ibal_flag_isValid;

    m_viol_flag_isValid = ::OpenAPI::fromJsonValue(m_viol_flag, json[QString("ViolFlag")]);
    m_viol_flag_isSet = !json[QString("ViolFlag")].isNull() && m_viol_flag_isValid;

    m_web_docs_isValid = ::OpenAPI::fromJsonValue(m_web_docs, json[QString("WebDocs")]);
    m_web_docs_isSet = !json[QString("WebDocs")].isNull() && m_web_docs_isValid;
}

QString OAIAir06::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAir06::asJsonObject() const {
    QJsonObject obj;
    if (m_air3yr_compl_qtrs_history_isSet) {
        obj.insert(QString("AIR3yrComplQtrsHistory"), ::OpenAPI::toJsonValue(m_air3yr_compl_qtrs_history));
    }
    if (m_air_case_ids_isSet) {
        obj.insert(QString("AIRCaseIDs"), ::OpenAPI::toJsonValue(m_air_case_ids));
    }
    if (m_air_city_isSet) {
        obj.insert(QString("AIRCity"), ::OpenAPI::toJsonValue(m_air_city));
    }
    if (m_air_classification_isSet) {
        obj.insert(QString("AIRClassification"), ::OpenAPI::toJsonValue(m_air_classification));
    }
    if (m_air_compl_status_isSet) {
        obj.insert(QString("AIRComplStatus"), ::OpenAPI::toJsonValue(m_air_compl_status));
    }
    if (m_air_county_isSet) {
        obj.insert(QString("AIRCounty"), ::OpenAPI::toJsonValue(m_air_county));
    }
    if (m_air_days_last_eval_isSet) {
        obj.insert(QString("AIRDaysLastEval"), ::OpenAPI::toJsonValue(m_air_days_last_eval));
    }
    if (m_airepa_region_isSet) {
        obj.insert(QString("AIREPARegion"), ::OpenAPI::toJsonValue(m_airepa_region));
    }
    if (m_air_eval_cnt_isSet) {
        obj.insert(QString("AIREvalCnt"), ::OpenAPI::toJsonValue(m_air_eval_cnt));
    }
    if (m_airfips_code_isSet) {
        obj.insert(QString("AIRFIPSCode"), ::OpenAPI::toJsonValue(m_airfips_code));
    }
    if (m_air_facility_type_code_isSet) {
        obj.insert(QString("AIRFacilityTypeCode"), ::OpenAPI::toJsonValue(m_air_facility_type_code));
    }
    if (m_air_facility_type_desc_isSet) {
        obj.insert(QString("AIRFacilityTypeDesc"), ::OpenAPI::toJsonValue(m_air_facility_type_desc));
    }
    if (m_air_fea_cnt_isSet) {
        obj.insert(QString("AIRFeaCnt"), ::OpenAPI::toJsonValue(m_air_fea_cnt));
    }
    if (m_air_hpv_status_isSet) {
        obj.insert(QString("AIRHpvStatus"), ::OpenAPI::toJsonValue(m_air_hpv_status));
    }
    if (m_airids_isSet) {
        obj.insert(QString("AIRIDs"), ::OpenAPI::toJsonValue(m_airids));
    }
    if (m_air_iea_cnt_isSet) {
        obj.insert(QString("AIRIeaCnt"), ::OpenAPI::toJsonValue(m_air_iea_cnt));
    }
    if (m_air_indian_cntry_flg_isSet) {
        obj.insert(QString("AIRIndianCntryFlg"), ::OpenAPI::toJsonValue(m_air_indian_cntry_flg));
    }
    if (m_air_last_eval_date_isSet) {
        obj.insert(QString("AIRLastEvalDate"), ::OpenAPI::toJsonValue(m_air_last_eval_date));
    }
    if (m_air_last_eval_date_epa_isSet) {
        obj.insert(QString("AIRLastEvalDateEPA"), ::OpenAPI::toJsonValue(m_air_last_eval_date_epa));
    }
    if (m_air_last_eval_date_state_isSet) {
        obj.insert(QString("AIRLastEvalDateState"), ::OpenAPI::toJsonValue(m_air_last_eval_date_state));
    }
    if (m_air_last_fea_date_isSet) {
        obj.insert(QString("AIRLastFeaDate"), ::OpenAPI::toJsonValue(m_air_last_fea_date));
    }
    if (m_air_last_fea_date_epa_isSet) {
        obj.insert(QString("AIRLastFeaDateEPA"), ::OpenAPI::toJsonValue(m_air_last_fea_date_epa));
    }
    if (m_air_last_fea_date_state_isSet) {
        obj.insert(QString("AIRLastFeaDateState"), ::OpenAPI::toJsonValue(m_air_last_fea_date_state));
    }
    if (m_air_last_iea_date_isSet) {
        obj.insert(QString("AIRLastIeaDate"), ::OpenAPI::toJsonValue(m_air_last_iea_date));
    }
    if (m_air_last_iea_date_epa_isSet) {
        obj.insert(QString("AIRLastIeaDateEPA"), ::OpenAPI::toJsonValue(m_air_last_iea_date_epa));
    }
    if (m_air_last_iea_date_state_isSet) {
        obj.insert(QString("AIRLastIeaDateState"), ::OpenAPI::toJsonValue(m_air_last_iea_date_state));
    }
    if (m_air_last_penalty_date_isSet) {
        obj.insert(QString("AIRLastPenaltyDate"), ::OpenAPI::toJsonValue(m_air_last_penalty_date));
    }
    if (m_air_last_stck_date_epa_isSet) {
        obj.insert(QString("AIRLastStckDateEPA"), ::OpenAPI::toJsonValue(m_air_last_stck_date_epa));
    }
    if (m_air_last_stck_date_state_isSet) {
        obj.insert(QString("AIRLastStckDateState"), ::OpenAPI::toJsonValue(m_air_last_stck_date_state));
    }
    if (m_air_last_stck_test_date_isSet) {
        obj.insert(QString("AIRLastStckTestDate"), ::OpenAPI::toJsonValue(m_air_last_stck_test_date));
    }
    if (m_air_last_stck_test_results_isSet) {
        obj.insert(QString("AIRLastStckTestResults"), ::OpenAPI::toJsonValue(m_air_last_stck_test_results));
    }
    if (m_air_last_viol_date_isSet) {
        obj.insert(QString("AIRLastViolDate"), ::OpenAPI::toJsonValue(m_air_last_viol_date));
    }
    if (m_air_macts_isSet) {
        obj.insert(QString("AIRMacts"), ::OpenAPI::toJsonValue(m_air_macts));
    }
    if (m_air_major_flag_isSet) {
        obj.insert(QString("AIRMajorFlag"), ::OpenAPI::toJsonValue(m_air_major_flag));
    }
    if (m_air_mnths_with_hpv_isSet) {
        obj.insert(QString("AIRMnthsWithHpv"), ::OpenAPI::toJsonValue(m_air_mnths_with_hpv));
    }
    if (m_airnaics_isSet) {
        obj.insert(QString("AIRNAICS"), ::OpenAPI::toJsonValue(m_airnaics));
    }
    if (m_air_name_isSet) {
        obj.insert(QString("AIRName"), ::OpenAPI::toJsonValue(m_air_name));
    }
    if (m_air_nsps_isSet) {
        obj.insert(QString("AIRNsps"), ::OpenAPI::toJsonValue(m_air_nsps));
    }
    if (m_air_nspsm_isSet) {
        obj.insert(QString("AIRNspsm"), ::OpenAPI::toJsonValue(m_air_nspsm));
    }
    if (m_air_penalties_isSet) {
        obj.insert(QString("AIRPenalties"), ::OpenAPI::toJsonValue(m_air_penalties));
    }
    if (m_air_poll_recent_viol_isSet) {
        obj.insert(QString("AIRPollRecentViol"), ::OpenAPI::toJsonValue(m_air_poll_recent_viol));
    }
    if (m_air_programs_isSet) {
        obj.insert(QString("AIRPrograms"), ::OpenAPI::toJsonValue(m_air_programs));
    }
    if (m_air_qtrs_with_hpv_isSet) {
        obj.insert(QString("AIRQtrsWithHpv"), ::OpenAPI::toJsonValue(m_air_qtrs_with_hpv));
    }
    if (m_air_qtrs_with_viol_isSet) {
        obj.insert(QString("AIRQtrsWithViol"), ::OpenAPI::toJsonValue(m_air_qtrs_with_viol));
    }
    if (m_air_recent_viol_cnt_isSet) {
        obj.insert(QString("AIRRecentViolCnt"), ::OpenAPI::toJsonValue(m_air_recent_viol_cnt));
    }
    if (m_air_stack_test5_yr_all_isSet) {
        obj.insert(QString("AIRStackTest5YrAll"), ::OpenAPI::toJsonValue(m_air_stack_test5_yr_all));
    }
    if (m_air_stack_test5_yr_fail_isSet) {
        obj.insert(QString("AIRStackTest5YrFail"), ::OpenAPI::toJsonValue(m_air_stack_test5_yr_fail));
    }
    if (m_air_state_isSet) {
        obj.insert(QString("AIRState"), ::OpenAPI::toJsonValue(m_air_state));
    }
    if (m_air_status_isSet) {
        obj.insert(QString("AIRStatus"), ::OpenAPI::toJsonValue(m_air_status));
    }
    if (m_air_street_isSet) {
        obj.insert(QString("AIRStreet"), ::OpenAPI::toJsonValue(m_air_street));
    }
    if (m_airtr_ibal_ep_aids_isSet) {
        obj.insert(QString("AIRTRIbalEPAids"), ::OpenAPI::toJsonValue(m_airtr_ibal_ep_aids));
    }
    if (m_airtr_ibal_names_isSet) {
        obj.insert(QString("AIRTRIbalNames"), ::OpenAPI::toJsonValue(m_airtr_ibal_names));
    }
    if (m_air_universe_isSet) {
        obj.insert(QString("AIRUniverse"), ::OpenAPI::toJsonValue(m_air_universe));
    }
    if (m_air_zip_isSet) {
        obj.insert(QString("AIRZip"), ::OpenAPI::toJsonValue(m_air_zip));
    }
    if (m_active_lower48_isSet) {
        obj.insert(QString("ActiveLower48"), ::OpenAPI::toJsonValue(m_active_lower48));
    }
    if (m_cwaids_isSet) {
        obj.insert(QString("CWAIDs"), ::OpenAPI::toJsonValue(m_cwaids));
    }
    if (m_calculated_accuracy_meters_isSet) {
        obj.insert(QString("CalculatedAccuracyMeters"), ::OpenAPI::toJsonValue(m_calculated_accuracy_meters));
    }
    if (m_camd_ids_isSet) {
        obj.insert(QString("CamdIDs"), ::OpenAPI::toJsonValue(m_camd_ids));
    }
    if (m_census_block_group_isSet) {
        obj.insert(QString("CensusBlockGroup"), ::OpenAPI::toJsonValue(m_census_block_group));
    }
    if (m_chesapeake_bay_flag_isSet) {
        obj.insert(QString("ChesapeakeBayFlag"), ::OpenAPI::toJsonValue(m_chesapeake_bay_flag));
    }
    if (m_collection_method_isSet) {
        obj.insert(QString("CollectionMethod"), ::OpenAPI::toJsonValue(m_collection_method));
    }
    if (m_curr_sv_flag_isSet) {
        obj.insert(QString("CurrSvFlag"), ::OpenAPI::toJsonValue(m_curr_sv_flag));
    }
    if (m_curr_vio_flag_isSet) {
        obj.insert(QString("CurrVioFlag"), ::OpenAPI::toJsonValue(m_curr_vio_flag));
    }
    if (m_epa_system_isSet) {
        obj.insert(QString("EPASystem"), ::OpenAPI::toJsonValue(m_epa_system));
    }
    if (m_ea5yr_flag_isSet) {
        obj.insert(QString("Ea5yrFlag"), ::OpenAPI::toJsonValue(m_ea5yr_flag));
    }
    if (m_eis_ids_isSet) {
        obj.insert(QString("EisIDs"), ::OpenAPI::toJsonValue(m_eis_ids));
    }
    if (m_ejscreen_flag_isSet) {
        obj.insert(QString("EjscreenFlag"), ::OpenAPI::toJsonValue(m_ejscreen_flag));
    }
    if (m_ejscreen_flag_us_isSet) {
        obj.insert(QString("EjscreenFlagUs"), ::OpenAPI::toJsonValue(m_ejscreen_flag_us));
    }
    if (m_fac_camd_reporter_isSet) {
        obj.insert(QString("FacCamdReporter"), ::OpenAPI::toJsonValue(m_fac_camd_reporter));
    }
    if (m_fac_county_name_isSet) {
        obj.insert(QString("FacCountyName"), ::OpenAPI::toJsonValue(m_fac_county_name));
    }
    if (m_fac_derived_huc_isSet) {
        obj.insert(QString("FacDerivedHuc"), ::OpenAPI::toJsonValue(m_fac_derived_huc));
    }
    if (m_fac_derived_tr_ibes_isSet) {
        obj.insert(QString("FacDerivedTRIbes"), ::OpenAPI::toJsonValue(m_fac_derived_tr_ibes));
    }
    if (m_fac_derived_wbd_isSet) {
        obj.insert(QString("FacDerivedWBD"), ::OpenAPI::toJsonValue(m_fac_derived_wbd));
    }
    if (m_fac_derived_wbd_name_isSet) {
        obj.insert(QString("FacDerivedWBDName"), ::OpenAPI::toJsonValue(m_fac_derived_wbd_name));
    }
    if (m_fac_eis_air_releases_isSet) {
        obj.insert(QString("FacEisAIRReleases"), ::OpenAPI::toJsonValue(m_fac_eis_air_releases));
    }
    if (m_fac_eis_reporter_isSet) {
        obj.insert(QString("FacEisReporter"), ::OpenAPI::toJsonValue(m_fac_eis_reporter));
    }
    if (m_fac_fips_code_isSet) {
        obj.insert(QString("FacFIPSCode"), ::OpenAPI::toJsonValue(m_fac_fips_code));
    }
    if (m_fac_federal_agency_code_isSet) {
        obj.insert(QString("FacFederalAgencyCode"), ::OpenAPI::toJsonValue(m_fac_federal_agency_code));
    }
    if (m_fac_federal_agency_name_isSet) {
        obj.insert(QString("FacFederalAgencyName"), ::OpenAPI::toJsonValue(m_fac_federal_agency_name));
    }
    if (m_fac_ghgco2_releases_isSet) {
        obj.insert(QString("FacGHGCO2Releases"), ::OpenAPI::toJsonValue(m_fac_ghgco2_releases));
    }
    if (m_fac_ghg_reporter_isSet) {
        obj.insert(QString("FacGHGReporter"), ::OpenAPI::toJsonValue(m_fac_ghg_reporter));
    }
    if (m_fac_indian_cntry_flg_isSet) {
        obj.insert(QString("FacIndianCntryFlg"), ::OpenAPI::toJsonValue(m_fac_indian_cntry_flg));
    }
    if (m_fac_indian_spatial_flg_isSet) {
        obj.insert(QString("FacIndianSpatialFlg"), ::OpenAPI::toJsonValue(m_fac_indian_spatial_flg));
    }
    if (m_fac_lat_isSet) {
        obj.insert(QString("FacLat"), ::OpenAPI::toJsonValue(m_fac_lat));
    }
    if (m_fac_long_isSet) {
        obj.insert(QString("FacLong"), ::OpenAPI::toJsonValue(m_fac_long));
    }
    if (m_fac_map_flg_isSet) {
        obj.insert(QString("FacMapFlg"), ::OpenAPI::toJsonValue(m_fac_map_flg));
    }
    if (m_fac_map_icon_isSet) {
        obj.insert(QString("FacMapIcon"), ::OpenAPI::toJsonValue(m_fac_map_icon));
    }
    if (m_fac_naa_flag_isSet) {
        obj.insert(QString("FacNaaFlag"), ::OpenAPI::toJsonValue(m_fac_naa_flag));
    }
    if (m_fac_percent_minority_isSet) {
        obj.insert(QString("FacPercentMinority"), ::OpenAPI::toJsonValue(m_fac_percent_minority));
    }
    if (m_fac_population_density_isSet) {
        obj.insert(QString("FacPopulationDensity"), ::OpenAPI::toJsonValue(m_fac_population_density));
    }
    if (m_fac_sic_codes_isSet) {
        obj.insert(QString("FacSICCodes"), ::OpenAPI::toJsonValue(m_fac_sic_codes));
    }
    if (m_fac_std_county_name_isSet) {
        obj.insert(QString("FacStdCountyName"), ::OpenAPI::toJsonValue(m_fac_std_county_name));
    }
    if (m_fac_triair_releases_isSet) {
        obj.insert(QString("FacTRIAIRReleases"), ::OpenAPI::toJsonValue(m_fac_triair_releases));
    }
    if (m_fac_tri_carc_air_releases_isSet) {
        obj.insert(QString("FacTRICarcAIRReleases"), ::OpenAPI::toJsonValue(m_fac_tri_carc_air_releases));
    }
    if (m_fac_tri_haps_releases_isSet) {
        obj.insert(QString("FacTRIHapsReleases"), ::OpenAPI::toJsonValue(m_fac_tri_haps_releases));
    }
    if (m_fac_tri_reporter_isSet) {
        obj.insert(QString("FacTRIReporter"), ::OpenAPI::toJsonValue(m_fac_tri_reporter));
    }
    if (m_fac_us_mex_border_flg_isSet) {
        obj.insert(QString("FacUsMexBorderFlg"), ::OpenAPI::toJsonValue(m_fac_us_mex_border_flg));
    }
    if (m_ghgids_isSet) {
        obj.insert(QString("GHGIDs"), ::OpenAPI::toJsonValue(m_ghgids));
    }
    if (m_has_poll_rpt_isSet) {
        obj.insert(QString("HasPollRpt"), ::OpenAPI::toJsonValue(m_has_poll_rpt));
    }
    if (m_infea5yr_flag_isSet) {
        obj.insert(QString("Infea5yrFlag"), ::OpenAPI::toJsonValue(m_infea5yr_flag));
    }
    if (m_insp5yr_flag_isSet) {
        obj.insert(QString("Insp5yrFlag"), ::OpenAPI::toJsonValue(m_insp5yr_flag));
    }
    if (m_last_date_pce_isSet) {
        obj.insert(QString("LastDatePce"), ::OpenAPI::toJsonValue(m_last_date_pce));
    }
    if (m_last_date_pce_epa_isSet) {
        obj.insert(QString("LastDatePceEPA"), ::OpenAPI::toJsonValue(m_last_date_pce_epa));
    }
    if (m_last_date_pce_sta_isSet) {
        obj.insert(QString("LastDatePceSta"), ::OpenAPI::toJsonValue(m_last_date_pce_sta));
    }
    if (m_local_control_region_code_isSet) {
        obj.insert(QString("LocalControlRegionCode"), ::OpenAPI::toJsonValue(m_local_control_region_code));
    }
    if (m_local_control_region_name_isSet) {
        obj.insert(QString("LocalControlRegionName"), ::OpenAPI::toJsonValue(m_local_control_region_name));
    }
    if (m_lower48_isSet) {
        obj.insert(QString("Lower48"), ::OpenAPI::toJsonValue(m_lower48));
    }
    if (m_maint_pollutants_naa_isSet) {
        obj.insert(QString("MaintPollutantsNaa"), ::OpenAPI::toJsonValue(m_maint_pollutants_naa));
    }
    if (m_maint_standards_naa_isSet) {
        obj.insert(QString("MaintStandardsNaa"), ::OpenAPI::toJsonValue(m_maint_standards_naa));
    }
    if (m_maint_status_naa_isSet) {
        obj.insert(QString("MaintStatusNaa"), ::OpenAPI::toJsonValue(m_maint_status_naa));
    }
    if (m_map_isSet) {
        obj.insert(QString("Map"), ::OpenAPI::toJsonValue(m_map));
    }
    if (m_max_pctile_us_isSet) {
        obj.insert(QString("MaxPctileUs"), ::OpenAPI::toJsonValue(m_max_pctile_us));
    }
    if (m_max_score_isSet) {
        obj.insert(QString("MaxScore"), ::OpenAPI::toJsonValue(m_max_score));
    }
    if (m_na_pollutants_naa_isSet) {
        obj.insert(QString("NaPollutantsNaa"), ::OpenAPI::toJsonValue(m_na_pollutants_naa));
    }
    if (m_na_standards_naa_isSet) {
        obj.insert(QString("NaStandardsNaa"), ::OpenAPI::toJsonValue(m_na_standards_naa));
    }
    if (m_na_status_naa_isSet) {
        obj.insert(QString("NaStatusNaa"), ::OpenAPI::toJsonValue(m_na_status_naa));
    }
    if (m_naa_categories_isSet) {
        obj.insert(QString("NaaCategories"), ::OpenAPI::toJsonValue(m_naa_categories));
    }
    if (m_naa_pollutants_isSet) {
        obj.insert(QString("NaaPollutants"), ::OpenAPI::toJsonValue(m_naa_pollutants));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("ObjectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_other_permit_ids_isSet) {
        obj.insert(QString("OtherPermitIDs"), ::OpenAPI::toJsonValue(m_other_permit_ids));
    }
    if (m_over80_count_us_isSet) {
        obj.insert(QString("Over80CountUs"), ::OpenAPI::toJsonValue(m_over80_count_us));
    }
    if (m_pctile_cancer_us_isSet) {
        obj.insert(QString("PctileCancerUs"), ::OpenAPI::toJsonValue(m_pctile_cancer_us));
    }
    if (m_pctile_dpm_us_isSet) {
        obj.insert(QString("PctileDpmUs"), ::OpenAPI::toJsonValue(m_pctile_dpm_us));
    }
    if (m_pctile_o3_us_isSet) {
        obj.insert(QString("PctileO3Us"), ::OpenAPI::toJsonValue(m_pctile_o3_us));
    }
    if (m_pctile_pctpre1960_us_isSet) {
        obj.insert(QString("PctilePctpre1960Us"), ::OpenAPI::toJsonValue(m_pctile_pctpre1960_us));
    }
    if (m_pctile_pm_us_isSet) {
        obj.insert(QString("PctilePmUs"), ::OpenAPI::toJsonValue(m_pctile_pm_us));
    }
    if (m_pctile_proximity_npdesus_isSet) {
        obj.insert(QString("PctileProximityNPDESUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_npdesus));
    }
    if (m_pctile_proximity_npl_us_isSet) {
        obj.insert(QString("PctileProximityNplUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_npl_us));
    }
    if (m_pctile_proximity_rmp_us_isSet) {
        obj.insert(QString("PctileProximityRmpUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_rmp_us));
    }
    if (m_pctile_proximity_tsdf_us_isSet) {
        obj.insert(QString("PctileProximityTsdfUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_tsdf_us));
    }
    if (m_pctile_resp_us_isSet) {
        obj.insert(QString("PctileRespUs"), ::OpenAPI::toJsonValue(m_pctile_resp_us));
    }
    if (m_pctile_traffic_score_us_isSet) {
        obj.insert(QString("PctileTrafficScoreUs"), ::OpenAPI::toJsonValue(m_pctile_traffic_score_us));
    }
    if (m_rcraids_isSet) {
        obj.insert(QString("RCRAIDs"), ::OpenAPI::toJsonValue(m_rcraids));
    }
    if (m_reference_point_isSet) {
        obj.insert(QString("ReferencePoint"), ::OpenAPI::toJsonValue(m_reference_point));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("RegistryID"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_rmp_ids_isSet) {
        obj.insert(QString("RmpIDs"), ::OpenAPI::toJsonValue(m_rmp_ids));
    }
    if (m_sdwaids_isSet) {
        obj.insert(QString("SDWAIDs"), ::OpenAPI::toJsonValue(m_sdwaids));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_statute_isSet) {
        obj.insert(QString("Statute"), ::OpenAPI::toJsonValue(m_statute));
    }
    if (m_triids_isSet) {
        obj.insert(QString("TRIIDs"), ::OpenAPI::toJsonValue(m_triids));
    }
    if (m_tr_ibal_flag_isSet) {
        obj.insert(QString("TRIbalFlag"), ::OpenAPI::toJsonValue(m_tr_ibal_flag));
    }
    if (m_viol_flag_isSet) {
        obj.insert(QString("ViolFlag"), ::OpenAPI::toJsonValue(m_viol_flag));
    }
    if (m_web_docs_isSet) {
        obj.insert(QString("WebDocs"), ::OpenAPI::toJsonValue(m_web_docs));
    }
    return obj;
}

QString OAIAir06::getAir3yrComplQtrsHistory() const {
    return m_air3yr_compl_qtrs_history;
}
void OAIAir06::setAir3yrComplQtrsHistory(const QString &air3yr_compl_qtrs_history) {
    m_air3yr_compl_qtrs_history = air3yr_compl_qtrs_history;
    m_air3yr_compl_qtrs_history_isSet = true;
}

bool OAIAir06::is_air3yr_compl_qtrs_history_Set() const{
    return m_air3yr_compl_qtrs_history_isSet;
}

bool OAIAir06::is_air3yr_compl_qtrs_history_Valid() const{
    return m_air3yr_compl_qtrs_history_isValid;
}

QString OAIAir06::getAirCaseIds() const {
    return m_air_case_ids;
}
void OAIAir06::setAirCaseIds(const QString &air_case_ids) {
    m_air_case_ids = air_case_ids;
    m_air_case_ids_isSet = true;
}

bool OAIAir06::is_air_case_ids_Set() const{
    return m_air_case_ids_isSet;
}

bool OAIAir06::is_air_case_ids_Valid() const{
    return m_air_case_ids_isValid;
}

QString OAIAir06::getAirCity() const {
    return m_air_city;
}
void OAIAir06::setAirCity(const QString &air_city) {
    m_air_city = air_city;
    m_air_city_isSet = true;
}

bool OAIAir06::is_air_city_Set() const{
    return m_air_city_isSet;
}

bool OAIAir06::is_air_city_Valid() const{
    return m_air_city_isValid;
}

QString OAIAir06::getAirClassification() const {
    return m_air_classification;
}
void OAIAir06::setAirClassification(const QString &air_classification) {
    m_air_classification = air_classification;
    m_air_classification_isSet = true;
}

bool OAIAir06::is_air_classification_Set() const{
    return m_air_classification_isSet;
}

bool OAIAir06::is_air_classification_Valid() const{
    return m_air_classification_isValid;
}

QString OAIAir06::getAirComplStatus() const {
    return m_air_compl_status;
}
void OAIAir06::setAirComplStatus(const QString &air_compl_status) {
    m_air_compl_status = air_compl_status;
    m_air_compl_status_isSet = true;
}

bool OAIAir06::is_air_compl_status_Set() const{
    return m_air_compl_status_isSet;
}

bool OAIAir06::is_air_compl_status_Valid() const{
    return m_air_compl_status_isValid;
}

QString OAIAir06::getAirCounty() const {
    return m_air_county;
}
void OAIAir06::setAirCounty(const QString &air_county) {
    m_air_county = air_county;
    m_air_county_isSet = true;
}

bool OAIAir06::is_air_county_Set() const{
    return m_air_county_isSet;
}

bool OAIAir06::is_air_county_Valid() const{
    return m_air_county_isValid;
}

QString OAIAir06::getAirDaysLastEval() const {
    return m_air_days_last_eval;
}
void OAIAir06::setAirDaysLastEval(const QString &air_days_last_eval) {
    m_air_days_last_eval = air_days_last_eval;
    m_air_days_last_eval_isSet = true;
}

bool OAIAir06::is_air_days_last_eval_Set() const{
    return m_air_days_last_eval_isSet;
}

bool OAIAir06::is_air_days_last_eval_Valid() const{
    return m_air_days_last_eval_isValid;
}

QString OAIAir06::getAirepaRegion() const {
    return m_airepa_region;
}
void OAIAir06::setAirepaRegion(const QString &airepa_region) {
    m_airepa_region = airepa_region;
    m_airepa_region_isSet = true;
}

bool OAIAir06::is_airepa_region_Set() const{
    return m_airepa_region_isSet;
}

bool OAIAir06::is_airepa_region_Valid() const{
    return m_airepa_region_isValid;
}

QString OAIAir06::getAirEvalCnt() const {
    return m_air_eval_cnt;
}
void OAIAir06::setAirEvalCnt(const QString &air_eval_cnt) {
    m_air_eval_cnt = air_eval_cnt;
    m_air_eval_cnt_isSet = true;
}

bool OAIAir06::is_air_eval_cnt_Set() const{
    return m_air_eval_cnt_isSet;
}

bool OAIAir06::is_air_eval_cnt_Valid() const{
    return m_air_eval_cnt_isValid;
}

QString OAIAir06::getAirfipsCode() const {
    return m_airfips_code;
}
void OAIAir06::setAirfipsCode(const QString &airfips_code) {
    m_airfips_code = airfips_code;
    m_airfips_code_isSet = true;
}

bool OAIAir06::is_airfips_code_Set() const{
    return m_airfips_code_isSet;
}

bool OAIAir06::is_airfips_code_Valid() const{
    return m_airfips_code_isValid;
}

QString OAIAir06::getAirFacilityTypeCode() const {
    return m_air_facility_type_code;
}
void OAIAir06::setAirFacilityTypeCode(const QString &air_facility_type_code) {
    m_air_facility_type_code = air_facility_type_code;
    m_air_facility_type_code_isSet = true;
}

bool OAIAir06::is_air_facility_type_code_Set() const{
    return m_air_facility_type_code_isSet;
}

bool OAIAir06::is_air_facility_type_code_Valid() const{
    return m_air_facility_type_code_isValid;
}

QString OAIAir06::getAirFacilityTypeDesc() const {
    return m_air_facility_type_desc;
}
void OAIAir06::setAirFacilityTypeDesc(const QString &air_facility_type_desc) {
    m_air_facility_type_desc = air_facility_type_desc;
    m_air_facility_type_desc_isSet = true;
}

bool OAIAir06::is_air_facility_type_desc_Set() const{
    return m_air_facility_type_desc_isSet;
}

bool OAIAir06::is_air_facility_type_desc_Valid() const{
    return m_air_facility_type_desc_isValid;
}

QString OAIAir06::getAirFeaCnt() const {
    return m_air_fea_cnt;
}
void OAIAir06::setAirFeaCnt(const QString &air_fea_cnt) {
    m_air_fea_cnt = air_fea_cnt;
    m_air_fea_cnt_isSet = true;
}

bool OAIAir06::is_air_fea_cnt_Set() const{
    return m_air_fea_cnt_isSet;
}

bool OAIAir06::is_air_fea_cnt_Valid() const{
    return m_air_fea_cnt_isValid;
}

QString OAIAir06::getAirHpvStatus() const {
    return m_air_hpv_status;
}
void OAIAir06::setAirHpvStatus(const QString &air_hpv_status) {
    m_air_hpv_status = air_hpv_status;
    m_air_hpv_status_isSet = true;
}

bool OAIAir06::is_air_hpv_status_Set() const{
    return m_air_hpv_status_isSet;
}

bool OAIAir06::is_air_hpv_status_Valid() const{
    return m_air_hpv_status_isValid;
}

QString OAIAir06::getAirids() const {
    return m_airids;
}
void OAIAir06::setAirids(const QString &airids) {
    m_airids = airids;
    m_airids_isSet = true;
}

bool OAIAir06::is_airids_Set() const{
    return m_airids_isSet;
}

bool OAIAir06::is_airids_Valid() const{
    return m_airids_isValid;
}

QString OAIAir06::getAirIeaCnt() const {
    return m_air_iea_cnt;
}
void OAIAir06::setAirIeaCnt(const QString &air_iea_cnt) {
    m_air_iea_cnt = air_iea_cnt;
    m_air_iea_cnt_isSet = true;
}

bool OAIAir06::is_air_iea_cnt_Set() const{
    return m_air_iea_cnt_isSet;
}

bool OAIAir06::is_air_iea_cnt_Valid() const{
    return m_air_iea_cnt_isValid;
}

QString OAIAir06::getAirIndianCntryFlg() const {
    return m_air_indian_cntry_flg;
}
void OAIAir06::setAirIndianCntryFlg(const QString &air_indian_cntry_flg) {
    m_air_indian_cntry_flg = air_indian_cntry_flg;
    m_air_indian_cntry_flg_isSet = true;
}

bool OAIAir06::is_air_indian_cntry_flg_Set() const{
    return m_air_indian_cntry_flg_isSet;
}

bool OAIAir06::is_air_indian_cntry_flg_Valid() const{
    return m_air_indian_cntry_flg_isValid;
}

QString OAIAir06::getAirLastEvalDate() const {
    return m_air_last_eval_date;
}
void OAIAir06::setAirLastEvalDate(const QString &air_last_eval_date) {
    m_air_last_eval_date = air_last_eval_date;
    m_air_last_eval_date_isSet = true;
}

bool OAIAir06::is_air_last_eval_date_Set() const{
    return m_air_last_eval_date_isSet;
}

bool OAIAir06::is_air_last_eval_date_Valid() const{
    return m_air_last_eval_date_isValid;
}

QString OAIAir06::getAirLastEvalDateEpa() const {
    return m_air_last_eval_date_epa;
}
void OAIAir06::setAirLastEvalDateEpa(const QString &air_last_eval_date_epa) {
    m_air_last_eval_date_epa = air_last_eval_date_epa;
    m_air_last_eval_date_epa_isSet = true;
}

bool OAIAir06::is_air_last_eval_date_epa_Set() const{
    return m_air_last_eval_date_epa_isSet;
}

bool OAIAir06::is_air_last_eval_date_epa_Valid() const{
    return m_air_last_eval_date_epa_isValid;
}

QString OAIAir06::getAirLastEvalDateState() const {
    return m_air_last_eval_date_state;
}
void OAIAir06::setAirLastEvalDateState(const QString &air_last_eval_date_state) {
    m_air_last_eval_date_state = air_last_eval_date_state;
    m_air_last_eval_date_state_isSet = true;
}

bool OAIAir06::is_air_last_eval_date_state_Set() const{
    return m_air_last_eval_date_state_isSet;
}

bool OAIAir06::is_air_last_eval_date_state_Valid() const{
    return m_air_last_eval_date_state_isValid;
}

QString OAIAir06::getAirLastFeaDate() const {
    return m_air_last_fea_date;
}
void OAIAir06::setAirLastFeaDate(const QString &air_last_fea_date) {
    m_air_last_fea_date = air_last_fea_date;
    m_air_last_fea_date_isSet = true;
}

bool OAIAir06::is_air_last_fea_date_Set() const{
    return m_air_last_fea_date_isSet;
}

bool OAIAir06::is_air_last_fea_date_Valid() const{
    return m_air_last_fea_date_isValid;
}

QString OAIAir06::getAirLastFeaDateEpa() const {
    return m_air_last_fea_date_epa;
}
void OAIAir06::setAirLastFeaDateEpa(const QString &air_last_fea_date_epa) {
    m_air_last_fea_date_epa = air_last_fea_date_epa;
    m_air_last_fea_date_epa_isSet = true;
}

bool OAIAir06::is_air_last_fea_date_epa_Set() const{
    return m_air_last_fea_date_epa_isSet;
}

bool OAIAir06::is_air_last_fea_date_epa_Valid() const{
    return m_air_last_fea_date_epa_isValid;
}

QString OAIAir06::getAirLastFeaDateState() const {
    return m_air_last_fea_date_state;
}
void OAIAir06::setAirLastFeaDateState(const QString &air_last_fea_date_state) {
    m_air_last_fea_date_state = air_last_fea_date_state;
    m_air_last_fea_date_state_isSet = true;
}

bool OAIAir06::is_air_last_fea_date_state_Set() const{
    return m_air_last_fea_date_state_isSet;
}

bool OAIAir06::is_air_last_fea_date_state_Valid() const{
    return m_air_last_fea_date_state_isValid;
}

QString OAIAir06::getAirLastIeaDate() const {
    return m_air_last_iea_date;
}
void OAIAir06::setAirLastIeaDate(const QString &air_last_iea_date) {
    m_air_last_iea_date = air_last_iea_date;
    m_air_last_iea_date_isSet = true;
}

bool OAIAir06::is_air_last_iea_date_Set() const{
    return m_air_last_iea_date_isSet;
}

bool OAIAir06::is_air_last_iea_date_Valid() const{
    return m_air_last_iea_date_isValid;
}

QString OAIAir06::getAirLastIeaDateEpa() const {
    return m_air_last_iea_date_epa;
}
void OAIAir06::setAirLastIeaDateEpa(const QString &air_last_iea_date_epa) {
    m_air_last_iea_date_epa = air_last_iea_date_epa;
    m_air_last_iea_date_epa_isSet = true;
}

bool OAIAir06::is_air_last_iea_date_epa_Set() const{
    return m_air_last_iea_date_epa_isSet;
}

bool OAIAir06::is_air_last_iea_date_epa_Valid() const{
    return m_air_last_iea_date_epa_isValid;
}

QString OAIAir06::getAirLastIeaDateState() const {
    return m_air_last_iea_date_state;
}
void OAIAir06::setAirLastIeaDateState(const QString &air_last_iea_date_state) {
    m_air_last_iea_date_state = air_last_iea_date_state;
    m_air_last_iea_date_state_isSet = true;
}

bool OAIAir06::is_air_last_iea_date_state_Set() const{
    return m_air_last_iea_date_state_isSet;
}

bool OAIAir06::is_air_last_iea_date_state_Valid() const{
    return m_air_last_iea_date_state_isValid;
}

QString OAIAir06::getAirLastPenaltyDate() const {
    return m_air_last_penalty_date;
}
void OAIAir06::setAirLastPenaltyDate(const QString &air_last_penalty_date) {
    m_air_last_penalty_date = air_last_penalty_date;
    m_air_last_penalty_date_isSet = true;
}

bool OAIAir06::is_air_last_penalty_date_Set() const{
    return m_air_last_penalty_date_isSet;
}

bool OAIAir06::is_air_last_penalty_date_Valid() const{
    return m_air_last_penalty_date_isValid;
}

QString OAIAir06::getAirLastStckDateEpa() const {
    return m_air_last_stck_date_epa;
}
void OAIAir06::setAirLastStckDateEpa(const QString &air_last_stck_date_epa) {
    m_air_last_stck_date_epa = air_last_stck_date_epa;
    m_air_last_stck_date_epa_isSet = true;
}

bool OAIAir06::is_air_last_stck_date_epa_Set() const{
    return m_air_last_stck_date_epa_isSet;
}

bool OAIAir06::is_air_last_stck_date_epa_Valid() const{
    return m_air_last_stck_date_epa_isValid;
}

QString OAIAir06::getAirLastStckDateState() const {
    return m_air_last_stck_date_state;
}
void OAIAir06::setAirLastStckDateState(const QString &air_last_stck_date_state) {
    m_air_last_stck_date_state = air_last_stck_date_state;
    m_air_last_stck_date_state_isSet = true;
}

bool OAIAir06::is_air_last_stck_date_state_Set() const{
    return m_air_last_stck_date_state_isSet;
}

bool OAIAir06::is_air_last_stck_date_state_Valid() const{
    return m_air_last_stck_date_state_isValid;
}

QString OAIAir06::getAirLastStckTestDate() const {
    return m_air_last_stck_test_date;
}
void OAIAir06::setAirLastStckTestDate(const QString &air_last_stck_test_date) {
    m_air_last_stck_test_date = air_last_stck_test_date;
    m_air_last_stck_test_date_isSet = true;
}

bool OAIAir06::is_air_last_stck_test_date_Set() const{
    return m_air_last_stck_test_date_isSet;
}

bool OAIAir06::is_air_last_stck_test_date_Valid() const{
    return m_air_last_stck_test_date_isValid;
}

QString OAIAir06::getAirLastStckTestResults() const {
    return m_air_last_stck_test_results;
}
void OAIAir06::setAirLastStckTestResults(const QString &air_last_stck_test_results) {
    m_air_last_stck_test_results = air_last_stck_test_results;
    m_air_last_stck_test_results_isSet = true;
}

bool OAIAir06::is_air_last_stck_test_results_Set() const{
    return m_air_last_stck_test_results_isSet;
}

bool OAIAir06::is_air_last_stck_test_results_Valid() const{
    return m_air_last_stck_test_results_isValid;
}

QString OAIAir06::getAirLastViolDate() const {
    return m_air_last_viol_date;
}
void OAIAir06::setAirLastViolDate(const QString &air_last_viol_date) {
    m_air_last_viol_date = air_last_viol_date;
    m_air_last_viol_date_isSet = true;
}

bool OAIAir06::is_air_last_viol_date_Set() const{
    return m_air_last_viol_date_isSet;
}

bool OAIAir06::is_air_last_viol_date_Valid() const{
    return m_air_last_viol_date_isValid;
}

QString OAIAir06::getAirMacts() const {
    return m_air_macts;
}
void OAIAir06::setAirMacts(const QString &air_macts) {
    m_air_macts = air_macts;
    m_air_macts_isSet = true;
}

bool OAIAir06::is_air_macts_Set() const{
    return m_air_macts_isSet;
}

bool OAIAir06::is_air_macts_Valid() const{
    return m_air_macts_isValid;
}

QString OAIAir06::getAirMajorFlag() const {
    return m_air_major_flag;
}
void OAIAir06::setAirMajorFlag(const QString &air_major_flag) {
    m_air_major_flag = air_major_flag;
    m_air_major_flag_isSet = true;
}

bool OAIAir06::is_air_major_flag_Set() const{
    return m_air_major_flag_isSet;
}

bool OAIAir06::is_air_major_flag_Valid() const{
    return m_air_major_flag_isValid;
}

QString OAIAir06::getAirMnthsWithHpv() const {
    return m_air_mnths_with_hpv;
}
void OAIAir06::setAirMnthsWithHpv(const QString &air_mnths_with_hpv) {
    m_air_mnths_with_hpv = air_mnths_with_hpv;
    m_air_mnths_with_hpv_isSet = true;
}

bool OAIAir06::is_air_mnths_with_hpv_Set() const{
    return m_air_mnths_with_hpv_isSet;
}

bool OAIAir06::is_air_mnths_with_hpv_Valid() const{
    return m_air_mnths_with_hpv_isValid;
}

QString OAIAir06::getAirnaics() const {
    return m_airnaics;
}
void OAIAir06::setAirnaics(const QString &airnaics) {
    m_airnaics = airnaics;
    m_airnaics_isSet = true;
}

bool OAIAir06::is_airnaics_Set() const{
    return m_airnaics_isSet;
}

bool OAIAir06::is_airnaics_Valid() const{
    return m_airnaics_isValid;
}

QString OAIAir06::getAirName() const {
    return m_air_name;
}
void OAIAir06::setAirName(const QString &air_name) {
    m_air_name = air_name;
    m_air_name_isSet = true;
}

bool OAIAir06::is_air_name_Set() const{
    return m_air_name_isSet;
}

bool OAIAir06::is_air_name_Valid() const{
    return m_air_name_isValid;
}

QString OAIAir06::getAirNsps() const {
    return m_air_nsps;
}
void OAIAir06::setAirNsps(const QString &air_nsps) {
    m_air_nsps = air_nsps;
    m_air_nsps_isSet = true;
}

bool OAIAir06::is_air_nsps_Set() const{
    return m_air_nsps_isSet;
}

bool OAIAir06::is_air_nsps_Valid() const{
    return m_air_nsps_isValid;
}

QString OAIAir06::getAirNspsm() const {
    return m_air_nspsm;
}
void OAIAir06::setAirNspsm(const QString &air_nspsm) {
    m_air_nspsm = air_nspsm;
    m_air_nspsm_isSet = true;
}

bool OAIAir06::is_air_nspsm_Set() const{
    return m_air_nspsm_isSet;
}

bool OAIAir06::is_air_nspsm_Valid() const{
    return m_air_nspsm_isValid;
}

QString OAIAir06::getAirPenalties() const {
    return m_air_penalties;
}
void OAIAir06::setAirPenalties(const QString &air_penalties) {
    m_air_penalties = air_penalties;
    m_air_penalties_isSet = true;
}

bool OAIAir06::is_air_penalties_Set() const{
    return m_air_penalties_isSet;
}

bool OAIAir06::is_air_penalties_Valid() const{
    return m_air_penalties_isValid;
}

QString OAIAir06::getAirPollRecentViol() const {
    return m_air_poll_recent_viol;
}
void OAIAir06::setAirPollRecentViol(const QString &air_poll_recent_viol) {
    m_air_poll_recent_viol = air_poll_recent_viol;
    m_air_poll_recent_viol_isSet = true;
}

bool OAIAir06::is_air_poll_recent_viol_Set() const{
    return m_air_poll_recent_viol_isSet;
}

bool OAIAir06::is_air_poll_recent_viol_Valid() const{
    return m_air_poll_recent_viol_isValid;
}

QString OAIAir06::getAirPrograms() const {
    return m_air_programs;
}
void OAIAir06::setAirPrograms(const QString &air_programs) {
    m_air_programs = air_programs;
    m_air_programs_isSet = true;
}

bool OAIAir06::is_air_programs_Set() const{
    return m_air_programs_isSet;
}

bool OAIAir06::is_air_programs_Valid() const{
    return m_air_programs_isValid;
}

QString OAIAir06::getAirQtrsWithHpv() const {
    return m_air_qtrs_with_hpv;
}
void OAIAir06::setAirQtrsWithHpv(const QString &air_qtrs_with_hpv) {
    m_air_qtrs_with_hpv = air_qtrs_with_hpv;
    m_air_qtrs_with_hpv_isSet = true;
}

bool OAIAir06::is_air_qtrs_with_hpv_Set() const{
    return m_air_qtrs_with_hpv_isSet;
}

bool OAIAir06::is_air_qtrs_with_hpv_Valid() const{
    return m_air_qtrs_with_hpv_isValid;
}

QString OAIAir06::getAirQtrsWithViol() const {
    return m_air_qtrs_with_viol;
}
void OAIAir06::setAirQtrsWithViol(const QString &air_qtrs_with_viol) {
    m_air_qtrs_with_viol = air_qtrs_with_viol;
    m_air_qtrs_with_viol_isSet = true;
}

bool OAIAir06::is_air_qtrs_with_viol_Set() const{
    return m_air_qtrs_with_viol_isSet;
}

bool OAIAir06::is_air_qtrs_with_viol_Valid() const{
    return m_air_qtrs_with_viol_isValid;
}

QString OAIAir06::getAirRecentViolCnt() const {
    return m_air_recent_viol_cnt;
}
void OAIAir06::setAirRecentViolCnt(const QString &air_recent_viol_cnt) {
    m_air_recent_viol_cnt = air_recent_viol_cnt;
    m_air_recent_viol_cnt_isSet = true;
}

bool OAIAir06::is_air_recent_viol_cnt_Set() const{
    return m_air_recent_viol_cnt_isSet;
}

bool OAIAir06::is_air_recent_viol_cnt_Valid() const{
    return m_air_recent_viol_cnt_isValid;
}

QString OAIAir06::getAirStackTest5YrAll() const {
    return m_air_stack_test5_yr_all;
}
void OAIAir06::setAirStackTest5YrAll(const QString &air_stack_test5_yr_all) {
    m_air_stack_test5_yr_all = air_stack_test5_yr_all;
    m_air_stack_test5_yr_all_isSet = true;
}

bool OAIAir06::is_air_stack_test5_yr_all_Set() const{
    return m_air_stack_test5_yr_all_isSet;
}

bool OAIAir06::is_air_stack_test5_yr_all_Valid() const{
    return m_air_stack_test5_yr_all_isValid;
}

QString OAIAir06::getAirStackTest5YrFail() const {
    return m_air_stack_test5_yr_fail;
}
void OAIAir06::setAirStackTest5YrFail(const QString &air_stack_test5_yr_fail) {
    m_air_stack_test5_yr_fail = air_stack_test5_yr_fail;
    m_air_stack_test5_yr_fail_isSet = true;
}

bool OAIAir06::is_air_stack_test5_yr_fail_Set() const{
    return m_air_stack_test5_yr_fail_isSet;
}

bool OAIAir06::is_air_stack_test5_yr_fail_Valid() const{
    return m_air_stack_test5_yr_fail_isValid;
}

QString OAIAir06::getAirState() const {
    return m_air_state;
}
void OAIAir06::setAirState(const QString &air_state) {
    m_air_state = air_state;
    m_air_state_isSet = true;
}

bool OAIAir06::is_air_state_Set() const{
    return m_air_state_isSet;
}

bool OAIAir06::is_air_state_Valid() const{
    return m_air_state_isValid;
}

QString OAIAir06::getAirStatus() const {
    return m_air_status;
}
void OAIAir06::setAirStatus(const QString &air_status) {
    m_air_status = air_status;
    m_air_status_isSet = true;
}

bool OAIAir06::is_air_status_Set() const{
    return m_air_status_isSet;
}

bool OAIAir06::is_air_status_Valid() const{
    return m_air_status_isValid;
}

QString OAIAir06::getAirStreet() const {
    return m_air_street;
}
void OAIAir06::setAirStreet(const QString &air_street) {
    m_air_street = air_street;
    m_air_street_isSet = true;
}

bool OAIAir06::is_air_street_Set() const{
    return m_air_street_isSet;
}

bool OAIAir06::is_air_street_Valid() const{
    return m_air_street_isValid;
}

QString OAIAir06::getAirtrIbalEpAids() const {
    return m_airtr_ibal_ep_aids;
}
void OAIAir06::setAirtrIbalEpAids(const QString &airtr_ibal_ep_aids) {
    m_airtr_ibal_ep_aids = airtr_ibal_ep_aids;
    m_airtr_ibal_ep_aids_isSet = true;
}

bool OAIAir06::is_airtr_ibal_ep_aids_Set() const{
    return m_airtr_ibal_ep_aids_isSet;
}

bool OAIAir06::is_airtr_ibal_ep_aids_Valid() const{
    return m_airtr_ibal_ep_aids_isValid;
}

QString OAIAir06::getAirtrIbalNames() const {
    return m_airtr_ibal_names;
}
void OAIAir06::setAirtrIbalNames(const QString &airtr_ibal_names) {
    m_airtr_ibal_names = airtr_ibal_names;
    m_airtr_ibal_names_isSet = true;
}

bool OAIAir06::is_airtr_ibal_names_Set() const{
    return m_airtr_ibal_names_isSet;
}

bool OAIAir06::is_airtr_ibal_names_Valid() const{
    return m_airtr_ibal_names_isValid;
}

QString OAIAir06::getAirUniverse() const {
    return m_air_universe;
}
void OAIAir06::setAirUniverse(const QString &air_universe) {
    m_air_universe = air_universe;
    m_air_universe_isSet = true;
}

bool OAIAir06::is_air_universe_Set() const{
    return m_air_universe_isSet;
}

bool OAIAir06::is_air_universe_Valid() const{
    return m_air_universe_isValid;
}

QString OAIAir06::getAirZip() const {
    return m_air_zip;
}
void OAIAir06::setAirZip(const QString &air_zip) {
    m_air_zip = air_zip;
    m_air_zip_isSet = true;
}

bool OAIAir06::is_air_zip_Set() const{
    return m_air_zip_isSet;
}

bool OAIAir06::is_air_zip_Valid() const{
    return m_air_zip_isValid;
}

QString OAIAir06::getActiveLower48() const {
    return m_active_lower48;
}
void OAIAir06::setActiveLower48(const QString &active_lower48) {
    m_active_lower48 = active_lower48;
    m_active_lower48_isSet = true;
}

bool OAIAir06::is_active_lower48_Set() const{
    return m_active_lower48_isSet;
}

bool OAIAir06::is_active_lower48_Valid() const{
    return m_active_lower48_isValid;
}

QString OAIAir06::getCwaids() const {
    return m_cwaids;
}
void OAIAir06::setCwaids(const QString &cwaids) {
    m_cwaids = cwaids;
    m_cwaids_isSet = true;
}

bool OAIAir06::is_cwaids_Set() const{
    return m_cwaids_isSet;
}

bool OAIAir06::is_cwaids_Valid() const{
    return m_cwaids_isValid;
}

QString OAIAir06::getCalculatedAccuracyMeters() const {
    return m_calculated_accuracy_meters;
}
void OAIAir06::setCalculatedAccuracyMeters(const QString &calculated_accuracy_meters) {
    m_calculated_accuracy_meters = calculated_accuracy_meters;
    m_calculated_accuracy_meters_isSet = true;
}

bool OAIAir06::is_calculated_accuracy_meters_Set() const{
    return m_calculated_accuracy_meters_isSet;
}

bool OAIAir06::is_calculated_accuracy_meters_Valid() const{
    return m_calculated_accuracy_meters_isValid;
}

QString OAIAir06::getCamdIds() const {
    return m_camd_ids;
}
void OAIAir06::setCamdIds(const QString &camd_ids) {
    m_camd_ids = camd_ids;
    m_camd_ids_isSet = true;
}

bool OAIAir06::is_camd_ids_Set() const{
    return m_camd_ids_isSet;
}

bool OAIAir06::is_camd_ids_Valid() const{
    return m_camd_ids_isValid;
}

QString OAIAir06::getCensusBlockGroup() const {
    return m_census_block_group;
}
void OAIAir06::setCensusBlockGroup(const QString &census_block_group) {
    m_census_block_group = census_block_group;
    m_census_block_group_isSet = true;
}

bool OAIAir06::is_census_block_group_Set() const{
    return m_census_block_group_isSet;
}

bool OAIAir06::is_census_block_group_Valid() const{
    return m_census_block_group_isValid;
}

QString OAIAir06::getChesapeakeBayFlag() const {
    return m_chesapeake_bay_flag;
}
void OAIAir06::setChesapeakeBayFlag(const QString &chesapeake_bay_flag) {
    m_chesapeake_bay_flag = chesapeake_bay_flag;
    m_chesapeake_bay_flag_isSet = true;
}

bool OAIAir06::is_chesapeake_bay_flag_Set() const{
    return m_chesapeake_bay_flag_isSet;
}

bool OAIAir06::is_chesapeake_bay_flag_Valid() const{
    return m_chesapeake_bay_flag_isValid;
}

QString OAIAir06::getCollectionMethod() const {
    return m_collection_method;
}
void OAIAir06::setCollectionMethod(const QString &collection_method) {
    m_collection_method = collection_method;
    m_collection_method_isSet = true;
}

bool OAIAir06::is_collection_method_Set() const{
    return m_collection_method_isSet;
}

bool OAIAir06::is_collection_method_Valid() const{
    return m_collection_method_isValid;
}

QString OAIAir06::getCurrSvFlag() const {
    return m_curr_sv_flag;
}
void OAIAir06::setCurrSvFlag(const QString &curr_sv_flag) {
    m_curr_sv_flag = curr_sv_flag;
    m_curr_sv_flag_isSet = true;
}

bool OAIAir06::is_curr_sv_flag_Set() const{
    return m_curr_sv_flag_isSet;
}

bool OAIAir06::is_curr_sv_flag_Valid() const{
    return m_curr_sv_flag_isValid;
}

QString OAIAir06::getCurrVioFlag() const {
    return m_curr_vio_flag;
}
void OAIAir06::setCurrVioFlag(const QString &curr_vio_flag) {
    m_curr_vio_flag = curr_vio_flag;
    m_curr_vio_flag_isSet = true;
}

bool OAIAir06::is_curr_vio_flag_Set() const{
    return m_curr_vio_flag_isSet;
}

bool OAIAir06::is_curr_vio_flag_Valid() const{
    return m_curr_vio_flag_isValid;
}

QString OAIAir06::getEpaSystem() const {
    return m_epa_system;
}
void OAIAir06::setEpaSystem(const QString &epa_system) {
    m_epa_system = epa_system;
    m_epa_system_isSet = true;
}

bool OAIAir06::is_epa_system_Set() const{
    return m_epa_system_isSet;
}

bool OAIAir06::is_epa_system_Valid() const{
    return m_epa_system_isValid;
}

QString OAIAir06::getEa5yrFlag() const {
    return m_ea5yr_flag;
}
void OAIAir06::setEa5yrFlag(const QString &ea5yr_flag) {
    m_ea5yr_flag = ea5yr_flag;
    m_ea5yr_flag_isSet = true;
}

bool OAIAir06::is_ea5yr_flag_Set() const{
    return m_ea5yr_flag_isSet;
}

bool OAIAir06::is_ea5yr_flag_Valid() const{
    return m_ea5yr_flag_isValid;
}

QString OAIAir06::getEisIds() const {
    return m_eis_ids;
}
void OAIAir06::setEisIds(const QString &eis_ids) {
    m_eis_ids = eis_ids;
    m_eis_ids_isSet = true;
}

bool OAIAir06::is_eis_ids_Set() const{
    return m_eis_ids_isSet;
}

bool OAIAir06::is_eis_ids_Valid() const{
    return m_eis_ids_isValid;
}

QString OAIAir06::getEjscreenFlag() const {
    return m_ejscreen_flag;
}
void OAIAir06::setEjscreenFlag(const QString &ejscreen_flag) {
    m_ejscreen_flag = ejscreen_flag;
    m_ejscreen_flag_isSet = true;
}

bool OAIAir06::is_ejscreen_flag_Set() const{
    return m_ejscreen_flag_isSet;
}

bool OAIAir06::is_ejscreen_flag_Valid() const{
    return m_ejscreen_flag_isValid;
}

QString OAIAir06::getEjscreenFlagUs() const {
    return m_ejscreen_flag_us;
}
void OAIAir06::setEjscreenFlagUs(const QString &ejscreen_flag_us) {
    m_ejscreen_flag_us = ejscreen_flag_us;
    m_ejscreen_flag_us_isSet = true;
}

bool OAIAir06::is_ejscreen_flag_us_Set() const{
    return m_ejscreen_flag_us_isSet;
}

bool OAIAir06::is_ejscreen_flag_us_Valid() const{
    return m_ejscreen_flag_us_isValid;
}

QString OAIAir06::getFacCamdReporter() const {
    return m_fac_camd_reporter;
}
void OAIAir06::setFacCamdReporter(const QString &fac_camd_reporter) {
    m_fac_camd_reporter = fac_camd_reporter;
    m_fac_camd_reporter_isSet = true;
}

bool OAIAir06::is_fac_camd_reporter_Set() const{
    return m_fac_camd_reporter_isSet;
}

bool OAIAir06::is_fac_camd_reporter_Valid() const{
    return m_fac_camd_reporter_isValid;
}

QString OAIAir06::getFacCountyName() const {
    return m_fac_county_name;
}
void OAIAir06::setFacCountyName(const QString &fac_county_name) {
    m_fac_county_name = fac_county_name;
    m_fac_county_name_isSet = true;
}

bool OAIAir06::is_fac_county_name_Set() const{
    return m_fac_county_name_isSet;
}

bool OAIAir06::is_fac_county_name_Valid() const{
    return m_fac_county_name_isValid;
}

QString OAIAir06::getFacDerivedHuc() const {
    return m_fac_derived_huc;
}
void OAIAir06::setFacDerivedHuc(const QString &fac_derived_huc) {
    m_fac_derived_huc = fac_derived_huc;
    m_fac_derived_huc_isSet = true;
}

bool OAIAir06::is_fac_derived_huc_Set() const{
    return m_fac_derived_huc_isSet;
}

bool OAIAir06::is_fac_derived_huc_Valid() const{
    return m_fac_derived_huc_isValid;
}

QString OAIAir06::getFacDerivedTrIbes() const {
    return m_fac_derived_tr_ibes;
}
void OAIAir06::setFacDerivedTrIbes(const QString &fac_derived_tr_ibes) {
    m_fac_derived_tr_ibes = fac_derived_tr_ibes;
    m_fac_derived_tr_ibes_isSet = true;
}

bool OAIAir06::is_fac_derived_tr_ibes_Set() const{
    return m_fac_derived_tr_ibes_isSet;
}

bool OAIAir06::is_fac_derived_tr_ibes_Valid() const{
    return m_fac_derived_tr_ibes_isValid;
}

QString OAIAir06::getFacDerivedWbd() const {
    return m_fac_derived_wbd;
}
void OAIAir06::setFacDerivedWbd(const QString &fac_derived_wbd) {
    m_fac_derived_wbd = fac_derived_wbd;
    m_fac_derived_wbd_isSet = true;
}

bool OAIAir06::is_fac_derived_wbd_Set() const{
    return m_fac_derived_wbd_isSet;
}

bool OAIAir06::is_fac_derived_wbd_Valid() const{
    return m_fac_derived_wbd_isValid;
}

QString OAIAir06::getFacDerivedWbdName() const {
    return m_fac_derived_wbd_name;
}
void OAIAir06::setFacDerivedWbdName(const QString &fac_derived_wbd_name) {
    m_fac_derived_wbd_name = fac_derived_wbd_name;
    m_fac_derived_wbd_name_isSet = true;
}

bool OAIAir06::is_fac_derived_wbd_name_Set() const{
    return m_fac_derived_wbd_name_isSet;
}

bool OAIAir06::is_fac_derived_wbd_name_Valid() const{
    return m_fac_derived_wbd_name_isValid;
}

QString OAIAir06::getFacEisAirReleases() const {
    return m_fac_eis_air_releases;
}
void OAIAir06::setFacEisAirReleases(const QString &fac_eis_air_releases) {
    m_fac_eis_air_releases = fac_eis_air_releases;
    m_fac_eis_air_releases_isSet = true;
}

bool OAIAir06::is_fac_eis_air_releases_Set() const{
    return m_fac_eis_air_releases_isSet;
}

bool OAIAir06::is_fac_eis_air_releases_Valid() const{
    return m_fac_eis_air_releases_isValid;
}

QString OAIAir06::getFacEisReporter() const {
    return m_fac_eis_reporter;
}
void OAIAir06::setFacEisReporter(const QString &fac_eis_reporter) {
    m_fac_eis_reporter = fac_eis_reporter;
    m_fac_eis_reporter_isSet = true;
}

bool OAIAir06::is_fac_eis_reporter_Set() const{
    return m_fac_eis_reporter_isSet;
}

bool OAIAir06::is_fac_eis_reporter_Valid() const{
    return m_fac_eis_reporter_isValid;
}

QString OAIAir06::getFacFipsCode() const {
    return m_fac_fips_code;
}
void OAIAir06::setFacFipsCode(const QString &fac_fips_code) {
    m_fac_fips_code = fac_fips_code;
    m_fac_fips_code_isSet = true;
}

bool OAIAir06::is_fac_fips_code_Set() const{
    return m_fac_fips_code_isSet;
}

bool OAIAir06::is_fac_fips_code_Valid() const{
    return m_fac_fips_code_isValid;
}

QString OAIAir06::getFacFederalAgencyCode() const {
    return m_fac_federal_agency_code;
}
void OAIAir06::setFacFederalAgencyCode(const QString &fac_federal_agency_code) {
    m_fac_federal_agency_code = fac_federal_agency_code;
    m_fac_federal_agency_code_isSet = true;
}

bool OAIAir06::is_fac_federal_agency_code_Set() const{
    return m_fac_federal_agency_code_isSet;
}

bool OAIAir06::is_fac_federal_agency_code_Valid() const{
    return m_fac_federal_agency_code_isValid;
}

QString OAIAir06::getFacFederalAgencyName() const {
    return m_fac_federal_agency_name;
}
void OAIAir06::setFacFederalAgencyName(const QString &fac_federal_agency_name) {
    m_fac_federal_agency_name = fac_federal_agency_name;
    m_fac_federal_agency_name_isSet = true;
}

bool OAIAir06::is_fac_federal_agency_name_Set() const{
    return m_fac_federal_agency_name_isSet;
}

bool OAIAir06::is_fac_federal_agency_name_Valid() const{
    return m_fac_federal_agency_name_isValid;
}

QString OAIAir06::getFacGhgco2Releases() const {
    return m_fac_ghgco2_releases;
}
void OAIAir06::setFacGhgco2Releases(const QString &fac_ghgco2_releases) {
    m_fac_ghgco2_releases = fac_ghgco2_releases;
    m_fac_ghgco2_releases_isSet = true;
}

bool OAIAir06::is_fac_ghgco2_releases_Set() const{
    return m_fac_ghgco2_releases_isSet;
}

bool OAIAir06::is_fac_ghgco2_releases_Valid() const{
    return m_fac_ghgco2_releases_isValid;
}

QString OAIAir06::getFacGhgReporter() const {
    return m_fac_ghg_reporter;
}
void OAIAir06::setFacGhgReporter(const QString &fac_ghg_reporter) {
    m_fac_ghg_reporter = fac_ghg_reporter;
    m_fac_ghg_reporter_isSet = true;
}

bool OAIAir06::is_fac_ghg_reporter_Set() const{
    return m_fac_ghg_reporter_isSet;
}

bool OAIAir06::is_fac_ghg_reporter_Valid() const{
    return m_fac_ghg_reporter_isValid;
}

QString OAIAir06::getFacIndianCntryFlg() const {
    return m_fac_indian_cntry_flg;
}
void OAIAir06::setFacIndianCntryFlg(const QString &fac_indian_cntry_flg) {
    m_fac_indian_cntry_flg = fac_indian_cntry_flg;
    m_fac_indian_cntry_flg_isSet = true;
}

bool OAIAir06::is_fac_indian_cntry_flg_Set() const{
    return m_fac_indian_cntry_flg_isSet;
}

bool OAIAir06::is_fac_indian_cntry_flg_Valid() const{
    return m_fac_indian_cntry_flg_isValid;
}

QString OAIAir06::getFacIndianSpatialFlg() const {
    return m_fac_indian_spatial_flg;
}
void OAIAir06::setFacIndianSpatialFlg(const QString &fac_indian_spatial_flg) {
    m_fac_indian_spatial_flg = fac_indian_spatial_flg;
    m_fac_indian_spatial_flg_isSet = true;
}

bool OAIAir06::is_fac_indian_spatial_flg_Set() const{
    return m_fac_indian_spatial_flg_isSet;
}

bool OAIAir06::is_fac_indian_spatial_flg_Valid() const{
    return m_fac_indian_spatial_flg_isValid;
}

QString OAIAir06::getFacLat() const {
    return m_fac_lat;
}
void OAIAir06::setFacLat(const QString &fac_lat) {
    m_fac_lat = fac_lat;
    m_fac_lat_isSet = true;
}

bool OAIAir06::is_fac_lat_Set() const{
    return m_fac_lat_isSet;
}

bool OAIAir06::is_fac_lat_Valid() const{
    return m_fac_lat_isValid;
}

QString OAIAir06::getFacLong() const {
    return m_fac_long;
}
void OAIAir06::setFacLong(const QString &fac_long) {
    m_fac_long = fac_long;
    m_fac_long_isSet = true;
}

bool OAIAir06::is_fac_long_Set() const{
    return m_fac_long_isSet;
}

bool OAIAir06::is_fac_long_Valid() const{
    return m_fac_long_isValid;
}

QString OAIAir06::getFacMapFlg() const {
    return m_fac_map_flg;
}
void OAIAir06::setFacMapFlg(const QString &fac_map_flg) {
    m_fac_map_flg = fac_map_flg;
    m_fac_map_flg_isSet = true;
}

bool OAIAir06::is_fac_map_flg_Set() const{
    return m_fac_map_flg_isSet;
}

bool OAIAir06::is_fac_map_flg_Valid() const{
    return m_fac_map_flg_isValid;
}

QString OAIAir06::getFacMapIcon() const {
    return m_fac_map_icon;
}
void OAIAir06::setFacMapIcon(const QString &fac_map_icon) {
    m_fac_map_icon = fac_map_icon;
    m_fac_map_icon_isSet = true;
}

bool OAIAir06::is_fac_map_icon_Set() const{
    return m_fac_map_icon_isSet;
}

bool OAIAir06::is_fac_map_icon_Valid() const{
    return m_fac_map_icon_isValid;
}

QString OAIAir06::getFacNaaFlag() const {
    return m_fac_naa_flag;
}
void OAIAir06::setFacNaaFlag(const QString &fac_naa_flag) {
    m_fac_naa_flag = fac_naa_flag;
    m_fac_naa_flag_isSet = true;
}

bool OAIAir06::is_fac_naa_flag_Set() const{
    return m_fac_naa_flag_isSet;
}

bool OAIAir06::is_fac_naa_flag_Valid() const{
    return m_fac_naa_flag_isValid;
}

QString OAIAir06::getFacPercentMinority() const {
    return m_fac_percent_minority;
}
void OAIAir06::setFacPercentMinority(const QString &fac_percent_minority) {
    m_fac_percent_minority = fac_percent_minority;
    m_fac_percent_minority_isSet = true;
}

bool OAIAir06::is_fac_percent_minority_Set() const{
    return m_fac_percent_minority_isSet;
}

bool OAIAir06::is_fac_percent_minority_Valid() const{
    return m_fac_percent_minority_isValid;
}

QString OAIAir06::getFacPopulationDensity() const {
    return m_fac_population_density;
}
void OAIAir06::setFacPopulationDensity(const QString &fac_population_density) {
    m_fac_population_density = fac_population_density;
    m_fac_population_density_isSet = true;
}

bool OAIAir06::is_fac_population_density_Set() const{
    return m_fac_population_density_isSet;
}

bool OAIAir06::is_fac_population_density_Valid() const{
    return m_fac_population_density_isValid;
}

QString OAIAir06::getFacSicCodes() const {
    return m_fac_sic_codes;
}
void OAIAir06::setFacSicCodes(const QString &fac_sic_codes) {
    m_fac_sic_codes = fac_sic_codes;
    m_fac_sic_codes_isSet = true;
}

bool OAIAir06::is_fac_sic_codes_Set() const{
    return m_fac_sic_codes_isSet;
}

bool OAIAir06::is_fac_sic_codes_Valid() const{
    return m_fac_sic_codes_isValid;
}

QString OAIAir06::getFacStdCountyName() const {
    return m_fac_std_county_name;
}
void OAIAir06::setFacStdCountyName(const QString &fac_std_county_name) {
    m_fac_std_county_name = fac_std_county_name;
    m_fac_std_county_name_isSet = true;
}

bool OAIAir06::is_fac_std_county_name_Set() const{
    return m_fac_std_county_name_isSet;
}

bool OAIAir06::is_fac_std_county_name_Valid() const{
    return m_fac_std_county_name_isValid;
}

QString OAIAir06::getFacTriairReleases() const {
    return m_fac_triair_releases;
}
void OAIAir06::setFacTriairReleases(const QString &fac_triair_releases) {
    m_fac_triair_releases = fac_triair_releases;
    m_fac_triair_releases_isSet = true;
}

bool OAIAir06::is_fac_triair_releases_Set() const{
    return m_fac_triair_releases_isSet;
}

bool OAIAir06::is_fac_triair_releases_Valid() const{
    return m_fac_triair_releases_isValid;
}

QString OAIAir06::getFacTriCarcAirReleases() const {
    return m_fac_tri_carc_air_releases;
}
void OAIAir06::setFacTriCarcAirReleases(const QString &fac_tri_carc_air_releases) {
    m_fac_tri_carc_air_releases = fac_tri_carc_air_releases;
    m_fac_tri_carc_air_releases_isSet = true;
}

bool OAIAir06::is_fac_tri_carc_air_releases_Set() const{
    return m_fac_tri_carc_air_releases_isSet;
}

bool OAIAir06::is_fac_tri_carc_air_releases_Valid() const{
    return m_fac_tri_carc_air_releases_isValid;
}

QString OAIAir06::getFacTriHapsReleases() const {
    return m_fac_tri_haps_releases;
}
void OAIAir06::setFacTriHapsReleases(const QString &fac_tri_haps_releases) {
    m_fac_tri_haps_releases = fac_tri_haps_releases;
    m_fac_tri_haps_releases_isSet = true;
}

bool OAIAir06::is_fac_tri_haps_releases_Set() const{
    return m_fac_tri_haps_releases_isSet;
}

bool OAIAir06::is_fac_tri_haps_releases_Valid() const{
    return m_fac_tri_haps_releases_isValid;
}

QString OAIAir06::getFacTriReporter() const {
    return m_fac_tri_reporter;
}
void OAIAir06::setFacTriReporter(const QString &fac_tri_reporter) {
    m_fac_tri_reporter = fac_tri_reporter;
    m_fac_tri_reporter_isSet = true;
}

bool OAIAir06::is_fac_tri_reporter_Set() const{
    return m_fac_tri_reporter_isSet;
}

bool OAIAir06::is_fac_tri_reporter_Valid() const{
    return m_fac_tri_reporter_isValid;
}

QString OAIAir06::getFacUsMexBorderFlg() const {
    return m_fac_us_mex_border_flg;
}
void OAIAir06::setFacUsMexBorderFlg(const QString &fac_us_mex_border_flg) {
    m_fac_us_mex_border_flg = fac_us_mex_border_flg;
    m_fac_us_mex_border_flg_isSet = true;
}

bool OAIAir06::is_fac_us_mex_border_flg_Set() const{
    return m_fac_us_mex_border_flg_isSet;
}

bool OAIAir06::is_fac_us_mex_border_flg_Valid() const{
    return m_fac_us_mex_border_flg_isValid;
}

QString OAIAir06::getGhgids() const {
    return m_ghgids;
}
void OAIAir06::setGhgids(const QString &ghgids) {
    m_ghgids = ghgids;
    m_ghgids_isSet = true;
}

bool OAIAir06::is_ghgids_Set() const{
    return m_ghgids_isSet;
}

bool OAIAir06::is_ghgids_Valid() const{
    return m_ghgids_isValid;
}

QString OAIAir06::getHasPollRpt() const {
    return m_has_poll_rpt;
}
void OAIAir06::setHasPollRpt(const QString &has_poll_rpt) {
    m_has_poll_rpt = has_poll_rpt;
    m_has_poll_rpt_isSet = true;
}

bool OAIAir06::is_has_poll_rpt_Set() const{
    return m_has_poll_rpt_isSet;
}

bool OAIAir06::is_has_poll_rpt_Valid() const{
    return m_has_poll_rpt_isValid;
}

QString OAIAir06::getInfea5yrFlag() const {
    return m_infea5yr_flag;
}
void OAIAir06::setInfea5yrFlag(const QString &infea5yr_flag) {
    m_infea5yr_flag = infea5yr_flag;
    m_infea5yr_flag_isSet = true;
}

bool OAIAir06::is_infea5yr_flag_Set() const{
    return m_infea5yr_flag_isSet;
}

bool OAIAir06::is_infea5yr_flag_Valid() const{
    return m_infea5yr_flag_isValid;
}

QString OAIAir06::getInsp5yrFlag() const {
    return m_insp5yr_flag;
}
void OAIAir06::setInsp5yrFlag(const QString &insp5yr_flag) {
    m_insp5yr_flag = insp5yr_flag;
    m_insp5yr_flag_isSet = true;
}

bool OAIAir06::is_insp5yr_flag_Set() const{
    return m_insp5yr_flag_isSet;
}

bool OAIAir06::is_insp5yr_flag_Valid() const{
    return m_insp5yr_flag_isValid;
}

QString OAIAir06::getLastDatePce() const {
    return m_last_date_pce;
}
void OAIAir06::setLastDatePce(const QString &last_date_pce) {
    m_last_date_pce = last_date_pce;
    m_last_date_pce_isSet = true;
}

bool OAIAir06::is_last_date_pce_Set() const{
    return m_last_date_pce_isSet;
}

bool OAIAir06::is_last_date_pce_Valid() const{
    return m_last_date_pce_isValid;
}

QString OAIAir06::getLastDatePceEpa() const {
    return m_last_date_pce_epa;
}
void OAIAir06::setLastDatePceEpa(const QString &last_date_pce_epa) {
    m_last_date_pce_epa = last_date_pce_epa;
    m_last_date_pce_epa_isSet = true;
}

bool OAIAir06::is_last_date_pce_epa_Set() const{
    return m_last_date_pce_epa_isSet;
}

bool OAIAir06::is_last_date_pce_epa_Valid() const{
    return m_last_date_pce_epa_isValid;
}

QString OAIAir06::getLastDatePceSta() const {
    return m_last_date_pce_sta;
}
void OAIAir06::setLastDatePceSta(const QString &last_date_pce_sta) {
    m_last_date_pce_sta = last_date_pce_sta;
    m_last_date_pce_sta_isSet = true;
}

bool OAIAir06::is_last_date_pce_sta_Set() const{
    return m_last_date_pce_sta_isSet;
}

bool OAIAir06::is_last_date_pce_sta_Valid() const{
    return m_last_date_pce_sta_isValid;
}

QString OAIAir06::getLocalControlRegionCode() const {
    return m_local_control_region_code;
}
void OAIAir06::setLocalControlRegionCode(const QString &local_control_region_code) {
    m_local_control_region_code = local_control_region_code;
    m_local_control_region_code_isSet = true;
}

bool OAIAir06::is_local_control_region_code_Set() const{
    return m_local_control_region_code_isSet;
}

bool OAIAir06::is_local_control_region_code_Valid() const{
    return m_local_control_region_code_isValid;
}

QString OAIAir06::getLocalControlRegionName() const {
    return m_local_control_region_name;
}
void OAIAir06::setLocalControlRegionName(const QString &local_control_region_name) {
    m_local_control_region_name = local_control_region_name;
    m_local_control_region_name_isSet = true;
}

bool OAIAir06::is_local_control_region_name_Set() const{
    return m_local_control_region_name_isSet;
}

bool OAIAir06::is_local_control_region_name_Valid() const{
    return m_local_control_region_name_isValid;
}

QString OAIAir06::getLower48() const {
    return m_lower48;
}
void OAIAir06::setLower48(const QString &lower48) {
    m_lower48 = lower48;
    m_lower48_isSet = true;
}

bool OAIAir06::is_lower48_Set() const{
    return m_lower48_isSet;
}

bool OAIAir06::is_lower48_Valid() const{
    return m_lower48_isValid;
}

QString OAIAir06::getMaintPollutantsNaa() const {
    return m_maint_pollutants_naa;
}
void OAIAir06::setMaintPollutantsNaa(const QString &maint_pollutants_naa) {
    m_maint_pollutants_naa = maint_pollutants_naa;
    m_maint_pollutants_naa_isSet = true;
}

bool OAIAir06::is_maint_pollutants_naa_Set() const{
    return m_maint_pollutants_naa_isSet;
}

bool OAIAir06::is_maint_pollutants_naa_Valid() const{
    return m_maint_pollutants_naa_isValid;
}

QString OAIAir06::getMaintStandardsNaa() const {
    return m_maint_standards_naa;
}
void OAIAir06::setMaintStandardsNaa(const QString &maint_standards_naa) {
    m_maint_standards_naa = maint_standards_naa;
    m_maint_standards_naa_isSet = true;
}

bool OAIAir06::is_maint_standards_naa_Set() const{
    return m_maint_standards_naa_isSet;
}

bool OAIAir06::is_maint_standards_naa_Valid() const{
    return m_maint_standards_naa_isValid;
}

QString OAIAir06::getMaintStatusNaa() const {
    return m_maint_status_naa;
}
void OAIAir06::setMaintStatusNaa(const QString &maint_status_naa) {
    m_maint_status_naa = maint_status_naa;
    m_maint_status_naa_isSet = true;
}

bool OAIAir06::is_maint_status_naa_Set() const{
    return m_maint_status_naa_isSet;
}

bool OAIAir06::is_maint_status_naa_Valid() const{
    return m_maint_status_naa_isValid;
}

QString OAIAir06::getMap() const {
    return m_map;
}
void OAIAir06::setMap(const QString &map) {
    m_map = map;
    m_map_isSet = true;
}

bool OAIAir06::is_map_Set() const{
    return m_map_isSet;
}

bool OAIAir06::is_map_Valid() const{
    return m_map_isValid;
}

QString OAIAir06::getMaxPctileUs() const {
    return m_max_pctile_us;
}
void OAIAir06::setMaxPctileUs(const QString &max_pctile_us) {
    m_max_pctile_us = max_pctile_us;
    m_max_pctile_us_isSet = true;
}

bool OAIAir06::is_max_pctile_us_Set() const{
    return m_max_pctile_us_isSet;
}

bool OAIAir06::is_max_pctile_us_Valid() const{
    return m_max_pctile_us_isValid;
}

QString OAIAir06::getMaxScore() const {
    return m_max_score;
}
void OAIAir06::setMaxScore(const QString &max_score) {
    m_max_score = max_score;
    m_max_score_isSet = true;
}

bool OAIAir06::is_max_score_Set() const{
    return m_max_score_isSet;
}

bool OAIAir06::is_max_score_Valid() const{
    return m_max_score_isValid;
}

QString OAIAir06::getNaPollutantsNaa() const {
    return m_na_pollutants_naa;
}
void OAIAir06::setNaPollutantsNaa(const QString &na_pollutants_naa) {
    m_na_pollutants_naa = na_pollutants_naa;
    m_na_pollutants_naa_isSet = true;
}

bool OAIAir06::is_na_pollutants_naa_Set() const{
    return m_na_pollutants_naa_isSet;
}

bool OAIAir06::is_na_pollutants_naa_Valid() const{
    return m_na_pollutants_naa_isValid;
}

QString OAIAir06::getNaStandardsNaa() const {
    return m_na_standards_naa;
}
void OAIAir06::setNaStandardsNaa(const QString &na_standards_naa) {
    m_na_standards_naa = na_standards_naa;
    m_na_standards_naa_isSet = true;
}

bool OAIAir06::is_na_standards_naa_Set() const{
    return m_na_standards_naa_isSet;
}

bool OAIAir06::is_na_standards_naa_Valid() const{
    return m_na_standards_naa_isValid;
}

QString OAIAir06::getNaStatusNaa() const {
    return m_na_status_naa;
}
void OAIAir06::setNaStatusNaa(const QString &na_status_naa) {
    m_na_status_naa = na_status_naa;
    m_na_status_naa_isSet = true;
}

bool OAIAir06::is_na_status_naa_Set() const{
    return m_na_status_naa_isSet;
}

bool OAIAir06::is_na_status_naa_Valid() const{
    return m_na_status_naa_isValid;
}

QString OAIAir06::getNaaCategories() const {
    return m_naa_categories;
}
void OAIAir06::setNaaCategories(const QString &naa_categories) {
    m_naa_categories = naa_categories;
    m_naa_categories_isSet = true;
}

bool OAIAir06::is_naa_categories_Set() const{
    return m_naa_categories_isSet;
}

bool OAIAir06::is_naa_categories_Valid() const{
    return m_naa_categories_isValid;
}

QString OAIAir06::getNaaPollutants() const {
    return m_naa_pollutants;
}
void OAIAir06::setNaaPollutants(const QString &naa_pollutants) {
    m_naa_pollutants = naa_pollutants;
    m_naa_pollutants_isSet = true;
}

bool OAIAir06::is_naa_pollutants_Set() const{
    return m_naa_pollutants_isSet;
}

bool OAIAir06::is_naa_pollutants_Valid() const{
    return m_naa_pollutants_isValid;
}

QString OAIAir06::getObjectId() const {
    return m_object_id;
}
void OAIAir06::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIAir06::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIAir06::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIAir06::getOtherPermitIds() const {
    return m_other_permit_ids;
}
void OAIAir06::setOtherPermitIds(const QString &other_permit_ids) {
    m_other_permit_ids = other_permit_ids;
    m_other_permit_ids_isSet = true;
}

bool OAIAir06::is_other_permit_ids_Set() const{
    return m_other_permit_ids_isSet;
}

bool OAIAir06::is_other_permit_ids_Valid() const{
    return m_other_permit_ids_isValid;
}

QString OAIAir06::getOver80CountUs() const {
    return m_over80_count_us;
}
void OAIAir06::setOver80CountUs(const QString &over80_count_us) {
    m_over80_count_us = over80_count_us;
    m_over80_count_us_isSet = true;
}

bool OAIAir06::is_over80_count_us_Set() const{
    return m_over80_count_us_isSet;
}

bool OAIAir06::is_over80_count_us_Valid() const{
    return m_over80_count_us_isValid;
}

QString OAIAir06::getPctileCancerUs() const {
    return m_pctile_cancer_us;
}
void OAIAir06::setPctileCancerUs(const QString &pctile_cancer_us) {
    m_pctile_cancer_us = pctile_cancer_us;
    m_pctile_cancer_us_isSet = true;
}

bool OAIAir06::is_pctile_cancer_us_Set() const{
    return m_pctile_cancer_us_isSet;
}

bool OAIAir06::is_pctile_cancer_us_Valid() const{
    return m_pctile_cancer_us_isValid;
}

QString OAIAir06::getPctileDpmUs() const {
    return m_pctile_dpm_us;
}
void OAIAir06::setPctileDpmUs(const QString &pctile_dpm_us) {
    m_pctile_dpm_us = pctile_dpm_us;
    m_pctile_dpm_us_isSet = true;
}

bool OAIAir06::is_pctile_dpm_us_Set() const{
    return m_pctile_dpm_us_isSet;
}

bool OAIAir06::is_pctile_dpm_us_Valid() const{
    return m_pctile_dpm_us_isValid;
}

QString OAIAir06::getPctileO3Us() const {
    return m_pctile_o3_us;
}
void OAIAir06::setPctileO3Us(const QString &pctile_o3_us) {
    m_pctile_o3_us = pctile_o3_us;
    m_pctile_o3_us_isSet = true;
}

bool OAIAir06::is_pctile_o3_us_Set() const{
    return m_pctile_o3_us_isSet;
}

bool OAIAir06::is_pctile_o3_us_Valid() const{
    return m_pctile_o3_us_isValid;
}

QString OAIAir06::getPctilePctpre1960Us() const {
    return m_pctile_pctpre1960_us;
}
void OAIAir06::setPctilePctpre1960Us(const QString &pctile_pctpre1960_us) {
    m_pctile_pctpre1960_us = pctile_pctpre1960_us;
    m_pctile_pctpre1960_us_isSet = true;
}

bool OAIAir06::is_pctile_pctpre1960_us_Set() const{
    return m_pctile_pctpre1960_us_isSet;
}

bool OAIAir06::is_pctile_pctpre1960_us_Valid() const{
    return m_pctile_pctpre1960_us_isValid;
}

QString OAIAir06::getPctilePmUs() const {
    return m_pctile_pm_us;
}
void OAIAir06::setPctilePmUs(const QString &pctile_pm_us) {
    m_pctile_pm_us = pctile_pm_us;
    m_pctile_pm_us_isSet = true;
}

bool OAIAir06::is_pctile_pm_us_Set() const{
    return m_pctile_pm_us_isSet;
}

bool OAIAir06::is_pctile_pm_us_Valid() const{
    return m_pctile_pm_us_isValid;
}

QString OAIAir06::getPctileProximityNpdesus() const {
    return m_pctile_proximity_npdesus;
}
void OAIAir06::setPctileProximityNpdesus(const QString &pctile_proximity_npdesus) {
    m_pctile_proximity_npdesus = pctile_proximity_npdesus;
    m_pctile_proximity_npdesus_isSet = true;
}

bool OAIAir06::is_pctile_proximity_npdesus_Set() const{
    return m_pctile_proximity_npdesus_isSet;
}

bool OAIAir06::is_pctile_proximity_npdesus_Valid() const{
    return m_pctile_proximity_npdesus_isValid;
}

QString OAIAir06::getPctileProximityNplUs() const {
    return m_pctile_proximity_npl_us;
}
void OAIAir06::setPctileProximityNplUs(const QString &pctile_proximity_npl_us) {
    m_pctile_proximity_npl_us = pctile_proximity_npl_us;
    m_pctile_proximity_npl_us_isSet = true;
}

bool OAIAir06::is_pctile_proximity_npl_us_Set() const{
    return m_pctile_proximity_npl_us_isSet;
}

bool OAIAir06::is_pctile_proximity_npl_us_Valid() const{
    return m_pctile_proximity_npl_us_isValid;
}

QString OAIAir06::getPctileProximityRmpUs() const {
    return m_pctile_proximity_rmp_us;
}
void OAIAir06::setPctileProximityRmpUs(const QString &pctile_proximity_rmp_us) {
    m_pctile_proximity_rmp_us = pctile_proximity_rmp_us;
    m_pctile_proximity_rmp_us_isSet = true;
}

bool OAIAir06::is_pctile_proximity_rmp_us_Set() const{
    return m_pctile_proximity_rmp_us_isSet;
}

bool OAIAir06::is_pctile_proximity_rmp_us_Valid() const{
    return m_pctile_proximity_rmp_us_isValid;
}

QString OAIAir06::getPctileProximityTsdfUs() const {
    return m_pctile_proximity_tsdf_us;
}
void OAIAir06::setPctileProximityTsdfUs(const QString &pctile_proximity_tsdf_us) {
    m_pctile_proximity_tsdf_us = pctile_proximity_tsdf_us;
    m_pctile_proximity_tsdf_us_isSet = true;
}

bool OAIAir06::is_pctile_proximity_tsdf_us_Set() const{
    return m_pctile_proximity_tsdf_us_isSet;
}

bool OAIAir06::is_pctile_proximity_tsdf_us_Valid() const{
    return m_pctile_proximity_tsdf_us_isValid;
}

QString OAIAir06::getPctileRespUs() const {
    return m_pctile_resp_us;
}
void OAIAir06::setPctileRespUs(const QString &pctile_resp_us) {
    m_pctile_resp_us = pctile_resp_us;
    m_pctile_resp_us_isSet = true;
}

bool OAIAir06::is_pctile_resp_us_Set() const{
    return m_pctile_resp_us_isSet;
}

bool OAIAir06::is_pctile_resp_us_Valid() const{
    return m_pctile_resp_us_isValid;
}

QString OAIAir06::getPctileTrafficScoreUs() const {
    return m_pctile_traffic_score_us;
}
void OAIAir06::setPctileTrafficScoreUs(const QString &pctile_traffic_score_us) {
    m_pctile_traffic_score_us = pctile_traffic_score_us;
    m_pctile_traffic_score_us_isSet = true;
}

bool OAIAir06::is_pctile_traffic_score_us_Set() const{
    return m_pctile_traffic_score_us_isSet;
}

bool OAIAir06::is_pctile_traffic_score_us_Valid() const{
    return m_pctile_traffic_score_us_isValid;
}

QString OAIAir06::getRcraids() const {
    return m_rcraids;
}
void OAIAir06::setRcraids(const QString &rcraids) {
    m_rcraids = rcraids;
    m_rcraids_isSet = true;
}

bool OAIAir06::is_rcraids_Set() const{
    return m_rcraids_isSet;
}

bool OAIAir06::is_rcraids_Valid() const{
    return m_rcraids_isValid;
}

QString OAIAir06::getReferencePoint() const {
    return m_reference_point;
}
void OAIAir06::setReferencePoint(const QString &reference_point) {
    m_reference_point = reference_point;
    m_reference_point_isSet = true;
}

bool OAIAir06::is_reference_point_Set() const{
    return m_reference_point_isSet;
}

bool OAIAir06::is_reference_point_Valid() const{
    return m_reference_point_isValid;
}

QString OAIAir06::getRegistryId() const {
    return m_registry_id;
}
void OAIAir06::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIAir06::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIAir06::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIAir06::getRmpIds() const {
    return m_rmp_ids;
}
void OAIAir06::setRmpIds(const QString &rmp_ids) {
    m_rmp_ids = rmp_ids;
    m_rmp_ids_isSet = true;
}

bool OAIAir06::is_rmp_ids_Set() const{
    return m_rmp_ids_isSet;
}

bool OAIAir06::is_rmp_ids_Valid() const{
    return m_rmp_ids_isValid;
}

QString OAIAir06::getSdwaids() const {
    return m_sdwaids;
}
void OAIAir06::setSdwaids(const QString &sdwaids) {
    m_sdwaids = sdwaids;
    m_sdwaids_isSet = true;
}

bool OAIAir06::is_sdwaids_Set() const{
    return m_sdwaids_isSet;
}

bool OAIAir06::is_sdwaids_Valid() const{
    return m_sdwaids_isValid;
}

QString OAIAir06::getScore() const {
    return m_score;
}
void OAIAir06::setScore(const QString &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIAir06::is_score_Set() const{
    return m_score_isSet;
}

bool OAIAir06::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIAir06::getSourceId() const {
    return m_source_id;
}
void OAIAir06::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIAir06::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIAir06::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIAir06::getStatute() const {
    return m_statute;
}
void OAIAir06::setStatute(const QString &statute) {
    m_statute = statute;
    m_statute_isSet = true;
}

bool OAIAir06::is_statute_Set() const{
    return m_statute_isSet;
}

bool OAIAir06::is_statute_Valid() const{
    return m_statute_isValid;
}

QString OAIAir06::getTriids() const {
    return m_triids;
}
void OAIAir06::setTriids(const QString &triids) {
    m_triids = triids;
    m_triids_isSet = true;
}

bool OAIAir06::is_triids_Set() const{
    return m_triids_isSet;
}

bool OAIAir06::is_triids_Valid() const{
    return m_triids_isValid;
}

QString OAIAir06::getTrIbalFlag() const {
    return m_tr_ibal_flag;
}
void OAIAir06::setTrIbalFlag(const QString &tr_ibal_flag) {
    m_tr_ibal_flag = tr_ibal_flag;
    m_tr_ibal_flag_isSet = true;
}

bool OAIAir06::is_tr_ibal_flag_Set() const{
    return m_tr_ibal_flag_isSet;
}

bool OAIAir06::is_tr_ibal_flag_Valid() const{
    return m_tr_ibal_flag_isValid;
}

QString OAIAir06::getViolFlag() const {
    return m_viol_flag;
}
void OAIAir06::setViolFlag(const QString &viol_flag) {
    m_viol_flag = viol_flag;
    m_viol_flag_isSet = true;
}

bool OAIAir06::is_viol_flag_Set() const{
    return m_viol_flag_isSet;
}

bool OAIAir06::is_viol_flag_Valid() const{
    return m_viol_flag_isValid;
}

QString OAIAir06::getWebDocs() const {
    return m_web_docs;
}
void OAIAir06::setWebDocs(const QString &web_docs) {
    m_web_docs = web_docs;
    m_web_docs_isSet = true;
}

bool OAIAir06::is_web_docs_Set() const{
    return m_web_docs_isSet;
}

bool OAIAir06::is_web_docs_Valid() const{
    return m_web_docs_isValid;
}

bool OAIAir06::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_air3yr_compl_qtrs_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_case_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_compl_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_days_last_eval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airepa_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_eval_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airfips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_facility_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_facility_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_fea_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_hpv_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_iea_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_indian_cntry_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_eval_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_eval_date_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_eval_date_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_fea_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_fea_date_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_fea_date_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_iea_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_iea_date_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_iea_date_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_penalty_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_stck_date_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_stck_date_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_stck_test_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_stck_test_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_last_viol_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_macts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_major_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_mnths_with_hpv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airnaics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_nsps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_nspsm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_poll_recent_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_programs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_qtrs_with_hpv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_qtrs_with_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_recent_viol_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_stack_test5_yr_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_stack_test5_yr_fail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airtr_ibal_ep_aids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airtr_ibal_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_universe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_lower48_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwaids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_accuracy_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_camd_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_census_block_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chesapeake_bay_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_sv_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_vio_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ea5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eis_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ejscreen_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ejscreen_flag_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_camd_reporter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_county_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_huc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_tr_ibes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbd_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_eis_air_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_eis_reporter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_fips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_federal_agency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_federal_agency_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_ghgco2_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_ghg_reporter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_indian_cntry_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_indian_spatial_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_map_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_map_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_naa_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_percent_minority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_population_density_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_sic_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_std_county_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_triair_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_tri_carc_air_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_tri_haps_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_tri_reporter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_us_mex_border_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ghgids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_poll_rpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infea5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insp5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_date_pce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_date_pce_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_date_pce_sta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_control_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_control_region_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower48_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maint_pollutants_naa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maint_standards_naa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maint_status_naa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pctile_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_na_pollutants_naa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_na_standards_naa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_na_status_naa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naa_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naa_pollutants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_permit_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over80_count_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_cancer_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_dpm_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_o3_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_pctpre1960_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_pm_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_npdesus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_npl_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_rmp_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_tsdf_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_resp_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_traffic_score_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcraids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rmp_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwaids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tr_ibal_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viol_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_docs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAir06::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_air3yr_compl_qtrs_history_isValid && m_air_case_ids_isValid && m_air_city_isValid && m_air_classification_isValid && m_air_compl_status_isValid && m_air_county_isValid && m_air_days_last_eval_isValid && m_airepa_region_isValid && m_air_eval_cnt_isValid && m_airfips_code_isValid && m_air_facility_type_code_isValid && m_air_facility_type_desc_isValid && m_air_fea_cnt_isValid && m_air_hpv_status_isValid && m_airids_isValid && m_air_iea_cnt_isValid && m_air_indian_cntry_flg_isValid && m_air_last_eval_date_isValid && m_air_last_eval_date_epa_isValid && m_air_last_eval_date_state_isValid && m_air_last_fea_date_isValid && m_air_last_fea_date_epa_isValid && m_air_last_fea_date_state_isValid && m_air_last_iea_date_isValid && m_air_last_iea_date_epa_isValid && m_air_last_iea_date_state_isValid && m_air_last_penalty_date_isValid && m_air_last_stck_date_epa_isValid && m_air_last_stck_date_state_isValid && m_air_last_stck_test_date_isValid && m_air_last_stck_test_results_isValid && m_air_last_viol_date_isValid && m_air_macts_isValid && m_air_major_flag_isValid && m_air_mnths_with_hpv_isValid && m_airnaics_isValid && m_air_name_isValid && m_air_nsps_isValid && m_air_nspsm_isValid && m_air_penalties_isValid && m_air_poll_recent_viol_isValid && m_air_programs_isValid && m_air_qtrs_with_hpv_isValid && m_air_qtrs_with_viol_isValid && m_air_recent_viol_cnt_isValid && m_air_stack_test5_yr_all_isValid && m_air_stack_test5_yr_fail_isValid && m_air_state_isValid && m_air_status_isValid && m_air_street_isValid && m_airtr_ibal_ep_aids_isValid && m_airtr_ibal_names_isValid && m_air_universe_isValid && m_air_zip_isValid && m_active_lower48_isValid && m_cwaids_isValid && m_calculated_accuracy_meters_isValid && m_camd_ids_isValid && m_census_block_group_isValid && m_chesapeake_bay_flag_isValid && m_collection_method_isValid && m_curr_sv_flag_isValid && m_curr_vio_flag_isValid && m_epa_system_isValid && m_ea5yr_flag_isValid && m_eis_ids_isValid && m_ejscreen_flag_isValid && m_ejscreen_flag_us_isValid && m_fac_camd_reporter_isValid && m_fac_county_name_isValid && m_fac_derived_huc_isValid && m_fac_derived_tr_ibes_isValid && m_fac_derived_wbd_isValid && m_fac_derived_wbd_name_isValid && m_fac_eis_air_releases_isValid && m_fac_eis_reporter_isValid && m_fac_fips_code_isValid && m_fac_federal_agency_code_isValid && m_fac_federal_agency_name_isValid && m_fac_ghgco2_releases_isValid && m_fac_ghg_reporter_isValid && m_fac_indian_cntry_flg_isValid && m_fac_indian_spatial_flg_isValid && m_fac_lat_isValid && m_fac_long_isValid && m_fac_map_flg_isValid && m_fac_map_icon_isValid && m_fac_naa_flag_isValid && m_fac_percent_minority_isValid && m_fac_population_density_isValid && m_fac_sic_codes_isValid && m_fac_std_county_name_isValid && m_fac_triair_releases_isValid && m_fac_tri_carc_air_releases_isValid && m_fac_tri_haps_releases_isValid && m_fac_tri_reporter_isValid && m_fac_us_mex_border_flg_isValid && m_ghgids_isValid && m_has_poll_rpt_isValid && m_infea5yr_flag_isValid && m_insp5yr_flag_isValid && m_last_date_pce_isValid && m_last_date_pce_epa_isValid && m_last_date_pce_sta_isValid && m_local_control_region_code_isValid && m_local_control_region_name_isValid && m_lower48_isValid && m_maint_pollutants_naa_isValid && m_maint_standards_naa_isValid && m_maint_status_naa_isValid && m_map_isValid && m_max_pctile_us_isValid && m_max_score_isValid && m_na_pollutants_naa_isValid && m_na_standards_naa_isValid && m_na_status_naa_isValid && m_naa_categories_isValid && m_naa_pollutants_isValid && m_object_id_isValid && m_other_permit_ids_isValid && m_over80_count_us_isValid && m_pctile_cancer_us_isValid && m_pctile_dpm_us_isValid && m_pctile_o3_us_isValid && m_pctile_pctpre1960_us_isValid && m_pctile_pm_us_isValid && m_pctile_proximity_npdesus_isValid && m_pctile_proximity_npl_us_isValid && m_pctile_proximity_rmp_us_isValid && m_pctile_proximity_tsdf_us_isValid && m_pctile_resp_us_isValid && m_pctile_traffic_score_us_isValid && m_rcraids_isValid && m_reference_point_isValid && m_registry_id_isValid && m_rmp_ids_isValid && m_sdwaids_isValid && m_score_isValid && m_source_id_isValid && m_statute_isValid && m_triids_isValid && m_tr_ibal_flag_isValid && m_viol_flag_isValid && m_web_docs_isValid && true;
}

} // namespace OpenAPI
