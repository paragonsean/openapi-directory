/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAir02.h
 *
 * Map Data Object
 */

#ifndef OAIAir02_H
#define OAIAir02_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAir02 : public OAIObject {
public:
    OAIAir02();
    OAIAir02(QString json);
    ~OAIAir02() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCaAstatus() const;
    void setCaAstatus(const QString &ca_astatus);
    bool is_ca_astatus_Set() const;
    bool is_ca_astatus_Valid() const;

    QString getFormalCount() const;
    void setFormalCount(const QString &formal_count);
    bool is_formal_count_Set() const;
    bool is_formal_count_Valid() const;

    QString getIcon() const;
    void setIcon(const QString &icon);
    bool is_icon_Set() const;
    bool is_icon_Valid() const;

    QString getInformalCount() const;
    void setInformalCount(const QString &informal_count);
    bool is_informal_count_Set() const;
    bool is_informal_count_Valid() const;

    QString getLat() const;
    void setLat(const QString &lat);
    bool is_lat_Set() const;
    bool is_lat_Valid() const;

    QString getLon() const;
    void setLon(const QString &lon);
    bool is_lon_Set() const;
    bool is_lon_Valid() const;

    QString getLastInsp() const;
    void setLastInsp(const QString &last_insp);
    bool is_last_insp_Set() const;
    bool is_last_insp_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPuv() const;
    void setPuv(const QString &puv);
    bool is_puv_Set() const;
    bool is_puv_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ca_astatus;
    bool m_ca_astatus_isSet;
    bool m_ca_astatus_isValid;

    QString m_formal_count;
    bool m_formal_count_isSet;
    bool m_formal_count_isValid;

    QString m_icon;
    bool m_icon_isSet;
    bool m_icon_isValid;

    QString m_informal_count;
    bool m_informal_count_isSet;
    bool m_informal_count_isValid;

    QString m_lat;
    bool m_lat_isSet;
    bool m_lat_isValid;

    QString m_lon;
    bool m_lon_isSet;
    bool m_lon_isValid;

    QString m_last_insp;
    bool m_last_insp_isSet;
    bool m_last_insp_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_puv;
    bool m_puv_isSet;
    bool m_puv_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAir02)

#endif // OAIAir02_H
