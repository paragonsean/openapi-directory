/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFacilitiesApi_H
#define OAI_OAIFacilitiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAI_air_rest_services_get_facilities_get_200_response.h"
#include "OAI_air_rest_services_get_facility_info_get_200_response.h"
#include "OAI_air_rest_services_get_geojson_get_200_response.h"
#include "OAI_air_rest_services_get_map_get_200_response.h"
#include "OAI_air_rest_services_get_qid_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFacilitiesApi : public QObject {
    Q_OBJECT

public:
    OAIFacilitiesApi(const int timeOut = 0);
    ~OAIFacilitiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void airRestServicesGetDownloadGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void airRestServicesGetDownloadPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_lcon QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_qnc double [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  p_opst QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_nsps QString [optional]
    * @param[in]  p_nspsm QString [optional]
    * @param[in]  p_prog QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_naa QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_tri_cat QString [optional]
    * @param[in]  p_tri_amt QString [optional]
    * @param[in]  p_tri_any_amt double [optional]
    * @param[in]  p_tri_pol QString [optional]
    * @param[in]  p_ghg_cat QString [optional]
    * @param[in]  p_ghg_amt QString [optional]
    * @param[in]  p_ghg_any_amt double [optional]
    * @param[in]  p_ghg_yr QString [optional]
    * @param[in]  p_nei_pol QString [optional]
    * @param[in]  p_nei_amt QString [optional]
    * @param[in]  p_nei_any_amt double [optional]
    * @param[in]  p_nei_yr QString [optional]
    * @param[in]  p_nei_cat QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_stsl QString [optional]
    * @param[in]  p_stsly double [optional]
    * @param[in]  p_stsla QString [optional]
    * @param[in]  p_stres QString [optional]
    * @param[in]  p_sttyp QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_stdt1 QString [optional]
    * @param[in]  p_stdt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_cifdi QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_pctrack QString [optional]
    * @param[in]  p_swpa QString [optional]
    * @param[in]  p_des QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_hpvmth QString [optional]
    * @param[in]  p_recvio QString [optional]
    * @param[in]  p_pollvio QString [optional]
    * @param[in]  p_ar QString [optional]
    * @param[in]  p_tri_yr QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_decouple QString [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  maplist QString [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void airRestServicesGetFacilitiesGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_lcon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_qnc = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opst = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nsps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nspsm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_prog = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tri_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tri_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ghg_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_nei_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_nei_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stsl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_stsly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_stsla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stres = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sttyp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cifdi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pctrack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_swpa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_des = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_hpvmth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_recvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pollvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ar = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_decouple = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maplist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_lcon QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_qnc double [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  p_opst QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_nsps QString [optional]
    * @param[in]  p_nspsm QString [optional]
    * @param[in]  p_prog QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_naa QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_tri_cat QString [optional]
    * @param[in]  p_tri_amt QString [optional]
    * @param[in]  p_tri_any_amt double [optional]
    * @param[in]  p_tri_pol QString [optional]
    * @param[in]  p_ghg_cat QString [optional]
    * @param[in]  p_ghg_amt QString [optional]
    * @param[in]  p_ghg_any_amt double [optional]
    * @param[in]  p_ghg_yr QString [optional]
    * @param[in]  p_nei_pol QString [optional]
    * @param[in]  p_nei_amt QString [optional]
    * @param[in]  p_nei_any_amt double [optional]
    * @param[in]  p_nei_yr QString [optional]
    * @param[in]  p_nei_cat QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_stsl QString [optional]
    * @param[in]  p_stsly double [optional]
    * @param[in]  p_stsla QString [optional]
    * @param[in]  p_stres QString [optional]
    * @param[in]  p_sttyp QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_stdt1 QString [optional]
    * @param[in]  p_stdt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_cifdi QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_pctrack QString [optional]
    * @param[in]  p_swpa QString [optional]
    * @param[in]  p_des QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_hpvmth QString [optional]
    * @param[in]  p_recvio QString [optional]
    * @param[in]  p_pollvio QString [optional]
    * @param[in]  p_ar QString [optional]
    * @param[in]  p_tri_yr QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_decouple QString [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  maplist QString [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void airRestServicesGetFacilitiesPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_lcon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_qnc = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opst = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nsps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nspsm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_prog = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tri_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tri_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ghg_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_nei_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_nei_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stsl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_stsly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_stsla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stres = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sttyp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cifdi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pctrack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_swpa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_des = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_hpvmth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_recvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pollvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ar = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_decouple = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maplist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_lcon QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_qnc double [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  p_opst QString [optional]
    * @param[in]  xmin double [optional]
    * @param[in]  ymin double [optional]
    * @param[in]  xmax double [optional]
    * @param[in]  ymax double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_nsps QString [optional]
    * @param[in]  p_nspsm QString [optional]
    * @param[in]  p_prog QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_naa QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_tri_cat QString [optional]
    * @param[in]  p_tri_amt QString [optional]
    * @param[in]  p_tri_any_amt double [optional]
    * @param[in]  p_tri_pol QString [optional]
    * @param[in]  p_ghg_cat QString [optional]
    * @param[in]  p_ghg_amt QString [optional]
    * @param[in]  p_ghg_any_amt double [optional]
    * @param[in]  p_ghg_yr QString [optional]
    * @param[in]  p_nei_pol QString [optional]
    * @param[in]  p_nei_amt QString [optional]
    * @param[in]  p_nei_any_amt double [optional]
    * @param[in]  p_nei_yr QString [optional]
    * @param[in]  p_nei_cat QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_stsl QString [optional]
    * @param[in]  p_stsly double [optional]
    * @param[in]  p_stsla QString [optional]
    * @param[in]  p_stres QString [optional]
    * @param[in]  p_sttyp QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_stdt1 QString [optional]
    * @param[in]  p_stdt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_cifdi QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_pctrack QString [optional]
    * @param[in]  p_swpa QString [optional]
    * @param[in]  p_des QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_hpvmth QString [optional]
    * @param[in]  p_recvio QString [optional]
    * @param[in]  p_pollvio QString [optional]
    * @param[in]  p_ar QString [optional]
    * @param[in]  p_tri_yr QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_decouple QString [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void airRestServicesGetFacilityInfoGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_lcon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_qnc = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opst = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &xmin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &xmax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nsps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nspsm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_prog = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tri_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tri_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ghg_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_nei_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_nei_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stsl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_stsly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_stsla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stres = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sttyp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cifdi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pctrack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_swpa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_des = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_hpvmth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_recvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pollvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ar = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_decouple = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_lcon QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_qnc double [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  p_opst QString [optional]
    * @param[in]  xmin double [optional]
    * @param[in]  ymin double [optional]
    * @param[in]  xmax double [optional]
    * @param[in]  ymax double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_nsps QString [optional]
    * @param[in]  p_nspsm QString [optional]
    * @param[in]  p_prog QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_naa QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_tri_cat QString [optional]
    * @param[in]  p_tri_amt QString [optional]
    * @param[in]  p_tri_any_amt double [optional]
    * @param[in]  p_tri_pol QString [optional]
    * @param[in]  p_ghg_cat QString [optional]
    * @param[in]  p_ghg_amt QString [optional]
    * @param[in]  p_ghg_any_amt double [optional]
    * @param[in]  p_ghg_yr QString [optional]
    * @param[in]  p_nei_pol QString [optional]
    * @param[in]  p_nei_amt QString [optional]
    * @param[in]  p_nei_any_amt double [optional]
    * @param[in]  p_nei_yr QString [optional]
    * @param[in]  p_nei_cat QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_stsl QString [optional]
    * @param[in]  p_stsly double [optional]
    * @param[in]  p_stsla QString [optional]
    * @param[in]  p_stres QString [optional]
    * @param[in]  p_sttyp QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_stdt1 QString [optional]
    * @param[in]  p_stdt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_cifdi QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_pctrack QString [optional]
    * @param[in]  p_swpa QString [optional]
    * @param[in]  p_des QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_hpvmth QString [optional]
    * @param[in]  p_recvio QString [optional]
    * @param[in]  p_pollvio QString [optional]
    * @param[in]  p_ar QString [optional]
    * @param[in]  p_tri_yr QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_decouple QString [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void airRestServicesGetFacilityInfoPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_lcon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_qnc = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opst = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &xmin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &xmax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nsps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nspsm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_prog = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tri_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tri_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ghg_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ghg_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_nei_any_amt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_nei_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_nei_cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stsl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_stsly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_stsla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stres = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sttyp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cifdi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pctrack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_swpa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_des = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_hpvmth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_recvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pollvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ar = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_decouple = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void airRestServicesGetGeojsonGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void airRestServicesGetGeojsonPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  p_qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void airRestServicesGetInfoClustersGet(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  p_qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void airRestServicesGetInfoClustersPost(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  c1_lat double [optional]
    * @param[in]  c1_long double [optional]
    * @param[in]  c2_lat double [optional]
    * @param[in]  c2_long double [optional]
    */
    virtual void airRestServicesGetMapGet(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &c1_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c1_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_long = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  c1_lat double [optional]
    * @param[in]  c1_long double [optional]
    * @param[in]  c2_lat double [optional]
    * @param[in]  c2_long double [optional]
    */
    virtual void airRestServicesGetMapPost(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &c1_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c1_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_long = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void airRestServicesGetQidGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void airRestServicesGetQidPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void airRestServicesGetDownloadGetCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetDownloadPostCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetFacilitiesGetCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetFacilitiesPostCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetFacilityInfoGetCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetFacilityInfoPostCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetGeojsonGetCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetGeojsonPostCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetInfoClustersGetCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetInfoClustersPostCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetMapGetCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetMapPostCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetQidGetCallback(OAIHttpRequestWorker *worker);
    void airRestServicesGetQidPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void airRestServicesGetDownloadGetSignal(OAIHttpFileElement summary);
    void airRestServicesGetDownloadPostSignal(OAIHttpFileElement summary);
    void airRestServicesGetFacilitiesGetSignal(OAI_air_rest_services_get_facilities_get_200_response summary);
    void airRestServicesGetFacilitiesPostSignal(OAI_air_rest_services_get_facilities_get_200_response summary);
    void airRestServicesGetFacilityInfoGetSignal(OAI_air_rest_services_get_facility_info_get_200_response summary);
    void airRestServicesGetFacilityInfoPostSignal(OAI_air_rest_services_get_facility_info_get_200_response summary);
    void airRestServicesGetGeojsonGetSignal(OAI_air_rest_services_get_geojson_get_200_response summary);
    void airRestServicesGetGeojsonPostSignal(OAI_air_rest_services_get_geojson_get_200_response summary);
    void airRestServicesGetInfoClustersGetSignal(OAIHttpFileElement summary);
    void airRestServicesGetInfoClustersPostSignal(OAIHttpFileElement summary);
    void airRestServicesGetMapGetSignal(OAI_air_rest_services_get_map_get_200_response summary);
    void airRestServicesGetMapPostSignal(OAI_air_rest_services_get_map_get_200_response summary);
    void airRestServicesGetQidGetSignal(OAI_air_rest_services_get_qid_get_200_response summary);
    void airRestServicesGetQidPostSignal(OAI_air_rest_services_get_qid_get_200_response summary);


    void airRestServicesGetDownloadGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void airRestServicesGetDownloadPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void airRestServicesGetFacilitiesGetSignalFull(OAIHttpRequestWorker *worker, OAI_air_rest_services_get_facilities_get_200_response summary);
    void airRestServicesGetFacilitiesPostSignalFull(OAIHttpRequestWorker *worker, OAI_air_rest_services_get_facilities_get_200_response summary);
    void airRestServicesGetFacilityInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_air_rest_services_get_facility_info_get_200_response summary);
    void airRestServicesGetFacilityInfoPostSignalFull(OAIHttpRequestWorker *worker, OAI_air_rest_services_get_facility_info_get_200_response summary);
    void airRestServicesGetGeojsonGetSignalFull(OAIHttpRequestWorker *worker, OAI_air_rest_services_get_geojson_get_200_response summary);
    void airRestServicesGetGeojsonPostSignalFull(OAIHttpRequestWorker *worker, OAI_air_rest_services_get_geojson_get_200_response summary);
    void airRestServicesGetInfoClustersGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void airRestServicesGetInfoClustersPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void airRestServicesGetMapGetSignalFull(OAIHttpRequestWorker *worker, OAI_air_rest_services_get_map_get_200_response summary);
    void airRestServicesGetMapPostSignalFull(OAIHttpRequestWorker *worker, OAI_air_rest_services_get_map_get_200_response summary);
    void airRestServicesGetQidGetSignalFull(OAIHttpRequestWorker *worker, OAI_air_rest_services_get_qid_get_200_response summary);
    void airRestServicesGetQidPostSignalFull(OAIHttpRequestWorker *worker, OAI_air_rest_services_get_qid_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use airRestServicesGetDownloadGetSignalError() instead")
    void airRestServicesGetDownloadGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetDownloadGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetDownloadPostSignalError() instead")
    void airRestServicesGetDownloadPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetDownloadPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetFacilitiesGetSignalError() instead")
    void airRestServicesGetFacilitiesGetSignalE(OAI_air_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetFacilitiesGetSignalError(OAI_air_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetFacilitiesPostSignalError() instead")
    void airRestServicesGetFacilitiesPostSignalE(OAI_air_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetFacilitiesPostSignalError(OAI_air_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetFacilityInfoGetSignalError() instead")
    void airRestServicesGetFacilityInfoGetSignalE(OAI_air_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetFacilityInfoGetSignalError(OAI_air_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetFacilityInfoPostSignalError() instead")
    void airRestServicesGetFacilityInfoPostSignalE(OAI_air_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetFacilityInfoPostSignalError(OAI_air_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetGeojsonGetSignalError() instead")
    void airRestServicesGetGeojsonGetSignalE(OAI_air_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetGeojsonGetSignalError(OAI_air_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetGeojsonPostSignalError() instead")
    void airRestServicesGetGeojsonPostSignalE(OAI_air_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetGeojsonPostSignalError(OAI_air_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetInfoClustersGetSignalError() instead")
    void airRestServicesGetInfoClustersGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetInfoClustersGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetInfoClustersPostSignalError() instead")
    void airRestServicesGetInfoClustersPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetInfoClustersPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetMapGetSignalError() instead")
    void airRestServicesGetMapGetSignalE(OAI_air_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetMapGetSignalError(OAI_air_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetMapPostSignalError() instead")
    void airRestServicesGetMapPostSignalE(OAI_air_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetMapPostSignalError(OAI_air_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetQidGetSignalError() instead")
    void airRestServicesGetQidGetSignalE(OAI_air_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetQidGetSignalError(OAI_air_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetQidPostSignalError() instead")
    void airRestServicesGetQidPostSignalE(OAI_air_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetQidPostSignalError(OAI_air_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use airRestServicesGetDownloadGetSignalErrorFull() instead")
    void airRestServicesGetDownloadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetDownloadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetDownloadPostSignalErrorFull() instead")
    void airRestServicesGetDownloadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetDownloadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetFacilitiesGetSignalErrorFull() instead")
    void airRestServicesGetFacilitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetFacilitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetFacilitiesPostSignalErrorFull() instead")
    void airRestServicesGetFacilitiesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetFacilitiesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetFacilityInfoGetSignalErrorFull() instead")
    void airRestServicesGetFacilityInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetFacilityInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetFacilityInfoPostSignalErrorFull() instead")
    void airRestServicesGetFacilityInfoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetFacilityInfoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetGeojsonGetSignalErrorFull() instead")
    void airRestServicesGetGeojsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetGeojsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetGeojsonPostSignalErrorFull() instead")
    void airRestServicesGetGeojsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetGeojsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetInfoClustersGetSignalErrorFull() instead")
    void airRestServicesGetInfoClustersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetInfoClustersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetInfoClustersPostSignalErrorFull() instead")
    void airRestServicesGetInfoClustersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetInfoClustersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetMapGetSignalErrorFull() instead")
    void airRestServicesGetMapGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetMapGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetMapPostSignalErrorFull() instead")
    void airRestServicesGetMapPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetMapPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetQidGetSignalErrorFull() instead")
    void airRestServicesGetQidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetQidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use airRestServicesGetQidPostSignalErrorFull() instead")
    void airRestServicesGetQidPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airRestServicesGetQidPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
