/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacilitiesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIFacilitiesApi::OAIFacilitiesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIFacilitiesApi::~OAIFacilitiesApi() {
}

void OAIFacilitiesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://echodata.epa.gov/echo"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("airRestServicesGetDownloadGet", defaultConf);
    _serverIndices.insert("airRestServicesGetDownloadGet", 0);
    _serverConfigs.insert("airRestServicesGetDownloadPost", defaultConf);
    _serverIndices.insert("airRestServicesGetDownloadPost", 0);
    _serverConfigs.insert("airRestServicesGetFacilitiesGet", defaultConf);
    _serverIndices.insert("airRestServicesGetFacilitiesGet", 0);
    _serverConfigs.insert("airRestServicesGetFacilitiesPost", defaultConf);
    _serverIndices.insert("airRestServicesGetFacilitiesPost", 0);
    _serverConfigs.insert("airRestServicesGetFacilityInfoGet", defaultConf);
    _serverIndices.insert("airRestServicesGetFacilityInfoGet", 0);
    _serverConfigs.insert("airRestServicesGetFacilityInfoPost", defaultConf);
    _serverIndices.insert("airRestServicesGetFacilityInfoPost", 0);
    _serverConfigs.insert("airRestServicesGetGeojsonGet", defaultConf);
    _serverIndices.insert("airRestServicesGetGeojsonGet", 0);
    _serverConfigs.insert("airRestServicesGetGeojsonPost", defaultConf);
    _serverIndices.insert("airRestServicesGetGeojsonPost", 0);
    _serverConfigs.insert("airRestServicesGetInfoClustersGet", defaultConf);
    _serverIndices.insert("airRestServicesGetInfoClustersGet", 0);
    _serverConfigs.insert("airRestServicesGetInfoClustersPost", defaultConf);
    _serverIndices.insert("airRestServicesGetInfoClustersPost", 0);
    _serverConfigs.insert("airRestServicesGetMapGet", defaultConf);
    _serverIndices.insert("airRestServicesGetMapGet", 0);
    _serverConfigs.insert("airRestServicesGetMapPost", defaultConf);
    _serverIndices.insert("airRestServicesGetMapPost", 0);
    _serverConfigs.insert("airRestServicesGetQidGet", defaultConf);
    _serverIndices.insert("airRestServicesGetQidGet", 0);
    _serverConfigs.insert("airRestServicesGetQidPost", defaultConf);
    _serverIndices.insert("airRestServicesGetQidPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIFacilitiesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIFacilitiesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIFacilitiesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIFacilitiesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIFacilitiesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIFacilitiesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIFacilitiesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIFacilitiesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIFacilitiesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIFacilitiesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFacilitiesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFacilitiesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIFacilitiesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIFacilitiesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIFacilitiesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIFacilitiesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIFacilitiesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIFacilitiesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIFacilitiesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIFacilitiesApi::airRestServicesGetDownloadGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetDownloadGet"][_serverIndices.value("airRestServicesGetDownloadGet")].URL()+"/air_rest_services.get_download");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    if (p_pretty_print.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pretty_print", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pretty_print")).append(querySuffix).append(QUrl::toPercentEncoding(p_pretty_print.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetDownloadGetCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetDownloadGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetDownloadGetSignal(output);
        Q_EMIT airRestServicesGetDownloadGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetDownloadGetSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetDownloadGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetDownloadGetSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetDownloadGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetDownloadPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetDownloadPost"][_serverIndices.value("airRestServicesGetDownloadPost")].URL()+"/air_rest_services.get_download");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }
    if (p_pretty_print.hasValue())
    {
        input.add_var("p_pretty_print", ::OpenAPI::toStringValue(p_pretty_print.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetDownloadPostCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetDownloadPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetDownloadPostSignal(output);
        Q_EMIT airRestServicesGetDownloadPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetDownloadPostSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetDownloadPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetDownloadPostSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetDownloadPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetFacilitiesGet(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_fn, const ::OpenAPI::OptionalParam<QString> &p_sa, const ::OpenAPI::OptionalParam<QString> &p_sa1, const ::OpenAPI::OptionalParam<QString> &p_ct, const ::OpenAPI::OptionalParam<QString> &p_co, const ::OpenAPI::OptionalParam<QString> &p_fips, const ::OpenAPI::OptionalParam<QString> &p_st, const ::OpenAPI::OptionalParam<QString> &p_zip, const ::OpenAPI::OptionalParam<QString> &p_lcon, const ::OpenAPI::OptionalParam<QString> &p_frs, const ::OpenAPI::OptionalParam<QString> &p_reg, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_ncs, const ::OpenAPI::OptionalParam<double> &p_qnc, const ::OpenAPI::OptionalParam<QString> &p_pen, const ::OpenAPI::OptionalParam<QString> &p_opst, const ::OpenAPI::OptionalParam<double> &p_c1lat, const ::OpenAPI::OptionalParam<double> &p_c1lon, const ::OpenAPI::OptionalParam<double> &p_c2lat, const ::OpenAPI::OptionalParam<double> &p_c2lon, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<QString> &p_sic2, const ::OpenAPI::OptionalParam<QString> &p_sic4, const ::OpenAPI::OptionalParam<QString> &p_fa, const ::OpenAPI::OptionalParam<QString> &p_act, const ::OpenAPI::OptionalParam<QString> &p_maj, const ::OpenAPI::OptionalParam<QString> &p_mact, const ::OpenAPI::OptionalParam<QString> &p_nsps, const ::OpenAPI::OptionalParam<QString> &p_nspsm, const ::OpenAPI::OptionalParam<QString> &p_prog, const ::OpenAPI::OptionalParam<QString> &p_fea, const ::OpenAPI::OptionalParam<double> &p_feay, const ::OpenAPI::OptionalParam<QString> &p_feaa, const ::OpenAPI::OptionalParam<QString> &p_iea, const ::OpenAPI::OptionalParam<double> &p_ieay, const ::OpenAPI::OptionalParam<QString> &p_ieaa, const ::OpenAPI::OptionalParam<QString> &p_qiv, const ::OpenAPI::OptionalParam<QString> &p_naa, const ::OpenAPI::OptionalParam<QString> &p_impw, const ::OpenAPI::OptionalParam<QString> &p_trep, const ::OpenAPI::OptionalParam<QString> &p_tri_cat, const ::OpenAPI::OptionalParam<QString> &p_tri_amt, const ::OpenAPI::OptionalParam<double> &p_tri_any_amt, const ::OpenAPI::OptionalParam<QString> &p_tri_pol, const ::OpenAPI::OptionalParam<QString> &p_ghg_cat, const ::OpenAPI::OptionalParam<QString> &p_ghg_amt, const ::OpenAPI::OptionalParam<double> &p_ghg_any_amt, const ::OpenAPI::OptionalParam<QString> &p_ghg_yr, const ::OpenAPI::OptionalParam<QString> &p_nei_pol, const ::OpenAPI::OptionalParam<QString> &p_nei_amt, const ::OpenAPI::OptionalParam<double> &p_nei_any_amt, const ::OpenAPI::OptionalParam<QString> &p_nei_yr, const ::OpenAPI::OptionalParam<QString> &p_nei_cat, const ::OpenAPI::OptionalParam<QString> &p_pm, const ::OpenAPI::OptionalParam<QString> &p_pd, const ::OpenAPI::OptionalParam<QString> &p_ico, const ::OpenAPI::OptionalParam<QString> &p_huc, const ::OpenAPI::OptionalParam<QString> &p_wbd, const ::OpenAPI::OptionalParam<QString> &p_pid, const ::OpenAPI::OptionalParam<QString> &p_med, const ::OpenAPI::OptionalParam<QString> &p_ysl, const ::OpenAPI::OptionalParam<double> &p_ysly, const ::OpenAPI::OptionalParam<QString> &p_ysla, const ::OpenAPI::OptionalParam<QString> &p_stsl, const ::OpenAPI::OptionalParam<double> &p_stsly, const ::OpenAPI::OptionalParam<QString> &p_stsla, const ::OpenAPI::OptionalParam<QString> &p_stres, const ::OpenAPI::OptionalParam<QString> &p_sttyp, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_sfs, const ::OpenAPI::OptionalParam<double> &p_tribeid, const ::OpenAPI::OptionalParam<QString> &p_tribename, const ::OpenAPI::OptionalParam<double> &p_tribedist, const ::OpenAPI::OptionalParam<QString> &p_owop, const ::OpenAPI::OptionalParam<QString> &p_agoo, const ::OpenAPI::OptionalParam<QString> &p_idt1, const ::OpenAPI::OptionalParam<QString> &p_idt2, const ::OpenAPI::OptionalParam<QString> &p_stdt1, const ::OpenAPI::OptionalParam<QString> &p_stdt2, const ::OpenAPI::OptionalParam<QString> &p_pityp, const ::OpenAPI::OptionalParam<QString> &p_cifdi, const ::OpenAPI::OptionalParam<QString> &p_pfead1, const ::OpenAPI::OptionalParam<QString> &p_pfead2, const ::OpenAPI::OptionalParam<QString> &p_pfeat, const ::OpenAPI::OptionalParam<QString> &p_psncq, const ::OpenAPI::OptionalParam<QString> &p_pctrack, const ::OpenAPI::OptionalParam<QString> &p_swpa, const ::OpenAPI::OptionalParam<QString> &p_des, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_hpvmth, const ::OpenAPI::OptionalParam<QString> &p_recvio, const ::OpenAPI::OptionalParam<QString> &p_pollvio, const ::OpenAPI::OptionalParam<QString> &p_ar, const ::OpenAPI::OptionalParam<QString> &p_tri_yr, const ::OpenAPI::OptionalParam<QString> &p_pidall, const ::OpenAPI::OptionalParam<QString> &p_fac_ico, const ::OpenAPI::OptionalParam<QString> &p_icoo, const ::OpenAPI::OptionalParam<QString> &p_fac_icos, const ::OpenAPI::OptionalParam<QString> &p_ejscreen, const ::OpenAPI::OptionalParam<QString> &p_limit_addr, const ::OpenAPI::OptionalParam<double> &p_lat, const ::OpenAPI::OptionalParam<double> &p_long, const ::OpenAPI::OptionalParam<double> &p_radius, const ::OpenAPI::OptionalParam<QString> &p_decouple, const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<QString> &maplist, const ::OpenAPI::OptionalParam<QString> &summarylist, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetFacilitiesGet"][_serverIndices.value("airRestServicesGetFacilitiesGet")].URL()+"/air_rest_services.get_facilities");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (p_fn.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fn", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fn")).append(querySuffix).append(QUrl::toPercentEncoding(p_fn.stringValue()));
    }
    if (p_sa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sa")).append(querySuffix).append(QUrl::toPercentEncoding(p_sa.stringValue()));
    }
    if (p_sa1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sa1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sa1")).append(querySuffix).append(QUrl::toPercentEncoding(p_sa1.stringValue()));
    }
    if (p_ct.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ct", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ct")).append(querySuffix).append(QUrl::toPercentEncoding(p_ct.stringValue()));
    }
    if (p_co.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_co", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_co")).append(querySuffix).append(QUrl::toPercentEncoding(p_co.stringValue()));
    }
    if (p_fips.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fips", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fips")).append(querySuffix).append(QUrl::toPercentEncoding(p_fips.stringValue()));
    }
    if (p_st.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_st", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_st")).append(querySuffix).append(QUrl::toPercentEncoding(p_st.stringValue()));
    }
    if (p_zip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_zip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_zip")).append(querySuffix).append(QUrl::toPercentEncoding(p_zip.stringValue()));
    }
    if (p_lcon.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_lcon", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_lcon")).append(querySuffix).append(QUrl::toPercentEncoding(p_lcon.stringValue()));
    }
    if (p_frs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_frs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_frs")).append(querySuffix).append(QUrl::toPercentEncoding(p_frs.stringValue()));
    }
    if (p_reg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_reg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_reg")).append(querySuffix).append(QUrl::toPercentEncoding(p_reg.stringValue()));
    }
    if (p_sic.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic.stringValue()));
    }
    if (p_ncs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ncs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ncs")).append(querySuffix).append(QUrl::toPercentEncoding(p_ncs.stringValue()));
    }
    if (p_qnc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qnc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qnc")).append(querySuffix).append(QUrl::toPercentEncoding(p_qnc.stringValue()));
    }
    if (p_pen.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pen", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pen")).append(querySuffix).append(QUrl::toPercentEncoding(p_pen.stringValue()));
    }
    if (p_opst.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_opst", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_opst")).append(querySuffix).append(QUrl::toPercentEncoding(p_opst.stringValue()));
    }
    if (p_c1lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c1lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c1lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_c1lat.stringValue()));
    }
    if (p_c1lon.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c1lon", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c1lon")).append(querySuffix).append(QUrl::toPercentEncoding(p_c1lon.stringValue()));
    }
    if (p_c2lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c2lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c2lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_c2lat.stringValue()));
    }
    if (p_c2lon.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c2lon", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c2lon")).append(querySuffix).append(QUrl::toPercentEncoding(p_c2lon.stringValue()));
    }
    if (p_usmex.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_usmex", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_usmex")).append(querySuffix).append(QUrl::toPercentEncoding(p_usmex.stringValue()));
    }
    if (p_sic2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic2")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic2.stringValue()));
    }
    if (p_sic4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic4")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic4.stringValue()));
    }
    if (p_fa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fa")).append(querySuffix).append(QUrl::toPercentEncoding(p_fa.stringValue()));
    }
    if (p_act.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_act", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_act")).append(querySuffix).append(QUrl::toPercentEncoding(p_act.stringValue()));
    }
    if (p_maj.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_maj", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_maj")).append(querySuffix).append(QUrl::toPercentEncoding(p_maj.stringValue()));
    }
    if (p_mact.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_mact", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_mact")).append(querySuffix).append(QUrl::toPercentEncoding(p_mact.stringValue()));
    }
    if (p_nsps.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nsps", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nsps")).append(querySuffix).append(QUrl::toPercentEncoding(p_nsps.stringValue()));
    }
    if (p_nspsm.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nspsm", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nspsm")).append(querySuffix).append(QUrl::toPercentEncoding(p_nspsm.stringValue()));
    }
    if (p_prog.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_prog", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_prog")).append(querySuffix).append(QUrl::toPercentEncoding(p_prog.stringValue()));
    }
    if (p_fea.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fea", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fea")).append(querySuffix).append(QUrl::toPercentEncoding(p_fea.stringValue()));
    }
    if (p_feay.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_feay", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_feay")).append(querySuffix).append(QUrl::toPercentEncoding(p_feay.stringValue()));
    }
    if (p_feaa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_feaa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_feaa")).append(querySuffix).append(QUrl::toPercentEncoding(p_feaa.stringValue()));
    }
    if (p_iea.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iea", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iea")).append(querySuffix).append(QUrl::toPercentEncoding(p_iea.stringValue()));
    }
    if (p_ieay.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ieay", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ieay")).append(querySuffix).append(QUrl::toPercentEncoding(p_ieay.stringValue()));
    }
    if (p_ieaa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ieaa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ieaa")).append(querySuffix).append(QUrl::toPercentEncoding(p_ieaa.stringValue()));
    }
    if (p_qiv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qiv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qiv")).append(querySuffix).append(QUrl::toPercentEncoding(p_qiv.stringValue()));
    }
    if (p_naa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_naa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_naa")).append(querySuffix).append(QUrl::toPercentEncoding(p_naa.stringValue()));
    }
    if (p_impw.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_impw", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_impw")).append(querySuffix).append(QUrl::toPercentEncoding(p_impw.stringValue()));
    }
    if (p_trep.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_trep", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_trep")).append(querySuffix).append(QUrl::toPercentEncoding(p_trep.stringValue()));
    }
    if (p_tri_cat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tri_cat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tri_cat")).append(querySuffix).append(QUrl::toPercentEncoding(p_tri_cat.stringValue()));
    }
    if (p_tri_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tri_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tri_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_tri_amt.stringValue()));
    }
    if (p_tri_any_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tri_any_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tri_any_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_tri_any_amt.stringValue()));
    }
    if (p_tri_pol.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tri_pol", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tri_pol")).append(querySuffix).append(QUrl::toPercentEncoding(p_tri_pol.stringValue()));
    }
    if (p_ghg_cat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ghg_cat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ghg_cat")).append(querySuffix).append(QUrl::toPercentEncoding(p_ghg_cat.stringValue()));
    }
    if (p_ghg_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ghg_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ghg_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_ghg_amt.stringValue()));
    }
    if (p_ghg_any_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ghg_any_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ghg_any_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_ghg_any_amt.stringValue()));
    }
    if (p_ghg_yr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ghg_yr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ghg_yr")).append(querySuffix).append(QUrl::toPercentEncoding(p_ghg_yr.stringValue()));
    }
    if (p_nei_pol.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nei_pol", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nei_pol")).append(querySuffix).append(QUrl::toPercentEncoding(p_nei_pol.stringValue()));
    }
    if (p_nei_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nei_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nei_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_nei_amt.stringValue()));
    }
    if (p_nei_any_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nei_any_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nei_any_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_nei_any_amt.stringValue()));
    }
    if (p_nei_yr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nei_yr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nei_yr")).append(querySuffix).append(QUrl::toPercentEncoding(p_nei_yr.stringValue()));
    }
    if (p_nei_cat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nei_cat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nei_cat")).append(querySuffix).append(QUrl::toPercentEncoding(p_nei_cat.stringValue()));
    }
    if (p_pm.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pm", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pm")).append(querySuffix).append(QUrl::toPercentEncoding(p_pm.stringValue()));
    }
    if (p_pd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pd")).append(querySuffix).append(QUrl::toPercentEncoding(p_pd.stringValue()));
    }
    if (p_ico.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ico", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ico")).append(querySuffix).append(QUrl::toPercentEncoding(p_ico.stringValue()));
    }
    if (p_huc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_huc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_huc")).append(querySuffix).append(QUrl::toPercentEncoding(p_huc.stringValue()));
    }
    if (p_wbd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_wbd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_wbd")).append(querySuffix).append(QUrl::toPercentEncoding(p_wbd.stringValue()));
    }
    if (p_pid.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pid")).append(querySuffix).append(QUrl::toPercentEncoding(p_pid.stringValue()));
    }
    if (p_med.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_med", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_med")).append(querySuffix).append(QUrl::toPercentEncoding(p_med.stringValue()));
    }
    if (p_ysl.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysl", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysl")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysl.stringValue()));
    }
    if (p_ysly.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysly", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysly")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysly.stringValue()));
    }
    if (p_ysla.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysla", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysla")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysla.stringValue()));
    }
    if (p_stsl.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stsl", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stsl")).append(querySuffix).append(QUrl::toPercentEncoding(p_stsl.stringValue()));
    }
    if (p_stsly.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stsly", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stsly")).append(querySuffix).append(QUrl::toPercentEncoding(p_stsly.stringValue()));
    }
    if (p_stsla.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stsla", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stsla")).append(querySuffix).append(QUrl::toPercentEncoding(p_stsla.stringValue()));
    }
    if (p_stres.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stres", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stres")).append(querySuffix).append(QUrl::toPercentEncoding(p_stres.stringValue()));
    }
    if (p_sttyp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sttyp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sttyp")).append(querySuffix).append(QUrl::toPercentEncoding(p_sttyp.stringValue()));
    }
    if (p_qs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qs")).append(querySuffix).append(QUrl::toPercentEncoding(p_qs.stringValue()));
    }
    if (p_sfs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sfs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sfs")).append(querySuffix).append(QUrl::toPercentEncoding(p_sfs.stringValue()));
    }
    if (p_tribeid.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribeid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribeid")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribeid.stringValue()));
    }
    if (p_tribename.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribename", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribename")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribename.stringValue()));
    }
    if (p_tribedist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribedist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribedist")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribedist.stringValue()));
    }
    if (p_owop.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_owop", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_owop")).append(querySuffix).append(QUrl::toPercentEncoding(p_owop.stringValue()));
    }
    if (p_agoo.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_agoo", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_agoo")).append(querySuffix).append(QUrl::toPercentEncoding(p_agoo.stringValue()));
    }
    if (p_idt1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_idt1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_idt1")).append(querySuffix).append(QUrl::toPercentEncoding(p_idt1.stringValue()));
    }
    if (p_idt2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_idt2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_idt2")).append(querySuffix).append(QUrl::toPercentEncoding(p_idt2.stringValue()));
    }
    if (p_stdt1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stdt1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stdt1")).append(querySuffix).append(QUrl::toPercentEncoding(p_stdt1.stringValue()));
    }
    if (p_stdt2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stdt2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stdt2")).append(querySuffix).append(QUrl::toPercentEncoding(p_stdt2.stringValue()));
    }
    if (p_pityp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pityp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pityp")).append(querySuffix).append(QUrl::toPercentEncoding(p_pityp.stringValue()));
    }
    if (p_cifdi.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_cifdi", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_cifdi")).append(querySuffix).append(QUrl::toPercentEncoding(p_cifdi.stringValue()));
    }
    if (p_pfead1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfead1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfead1")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfead1.stringValue()));
    }
    if (p_pfead2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfead2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfead2")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfead2.stringValue()));
    }
    if (p_pfeat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfeat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfeat")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfeat.stringValue()));
    }
    if (p_psncq.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_psncq", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_psncq")).append(querySuffix).append(QUrl::toPercentEncoding(p_psncq.stringValue()));
    }
    if (p_pctrack.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pctrack", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pctrack")).append(querySuffix).append(QUrl::toPercentEncoding(p_pctrack.stringValue()));
    }
    if (p_swpa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_swpa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_swpa")).append(querySuffix).append(QUrl::toPercentEncoding(p_swpa.stringValue()));
    }
    if (p_des.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_des", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_des")).append(querySuffix).append(QUrl::toPercentEncoding(p_des.stringValue()));
    }
    if (p_fntype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fntype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fntype")).append(querySuffix).append(QUrl::toPercentEncoding(p_fntype.stringValue()));
    }
    if (p_hpvmth.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_hpvmth", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_hpvmth")).append(querySuffix).append(QUrl::toPercentEncoding(p_hpvmth.stringValue()));
    }
    if (p_recvio.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_recvio", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_recvio")).append(querySuffix).append(QUrl::toPercentEncoding(p_recvio.stringValue()));
    }
    if (p_pollvio.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pollvio", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pollvio")).append(querySuffix).append(QUrl::toPercentEncoding(p_pollvio.stringValue()));
    }
    if (p_ar.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ar", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ar")).append(querySuffix).append(QUrl::toPercentEncoding(p_ar.stringValue()));
    }
    if (p_tri_yr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tri_yr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tri_yr")).append(querySuffix).append(QUrl::toPercentEncoding(p_tri_yr.stringValue()));
    }
    if (p_pidall.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pidall", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pidall")).append(querySuffix).append(QUrl::toPercentEncoding(p_pidall.stringValue()));
    }
    if (p_fac_ico.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_ico", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_ico")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_ico.stringValue()));
    }
    if (p_icoo.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_icoo", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_icoo")).append(querySuffix).append(QUrl::toPercentEncoding(p_icoo.stringValue()));
    }
    if (p_fac_icos.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_icos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_icos")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_icos.stringValue()));
    }
    if (p_ejscreen.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ejscreen", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ejscreen")).append(querySuffix).append(QUrl::toPercentEncoding(p_ejscreen.stringValue()));
    }
    if (p_limit_addr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_limit_addr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_limit_addr")).append(querySuffix).append(QUrl::toPercentEncoding(p_limit_addr.stringValue()));
    }
    if (p_lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_lat.stringValue()));
    }
    if (p_long.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_long", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_long")).append(querySuffix).append(QUrl::toPercentEncoding(p_long.stringValue()));
    }
    if (p_radius.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_radius", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_radius")).append(querySuffix).append(QUrl::toPercentEncoding(p_radius.stringValue()));
    }
    if (p_decouple.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_decouple", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_decouple")).append(querySuffix).append(QUrl::toPercentEncoding(p_decouple.stringValue()));
    }
    if (p_ejscreen_over80cnt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ejscreen_over80cnt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ejscreen_over80cnt")).append(querySuffix).append(QUrl::toPercentEncoding(p_ejscreen_over80cnt.stringValue()));
    }
    if (queryset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queryset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("queryset")).append(querySuffix).append(QUrl::toPercentEncoding(queryset.stringValue()));
    }
    if (responseset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "responseset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("responseset")).append(querySuffix).append(QUrl::toPercentEncoding(responseset.stringValue()));
    }
    if (tablelist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "tablelist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("tablelist")).append(querySuffix).append(QUrl::toPercentEncoding(tablelist.stringValue()));
    }
    if (maplist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "maplist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("maplist")).append(querySuffix).append(QUrl::toPercentEncoding(maplist.stringValue()));
    }
    if (summarylist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "summarylist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("summarylist")).append(querySuffix).append(QUrl::toPercentEncoding(summarylist.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetFacilitiesGetCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetFacilitiesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_air_rest_services_get_facilities_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetFacilitiesGetSignal(output);
        Q_EMIT airRestServicesGetFacilitiesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetFacilitiesGetSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetFacilitiesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetFacilitiesGetSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetFacilitiesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetFacilitiesPost(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_fn, const ::OpenAPI::OptionalParam<QString> &p_sa, const ::OpenAPI::OptionalParam<QString> &p_sa1, const ::OpenAPI::OptionalParam<QString> &p_ct, const ::OpenAPI::OptionalParam<QString> &p_co, const ::OpenAPI::OptionalParam<QString> &p_fips, const ::OpenAPI::OptionalParam<QString> &p_st, const ::OpenAPI::OptionalParam<QString> &p_zip, const ::OpenAPI::OptionalParam<QString> &p_lcon, const ::OpenAPI::OptionalParam<QString> &p_frs, const ::OpenAPI::OptionalParam<QString> &p_reg, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_ncs, const ::OpenAPI::OptionalParam<double> &p_qnc, const ::OpenAPI::OptionalParam<QString> &p_pen, const ::OpenAPI::OptionalParam<QString> &p_opst, const ::OpenAPI::OptionalParam<double> &p_c1lat, const ::OpenAPI::OptionalParam<double> &p_c1lon, const ::OpenAPI::OptionalParam<double> &p_c2lat, const ::OpenAPI::OptionalParam<double> &p_c2lon, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<QString> &p_sic2, const ::OpenAPI::OptionalParam<QString> &p_sic4, const ::OpenAPI::OptionalParam<QString> &p_fa, const ::OpenAPI::OptionalParam<QString> &p_act, const ::OpenAPI::OptionalParam<QString> &p_maj, const ::OpenAPI::OptionalParam<QString> &p_mact, const ::OpenAPI::OptionalParam<QString> &p_nsps, const ::OpenAPI::OptionalParam<QString> &p_nspsm, const ::OpenAPI::OptionalParam<QString> &p_prog, const ::OpenAPI::OptionalParam<QString> &p_fea, const ::OpenAPI::OptionalParam<double> &p_feay, const ::OpenAPI::OptionalParam<QString> &p_feaa, const ::OpenAPI::OptionalParam<QString> &p_iea, const ::OpenAPI::OptionalParam<double> &p_ieay, const ::OpenAPI::OptionalParam<QString> &p_ieaa, const ::OpenAPI::OptionalParam<QString> &p_qiv, const ::OpenAPI::OptionalParam<QString> &p_naa, const ::OpenAPI::OptionalParam<QString> &p_impw, const ::OpenAPI::OptionalParam<QString> &p_trep, const ::OpenAPI::OptionalParam<QString> &p_tri_cat, const ::OpenAPI::OptionalParam<QString> &p_tri_amt, const ::OpenAPI::OptionalParam<double> &p_tri_any_amt, const ::OpenAPI::OptionalParam<QString> &p_tri_pol, const ::OpenAPI::OptionalParam<QString> &p_ghg_cat, const ::OpenAPI::OptionalParam<QString> &p_ghg_amt, const ::OpenAPI::OptionalParam<double> &p_ghg_any_amt, const ::OpenAPI::OptionalParam<QString> &p_ghg_yr, const ::OpenAPI::OptionalParam<QString> &p_nei_pol, const ::OpenAPI::OptionalParam<QString> &p_nei_amt, const ::OpenAPI::OptionalParam<double> &p_nei_any_amt, const ::OpenAPI::OptionalParam<QString> &p_nei_yr, const ::OpenAPI::OptionalParam<QString> &p_nei_cat, const ::OpenAPI::OptionalParam<QString> &p_pm, const ::OpenAPI::OptionalParam<QString> &p_pd, const ::OpenAPI::OptionalParam<QString> &p_ico, const ::OpenAPI::OptionalParam<QString> &p_huc, const ::OpenAPI::OptionalParam<QString> &p_wbd, const ::OpenAPI::OptionalParam<QString> &p_pid, const ::OpenAPI::OptionalParam<QString> &p_med, const ::OpenAPI::OptionalParam<QString> &p_ysl, const ::OpenAPI::OptionalParam<double> &p_ysly, const ::OpenAPI::OptionalParam<QString> &p_ysla, const ::OpenAPI::OptionalParam<QString> &p_stsl, const ::OpenAPI::OptionalParam<double> &p_stsly, const ::OpenAPI::OptionalParam<QString> &p_stsla, const ::OpenAPI::OptionalParam<QString> &p_stres, const ::OpenAPI::OptionalParam<QString> &p_sttyp, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_sfs, const ::OpenAPI::OptionalParam<double> &p_tribeid, const ::OpenAPI::OptionalParam<QString> &p_tribename, const ::OpenAPI::OptionalParam<double> &p_tribedist, const ::OpenAPI::OptionalParam<QString> &p_owop, const ::OpenAPI::OptionalParam<QString> &p_agoo, const ::OpenAPI::OptionalParam<QString> &p_idt1, const ::OpenAPI::OptionalParam<QString> &p_idt2, const ::OpenAPI::OptionalParam<QString> &p_stdt1, const ::OpenAPI::OptionalParam<QString> &p_stdt2, const ::OpenAPI::OptionalParam<QString> &p_pityp, const ::OpenAPI::OptionalParam<QString> &p_cifdi, const ::OpenAPI::OptionalParam<QString> &p_pfead1, const ::OpenAPI::OptionalParam<QString> &p_pfead2, const ::OpenAPI::OptionalParam<QString> &p_pfeat, const ::OpenAPI::OptionalParam<QString> &p_psncq, const ::OpenAPI::OptionalParam<QString> &p_pctrack, const ::OpenAPI::OptionalParam<QString> &p_swpa, const ::OpenAPI::OptionalParam<QString> &p_des, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_hpvmth, const ::OpenAPI::OptionalParam<QString> &p_recvio, const ::OpenAPI::OptionalParam<QString> &p_pollvio, const ::OpenAPI::OptionalParam<QString> &p_ar, const ::OpenAPI::OptionalParam<QString> &p_tri_yr, const ::OpenAPI::OptionalParam<QString> &p_pidall, const ::OpenAPI::OptionalParam<QString> &p_fac_ico, const ::OpenAPI::OptionalParam<QString> &p_icoo, const ::OpenAPI::OptionalParam<QString> &p_fac_icos, const ::OpenAPI::OptionalParam<QString> &p_ejscreen, const ::OpenAPI::OptionalParam<QString> &p_limit_addr, const ::OpenAPI::OptionalParam<double> &p_lat, const ::OpenAPI::OptionalParam<double> &p_long, const ::OpenAPI::OptionalParam<double> &p_radius, const ::OpenAPI::OptionalParam<QString> &p_decouple, const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<QString> &maplist, const ::OpenAPI::OptionalParam<QString> &summarylist, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetFacilitiesPost"][_serverIndices.value("airRestServicesGetFacilitiesPost")].URL()+"/air_rest_services.get_facilities");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    if (p_fn.hasValue())
    {
        input.add_var("p_fn", ::OpenAPI::toStringValue(p_fn.value()));
    }
    if (p_sa.hasValue())
    {
        input.add_var("p_sa", ::OpenAPI::toStringValue(p_sa.value()));
    }
    if (p_sa1.hasValue())
    {
        input.add_var("p_sa1", ::OpenAPI::toStringValue(p_sa1.value()));
    }
    if (p_ct.hasValue())
    {
        input.add_var("p_ct", ::OpenAPI::toStringValue(p_ct.value()));
    }
    if (p_co.hasValue())
    {
        input.add_var("p_co", ::OpenAPI::toStringValue(p_co.value()));
    }
    if (p_fips.hasValue())
    {
        input.add_var("p_fips", ::OpenAPI::toStringValue(p_fips.value()));
    }
    if (p_st.hasValue())
    {
        input.add_var("p_st", ::OpenAPI::toStringValue(p_st.value()));
    }
    if (p_zip.hasValue())
    {
        input.add_var("p_zip", ::OpenAPI::toStringValue(p_zip.value()));
    }
    if (p_lcon.hasValue())
    {
        input.add_var("p_lcon", ::OpenAPI::toStringValue(p_lcon.value()));
    }
    if (p_frs.hasValue())
    {
        input.add_var("p_frs", ::OpenAPI::toStringValue(p_frs.value()));
    }
    if (p_reg.hasValue())
    {
        input.add_var("p_reg", ::OpenAPI::toStringValue(p_reg.value()));
    }
    if (p_sic.hasValue())
    {
        input.add_var("p_sic", ::OpenAPI::toStringValue(p_sic.value()));
    }
    if (p_ncs.hasValue())
    {
        input.add_var("p_ncs", ::OpenAPI::toStringValue(p_ncs.value()));
    }
    if (p_qnc.hasValue())
    {
        input.add_var("p_qnc", ::OpenAPI::toStringValue(p_qnc.value()));
    }
    if (p_pen.hasValue())
    {
        input.add_var("p_pen", ::OpenAPI::toStringValue(p_pen.value()));
    }
    if (p_opst.hasValue())
    {
        input.add_var("p_opst", ::OpenAPI::toStringValue(p_opst.value()));
    }
    if (p_c1lat.hasValue())
    {
        input.add_var("p_c1lat", ::OpenAPI::toStringValue(p_c1lat.value()));
    }
    if (p_c1lon.hasValue())
    {
        input.add_var("p_c1lon", ::OpenAPI::toStringValue(p_c1lon.value()));
    }
    if (p_c2lat.hasValue())
    {
        input.add_var("p_c2lat", ::OpenAPI::toStringValue(p_c2lat.value()));
    }
    if (p_c2lon.hasValue())
    {
        input.add_var("p_c2lon", ::OpenAPI::toStringValue(p_c2lon.value()));
    }
    if (p_usmex.hasValue())
    {
        input.add_var("p_usmex", ::OpenAPI::toStringValue(p_usmex.value()));
    }
    if (p_sic2.hasValue())
    {
        input.add_var("p_sic2", ::OpenAPI::toStringValue(p_sic2.value()));
    }
    if (p_sic4.hasValue())
    {
        input.add_var("p_sic4", ::OpenAPI::toStringValue(p_sic4.value()));
    }
    if (p_fa.hasValue())
    {
        input.add_var("p_fa", ::OpenAPI::toStringValue(p_fa.value()));
    }
    if (p_act.hasValue())
    {
        input.add_var("p_act", ::OpenAPI::toStringValue(p_act.value()));
    }
    if (p_maj.hasValue())
    {
        input.add_var("p_maj", ::OpenAPI::toStringValue(p_maj.value()));
    }
    if (p_mact.hasValue())
    {
        input.add_var("p_mact", ::OpenAPI::toStringValue(p_mact.value()));
    }
    if (p_nsps.hasValue())
    {
        input.add_var("p_nsps", ::OpenAPI::toStringValue(p_nsps.value()));
    }
    if (p_nspsm.hasValue())
    {
        input.add_var("p_nspsm", ::OpenAPI::toStringValue(p_nspsm.value()));
    }
    if (p_prog.hasValue())
    {
        input.add_var("p_prog", ::OpenAPI::toStringValue(p_prog.value()));
    }
    if (p_fea.hasValue())
    {
        input.add_var("p_fea", ::OpenAPI::toStringValue(p_fea.value()));
    }
    if (p_feay.hasValue())
    {
        input.add_var("p_feay", ::OpenAPI::toStringValue(p_feay.value()));
    }
    if (p_feaa.hasValue())
    {
        input.add_var("p_feaa", ::OpenAPI::toStringValue(p_feaa.value()));
    }
    if (p_iea.hasValue())
    {
        input.add_var("p_iea", ::OpenAPI::toStringValue(p_iea.value()));
    }
    if (p_ieay.hasValue())
    {
        input.add_var("p_ieay", ::OpenAPI::toStringValue(p_ieay.value()));
    }
    if (p_ieaa.hasValue())
    {
        input.add_var("p_ieaa", ::OpenAPI::toStringValue(p_ieaa.value()));
    }
    if (p_qiv.hasValue())
    {
        input.add_var("p_qiv", ::OpenAPI::toStringValue(p_qiv.value()));
    }
    if (p_naa.hasValue())
    {
        input.add_var("p_naa", ::OpenAPI::toStringValue(p_naa.value()));
    }
    if (p_impw.hasValue())
    {
        input.add_var("p_impw", ::OpenAPI::toStringValue(p_impw.value()));
    }
    if (p_trep.hasValue())
    {
        input.add_var("p_trep", ::OpenAPI::toStringValue(p_trep.value()));
    }
    if (p_tri_cat.hasValue())
    {
        input.add_var("p_tri_cat", ::OpenAPI::toStringValue(p_tri_cat.value()));
    }
    if (p_tri_amt.hasValue())
    {
        input.add_var("p_tri_amt", ::OpenAPI::toStringValue(p_tri_amt.value()));
    }
    if (p_tri_any_amt.hasValue())
    {
        input.add_var("p_tri_any_amt", ::OpenAPI::toStringValue(p_tri_any_amt.value()));
    }
    if (p_tri_pol.hasValue())
    {
        input.add_var("p_tri_pol", ::OpenAPI::toStringValue(p_tri_pol.value()));
    }
    if (p_ghg_cat.hasValue())
    {
        input.add_var("p_ghg_cat", ::OpenAPI::toStringValue(p_ghg_cat.value()));
    }
    if (p_ghg_amt.hasValue())
    {
        input.add_var("p_ghg_amt", ::OpenAPI::toStringValue(p_ghg_amt.value()));
    }
    if (p_ghg_any_amt.hasValue())
    {
        input.add_var("p_ghg_any_amt", ::OpenAPI::toStringValue(p_ghg_any_amt.value()));
    }
    if (p_ghg_yr.hasValue())
    {
        input.add_var("p_ghg_yr", ::OpenAPI::toStringValue(p_ghg_yr.value()));
    }
    if (p_nei_pol.hasValue())
    {
        input.add_var("p_nei_pol", ::OpenAPI::toStringValue(p_nei_pol.value()));
    }
    if (p_nei_amt.hasValue())
    {
        input.add_var("p_nei_amt", ::OpenAPI::toStringValue(p_nei_amt.value()));
    }
    if (p_nei_any_amt.hasValue())
    {
        input.add_var("p_nei_any_amt", ::OpenAPI::toStringValue(p_nei_any_amt.value()));
    }
    if (p_nei_yr.hasValue())
    {
        input.add_var("p_nei_yr", ::OpenAPI::toStringValue(p_nei_yr.value()));
    }
    if (p_nei_cat.hasValue())
    {
        input.add_var("p_nei_cat", ::OpenAPI::toStringValue(p_nei_cat.value()));
    }
    if (p_pm.hasValue())
    {
        input.add_var("p_pm", ::OpenAPI::toStringValue(p_pm.value()));
    }
    if (p_pd.hasValue())
    {
        input.add_var("p_pd", ::OpenAPI::toStringValue(p_pd.value()));
    }
    if (p_ico.hasValue())
    {
        input.add_var("p_ico", ::OpenAPI::toStringValue(p_ico.value()));
    }
    if (p_huc.hasValue())
    {
        input.add_var("p_huc", ::OpenAPI::toStringValue(p_huc.value()));
    }
    if (p_wbd.hasValue())
    {
        input.add_var("p_wbd", ::OpenAPI::toStringValue(p_wbd.value()));
    }
    if (p_pid.hasValue())
    {
        input.add_var("p_pid", ::OpenAPI::toStringValue(p_pid.value()));
    }
    if (p_med.hasValue())
    {
        input.add_var("p_med", ::OpenAPI::toStringValue(p_med.value()));
    }
    if (p_ysl.hasValue())
    {
        input.add_var("p_ysl", ::OpenAPI::toStringValue(p_ysl.value()));
    }
    if (p_ysly.hasValue())
    {
        input.add_var("p_ysly", ::OpenAPI::toStringValue(p_ysly.value()));
    }
    if (p_ysla.hasValue())
    {
        input.add_var("p_ysla", ::OpenAPI::toStringValue(p_ysla.value()));
    }
    if (p_stsl.hasValue())
    {
        input.add_var("p_stsl", ::OpenAPI::toStringValue(p_stsl.value()));
    }
    if (p_stsly.hasValue())
    {
        input.add_var("p_stsly", ::OpenAPI::toStringValue(p_stsly.value()));
    }
    if (p_stsla.hasValue())
    {
        input.add_var("p_stsla", ::OpenAPI::toStringValue(p_stsla.value()));
    }
    if (p_stres.hasValue())
    {
        input.add_var("p_stres", ::OpenAPI::toStringValue(p_stres.value()));
    }
    if (p_sttyp.hasValue())
    {
        input.add_var("p_sttyp", ::OpenAPI::toStringValue(p_sttyp.value()));
    }
    if (p_qs.hasValue())
    {
        input.add_var("p_qs", ::OpenAPI::toStringValue(p_qs.value()));
    }
    if (p_sfs.hasValue())
    {
        input.add_var("p_sfs", ::OpenAPI::toStringValue(p_sfs.value()));
    }
    if (p_tribeid.hasValue())
    {
        input.add_var("p_tribeid", ::OpenAPI::toStringValue(p_tribeid.value()));
    }
    if (p_tribename.hasValue())
    {
        input.add_var("p_tribename", ::OpenAPI::toStringValue(p_tribename.value()));
    }
    if (p_tribedist.hasValue())
    {
        input.add_var("p_tribedist", ::OpenAPI::toStringValue(p_tribedist.value()));
    }
    if (p_owop.hasValue())
    {
        input.add_var("p_owop", ::OpenAPI::toStringValue(p_owop.value()));
    }
    if (p_agoo.hasValue())
    {
        input.add_var("p_agoo", ::OpenAPI::toStringValue(p_agoo.value()));
    }
    if (p_idt1.hasValue())
    {
        input.add_var("p_idt1", ::OpenAPI::toStringValue(p_idt1.value()));
    }
    if (p_idt2.hasValue())
    {
        input.add_var("p_idt2", ::OpenAPI::toStringValue(p_idt2.value()));
    }
    if (p_stdt1.hasValue())
    {
        input.add_var("p_stdt1", ::OpenAPI::toStringValue(p_stdt1.value()));
    }
    if (p_stdt2.hasValue())
    {
        input.add_var("p_stdt2", ::OpenAPI::toStringValue(p_stdt2.value()));
    }
    if (p_pityp.hasValue())
    {
        input.add_var("p_pityp", ::OpenAPI::toStringValue(p_pityp.value()));
    }
    if (p_cifdi.hasValue())
    {
        input.add_var("p_cifdi", ::OpenAPI::toStringValue(p_cifdi.value()));
    }
    if (p_pfead1.hasValue())
    {
        input.add_var("p_pfead1", ::OpenAPI::toStringValue(p_pfead1.value()));
    }
    if (p_pfead2.hasValue())
    {
        input.add_var("p_pfead2", ::OpenAPI::toStringValue(p_pfead2.value()));
    }
    if (p_pfeat.hasValue())
    {
        input.add_var("p_pfeat", ::OpenAPI::toStringValue(p_pfeat.value()));
    }
    if (p_psncq.hasValue())
    {
        input.add_var("p_psncq", ::OpenAPI::toStringValue(p_psncq.value()));
    }
    if (p_pctrack.hasValue())
    {
        input.add_var("p_pctrack", ::OpenAPI::toStringValue(p_pctrack.value()));
    }
    if (p_swpa.hasValue())
    {
        input.add_var("p_swpa", ::OpenAPI::toStringValue(p_swpa.value()));
    }
    if (p_des.hasValue())
    {
        input.add_var("p_des", ::OpenAPI::toStringValue(p_des.value()));
    }
    if (p_fntype.hasValue())
    {
        input.add_var("p_fntype", ::OpenAPI::toStringValue(p_fntype.value()));
    }
    if (p_hpvmth.hasValue())
    {
        input.add_var("p_hpvmth", ::OpenAPI::toStringValue(p_hpvmth.value()));
    }
    if (p_recvio.hasValue())
    {
        input.add_var("p_recvio", ::OpenAPI::toStringValue(p_recvio.value()));
    }
    if (p_pollvio.hasValue())
    {
        input.add_var("p_pollvio", ::OpenAPI::toStringValue(p_pollvio.value()));
    }
    if (p_ar.hasValue())
    {
        input.add_var("p_ar", ::OpenAPI::toStringValue(p_ar.value()));
    }
    if (p_tri_yr.hasValue())
    {
        input.add_var("p_tri_yr", ::OpenAPI::toStringValue(p_tri_yr.value()));
    }
    if (p_pidall.hasValue())
    {
        input.add_var("p_pidall", ::OpenAPI::toStringValue(p_pidall.value()));
    }
    if (p_fac_ico.hasValue())
    {
        input.add_var("p_fac_ico", ::OpenAPI::toStringValue(p_fac_ico.value()));
    }
    if (p_icoo.hasValue())
    {
        input.add_var("p_icoo", ::OpenAPI::toStringValue(p_icoo.value()));
    }
    if (p_fac_icos.hasValue())
    {
        input.add_var("p_fac_icos", ::OpenAPI::toStringValue(p_fac_icos.value()));
    }
    if (p_ejscreen.hasValue())
    {
        input.add_var("p_ejscreen", ::OpenAPI::toStringValue(p_ejscreen.value()));
    }
    if (p_limit_addr.hasValue())
    {
        input.add_var("p_limit_addr", ::OpenAPI::toStringValue(p_limit_addr.value()));
    }
    if (p_lat.hasValue())
    {
        input.add_var("p_lat", ::OpenAPI::toStringValue(p_lat.value()));
    }
    if (p_long.hasValue())
    {
        input.add_var("p_long", ::OpenAPI::toStringValue(p_long.value()));
    }
    if (p_radius.hasValue())
    {
        input.add_var("p_radius", ::OpenAPI::toStringValue(p_radius.value()));
    }
    if (p_decouple.hasValue())
    {
        input.add_var("p_decouple", ::OpenAPI::toStringValue(p_decouple.value()));
    }
    if (p_ejscreen_over80cnt.hasValue())
    {
        input.add_var("p_ejscreen_over80cnt", ::OpenAPI::toStringValue(p_ejscreen_over80cnt.value()));
    }
    if (queryset.hasValue())
    {
        input.add_var("queryset", ::OpenAPI::toStringValue(queryset.value()));
    }
    if (responseset.hasValue())
    {
        input.add_var("responseset", ::OpenAPI::toStringValue(responseset.value()));
    }
    if (tablelist.hasValue())
    {
        input.add_var("tablelist", ::OpenAPI::toStringValue(tablelist.value()));
    }
    if (maplist.hasValue())
    {
        input.add_var("maplist", ::OpenAPI::toStringValue(maplist.value()));
    }
    if (summarylist.hasValue())
    {
        input.add_var("summarylist", ::OpenAPI::toStringValue(summarylist.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetFacilitiesPostCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetFacilitiesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_air_rest_services_get_facilities_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetFacilitiesPostSignal(output);
        Q_EMIT airRestServicesGetFacilitiesPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetFacilitiesPostSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetFacilitiesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetFacilitiesPostSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetFacilitiesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetFacilityInfoGet(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_fn, const ::OpenAPI::OptionalParam<QString> &p_sa, const ::OpenAPI::OptionalParam<QString> &p_sa1, const ::OpenAPI::OptionalParam<QString> &p_ct, const ::OpenAPI::OptionalParam<QString> &p_co, const ::OpenAPI::OptionalParam<QString> &p_fips, const ::OpenAPI::OptionalParam<QString> &p_st, const ::OpenAPI::OptionalParam<QString> &p_zip, const ::OpenAPI::OptionalParam<QString> &p_lcon, const ::OpenAPI::OptionalParam<QString> &p_frs, const ::OpenAPI::OptionalParam<QString> &p_reg, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_ncs, const ::OpenAPI::OptionalParam<double> &p_qnc, const ::OpenAPI::OptionalParam<QString> &p_pen, const ::OpenAPI::OptionalParam<QString> &p_opst, const ::OpenAPI::OptionalParam<double> &xmin, const ::OpenAPI::OptionalParam<double> &ymin, const ::OpenAPI::OptionalParam<double> &xmax, const ::OpenAPI::OptionalParam<double> &ymax, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<QString> &p_sic2, const ::OpenAPI::OptionalParam<QString> &p_sic4, const ::OpenAPI::OptionalParam<QString> &p_fa, const ::OpenAPI::OptionalParam<QString> &p_act, const ::OpenAPI::OptionalParam<QString> &p_maj, const ::OpenAPI::OptionalParam<QString> &p_mact, const ::OpenAPI::OptionalParam<QString> &p_nsps, const ::OpenAPI::OptionalParam<QString> &p_nspsm, const ::OpenAPI::OptionalParam<QString> &p_prog, const ::OpenAPI::OptionalParam<QString> &p_fea, const ::OpenAPI::OptionalParam<double> &p_feay, const ::OpenAPI::OptionalParam<QString> &p_feaa, const ::OpenAPI::OptionalParam<QString> &p_iea, const ::OpenAPI::OptionalParam<double> &p_ieay, const ::OpenAPI::OptionalParam<QString> &p_ieaa, const ::OpenAPI::OptionalParam<QString> &p_qiv, const ::OpenAPI::OptionalParam<QString> &p_naa, const ::OpenAPI::OptionalParam<QString> &p_impw, const ::OpenAPI::OptionalParam<QString> &p_trep, const ::OpenAPI::OptionalParam<QString> &p_tri_cat, const ::OpenAPI::OptionalParam<QString> &p_tri_amt, const ::OpenAPI::OptionalParam<double> &p_tri_any_amt, const ::OpenAPI::OptionalParam<QString> &p_tri_pol, const ::OpenAPI::OptionalParam<QString> &p_ghg_cat, const ::OpenAPI::OptionalParam<QString> &p_ghg_amt, const ::OpenAPI::OptionalParam<double> &p_ghg_any_amt, const ::OpenAPI::OptionalParam<QString> &p_ghg_yr, const ::OpenAPI::OptionalParam<QString> &p_nei_pol, const ::OpenAPI::OptionalParam<QString> &p_nei_amt, const ::OpenAPI::OptionalParam<double> &p_nei_any_amt, const ::OpenAPI::OptionalParam<QString> &p_nei_yr, const ::OpenAPI::OptionalParam<QString> &p_nei_cat, const ::OpenAPI::OptionalParam<QString> &p_pm, const ::OpenAPI::OptionalParam<QString> &p_pd, const ::OpenAPI::OptionalParam<QString> &p_ico, const ::OpenAPI::OptionalParam<QString> &p_huc, const ::OpenAPI::OptionalParam<QString> &p_wbd, const ::OpenAPI::OptionalParam<QString> &p_pid, const ::OpenAPI::OptionalParam<QString> &p_med, const ::OpenAPI::OptionalParam<QString> &p_ysl, const ::OpenAPI::OptionalParam<double> &p_ysly, const ::OpenAPI::OptionalParam<QString> &p_ysla, const ::OpenAPI::OptionalParam<QString> &p_stsl, const ::OpenAPI::OptionalParam<double> &p_stsly, const ::OpenAPI::OptionalParam<QString> &p_stsla, const ::OpenAPI::OptionalParam<QString> &p_stres, const ::OpenAPI::OptionalParam<QString> &p_sttyp, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_sfs, const ::OpenAPI::OptionalParam<double> &p_tribeid, const ::OpenAPI::OptionalParam<QString> &p_tribename, const ::OpenAPI::OptionalParam<double> &p_tribedist, const ::OpenAPI::OptionalParam<QString> &p_owop, const ::OpenAPI::OptionalParam<QString> &p_agoo, const ::OpenAPI::OptionalParam<QString> &p_idt1, const ::OpenAPI::OptionalParam<QString> &p_idt2, const ::OpenAPI::OptionalParam<QString> &p_stdt1, const ::OpenAPI::OptionalParam<QString> &p_stdt2, const ::OpenAPI::OptionalParam<QString> &p_pityp, const ::OpenAPI::OptionalParam<QString> &p_cifdi, const ::OpenAPI::OptionalParam<QString> &p_pfead1, const ::OpenAPI::OptionalParam<QString> &p_pfead2, const ::OpenAPI::OptionalParam<QString> &p_pfeat, const ::OpenAPI::OptionalParam<QString> &p_psncq, const ::OpenAPI::OptionalParam<QString> &p_pctrack, const ::OpenAPI::OptionalParam<QString> &p_swpa, const ::OpenAPI::OptionalParam<QString> &p_des, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_hpvmth, const ::OpenAPI::OptionalParam<QString> &p_recvio, const ::OpenAPI::OptionalParam<QString> &p_pollvio, const ::OpenAPI::OptionalParam<QString> &p_ar, const ::OpenAPI::OptionalParam<QString> &p_tri_yr, const ::OpenAPI::OptionalParam<QString> &p_pidall, const ::OpenAPI::OptionalParam<QString> &p_fac_ico, const ::OpenAPI::OptionalParam<QString> &p_icoo, const ::OpenAPI::OptionalParam<QString> &p_fac_icos, const ::OpenAPI::OptionalParam<QString> &p_ejscreen, const ::OpenAPI::OptionalParam<QString> &p_limit_addr, const ::OpenAPI::OptionalParam<double> &p_lat, const ::OpenAPI::OptionalParam<double> &p_long, const ::OpenAPI::OptionalParam<double> &p_radius, const ::OpenAPI::OptionalParam<QString> &p_decouple, const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &summarylist, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetFacilityInfoGet"][_serverIndices.value("airRestServicesGetFacilityInfoGet")].URL()+"/air_rest_services.get_facility_info");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (p_fn.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fn", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fn")).append(querySuffix).append(QUrl::toPercentEncoding(p_fn.stringValue()));
    }
    if (p_sa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sa")).append(querySuffix).append(QUrl::toPercentEncoding(p_sa.stringValue()));
    }
    if (p_sa1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sa1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sa1")).append(querySuffix).append(QUrl::toPercentEncoding(p_sa1.stringValue()));
    }
    if (p_ct.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ct", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ct")).append(querySuffix).append(QUrl::toPercentEncoding(p_ct.stringValue()));
    }
    if (p_co.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_co", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_co")).append(querySuffix).append(QUrl::toPercentEncoding(p_co.stringValue()));
    }
    if (p_fips.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fips", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fips")).append(querySuffix).append(QUrl::toPercentEncoding(p_fips.stringValue()));
    }
    if (p_st.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_st", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_st")).append(querySuffix).append(QUrl::toPercentEncoding(p_st.stringValue()));
    }
    if (p_zip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_zip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_zip")).append(querySuffix).append(QUrl::toPercentEncoding(p_zip.stringValue()));
    }
    if (p_lcon.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_lcon", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_lcon")).append(querySuffix).append(QUrl::toPercentEncoding(p_lcon.stringValue()));
    }
    if (p_frs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_frs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_frs")).append(querySuffix).append(QUrl::toPercentEncoding(p_frs.stringValue()));
    }
    if (p_reg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_reg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_reg")).append(querySuffix).append(QUrl::toPercentEncoding(p_reg.stringValue()));
    }
    if (p_sic.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic.stringValue()));
    }
    if (p_ncs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ncs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ncs")).append(querySuffix).append(QUrl::toPercentEncoding(p_ncs.stringValue()));
    }
    if (p_qnc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qnc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qnc")).append(querySuffix).append(QUrl::toPercentEncoding(p_qnc.stringValue()));
    }
    if (p_pen.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pen", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pen")).append(querySuffix).append(QUrl::toPercentEncoding(p_pen.stringValue()));
    }
    if (p_opst.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_opst", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_opst")).append(querySuffix).append(QUrl::toPercentEncoding(p_opst.stringValue()));
    }
    if (xmin.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "xmin", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("xmin")).append(querySuffix).append(QUrl::toPercentEncoding(xmin.stringValue()));
    }
    if (ymin.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ymin", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ymin")).append(querySuffix).append(QUrl::toPercentEncoding(ymin.stringValue()));
    }
    if (xmax.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "xmax", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("xmax")).append(querySuffix).append(QUrl::toPercentEncoding(xmax.stringValue()));
    }
    if (ymax.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ymax", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ymax")).append(querySuffix).append(QUrl::toPercentEncoding(ymax.stringValue()));
    }
    if (p_usmex.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_usmex", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_usmex")).append(querySuffix).append(QUrl::toPercentEncoding(p_usmex.stringValue()));
    }
    if (p_sic2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic2")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic2.stringValue()));
    }
    if (p_sic4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic4")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic4.stringValue()));
    }
    if (p_fa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fa")).append(querySuffix).append(QUrl::toPercentEncoding(p_fa.stringValue()));
    }
    if (p_act.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_act", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_act")).append(querySuffix).append(QUrl::toPercentEncoding(p_act.stringValue()));
    }
    if (p_maj.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_maj", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_maj")).append(querySuffix).append(QUrl::toPercentEncoding(p_maj.stringValue()));
    }
    if (p_mact.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_mact", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_mact")).append(querySuffix).append(QUrl::toPercentEncoding(p_mact.stringValue()));
    }
    if (p_nsps.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nsps", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nsps")).append(querySuffix).append(QUrl::toPercentEncoding(p_nsps.stringValue()));
    }
    if (p_nspsm.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nspsm", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nspsm")).append(querySuffix).append(QUrl::toPercentEncoding(p_nspsm.stringValue()));
    }
    if (p_prog.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_prog", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_prog")).append(querySuffix).append(QUrl::toPercentEncoding(p_prog.stringValue()));
    }
    if (p_fea.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fea", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fea")).append(querySuffix).append(QUrl::toPercentEncoding(p_fea.stringValue()));
    }
    if (p_feay.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_feay", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_feay")).append(querySuffix).append(QUrl::toPercentEncoding(p_feay.stringValue()));
    }
    if (p_feaa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_feaa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_feaa")).append(querySuffix).append(QUrl::toPercentEncoding(p_feaa.stringValue()));
    }
    if (p_iea.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iea", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iea")).append(querySuffix).append(QUrl::toPercentEncoding(p_iea.stringValue()));
    }
    if (p_ieay.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ieay", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ieay")).append(querySuffix).append(QUrl::toPercentEncoding(p_ieay.stringValue()));
    }
    if (p_ieaa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ieaa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ieaa")).append(querySuffix).append(QUrl::toPercentEncoding(p_ieaa.stringValue()));
    }
    if (p_qiv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qiv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qiv")).append(querySuffix).append(QUrl::toPercentEncoding(p_qiv.stringValue()));
    }
    if (p_naa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_naa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_naa")).append(querySuffix).append(QUrl::toPercentEncoding(p_naa.stringValue()));
    }
    if (p_impw.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_impw", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_impw")).append(querySuffix).append(QUrl::toPercentEncoding(p_impw.stringValue()));
    }
    if (p_trep.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_trep", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_trep")).append(querySuffix).append(QUrl::toPercentEncoding(p_trep.stringValue()));
    }
    if (p_tri_cat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tri_cat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tri_cat")).append(querySuffix).append(QUrl::toPercentEncoding(p_tri_cat.stringValue()));
    }
    if (p_tri_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tri_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tri_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_tri_amt.stringValue()));
    }
    if (p_tri_any_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tri_any_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tri_any_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_tri_any_amt.stringValue()));
    }
    if (p_tri_pol.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tri_pol", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tri_pol")).append(querySuffix).append(QUrl::toPercentEncoding(p_tri_pol.stringValue()));
    }
    if (p_ghg_cat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ghg_cat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ghg_cat")).append(querySuffix).append(QUrl::toPercentEncoding(p_ghg_cat.stringValue()));
    }
    if (p_ghg_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ghg_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ghg_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_ghg_amt.stringValue()));
    }
    if (p_ghg_any_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ghg_any_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ghg_any_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_ghg_any_amt.stringValue()));
    }
    if (p_ghg_yr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ghg_yr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ghg_yr")).append(querySuffix).append(QUrl::toPercentEncoding(p_ghg_yr.stringValue()));
    }
    if (p_nei_pol.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nei_pol", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nei_pol")).append(querySuffix).append(QUrl::toPercentEncoding(p_nei_pol.stringValue()));
    }
    if (p_nei_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nei_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nei_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_nei_amt.stringValue()));
    }
    if (p_nei_any_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nei_any_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nei_any_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_nei_any_amt.stringValue()));
    }
    if (p_nei_yr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nei_yr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nei_yr")).append(querySuffix).append(QUrl::toPercentEncoding(p_nei_yr.stringValue()));
    }
    if (p_nei_cat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_nei_cat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_nei_cat")).append(querySuffix).append(QUrl::toPercentEncoding(p_nei_cat.stringValue()));
    }
    if (p_pm.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pm", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pm")).append(querySuffix).append(QUrl::toPercentEncoding(p_pm.stringValue()));
    }
    if (p_pd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pd")).append(querySuffix).append(QUrl::toPercentEncoding(p_pd.stringValue()));
    }
    if (p_ico.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ico", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ico")).append(querySuffix).append(QUrl::toPercentEncoding(p_ico.stringValue()));
    }
    if (p_huc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_huc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_huc")).append(querySuffix).append(QUrl::toPercentEncoding(p_huc.stringValue()));
    }
    if (p_wbd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_wbd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_wbd")).append(querySuffix).append(QUrl::toPercentEncoding(p_wbd.stringValue()));
    }
    if (p_pid.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pid")).append(querySuffix).append(QUrl::toPercentEncoding(p_pid.stringValue()));
    }
    if (p_med.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_med", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_med")).append(querySuffix).append(QUrl::toPercentEncoding(p_med.stringValue()));
    }
    if (p_ysl.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysl", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysl")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysl.stringValue()));
    }
    if (p_ysly.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysly", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysly")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysly.stringValue()));
    }
    if (p_ysla.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysla", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysla")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysla.stringValue()));
    }
    if (p_stsl.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stsl", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stsl")).append(querySuffix).append(QUrl::toPercentEncoding(p_stsl.stringValue()));
    }
    if (p_stsly.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stsly", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stsly")).append(querySuffix).append(QUrl::toPercentEncoding(p_stsly.stringValue()));
    }
    if (p_stsla.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stsla", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stsla")).append(querySuffix).append(QUrl::toPercentEncoding(p_stsla.stringValue()));
    }
    if (p_stres.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stres", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stres")).append(querySuffix).append(QUrl::toPercentEncoding(p_stres.stringValue()));
    }
    if (p_sttyp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sttyp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sttyp")).append(querySuffix).append(QUrl::toPercentEncoding(p_sttyp.stringValue()));
    }
    if (p_qs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qs")).append(querySuffix).append(QUrl::toPercentEncoding(p_qs.stringValue()));
    }
    if (p_sfs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sfs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sfs")).append(querySuffix).append(QUrl::toPercentEncoding(p_sfs.stringValue()));
    }
    if (p_tribeid.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribeid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribeid")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribeid.stringValue()));
    }
    if (p_tribename.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribename", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribename")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribename.stringValue()));
    }
    if (p_tribedist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribedist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribedist")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribedist.stringValue()));
    }
    if (p_owop.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_owop", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_owop")).append(querySuffix).append(QUrl::toPercentEncoding(p_owop.stringValue()));
    }
    if (p_agoo.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_agoo", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_agoo")).append(querySuffix).append(QUrl::toPercentEncoding(p_agoo.stringValue()));
    }
    if (p_idt1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_idt1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_idt1")).append(querySuffix).append(QUrl::toPercentEncoding(p_idt1.stringValue()));
    }
    if (p_idt2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_idt2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_idt2")).append(querySuffix).append(QUrl::toPercentEncoding(p_idt2.stringValue()));
    }
    if (p_stdt1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stdt1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stdt1")).append(querySuffix).append(QUrl::toPercentEncoding(p_stdt1.stringValue()));
    }
    if (p_stdt2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_stdt2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_stdt2")).append(querySuffix).append(QUrl::toPercentEncoding(p_stdt2.stringValue()));
    }
    if (p_pityp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pityp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pityp")).append(querySuffix).append(QUrl::toPercentEncoding(p_pityp.stringValue()));
    }
    if (p_cifdi.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_cifdi", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_cifdi")).append(querySuffix).append(QUrl::toPercentEncoding(p_cifdi.stringValue()));
    }
    if (p_pfead1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfead1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfead1")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfead1.stringValue()));
    }
    if (p_pfead2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfead2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfead2")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfead2.stringValue()));
    }
    if (p_pfeat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfeat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfeat")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfeat.stringValue()));
    }
    if (p_psncq.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_psncq", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_psncq")).append(querySuffix).append(QUrl::toPercentEncoding(p_psncq.stringValue()));
    }
    if (p_pctrack.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pctrack", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pctrack")).append(querySuffix).append(QUrl::toPercentEncoding(p_pctrack.stringValue()));
    }
    if (p_swpa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_swpa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_swpa")).append(querySuffix).append(QUrl::toPercentEncoding(p_swpa.stringValue()));
    }
    if (p_des.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_des", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_des")).append(querySuffix).append(QUrl::toPercentEncoding(p_des.stringValue()));
    }
    if (p_fntype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fntype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fntype")).append(querySuffix).append(QUrl::toPercentEncoding(p_fntype.stringValue()));
    }
    if (p_hpvmth.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_hpvmth", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_hpvmth")).append(querySuffix).append(QUrl::toPercentEncoding(p_hpvmth.stringValue()));
    }
    if (p_recvio.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_recvio", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_recvio")).append(querySuffix).append(QUrl::toPercentEncoding(p_recvio.stringValue()));
    }
    if (p_pollvio.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pollvio", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pollvio")).append(querySuffix).append(QUrl::toPercentEncoding(p_pollvio.stringValue()));
    }
    if (p_ar.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ar", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ar")).append(querySuffix).append(QUrl::toPercentEncoding(p_ar.stringValue()));
    }
    if (p_tri_yr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tri_yr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tri_yr")).append(querySuffix).append(QUrl::toPercentEncoding(p_tri_yr.stringValue()));
    }
    if (p_pidall.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pidall", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pidall")).append(querySuffix).append(QUrl::toPercentEncoding(p_pidall.stringValue()));
    }
    if (p_fac_ico.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_ico", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_ico")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_ico.stringValue()));
    }
    if (p_icoo.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_icoo", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_icoo")).append(querySuffix).append(QUrl::toPercentEncoding(p_icoo.stringValue()));
    }
    if (p_fac_icos.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_icos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_icos")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_icos.stringValue()));
    }
    if (p_ejscreen.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ejscreen", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ejscreen")).append(querySuffix).append(QUrl::toPercentEncoding(p_ejscreen.stringValue()));
    }
    if (p_limit_addr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_limit_addr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_limit_addr")).append(querySuffix).append(QUrl::toPercentEncoding(p_limit_addr.stringValue()));
    }
    if (p_lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_lat.stringValue()));
    }
    if (p_long.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_long", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_long")).append(querySuffix).append(QUrl::toPercentEncoding(p_long.stringValue()));
    }
    if (p_radius.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_radius", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_radius")).append(querySuffix).append(QUrl::toPercentEncoding(p_radius.stringValue()));
    }
    if (p_decouple.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_decouple", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_decouple")).append(querySuffix).append(QUrl::toPercentEncoding(p_decouple.stringValue()));
    }
    if (p_ejscreen_over80cnt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ejscreen_over80cnt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ejscreen_over80cnt")).append(querySuffix).append(QUrl::toPercentEncoding(p_ejscreen_over80cnt.stringValue()));
    }
    if (queryset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queryset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("queryset")).append(querySuffix).append(QUrl::toPercentEncoding(queryset.stringValue()));
    }
    if (responseset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "responseset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("responseset")).append(querySuffix).append(QUrl::toPercentEncoding(responseset.stringValue()));
    }
    if (summarylist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "summarylist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("summarylist")).append(querySuffix).append(QUrl::toPercentEncoding(summarylist.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    if (p_pretty_print.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pretty_print", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pretty_print")).append(querySuffix).append(QUrl::toPercentEncoding(p_pretty_print.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetFacilityInfoGetCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetFacilityInfoGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_air_rest_services_get_facility_info_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetFacilityInfoGetSignal(output);
        Q_EMIT airRestServicesGetFacilityInfoGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetFacilityInfoGetSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetFacilityInfoGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetFacilityInfoGetSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetFacilityInfoGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetFacilityInfoPost(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_fn, const ::OpenAPI::OptionalParam<QString> &p_sa, const ::OpenAPI::OptionalParam<QString> &p_sa1, const ::OpenAPI::OptionalParam<QString> &p_ct, const ::OpenAPI::OptionalParam<QString> &p_co, const ::OpenAPI::OptionalParam<QString> &p_fips, const ::OpenAPI::OptionalParam<QString> &p_st, const ::OpenAPI::OptionalParam<QString> &p_zip, const ::OpenAPI::OptionalParam<QString> &p_lcon, const ::OpenAPI::OptionalParam<QString> &p_frs, const ::OpenAPI::OptionalParam<QString> &p_reg, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_ncs, const ::OpenAPI::OptionalParam<double> &p_qnc, const ::OpenAPI::OptionalParam<QString> &p_pen, const ::OpenAPI::OptionalParam<QString> &p_opst, const ::OpenAPI::OptionalParam<double> &xmin, const ::OpenAPI::OptionalParam<double> &ymin, const ::OpenAPI::OptionalParam<double> &xmax, const ::OpenAPI::OptionalParam<double> &ymax, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<QString> &p_sic2, const ::OpenAPI::OptionalParam<QString> &p_sic4, const ::OpenAPI::OptionalParam<QString> &p_fa, const ::OpenAPI::OptionalParam<QString> &p_act, const ::OpenAPI::OptionalParam<QString> &p_maj, const ::OpenAPI::OptionalParam<QString> &p_mact, const ::OpenAPI::OptionalParam<QString> &p_nsps, const ::OpenAPI::OptionalParam<QString> &p_nspsm, const ::OpenAPI::OptionalParam<QString> &p_prog, const ::OpenAPI::OptionalParam<QString> &p_fea, const ::OpenAPI::OptionalParam<double> &p_feay, const ::OpenAPI::OptionalParam<QString> &p_feaa, const ::OpenAPI::OptionalParam<QString> &p_iea, const ::OpenAPI::OptionalParam<double> &p_ieay, const ::OpenAPI::OptionalParam<QString> &p_ieaa, const ::OpenAPI::OptionalParam<QString> &p_qiv, const ::OpenAPI::OptionalParam<QString> &p_naa, const ::OpenAPI::OptionalParam<QString> &p_impw, const ::OpenAPI::OptionalParam<QString> &p_trep, const ::OpenAPI::OptionalParam<QString> &p_tri_cat, const ::OpenAPI::OptionalParam<QString> &p_tri_amt, const ::OpenAPI::OptionalParam<double> &p_tri_any_amt, const ::OpenAPI::OptionalParam<QString> &p_tri_pol, const ::OpenAPI::OptionalParam<QString> &p_ghg_cat, const ::OpenAPI::OptionalParam<QString> &p_ghg_amt, const ::OpenAPI::OptionalParam<double> &p_ghg_any_amt, const ::OpenAPI::OptionalParam<QString> &p_ghg_yr, const ::OpenAPI::OptionalParam<QString> &p_nei_pol, const ::OpenAPI::OptionalParam<QString> &p_nei_amt, const ::OpenAPI::OptionalParam<double> &p_nei_any_amt, const ::OpenAPI::OptionalParam<QString> &p_nei_yr, const ::OpenAPI::OptionalParam<QString> &p_nei_cat, const ::OpenAPI::OptionalParam<QString> &p_pm, const ::OpenAPI::OptionalParam<QString> &p_pd, const ::OpenAPI::OptionalParam<QString> &p_ico, const ::OpenAPI::OptionalParam<QString> &p_huc, const ::OpenAPI::OptionalParam<QString> &p_wbd, const ::OpenAPI::OptionalParam<QString> &p_pid, const ::OpenAPI::OptionalParam<QString> &p_med, const ::OpenAPI::OptionalParam<QString> &p_ysl, const ::OpenAPI::OptionalParam<double> &p_ysly, const ::OpenAPI::OptionalParam<QString> &p_ysla, const ::OpenAPI::OptionalParam<QString> &p_stsl, const ::OpenAPI::OptionalParam<double> &p_stsly, const ::OpenAPI::OptionalParam<QString> &p_stsla, const ::OpenAPI::OptionalParam<QString> &p_stres, const ::OpenAPI::OptionalParam<QString> &p_sttyp, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_sfs, const ::OpenAPI::OptionalParam<double> &p_tribeid, const ::OpenAPI::OptionalParam<QString> &p_tribename, const ::OpenAPI::OptionalParam<double> &p_tribedist, const ::OpenAPI::OptionalParam<QString> &p_owop, const ::OpenAPI::OptionalParam<QString> &p_agoo, const ::OpenAPI::OptionalParam<QString> &p_idt1, const ::OpenAPI::OptionalParam<QString> &p_idt2, const ::OpenAPI::OptionalParam<QString> &p_stdt1, const ::OpenAPI::OptionalParam<QString> &p_stdt2, const ::OpenAPI::OptionalParam<QString> &p_pityp, const ::OpenAPI::OptionalParam<QString> &p_cifdi, const ::OpenAPI::OptionalParam<QString> &p_pfead1, const ::OpenAPI::OptionalParam<QString> &p_pfead2, const ::OpenAPI::OptionalParam<QString> &p_pfeat, const ::OpenAPI::OptionalParam<QString> &p_psncq, const ::OpenAPI::OptionalParam<QString> &p_pctrack, const ::OpenAPI::OptionalParam<QString> &p_swpa, const ::OpenAPI::OptionalParam<QString> &p_des, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_hpvmth, const ::OpenAPI::OptionalParam<QString> &p_recvio, const ::OpenAPI::OptionalParam<QString> &p_pollvio, const ::OpenAPI::OptionalParam<QString> &p_ar, const ::OpenAPI::OptionalParam<QString> &p_tri_yr, const ::OpenAPI::OptionalParam<QString> &p_pidall, const ::OpenAPI::OptionalParam<QString> &p_fac_ico, const ::OpenAPI::OptionalParam<QString> &p_icoo, const ::OpenAPI::OptionalParam<QString> &p_fac_icos, const ::OpenAPI::OptionalParam<QString> &p_ejscreen, const ::OpenAPI::OptionalParam<QString> &p_limit_addr, const ::OpenAPI::OptionalParam<double> &p_lat, const ::OpenAPI::OptionalParam<double> &p_long, const ::OpenAPI::OptionalParam<double> &p_radius, const ::OpenAPI::OptionalParam<QString> &p_decouple, const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &summarylist, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetFacilityInfoPost"][_serverIndices.value("airRestServicesGetFacilityInfoPost")].URL()+"/air_rest_services.get_facility_info");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    if (p_fn.hasValue())
    {
        input.add_var("p_fn", ::OpenAPI::toStringValue(p_fn.value()));
    }
    if (p_sa.hasValue())
    {
        input.add_var("p_sa", ::OpenAPI::toStringValue(p_sa.value()));
    }
    if (p_sa1.hasValue())
    {
        input.add_var("p_sa1", ::OpenAPI::toStringValue(p_sa1.value()));
    }
    if (p_ct.hasValue())
    {
        input.add_var("p_ct", ::OpenAPI::toStringValue(p_ct.value()));
    }
    if (p_co.hasValue())
    {
        input.add_var("p_co", ::OpenAPI::toStringValue(p_co.value()));
    }
    if (p_fips.hasValue())
    {
        input.add_var("p_fips", ::OpenAPI::toStringValue(p_fips.value()));
    }
    if (p_st.hasValue())
    {
        input.add_var("p_st", ::OpenAPI::toStringValue(p_st.value()));
    }
    if (p_zip.hasValue())
    {
        input.add_var("p_zip", ::OpenAPI::toStringValue(p_zip.value()));
    }
    if (p_lcon.hasValue())
    {
        input.add_var("p_lcon", ::OpenAPI::toStringValue(p_lcon.value()));
    }
    if (p_frs.hasValue())
    {
        input.add_var("p_frs", ::OpenAPI::toStringValue(p_frs.value()));
    }
    if (p_reg.hasValue())
    {
        input.add_var("p_reg", ::OpenAPI::toStringValue(p_reg.value()));
    }
    if (p_sic.hasValue())
    {
        input.add_var("p_sic", ::OpenAPI::toStringValue(p_sic.value()));
    }
    if (p_ncs.hasValue())
    {
        input.add_var("p_ncs", ::OpenAPI::toStringValue(p_ncs.value()));
    }
    if (p_qnc.hasValue())
    {
        input.add_var("p_qnc", ::OpenAPI::toStringValue(p_qnc.value()));
    }
    if (p_pen.hasValue())
    {
        input.add_var("p_pen", ::OpenAPI::toStringValue(p_pen.value()));
    }
    if (p_opst.hasValue())
    {
        input.add_var("p_opst", ::OpenAPI::toStringValue(p_opst.value()));
    }
    if (xmin.hasValue())
    {
        input.add_var("xmin", ::OpenAPI::toStringValue(xmin.value()));
    }
    if (ymin.hasValue())
    {
        input.add_var("ymin", ::OpenAPI::toStringValue(ymin.value()));
    }
    if (xmax.hasValue())
    {
        input.add_var("xmax", ::OpenAPI::toStringValue(xmax.value()));
    }
    if (ymax.hasValue())
    {
        input.add_var("ymax", ::OpenAPI::toStringValue(ymax.value()));
    }
    if (p_usmex.hasValue())
    {
        input.add_var("p_usmex", ::OpenAPI::toStringValue(p_usmex.value()));
    }
    if (p_sic2.hasValue())
    {
        input.add_var("p_sic2", ::OpenAPI::toStringValue(p_sic2.value()));
    }
    if (p_sic4.hasValue())
    {
        input.add_var("p_sic4", ::OpenAPI::toStringValue(p_sic4.value()));
    }
    if (p_fa.hasValue())
    {
        input.add_var("p_fa", ::OpenAPI::toStringValue(p_fa.value()));
    }
    if (p_act.hasValue())
    {
        input.add_var("p_act", ::OpenAPI::toStringValue(p_act.value()));
    }
    if (p_maj.hasValue())
    {
        input.add_var("p_maj", ::OpenAPI::toStringValue(p_maj.value()));
    }
    if (p_mact.hasValue())
    {
        input.add_var("p_mact", ::OpenAPI::toStringValue(p_mact.value()));
    }
    if (p_nsps.hasValue())
    {
        input.add_var("p_nsps", ::OpenAPI::toStringValue(p_nsps.value()));
    }
    if (p_nspsm.hasValue())
    {
        input.add_var("p_nspsm", ::OpenAPI::toStringValue(p_nspsm.value()));
    }
    if (p_prog.hasValue())
    {
        input.add_var("p_prog", ::OpenAPI::toStringValue(p_prog.value()));
    }
    if (p_fea.hasValue())
    {
        input.add_var("p_fea", ::OpenAPI::toStringValue(p_fea.value()));
    }
    if (p_feay.hasValue())
    {
        input.add_var("p_feay", ::OpenAPI::toStringValue(p_feay.value()));
    }
    if (p_feaa.hasValue())
    {
        input.add_var("p_feaa", ::OpenAPI::toStringValue(p_feaa.value()));
    }
    if (p_iea.hasValue())
    {
        input.add_var("p_iea", ::OpenAPI::toStringValue(p_iea.value()));
    }
    if (p_ieay.hasValue())
    {
        input.add_var("p_ieay", ::OpenAPI::toStringValue(p_ieay.value()));
    }
    if (p_ieaa.hasValue())
    {
        input.add_var("p_ieaa", ::OpenAPI::toStringValue(p_ieaa.value()));
    }
    if (p_qiv.hasValue())
    {
        input.add_var("p_qiv", ::OpenAPI::toStringValue(p_qiv.value()));
    }
    if (p_naa.hasValue())
    {
        input.add_var("p_naa", ::OpenAPI::toStringValue(p_naa.value()));
    }
    if (p_impw.hasValue())
    {
        input.add_var("p_impw", ::OpenAPI::toStringValue(p_impw.value()));
    }
    if (p_trep.hasValue())
    {
        input.add_var("p_trep", ::OpenAPI::toStringValue(p_trep.value()));
    }
    if (p_tri_cat.hasValue())
    {
        input.add_var("p_tri_cat", ::OpenAPI::toStringValue(p_tri_cat.value()));
    }
    if (p_tri_amt.hasValue())
    {
        input.add_var("p_tri_amt", ::OpenAPI::toStringValue(p_tri_amt.value()));
    }
    if (p_tri_any_amt.hasValue())
    {
        input.add_var("p_tri_any_amt", ::OpenAPI::toStringValue(p_tri_any_amt.value()));
    }
    if (p_tri_pol.hasValue())
    {
        input.add_var("p_tri_pol", ::OpenAPI::toStringValue(p_tri_pol.value()));
    }
    if (p_ghg_cat.hasValue())
    {
        input.add_var("p_ghg_cat", ::OpenAPI::toStringValue(p_ghg_cat.value()));
    }
    if (p_ghg_amt.hasValue())
    {
        input.add_var("p_ghg_amt", ::OpenAPI::toStringValue(p_ghg_amt.value()));
    }
    if (p_ghg_any_amt.hasValue())
    {
        input.add_var("p_ghg_any_amt", ::OpenAPI::toStringValue(p_ghg_any_amt.value()));
    }
    if (p_ghg_yr.hasValue())
    {
        input.add_var("p_ghg_yr", ::OpenAPI::toStringValue(p_ghg_yr.value()));
    }
    if (p_nei_pol.hasValue())
    {
        input.add_var("p_nei_pol", ::OpenAPI::toStringValue(p_nei_pol.value()));
    }
    if (p_nei_amt.hasValue())
    {
        input.add_var("p_nei_amt", ::OpenAPI::toStringValue(p_nei_amt.value()));
    }
    if (p_nei_any_amt.hasValue())
    {
        input.add_var("p_nei_any_amt", ::OpenAPI::toStringValue(p_nei_any_amt.value()));
    }
    if (p_nei_yr.hasValue())
    {
        input.add_var("p_nei_yr", ::OpenAPI::toStringValue(p_nei_yr.value()));
    }
    if (p_nei_cat.hasValue())
    {
        input.add_var("p_nei_cat", ::OpenAPI::toStringValue(p_nei_cat.value()));
    }
    if (p_pm.hasValue())
    {
        input.add_var("p_pm", ::OpenAPI::toStringValue(p_pm.value()));
    }
    if (p_pd.hasValue())
    {
        input.add_var("p_pd", ::OpenAPI::toStringValue(p_pd.value()));
    }
    if (p_ico.hasValue())
    {
        input.add_var("p_ico", ::OpenAPI::toStringValue(p_ico.value()));
    }
    if (p_huc.hasValue())
    {
        input.add_var("p_huc", ::OpenAPI::toStringValue(p_huc.value()));
    }
    if (p_wbd.hasValue())
    {
        input.add_var("p_wbd", ::OpenAPI::toStringValue(p_wbd.value()));
    }
    if (p_pid.hasValue())
    {
        input.add_var("p_pid", ::OpenAPI::toStringValue(p_pid.value()));
    }
    if (p_med.hasValue())
    {
        input.add_var("p_med", ::OpenAPI::toStringValue(p_med.value()));
    }
    if (p_ysl.hasValue())
    {
        input.add_var("p_ysl", ::OpenAPI::toStringValue(p_ysl.value()));
    }
    if (p_ysly.hasValue())
    {
        input.add_var("p_ysly", ::OpenAPI::toStringValue(p_ysly.value()));
    }
    if (p_ysla.hasValue())
    {
        input.add_var("p_ysla", ::OpenAPI::toStringValue(p_ysla.value()));
    }
    if (p_stsl.hasValue())
    {
        input.add_var("p_stsl", ::OpenAPI::toStringValue(p_stsl.value()));
    }
    if (p_stsly.hasValue())
    {
        input.add_var("p_stsly", ::OpenAPI::toStringValue(p_stsly.value()));
    }
    if (p_stsla.hasValue())
    {
        input.add_var("p_stsla", ::OpenAPI::toStringValue(p_stsla.value()));
    }
    if (p_stres.hasValue())
    {
        input.add_var("p_stres", ::OpenAPI::toStringValue(p_stres.value()));
    }
    if (p_sttyp.hasValue())
    {
        input.add_var("p_sttyp", ::OpenAPI::toStringValue(p_sttyp.value()));
    }
    if (p_qs.hasValue())
    {
        input.add_var("p_qs", ::OpenAPI::toStringValue(p_qs.value()));
    }
    if (p_sfs.hasValue())
    {
        input.add_var("p_sfs", ::OpenAPI::toStringValue(p_sfs.value()));
    }
    if (p_tribeid.hasValue())
    {
        input.add_var("p_tribeid", ::OpenAPI::toStringValue(p_tribeid.value()));
    }
    if (p_tribename.hasValue())
    {
        input.add_var("p_tribename", ::OpenAPI::toStringValue(p_tribename.value()));
    }
    if (p_tribedist.hasValue())
    {
        input.add_var("p_tribedist", ::OpenAPI::toStringValue(p_tribedist.value()));
    }
    if (p_owop.hasValue())
    {
        input.add_var("p_owop", ::OpenAPI::toStringValue(p_owop.value()));
    }
    if (p_agoo.hasValue())
    {
        input.add_var("p_agoo", ::OpenAPI::toStringValue(p_agoo.value()));
    }
    if (p_idt1.hasValue())
    {
        input.add_var("p_idt1", ::OpenAPI::toStringValue(p_idt1.value()));
    }
    if (p_idt2.hasValue())
    {
        input.add_var("p_idt2", ::OpenAPI::toStringValue(p_idt2.value()));
    }
    if (p_stdt1.hasValue())
    {
        input.add_var("p_stdt1", ::OpenAPI::toStringValue(p_stdt1.value()));
    }
    if (p_stdt2.hasValue())
    {
        input.add_var("p_stdt2", ::OpenAPI::toStringValue(p_stdt2.value()));
    }
    if (p_pityp.hasValue())
    {
        input.add_var("p_pityp", ::OpenAPI::toStringValue(p_pityp.value()));
    }
    if (p_cifdi.hasValue())
    {
        input.add_var("p_cifdi", ::OpenAPI::toStringValue(p_cifdi.value()));
    }
    if (p_pfead1.hasValue())
    {
        input.add_var("p_pfead1", ::OpenAPI::toStringValue(p_pfead1.value()));
    }
    if (p_pfead2.hasValue())
    {
        input.add_var("p_pfead2", ::OpenAPI::toStringValue(p_pfead2.value()));
    }
    if (p_pfeat.hasValue())
    {
        input.add_var("p_pfeat", ::OpenAPI::toStringValue(p_pfeat.value()));
    }
    if (p_psncq.hasValue())
    {
        input.add_var("p_psncq", ::OpenAPI::toStringValue(p_psncq.value()));
    }
    if (p_pctrack.hasValue())
    {
        input.add_var("p_pctrack", ::OpenAPI::toStringValue(p_pctrack.value()));
    }
    if (p_swpa.hasValue())
    {
        input.add_var("p_swpa", ::OpenAPI::toStringValue(p_swpa.value()));
    }
    if (p_des.hasValue())
    {
        input.add_var("p_des", ::OpenAPI::toStringValue(p_des.value()));
    }
    if (p_fntype.hasValue())
    {
        input.add_var("p_fntype", ::OpenAPI::toStringValue(p_fntype.value()));
    }
    if (p_hpvmth.hasValue())
    {
        input.add_var("p_hpvmth", ::OpenAPI::toStringValue(p_hpvmth.value()));
    }
    if (p_recvio.hasValue())
    {
        input.add_var("p_recvio", ::OpenAPI::toStringValue(p_recvio.value()));
    }
    if (p_pollvio.hasValue())
    {
        input.add_var("p_pollvio", ::OpenAPI::toStringValue(p_pollvio.value()));
    }
    if (p_ar.hasValue())
    {
        input.add_var("p_ar", ::OpenAPI::toStringValue(p_ar.value()));
    }
    if (p_tri_yr.hasValue())
    {
        input.add_var("p_tri_yr", ::OpenAPI::toStringValue(p_tri_yr.value()));
    }
    if (p_pidall.hasValue())
    {
        input.add_var("p_pidall", ::OpenAPI::toStringValue(p_pidall.value()));
    }
    if (p_fac_ico.hasValue())
    {
        input.add_var("p_fac_ico", ::OpenAPI::toStringValue(p_fac_ico.value()));
    }
    if (p_icoo.hasValue())
    {
        input.add_var("p_icoo", ::OpenAPI::toStringValue(p_icoo.value()));
    }
    if (p_fac_icos.hasValue())
    {
        input.add_var("p_fac_icos", ::OpenAPI::toStringValue(p_fac_icos.value()));
    }
    if (p_ejscreen.hasValue())
    {
        input.add_var("p_ejscreen", ::OpenAPI::toStringValue(p_ejscreen.value()));
    }
    if (p_limit_addr.hasValue())
    {
        input.add_var("p_limit_addr", ::OpenAPI::toStringValue(p_limit_addr.value()));
    }
    if (p_lat.hasValue())
    {
        input.add_var("p_lat", ::OpenAPI::toStringValue(p_lat.value()));
    }
    if (p_long.hasValue())
    {
        input.add_var("p_long", ::OpenAPI::toStringValue(p_long.value()));
    }
    if (p_radius.hasValue())
    {
        input.add_var("p_radius", ::OpenAPI::toStringValue(p_radius.value()));
    }
    if (p_decouple.hasValue())
    {
        input.add_var("p_decouple", ::OpenAPI::toStringValue(p_decouple.value()));
    }
    if (p_ejscreen_over80cnt.hasValue())
    {
        input.add_var("p_ejscreen_over80cnt", ::OpenAPI::toStringValue(p_ejscreen_over80cnt.value()));
    }
    if (queryset.hasValue())
    {
        input.add_var("queryset", ::OpenAPI::toStringValue(queryset.value()));
    }
    if (responseset.hasValue())
    {
        input.add_var("responseset", ::OpenAPI::toStringValue(responseset.value()));
    }
    if (summarylist.hasValue())
    {
        input.add_var("summarylist", ::OpenAPI::toStringValue(summarylist.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }
    if (p_pretty_print.hasValue())
    {
        input.add_var("p_pretty_print", ::OpenAPI::toStringValue(p_pretty_print.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetFacilityInfoPostCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetFacilityInfoPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_air_rest_services_get_facility_info_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetFacilityInfoPostSignal(output);
        Q_EMIT airRestServicesGetFacilityInfoPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetFacilityInfoPostSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetFacilityInfoPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetFacilityInfoPostSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetFacilityInfoPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetGeojsonGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetGeojsonGet"][_serverIndices.value("airRestServicesGetGeojsonGet")].URL()+"/air_rest_services.get_geojson");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (newsort.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "newsort", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("newsort")).append(querySuffix).append(QUrl::toPercentEncoding(newsort.stringValue()));
    }
    if (descending.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "descending", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("descending")).append(querySuffix).append(QUrl::toPercentEncoding(descending.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    if (p_pretty_print.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pretty_print", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pretty_print")).append(querySuffix).append(QUrl::toPercentEncoding(p_pretty_print.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetGeojsonGetCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetGeojsonGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_air_rest_services_get_geojson_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetGeojsonGetSignal(output);
        Q_EMIT airRestServicesGetGeojsonGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetGeojsonGetSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetGeojsonGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetGeojsonGetSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetGeojsonGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetGeojsonPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetGeojsonPost"][_serverIndices.value("airRestServicesGetGeojsonPost")].URL()+"/air_rest_services.get_geojson");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (newsort.hasValue())
    {
        input.add_var("newsort", ::OpenAPI::toStringValue(newsort.value()));
    }
    if (descending.hasValue())
    {
        input.add_var("descending", ::OpenAPI::toStringValue(descending.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }
    if (p_pretty_print.hasValue())
    {
        input.add_var("p_pretty_print", ::OpenAPI::toStringValue(p_pretty_print.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetGeojsonPostCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetGeojsonPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_air_rest_services_get_geojson_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetGeojsonPostSignal(output);
        Q_EMIT airRestServicesGetGeojsonPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetGeojsonPostSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetGeojsonPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetGeojsonPostSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetGeojsonPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetInfoClustersGet(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetInfoClustersGet"][_serverIndices.value("airRestServicesGetInfoClustersGet")].URL()+"/air_rest_services.get_info_clusters");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qid")).append(querySuffix).append(QUrl::toPercentEncoding(p_qid));
    }
    if (p_pretty_print.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pretty_print", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pretty_print")).append(querySuffix).append(QUrl::toPercentEncoding(p_pretty_print.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetInfoClustersGetCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetInfoClustersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetInfoClustersGetSignal(output);
        Q_EMIT airRestServicesGetInfoClustersGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetInfoClustersGetSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetInfoClustersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetInfoClustersGetSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetInfoClustersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetInfoClustersPost(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetInfoClustersPost"][_serverIndices.value("airRestServicesGetInfoClustersPost")].URL()+"/air_rest_services.get_info_clusters");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("p_qid", ::OpenAPI::toStringValue(p_qid));
    }
    if (p_pretty_print.hasValue())
    {
        input.add_var("p_pretty_print", ::OpenAPI::toStringValue(p_pretty_print.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetInfoClustersPostCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetInfoClustersPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetInfoClustersPostSignal(output);
        Q_EMIT airRestServicesGetInfoClustersPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetInfoClustersPostSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetInfoClustersPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetInfoClustersPostSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetInfoClustersPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetMapGet(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<double> &c1_lat, const ::OpenAPI::OptionalParam<double> &c1_long, const ::OpenAPI::OptionalParam<double> &c2_lat, const ::OpenAPI::OptionalParam<double> &c2_long) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetMapGet"][_serverIndices.value("airRestServicesGetMapGet")].URL()+"/air_rest_services.get_map");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (tablelist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "tablelist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("tablelist")).append(querySuffix).append(QUrl::toPercentEncoding(tablelist.stringValue()));
    }
    if (c1_lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c1_lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c1_lat")).append(querySuffix).append(QUrl::toPercentEncoding(c1_lat.stringValue()));
    }
    if (c1_long.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c1_long", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c1_long")).append(querySuffix).append(QUrl::toPercentEncoding(c1_long.stringValue()));
    }
    if (c2_lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c2_lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c2_lat")).append(querySuffix).append(QUrl::toPercentEncoding(c2_lat.stringValue()));
    }
    if (c2_long.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c2_long", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c2_long")).append(querySuffix).append(QUrl::toPercentEncoding(c2_long.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetMapGetCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetMapGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_air_rest_services_get_map_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetMapGetSignal(output);
        Q_EMIT airRestServicesGetMapGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetMapGetSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetMapGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetMapGetSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetMapGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetMapPost(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<double> &c1_lat, const ::OpenAPI::OptionalParam<double> &c1_long, const ::OpenAPI::OptionalParam<double> &c2_lat, const ::OpenAPI::OptionalParam<double> &c2_long) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetMapPost"][_serverIndices.value("airRestServicesGetMapPost")].URL()+"/air_rest_services.get_map");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (tablelist.hasValue())
    {
        input.add_var("tablelist", ::OpenAPI::toStringValue(tablelist.value()));
    }
    if (c1_lat.hasValue())
    {
        input.add_var("c1_lat", ::OpenAPI::toStringValue(c1_lat.value()));
    }
    if (c1_long.hasValue())
    {
        input.add_var("c1_long", ::OpenAPI::toStringValue(c1_long.value()));
    }
    if (c2_lat.hasValue())
    {
        input.add_var("c2_lat", ::OpenAPI::toStringValue(c2_lat.value()));
    }
    if (c2_long.hasValue())
    {
        input.add_var("c2_long", ::OpenAPI::toStringValue(c2_long.value()));
    }
    
    {
        input.add_var("p_id", ::OpenAPI::toStringValue(p_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetMapPostCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetMapPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_air_rest_services_get_map_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetMapPostSignal(output);
        Q_EMIT airRestServicesGetMapPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetMapPostSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetMapPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetMapPostSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetMapPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetQidGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &pageno, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetQidGet"][_serverIndices.value("airRestServicesGetQidGet")].URL()+"/air_rest_services.get_qid");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (pageno.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageno", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageno")).append(querySuffix).append(QUrl::toPercentEncoding(pageno.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (newsort.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "newsort", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("newsort")).append(querySuffix).append(QUrl::toPercentEncoding(newsort.stringValue()));
    }
    if (descending.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "descending", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("descending")).append(querySuffix).append(QUrl::toPercentEncoding(descending.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetQidGetCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetQidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_air_rest_services_get_qid_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetQidGetSignal(output);
        Q_EMIT airRestServicesGetQidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetQidGetSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetQidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetQidGetSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetQidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::airRestServicesGetQidPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &pageno, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["airRestServicesGetQidPost"][_serverIndices.value("airRestServicesGetQidPost")].URL()+"/air_rest_services.get_qid");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (pageno.hasValue())
    {
        input.add_var("pageno", ::OpenAPI::toStringValue(pageno.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (newsort.hasValue())
    {
        input.add_var("newsort", ::OpenAPI::toStringValue(newsort.value()));
    }
    if (descending.hasValue())
    {
        input.add_var("descending", ::OpenAPI::toStringValue(descending.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilitiesApi::airRestServicesGetQidPostCallback);
    connect(this, &OAIFacilitiesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilitiesApi::airRestServicesGetQidPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_air_rest_services_get_qid_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airRestServicesGetQidPostSignal(output);
        Q_EMIT airRestServicesGetQidPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airRestServicesGetQidPostSignalE(output, error_type, error_str);
        Q_EMIT airRestServicesGetQidPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airRestServicesGetQidPostSignalError(output, error_type, error_str);
        Q_EMIT airRestServicesGetQidPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilitiesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
