/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Results Column Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:37.467708-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Meta3 {
  public static final String SERIALIZED_NAME_COLUMN_I_D = "ColumnID";
  @SerializedName(SERIALIZED_NAME_COLUMN_I_D)
  private String columnID;

  public static final String SERIALIZED_NAME_COLUMN_NAME = "ColumnName";
  @SerializedName(SERIALIZED_NAME_COLUMN_NAME)
  private String columnName;

  public static final String SERIALIZED_NAME_DATA_LENGTH = "DataLength";
  @SerializedName(SERIALIZED_NAME_DATA_LENGTH)
  private String dataLength;

  public static final String SERIALIZED_NAME_DATA_TYPE = "DataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_OBJECT_NAME = "ObjectName";
  @SerializedName(SERIALIZED_NAME_OBJECT_NAME)
  private String objectName;

  public Meta3() {
  }

  public Meta3 columnID(String columnID) {
    this.columnID = columnID;
    return this;
  }

  /**
   * Get columnID
   * @return columnID
   */
  @javax.annotation.Nonnull
  public String getColumnID() {
    return columnID;
  }

  public void setColumnID(String columnID) {
    this.columnID = columnID;
  }


  public Meta3 columnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

  /**
   * Get columnName
   * @return columnName
   */
  @javax.annotation.Nonnull
  public String getColumnName() {
    return columnName;
  }

  public void setColumnName(String columnName) {
    this.columnName = columnName;
  }


  public Meta3 dataLength(String dataLength) {
    this.dataLength = dataLength;
    return this;
  }

  /**
   * Data length for EPA program database column.
   * @return dataLength
   */
  @javax.annotation.Nonnull
  public String getDataLength() {
    return dataLength;
  }

  public void setDataLength(String dataLength) {
    this.dataLength = dataLength;
  }


  public Meta3 dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Data type for EPA program database column.
   * @return dataType
   */
  @javax.annotation.Nonnull
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  public Meta3 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Meta3 objectName(String objectName) {
    this.objectName = objectName;
    return this;
  }

  /**
   * The JSON name used for the database column.
   * @return objectName
   */
  @javax.annotation.Nonnull
  public String getObjectName() {
    return objectName;
  }

  public void setObjectName(String objectName) {
    this.objectName = objectName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Meta3 meta3 = (Meta3) o;
    return Objects.equals(this.columnID, meta3.columnID) &&
        Objects.equals(this.columnName, meta3.columnName) &&
        Objects.equals(this.dataLength, meta3.dataLength) &&
        Objects.equals(this.dataType, meta3.dataType) &&
        Objects.equals(this.description, meta3.description) &&
        Objects.equals(this.objectName, meta3.objectName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnID, columnName, dataLength, dataType, description, objectName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Meta3 {\n");
    sb.append("    columnID: ").append(toIndentedString(columnID)).append("\n");
    sb.append("    columnName: ").append(toIndentedString(columnName)).append("\n");
    sb.append("    dataLength: ").append(toIndentedString(dataLength)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    objectName: ").append(toIndentedString(objectName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ColumnID");
    openapiFields.add("ColumnName");
    openapiFields.add("DataLength");
    openapiFields.add("DataType");
    openapiFields.add("Description");
    openapiFields.add("ObjectName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ColumnID");
    openapiRequiredFields.add("ColumnName");
    openapiRequiredFields.add("DataLength");
    openapiRequiredFields.add("DataType");
    openapiRequiredFields.add("Description");
    openapiRequiredFields.add("ObjectName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Meta3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Meta3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Meta3 is not found in the empty JSON string", Meta3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Meta3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Meta3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Meta3.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ColumnID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColumnID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColumnID").toString()));
      }
      if (!jsonObj.get("ColumnName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColumnName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColumnName").toString()));
      }
      if (!jsonObj.get("DataLength").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataLength` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataLength").toString()));
      }
      if (!jsonObj.get("DataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataType").toString()));
      }
      if (!jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (!jsonObj.get("ObjectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ObjectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ObjectName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Meta3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Meta3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Meta3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Meta3.class));

       return (TypeAdapter<T>) new TypeAdapter<Meta3>() {
           @Override
           public void write(JsonWriter out, Meta3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Meta3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Meta3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Meta3
   * @throws IOException if the JSON string is invalid with respect to Meta3
   */
  public static Meta3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Meta3.class);
  }

  /**
   * Convert an instance of Meta3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

