/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Facilities Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:37.467708-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Air06 {
  public static final String SERIALIZED_NAME_AI_R3YR_COMPL_QTRS_HISTORY = "AIR3yrComplQtrsHistory";
  @SerializedName(SERIALIZED_NAME_AI_R3YR_COMPL_QTRS_HISTORY)
  private String aiR3yrComplQtrsHistory;

  public static final String SERIALIZED_NAME_AI_R_CASE_I_DS = "AIRCaseIDs";
  @SerializedName(SERIALIZED_NAME_AI_R_CASE_I_DS)
  private String aiRCaseIDs;

  public static final String SERIALIZED_NAME_AI_R_CITY = "AIRCity";
  @SerializedName(SERIALIZED_NAME_AI_R_CITY)
  private String aiRCity;

  public static final String SERIALIZED_NAME_AI_R_CLASSIFICATION = "AIRClassification";
  @SerializedName(SERIALIZED_NAME_AI_R_CLASSIFICATION)
  private String aiRClassification;

  public static final String SERIALIZED_NAME_AI_R_COMPL_STATUS = "AIRComplStatus";
  @SerializedName(SERIALIZED_NAME_AI_R_COMPL_STATUS)
  private String aiRComplStatus;

  public static final String SERIALIZED_NAME_AI_R_COUNTY = "AIRCounty";
  @SerializedName(SERIALIZED_NAME_AI_R_COUNTY)
  private String aiRCounty;

  public static final String SERIALIZED_NAME_AI_R_DAYS_LAST_EVAL = "AIRDaysLastEval";
  @SerializedName(SERIALIZED_NAME_AI_R_DAYS_LAST_EVAL)
  private String aiRDaysLastEval;

  public static final String SERIALIZED_NAME_AI_R_E_P_A_REGION = "AIREPARegion";
  @SerializedName(SERIALIZED_NAME_AI_R_E_P_A_REGION)
  private String aiREPARegion;

  public static final String SERIALIZED_NAME_AI_R_EVAL_CNT = "AIREvalCnt";
  @SerializedName(SERIALIZED_NAME_AI_R_EVAL_CNT)
  private String aiREvalCnt;

  public static final String SERIALIZED_NAME_AI_R_F_I_P_S_CODE = "AIRFIPSCode";
  @SerializedName(SERIALIZED_NAME_AI_R_F_I_P_S_CODE)
  private String aiRFIPSCode;

  public static final String SERIALIZED_NAME_AI_R_FACILITY_TYPE_CODE = "AIRFacilityTypeCode";
  @SerializedName(SERIALIZED_NAME_AI_R_FACILITY_TYPE_CODE)
  private String aiRFacilityTypeCode;

  public static final String SERIALIZED_NAME_AI_R_FACILITY_TYPE_DESC = "AIRFacilityTypeDesc";
  @SerializedName(SERIALIZED_NAME_AI_R_FACILITY_TYPE_DESC)
  private String aiRFacilityTypeDesc;

  public static final String SERIALIZED_NAME_AI_R_FEA_CNT = "AIRFeaCnt";
  @SerializedName(SERIALIZED_NAME_AI_R_FEA_CNT)
  private String aiRFeaCnt;

  public static final String SERIALIZED_NAME_AI_R_HPV_STATUS = "AIRHpvStatus";
  @SerializedName(SERIALIZED_NAME_AI_R_HPV_STATUS)
  private String aiRHpvStatus;

  public static final String SERIALIZED_NAME_AI_R_I_DS = "AIRIDs";
  @SerializedName(SERIALIZED_NAME_AI_R_I_DS)
  private String aiRIDs;

  public static final String SERIALIZED_NAME_AI_R_IEA_CNT = "AIRIeaCnt";
  @SerializedName(SERIALIZED_NAME_AI_R_IEA_CNT)
  private String aiRIeaCnt;

  public static final String SERIALIZED_NAME_AI_R_INDIAN_CNTRY_FLG = "AIRIndianCntryFlg";
  @SerializedName(SERIALIZED_NAME_AI_R_INDIAN_CNTRY_FLG)
  private String aiRIndianCntryFlg;

  public static final String SERIALIZED_NAME_AI_R_LAST_EVAL_DATE = "AIRLastEvalDate";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_EVAL_DATE)
  private String aiRLastEvalDate;

  public static final String SERIALIZED_NAME_AI_R_LAST_EVAL_DATE_E_P_A = "AIRLastEvalDateEPA";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_EVAL_DATE_E_P_A)
  private String aiRLastEvalDateEPA;

  public static final String SERIALIZED_NAME_AI_R_LAST_EVAL_DATE_STATE = "AIRLastEvalDateState";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_EVAL_DATE_STATE)
  private String aiRLastEvalDateState;

  public static final String SERIALIZED_NAME_AI_R_LAST_FEA_DATE = "AIRLastFeaDate";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_FEA_DATE)
  private String aiRLastFeaDate;

  public static final String SERIALIZED_NAME_AI_R_LAST_FEA_DATE_E_P_A = "AIRLastFeaDateEPA";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_FEA_DATE_E_P_A)
  private String aiRLastFeaDateEPA;

  public static final String SERIALIZED_NAME_AI_R_LAST_FEA_DATE_STATE = "AIRLastFeaDateState";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_FEA_DATE_STATE)
  private String aiRLastFeaDateState;

  public static final String SERIALIZED_NAME_AI_R_LAST_IEA_DATE = "AIRLastIeaDate";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_IEA_DATE)
  private String aiRLastIeaDate;

  public static final String SERIALIZED_NAME_AI_R_LAST_IEA_DATE_E_P_A = "AIRLastIeaDateEPA";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_IEA_DATE_E_P_A)
  private String aiRLastIeaDateEPA;

  public static final String SERIALIZED_NAME_AI_R_LAST_IEA_DATE_STATE = "AIRLastIeaDateState";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_IEA_DATE_STATE)
  private String aiRLastIeaDateState;

  public static final String SERIALIZED_NAME_AI_R_LAST_PENALTY_DATE = "AIRLastPenaltyDate";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_PENALTY_DATE)
  private String aiRLastPenaltyDate;

  public static final String SERIALIZED_NAME_AI_R_LAST_STCK_DATE_E_P_A = "AIRLastStckDateEPA";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_STCK_DATE_E_P_A)
  private String aiRLastStckDateEPA;

  public static final String SERIALIZED_NAME_AI_R_LAST_STCK_DATE_STATE = "AIRLastStckDateState";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_STCK_DATE_STATE)
  private String aiRLastStckDateState;

  public static final String SERIALIZED_NAME_AI_R_LAST_STCK_TEST_DATE = "AIRLastStckTestDate";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_STCK_TEST_DATE)
  private String aiRLastStckTestDate;

  public static final String SERIALIZED_NAME_AI_R_LAST_STCK_TEST_RESULTS = "AIRLastStckTestResults";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_STCK_TEST_RESULTS)
  private String aiRLastStckTestResults;

  public static final String SERIALIZED_NAME_AI_R_LAST_VIOL_DATE = "AIRLastViolDate";
  @SerializedName(SERIALIZED_NAME_AI_R_LAST_VIOL_DATE)
  private String aiRLastViolDate;

  public static final String SERIALIZED_NAME_AI_R_MACTS = "AIRMacts";
  @SerializedName(SERIALIZED_NAME_AI_R_MACTS)
  private String aiRMacts;

  public static final String SERIALIZED_NAME_AI_R_MAJOR_FLAG = "AIRMajorFlag";
  @SerializedName(SERIALIZED_NAME_AI_R_MAJOR_FLAG)
  private String aiRMajorFlag;

  public static final String SERIALIZED_NAME_AI_R_MNTHS_WITH_HPV = "AIRMnthsWithHpv";
  @SerializedName(SERIALIZED_NAME_AI_R_MNTHS_WITH_HPV)
  private String aiRMnthsWithHpv;

  public static final String SERIALIZED_NAME_A_I_R_N_A_I_C_S = "AIRNAICS";
  @SerializedName(SERIALIZED_NAME_A_I_R_N_A_I_C_S)
  private String AIRNAICS;

  public static final String SERIALIZED_NAME_AI_R_NAME = "AIRName";
  @SerializedName(SERIALIZED_NAME_AI_R_NAME)
  private String aiRName;

  public static final String SERIALIZED_NAME_AI_R_NSPS = "AIRNsps";
  @SerializedName(SERIALIZED_NAME_AI_R_NSPS)
  private String aiRNsps;

  public static final String SERIALIZED_NAME_AI_R_NSPSM = "AIRNspsm";
  @SerializedName(SERIALIZED_NAME_AI_R_NSPSM)
  private String aiRNspsm;

  public static final String SERIALIZED_NAME_AI_R_PENALTIES = "AIRPenalties";
  @SerializedName(SERIALIZED_NAME_AI_R_PENALTIES)
  private String aiRPenalties;

  public static final String SERIALIZED_NAME_AI_R_POLL_RECENT_VIOL = "AIRPollRecentViol";
  @SerializedName(SERIALIZED_NAME_AI_R_POLL_RECENT_VIOL)
  private String aiRPollRecentViol;

  public static final String SERIALIZED_NAME_AI_R_PROGRAMS = "AIRPrograms";
  @SerializedName(SERIALIZED_NAME_AI_R_PROGRAMS)
  private String aiRPrograms;

  public static final String SERIALIZED_NAME_AI_R_QTRS_WITH_HPV = "AIRQtrsWithHpv";
  @SerializedName(SERIALIZED_NAME_AI_R_QTRS_WITH_HPV)
  private String aiRQtrsWithHpv;

  public static final String SERIALIZED_NAME_AI_R_QTRS_WITH_VIOL = "AIRQtrsWithViol";
  @SerializedName(SERIALIZED_NAME_AI_R_QTRS_WITH_VIOL)
  private String aiRQtrsWithViol;

  public static final String SERIALIZED_NAME_AI_R_RECENT_VIOL_CNT = "AIRRecentViolCnt";
  @SerializedName(SERIALIZED_NAME_AI_R_RECENT_VIOL_CNT)
  private String aiRRecentViolCnt;

  public static final String SERIALIZED_NAME_AI_R_STACK_TEST5_YR_ALL = "AIRStackTest5YrAll";
  @SerializedName(SERIALIZED_NAME_AI_R_STACK_TEST5_YR_ALL)
  private String aiRStackTest5YrAll;

  public static final String SERIALIZED_NAME_AI_R_STACK_TEST5_YR_FAIL = "AIRStackTest5YrFail";
  @SerializedName(SERIALIZED_NAME_AI_R_STACK_TEST5_YR_FAIL)
  private String aiRStackTest5YrFail;

  public static final String SERIALIZED_NAME_AI_R_STATE = "AIRState";
  @SerializedName(SERIALIZED_NAME_AI_R_STATE)
  private String aiRState;

  public static final String SERIALIZED_NAME_AI_R_STATUS = "AIRStatus";
  @SerializedName(SERIALIZED_NAME_AI_R_STATUS)
  private String aiRStatus;

  public static final String SERIALIZED_NAME_AI_R_STREET = "AIRStreet";
  @SerializedName(SERIALIZED_NAME_AI_R_STREET)
  private String aiRStreet;

  public static final String SERIALIZED_NAME_AI_R_T_R_IBAL_E_P_AIDS = "AIRTRIbalEPAids";
  @SerializedName(SERIALIZED_NAME_AI_R_T_R_IBAL_E_P_AIDS)
  private String aiRTRIbalEPAids;

  public static final String SERIALIZED_NAME_AI_R_T_R_IBAL_NAMES = "AIRTRIbalNames";
  @SerializedName(SERIALIZED_NAME_AI_R_T_R_IBAL_NAMES)
  private String aiRTRIbalNames;

  public static final String SERIALIZED_NAME_AI_R_UNIVERSE = "AIRUniverse";
  @SerializedName(SERIALIZED_NAME_AI_R_UNIVERSE)
  private String aiRUniverse;

  public static final String SERIALIZED_NAME_AI_R_ZIP = "AIRZip";
  @SerializedName(SERIALIZED_NAME_AI_R_ZIP)
  private String aiRZip;

  public static final String SERIALIZED_NAME_ACTIVE_LOWER48 = "ActiveLower48";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LOWER48)
  private String activeLower48;

  public static final String SERIALIZED_NAME_CW_A_I_DS = "CWAIDs";
  @SerializedName(SERIALIZED_NAME_CW_A_I_DS)
  private String cwAIDs;

  public static final String SERIALIZED_NAME_CALCULATED_ACCURACY_METERS = "CalculatedAccuracyMeters";
  @SerializedName(SERIALIZED_NAME_CALCULATED_ACCURACY_METERS)
  private String calculatedAccuracyMeters;

  public static final String SERIALIZED_NAME_CAMD_I_DS = "CamdIDs";
  @SerializedName(SERIALIZED_NAME_CAMD_I_DS)
  private String camdIDs;

  public static final String SERIALIZED_NAME_CENSUS_BLOCK_GROUP = "CensusBlockGroup";
  @SerializedName(SERIALIZED_NAME_CENSUS_BLOCK_GROUP)
  private String censusBlockGroup;

  public static final String SERIALIZED_NAME_CHESAPEAKE_BAY_FLAG = "ChesapeakeBayFlag";
  @SerializedName(SERIALIZED_NAME_CHESAPEAKE_BAY_FLAG)
  private String chesapeakeBayFlag;

  public static final String SERIALIZED_NAME_COLLECTION_METHOD = "CollectionMethod";
  @SerializedName(SERIALIZED_NAME_COLLECTION_METHOD)
  private String collectionMethod;

  public static final String SERIALIZED_NAME_CURR_SV_FLAG = "CurrSvFlag";
  @SerializedName(SERIALIZED_NAME_CURR_SV_FLAG)
  private String currSvFlag;

  public static final String SERIALIZED_NAME_CURR_VIO_FLAG = "CurrVioFlag";
  @SerializedName(SERIALIZED_NAME_CURR_VIO_FLAG)
  private String currVioFlag;

  public static final String SERIALIZED_NAME_EP_A_SYSTEM = "EPASystem";
  @SerializedName(SERIALIZED_NAME_EP_A_SYSTEM)
  private String epASystem;

  public static final String SERIALIZED_NAME_EA5YR_FLAG = "Ea5yrFlag";
  @SerializedName(SERIALIZED_NAME_EA5YR_FLAG)
  private String ea5yrFlag;

  public static final String SERIALIZED_NAME_EIS_I_DS = "EisIDs";
  @SerializedName(SERIALIZED_NAME_EIS_I_DS)
  private String eisIDs;

  public static final String SERIALIZED_NAME_EJSCREEN_FLAG = "EjscreenFlag";
  @SerializedName(SERIALIZED_NAME_EJSCREEN_FLAG)
  private String ejscreenFlag;

  public static final String SERIALIZED_NAME_EJSCREEN_FLAG_US = "EjscreenFlagUs";
  @SerializedName(SERIALIZED_NAME_EJSCREEN_FLAG_US)
  private String ejscreenFlagUs;

  public static final String SERIALIZED_NAME_FAC_CAMD_REPORTER = "FacCamdReporter";
  @SerializedName(SERIALIZED_NAME_FAC_CAMD_REPORTER)
  private String facCamdReporter;

  public static final String SERIALIZED_NAME_FAC_COUNTY_NAME = "FacCountyName";
  @SerializedName(SERIALIZED_NAME_FAC_COUNTY_NAME)
  private String facCountyName;

  public static final String SERIALIZED_NAME_FAC_DERIVED_HUC = "FacDerivedHuc";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_HUC)
  private String facDerivedHuc;

  public static final String SERIALIZED_NAME_FAC_DERIVED_T_R_IBES = "FacDerivedTRIbes";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_T_R_IBES)
  private String facDerivedTRIbes;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D = "FacDerivedWBD";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D)
  private String facDerivedWBD;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D_NAME = "FacDerivedWBDName";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D_NAME)
  private String facDerivedWBDName;

  public static final String SERIALIZED_NAME_FAC_EIS_A_I_R_RELEASES = "FacEisAIRReleases";
  @SerializedName(SERIALIZED_NAME_FAC_EIS_A_I_R_RELEASES)
  private String facEisAIRReleases;

  public static final String SERIALIZED_NAME_FAC_EIS_REPORTER = "FacEisReporter";
  @SerializedName(SERIALIZED_NAME_FAC_EIS_REPORTER)
  private String facEisReporter;

  public static final String SERIALIZED_NAME_FAC_F_I_P_S_CODE = "FacFIPSCode";
  @SerializedName(SERIALIZED_NAME_FAC_F_I_P_S_CODE)
  private String facFIPSCode;

  public static final String SERIALIZED_NAME_FAC_FEDERAL_AGENCY_CODE = "FacFederalAgencyCode";
  @SerializedName(SERIALIZED_NAME_FAC_FEDERAL_AGENCY_CODE)
  private String facFederalAgencyCode;

  public static final String SERIALIZED_NAME_FAC_FEDERAL_AGENCY_NAME = "FacFederalAgencyName";
  @SerializedName(SERIALIZED_NAME_FAC_FEDERAL_AGENCY_NAME)
  private String facFederalAgencyName;

  public static final String SERIALIZED_NAME_FAC_G_H_G_C_O2_RELEASES = "FacGHGCO2Releases";
  @SerializedName(SERIALIZED_NAME_FAC_G_H_G_C_O2_RELEASES)
  private String facGHGCO2Releases;

  public static final String SERIALIZED_NAME_FAC_G_H_G_REPORTER = "FacGHGReporter";
  @SerializedName(SERIALIZED_NAME_FAC_G_H_G_REPORTER)
  private String facGHGReporter;

  public static final String SERIALIZED_NAME_FAC_INDIAN_CNTRY_FLG = "FacIndianCntryFlg";
  @SerializedName(SERIALIZED_NAME_FAC_INDIAN_CNTRY_FLG)
  private String facIndianCntryFlg;

  public static final String SERIALIZED_NAME_FAC_INDIAN_SPATIAL_FLG = "FacIndianSpatialFlg";
  @SerializedName(SERIALIZED_NAME_FAC_INDIAN_SPATIAL_FLG)
  private String facIndianSpatialFlg;

  public static final String SERIALIZED_NAME_FAC_LAT = "FacLat";
  @SerializedName(SERIALIZED_NAME_FAC_LAT)
  private String facLat;

  public static final String SERIALIZED_NAME_FAC_LONG = "FacLong";
  @SerializedName(SERIALIZED_NAME_FAC_LONG)
  private String facLong;

  public static final String SERIALIZED_NAME_FAC_MAP_FLG = "FacMapFlg";
  @SerializedName(SERIALIZED_NAME_FAC_MAP_FLG)
  private String facMapFlg;

  public static final String SERIALIZED_NAME_FAC_MAP_ICON = "FacMapIcon";
  @SerializedName(SERIALIZED_NAME_FAC_MAP_ICON)
  private String facMapIcon;

  public static final String SERIALIZED_NAME_FAC_NAA_FLAG = "FacNaaFlag";
  @SerializedName(SERIALIZED_NAME_FAC_NAA_FLAG)
  private String facNaaFlag;

  public static final String SERIALIZED_NAME_FAC_PERCENT_MINORITY = "FacPercentMinority";
  @SerializedName(SERIALIZED_NAME_FAC_PERCENT_MINORITY)
  private String facPercentMinority;

  public static final String SERIALIZED_NAME_FAC_POPULATION_DENSITY = "FacPopulationDensity";
  @SerializedName(SERIALIZED_NAME_FAC_POPULATION_DENSITY)
  private String facPopulationDensity;

  public static final String SERIALIZED_NAME_FAC_S_I_C_CODES = "FacSICCodes";
  @SerializedName(SERIALIZED_NAME_FAC_S_I_C_CODES)
  private String facSICCodes;

  public static final String SERIALIZED_NAME_FAC_STD_COUNTY_NAME = "FacStdCountyName";
  @SerializedName(SERIALIZED_NAME_FAC_STD_COUNTY_NAME)
  private String facStdCountyName;

  public static final String SERIALIZED_NAME_FAC_T_R_I_A_I_R_RELEASES = "FacTRIAIRReleases";
  @SerializedName(SERIALIZED_NAME_FAC_T_R_I_A_I_R_RELEASES)
  private String facTRIAIRReleases;

  public static final String SERIALIZED_NAME_FAC_T_R_I_CARC_A_I_R_RELEASES = "FacTRICarcAIRReleases";
  @SerializedName(SERIALIZED_NAME_FAC_T_R_I_CARC_A_I_R_RELEASES)
  private String facTRICarcAIRReleases;

  public static final String SERIALIZED_NAME_FAC_T_R_I_HAPS_RELEASES = "FacTRIHapsReleases";
  @SerializedName(SERIALIZED_NAME_FAC_T_R_I_HAPS_RELEASES)
  private String facTRIHapsReleases;

  public static final String SERIALIZED_NAME_FAC_T_R_I_REPORTER = "FacTRIReporter";
  @SerializedName(SERIALIZED_NAME_FAC_T_R_I_REPORTER)
  private String facTRIReporter;

  public static final String SERIALIZED_NAME_FAC_US_MEX_BORDER_FLG = "FacUsMexBorderFlg";
  @SerializedName(SERIALIZED_NAME_FAC_US_MEX_BORDER_FLG)
  private String facUsMexBorderFlg;

  public static final String SERIALIZED_NAME_GH_G_I_DS = "GHGIDs";
  @SerializedName(SERIALIZED_NAME_GH_G_I_DS)
  private String ghGIDs;

  public static final String SERIALIZED_NAME_HAS_POLL_RPT = "HasPollRpt";
  @SerializedName(SERIALIZED_NAME_HAS_POLL_RPT)
  private String hasPollRpt;

  public static final String SERIALIZED_NAME_INFEA5YR_FLAG = "Infea5yrFlag";
  @SerializedName(SERIALIZED_NAME_INFEA5YR_FLAG)
  private String infea5yrFlag;

  public static final String SERIALIZED_NAME_INSP5YR_FLAG = "Insp5yrFlag";
  @SerializedName(SERIALIZED_NAME_INSP5YR_FLAG)
  private String insp5yrFlag;

  public static final String SERIALIZED_NAME_LAST_DATE_PCE = "LastDatePce";
  @SerializedName(SERIALIZED_NAME_LAST_DATE_PCE)
  private String lastDatePce;

  public static final String SERIALIZED_NAME_LAST_DATE_PCE_E_P_A = "LastDatePceEPA";
  @SerializedName(SERIALIZED_NAME_LAST_DATE_PCE_E_P_A)
  private String lastDatePceEPA;

  public static final String SERIALIZED_NAME_LAST_DATE_PCE_STA = "LastDatePceSta";
  @SerializedName(SERIALIZED_NAME_LAST_DATE_PCE_STA)
  private String lastDatePceSta;

  public static final String SERIALIZED_NAME_LOCAL_CONTROL_REGION_CODE = "LocalControlRegionCode";
  @SerializedName(SERIALIZED_NAME_LOCAL_CONTROL_REGION_CODE)
  private String localControlRegionCode;

  public static final String SERIALIZED_NAME_LOCAL_CONTROL_REGION_NAME = "LocalControlRegionName";
  @SerializedName(SERIALIZED_NAME_LOCAL_CONTROL_REGION_NAME)
  private String localControlRegionName;

  public static final String SERIALIZED_NAME_LOWER48 = "Lower48";
  @SerializedName(SERIALIZED_NAME_LOWER48)
  private String lower48;

  public static final String SERIALIZED_NAME_MAINT_POLLUTANTS_NAA = "MaintPollutantsNaa";
  @SerializedName(SERIALIZED_NAME_MAINT_POLLUTANTS_NAA)
  private String maintPollutantsNaa;

  public static final String SERIALIZED_NAME_MAINT_STANDARDS_NAA = "MaintStandardsNaa";
  @SerializedName(SERIALIZED_NAME_MAINT_STANDARDS_NAA)
  private String maintStandardsNaa;

  public static final String SERIALIZED_NAME_MAINT_STATUS_NAA = "MaintStatusNaa";
  @SerializedName(SERIALIZED_NAME_MAINT_STATUS_NAA)
  private String maintStatusNaa;

  public static final String SERIALIZED_NAME_MAP = "Map";
  @SerializedName(SERIALIZED_NAME_MAP)
  private String map;

  public static final String SERIALIZED_NAME_MAX_PCTILE_US = "MaxPctileUs";
  @SerializedName(SERIALIZED_NAME_MAX_PCTILE_US)
  private String maxPctileUs;

  public static final String SERIALIZED_NAME_MAX_SCORE = "MaxScore";
  @SerializedName(SERIALIZED_NAME_MAX_SCORE)
  private String maxScore;

  public static final String SERIALIZED_NAME_NA_POLLUTANTS_NAA = "NaPollutantsNaa";
  @SerializedName(SERIALIZED_NAME_NA_POLLUTANTS_NAA)
  private String naPollutantsNaa;

  public static final String SERIALIZED_NAME_NA_STANDARDS_NAA = "NaStandardsNaa";
  @SerializedName(SERIALIZED_NAME_NA_STANDARDS_NAA)
  private String naStandardsNaa;

  public static final String SERIALIZED_NAME_NA_STATUS_NAA = "NaStatusNaa";
  @SerializedName(SERIALIZED_NAME_NA_STATUS_NAA)
  private String naStatusNaa;

  public static final String SERIALIZED_NAME_NAA_CATEGORIES = "NaaCategories";
  @SerializedName(SERIALIZED_NAME_NAA_CATEGORIES)
  private String naaCategories;

  public static final String SERIALIZED_NAME_NAA_POLLUTANTS = "NaaPollutants";
  @SerializedName(SERIALIZED_NAME_NAA_POLLUTANTS)
  private String naaPollutants;

  public static final String SERIALIZED_NAME_OBJECT_ID = "ObjectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_OTHER_PERMIT_I_DS = "OtherPermitIDs";
  @SerializedName(SERIALIZED_NAME_OTHER_PERMIT_I_DS)
  private String otherPermitIDs;

  public static final String SERIALIZED_NAME_OVER80_COUNT_US = "Over80CountUs";
  @SerializedName(SERIALIZED_NAME_OVER80_COUNT_US)
  private String over80CountUs;

  public static final String SERIALIZED_NAME_PCTILE_CANCER_US = "PctileCancerUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_CANCER_US)
  private String pctileCancerUs;

  public static final String SERIALIZED_NAME_PCTILE_DPM_US = "PctileDpmUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_DPM_US)
  private String pctileDpmUs;

  public static final String SERIALIZED_NAME_PCTILE_O3_US = "PctileO3Us";
  @SerializedName(SERIALIZED_NAME_PCTILE_O3_US)
  private String pctileO3Us;

  public static final String SERIALIZED_NAME_PCTILE_PCTPRE1960_US = "PctilePctpre1960Us";
  @SerializedName(SERIALIZED_NAME_PCTILE_PCTPRE1960_US)
  private String pctilePctpre1960Us;

  public static final String SERIALIZED_NAME_PCTILE_PM_US = "PctilePmUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PM_US)
  private String pctilePmUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_N_P_D_E_S_US = "PctileProximityNPDESUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_N_P_D_E_S_US)
  private String pctileProximityNPDESUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_NPL_US = "PctileProximityNplUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_NPL_US)
  private String pctileProximityNplUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_RMP_US = "PctileProximityRmpUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_RMP_US)
  private String pctileProximityRmpUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_TSDF_US = "PctileProximityTsdfUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_TSDF_US)
  private String pctileProximityTsdfUs;

  public static final String SERIALIZED_NAME_PCTILE_RESP_US = "PctileRespUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_RESP_US)
  private String pctileRespUs;

  public static final String SERIALIZED_NAME_PCTILE_TRAFFIC_SCORE_US = "PctileTrafficScoreUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_TRAFFIC_SCORE_US)
  private String pctileTrafficScoreUs;

  public static final String SERIALIZED_NAME_RC_R_A_I_DS = "RCRAIDs";
  @SerializedName(SERIALIZED_NAME_RC_R_A_I_DS)
  private String rcRAIDs;

  public static final String SERIALIZED_NAME_REFERENCE_POINT = "ReferencePoint";
  @SerializedName(SERIALIZED_NAME_REFERENCE_POINT)
  private String referencePoint;

  public static final String SERIALIZED_NAME_REGISTRY_I_D = "RegistryID";
  @SerializedName(SERIALIZED_NAME_REGISTRY_I_D)
  private String registryID;

  public static final String SERIALIZED_NAME_RMP_I_DS = "RmpIDs";
  @SerializedName(SERIALIZED_NAME_RMP_I_DS)
  private String rmpIDs;

  public static final String SERIALIZED_NAME_SD_W_A_I_DS = "SDWAIDs";
  @SerializedName(SERIALIZED_NAME_SD_W_A_I_DS)
  private String sdWAIDs;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private String score;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_STATUTE = "Statute";
  @SerializedName(SERIALIZED_NAME_STATUTE)
  private String statute;

  public static final String SERIALIZED_NAME_TR_I_I_DS = "TRIIDs";
  @SerializedName(SERIALIZED_NAME_TR_I_I_DS)
  private String trIIDs;

  public static final String SERIALIZED_NAME_TR_IBAL_FLAG = "TRIbalFlag";
  @SerializedName(SERIALIZED_NAME_TR_IBAL_FLAG)
  private String trIbalFlag;

  public static final String SERIALIZED_NAME_VIOL_FLAG = "ViolFlag";
  @SerializedName(SERIALIZED_NAME_VIOL_FLAG)
  private String violFlag;

  public static final String SERIALIZED_NAME_WEB_DOCS = "WebDocs";
  @SerializedName(SERIALIZED_NAME_WEB_DOCS)
  private String webDocs;

  public Air06() {
  }

  public Air06 aiR3yrComplQtrsHistory(String aiR3yrComplQtrsHistory) {
    this.aiR3yrComplQtrsHistory = aiR3yrComplQtrsHistory;
    return this;
  }

  /**
   * The facility&#39;s 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined
   * @return aiR3yrComplQtrsHistory
   */
  @javax.annotation.Nonnull
  public String getAiR3yrComplQtrsHistory() {
    return aiR3yrComplQtrsHistory;
  }

  public void setAiR3yrComplQtrsHistory(String aiR3yrComplQtrsHistory) {
    this.aiR3yrComplQtrsHistory = aiR3yrComplQtrsHistory;
  }


  public Air06 aiRCaseIDs(String aiRCaseIDs) {
    this.aiRCaseIDs = aiRCaseIDs;
    return this;
  }

  /**
   * Space-delimited list of AIR cases associated with the facility.
   * @return aiRCaseIDs
   */
  @javax.annotation.Nonnull
  public String getAiRCaseIDs() {
    return aiRCaseIDs;
  }

  public void setAiRCaseIDs(String aiRCaseIDs) {
    this.aiRCaseIDs = aiRCaseIDs;
  }


  public Air06 aiRCity(String aiRCity) {
    this.aiRCity = aiRCity;
    return this;
  }

  /**
   * The city where the AIR facility is located.
   * @return aiRCity
   */
  @javax.annotation.Nonnull
  public String getAiRCity() {
    return aiRCity;
  }

  public void setAiRCity(String aiRCity) {
    this.aiRCity = aiRCity;
  }


  public Air06 aiRClassification(String aiRClassification) {
    this.aiRClassification = aiRClassification;
    return this;
  }

  /**
   * Get aiRClassification
   * @return aiRClassification
   */
  @javax.annotation.Nonnull
  public String getAiRClassification() {
    return aiRClassification;
  }

  public void setAiRClassification(String aiRClassification) {
    this.aiRClassification = aiRClassification;
  }


  public Air06 aiRComplStatus(String aiRComplStatus) {
    this.aiRComplStatus = aiRComplStatus;
    return this;
  }

  /**
   * The facility&#39;s recent violation status under the Clean Air Act.
   * @return aiRComplStatus
   */
  @javax.annotation.Nonnull
  public String getAiRComplStatus() {
    return aiRComplStatus;
  }

  public void setAiRComplStatus(String aiRComplStatus) {
    this.aiRComplStatus = aiRComplStatus;
  }


  public Air06 aiRCounty(String aiRCounty) {
    this.aiRCounty = aiRCounty;
    return this;
  }

  /**
   * The name of the county where the AIR facility is located.
   * @return aiRCounty
   */
  @javax.annotation.Nonnull
  public String getAiRCounty() {
    return aiRCounty;
  }

  public void setAiRCounty(String aiRCounty) {
    this.aiRCounty = aiRCounty;
  }


  public Air06 aiRDaysLastEval(String aiRDaysLastEval) {
    this.aiRDaysLastEval = aiRDaysLastEval;
    return this;
  }

  /**
   * The number of days since the most recent compliance evaluation of the facility.
   * @return aiRDaysLastEval
   */
  @javax.annotation.Nonnull
  public String getAiRDaysLastEval() {
    return aiRDaysLastEval;
  }

  public void setAiRDaysLastEval(String aiRDaysLastEval) {
    this.aiRDaysLastEval = aiRDaysLastEval;
  }


  public Air06 aiREPARegion(String aiREPARegion) {
    this.aiREPARegion = aiREPARegion;
    return this;
  }

  /**
   * The EPA region where the AIR facility is located.
   * @return aiREPARegion
   */
  @javax.annotation.Nonnull
  public String getAiREPARegion() {
    return aiREPARegion;
  }

  public void setAiREPARegion(String aiREPARegion) {
    this.aiREPARegion = aiREPARegion;
  }


  public Air06 aiREvalCnt(String aiREvalCnt) {
    this.aiREvalCnt = aiREvalCnt;
    return this;
  }

  /**
   * The number of compliance evaluations, under the Clean Air Act, occurring at the facility within the last five years.
   * @return aiREvalCnt
   */
  @javax.annotation.Nonnull
  public String getAiREvalCnt() {
    return aiREvalCnt;
  }

  public void setAiREvalCnt(String aiREvalCnt) {
    this.aiREvalCnt = aiREvalCnt;
  }


  public Air06 aiRFIPSCode(String aiRFIPSCode) {
    this.aiRFIPSCode = aiRFIPSCode;
    return this;
  }

  /**
   * A 5 digit combination of the 2 digit Federal Information Processing Standards (FIPS) code for the state and the 3 digit FIPS code of the county that a facility is located in.
   * @return aiRFIPSCode
   */
  @javax.annotation.Nonnull
  public String getAiRFIPSCode() {
    return aiRFIPSCode;
  }

  public void setAiRFIPSCode(String aiRFIPSCode) {
    this.aiRFIPSCode = aiRFIPSCode;
  }


  public Air06 aiRFacilityTypeCode(String aiRFacilityTypeCode) {
    this.aiRFacilityTypeCode = aiRFacilityTypeCode;
    return this;
  }

  /**
   * A three-character code indicating if plant is government facility. COR - Corporation CNG - County Government DIS - District FDF - Federal Facility (U.S. Government) GOC - GOCO (Gov Owned/Contractor Operated) IND - Individual MXO - Mixed Ownership (e.g., Public/Private) MWD - Municipal or Water District CTG - Municipality NON - Non-Government POF - Privately Owned Facility SDT - School District STF - State Government TRB - Tribal Government UNK - Unknown
   * @return aiRFacilityTypeCode
   */
  @javax.annotation.Nonnull
  public String getAiRFacilityTypeCode() {
    return aiRFacilityTypeCode;
  }

  public void setAiRFacilityTypeCode(String aiRFacilityTypeCode) {
    this.aiRFacilityTypeCode = aiRFacilityTypeCode;
  }


  public Air06 aiRFacilityTypeDesc(String aiRFacilityTypeDesc) {
    this.aiRFacilityTypeDesc = aiRFacilityTypeDesc;
    return this;
  }

  /**
   * Get aiRFacilityTypeDesc
   * @return aiRFacilityTypeDesc
   */
  @javax.annotation.Nonnull
  public String getAiRFacilityTypeDesc() {
    return aiRFacilityTypeDesc;
  }

  public void setAiRFacilityTypeDesc(String aiRFacilityTypeDesc) {
    this.aiRFacilityTypeDesc = aiRFacilityTypeDesc;
  }


  public Air06 aiRFeaCnt(String aiRFeaCnt) {
    this.aiRFeaCnt = aiRFeaCnt;
    return this;
  }

  /**
   * The total number of formal enforcement actions taken against the facility within the last five years.
   * @return aiRFeaCnt
   */
  @javax.annotation.Nonnull
  public String getAiRFeaCnt() {
    return aiRFeaCnt;
  }

  public void setAiRFeaCnt(String aiRFeaCnt) {
    this.aiRFeaCnt = aiRFeaCnt;
  }


  public Air06 aiRHpvStatus(String aiRHpvStatus) {
    this.aiRHpvStatus = aiRHpvStatus;
    return this;
  }

  /**
   * Indicates whether the facility currently has an unresolved High Priority Violation (HPV) under the Clean Air Act.
   * @return aiRHpvStatus
   */
  @javax.annotation.Nonnull
  public String getAiRHpvStatus() {
    return aiRHpvStatus;
  }

  public void setAiRHpvStatus(String aiRHpvStatus) {
    this.aiRHpvStatus = aiRHpvStatus;
  }


  public Air06 aiRIDs(String aiRIDs) {
    this.aiRIDs = aiRIDs;
    return this;
  }

  /**
   * Air Facility System (AFS) ID.
   * @return aiRIDs
   */
  @javax.annotation.Nonnull
  public String getAiRIDs() {
    return aiRIDs;
  }

  public void setAiRIDs(String aiRIDs) {
    this.aiRIDs = aiRIDs;
  }


  public Air06 aiRIeaCnt(String aiRIeaCnt) {
    this.aiRIeaCnt = aiRIeaCnt;
    return this;
  }

  /**
   * The total number of informal enforcement actions taken against the facility within the last five years.
   * @return aiRIeaCnt
   */
  @javax.annotation.Nonnull
  public String getAiRIeaCnt() {
    return aiRIeaCnt;
  }

  public void setAiRIeaCnt(String aiRIeaCnt) {
    this.aiRIeaCnt = aiRIeaCnt;
  }


  public Air06 aiRIndianCntryFlg(String aiRIndianCntryFlg) {
    this.aiRIndianCntryFlg = aiRIndianCntryFlg;
    return this;
  }

  /**
   * Flag indicating whether the AIR facility is located in Indian country.
   * @return aiRIndianCntryFlg
   */
  @javax.annotation.Nonnull
  public String getAiRIndianCntryFlg() {
    return aiRIndianCntryFlg;
  }

  public void setAiRIndianCntryFlg(String aiRIndianCntryFlg) {
    this.aiRIndianCntryFlg = aiRIndianCntryFlg;
  }


  public Air06 aiRLastEvalDate(String aiRLastEvalDate) {
    this.aiRLastEvalDate = aiRLastEvalDate;
    return this;
  }

  /**
   * The date on which the most recent Full Compliance Evaluation (FCE) of the facility by EPA or a state agency was completed.
   * @return aiRLastEvalDate
   */
  @javax.annotation.Nonnull
  public String getAiRLastEvalDate() {
    return aiRLastEvalDate;
  }

  public void setAiRLastEvalDate(String aiRLastEvalDate) {
    this.aiRLastEvalDate = aiRLastEvalDate;
  }


  public Air06 aiRLastEvalDateEPA(String aiRLastEvalDateEPA) {
    this.aiRLastEvalDateEPA = aiRLastEvalDateEPA;
    return this;
  }

  /**
   * The last Air Inspection Date performed by EPA.
   * @return aiRLastEvalDateEPA
   */
  @javax.annotation.Nonnull
  public String getAiRLastEvalDateEPA() {
    return aiRLastEvalDateEPA;
  }

  public void setAiRLastEvalDateEPA(String aiRLastEvalDateEPA) {
    this.aiRLastEvalDateEPA = aiRLastEvalDateEPA;
  }


  public Air06 aiRLastEvalDateState(String aiRLastEvalDateState) {
    this.aiRLastEvalDateState = aiRLastEvalDateState;
    return this;
  }

  /**
   * The last Air Inspection Date performed by State or local authorities.
   * @return aiRLastEvalDateState
   */
  @javax.annotation.Nonnull
  public String getAiRLastEvalDateState() {
    return aiRLastEvalDateState;
  }

  public void setAiRLastEvalDateState(String aiRLastEvalDateState) {
    this.aiRLastEvalDateState = aiRLastEvalDateState;
  }


  public Air06 aiRLastFeaDate(String aiRLastFeaDate) {
    this.aiRLastFeaDate = aiRLastFeaDate;
    return this;
  }

  /**
   * The effective date of the most recent listed formal enforcement action taken against the facility.
   * @return aiRLastFeaDate
   */
  @javax.annotation.Nonnull
  public String getAiRLastFeaDate() {
    return aiRLastFeaDate;
  }

  public void setAiRLastFeaDate(String aiRLastFeaDate) {
    this.aiRLastFeaDate = aiRLastFeaDate;
  }


  public Air06 aiRLastFeaDateEPA(String aiRLastFeaDateEPA) {
    this.aiRLastFeaDateEPA = aiRLastFeaDateEPA;
    return this;
  }

  /**
   * The last Air Formal Enforcement Action Date take by EPA.
   * @return aiRLastFeaDateEPA
   */
  @javax.annotation.Nonnull
  public String getAiRLastFeaDateEPA() {
    return aiRLastFeaDateEPA;
  }

  public void setAiRLastFeaDateEPA(String aiRLastFeaDateEPA) {
    this.aiRLastFeaDateEPA = aiRLastFeaDateEPA;
  }


  public Air06 aiRLastFeaDateState(String aiRLastFeaDateState) {
    this.aiRLastFeaDateState = aiRLastFeaDateState;
    return this;
  }

  /**
   * The last Air Formal Enforcement Action Date take by State or Local authorities.
   * @return aiRLastFeaDateState
   */
  @javax.annotation.Nonnull
  public String getAiRLastFeaDateState() {
    return aiRLastFeaDateState;
  }

  public void setAiRLastFeaDateState(String aiRLastFeaDateState) {
    this.aiRLastFeaDateState = aiRLastFeaDateState;
  }


  public Air06 aiRLastIeaDate(String aiRLastIeaDate) {
    this.aiRLastIeaDate = aiRLastIeaDate;
    return this;
  }

  /**
   * The effective date of the most recent listed informal enforcement action taken against the facility.
   * @return aiRLastIeaDate
   */
  @javax.annotation.Nonnull
  public String getAiRLastIeaDate() {
    return aiRLastIeaDate;
  }

  public void setAiRLastIeaDate(String aiRLastIeaDate) {
    this.aiRLastIeaDate = aiRLastIeaDate;
  }


  public Air06 aiRLastIeaDateEPA(String aiRLastIeaDateEPA) {
    this.aiRLastIeaDateEPA = aiRLastIeaDateEPA;
    return this;
  }

  /**
   * The effective date of the most recent listed informal enforcement action taken against the facility by EPA.
   * @return aiRLastIeaDateEPA
   */
  @javax.annotation.Nonnull
  public String getAiRLastIeaDateEPA() {
    return aiRLastIeaDateEPA;
  }

  public void setAiRLastIeaDateEPA(String aiRLastIeaDateEPA) {
    this.aiRLastIeaDateEPA = aiRLastIeaDateEPA;
  }


  public Air06 aiRLastIeaDateState(String aiRLastIeaDateState) {
    this.aiRLastIeaDateState = aiRLastIeaDateState;
    return this;
  }

  /**
   * The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.
   * @return aiRLastIeaDateState
   */
  @javax.annotation.Nonnull
  public String getAiRLastIeaDateState() {
    return aiRLastIeaDateState;
  }

  public void setAiRLastIeaDateState(String aiRLastIeaDateState) {
    this.aiRLastIeaDateState = aiRLastIeaDateState;
  }


  public Air06 aiRLastPenaltyDate(String aiRLastPenaltyDate) {
    this.aiRLastPenaltyDate = aiRLastPenaltyDate;
    return this;
  }

  /**
   * Indicates the date on which the most recent assessed (or final) penalty was taken against the facility for AIR.
   * @return aiRLastPenaltyDate
   */
  @javax.annotation.Nonnull
  public String getAiRLastPenaltyDate() {
    return aiRLastPenaltyDate;
  }

  public void setAiRLastPenaltyDate(String aiRLastPenaltyDate) {
    this.aiRLastPenaltyDate = aiRLastPenaltyDate;
  }


  public Air06 aiRLastStckDateEPA(String aiRLastStckDateEPA) {
    this.aiRLastStckDateEPA = aiRLastStckDateEPA;
    return this;
  }

  /**
   * The date on which the most recent stack test by EPA occurred.
   * @return aiRLastStckDateEPA
   */
  @javax.annotation.Nonnull
  public String getAiRLastStckDateEPA() {
    return aiRLastStckDateEPA;
  }

  public void setAiRLastStckDateEPA(String aiRLastStckDateEPA) {
    this.aiRLastStckDateEPA = aiRLastStckDateEPA;
  }


  public Air06 aiRLastStckDateState(String aiRLastStckDateState) {
    this.aiRLastStckDateState = aiRLastStckDateState;
    return this;
  }

  /**
   * The date on which the most recent stack test by a state agency occurred.
   * @return aiRLastStckDateState
   */
  @javax.annotation.Nonnull
  public String getAiRLastStckDateState() {
    return aiRLastStckDateState;
  }

  public void setAiRLastStckDateState(String aiRLastStckDateState) {
    this.aiRLastStckDateState = aiRLastStckDateState;
  }


  public Air06 aiRLastStckTestDate(String aiRLastStckTestDate) {
    this.aiRLastStckTestDate = aiRLastStckTestDate;
    return this;
  }

  /**
   * The date on which the most recent stack test occurred.
   * @return aiRLastStckTestDate
   */
  @javax.annotation.Nonnull
  public String getAiRLastStckTestDate() {
    return aiRLastStckTestDate;
  }

  public void setAiRLastStckTestDate(String aiRLastStckTestDate) {
    this.aiRLastStckTestDate = aiRLastStckTestDate;
  }


  public Air06 aiRLastStckTestResults(String aiRLastStckTestResults) {
    this.aiRLastStckTestResults = aiRLastStckTestResults;
    return this;
  }

  /**
   * The result of the most recent stack test (Pass, Fail, Pending, or Blank).
   * @return aiRLastStckTestResults
   */
  @javax.annotation.Nonnull
  public String getAiRLastStckTestResults() {
    return aiRLastStckTestResults;
  }

  public void setAiRLastStckTestResults(String aiRLastStckTestResults) {
    this.aiRLastStckTestResults = aiRLastStckTestResults;
  }


  public Air06 aiRLastViolDate(String aiRLastViolDate) {
    this.aiRLastViolDate = aiRLastViolDate;
    return this;
  }

  /**
   * The date on which the most recent violation was reported.
   * @return aiRLastViolDate
   */
  @javax.annotation.Nonnull
  public String getAiRLastViolDate() {
    return aiRLastViolDate;
  }

  public void setAiRLastViolDate(String aiRLastViolDate) {
    this.aiRLastViolDate = aiRLastViolDate;
  }


  public Air06 aiRMacts(String aiRMacts) {
    this.aiRMacts = aiRMacts;
    return this;
  }

  /**
   * The Maximum Achievable Control Technology (MACT) Subpart associated with the facility.
   * @return aiRMacts
   */
  @javax.annotation.Nonnull
  public String getAiRMacts() {
    return aiRMacts;
  }

  public void setAiRMacts(String aiRMacts) {
    this.aiRMacts = aiRMacts;
  }


  public Air06 aiRMajorFlag(String aiRMajorFlag) {
    this.aiRMajorFlag = aiRMajorFlag;
    return this;
  }

  /**
   * Indicated whether the facility is designated as a major facilitiy.
   * @return aiRMajorFlag
   */
  @javax.annotation.Nonnull
  public String getAiRMajorFlag() {
    return aiRMajorFlag;
  }

  public void setAiRMajorFlag(String aiRMajorFlag) {
    this.aiRMajorFlag = aiRMajorFlag;
  }


  public Air06 aiRMnthsWithHpv(String aiRMnthsWithHpv) {
    this.aiRMnthsWithHpv = aiRMnthsWithHpv;
    return this;
  }

  /**
   * The number of months in the last three years in which the permit or site is considered in High Priority Violation (HPV) status
   * @return aiRMnthsWithHpv
   */
  @javax.annotation.Nonnull
  public String getAiRMnthsWithHpv() {
    return aiRMnthsWithHpv;
  }

  public void setAiRMnthsWithHpv(String aiRMnthsWithHpv) {
    this.aiRMnthsWithHpv = aiRMnthsWithHpv;
  }


  public Air06 AIRNAICS(String AIRNAICS) {
    this.AIRNAICS = AIRNAICS;
    return this;
  }

  /**
   * The facility’s or permit&#39;s primary North American Industry Classification System (NAICS) Code.
   * @return AIRNAICS
   */
  @javax.annotation.Nonnull
  public String getAIRNAICS() {
    return AIRNAICS;
  }

  public void setAIRNAICS(String AIRNAICS) {
    this.AIRNAICS = AIRNAICS;
  }


  public Air06 aiRName(String aiRName) {
    this.aiRName = aiRName;
    return this;
  }

  /**
   * The name of the AIR Facility.
   * @return aiRName
   */
  @javax.annotation.Nonnull
  public String getAiRName() {
    return aiRName;
  }

  public void setAiRName(String aiRName) {
    this.aiRName = aiRName;
  }


  public Air06 aiRNsps(String aiRNsps) {
    this.aiRNsps = aiRNsps;
    return this;
  }

  /**
   * The New Source Performance Standards (NSPS) Subpart associated with the facility.
   * @return aiRNsps
   */
  @javax.annotation.Nonnull
  public String getAiRNsps() {
    return aiRNsps;
  }

  public void setAiRNsps(String aiRNsps) {
    this.aiRNsps = aiRNsps;
  }


  public Air06 aiRNspsm(String aiRNspsm) {
    this.aiRNspsm = aiRNspsm;
    return this;
  }

  /**
   * The Non-Major New Source Performance Standards (NSPS) Subpart associated with the facility.
   * @return aiRNspsm
   */
  @javax.annotation.Nonnull
  public String getAiRNspsm() {
    return aiRNspsm;
  }

  public void setAiRNspsm(String aiRNspsm) {
    this.aiRNspsm = aiRNspsm;
  }


  public Air06 aiRPenalties(String aiRPenalties) {
    this.aiRPenalties = aiRPenalties;
    return this;
  }

  /**
   * The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act. This value only includes penalties that have been entered in the national program database, ICIS-Air.
   * @return aiRPenalties
   */
  @javax.annotation.Nonnull
  public String getAiRPenalties() {
    return aiRPenalties;
  }

  public void setAiRPenalties(String aiRPenalties) {
    this.aiRPenalties = aiRPenalties;
  }


  public Air06 aiRPollRecentViol(String aiRPollRecentViol) {
    this.aiRPollRecentViol = aiRPollRecentViol;
    return this;
  }

  /**
   * The names of pollutants or pollutant categories with violations reported in the last year.
   * @return aiRPollRecentViol
   */
  @javax.annotation.Nonnull
  public String getAiRPollRecentViol() {
    return aiRPollRecentViol;
  }

  public void setAiRPollRecentViol(String aiRPollRecentViol) {
    this.aiRPollRecentViol = aiRPollRecentViol;
  }


  public Air06 aiRPrograms(String aiRPrograms) {
    this.aiRPrograms = aiRPrograms;
    return this;
  }

  /**
   * Comma-delimited list of AIR programs.
   * @return aiRPrograms
   */
  @javax.annotation.Nonnull
  public String getAiRPrograms() {
    return aiRPrograms;
  }

  public void setAiRPrograms(String aiRPrograms) {
    this.aiRPrograms = aiRPrograms;
  }


  public Air06 aiRQtrsWithHpv(String aiRQtrsWithHpv) {
    this.aiRQtrsWithHpv = aiRQtrsWithHpv;
    return this;
  }

  /**
   * The number of quarters in the last three years in which the permit or site is considered in High Priority Violation (HPV) status.
   * @return aiRQtrsWithHpv
   */
  @javax.annotation.Nonnull
  public String getAiRQtrsWithHpv() {
    return aiRQtrsWithHpv;
  }

  public void setAiRQtrsWithHpv(String aiRQtrsWithHpv) {
    this.aiRQtrsWithHpv = aiRQtrsWithHpv;
  }


  public Air06 aiRQtrsWithViol(String aiRQtrsWithViol) {
    this.aiRQtrsWithViol = aiRQtrsWithViol;
    return this;
  }

  /**
   * The number of quarters in the last three years in which the permit or site has had unresolved violation(s) reported.
   * @return aiRQtrsWithViol
   */
  @javax.annotation.Nonnull
  public String getAiRQtrsWithViol() {
    return aiRQtrsWithViol;
  }

  public void setAiRQtrsWithViol(String aiRQtrsWithViol) {
    this.aiRQtrsWithViol = aiRQtrsWithViol;
  }


  public Air06 aiRRecentViolCnt(String aiRRecentViolCnt) {
    this.aiRRecentViolCnt = aiRRecentViolCnt;
    return this;
  }

  /**
   * The number of violations reported in the last year.
   * @return aiRRecentViolCnt
   */
  @javax.annotation.Nonnull
  public String getAiRRecentViolCnt() {
    return aiRRecentViolCnt;
  }

  public void setAiRRecentViolCnt(String aiRRecentViolCnt) {
    this.aiRRecentViolCnt = aiRRecentViolCnt;
  }


  public Air06 aiRStackTest5YrAll(String aiRStackTest5YrAll) {
    this.aiRStackTest5YrAll = aiRStackTest5YrAll;
    return this;
  }

  /**
   * Get aiRStackTest5YrAll
   * @return aiRStackTest5YrAll
   */
  @javax.annotation.Nonnull
  public String getAiRStackTest5YrAll() {
    return aiRStackTest5YrAll;
  }

  public void setAiRStackTest5YrAll(String aiRStackTest5YrAll) {
    this.aiRStackTest5YrAll = aiRStackTest5YrAll;
  }


  public Air06 aiRStackTest5YrFail(String aiRStackTest5YrFail) {
    this.aiRStackTest5YrFail = aiRStackTest5YrFail;
    return this;
  }

  /**
   * Get aiRStackTest5YrFail
   * @return aiRStackTest5YrFail
   */
  @javax.annotation.Nonnull
  public String getAiRStackTest5YrFail() {
    return aiRStackTest5YrFail;
  }

  public void setAiRStackTest5YrFail(String aiRStackTest5YrFail) {
    this.aiRStackTest5YrFail = aiRStackTest5YrFail;
  }


  public Air06 aiRState(String aiRState) {
    this.aiRState = aiRState;
    return this;
  }

  /**
   * The state where the AIR facility is located.
   * @return aiRState
   */
  @javax.annotation.Nonnull
  public String getAiRState() {
    return aiRState;
  }

  public void setAiRState(String aiRState) {
    this.aiRState = aiRState;
  }


  public Air06 aiRStatus(String aiRStatus) {
    this.aiRStatus = aiRStatus;
    return this;
  }

  /**
   * The status of the AIR facility location.
   * @return aiRStatus
   */
  @javax.annotation.Nonnull
  public String getAiRStatus() {
    return aiRStatus;
  }

  public void setAiRStatus(String aiRStatus) {
    this.aiRStatus = aiRStatus;
  }


  public Air06 aiRStreet(String aiRStreet) {
    this.aiRStreet = aiRStreet;
    return this;
  }

  /**
   * The street address of the AIR facility location.
   * @return aiRStreet
   */
  @javax.annotation.Nonnull
  public String getAiRStreet() {
    return aiRStreet;
  }

  public void setAiRStreet(String aiRStreet) {
    this.aiRStreet = aiRStreet;
  }


  public Air06 aiRTRIbalEPAids(String aiRTRIbalEPAids) {
    this.aiRTRIbalEPAids = aiRTRIbalEPAids;
    return this;
  }

  /**
   * The EPA Tribal or Native Alaskan Village Identifier for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.
   * @return aiRTRIbalEPAids
   */
  @javax.annotation.Nonnull
  public String getAiRTRIbalEPAids() {
    return aiRTRIbalEPAids;
  }

  public void setAiRTRIbalEPAids(String aiRTRIbalEPAids) {
    this.aiRTRIbalEPAids = aiRTRIbalEPAids;
  }


  public Air06 aiRTRIbalNames(String aiRTRIbalNames) {
    this.aiRTRIbalNames = aiRTRIbalNames;
    return this;
  }

  /**
   * The EPA Tribal or Native Alaskan Village Name for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.
   * @return aiRTRIbalNames
   */
  @javax.annotation.Nonnull
  public String getAiRTRIbalNames() {
    return aiRTRIbalNames;
  }

  public void setAiRTRIbalNames(String aiRTRIbalNames) {
    this.aiRTRIbalNames = aiRTRIbalNames;
  }


  public Air06 aiRUniverse(String aiRUniverse) {
    this.aiRUniverse = aiRUniverse;
    return this;
  }

  /**
   * The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable source include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement action, or included on a Compliance Monitoring Strategy plan.
   * @return aiRUniverse
   */
  @javax.annotation.Nonnull
  public String getAiRUniverse() {
    return aiRUniverse;
  }

  public void setAiRUniverse(String aiRUniverse) {
    this.aiRUniverse = aiRUniverse;
  }


  public Air06 aiRZip(String aiRZip) {
    this.aiRZip = aiRZip;
    return this;
  }

  /**
   * The five-digit zip code of the AIR facility.
   * @return aiRZip
   */
  @javax.annotation.Nonnull
  public String getAiRZip() {
    return aiRZip;
  }

  public void setAiRZip(String aiRZip) {
    this.aiRZip = aiRZip;
  }


  public Air06 activeLower48(String activeLower48) {
    this.activeLower48 = activeLower48;
    return this;
  }

  /**
   * A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.
   * @return activeLower48
   */
  @javax.annotation.Nonnull
  public String getActiveLower48() {
    return activeLower48;
  }

  public void setActiveLower48(String activeLower48) {
    this.activeLower48 = activeLower48;
  }


  public Air06 cwAIDs(String cwAIDs) {
    this.cwAIDs = cwAIDs;
    return this;
  }

  /**
   * A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.
   * @return cwAIDs
   */
  @javax.annotation.Nonnull
  public String getCwAIDs() {
    return cwAIDs;
  }

  public void setCwAIDs(String cwAIDs) {
    this.cwAIDs = cwAIDs;
  }


  public Air06 calculatedAccuracyMeters(String calculatedAccuracyMeters) {
    this.calculatedAccuracyMeters = calculatedAccuracyMeters;
    return this;
  }

  /**
   * The estimated accuracy in Meters for the facility&#39;s geospatial coordinate.
   * @return calculatedAccuracyMeters
   */
  @javax.annotation.Nonnull
  public String getCalculatedAccuracyMeters() {
    return calculatedAccuracyMeters;
  }

  public void setCalculatedAccuracyMeters(String calculatedAccuracyMeters) {
    this.calculatedAccuracyMeters = calculatedAccuracyMeters;
  }


  public Air06 camdIDs(String camdIDs) {
    this.camdIDs = camdIDs;
    return this;
  }

  /**
   * Facility identifiers for the Clean Air Markets Division database.
   * @return camdIDs
   */
  @javax.annotation.Nonnull
  public String getCamdIDs() {
    return camdIDs;
  }

  public void setCamdIDs(String camdIDs) {
    this.camdIDs = camdIDs;
  }


  public Air06 censusBlockGroup(String censusBlockGroup) {
    this.censusBlockGroup = censusBlockGroup;
    return this;
  }

  /**
   * A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
   * @return censusBlockGroup
   */
  @javax.annotation.Nonnull
  public String getCensusBlockGroup() {
    return censusBlockGroup;
  }

  public void setCensusBlockGroup(String censusBlockGroup) {
    this.censusBlockGroup = censusBlockGroup;
  }


  public Air06 chesapeakeBayFlag(String chesapeakeBayFlag) {
    this.chesapeakeBayFlag = chesapeakeBayFlag;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the facility is located within the Chesapeake Bay watershed.
   * @return chesapeakeBayFlag
   */
  @javax.annotation.Nonnull
  public String getChesapeakeBayFlag() {
    return chesapeakeBayFlag;
  }

  public void setChesapeakeBayFlag(String chesapeakeBayFlag) {
    this.chesapeakeBayFlag = chesapeakeBayFlag;
  }


  public Air06 collectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
    return this;
  }

  /**
   * ??
   * @return collectionMethod
   */
  @javax.annotation.Nonnull
  public String getCollectionMethod() {
    return collectionMethod;
  }

  public void setCollectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
  }


  public Air06 currSvFlag(String currSvFlag) {
    this.currSvFlag = currSvFlag;
    return this;
  }

  /**
   * Indicates if the facility has a current significant violation. 1 &#x3D; Yes
   * @return currSvFlag
   */
  @javax.annotation.Nonnull
  public String getCurrSvFlag() {
    return currSvFlag;
  }

  public void setCurrSvFlag(String currSvFlag) {
    this.currSvFlag = currSvFlag;
  }


  public Air06 currVioFlag(String currVioFlag) {
    this.currVioFlag = currVioFlag;
    return this;
  }

  /**
   * Indicates if the facility has a current violation. 1 &#x3D; Yes
   * @return currVioFlag
   */
  @javax.annotation.Nonnull
  public String getCurrVioFlag() {
    return currVioFlag;
  }

  public void setCurrVioFlag(String currVioFlag) {
    this.currVioFlag = currVioFlag;
  }


  public Air06 epASystem(String epASystem) {
    this.epASystem = epASystem;
    return this;
  }

  /**
   * The EPA data system in which permit and facility records are kept. EPA&#39;s Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
   * @return epASystem
   */
  @javax.annotation.Nonnull
  public String getEpASystem() {
    return epASystem;
  }

  public void setEpASystem(String epASystem) {
    this.epASystem = epASystem;
  }


  public Air06 ea5yrFlag(String ea5yrFlag) {
    this.ea5yrFlag = ea5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has a formal enforcement action within the last 5 years. 1 &#x3D; Yes
   * @return ea5yrFlag
   */
  @javax.annotation.Nonnull
  public String getEa5yrFlag() {
    return ea5yrFlag;
  }

  public void setEa5yrFlag(String ea5yrFlag) {
    this.ea5yrFlag = ea5yrFlag;
  }


  public Air06 eisIDs(String eisIDs) {
    this.eisIDs = eisIDs;
    return this;
  }

  /**
   * A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.
   * @return eisIDs
   */
  @javax.annotation.Nonnull
  public String getEisIDs() {
    return eisIDs;
  }

  public void setEisIDs(String eisIDs) {
    this.eisIDs = eisIDs;
  }


  public Air06 ejscreenFlag(String ejscreenFlag) {
    this.ejscreenFlag = ejscreenFlag;
    return this;
  }

  /**
   * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
   * @return ejscreenFlag
   */
  @javax.annotation.Nonnull
  public String getEjscreenFlag() {
    return ejscreenFlag;
  }

  public void setEjscreenFlag(String ejscreenFlag) {
    this.ejscreenFlag = ejscreenFlag;
  }


  public Air06 ejscreenFlagUs(String ejscreenFlagUs) {
    this.ejscreenFlagUs = ejscreenFlagUs;
    return this;
  }

  /**
   * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
   * @return ejscreenFlagUs
   */
  @javax.annotation.Nonnull
  public String getEjscreenFlagUs() {
    return ejscreenFlagUs;
  }

  public void setEjscreenFlagUs(String ejscreenFlagUs) {
    this.ejscreenFlagUs = ejscreenFlagUs;
  }


  public Air06 facCamdReporter(String facCamdReporter) {
    this.facCamdReporter = facCamdReporter;
    return this;
  }

  /**
   * Indicates whether the facility reports to the Clean Air Markets Division (CAMD).
   * @return facCamdReporter
   */
  @javax.annotation.Nonnull
  public String getFacCamdReporter() {
    return facCamdReporter;
  }

  public void setFacCamdReporter(String facCamdReporter) {
    this.facCamdReporter = facCamdReporter;
  }


  public Air06 facCountyName(String facCountyName) {
    this.facCountyName = facCountyName;
    return this;
  }

  /**
   * The facility county name from EPA&#39;s Facility Registry System
   * @return facCountyName
   */
  @javax.annotation.Nonnull
  public String getFacCountyName() {
    return facCountyName;
  }

  public void setFacCountyName(String facCountyName) {
    this.facCountyName = facCountyName;
  }


  public Air06 facDerivedHuc(String facDerivedHuc) {
    this.facDerivedHuc = facDerivedHuc;
    return this;
  }

  /**
   * The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
   * @return facDerivedHuc
   */
  @javax.annotation.Nonnull
  public String getFacDerivedHuc() {
    return facDerivedHuc;
  }

  public void setFacDerivedHuc(String facDerivedHuc) {
    this.facDerivedHuc = facDerivedHuc;
  }


  public Air06 facDerivedTRIbes(String facDerivedTRIbes) {
    this.facDerivedTRIbes = facDerivedTRIbes;
    return this;
  }

  /**
   * The tribes or tribal territories located within 25 miles of the facility&#39;s location.
   * @return facDerivedTRIbes
   */
  @javax.annotation.Nonnull
  public String getFacDerivedTRIbes() {
    return facDerivedTRIbes;
  }

  public void setFacDerivedTRIbes(String facDerivedTRIbes) {
    this.facDerivedTRIbes = facDerivedTRIbes;
  }


  public Air06 facDerivedWBD(String facDerivedWBD) {
    this.facDerivedWBD = facDerivedWBD;
    return this;
  }

  /**
   * The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.
   * @return facDerivedWBD
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBD() {
    return facDerivedWBD;
  }

  public void setFacDerivedWBD(String facDerivedWBD) {
    this.facDerivedWBD = facDerivedWBD;
  }


  public Air06 facDerivedWBDName(String facDerivedWBDName) {
    this.facDerivedWBDName = facDerivedWBDName;
    return this;
  }

  /**
   * The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate
   * @return facDerivedWBDName
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBDName() {
    return facDerivedWBDName;
  }

  public void setFacDerivedWBDName(String facDerivedWBDName) {
    this.facDerivedWBDName = facDerivedWBDName;
  }


  public Air06 facEisAIRReleases(String facEisAIRReleases) {
    this.facEisAIRReleases = facEisAIRReleases;
    return this;
  }

  /**
   * The amount of hazardous air pollutants released to air in tons per year, as reported in the most recent National Emissions Inventory (NEI).
   * @return facEisAIRReleases
   */
  @javax.annotation.Nonnull
  public String getFacEisAIRReleases() {
    return facEisAIRReleases;
  }

  public void setFacEisAIRReleases(String facEisAIRReleases) {
    this.facEisAIRReleases = facEisAIRReleases;
  }


  public Air06 facEisReporter(String facEisReporter) {
    this.facEisReporter = facEisReporter;
    return this;
  }

  /**
   * Indicates whether the facility reports to the Emissions Inventory System (EIS).
   * @return facEisReporter
   */
  @javax.annotation.Nonnull
  public String getFacEisReporter() {
    return facEisReporter;
  }

  public void setFacEisReporter(String facEisReporter) {
    this.facEisReporter = facEisReporter;
  }


  public Air06 facFIPSCode(String facFIPSCode) {
    this.facFIPSCode = facFIPSCode;
    return this;
  }

  /**
   * The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
   * @return facFIPSCode
   */
  @javax.annotation.Nonnull
  public String getFacFIPSCode() {
    return facFIPSCode;
  }

  public void setFacFIPSCode(String facFIPSCode) {
    this.facFIPSCode = facFIPSCode;
  }


  public Air06 facFederalAgencyCode(String facFederalAgencyCode) {
    this.facFederalAgencyCode = facFederalAgencyCode;
    return this;
  }

  /**
   * Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C &#x3D; Civilian Federal Agency; D &#x3D; Department of Defense; E &#x3D; Department of Energy; X &#x3D; Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.
   * @return facFederalAgencyCode
   */
  @javax.annotation.Nonnull
  public String getFacFederalAgencyCode() {
    return facFederalAgencyCode;
  }

  public void setFacFederalAgencyCode(String facFederalAgencyCode) {
    this.facFederalAgencyCode = facFederalAgencyCode;
  }


  public Air06 facFederalAgencyName(String facFederalAgencyName) {
    this.facFederalAgencyName = facFederalAgencyName;
    return this;
  }

  /**
   * Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.
   * @return facFederalAgencyName
   */
  @javax.annotation.Nonnull
  public String getFacFederalAgencyName() {
    return facFederalAgencyName;
  }

  public void setFacFederalAgencyName(String facFederalAgencyName) {
    this.facFederalAgencyName = facFederalAgencyName;
  }


  public Air06 facGHGCO2Releases(String facGHGCO2Releases) {
    this.facGHGCO2Releases = facGHGCO2Releases;
    return this;
  }

  /**
   * The annual sum of total release amounts and \&quot;associated quantities\&quot; of all linked Greenhouse Gas IDs from the Office of Air and Radiation \&quot;Summary 2010 Greenhouse Gas Data.\&quot; Units are reported as metric tons of CO2 equivalents per year (MTCO2e/year).
   * @return facGHGCO2Releases
   */
  @javax.annotation.Nonnull
  public String getFacGHGCO2Releases() {
    return facGHGCO2Releases;
  }

  public void setFacGHGCO2Releases(String facGHGCO2Releases) {
    this.facGHGCO2Releases = facGHGCO2Releases;
  }


  public Air06 facGHGReporter(String facGHGReporter) {
    this.facGHGReporter = facGHGReporter;
    return this;
  }

  /**
   * Indicates whether the facility reports to the Greenhouse Gas Reporting Program (GHGRP)
   * @return facGHGReporter
   */
  @javax.annotation.Nonnull
  public String getFacGHGReporter() {
    return facGHGReporter;
  }

  public void setFacGHGReporter(String facGHGReporter) {
    this.facGHGReporter = facGHGReporter;
  }


  public Air06 facIndianCntryFlg(String facIndianCntryFlg) {
    this.facIndianCntryFlg = facIndianCntryFlg;
    return this;
  }

  /**
   * Flag showing Y/N whether the facility is located in Indian Country.
   * @return facIndianCntryFlg
   */
  @javax.annotation.Nonnull
  public String getFacIndianCntryFlg() {
    return facIndianCntryFlg;
  }

  public void setFacIndianCntryFlg(String facIndianCntryFlg) {
    this.facIndianCntryFlg = facIndianCntryFlg;
  }


  public Air06 facIndianSpatialFlg(String facIndianSpatialFlg) {
    this.facIndianSpatialFlg = facIndianSpatialFlg;
    return this;
  }

  /**
   * Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.
   * @return facIndianSpatialFlg
   */
  @javax.annotation.Nonnull
  public String getFacIndianSpatialFlg() {
    return facIndianSpatialFlg;
  }

  public void setFacIndianSpatialFlg(String facIndianSpatialFlg) {
    this.facIndianSpatialFlg = facIndianSpatialFlg;
  }


  public Air06 facLat(String facLat) {
    this.facLat = facLat;
    return this;
  }

  /**
   * The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
   * @return facLat
   */
  @javax.annotation.Nonnull
  public String getFacLat() {
    return facLat;
  }

  public void setFacLat(String facLat) {
    this.facLat = facLat;
  }


  public Air06 facLong(String facLong) {
    this.facLong = facLong;
    return this;
  }

  /**
   * The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
   * @return facLong
   */
  @javax.annotation.Nonnull
  public String getFacLong() {
    return facLong;
  }

  public void setFacLong(String facLong) {
    this.facLong = facLong;
  }


  public Air06 facMapFlg(String facMapFlg) {
    this.facMapFlg = facMapFlg;
    return this;
  }

  /**
   * Graphical indicator denoting whether geographical data required to map a facility are available.
   * @return facMapFlg
   */
  @javax.annotation.Nonnull
  public String getFacMapFlg() {
    return facMapFlg;
  }

  public void setFacMapFlg(String facMapFlg) {
    this.facMapFlg = facMapFlg;
  }


  public Air06 facMapIcon(String facMapIcon) {
    this.facMapIcon = facMapIcon;
    return this;
  }

  /**
   * The default map icon image file calculated for the facility by the ECHO program.
   * @return facMapIcon
   */
  @javax.annotation.Nonnull
  public String getFacMapIcon() {
    return facMapIcon;
  }

  public void setFacMapIcon(String facMapIcon) {
    this.facMapIcon = facMapIcon;
  }


  public Air06 facNaaFlag(String facNaaFlag) {
    this.facNaaFlag = facNaaFlag;
    return this;
  }

  /**
   * Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.
   * @return facNaaFlag
   */
  @javax.annotation.Nonnull
  public String getFacNaaFlag() {
    return facNaaFlag;
  }

  public void setFacNaaFlag(String facNaaFlag) {
    this.facNaaFlag = facNaaFlag;
  }


  public Air06 facPercentMinority(String facPercentMinority) {
    this.facPercentMinority = facPercentMinority;
    return this;
  }

  /**
   * Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
   * @return facPercentMinority
   */
  @javax.annotation.Nonnull
  public String getFacPercentMinority() {
    return facPercentMinority;
  }

  public void setFacPercentMinority(String facPercentMinority) {
    this.facPercentMinority = facPercentMinority;
  }


  public Air06 facPopulationDensity(String facPopulationDensity) {
    this.facPopulationDensity = facPopulationDensity;
    return this;
  }

  /**
   * The number of persons per square mile in the profiled area.
   * @return facPopulationDensity
   */
  @javax.annotation.Nonnull
  public String getFacPopulationDensity() {
    return facPopulationDensity;
  }

  public void setFacPopulationDensity(String facPopulationDensity) {
    this.facPopulationDensity = facPopulationDensity;
  }


  public Air06 facSICCodes(String facSICCodes) {
    this.facSICCodes = facSICCodes;
    return this;
  }

  /**
   * Indicates the facility’s or permit&#39;s primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.
   * @return facSICCodes
   */
  @javax.annotation.Nonnull
  public String getFacSICCodes() {
    return facSICCodes;
  }

  public void setFacSICCodes(String facSICCodes) {
    this.facSICCodes = facSICCodes;
  }


  public Air06 facStdCountyName(String facStdCountyName) {
    this.facStdCountyName = facStdCountyName;
    return this;
  }

  /**
   * The standardized  facility county name from EPA&#39;s Facility Registry System
   * @return facStdCountyName
   */
  @javax.annotation.Nonnull
  public String getFacStdCountyName() {
    return facStdCountyName;
  }

  public void setFacStdCountyName(String facStdCountyName) {
    this.facStdCountyName = facStdCountyName;
  }


  public Air06 facTRIAIRReleases(String facTRIAIRReleases) {
    this.facTRIAIRReleases = facTRIAIRReleases;
    return this;
  }

  /**
   * The total chemical releases to air, in pounds, as reported to TRI by the facility for the most recent reporting year.
   * @return facTRIAIRReleases
   */
  @javax.annotation.Nonnull
  public String getFacTRIAIRReleases() {
    return facTRIAIRReleases;
  }

  public void setFacTRIAIRReleases(String facTRIAIRReleases) {
    this.facTRIAIRReleases = facTRIAIRReleases;
  }


  public Air06 facTRICarcAIRReleases(String facTRICarcAIRReleases) {
    this.facTRICarcAIRReleases = facTRICarcAIRReleases;
    return this;
  }

  /**
   * The pounds of chemicals considered to be carcinogens released to air, as reported to TRI for the most recent reporting year. Chemicals are classified as carcinogens under the requirements of the Occupational Safety and Health Administration (OSHA).
   * @return facTRICarcAIRReleases
   */
  @javax.annotation.Nonnull
  public String getFacTRICarcAIRReleases() {
    return facTRICarcAIRReleases;
  }

  public void setFacTRICarcAIRReleases(String facTRICarcAIRReleases) {
    this.facTRICarcAIRReleases = facTRICarcAIRReleases;
  }


  public Air06 facTRIHapsReleases(String facTRIHapsReleases) {
    this.facTRIHapsReleases = facTRIHapsReleases;
    return this;
  }

  /**
   * The pounds of chemicals classified as hazardous air pollutants (HAPS) released to air in pounds per year, as reported to TRI for the most recent reporting year.
   * @return facTRIHapsReleases
   */
  @javax.annotation.Nonnull
  public String getFacTRIHapsReleases() {
    return facTRIHapsReleases;
  }

  public void setFacTRIHapsReleases(String facTRIHapsReleases) {
    this.facTRIHapsReleases = facTRIHapsReleases;
  }


  public Air06 facTRIReporter(String facTRIReporter) {
    this.facTRIReporter = facTRIReporter;
    return this;
  }

  /**
   * Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
   * @return facTRIReporter
   */
  @javax.annotation.Nonnull
  public String getFacTRIReporter() {
    return facTRIReporter;
  }

  public void setFacTRIReporter(String facTRIReporter) {
    this.facTRIReporter = facTRIReporter;
  }


  public Air06 facUsMexBorderFlg(String facUsMexBorderFlg) {
    this.facUsMexBorderFlg = facUsMexBorderFlg;
    return this;
  }

  /**
   * A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
   * @return facUsMexBorderFlg
   */
  @javax.annotation.Nonnull
  public String getFacUsMexBorderFlg() {
    return facUsMexBorderFlg;
  }

  public void setFacUsMexBorderFlg(String facUsMexBorderFlg) {
    this.facUsMexBorderFlg = facUsMexBorderFlg;
  }


  public Air06 ghGIDs(String ghGIDs) {
    this.ghGIDs = ghGIDs;
    return this;
  }

  /**
   * A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.
   * @return ghGIDs
   */
  @javax.annotation.Nonnull
  public String getGhGIDs() {
    return ghGIDs;
  }

  public void setGhGIDs(String ghGIDs) {
    this.ghGIDs = ghGIDs;
  }


  public Air06 hasPollRpt(String hasPollRpt) {
    this.hasPollRpt = hasPollRpt;
    return this;
  }

  /**
   * ???
   * @return hasPollRpt
   */
  @javax.annotation.Nonnull
  public String getHasPollRpt() {
    return hasPollRpt;
  }

  public void setHasPollRpt(String hasPollRpt) {
    this.hasPollRpt = hasPollRpt;
  }


  public Air06 infea5yrFlag(String infea5yrFlag) {
    this.infea5yrFlag = infea5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has an informal enforcement action within the last 5 years. 1 &#x3D; Yes.
   * @return infea5yrFlag
   */
  @javax.annotation.Nonnull
  public String getInfea5yrFlag() {
    return infea5yrFlag;
  }

  public void setInfea5yrFlag(String infea5yrFlag) {
    this.infea5yrFlag = infea5yrFlag;
  }


  public Air06 insp5yrFlag(String insp5yrFlag) {
    this.insp5yrFlag = insp5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has an inspection within the last 5 years. 1 &#x3D; Yes
   * @return insp5yrFlag
   */
  @javax.annotation.Nonnull
  public String getInsp5yrFlag() {
    return insp5yrFlag;
  }

  public void setInsp5yrFlag(String insp5yrFlag) {
    this.insp5yrFlag = insp5yrFlag;
  }


  public Air06 lastDatePce(String lastDatePce) {
    this.lastDatePce = lastDatePce;
    return this;
  }

  /**
   * The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA or a state agency was completed.
   * @return lastDatePce
   */
  @javax.annotation.Nonnull
  public String getLastDatePce() {
    return lastDatePce;
  }

  public void setLastDatePce(String lastDatePce) {
    this.lastDatePce = lastDatePce;
  }


  public Air06 lastDatePceEPA(String lastDatePceEPA) {
    this.lastDatePceEPA = lastDatePceEPA;
    return this;
  }

  /**
   * The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA was completed.
   * @return lastDatePceEPA
   */
  @javax.annotation.Nonnull
  public String getLastDatePceEPA() {
    return lastDatePceEPA;
  }

  public void setLastDatePceEPA(String lastDatePceEPA) {
    this.lastDatePceEPA = lastDatePceEPA;
  }


  public Air06 lastDatePceSta(String lastDatePceSta) {
    this.lastDatePceSta = lastDatePceSta;
    return this;
  }

  /**
   * The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by a state agency was completed.
   * @return lastDatePceSta
   */
  @javax.annotation.Nonnull
  public String getLastDatePceSta() {
    return lastDatePceSta;
  }

  public void setLastDatePceSta(String lastDatePceSta) {
    this.lastDatePceSta = lastDatePceSta;
  }


  public Air06 localControlRegionCode(String localControlRegionCode) {
    this.localControlRegionCode = localControlRegionCode;
    return this;
  }

  /**
   * Code for regions within a state. Search criteria for DFR in OTIS.
   * @return localControlRegionCode
   */
  @javax.annotation.Nonnull
  public String getLocalControlRegionCode() {
    return localControlRegionCode;
  }

  public void setLocalControlRegionCode(String localControlRegionCode) {
    this.localControlRegionCode = localControlRegionCode;
  }


  public Air06 localControlRegionName(String localControlRegionName) {
    this.localControlRegionName = localControlRegionName;
    return this;
  }

  /**
   * Regions within a state. Search criteria for DFR in OTIS.
   * @return localControlRegionName
   */
  @javax.annotation.Nonnull
  public String getLocalControlRegionName() {
    return localControlRegionName;
  }

  public void setLocalControlRegionName(String localControlRegionName) {
    this.localControlRegionName = localControlRegionName;
  }


  public Air06 lower48(String lower48) {
    this.lower48 = lower48;
    return this;
  }

  /**
   * Flag showing Y/N whether location is within the contiguous (lower 48) United States.
   * @return lower48
   */
  @javax.annotation.Nonnull
  public String getLower48() {
    return lower48;
  }

  public void setLower48(String lower48) {
    this.lower48 = lower48;
  }


  public Air06 maintPollutantsNaa(String maintPollutantsNaa) {
    this.maintPollutantsNaa = maintPollutantsNaa;
    return this;
  }

  /**
   * Get maintPollutantsNaa
   * @return maintPollutantsNaa
   */
  @javax.annotation.Nonnull
  public String getMaintPollutantsNaa() {
    return maintPollutantsNaa;
  }

  public void setMaintPollutantsNaa(String maintPollutantsNaa) {
    this.maintPollutantsNaa = maintPollutantsNaa;
  }


  public Air06 maintStandardsNaa(String maintStandardsNaa) {
    this.maintStandardsNaa = maintStandardsNaa;
    return this;
  }

  /**
   * Get maintStandardsNaa
   * @return maintStandardsNaa
   */
  @javax.annotation.Nonnull
  public String getMaintStandardsNaa() {
    return maintStandardsNaa;
  }

  public void setMaintStandardsNaa(String maintStandardsNaa) {
    this.maintStandardsNaa = maintStandardsNaa;
  }


  public Air06 maintStatusNaa(String maintStatusNaa) {
    this.maintStatusNaa = maintStatusNaa;
    return this;
  }

  /**
   * Get maintStatusNaa
   * @return maintStatusNaa
   */
  @javax.annotation.Nonnull
  public String getMaintStatusNaa() {
    return maintStatusNaa;
  }

  public void setMaintStatusNaa(String maintStatusNaa) {
    this.maintStatusNaa = maintStatusNaa;
  }


  public Air06 map(String map) {
    this.map = map;
    return this;
  }

  /**
   * No Longer Used.
   * @return map
   */
  @javax.annotation.Nonnull
  public String getMap() {
    return map;
  }

  public void setMap(String map) {
    this.map = map;
  }


  public Air06 maxPctileUs(String maxPctileUs) {
    this.maxPctileUs = maxPctileUs;
    return this;
  }

  /**
   * The maximum percentile from all individual EJSCREEN indicators.
   * @return maxPctileUs
   */
  @javax.annotation.Nonnull
  public String getMaxPctileUs() {
    return maxPctileUs;
  }

  public void setMaxPctileUs(String maxPctileUs) {
    this.maxPctileUs = maxPctileUs;
  }


  public Air06 maxScore(String maxScore) {
    this.maxScore = maxScore;
    return this;
  }

  /**
   * A sorting score for internal use.
   * @return maxScore
   */
  @javax.annotation.Nonnull
  public String getMaxScore() {
    return maxScore;
  }

  public void setMaxScore(String maxScore) {
    this.maxScore = maxScore;
  }


  public Air06 naPollutantsNaa(String naPollutantsNaa) {
    this.naPollutantsNaa = naPollutantsNaa;
    return this;
  }

  /**
   * Get naPollutantsNaa
   * @return naPollutantsNaa
   */
  @javax.annotation.Nonnull
  public String getNaPollutantsNaa() {
    return naPollutantsNaa;
  }

  public void setNaPollutantsNaa(String naPollutantsNaa) {
    this.naPollutantsNaa = naPollutantsNaa;
  }


  public Air06 naStandardsNaa(String naStandardsNaa) {
    this.naStandardsNaa = naStandardsNaa;
    return this;
  }

  /**
   * Get naStandardsNaa
   * @return naStandardsNaa
   */
  @javax.annotation.Nonnull
  public String getNaStandardsNaa() {
    return naStandardsNaa;
  }

  public void setNaStandardsNaa(String naStandardsNaa) {
    this.naStandardsNaa = naStandardsNaa;
  }


  public Air06 naStatusNaa(String naStatusNaa) {
    this.naStatusNaa = naStatusNaa;
    return this;
  }

  /**
   * Get naStatusNaa
   * @return naStatusNaa
   */
  @javax.annotation.Nonnull
  public String getNaStatusNaa() {
    return naStatusNaa;
  }

  public void setNaStatusNaa(String naStatusNaa) {
    this.naStatusNaa = naStatusNaa;
  }


  public Air06 naaCategories(String naaCategories) {
    this.naaCategories = naaCategories;
    return this;
  }

  /**
   * The nonattainment area categories that the facility is in, derived spatially based on the facility&#39;s geographic coordinates in FRS.�
   * @return naaCategories
   */
  @javax.annotation.Nonnull
  public String getNaaCategories() {
    return naaCategories;
  }

  public void setNaaCategories(String naaCategories) {
    this.naaCategories = naaCategories;
  }


  public Air06 naaPollutants(String naaPollutants) {
    this.naaPollutants = naaPollutants;
    return this;
  }

  /**
   * All criteria pollutants that the facility is in nonattainment for.
   * @return naaPollutants
   */
  @javax.annotation.Nonnull
  public String getNaaPollutants() {
    return naaPollutants;
  }

  public void setNaaPollutants(String naaPollutants) {
    this.naaPollutants = naaPollutants;
  }


  public Air06 objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * Sequential number assigned to each facility or cluster returned.
   * @return objectId
   */
  @javax.annotation.Nonnull
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public Air06 otherPermitIDs(String otherPermitIDs) {
    this.otherPermitIDs = otherPermitIDs;
    return this;
  }

  /**
   * Get otherPermitIDs
   * @return otherPermitIDs
   */
  @javax.annotation.Nonnull
  public String getOtherPermitIDs() {
    return otherPermitIDs;
  }

  public void setOtherPermitIDs(String otherPermitIDs) {
    this.otherPermitIDs = otherPermitIDs;
  }


  public Air06 over80CountUs(String over80CountUs) {
    this.over80CountUs = over80CountUs;
    return this;
  }

  /**
   * The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.
   * @return over80CountUs
   */
  @javax.annotation.Nonnull
  public String getOver80CountUs() {
    return over80CountUs;
  }

  public void setOver80CountUs(String over80CountUs) {
    this.over80CountUs = over80CountUs;
  }


  public Air06 pctileCancerUs(String pctileCancerUs) {
    this.pctileCancerUs = pctileCancerUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
   * @return pctileCancerUs
   */
  @javax.annotation.Nonnull
  public String getPctileCancerUs() {
    return pctileCancerUs;
  }

  public void setPctileCancerUs(String pctileCancerUs) {
    this.pctileCancerUs = pctileCancerUs;
  }


  public Air06 pctileDpmUs(String pctileDpmUs) {
    this.pctileDpmUs = pctileDpmUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
   * @return pctileDpmUs
   */
  @javax.annotation.Nonnull
  public String getPctileDpmUs() {
    return pctileDpmUs;
  }

  public void setPctileDpmUs(String pctileDpmUs) {
    this.pctileDpmUs = pctileDpmUs;
  }


  public Air06 pctileO3Us(String pctileO3Us) {
    this.pctileO3Us = pctileO3Us;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN ozone indicator.
   * @return pctileO3Us
   */
  @javax.annotation.Nonnull
  public String getPctileO3Us() {
    return pctileO3Us;
  }

  public void setPctileO3Us(String pctileO3Us) {
    this.pctileO3Us = pctileO3Us;
  }


  public Air06 pctilePctpre1960Us(String pctilePctpre1960Us) {
    this.pctilePctpre1960Us = pctilePctpre1960Us;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN Lead paint indicator.
   * @return pctilePctpre1960Us
   */
  @javax.annotation.Nonnull
  public String getPctilePctpre1960Us() {
    return pctilePctpre1960Us;
  }

  public void setPctilePctpre1960Us(String pctilePctpre1960Us) {
    this.pctilePctpre1960Us = pctilePctpre1960Us;
  }


  public Air06 pctilePmUs(String pctilePmUs) {
    this.pctilePmUs = pctilePmUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN particulate matter indicator.
   * @return pctilePmUs
   */
  @javax.annotation.Nonnull
  public String getPctilePmUs() {
    return pctilePmUs;
  }

  public void setPctilePmUs(String pctilePmUs) {
    this.pctilePmUs = pctilePmUs;
  }


  public Air06 pctileProximityNPDESUs(String pctileProximityNPDESUs) {
    this.pctileProximityNPDESUs = pctileProximityNPDESUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
   * @return pctileProximityNPDESUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityNPDESUs() {
    return pctileProximityNPDESUs;
  }

  public void setPctileProximityNPDESUs(String pctileProximityNPDESUs) {
    this.pctileProximityNPDESUs = pctileProximityNPDESUs;
  }


  public Air06 pctileProximityNplUs(String pctileProximityNplUs) {
    this.pctileProximityNplUs = pctileProximityNplUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
   * @return pctileProximityNplUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityNplUs() {
    return pctileProximityNplUs;
  }

  public void setPctileProximityNplUs(String pctileProximityNplUs) {
    this.pctileProximityNplUs = pctileProximityNplUs;
  }


  public Air06 pctileProximityRmpUs(String pctileProximityRmpUs) {
    this.pctileProximityRmpUs = pctileProximityRmpUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
   * @return pctileProximityRmpUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityRmpUs() {
    return pctileProximityRmpUs;
  }

  public void setPctileProximityRmpUs(String pctileProximityRmpUs) {
    this.pctileProximityRmpUs = pctileProximityRmpUs;
  }


  public Air06 pctileProximityTsdfUs(String pctileProximityTsdfUs) {
    this.pctileProximityTsdfUs = pctileProximityTsdfUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
   * @return pctileProximityTsdfUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityTsdfUs() {
    return pctileProximityTsdfUs;
  }

  public void setPctileProximityTsdfUs(String pctileProximityTsdfUs) {
    this.pctileProximityTsdfUs = pctileProximityTsdfUs;
  }


  public Air06 pctileRespUs(String pctileRespUs) {
    this.pctileRespUs = pctileRespUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
   * @return pctileRespUs
   */
  @javax.annotation.Nonnull
  public String getPctileRespUs() {
    return pctileRespUs;
  }

  public void setPctileRespUs(String pctileRespUs) {
    this.pctileRespUs = pctileRespUs;
  }


  public Air06 pctileTrafficScoreUs(String pctileTrafficScoreUs) {
    this.pctileTrafficScoreUs = pctileTrafficScoreUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
   * @return pctileTrafficScoreUs
   */
  @javax.annotation.Nonnull
  public String getPctileTrafficScoreUs() {
    return pctileTrafficScoreUs;
  }

  public void setPctileTrafficScoreUs(String pctileTrafficScoreUs) {
    this.pctileTrafficScoreUs = pctileTrafficScoreUs;
  }


  public Air06 rcRAIDs(String rcRAIDs) {
    this.rcRAIDs = rcRAIDs;
    return this;
  }

  /**
   * A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
   * @return rcRAIDs
   */
  @javax.annotation.Nonnull
  public String getRcRAIDs() {
    return rcRAIDs;
  }

  public void setRcRAIDs(String rcRAIDs) {
    this.rcRAIDs = rcRAIDs;
  }


  public Air06 referencePoint(String referencePoint) {
    this.referencePoint = referencePoint;
    return this;
  }

  /**
   * ??
   * @return referencePoint
   */
  @javax.annotation.Nonnull
  public String getReferencePoint() {
    return referencePoint;
  }

  public void setReferencePoint(String referencePoint) {
    this.referencePoint = referencePoint;
  }


  public Air06 registryID(String registryID) {
    this.registryID = registryID;
    return this;
  }

  /**
   * An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
   * @return registryID
   */
  @javax.annotation.Nonnull
  public String getRegistryID() {
    return registryID;
  }

  public void setRegistryID(String registryID) {
    this.registryID = registryID;
  }


  public Air06 rmpIDs(String rmpIDs) {
    this.rmpIDs = rmpIDs;
    return this;
  }

  /**
   * A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.
   * @return rmpIDs
   */
  @javax.annotation.Nonnull
  public String getRmpIDs() {
    return rmpIDs;
  }

  public void setRmpIDs(String rmpIDs) {
    this.rmpIDs = rmpIDs;
  }


  public Air06 sdWAIDs(String sdWAIDs) {
    this.sdWAIDs = sdWAIDs;
    return this;
  }

  /**
   * A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
   * @return sdWAIDs
   */
  @javax.annotation.Nonnull
  public String getSdWAIDs() {
    return sdWAIDs;
  }

  public void setSdWAIDs(String sdWAIDs) {
    this.sdWAIDs = sdWAIDs;
  }


  public Air06 score(String score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }


  public Air06 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Air06 statute(String statute) {
    this.statute = statute;
    return this;
  }

  /**
   * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA &#x3D; the Clean Air Act - CWA &#x3D; the Clean Water Act - RCRA &#x3D; the Resource Conservation and Recovery Act - EP313 &#x3D; the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA &#x3D; the Toxic Substances Control Act - SDWA &#x3D; the Safe Drinking Water Act
   * @return statute
   */
  @javax.annotation.Nonnull
  public String getStatute() {
    return statute;
  }

  public void setStatute(String statute) {
    this.statute = statute;
  }


  public Air06 trIIDs(String trIIDs) {
    this.trIIDs = trIIDs;
    return this;
  }

  /**
   * A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ &#x3D; ZIP code, NNNNN &#x3D; the first 5 consonants of the name, and SSSSS &#x3D; the first 5 non-blank non-special characters in the street address.
   * @return trIIDs
   */
  @javax.annotation.Nonnull
  public String getTrIIDs() {
    return trIIDs;
  }

  public void setTrIIDs(String trIIDs) {
    this.trIIDs = trIIDs;
  }


  public Air06 trIbalFlag(String trIbalFlag) {
    this.trIbalFlag = trIbalFlag;
    return this;
  }

  /**
   * A flag indicating that the facility is within a tribal area.
   * @return trIbalFlag
   */
  @javax.annotation.Nonnull
  public String getTrIbalFlag() {
    return trIbalFlag;
  }

  public void setTrIbalFlag(String trIbalFlag) {
    this.trIbalFlag = trIbalFlag;
  }


  public Air06 violFlag(String violFlag) {
    this.violFlag = violFlag;
    return this;
  }

  /**
   * Indicates if the facility had a violation within the last 3 years. 1 &#x3D; Yes
   * @return violFlag
   */
  @javax.annotation.Nonnull
  public String getViolFlag() {
    return violFlag;
  }

  public void setViolFlag(String violFlag) {
    this.violFlag = violFlag;
  }


  public Air06 webDocs(String webDocs) {
    this.webDocs = webDocs;
    return this;
  }

  /**
   * Contains flags that identify what web accessible documents are available for the facility.
   * @return webDocs
   */
  @javax.annotation.Nonnull
  public String getWebDocs() {
    return webDocs;
  }

  public void setWebDocs(String webDocs) {
    this.webDocs = webDocs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Air06 air06 = (Air06) o;
    return Objects.equals(this.aiR3yrComplQtrsHistory, air06.aiR3yrComplQtrsHistory) &&
        Objects.equals(this.aiRCaseIDs, air06.aiRCaseIDs) &&
        Objects.equals(this.aiRCity, air06.aiRCity) &&
        Objects.equals(this.aiRClassification, air06.aiRClassification) &&
        Objects.equals(this.aiRComplStatus, air06.aiRComplStatus) &&
        Objects.equals(this.aiRCounty, air06.aiRCounty) &&
        Objects.equals(this.aiRDaysLastEval, air06.aiRDaysLastEval) &&
        Objects.equals(this.aiREPARegion, air06.aiREPARegion) &&
        Objects.equals(this.aiREvalCnt, air06.aiREvalCnt) &&
        Objects.equals(this.aiRFIPSCode, air06.aiRFIPSCode) &&
        Objects.equals(this.aiRFacilityTypeCode, air06.aiRFacilityTypeCode) &&
        Objects.equals(this.aiRFacilityTypeDesc, air06.aiRFacilityTypeDesc) &&
        Objects.equals(this.aiRFeaCnt, air06.aiRFeaCnt) &&
        Objects.equals(this.aiRHpvStatus, air06.aiRHpvStatus) &&
        Objects.equals(this.aiRIDs, air06.aiRIDs) &&
        Objects.equals(this.aiRIeaCnt, air06.aiRIeaCnt) &&
        Objects.equals(this.aiRIndianCntryFlg, air06.aiRIndianCntryFlg) &&
        Objects.equals(this.aiRLastEvalDate, air06.aiRLastEvalDate) &&
        Objects.equals(this.aiRLastEvalDateEPA, air06.aiRLastEvalDateEPA) &&
        Objects.equals(this.aiRLastEvalDateState, air06.aiRLastEvalDateState) &&
        Objects.equals(this.aiRLastFeaDate, air06.aiRLastFeaDate) &&
        Objects.equals(this.aiRLastFeaDateEPA, air06.aiRLastFeaDateEPA) &&
        Objects.equals(this.aiRLastFeaDateState, air06.aiRLastFeaDateState) &&
        Objects.equals(this.aiRLastIeaDate, air06.aiRLastIeaDate) &&
        Objects.equals(this.aiRLastIeaDateEPA, air06.aiRLastIeaDateEPA) &&
        Objects.equals(this.aiRLastIeaDateState, air06.aiRLastIeaDateState) &&
        Objects.equals(this.aiRLastPenaltyDate, air06.aiRLastPenaltyDate) &&
        Objects.equals(this.aiRLastStckDateEPA, air06.aiRLastStckDateEPA) &&
        Objects.equals(this.aiRLastStckDateState, air06.aiRLastStckDateState) &&
        Objects.equals(this.aiRLastStckTestDate, air06.aiRLastStckTestDate) &&
        Objects.equals(this.aiRLastStckTestResults, air06.aiRLastStckTestResults) &&
        Objects.equals(this.aiRLastViolDate, air06.aiRLastViolDate) &&
        Objects.equals(this.aiRMacts, air06.aiRMacts) &&
        Objects.equals(this.aiRMajorFlag, air06.aiRMajorFlag) &&
        Objects.equals(this.aiRMnthsWithHpv, air06.aiRMnthsWithHpv) &&
        Objects.equals(this.AIRNAICS, air06.AIRNAICS) &&
        Objects.equals(this.aiRName, air06.aiRName) &&
        Objects.equals(this.aiRNsps, air06.aiRNsps) &&
        Objects.equals(this.aiRNspsm, air06.aiRNspsm) &&
        Objects.equals(this.aiRPenalties, air06.aiRPenalties) &&
        Objects.equals(this.aiRPollRecentViol, air06.aiRPollRecentViol) &&
        Objects.equals(this.aiRPrograms, air06.aiRPrograms) &&
        Objects.equals(this.aiRQtrsWithHpv, air06.aiRQtrsWithHpv) &&
        Objects.equals(this.aiRQtrsWithViol, air06.aiRQtrsWithViol) &&
        Objects.equals(this.aiRRecentViolCnt, air06.aiRRecentViolCnt) &&
        Objects.equals(this.aiRStackTest5YrAll, air06.aiRStackTest5YrAll) &&
        Objects.equals(this.aiRStackTest5YrFail, air06.aiRStackTest5YrFail) &&
        Objects.equals(this.aiRState, air06.aiRState) &&
        Objects.equals(this.aiRStatus, air06.aiRStatus) &&
        Objects.equals(this.aiRStreet, air06.aiRStreet) &&
        Objects.equals(this.aiRTRIbalEPAids, air06.aiRTRIbalEPAids) &&
        Objects.equals(this.aiRTRIbalNames, air06.aiRTRIbalNames) &&
        Objects.equals(this.aiRUniverse, air06.aiRUniverse) &&
        Objects.equals(this.aiRZip, air06.aiRZip) &&
        Objects.equals(this.activeLower48, air06.activeLower48) &&
        Objects.equals(this.cwAIDs, air06.cwAIDs) &&
        Objects.equals(this.calculatedAccuracyMeters, air06.calculatedAccuracyMeters) &&
        Objects.equals(this.camdIDs, air06.camdIDs) &&
        Objects.equals(this.censusBlockGroup, air06.censusBlockGroup) &&
        Objects.equals(this.chesapeakeBayFlag, air06.chesapeakeBayFlag) &&
        Objects.equals(this.collectionMethod, air06.collectionMethod) &&
        Objects.equals(this.currSvFlag, air06.currSvFlag) &&
        Objects.equals(this.currVioFlag, air06.currVioFlag) &&
        Objects.equals(this.epASystem, air06.epASystem) &&
        Objects.equals(this.ea5yrFlag, air06.ea5yrFlag) &&
        Objects.equals(this.eisIDs, air06.eisIDs) &&
        Objects.equals(this.ejscreenFlag, air06.ejscreenFlag) &&
        Objects.equals(this.ejscreenFlagUs, air06.ejscreenFlagUs) &&
        Objects.equals(this.facCamdReporter, air06.facCamdReporter) &&
        Objects.equals(this.facCountyName, air06.facCountyName) &&
        Objects.equals(this.facDerivedHuc, air06.facDerivedHuc) &&
        Objects.equals(this.facDerivedTRIbes, air06.facDerivedTRIbes) &&
        Objects.equals(this.facDerivedWBD, air06.facDerivedWBD) &&
        Objects.equals(this.facDerivedWBDName, air06.facDerivedWBDName) &&
        Objects.equals(this.facEisAIRReleases, air06.facEisAIRReleases) &&
        Objects.equals(this.facEisReporter, air06.facEisReporter) &&
        Objects.equals(this.facFIPSCode, air06.facFIPSCode) &&
        Objects.equals(this.facFederalAgencyCode, air06.facFederalAgencyCode) &&
        Objects.equals(this.facFederalAgencyName, air06.facFederalAgencyName) &&
        Objects.equals(this.facGHGCO2Releases, air06.facGHGCO2Releases) &&
        Objects.equals(this.facGHGReporter, air06.facGHGReporter) &&
        Objects.equals(this.facIndianCntryFlg, air06.facIndianCntryFlg) &&
        Objects.equals(this.facIndianSpatialFlg, air06.facIndianSpatialFlg) &&
        Objects.equals(this.facLat, air06.facLat) &&
        Objects.equals(this.facLong, air06.facLong) &&
        Objects.equals(this.facMapFlg, air06.facMapFlg) &&
        Objects.equals(this.facMapIcon, air06.facMapIcon) &&
        Objects.equals(this.facNaaFlag, air06.facNaaFlag) &&
        Objects.equals(this.facPercentMinority, air06.facPercentMinority) &&
        Objects.equals(this.facPopulationDensity, air06.facPopulationDensity) &&
        Objects.equals(this.facSICCodes, air06.facSICCodes) &&
        Objects.equals(this.facStdCountyName, air06.facStdCountyName) &&
        Objects.equals(this.facTRIAIRReleases, air06.facTRIAIRReleases) &&
        Objects.equals(this.facTRICarcAIRReleases, air06.facTRICarcAIRReleases) &&
        Objects.equals(this.facTRIHapsReleases, air06.facTRIHapsReleases) &&
        Objects.equals(this.facTRIReporter, air06.facTRIReporter) &&
        Objects.equals(this.facUsMexBorderFlg, air06.facUsMexBorderFlg) &&
        Objects.equals(this.ghGIDs, air06.ghGIDs) &&
        Objects.equals(this.hasPollRpt, air06.hasPollRpt) &&
        Objects.equals(this.infea5yrFlag, air06.infea5yrFlag) &&
        Objects.equals(this.insp5yrFlag, air06.insp5yrFlag) &&
        Objects.equals(this.lastDatePce, air06.lastDatePce) &&
        Objects.equals(this.lastDatePceEPA, air06.lastDatePceEPA) &&
        Objects.equals(this.lastDatePceSta, air06.lastDatePceSta) &&
        Objects.equals(this.localControlRegionCode, air06.localControlRegionCode) &&
        Objects.equals(this.localControlRegionName, air06.localControlRegionName) &&
        Objects.equals(this.lower48, air06.lower48) &&
        Objects.equals(this.maintPollutantsNaa, air06.maintPollutantsNaa) &&
        Objects.equals(this.maintStandardsNaa, air06.maintStandardsNaa) &&
        Objects.equals(this.maintStatusNaa, air06.maintStatusNaa) &&
        Objects.equals(this.map, air06.map) &&
        Objects.equals(this.maxPctileUs, air06.maxPctileUs) &&
        Objects.equals(this.maxScore, air06.maxScore) &&
        Objects.equals(this.naPollutantsNaa, air06.naPollutantsNaa) &&
        Objects.equals(this.naStandardsNaa, air06.naStandardsNaa) &&
        Objects.equals(this.naStatusNaa, air06.naStatusNaa) &&
        Objects.equals(this.naaCategories, air06.naaCategories) &&
        Objects.equals(this.naaPollutants, air06.naaPollutants) &&
        Objects.equals(this.objectId, air06.objectId) &&
        Objects.equals(this.otherPermitIDs, air06.otherPermitIDs) &&
        Objects.equals(this.over80CountUs, air06.over80CountUs) &&
        Objects.equals(this.pctileCancerUs, air06.pctileCancerUs) &&
        Objects.equals(this.pctileDpmUs, air06.pctileDpmUs) &&
        Objects.equals(this.pctileO3Us, air06.pctileO3Us) &&
        Objects.equals(this.pctilePctpre1960Us, air06.pctilePctpre1960Us) &&
        Objects.equals(this.pctilePmUs, air06.pctilePmUs) &&
        Objects.equals(this.pctileProximityNPDESUs, air06.pctileProximityNPDESUs) &&
        Objects.equals(this.pctileProximityNplUs, air06.pctileProximityNplUs) &&
        Objects.equals(this.pctileProximityRmpUs, air06.pctileProximityRmpUs) &&
        Objects.equals(this.pctileProximityTsdfUs, air06.pctileProximityTsdfUs) &&
        Objects.equals(this.pctileRespUs, air06.pctileRespUs) &&
        Objects.equals(this.pctileTrafficScoreUs, air06.pctileTrafficScoreUs) &&
        Objects.equals(this.rcRAIDs, air06.rcRAIDs) &&
        Objects.equals(this.referencePoint, air06.referencePoint) &&
        Objects.equals(this.registryID, air06.registryID) &&
        Objects.equals(this.rmpIDs, air06.rmpIDs) &&
        Objects.equals(this.sdWAIDs, air06.sdWAIDs) &&
        Objects.equals(this.score, air06.score) &&
        Objects.equals(this.sourceID, air06.sourceID) &&
        Objects.equals(this.statute, air06.statute) &&
        Objects.equals(this.trIIDs, air06.trIIDs) &&
        Objects.equals(this.trIbalFlag, air06.trIbalFlag) &&
        Objects.equals(this.violFlag, air06.violFlag) &&
        Objects.equals(this.webDocs, air06.webDocs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aiR3yrComplQtrsHistory, aiRCaseIDs, aiRCity, aiRClassification, aiRComplStatus, aiRCounty, aiRDaysLastEval, aiREPARegion, aiREvalCnt, aiRFIPSCode, aiRFacilityTypeCode, aiRFacilityTypeDesc, aiRFeaCnt, aiRHpvStatus, aiRIDs, aiRIeaCnt, aiRIndianCntryFlg, aiRLastEvalDate, aiRLastEvalDateEPA, aiRLastEvalDateState, aiRLastFeaDate, aiRLastFeaDateEPA, aiRLastFeaDateState, aiRLastIeaDate, aiRLastIeaDateEPA, aiRLastIeaDateState, aiRLastPenaltyDate, aiRLastStckDateEPA, aiRLastStckDateState, aiRLastStckTestDate, aiRLastStckTestResults, aiRLastViolDate, aiRMacts, aiRMajorFlag, aiRMnthsWithHpv, AIRNAICS, aiRName, aiRNsps, aiRNspsm, aiRPenalties, aiRPollRecentViol, aiRPrograms, aiRQtrsWithHpv, aiRQtrsWithViol, aiRRecentViolCnt, aiRStackTest5YrAll, aiRStackTest5YrFail, aiRState, aiRStatus, aiRStreet, aiRTRIbalEPAids, aiRTRIbalNames, aiRUniverse, aiRZip, activeLower48, cwAIDs, calculatedAccuracyMeters, camdIDs, censusBlockGroup, chesapeakeBayFlag, collectionMethod, currSvFlag, currVioFlag, epASystem, ea5yrFlag, eisIDs, ejscreenFlag, ejscreenFlagUs, facCamdReporter, facCountyName, facDerivedHuc, facDerivedTRIbes, facDerivedWBD, facDerivedWBDName, facEisAIRReleases, facEisReporter, facFIPSCode, facFederalAgencyCode, facFederalAgencyName, facGHGCO2Releases, facGHGReporter, facIndianCntryFlg, facIndianSpatialFlg, facLat, facLong, facMapFlg, facMapIcon, facNaaFlag, facPercentMinority, facPopulationDensity, facSICCodes, facStdCountyName, facTRIAIRReleases, facTRICarcAIRReleases, facTRIHapsReleases, facTRIReporter, facUsMexBorderFlg, ghGIDs, hasPollRpt, infea5yrFlag, insp5yrFlag, lastDatePce, lastDatePceEPA, lastDatePceSta, localControlRegionCode, localControlRegionName, lower48, maintPollutantsNaa, maintStandardsNaa, maintStatusNaa, map, maxPctileUs, maxScore, naPollutantsNaa, naStandardsNaa, naStatusNaa, naaCategories, naaPollutants, objectId, otherPermitIDs, over80CountUs, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rcRAIDs, referencePoint, registryID, rmpIDs, sdWAIDs, score, sourceID, statute, trIIDs, trIbalFlag, violFlag, webDocs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Air06 {\n");
    sb.append("    aiR3yrComplQtrsHistory: ").append(toIndentedString(aiR3yrComplQtrsHistory)).append("\n");
    sb.append("    aiRCaseIDs: ").append(toIndentedString(aiRCaseIDs)).append("\n");
    sb.append("    aiRCity: ").append(toIndentedString(aiRCity)).append("\n");
    sb.append("    aiRClassification: ").append(toIndentedString(aiRClassification)).append("\n");
    sb.append("    aiRComplStatus: ").append(toIndentedString(aiRComplStatus)).append("\n");
    sb.append("    aiRCounty: ").append(toIndentedString(aiRCounty)).append("\n");
    sb.append("    aiRDaysLastEval: ").append(toIndentedString(aiRDaysLastEval)).append("\n");
    sb.append("    aiREPARegion: ").append(toIndentedString(aiREPARegion)).append("\n");
    sb.append("    aiREvalCnt: ").append(toIndentedString(aiREvalCnt)).append("\n");
    sb.append("    aiRFIPSCode: ").append(toIndentedString(aiRFIPSCode)).append("\n");
    sb.append("    aiRFacilityTypeCode: ").append(toIndentedString(aiRFacilityTypeCode)).append("\n");
    sb.append("    aiRFacilityTypeDesc: ").append(toIndentedString(aiRFacilityTypeDesc)).append("\n");
    sb.append("    aiRFeaCnt: ").append(toIndentedString(aiRFeaCnt)).append("\n");
    sb.append("    aiRHpvStatus: ").append(toIndentedString(aiRHpvStatus)).append("\n");
    sb.append("    aiRIDs: ").append(toIndentedString(aiRIDs)).append("\n");
    sb.append("    aiRIeaCnt: ").append(toIndentedString(aiRIeaCnt)).append("\n");
    sb.append("    aiRIndianCntryFlg: ").append(toIndentedString(aiRIndianCntryFlg)).append("\n");
    sb.append("    aiRLastEvalDate: ").append(toIndentedString(aiRLastEvalDate)).append("\n");
    sb.append("    aiRLastEvalDateEPA: ").append(toIndentedString(aiRLastEvalDateEPA)).append("\n");
    sb.append("    aiRLastEvalDateState: ").append(toIndentedString(aiRLastEvalDateState)).append("\n");
    sb.append("    aiRLastFeaDate: ").append(toIndentedString(aiRLastFeaDate)).append("\n");
    sb.append("    aiRLastFeaDateEPA: ").append(toIndentedString(aiRLastFeaDateEPA)).append("\n");
    sb.append("    aiRLastFeaDateState: ").append(toIndentedString(aiRLastFeaDateState)).append("\n");
    sb.append("    aiRLastIeaDate: ").append(toIndentedString(aiRLastIeaDate)).append("\n");
    sb.append("    aiRLastIeaDateEPA: ").append(toIndentedString(aiRLastIeaDateEPA)).append("\n");
    sb.append("    aiRLastIeaDateState: ").append(toIndentedString(aiRLastIeaDateState)).append("\n");
    sb.append("    aiRLastPenaltyDate: ").append(toIndentedString(aiRLastPenaltyDate)).append("\n");
    sb.append("    aiRLastStckDateEPA: ").append(toIndentedString(aiRLastStckDateEPA)).append("\n");
    sb.append("    aiRLastStckDateState: ").append(toIndentedString(aiRLastStckDateState)).append("\n");
    sb.append("    aiRLastStckTestDate: ").append(toIndentedString(aiRLastStckTestDate)).append("\n");
    sb.append("    aiRLastStckTestResults: ").append(toIndentedString(aiRLastStckTestResults)).append("\n");
    sb.append("    aiRLastViolDate: ").append(toIndentedString(aiRLastViolDate)).append("\n");
    sb.append("    aiRMacts: ").append(toIndentedString(aiRMacts)).append("\n");
    sb.append("    aiRMajorFlag: ").append(toIndentedString(aiRMajorFlag)).append("\n");
    sb.append("    aiRMnthsWithHpv: ").append(toIndentedString(aiRMnthsWithHpv)).append("\n");
    sb.append("    AIRNAICS: ").append(toIndentedString(AIRNAICS)).append("\n");
    sb.append("    aiRName: ").append(toIndentedString(aiRName)).append("\n");
    sb.append("    aiRNsps: ").append(toIndentedString(aiRNsps)).append("\n");
    sb.append("    aiRNspsm: ").append(toIndentedString(aiRNspsm)).append("\n");
    sb.append("    aiRPenalties: ").append(toIndentedString(aiRPenalties)).append("\n");
    sb.append("    aiRPollRecentViol: ").append(toIndentedString(aiRPollRecentViol)).append("\n");
    sb.append("    aiRPrograms: ").append(toIndentedString(aiRPrograms)).append("\n");
    sb.append("    aiRQtrsWithHpv: ").append(toIndentedString(aiRQtrsWithHpv)).append("\n");
    sb.append("    aiRQtrsWithViol: ").append(toIndentedString(aiRQtrsWithViol)).append("\n");
    sb.append("    aiRRecentViolCnt: ").append(toIndentedString(aiRRecentViolCnt)).append("\n");
    sb.append("    aiRStackTest5YrAll: ").append(toIndentedString(aiRStackTest5YrAll)).append("\n");
    sb.append("    aiRStackTest5YrFail: ").append(toIndentedString(aiRStackTest5YrFail)).append("\n");
    sb.append("    aiRState: ").append(toIndentedString(aiRState)).append("\n");
    sb.append("    aiRStatus: ").append(toIndentedString(aiRStatus)).append("\n");
    sb.append("    aiRStreet: ").append(toIndentedString(aiRStreet)).append("\n");
    sb.append("    aiRTRIbalEPAids: ").append(toIndentedString(aiRTRIbalEPAids)).append("\n");
    sb.append("    aiRTRIbalNames: ").append(toIndentedString(aiRTRIbalNames)).append("\n");
    sb.append("    aiRUniverse: ").append(toIndentedString(aiRUniverse)).append("\n");
    sb.append("    aiRZip: ").append(toIndentedString(aiRZip)).append("\n");
    sb.append("    activeLower48: ").append(toIndentedString(activeLower48)).append("\n");
    sb.append("    cwAIDs: ").append(toIndentedString(cwAIDs)).append("\n");
    sb.append("    calculatedAccuracyMeters: ").append(toIndentedString(calculatedAccuracyMeters)).append("\n");
    sb.append("    camdIDs: ").append(toIndentedString(camdIDs)).append("\n");
    sb.append("    censusBlockGroup: ").append(toIndentedString(censusBlockGroup)).append("\n");
    sb.append("    chesapeakeBayFlag: ").append(toIndentedString(chesapeakeBayFlag)).append("\n");
    sb.append("    collectionMethod: ").append(toIndentedString(collectionMethod)).append("\n");
    sb.append("    currSvFlag: ").append(toIndentedString(currSvFlag)).append("\n");
    sb.append("    currVioFlag: ").append(toIndentedString(currVioFlag)).append("\n");
    sb.append("    epASystem: ").append(toIndentedString(epASystem)).append("\n");
    sb.append("    ea5yrFlag: ").append(toIndentedString(ea5yrFlag)).append("\n");
    sb.append("    eisIDs: ").append(toIndentedString(eisIDs)).append("\n");
    sb.append("    ejscreenFlag: ").append(toIndentedString(ejscreenFlag)).append("\n");
    sb.append("    ejscreenFlagUs: ").append(toIndentedString(ejscreenFlagUs)).append("\n");
    sb.append("    facCamdReporter: ").append(toIndentedString(facCamdReporter)).append("\n");
    sb.append("    facCountyName: ").append(toIndentedString(facCountyName)).append("\n");
    sb.append("    facDerivedHuc: ").append(toIndentedString(facDerivedHuc)).append("\n");
    sb.append("    facDerivedTRIbes: ").append(toIndentedString(facDerivedTRIbes)).append("\n");
    sb.append("    facDerivedWBD: ").append(toIndentedString(facDerivedWBD)).append("\n");
    sb.append("    facDerivedWBDName: ").append(toIndentedString(facDerivedWBDName)).append("\n");
    sb.append("    facEisAIRReleases: ").append(toIndentedString(facEisAIRReleases)).append("\n");
    sb.append("    facEisReporter: ").append(toIndentedString(facEisReporter)).append("\n");
    sb.append("    facFIPSCode: ").append(toIndentedString(facFIPSCode)).append("\n");
    sb.append("    facFederalAgencyCode: ").append(toIndentedString(facFederalAgencyCode)).append("\n");
    sb.append("    facFederalAgencyName: ").append(toIndentedString(facFederalAgencyName)).append("\n");
    sb.append("    facGHGCO2Releases: ").append(toIndentedString(facGHGCO2Releases)).append("\n");
    sb.append("    facGHGReporter: ").append(toIndentedString(facGHGReporter)).append("\n");
    sb.append("    facIndianCntryFlg: ").append(toIndentedString(facIndianCntryFlg)).append("\n");
    sb.append("    facIndianSpatialFlg: ").append(toIndentedString(facIndianSpatialFlg)).append("\n");
    sb.append("    facLat: ").append(toIndentedString(facLat)).append("\n");
    sb.append("    facLong: ").append(toIndentedString(facLong)).append("\n");
    sb.append("    facMapFlg: ").append(toIndentedString(facMapFlg)).append("\n");
    sb.append("    facMapIcon: ").append(toIndentedString(facMapIcon)).append("\n");
    sb.append("    facNaaFlag: ").append(toIndentedString(facNaaFlag)).append("\n");
    sb.append("    facPercentMinority: ").append(toIndentedString(facPercentMinority)).append("\n");
    sb.append("    facPopulationDensity: ").append(toIndentedString(facPopulationDensity)).append("\n");
    sb.append("    facSICCodes: ").append(toIndentedString(facSICCodes)).append("\n");
    sb.append("    facStdCountyName: ").append(toIndentedString(facStdCountyName)).append("\n");
    sb.append("    facTRIAIRReleases: ").append(toIndentedString(facTRIAIRReleases)).append("\n");
    sb.append("    facTRICarcAIRReleases: ").append(toIndentedString(facTRICarcAIRReleases)).append("\n");
    sb.append("    facTRIHapsReleases: ").append(toIndentedString(facTRIHapsReleases)).append("\n");
    sb.append("    facTRIReporter: ").append(toIndentedString(facTRIReporter)).append("\n");
    sb.append("    facUsMexBorderFlg: ").append(toIndentedString(facUsMexBorderFlg)).append("\n");
    sb.append("    ghGIDs: ").append(toIndentedString(ghGIDs)).append("\n");
    sb.append("    hasPollRpt: ").append(toIndentedString(hasPollRpt)).append("\n");
    sb.append("    infea5yrFlag: ").append(toIndentedString(infea5yrFlag)).append("\n");
    sb.append("    insp5yrFlag: ").append(toIndentedString(insp5yrFlag)).append("\n");
    sb.append("    lastDatePce: ").append(toIndentedString(lastDatePce)).append("\n");
    sb.append("    lastDatePceEPA: ").append(toIndentedString(lastDatePceEPA)).append("\n");
    sb.append("    lastDatePceSta: ").append(toIndentedString(lastDatePceSta)).append("\n");
    sb.append("    localControlRegionCode: ").append(toIndentedString(localControlRegionCode)).append("\n");
    sb.append("    localControlRegionName: ").append(toIndentedString(localControlRegionName)).append("\n");
    sb.append("    lower48: ").append(toIndentedString(lower48)).append("\n");
    sb.append("    maintPollutantsNaa: ").append(toIndentedString(maintPollutantsNaa)).append("\n");
    sb.append("    maintStandardsNaa: ").append(toIndentedString(maintStandardsNaa)).append("\n");
    sb.append("    maintStatusNaa: ").append(toIndentedString(maintStatusNaa)).append("\n");
    sb.append("    map: ").append(toIndentedString(map)).append("\n");
    sb.append("    maxPctileUs: ").append(toIndentedString(maxPctileUs)).append("\n");
    sb.append("    maxScore: ").append(toIndentedString(maxScore)).append("\n");
    sb.append("    naPollutantsNaa: ").append(toIndentedString(naPollutantsNaa)).append("\n");
    sb.append("    naStandardsNaa: ").append(toIndentedString(naStandardsNaa)).append("\n");
    sb.append("    naStatusNaa: ").append(toIndentedString(naStatusNaa)).append("\n");
    sb.append("    naaCategories: ").append(toIndentedString(naaCategories)).append("\n");
    sb.append("    naaPollutants: ").append(toIndentedString(naaPollutants)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    otherPermitIDs: ").append(toIndentedString(otherPermitIDs)).append("\n");
    sb.append("    over80CountUs: ").append(toIndentedString(over80CountUs)).append("\n");
    sb.append("    pctileCancerUs: ").append(toIndentedString(pctileCancerUs)).append("\n");
    sb.append("    pctileDpmUs: ").append(toIndentedString(pctileDpmUs)).append("\n");
    sb.append("    pctileO3Us: ").append(toIndentedString(pctileO3Us)).append("\n");
    sb.append("    pctilePctpre1960Us: ").append(toIndentedString(pctilePctpre1960Us)).append("\n");
    sb.append("    pctilePmUs: ").append(toIndentedString(pctilePmUs)).append("\n");
    sb.append("    pctileProximityNPDESUs: ").append(toIndentedString(pctileProximityNPDESUs)).append("\n");
    sb.append("    pctileProximityNplUs: ").append(toIndentedString(pctileProximityNplUs)).append("\n");
    sb.append("    pctileProximityRmpUs: ").append(toIndentedString(pctileProximityRmpUs)).append("\n");
    sb.append("    pctileProximityTsdfUs: ").append(toIndentedString(pctileProximityTsdfUs)).append("\n");
    sb.append("    pctileRespUs: ").append(toIndentedString(pctileRespUs)).append("\n");
    sb.append("    pctileTrafficScoreUs: ").append(toIndentedString(pctileTrafficScoreUs)).append("\n");
    sb.append("    rcRAIDs: ").append(toIndentedString(rcRAIDs)).append("\n");
    sb.append("    referencePoint: ").append(toIndentedString(referencePoint)).append("\n");
    sb.append("    registryID: ").append(toIndentedString(registryID)).append("\n");
    sb.append("    rmpIDs: ").append(toIndentedString(rmpIDs)).append("\n");
    sb.append("    sdWAIDs: ").append(toIndentedString(sdWAIDs)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    statute: ").append(toIndentedString(statute)).append("\n");
    sb.append("    trIIDs: ").append(toIndentedString(trIIDs)).append("\n");
    sb.append("    trIbalFlag: ").append(toIndentedString(trIbalFlag)).append("\n");
    sb.append("    violFlag: ").append(toIndentedString(violFlag)).append("\n");
    sb.append("    webDocs: ").append(toIndentedString(webDocs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AIR3yrComplQtrsHistory");
    openapiFields.add("AIRCaseIDs");
    openapiFields.add("AIRCity");
    openapiFields.add("AIRClassification");
    openapiFields.add("AIRComplStatus");
    openapiFields.add("AIRCounty");
    openapiFields.add("AIRDaysLastEval");
    openapiFields.add("AIREPARegion");
    openapiFields.add("AIREvalCnt");
    openapiFields.add("AIRFIPSCode");
    openapiFields.add("AIRFacilityTypeCode");
    openapiFields.add("AIRFacilityTypeDesc");
    openapiFields.add("AIRFeaCnt");
    openapiFields.add("AIRHpvStatus");
    openapiFields.add("AIRIDs");
    openapiFields.add("AIRIeaCnt");
    openapiFields.add("AIRIndianCntryFlg");
    openapiFields.add("AIRLastEvalDate");
    openapiFields.add("AIRLastEvalDateEPA");
    openapiFields.add("AIRLastEvalDateState");
    openapiFields.add("AIRLastFeaDate");
    openapiFields.add("AIRLastFeaDateEPA");
    openapiFields.add("AIRLastFeaDateState");
    openapiFields.add("AIRLastIeaDate");
    openapiFields.add("AIRLastIeaDateEPA");
    openapiFields.add("AIRLastIeaDateState");
    openapiFields.add("AIRLastPenaltyDate");
    openapiFields.add("AIRLastStckDateEPA");
    openapiFields.add("AIRLastStckDateState");
    openapiFields.add("AIRLastStckTestDate");
    openapiFields.add("AIRLastStckTestResults");
    openapiFields.add("AIRLastViolDate");
    openapiFields.add("AIRMacts");
    openapiFields.add("AIRMajorFlag");
    openapiFields.add("AIRMnthsWithHpv");
    openapiFields.add("AIRNAICS");
    openapiFields.add("AIRName");
    openapiFields.add("AIRNsps");
    openapiFields.add("AIRNspsm");
    openapiFields.add("AIRPenalties");
    openapiFields.add("AIRPollRecentViol");
    openapiFields.add("AIRPrograms");
    openapiFields.add("AIRQtrsWithHpv");
    openapiFields.add("AIRQtrsWithViol");
    openapiFields.add("AIRRecentViolCnt");
    openapiFields.add("AIRStackTest5YrAll");
    openapiFields.add("AIRStackTest5YrFail");
    openapiFields.add("AIRState");
    openapiFields.add("AIRStatus");
    openapiFields.add("AIRStreet");
    openapiFields.add("AIRTRIbalEPAids");
    openapiFields.add("AIRTRIbalNames");
    openapiFields.add("AIRUniverse");
    openapiFields.add("AIRZip");
    openapiFields.add("ActiveLower48");
    openapiFields.add("CWAIDs");
    openapiFields.add("CalculatedAccuracyMeters");
    openapiFields.add("CamdIDs");
    openapiFields.add("CensusBlockGroup");
    openapiFields.add("ChesapeakeBayFlag");
    openapiFields.add("CollectionMethod");
    openapiFields.add("CurrSvFlag");
    openapiFields.add("CurrVioFlag");
    openapiFields.add("EPASystem");
    openapiFields.add("Ea5yrFlag");
    openapiFields.add("EisIDs");
    openapiFields.add("EjscreenFlag");
    openapiFields.add("EjscreenFlagUs");
    openapiFields.add("FacCamdReporter");
    openapiFields.add("FacCountyName");
    openapiFields.add("FacDerivedHuc");
    openapiFields.add("FacDerivedTRIbes");
    openapiFields.add("FacDerivedWBD");
    openapiFields.add("FacDerivedWBDName");
    openapiFields.add("FacEisAIRReleases");
    openapiFields.add("FacEisReporter");
    openapiFields.add("FacFIPSCode");
    openapiFields.add("FacFederalAgencyCode");
    openapiFields.add("FacFederalAgencyName");
    openapiFields.add("FacGHGCO2Releases");
    openapiFields.add("FacGHGReporter");
    openapiFields.add("FacIndianCntryFlg");
    openapiFields.add("FacIndianSpatialFlg");
    openapiFields.add("FacLat");
    openapiFields.add("FacLong");
    openapiFields.add("FacMapFlg");
    openapiFields.add("FacMapIcon");
    openapiFields.add("FacNaaFlag");
    openapiFields.add("FacPercentMinority");
    openapiFields.add("FacPopulationDensity");
    openapiFields.add("FacSICCodes");
    openapiFields.add("FacStdCountyName");
    openapiFields.add("FacTRIAIRReleases");
    openapiFields.add("FacTRICarcAIRReleases");
    openapiFields.add("FacTRIHapsReleases");
    openapiFields.add("FacTRIReporter");
    openapiFields.add("FacUsMexBorderFlg");
    openapiFields.add("GHGIDs");
    openapiFields.add("HasPollRpt");
    openapiFields.add("Infea5yrFlag");
    openapiFields.add("Insp5yrFlag");
    openapiFields.add("LastDatePce");
    openapiFields.add("LastDatePceEPA");
    openapiFields.add("LastDatePceSta");
    openapiFields.add("LocalControlRegionCode");
    openapiFields.add("LocalControlRegionName");
    openapiFields.add("Lower48");
    openapiFields.add("MaintPollutantsNaa");
    openapiFields.add("MaintStandardsNaa");
    openapiFields.add("MaintStatusNaa");
    openapiFields.add("Map");
    openapiFields.add("MaxPctileUs");
    openapiFields.add("MaxScore");
    openapiFields.add("NaPollutantsNaa");
    openapiFields.add("NaStandardsNaa");
    openapiFields.add("NaStatusNaa");
    openapiFields.add("NaaCategories");
    openapiFields.add("NaaPollutants");
    openapiFields.add("ObjectId");
    openapiFields.add("OtherPermitIDs");
    openapiFields.add("Over80CountUs");
    openapiFields.add("PctileCancerUs");
    openapiFields.add("PctileDpmUs");
    openapiFields.add("PctileO3Us");
    openapiFields.add("PctilePctpre1960Us");
    openapiFields.add("PctilePmUs");
    openapiFields.add("PctileProximityNPDESUs");
    openapiFields.add("PctileProximityNplUs");
    openapiFields.add("PctileProximityRmpUs");
    openapiFields.add("PctileProximityTsdfUs");
    openapiFields.add("PctileRespUs");
    openapiFields.add("PctileTrafficScoreUs");
    openapiFields.add("RCRAIDs");
    openapiFields.add("ReferencePoint");
    openapiFields.add("RegistryID");
    openapiFields.add("RmpIDs");
    openapiFields.add("SDWAIDs");
    openapiFields.add("Score");
    openapiFields.add("SourceID");
    openapiFields.add("Statute");
    openapiFields.add("TRIIDs");
    openapiFields.add("TRIbalFlag");
    openapiFields.add("ViolFlag");
    openapiFields.add("WebDocs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AIR3yrComplQtrsHistory");
    openapiRequiredFields.add("AIRCaseIDs");
    openapiRequiredFields.add("AIRCity");
    openapiRequiredFields.add("AIRClassification");
    openapiRequiredFields.add("AIRComplStatus");
    openapiRequiredFields.add("AIRCounty");
    openapiRequiredFields.add("AIRDaysLastEval");
    openapiRequiredFields.add("AIREPARegion");
    openapiRequiredFields.add("AIREvalCnt");
    openapiRequiredFields.add("AIRFIPSCode");
    openapiRequiredFields.add("AIRFacilityTypeCode");
    openapiRequiredFields.add("AIRFacilityTypeDesc");
    openapiRequiredFields.add("AIRFeaCnt");
    openapiRequiredFields.add("AIRHpvStatus");
    openapiRequiredFields.add("AIRIDs");
    openapiRequiredFields.add("AIRIeaCnt");
    openapiRequiredFields.add("AIRIndianCntryFlg");
    openapiRequiredFields.add("AIRLastEvalDate");
    openapiRequiredFields.add("AIRLastEvalDateEPA");
    openapiRequiredFields.add("AIRLastEvalDateState");
    openapiRequiredFields.add("AIRLastFeaDate");
    openapiRequiredFields.add("AIRLastFeaDateEPA");
    openapiRequiredFields.add("AIRLastFeaDateState");
    openapiRequiredFields.add("AIRLastIeaDate");
    openapiRequiredFields.add("AIRLastIeaDateEPA");
    openapiRequiredFields.add("AIRLastIeaDateState");
    openapiRequiredFields.add("AIRLastPenaltyDate");
    openapiRequiredFields.add("AIRLastStckDateEPA");
    openapiRequiredFields.add("AIRLastStckDateState");
    openapiRequiredFields.add("AIRLastStckTestDate");
    openapiRequiredFields.add("AIRLastStckTestResults");
    openapiRequiredFields.add("AIRLastViolDate");
    openapiRequiredFields.add("AIRMacts");
    openapiRequiredFields.add("AIRMajorFlag");
    openapiRequiredFields.add("AIRMnthsWithHpv");
    openapiRequiredFields.add("AIRNAICS");
    openapiRequiredFields.add("AIRName");
    openapiRequiredFields.add("AIRNsps");
    openapiRequiredFields.add("AIRNspsm");
    openapiRequiredFields.add("AIRPenalties");
    openapiRequiredFields.add("AIRPollRecentViol");
    openapiRequiredFields.add("AIRPrograms");
    openapiRequiredFields.add("AIRQtrsWithHpv");
    openapiRequiredFields.add("AIRQtrsWithViol");
    openapiRequiredFields.add("AIRRecentViolCnt");
    openapiRequiredFields.add("AIRStackTest5YrAll");
    openapiRequiredFields.add("AIRStackTest5YrFail");
    openapiRequiredFields.add("AIRState");
    openapiRequiredFields.add("AIRStatus");
    openapiRequiredFields.add("AIRStreet");
    openapiRequiredFields.add("AIRTRIbalEPAids");
    openapiRequiredFields.add("AIRTRIbalNames");
    openapiRequiredFields.add("AIRUniverse");
    openapiRequiredFields.add("AIRZip");
    openapiRequiredFields.add("ActiveLower48");
    openapiRequiredFields.add("CWAIDs");
    openapiRequiredFields.add("CalculatedAccuracyMeters");
    openapiRequiredFields.add("CamdIDs");
    openapiRequiredFields.add("CensusBlockGroup");
    openapiRequiredFields.add("ChesapeakeBayFlag");
    openapiRequiredFields.add("CollectionMethod");
    openapiRequiredFields.add("CurrSvFlag");
    openapiRequiredFields.add("CurrVioFlag");
    openapiRequiredFields.add("EPASystem");
    openapiRequiredFields.add("Ea5yrFlag");
    openapiRequiredFields.add("EisIDs");
    openapiRequiredFields.add("EjscreenFlag");
    openapiRequiredFields.add("EjscreenFlagUs");
    openapiRequiredFields.add("FacCamdReporter");
    openapiRequiredFields.add("FacCountyName");
    openapiRequiredFields.add("FacDerivedHuc");
    openapiRequiredFields.add("FacDerivedTRIbes");
    openapiRequiredFields.add("FacDerivedWBD");
    openapiRequiredFields.add("FacDerivedWBDName");
    openapiRequiredFields.add("FacEisAIRReleases");
    openapiRequiredFields.add("FacEisReporter");
    openapiRequiredFields.add("FacFIPSCode");
    openapiRequiredFields.add("FacFederalAgencyCode");
    openapiRequiredFields.add("FacFederalAgencyName");
    openapiRequiredFields.add("FacGHGCO2Releases");
    openapiRequiredFields.add("FacGHGReporter");
    openapiRequiredFields.add("FacIndianCntryFlg");
    openapiRequiredFields.add("FacIndianSpatialFlg");
    openapiRequiredFields.add("FacLat");
    openapiRequiredFields.add("FacLong");
    openapiRequiredFields.add("FacMapFlg");
    openapiRequiredFields.add("FacMapIcon");
    openapiRequiredFields.add("FacNaaFlag");
    openapiRequiredFields.add("FacPercentMinority");
    openapiRequiredFields.add("FacPopulationDensity");
    openapiRequiredFields.add("FacSICCodes");
    openapiRequiredFields.add("FacStdCountyName");
    openapiRequiredFields.add("FacTRIAIRReleases");
    openapiRequiredFields.add("FacTRICarcAIRReleases");
    openapiRequiredFields.add("FacTRIHapsReleases");
    openapiRequiredFields.add("FacTRIReporter");
    openapiRequiredFields.add("FacUsMexBorderFlg");
    openapiRequiredFields.add("GHGIDs");
    openapiRequiredFields.add("HasPollRpt");
    openapiRequiredFields.add("Infea5yrFlag");
    openapiRequiredFields.add("Insp5yrFlag");
    openapiRequiredFields.add("LastDatePce");
    openapiRequiredFields.add("LastDatePceEPA");
    openapiRequiredFields.add("LastDatePceSta");
    openapiRequiredFields.add("LocalControlRegionCode");
    openapiRequiredFields.add("LocalControlRegionName");
    openapiRequiredFields.add("Lower48");
    openapiRequiredFields.add("MaintPollutantsNaa");
    openapiRequiredFields.add("MaintStandardsNaa");
    openapiRequiredFields.add("MaintStatusNaa");
    openapiRequiredFields.add("Map");
    openapiRequiredFields.add("MaxPctileUs");
    openapiRequiredFields.add("MaxScore");
    openapiRequiredFields.add("NaPollutantsNaa");
    openapiRequiredFields.add("NaStandardsNaa");
    openapiRequiredFields.add("NaStatusNaa");
    openapiRequiredFields.add("NaaCategories");
    openapiRequiredFields.add("NaaPollutants");
    openapiRequiredFields.add("ObjectId");
    openapiRequiredFields.add("OtherPermitIDs");
    openapiRequiredFields.add("Over80CountUs");
    openapiRequiredFields.add("PctileCancerUs");
    openapiRequiredFields.add("PctileDpmUs");
    openapiRequiredFields.add("PctileO3Us");
    openapiRequiredFields.add("PctilePctpre1960Us");
    openapiRequiredFields.add("PctilePmUs");
    openapiRequiredFields.add("PctileProximityNPDESUs");
    openapiRequiredFields.add("PctileProximityNplUs");
    openapiRequiredFields.add("PctileProximityRmpUs");
    openapiRequiredFields.add("PctileProximityTsdfUs");
    openapiRequiredFields.add("PctileRespUs");
    openapiRequiredFields.add("PctileTrafficScoreUs");
    openapiRequiredFields.add("RCRAIDs");
    openapiRequiredFields.add("ReferencePoint");
    openapiRequiredFields.add("RegistryID");
    openapiRequiredFields.add("RmpIDs");
    openapiRequiredFields.add("SDWAIDs");
    openapiRequiredFields.add("Score");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("Statute");
    openapiRequiredFields.add("TRIIDs");
    openapiRequiredFields.add("TRIbalFlag");
    openapiRequiredFields.add("ViolFlag");
    openapiRequiredFields.add("WebDocs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Air06
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Air06.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Air06 is not found in the empty JSON string", Air06.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Air06.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Air06` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Air06.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AIR3yrComplQtrsHistory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIR3yrComplQtrsHistory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIR3yrComplQtrsHistory").toString()));
      }
      if (!jsonObj.get("AIRCaseIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRCaseIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRCaseIDs").toString()));
      }
      if (!jsonObj.get("AIRCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRCity").toString()));
      }
      if (!jsonObj.get("AIRClassification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRClassification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRClassification").toString()));
      }
      if (!jsonObj.get("AIRComplStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRComplStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRComplStatus").toString()));
      }
      if (!jsonObj.get("AIRCounty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRCounty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRCounty").toString()));
      }
      if (!jsonObj.get("AIRDaysLastEval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRDaysLastEval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRDaysLastEval").toString()));
      }
      if (!jsonObj.get("AIREPARegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIREPARegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIREPARegion").toString()));
      }
      if (!jsonObj.get("AIREvalCnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIREvalCnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIREvalCnt").toString()));
      }
      if (!jsonObj.get("AIRFIPSCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRFIPSCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRFIPSCode").toString()));
      }
      if (!jsonObj.get("AIRFacilityTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRFacilityTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRFacilityTypeCode").toString()));
      }
      if (!jsonObj.get("AIRFacilityTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRFacilityTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRFacilityTypeDesc").toString()));
      }
      if (!jsonObj.get("AIRFeaCnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRFeaCnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRFeaCnt").toString()));
      }
      if (!jsonObj.get("AIRHpvStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRHpvStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRHpvStatus").toString()));
      }
      if (!jsonObj.get("AIRIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRIDs").toString()));
      }
      if (!jsonObj.get("AIRIeaCnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRIeaCnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRIeaCnt").toString()));
      }
      if (!jsonObj.get("AIRIndianCntryFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRIndianCntryFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRIndianCntryFlg").toString()));
      }
      if (!jsonObj.get("AIRLastEvalDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastEvalDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastEvalDate").toString()));
      }
      if (!jsonObj.get("AIRLastEvalDateEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastEvalDateEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastEvalDateEPA").toString()));
      }
      if (!jsonObj.get("AIRLastEvalDateState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastEvalDateState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastEvalDateState").toString()));
      }
      if (!jsonObj.get("AIRLastFeaDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastFeaDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastFeaDate").toString()));
      }
      if (!jsonObj.get("AIRLastFeaDateEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastFeaDateEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastFeaDateEPA").toString()));
      }
      if (!jsonObj.get("AIRLastFeaDateState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastFeaDateState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastFeaDateState").toString()));
      }
      if (!jsonObj.get("AIRLastIeaDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastIeaDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastIeaDate").toString()));
      }
      if (!jsonObj.get("AIRLastIeaDateEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastIeaDateEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastIeaDateEPA").toString()));
      }
      if (!jsonObj.get("AIRLastIeaDateState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastIeaDateState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastIeaDateState").toString()));
      }
      if (!jsonObj.get("AIRLastPenaltyDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastPenaltyDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastPenaltyDate").toString()));
      }
      if (!jsonObj.get("AIRLastStckDateEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastStckDateEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastStckDateEPA").toString()));
      }
      if (!jsonObj.get("AIRLastStckDateState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastStckDateState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastStckDateState").toString()));
      }
      if (!jsonObj.get("AIRLastStckTestDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastStckTestDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastStckTestDate").toString()));
      }
      if (!jsonObj.get("AIRLastStckTestResults").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastStckTestResults` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastStckTestResults").toString()));
      }
      if (!jsonObj.get("AIRLastViolDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRLastViolDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRLastViolDate").toString()));
      }
      if (!jsonObj.get("AIRMacts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRMacts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRMacts").toString()));
      }
      if (!jsonObj.get("AIRMajorFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRMajorFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRMajorFlag").toString()));
      }
      if (!jsonObj.get("AIRMnthsWithHpv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRMnthsWithHpv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRMnthsWithHpv").toString()));
      }
      if (!jsonObj.get("AIRNAICS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRNAICS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRNAICS").toString()));
      }
      if (!jsonObj.get("AIRName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRName").toString()));
      }
      if (!jsonObj.get("AIRNsps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRNsps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRNsps").toString()));
      }
      if (!jsonObj.get("AIRNspsm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRNspsm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRNspsm").toString()));
      }
      if (!jsonObj.get("AIRPenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRPenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRPenalties").toString()));
      }
      if (!jsonObj.get("AIRPollRecentViol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRPollRecentViol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRPollRecentViol").toString()));
      }
      if (!jsonObj.get("AIRPrograms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRPrograms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRPrograms").toString()));
      }
      if (!jsonObj.get("AIRQtrsWithHpv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRQtrsWithHpv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRQtrsWithHpv").toString()));
      }
      if (!jsonObj.get("AIRQtrsWithViol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRQtrsWithViol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRQtrsWithViol").toString()));
      }
      if (!jsonObj.get("AIRRecentViolCnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRRecentViolCnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRRecentViolCnt").toString()));
      }
      if (!jsonObj.get("AIRStackTest5YrAll").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRStackTest5YrAll` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRStackTest5YrAll").toString()));
      }
      if (!jsonObj.get("AIRStackTest5YrFail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRStackTest5YrFail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRStackTest5YrFail").toString()));
      }
      if (!jsonObj.get("AIRState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRState").toString()));
      }
      if (!jsonObj.get("AIRStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRStatus").toString()));
      }
      if (!jsonObj.get("AIRStreet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRStreet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRStreet").toString()));
      }
      if (!jsonObj.get("AIRTRIbalEPAids").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRTRIbalEPAids` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRTRIbalEPAids").toString()));
      }
      if (!jsonObj.get("AIRTRIbalNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRTRIbalNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRTRIbalNames").toString()));
      }
      if (!jsonObj.get("AIRUniverse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRUniverse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRUniverse").toString()));
      }
      if (!jsonObj.get("AIRZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRZip").toString()));
      }
      if (!jsonObj.get("ActiveLower48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActiveLower48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActiveLower48").toString()));
      }
      if (!jsonObj.get("CWAIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWAIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWAIDs").toString()));
      }
      if (!jsonObj.get("CalculatedAccuracyMeters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CalculatedAccuracyMeters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CalculatedAccuracyMeters").toString()));
      }
      if (!jsonObj.get("CamdIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CamdIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CamdIDs").toString()));
      }
      if (!jsonObj.get("CensusBlockGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CensusBlockGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CensusBlockGroup").toString()));
      }
      if (!jsonObj.get("ChesapeakeBayFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChesapeakeBayFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChesapeakeBayFlag").toString()));
      }
      if (!jsonObj.get("CollectionMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CollectionMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CollectionMethod").toString()));
      }
      if (!jsonObj.get("CurrSvFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrSvFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrSvFlag").toString()));
      }
      if (!jsonObj.get("CurrVioFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrVioFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrVioFlag").toString()));
      }
      if (!jsonObj.get("EPASystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPASystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPASystem").toString()));
      }
      if (!jsonObj.get("Ea5yrFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ea5yrFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ea5yrFlag").toString()));
      }
      if (!jsonObj.get("EisIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EisIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EisIDs").toString()));
      }
      if (!jsonObj.get("EjscreenFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EjscreenFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EjscreenFlag").toString()));
      }
      if (!jsonObj.get("EjscreenFlagUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EjscreenFlagUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EjscreenFlagUs").toString()));
      }
      if (!jsonObj.get("FacCamdReporter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacCamdReporter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacCamdReporter").toString()));
      }
      if (!jsonObj.get("FacCountyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacCountyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacCountyName").toString()));
      }
      if (!jsonObj.get("FacDerivedHuc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedHuc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedHuc").toString()));
      }
      if (!jsonObj.get("FacDerivedTRIbes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedTRIbes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedTRIbes").toString()));
      }
      if (!jsonObj.get("FacDerivedWBD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBD").toString()));
      }
      if (!jsonObj.get("FacDerivedWBDName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBDName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBDName").toString()));
      }
      if (!jsonObj.get("FacEisAIRReleases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacEisAIRReleases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacEisAIRReleases").toString()));
      }
      if (!jsonObj.get("FacEisReporter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacEisReporter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacEisReporter").toString()));
      }
      if (!jsonObj.get("FacFIPSCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFIPSCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFIPSCode").toString()));
      }
      if (!jsonObj.get("FacFederalAgencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFederalAgencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFederalAgencyCode").toString()));
      }
      if (!jsonObj.get("FacFederalAgencyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFederalAgencyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFederalAgencyName").toString()));
      }
      if (!jsonObj.get("FacGHGCO2Releases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacGHGCO2Releases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacGHGCO2Releases").toString()));
      }
      if (!jsonObj.get("FacGHGReporter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacGHGReporter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacGHGReporter").toString()));
      }
      if (!jsonObj.get("FacIndianCntryFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacIndianCntryFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacIndianCntryFlg").toString()));
      }
      if (!jsonObj.get("FacIndianSpatialFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacIndianSpatialFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacIndianSpatialFlg").toString()));
      }
      if (!jsonObj.get("FacLat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacLat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacLat").toString()));
      }
      if (!jsonObj.get("FacLong").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacLong` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacLong").toString()));
      }
      if (!jsonObj.get("FacMapFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacMapFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacMapFlg").toString()));
      }
      if (!jsonObj.get("FacMapIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacMapIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacMapIcon").toString()));
      }
      if (!jsonObj.get("FacNaaFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacNaaFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacNaaFlag").toString()));
      }
      if (!jsonObj.get("FacPercentMinority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacPercentMinority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacPercentMinority").toString()));
      }
      if (!jsonObj.get("FacPopulationDensity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacPopulationDensity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacPopulationDensity").toString()));
      }
      if (!jsonObj.get("FacSICCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacSICCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacSICCodes").toString()));
      }
      if (!jsonObj.get("FacStdCountyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacStdCountyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacStdCountyName").toString()));
      }
      if (!jsonObj.get("FacTRIAIRReleases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTRIAIRReleases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTRIAIRReleases").toString()));
      }
      if (!jsonObj.get("FacTRICarcAIRReleases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTRICarcAIRReleases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTRICarcAIRReleases").toString()));
      }
      if (!jsonObj.get("FacTRIHapsReleases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTRIHapsReleases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTRIHapsReleases").toString()));
      }
      if (!jsonObj.get("FacTRIReporter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTRIReporter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTRIReporter").toString()));
      }
      if (!jsonObj.get("FacUsMexBorderFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacUsMexBorderFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacUsMexBorderFlg").toString()));
      }
      if (!jsonObj.get("GHGIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GHGIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GHGIDs").toString()));
      }
      if (!jsonObj.get("HasPollRpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HasPollRpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HasPollRpt").toString()));
      }
      if (!jsonObj.get("Infea5yrFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Infea5yrFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Infea5yrFlag").toString()));
      }
      if (!jsonObj.get("Insp5yrFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Insp5yrFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Insp5yrFlag").toString()));
      }
      if (!jsonObj.get("LastDatePce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastDatePce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastDatePce").toString()));
      }
      if (!jsonObj.get("LastDatePceEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastDatePceEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastDatePceEPA").toString()));
      }
      if (!jsonObj.get("LastDatePceSta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastDatePceSta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastDatePceSta").toString()));
      }
      if (!jsonObj.get("LocalControlRegionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalControlRegionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalControlRegionCode").toString()));
      }
      if (!jsonObj.get("LocalControlRegionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalControlRegionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalControlRegionName").toString()));
      }
      if (!jsonObj.get("Lower48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Lower48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Lower48").toString()));
      }
      if (!jsonObj.get("MaintPollutantsNaa").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaintPollutantsNaa` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaintPollutantsNaa").toString()));
      }
      if (!jsonObj.get("MaintStandardsNaa").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaintStandardsNaa` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaintStandardsNaa").toString()));
      }
      if (!jsonObj.get("MaintStatusNaa").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaintStatusNaa` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaintStatusNaa").toString()));
      }
      if (!jsonObj.get("Map").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Map` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Map").toString()));
      }
      if (!jsonObj.get("MaxPctileUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxPctileUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxPctileUs").toString()));
      }
      if (!jsonObj.get("MaxScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxScore").toString()));
      }
      if (!jsonObj.get("NaPollutantsNaa").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NaPollutantsNaa` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NaPollutantsNaa").toString()));
      }
      if (!jsonObj.get("NaStandardsNaa").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NaStandardsNaa` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NaStandardsNaa").toString()));
      }
      if (!jsonObj.get("NaStatusNaa").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NaStatusNaa` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NaStatusNaa").toString()));
      }
      if (!jsonObj.get("NaaCategories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NaaCategories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NaaCategories").toString()));
      }
      if (!jsonObj.get("NaaPollutants").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NaaPollutants` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NaaPollutants").toString()));
      }
      if (!jsonObj.get("ObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ObjectId").toString()));
      }
      if (!jsonObj.get("OtherPermitIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OtherPermitIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OtherPermitIDs").toString()));
      }
      if (!jsonObj.get("Over80CountUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Over80CountUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Over80CountUs").toString()));
      }
      if (!jsonObj.get("PctileCancerUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileCancerUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileCancerUs").toString()));
      }
      if (!jsonObj.get("PctileDpmUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileDpmUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileDpmUs").toString()));
      }
      if (!jsonObj.get("PctileO3Us").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileO3Us` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileO3Us").toString()));
      }
      if (!jsonObj.get("PctilePctpre1960Us").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctilePctpre1960Us` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctilePctpre1960Us").toString()));
      }
      if (!jsonObj.get("PctilePmUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctilePmUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctilePmUs").toString()));
      }
      if (!jsonObj.get("PctileProximityNPDESUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityNPDESUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityNPDESUs").toString()));
      }
      if (!jsonObj.get("PctileProximityNplUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityNplUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityNplUs").toString()));
      }
      if (!jsonObj.get("PctileProximityRmpUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityRmpUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityRmpUs").toString()));
      }
      if (!jsonObj.get("PctileProximityTsdfUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityTsdfUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityTsdfUs").toString()));
      }
      if (!jsonObj.get("PctileRespUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileRespUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileRespUs").toString()));
      }
      if (!jsonObj.get("PctileTrafficScoreUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileTrafficScoreUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileTrafficScoreUs").toString()));
      }
      if (!jsonObj.get("RCRAIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAIDs").toString()));
      }
      if (!jsonObj.get("ReferencePoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReferencePoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReferencePoint").toString()));
      }
      if (!jsonObj.get("RegistryID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistryID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistryID").toString()));
      }
      if (!jsonObj.get("RmpIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RmpIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RmpIDs").toString()));
      }
      if (!jsonObj.get("SDWAIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAIDs").toString()));
      }
      if (!jsonObj.get("Score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Score").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("Statute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Statute").toString()));
      }
      if (!jsonObj.get("TRIIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIIDs").toString()));
      }
      if (!jsonObj.get("TRIbalFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIbalFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIbalFlag").toString()));
      }
      if (!jsonObj.get("ViolFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolFlag").toString()));
      }
      if (!jsonObj.get("WebDocs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebDocs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebDocs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Air06.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Air06' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Air06> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Air06.class));

       return (TypeAdapter<T>) new TypeAdapter<Air06>() {
           @Override
           public void write(JsonWriter out, Air06 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Air06 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Air06 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Air06
   * @throws IOException if the JSON string is invalid with respect to Air06
   */
  public static Air06 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Air06.class);
  }

  /**
   * Convert an instance of Air06 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

