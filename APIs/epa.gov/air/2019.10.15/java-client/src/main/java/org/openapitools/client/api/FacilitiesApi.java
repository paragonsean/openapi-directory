/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AirRestServicesGetFacilitiesGet200Response;
import org.openapitools.client.model.AirRestServicesGetFacilityInfoGet200Response;
import org.openapitools.client.model.AirRestServicesGetGeojsonGet200Response;
import org.openapitools.client.model.AirRestServicesGetMapGet200Response;
import org.openapitools.client.model.AirRestServicesGetQidGet200Response;
import java.math.BigDecimal;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FacilitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FacilitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FacilitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for airRestServicesGetDownloadGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetDownloadGetCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetDownloadGetValidateBeforeCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling airRestServicesGetDownloadGet(Async)");
        }

        return airRestServicesGetDownloadGetCall(qid, output, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Clean Air Act Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma sepated vaule (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File airRestServicesGetDownloadGet(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = airRestServicesGetDownloadGetWithHttpInfo(qid, output, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma sepated vaule (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> airRestServicesGetDownloadGetWithHttpInfo(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetDownloadGetValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Download Data Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma sepated vaule (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetDownloadGetAsync(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetDownloadGetValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetDownloadPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetDownloadPostCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetDownloadPostValidateBeforeCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling airRestServicesGetDownloadPost(Async)");
        }

        return airRestServicesGetDownloadPostCall(qid, output, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Clean Air Act Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma sepated vaule (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File airRestServicesGetDownloadPost(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = airRestServicesGetDownloadPostWithHttpInfo(qid, output, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma sepated vaule (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> airRestServicesGetDownloadPostWithHttpInfo(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetDownloadPostValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Download Data Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma sepated vaule (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetDownloadPostAsync(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetDownloadPostValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetFacilitiesGet
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \&quot;TSDF\&quot; to return the full enforcement TSDF universe and \&quot;Operating TSDF\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \&quot;Y\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetFacilitiesGetCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_facilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (pFn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fn", pFn));
        }

        if (pSa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa", pSa));
        }

        if (pSa1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa1", pSa1));
        }

        if (pCt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ct", pCt));
        }

        if (pCo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_co", pCo));
        }

        if (pFips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fips", pFips));
        }

        if (pSt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_st", pSt));
        }

        if (pZip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_zip", pZip));
        }

        if (pLcon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_lcon", pLcon));
        }

        if (pFrs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_frs", pFrs));
        }

        if (pReg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_reg", pReg));
        }

        if (pSic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic", pSic));
        }

        if (pNcs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ncs", pNcs));
        }

        if (pQnc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qnc", pQnc));
        }

        if (pPen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pen", pPen));
        }

        if (pOpst != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_opst", pOpst));
        }

        if (pC1lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c1lat", pC1lat));
        }

        if (pC1lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c1lon", pC1lon));
        }

        if (pC2lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c2lat", pC2lat));
        }

        if (pC2lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c2lon", pC2lon));
        }

        if (pUsmex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_usmex", pUsmex));
        }

        if (pSic2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic2", pSic2));
        }

        if (pSic4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic4", pSic4));
        }

        if (pFa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fa", pFa));
        }

        if (pAct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_act", pAct));
        }

        if (pMaj != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_maj", pMaj));
        }

        if (pMact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_mact", pMact));
        }

        if (pNsps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nsps", pNsps));
        }

        if (pNspsm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nspsm", pNspsm));
        }

        if (pProg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_prog", pProg));
        }

        if (pFea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fea", pFea));
        }

        if (pFeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feay", pFeay));
        }

        if (pFeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feaa", pFeaa));
        }

        if (pIea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iea", pIea));
        }

        if (pIeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieay", pIeay));
        }

        if (pIeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieaa", pIeaa));
        }

        if (pQiv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qiv", pQiv));
        }

        if (pNaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_naa", pNaa));
        }

        if (pImpw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_impw", pImpw));
        }

        if (pTrep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_trep", pTrep));
        }

        if (pTriCat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tri_cat", pTriCat));
        }

        if (pTriAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tri_amt", pTriAmt));
        }

        if (pTriAnyAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tri_any_amt", pTriAnyAmt));
        }

        if (pTriPol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tri_pol", pTriPol));
        }

        if (pGhgCat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ghg_cat", pGhgCat));
        }

        if (pGhgAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ghg_amt", pGhgAmt));
        }

        if (pGhgAnyAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ghg_any_amt", pGhgAnyAmt));
        }

        if (pGhgYr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ghg_yr", pGhgYr));
        }

        if (pNeiPol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nei_pol", pNeiPol));
        }

        if (pNeiAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nei_amt", pNeiAmt));
        }

        if (pNeiAnyAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nei_any_amt", pNeiAnyAmt));
        }

        if (pNeiYr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nei_yr", pNeiYr));
        }

        if (pNeiCat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nei_cat", pNeiCat));
        }

        if (pPm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pm", pPm));
        }

        if (pPd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pd", pPd));
        }

        if (pIco != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ico", pIco));
        }

        if (pHuc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_huc", pHuc));
        }

        if (pWbd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_wbd", pWbd));
        }

        if (pPid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pid", pPid));
        }

        if (pMed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_med", pMed));
        }

        if (pYsl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysl", pYsl));
        }

        if (pYsly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysly", pYsly));
        }

        if (pYsla != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysla", pYsla));
        }

        if (pStsl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stsl", pStsl));
        }

        if (pStsly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stsly", pStsly));
        }

        if (pStsla != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stsla", pStsla));
        }

        if (pStres != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stres", pStres));
        }

        if (pSttyp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sttyp", pSttyp));
        }

        if (pQs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qs", pQs));
        }

        if (pSfs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sfs", pSfs));
        }

        if (pTribeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribeid", pTribeid));
        }

        if (pTribename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribename", pTribename));
        }

        if (pTribedist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribedist", pTribedist));
        }

        if (pOwop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_owop", pOwop));
        }

        if (pAgoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_agoo", pAgoo));
        }

        if (pIdt1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_idt1", pIdt1));
        }

        if (pIdt2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_idt2", pIdt2));
        }

        if (pStdt1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stdt1", pStdt1));
        }

        if (pStdt2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stdt2", pStdt2));
        }

        if (pPityp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pityp", pPityp));
        }

        if (pCifdi != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_cifdi", pCifdi));
        }

        if (pPfead1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfead1", pPfead1));
        }

        if (pPfead2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfead2", pPfead2));
        }

        if (pPfeat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfeat", pPfeat));
        }

        if (pPsncq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_psncq", pPsncq));
        }

        if (pPctrack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pctrack", pPctrack));
        }

        if (pSwpa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_swpa", pSwpa));
        }

        if (pDes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_des", pDes));
        }

        if (pFntype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fntype", pFntype));
        }

        if (pHpvmth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_hpvmth", pHpvmth));
        }

        if (pRecvio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_recvio", pRecvio));
        }

        if (pPollvio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pollvio", pPollvio));
        }

        if (pAr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ar", pAr));
        }

        if (pTriYr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tri_yr", pTriYr));
        }

        if (pPidall != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pidall", pPidall));
        }

        if (pFacIco != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fac_ico", pFacIco));
        }

        if (pIcoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_icoo", pIcoo));
        }

        if (pFacIcos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fac_icos", pFacIcos));
        }

        if (pEjscreen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen", pEjscreen));
        }

        if (pLimitAddr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_limit_addr", pLimitAddr));
        }

        if (pLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_lat", pLat));
        }

        if (pLong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_long", pLong));
        }

        if (pRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_radius", pRadius));
        }

        if (pDecouple != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_decouple", pDecouple));
        }

        if (pEjscreenOver80cnt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen_over80cnt", pEjscreenOver80cnt));
        }

        if (queryset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryset", queryset));
        }

        if (responseset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseset", responseset));
        }

        if (tablelist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tablelist", tablelist));
        }

        if (maplist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maplist", maplist));
        }

        if (summarylist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarylist", summarylist));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetFacilitiesGetValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback _callback) throws ApiException {
        return airRestServicesGetFacilitiesGetCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, _callback);

    }

    /**
     * Clean Air Act Facility Search
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \&quot;TSDF\&quot; to return the full enforcement TSDF universe and \&quot;Operating TSDF\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \&quot;Y\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return AirRestServicesGetFacilitiesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public AirRestServicesGetFacilitiesGet200Response airRestServicesGetFacilitiesGet(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns) throws ApiException {
        ApiResponse<AirRestServicesGetFacilitiesGet200Response> localVarResp = airRestServicesGetFacilitiesGetWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Facility Search
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \&quot;TSDF\&quot; to return the full enforcement TSDF universe and \&quot;Operating TSDF\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \&quot;Y\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return ApiResponse&lt;AirRestServicesGetFacilitiesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirRestServicesGetFacilitiesGet200Response> airRestServicesGetFacilitiesGetWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetFacilitiesGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, null);
        Type localVarReturnType = new TypeToken<AirRestServicesGetFacilitiesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Facility Search (asynchronously)
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \&quot;TSDF\&quot; to return the full enforcement TSDF universe and \&quot;Operating TSDF\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \&quot;Y\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetFacilitiesGetAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback<AirRestServicesGetFacilitiesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetFacilitiesGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, _callback);
        Type localVarReturnType = new TypeToken<AirRestServicesGetFacilitiesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetFacilitiesPost
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \\\&quot;TSDF\\\&quot; to return the full enforcement TSDF universe and \\\&quot;Operating TSDF\\\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \\\&quot;Y\\\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetFacilitiesPostCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_facilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (pFn != null) {
            localVarFormParams.put("p_fn", pFn);
        }

        if (pSa != null) {
            localVarFormParams.put("p_sa", pSa);
        }

        if (pSa1 != null) {
            localVarFormParams.put("p_sa1", pSa1);
        }

        if (pCt != null) {
            localVarFormParams.put("p_ct", pCt);
        }

        if (pCo != null) {
            localVarFormParams.put("p_co", pCo);
        }

        if (pFips != null) {
            localVarFormParams.put("p_fips", pFips);
        }

        if (pSt != null) {
            localVarFormParams.put("p_st", pSt);
        }

        if (pZip != null) {
            localVarFormParams.put("p_zip", pZip);
        }

        if (pLcon != null) {
            localVarFormParams.put("p_lcon", pLcon);
        }

        if (pFrs != null) {
            localVarFormParams.put("p_frs", pFrs);
        }

        if (pReg != null) {
            localVarFormParams.put("p_reg", pReg);
        }

        if (pSic != null) {
            localVarFormParams.put("p_sic", pSic);
        }

        if (pNcs != null) {
            localVarFormParams.put("p_ncs", pNcs);
        }

        if (pQnc != null) {
            localVarFormParams.put("p_qnc", pQnc);
        }

        if (pPen != null) {
            localVarFormParams.put("p_pen", pPen);
        }

        if (pOpst != null) {
            localVarFormParams.put("p_opst", pOpst);
        }

        if (pC1lat != null) {
            localVarFormParams.put("p_c1lat", pC1lat);
        }

        if (pC1lon != null) {
            localVarFormParams.put("p_c1lon", pC1lon);
        }

        if (pC2lat != null) {
            localVarFormParams.put("p_c2lat", pC2lat);
        }

        if (pC2lon != null) {
            localVarFormParams.put("p_c2lon", pC2lon);
        }

        if (pUsmex != null) {
            localVarFormParams.put("p_usmex", pUsmex);
        }

        if (pSic2 != null) {
            localVarFormParams.put("p_sic2", pSic2);
        }

        if (pSic4 != null) {
            localVarFormParams.put("p_sic4", pSic4);
        }

        if (pFa != null) {
            localVarFormParams.put("p_fa", pFa);
        }

        if (pAct != null) {
            localVarFormParams.put("p_act", pAct);
        }

        if (pMaj != null) {
            localVarFormParams.put("p_maj", pMaj);
        }

        if (pMact != null) {
            localVarFormParams.put("p_mact", pMact);
        }

        if (pNsps != null) {
            localVarFormParams.put("p_nsps", pNsps);
        }

        if (pNspsm != null) {
            localVarFormParams.put("p_nspsm", pNspsm);
        }

        if (pProg != null) {
            localVarFormParams.put("p_prog", pProg);
        }

        if (pFea != null) {
            localVarFormParams.put("p_fea", pFea);
        }

        if (pFeay != null) {
            localVarFormParams.put("p_feay", pFeay);
        }

        if (pFeaa != null) {
            localVarFormParams.put("p_feaa", pFeaa);
        }

        if (pIea != null) {
            localVarFormParams.put("p_iea", pIea);
        }

        if (pIeay != null) {
            localVarFormParams.put("p_ieay", pIeay);
        }

        if (pIeaa != null) {
            localVarFormParams.put("p_ieaa", pIeaa);
        }

        if (pQiv != null) {
            localVarFormParams.put("p_qiv", pQiv);
        }

        if (pNaa != null) {
            localVarFormParams.put("p_naa", pNaa);
        }

        if (pImpw != null) {
            localVarFormParams.put("p_impw", pImpw);
        }

        if (pTrep != null) {
            localVarFormParams.put("p_trep", pTrep);
        }

        if (pTriCat != null) {
            localVarFormParams.put("p_tri_cat", pTriCat);
        }

        if (pTriAmt != null) {
            localVarFormParams.put("p_tri_amt", pTriAmt);
        }

        if (pTriAnyAmt != null) {
            localVarFormParams.put("p_tri_any_amt", pTriAnyAmt);
        }

        if (pTriPol != null) {
            localVarFormParams.put("p_tri_pol", pTriPol);
        }

        if (pGhgCat != null) {
            localVarFormParams.put("p_ghg_cat", pGhgCat);
        }

        if (pGhgAmt != null) {
            localVarFormParams.put("p_ghg_amt", pGhgAmt);
        }

        if (pGhgAnyAmt != null) {
            localVarFormParams.put("p_ghg_any_amt", pGhgAnyAmt);
        }

        if (pGhgYr != null) {
            localVarFormParams.put("p_ghg_yr", pGhgYr);
        }

        if (pNeiPol != null) {
            localVarFormParams.put("p_nei_pol", pNeiPol);
        }

        if (pNeiAmt != null) {
            localVarFormParams.put("p_nei_amt", pNeiAmt);
        }

        if (pNeiAnyAmt != null) {
            localVarFormParams.put("p_nei_any_amt", pNeiAnyAmt);
        }

        if (pNeiYr != null) {
            localVarFormParams.put("p_nei_yr", pNeiYr);
        }

        if (pNeiCat != null) {
            localVarFormParams.put("p_nei_cat", pNeiCat);
        }

        if (pPm != null) {
            localVarFormParams.put("p_pm", pPm);
        }

        if (pPd != null) {
            localVarFormParams.put("p_pd", pPd);
        }

        if (pIco != null) {
            localVarFormParams.put("p_ico", pIco);
        }

        if (pHuc != null) {
            localVarFormParams.put("p_huc", pHuc);
        }

        if (pWbd != null) {
            localVarFormParams.put("p_wbd", pWbd);
        }

        if (pPid != null) {
            localVarFormParams.put("p_pid", pPid);
        }

        if (pMed != null) {
            localVarFormParams.put("p_med", pMed);
        }

        if (pYsl != null) {
            localVarFormParams.put("p_ysl", pYsl);
        }

        if (pYsly != null) {
            localVarFormParams.put("p_ysly", pYsly);
        }

        if (pYsla != null) {
            localVarFormParams.put("p_ysla", pYsla);
        }

        if (pStsl != null) {
            localVarFormParams.put("p_stsl", pStsl);
        }

        if (pStsly != null) {
            localVarFormParams.put("p_stsly", pStsly);
        }

        if (pStsla != null) {
            localVarFormParams.put("p_stsla", pStsla);
        }

        if (pStres != null) {
            localVarFormParams.put("p_stres", pStres);
        }

        if (pSttyp != null) {
            localVarFormParams.put("p_sttyp", pSttyp);
        }

        if (pQs != null) {
            localVarFormParams.put("p_qs", pQs);
        }

        if (pSfs != null) {
            localVarFormParams.put("p_sfs", pSfs);
        }

        if (pTribeid != null) {
            localVarFormParams.put("p_tribeid", pTribeid);
        }

        if (pTribename != null) {
            localVarFormParams.put("p_tribename", pTribename);
        }

        if (pTribedist != null) {
            localVarFormParams.put("p_tribedist", pTribedist);
        }

        if (pOwop != null) {
            localVarFormParams.put("p_owop", pOwop);
        }

        if (pAgoo != null) {
            localVarFormParams.put("p_agoo", pAgoo);
        }

        if (pIdt1 != null) {
            localVarFormParams.put("p_idt1", pIdt1);
        }

        if (pIdt2 != null) {
            localVarFormParams.put("p_idt2", pIdt2);
        }

        if (pStdt1 != null) {
            localVarFormParams.put("p_stdt1", pStdt1);
        }

        if (pStdt2 != null) {
            localVarFormParams.put("p_stdt2", pStdt2);
        }

        if (pPityp != null) {
            localVarFormParams.put("p_pityp", pPityp);
        }

        if (pCifdi != null) {
            localVarFormParams.put("p_cifdi", pCifdi);
        }

        if (pPfead1 != null) {
            localVarFormParams.put("p_pfead1", pPfead1);
        }

        if (pPfead2 != null) {
            localVarFormParams.put("p_pfead2", pPfead2);
        }

        if (pPfeat != null) {
            localVarFormParams.put("p_pfeat", pPfeat);
        }

        if (pPsncq != null) {
            localVarFormParams.put("p_psncq", pPsncq);
        }

        if (pPctrack != null) {
            localVarFormParams.put("p_pctrack", pPctrack);
        }

        if (pSwpa != null) {
            localVarFormParams.put("p_swpa", pSwpa);
        }

        if (pDes != null) {
            localVarFormParams.put("p_des", pDes);
        }

        if (pFntype != null) {
            localVarFormParams.put("p_fntype", pFntype);
        }

        if (pHpvmth != null) {
            localVarFormParams.put("p_hpvmth", pHpvmth);
        }

        if (pRecvio != null) {
            localVarFormParams.put("p_recvio", pRecvio);
        }

        if (pPollvio != null) {
            localVarFormParams.put("p_pollvio", pPollvio);
        }

        if (pAr != null) {
            localVarFormParams.put("p_ar", pAr);
        }

        if (pTriYr != null) {
            localVarFormParams.put("p_tri_yr", pTriYr);
        }

        if (pPidall != null) {
            localVarFormParams.put("p_pidall", pPidall);
        }

        if (pFacIco != null) {
            localVarFormParams.put("p_fac_ico", pFacIco);
        }

        if (pIcoo != null) {
            localVarFormParams.put("p_icoo", pIcoo);
        }

        if (pFacIcos != null) {
            localVarFormParams.put("p_fac_icos", pFacIcos);
        }

        if (pEjscreen != null) {
            localVarFormParams.put("p_ejscreen", pEjscreen);
        }

        if (pLimitAddr != null) {
            localVarFormParams.put("p_limit_addr", pLimitAddr);
        }

        if (pLat != null) {
            localVarFormParams.put("p_lat", pLat);
        }

        if (pLong != null) {
            localVarFormParams.put("p_long", pLong);
        }

        if (pRadius != null) {
            localVarFormParams.put("p_radius", pRadius);
        }

        if (pDecouple != null) {
            localVarFormParams.put("p_decouple", pDecouple);
        }

        if (pEjscreenOver80cnt != null) {
            localVarFormParams.put("p_ejscreen_over80cnt", pEjscreenOver80cnt);
        }

        if (queryset != null) {
            localVarFormParams.put("queryset", queryset);
        }

        if (responseset != null) {
            localVarFormParams.put("responseset", responseset);
        }

        if (tablelist != null) {
            localVarFormParams.put("tablelist", tablelist);
        }

        if (maplist != null) {
            localVarFormParams.put("maplist", maplist);
        }

        if (summarylist != null) {
            localVarFormParams.put("summarylist", summarylist);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetFacilitiesPostValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback _callback) throws ApiException {
        return airRestServicesGetFacilitiesPostCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, _callback);

    }

    /**
     * Clean Air Act Facility Search
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \\\&quot;TSDF\\\&quot; to return the full enforcement TSDF universe and \\\&quot;Operating TSDF\\\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \\\&quot;Y\\\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return AirRestServicesGetFacilitiesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public AirRestServicesGetFacilitiesGet200Response airRestServicesGetFacilitiesPost(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns) throws ApiException {
        ApiResponse<AirRestServicesGetFacilitiesGet200Response> localVarResp = airRestServicesGetFacilitiesPostWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Facility Search
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \\\&quot;TSDF\\\&quot; to return the full enforcement TSDF universe and \\\&quot;Operating TSDF\\\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \\\&quot;Y\\\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return ApiResponse&lt;AirRestServicesGetFacilitiesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirRestServicesGetFacilitiesGet200Response> airRestServicesGetFacilitiesPostWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetFacilitiesPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, null);
        Type localVarReturnType = new TypeToken<AirRestServicesGetFacilitiesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Facility Search (asynchronously)
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \\\&quot;TSDF\\\&quot; to return the full enforcement TSDF universe and \\\&quot;Operating TSDF\\\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \\\&quot;Y\\\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetFacilitiesPostAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, final ApiCallback<AirRestServicesGetFacilitiesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetFacilitiesPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, _callback);
        Type localVarReturnType = new TypeToken<AirRestServicesGetFacilitiesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetFacilityInfoGet
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \&quot;TSDF\&quot; to return the full enforcement TSDF universe and \&quot;Operating TSDF\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \&quot;Y\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetFacilityInfoGetCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String summarylist, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_facility_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (pFn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fn", pFn));
        }

        if (pSa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa", pSa));
        }

        if (pSa1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa1", pSa1));
        }

        if (pCt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ct", pCt));
        }

        if (pCo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_co", pCo));
        }

        if (pFips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fips", pFips));
        }

        if (pSt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_st", pSt));
        }

        if (pZip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_zip", pZip));
        }

        if (pLcon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_lcon", pLcon));
        }

        if (pFrs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_frs", pFrs));
        }

        if (pReg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_reg", pReg));
        }

        if (pSic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic", pSic));
        }

        if (pNcs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ncs", pNcs));
        }

        if (pQnc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qnc", pQnc));
        }

        if (pPen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pen", pPen));
        }

        if (pOpst != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_opst", pOpst));
        }

        if (xmin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xmin", xmin));
        }

        if (ymin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymin", ymin));
        }

        if (xmax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xmax", xmax));
        }

        if (ymax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymax", ymax));
        }

        if (pUsmex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_usmex", pUsmex));
        }

        if (pSic2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic2", pSic2));
        }

        if (pSic4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic4", pSic4));
        }

        if (pFa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fa", pFa));
        }

        if (pAct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_act", pAct));
        }

        if (pMaj != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_maj", pMaj));
        }

        if (pMact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_mact", pMact));
        }

        if (pNsps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nsps", pNsps));
        }

        if (pNspsm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nspsm", pNspsm));
        }

        if (pProg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_prog", pProg));
        }

        if (pFea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fea", pFea));
        }

        if (pFeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feay", pFeay));
        }

        if (pFeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feaa", pFeaa));
        }

        if (pIea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iea", pIea));
        }

        if (pIeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieay", pIeay));
        }

        if (pIeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieaa", pIeaa));
        }

        if (pQiv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qiv", pQiv));
        }

        if (pNaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_naa", pNaa));
        }

        if (pImpw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_impw", pImpw));
        }

        if (pTrep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_trep", pTrep));
        }

        if (pTriCat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tri_cat", pTriCat));
        }

        if (pTriAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tri_amt", pTriAmt));
        }

        if (pTriAnyAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tri_any_amt", pTriAnyAmt));
        }

        if (pTriPol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tri_pol", pTriPol));
        }

        if (pGhgCat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ghg_cat", pGhgCat));
        }

        if (pGhgAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ghg_amt", pGhgAmt));
        }

        if (pGhgAnyAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ghg_any_amt", pGhgAnyAmt));
        }

        if (pGhgYr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ghg_yr", pGhgYr));
        }

        if (pNeiPol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nei_pol", pNeiPol));
        }

        if (pNeiAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nei_amt", pNeiAmt));
        }

        if (pNeiAnyAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nei_any_amt", pNeiAnyAmt));
        }

        if (pNeiYr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nei_yr", pNeiYr));
        }

        if (pNeiCat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_nei_cat", pNeiCat));
        }

        if (pPm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pm", pPm));
        }

        if (pPd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pd", pPd));
        }

        if (pIco != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ico", pIco));
        }

        if (pHuc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_huc", pHuc));
        }

        if (pWbd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_wbd", pWbd));
        }

        if (pPid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pid", pPid));
        }

        if (pMed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_med", pMed));
        }

        if (pYsl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysl", pYsl));
        }

        if (pYsly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysly", pYsly));
        }

        if (pYsla != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysla", pYsla));
        }

        if (pStsl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stsl", pStsl));
        }

        if (pStsly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stsly", pStsly));
        }

        if (pStsla != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stsla", pStsla));
        }

        if (pStres != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stres", pStres));
        }

        if (pSttyp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sttyp", pSttyp));
        }

        if (pQs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qs", pQs));
        }

        if (pSfs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sfs", pSfs));
        }

        if (pTribeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribeid", pTribeid));
        }

        if (pTribename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribename", pTribename));
        }

        if (pTribedist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribedist", pTribedist));
        }

        if (pOwop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_owop", pOwop));
        }

        if (pAgoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_agoo", pAgoo));
        }

        if (pIdt1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_idt1", pIdt1));
        }

        if (pIdt2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_idt2", pIdt2));
        }

        if (pStdt1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stdt1", pStdt1));
        }

        if (pStdt2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_stdt2", pStdt2));
        }

        if (pPityp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pityp", pPityp));
        }

        if (pCifdi != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_cifdi", pCifdi));
        }

        if (pPfead1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfead1", pPfead1));
        }

        if (pPfead2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfead2", pPfead2));
        }

        if (pPfeat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfeat", pPfeat));
        }

        if (pPsncq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_psncq", pPsncq));
        }

        if (pPctrack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pctrack", pPctrack));
        }

        if (pSwpa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_swpa", pSwpa));
        }

        if (pDes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_des", pDes));
        }

        if (pFntype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fntype", pFntype));
        }

        if (pHpvmth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_hpvmth", pHpvmth));
        }

        if (pRecvio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_recvio", pRecvio));
        }

        if (pPollvio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pollvio", pPollvio));
        }

        if (pAr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ar", pAr));
        }

        if (pTriYr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tri_yr", pTriYr));
        }

        if (pPidall != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pidall", pPidall));
        }

        if (pFacIco != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fac_ico", pFacIco));
        }

        if (pIcoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_icoo", pIcoo));
        }

        if (pFacIcos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fac_icos", pFacIcos));
        }

        if (pEjscreen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen", pEjscreen));
        }

        if (pLimitAddr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_limit_addr", pLimitAddr));
        }

        if (pLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_lat", pLat));
        }

        if (pLong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_long", pLong));
        }

        if (pRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_radius", pRadius));
        }

        if (pDecouple != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_decouple", pDecouple));
        }

        if (pEjscreenOver80cnt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen_over80cnt", pEjscreenOver80cnt));
        }

        if (queryset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryset", queryset));
        }

        if (responseset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseset", responseset));
        }

        if (summarylist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarylist", summarylist));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetFacilityInfoGetValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String summarylist, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        return airRestServicesGetFacilityInfoGetCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, summarylist, paramCallback, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Clean Air Act Facility Enhanced Search
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \&quot;TSDF\&quot; to return the full enforcement TSDF universe and \&quot;Operating TSDF\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \&quot;Y\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return AirRestServicesGetFacilityInfoGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public AirRestServicesGetFacilityInfoGet200Response airRestServicesGetFacilityInfoGet(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String summarylist, String paramCallback, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<AirRestServicesGetFacilityInfoGet200Response> localVarResp = airRestServicesGetFacilityInfoGetWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, summarylist, paramCallback, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Facility Enhanced Search
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \&quot;TSDF\&quot; to return the full enforcement TSDF universe and \&quot;Operating TSDF\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \&quot;Y\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;AirRestServicesGetFacilityInfoGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirRestServicesGetFacilityInfoGet200Response> airRestServicesGetFacilityInfoGetWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String summarylist, String paramCallback, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetFacilityInfoGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, summarylist, paramCallback, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<AirRestServicesGetFacilityInfoGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Facility Enhanced Search (asynchronously)
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \&quot;TSDF\&quot; to return the full enforcement TSDF universe and \&quot;Operating TSDF\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \&quot;Y\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetFacilityInfoGetAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String summarylist, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<AirRestServicesGetFacilityInfoGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetFacilityInfoGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, summarylist, paramCallback, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<AirRestServicesGetFacilityInfoGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetFacilityInfoPost
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \\\&quot;TSDF\\\&quot; to return the full enforcement TSDF universe and \\\&quot;Operating TSDF\\\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \\\&quot;Y\\\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetFacilityInfoPostCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String summarylist, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_facility_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (pFn != null) {
            localVarFormParams.put("p_fn", pFn);
        }

        if (pSa != null) {
            localVarFormParams.put("p_sa", pSa);
        }

        if (pSa1 != null) {
            localVarFormParams.put("p_sa1", pSa1);
        }

        if (pCt != null) {
            localVarFormParams.put("p_ct", pCt);
        }

        if (pCo != null) {
            localVarFormParams.put("p_co", pCo);
        }

        if (pFips != null) {
            localVarFormParams.put("p_fips", pFips);
        }

        if (pSt != null) {
            localVarFormParams.put("p_st", pSt);
        }

        if (pZip != null) {
            localVarFormParams.put("p_zip", pZip);
        }

        if (pLcon != null) {
            localVarFormParams.put("p_lcon", pLcon);
        }

        if (pFrs != null) {
            localVarFormParams.put("p_frs", pFrs);
        }

        if (pReg != null) {
            localVarFormParams.put("p_reg", pReg);
        }

        if (pSic != null) {
            localVarFormParams.put("p_sic", pSic);
        }

        if (pNcs != null) {
            localVarFormParams.put("p_ncs", pNcs);
        }

        if (pQnc != null) {
            localVarFormParams.put("p_qnc", pQnc);
        }

        if (pPen != null) {
            localVarFormParams.put("p_pen", pPen);
        }

        if (pOpst != null) {
            localVarFormParams.put("p_opst", pOpst);
        }

        if (xmin != null) {
            localVarFormParams.put("xmin", xmin);
        }

        if (ymin != null) {
            localVarFormParams.put("ymin", ymin);
        }

        if (xmax != null) {
            localVarFormParams.put("xmax", xmax);
        }

        if (ymax != null) {
            localVarFormParams.put("ymax", ymax);
        }

        if (pUsmex != null) {
            localVarFormParams.put("p_usmex", pUsmex);
        }

        if (pSic2 != null) {
            localVarFormParams.put("p_sic2", pSic2);
        }

        if (pSic4 != null) {
            localVarFormParams.put("p_sic4", pSic4);
        }

        if (pFa != null) {
            localVarFormParams.put("p_fa", pFa);
        }

        if (pAct != null) {
            localVarFormParams.put("p_act", pAct);
        }

        if (pMaj != null) {
            localVarFormParams.put("p_maj", pMaj);
        }

        if (pMact != null) {
            localVarFormParams.put("p_mact", pMact);
        }

        if (pNsps != null) {
            localVarFormParams.put("p_nsps", pNsps);
        }

        if (pNspsm != null) {
            localVarFormParams.put("p_nspsm", pNspsm);
        }

        if (pProg != null) {
            localVarFormParams.put("p_prog", pProg);
        }

        if (pFea != null) {
            localVarFormParams.put("p_fea", pFea);
        }

        if (pFeay != null) {
            localVarFormParams.put("p_feay", pFeay);
        }

        if (pFeaa != null) {
            localVarFormParams.put("p_feaa", pFeaa);
        }

        if (pIea != null) {
            localVarFormParams.put("p_iea", pIea);
        }

        if (pIeay != null) {
            localVarFormParams.put("p_ieay", pIeay);
        }

        if (pIeaa != null) {
            localVarFormParams.put("p_ieaa", pIeaa);
        }

        if (pQiv != null) {
            localVarFormParams.put("p_qiv", pQiv);
        }

        if (pNaa != null) {
            localVarFormParams.put("p_naa", pNaa);
        }

        if (pImpw != null) {
            localVarFormParams.put("p_impw", pImpw);
        }

        if (pTrep != null) {
            localVarFormParams.put("p_trep", pTrep);
        }

        if (pTriCat != null) {
            localVarFormParams.put("p_tri_cat", pTriCat);
        }

        if (pTriAmt != null) {
            localVarFormParams.put("p_tri_amt", pTriAmt);
        }

        if (pTriAnyAmt != null) {
            localVarFormParams.put("p_tri_any_amt", pTriAnyAmt);
        }

        if (pTriPol != null) {
            localVarFormParams.put("p_tri_pol", pTriPol);
        }

        if (pGhgCat != null) {
            localVarFormParams.put("p_ghg_cat", pGhgCat);
        }

        if (pGhgAmt != null) {
            localVarFormParams.put("p_ghg_amt", pGhgAmt);
        }

        if (pGhgAnyAmt != null) {
            localVarFormParams.put("p_ghg_any_amt", pGhgAnyAmt);
        }

        if (pGhgYr != null) {
            localVarFormParams.put("p_ghg_yr", pGhgYr);
        }

        if (pNeiPol != null) {
            localVarFormParams.put("p_nei_pol", pNeiPol);
        }

        if (pNeiAmt != null) {
            localVarFormParams.put("p_nei_amt", pNeiAmt);
        }

        if (pNeiAnyAmt != null) {
            localVarFormParams.put("p_nei_any_amt", pNeiAnyAmt);
        }

        if (pNeiYr != null) {
            localVarFormParams.put("p_nei_yr", pNeiYr);
        }

        if (pNeiCat != null) {
            localVarFormParams.put("p_nei_cat", pNeiCat);
        }

        if (pPm != null) {
            localVarFormParams.put("p_pm", pPm);
        }

        if (pPd != null) {
            localVarFormParams.put("p_pd", pPd);
        }

        if (pIco != null) {
            localVarFormParams.put("p_ico", pIco);
        }

        if (pHuc != null) {
            localVarFormParams.put("p_huc", pHuc);
        }

        if (pWbd != null) {
            localVarFormParams.put("p_wbd", pWbd);
        }

        if (pPid != null) {
            localVarFormParams.put("p_pid", pPid);
        }

        if (pMed != null) {
            localVarFormParams.put("p_med", pMed);
        }

        if (pYsl != null) {
            localVarFormParams.put("p_ysl", pYsl);
        }

        if (pYsly != null) {
            localVarFormParams.put("p_ysly", pYsly);
        }

        if (pYsla != null) {
            localVarFormParams.put("p_ysla", pYsla);
        }

        if (pStsl != null) {
            localVarFormParams.put("p_stsl", pStsl);
        }

        if (pStsly != null) {
            localVarFormParams.put("p_stsly", pStsly);
        }

        if (pStsla != null) {
            localVarFormParams.put("p_stsla", pStsla);
        }

        if (pStres != null) {
            localVarFormParams.put("p_stres", pStres);
        }

        if (pSttyp != null) {
            localVarFormParams.put("p_sttyp", pSttyp);
        }

        if (pQs != null) {
            localVarFormParams.put("p_qs", pQs);
        }

        if (pSfs != null) {
            localVarFormParams.put("p_sfs", pSfs);
        }

        if (pTribeid != null) {
            localVarFormParams.put("p_tribeid", pTribeid);
        }

        if (pTribename != null) {
            localVarFormParams.put("p_tribename", pTribename);
        }

        if (pTribedist != null) {
            localVarFormParams.put("p_tribedist", pTribedist);
        }

        if (pOwop != null) {
            localVarFormParams.put("p_owop", pOwop);
        }

        if (pAgoo != null) {
            localVarFormParams.put("p_agoo", pAgoo);
        }

        if (pIdt1 != null) {
            localVarFormParams.put("p_idt1", pIdt1);
        }

        if (pIdt2 != null) {
            localVarFormParams.put("p_idt2", pIdt2);
        }

        if (pStdt1 != null) {
            localVarFormParams.put("p_stdt1", pStdt1);
        }

        if (pStdt2 != null) {
            localVarFormParams.put("p_stdt2", pStdt2);
        }

        if (pPityp != null) {
            localVarFormParams.put("p_pityp", pPityp);
        }

        if (pCifdi != null) {
            localVarFormParams.put("p_cifdi", pCifdi);
        }

        if (pPfead1 != null) {
            localVarFormParams.put("p_pfead1", pPfead1);
        }

        if (pPfead2 != null) {
            localVarFormParams.put("p_pfead2", pPfead2);
        }

        if (pPfeat != null) {
            localVarFormParams.put("p_pfeat", pPfeat);
        }

        if (pPsncq != null) {
            localVarFormParams.put("p_psncq", pPsncq);
        }

        if (pPctrack != null) {
            localVarFormParams.put("p_pctrack", pPctrack);
        }

        if (pSwpa != null) {
            localVarFormParams.put("p_swpa", pSwpa);
        }

        if (pDes != null) {
            localVarFormParams.put("p_des", pDes);
        }

        if (pFntype != null) {
            localVarFormParams.put("p_fntype", pFntype);
        }

        if (pHpvmth != null) {
            localVarFormParams.put("p_hpvmth", pHpvmth);
        }

        if (pRecvio != null) {
            localVarFormParams.put("p_recvio", pRecvio);
        }

        if (pPollvio != null) {
            localVarFormParams.put("p_pollvio", pPollvio);
        }

        if (pAr != null) {
            localVarFormParams.put("p_ar", pAr);
        }

        if (pTriYr != null) {
            localVarFormParams.put("p_tri_yr", pTriYr);
        }

        if (pPidall != null) {
            localVarFormParams.put("p_pidall", pPidall);
        }

        if (pFacIco != null) {
            localVarFormParams.put("p_fac_ico", pFacIco);
        }

        if (pIcoo != null) {
            localVarFormParams.put("p_icoo", pIcoo);
        }

        if (pFacIcos != null) {
            localVarFormParams.put("p_fac_icos", pFacIcos);
        }

        if (pEjscreen != null) {
            localVarFormParams.put("p_ejscreen", pEjscreen);
        }

        if (pLimitAddr != null) {
            localVarFormParams.put("p_limit_addr", pLimitAddr);
        }

        if (pLat != null) {
            localVarFormParams.put("p_lat", pLat);
        }

        if (pLong != null) {
            localVarFormParams.put("p_long", pLong);
        }

        if (pRadius != null) {
            localVarFormParams.put("p_radius", pRadius);
        }

        if (pDecouple != null) {
            localVarFormParams.put("p_decouple", pDecouple);
        }

        if (pEjscreenOver80cnt != null) {
            localVarFormParams.put("p_ejscreen_over80cnt", pEjscreenOver80cnt);
        }

        if (queryset != null) {
            localVarFormParams.put("queryset", queryset);
        }

        if (responseset != null) {
            localVarFormParams.put("responseset", responseset);
        }

        if (summarylist != null) {
            localVarFormParams.put("summarylist", summarylist);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetFacilityInfoPostValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String summarylist, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        return airRestServicesGetFacilityInfoPostCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, summarylist, paramCallback, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Clean Air Act Facility Enhanced Search
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \\\&quot;TSDF\\\&quot; to return the full enforcement TSDF universe and \\\&quot;Operating TSDF\\\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \\\&quot;Y\\\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return AirRestServicesGetFacilityInfoGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public AirRestServicesGetFacilityInfoGet200Response airRestServicesGetFacilityInfoPost(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String summarylist, String paramCallback, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<AirRestServicesGetFacilityInfoGet200Response> localVarResp = airRestServicesGetFacilityInfoPostWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, summarylist, paramCallback, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Facility Enhanced Search
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \\\&quot;TSDF\\\&quot; to return the full enforcement TSDF universe and \\\&quot;Operating TSDF\\\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \\\&quot;Y\\\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;AirRestServicesGetFacilityInfoGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirRestServicesGetFacilityInfoGet200Response> airRestServicesGetFacilityInfoPostWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String summarylist, String paramCallback, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetFacilityInfoPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, summarylist, paramCallback, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<AirRestServicesGetFacilityInfoGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Facility Enhanced Search (asynchronously)
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pLcon Air Program Local Control Region Code Filter.  Enter one or more local control region codes to filter results.  Provide multiple codes as a comma-delimited list.  Codes where they exist are specific by state. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pQnc Number of quarters in non-compliance limiter.  Enter an integer value between 1 and 4 to limit results. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pOpst Operating status filter.  Enter one or more operating status codes to limit results.   Provide multiple codes as a comma-delimited list. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pNsps Air Programl New Source Performance Standards (NSPS)  Subpart Code Search.  One or more valid Air Program NSPS Program codes cand be passed.   (optional)
     * @param pNspsm Air Programl New Source Performance Standards Minors (NSPSM) Subpart Code Search.  One or more valid Air Program NSPSM Subpart codes can be passed.   (optional)
     * @param pProg Air Program Code Filter.  Enter one or more Air program codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pNaa Non-Attainment Area Flag.  Enter a Y or N to filter for or against facilities flagged as non-attainment areas. (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pTriCat Toxic Release Inventory Released To Air Chemical Identifier Category Filter.  Enter the chemical identifier category code to limit results. Note when filtering by TRI chemical identifier categories one may not also filter by specific chemical identifiers via p_tri_pol.  You must also specify a release amount using p_tri_amt or p_tri_any_amt. - TOTAL &#x3D; Total Released to Air - CARC &#x3D; Total Carcinogens Released to Air - HAP &#x3D; Total Hazardous Air Pollutants Released to Air (optional)
     * @param pTriAmt Toxic Release Inventory Release Amount Filter.  Enter a value in pounds to limit results to facilities releasing this amount or greateer of TRI releases.  Valid values are 0, GT0, GT1000, GT5000, GT10000 and GT50000. Note when filtering by TRI release amounts one may only use either p_tri_amt or p_tri_any_amt. (optional)
     * @param pTriAnyAmt Toxic Release Inventory Release Of Any Kind Above Value Filter.  Enter a value to limit results to facilities releasing this amount or more of TRI releases.  Note when filtering by TRI releases one may only use p_tri_any_amt or p_tri_amt and not both. (optional)
     * @param pTriPol Toxic Release Inventory Chemical Identifier Filter.  Enter one or more chemical identifier codes to limit results. Note when filtering by specific TRI chemical identifiers one may not also filter by chemical identifier categories via p_tri_cat. (optional)
     * @param pGhgCat Green House Gas (GHG) Gas Code Category.  Must be used with either a formatted (p_ghg_amt) or custom (p_ghg_any_amt) release amount. (optional)
     * @param pGhgAmt Green House Gas (GHG) CO2 Equivalent Formatted Release Amount.  First 2 characters must contain GT (greater than) followed by a number. (optional)
     * @param pGhgAnyAmt Green House Gas (GHG) C02 Equivalent Custom Amount.  The C02E value reported for the provided category, will be greater or equal to the amount provided. (optional)
     * @param pGhgYr Green House Gas (GHG) Reporting Year. (2010 through 2015) (optional)
     * @param pNeiPol National Emissions Inventory (NEI) Pollutant Identifier.  When a pollutant identifer is entered a corresponding formatted amount or custom amount must be entered. (optional)
     * @param pNeiAmt National Emissions Inventory (NEI) Formatted Pollutant Amount.  A formatted value where the 1st two characters must start with GT or LT followed by a number.  Identifies facilities that have a NEI Pollutant Emission  where the supplied value is &gt; or &lt; the pollutant emission amount.   (optional)
     * @param pNeiAnyAmt National Emissions Inventory (NEI) Custom Pollutant Amount.  Only a number can be entered.  Identifies facilities with where the NEI Pollutant Emission Amount is greater than the number entered. (optional)
     * @param pNeiYr National Emissions Inventory (NEI) year:  2014 or 2011 (optional)
     * @param pNeiCat National Emissions Inventory (NEI) Pollutant Category.  When a pollutant category is entered, a corresponding formatted pollutant amount or custom amount must be entered. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - W &#x3D; Water - ALL &#x3D; Water and RCRA and SDWA (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStsl Last Stack Test [within / not within] Specified Date Range Indicator. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pStsly Number of years (1 to 5) since date of last stack test. A value of 1 means it has been inspected within the year. (optional)
     * @param pStsla Stack Last Test Code Filter.  Enter a value to limit results: - A &#x3D; All - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pStres Air Stack Test Status Description Filter.  Enter one or more test status descriptions to filter results.  Enter multiple values as a comma-delimited list. (optional)
     * @param pSttyp Air Conductor Type Code Filter.  Enter one or more conductor type codes to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one or more codes to limit results. - CNG - COR - CTG - DIS - FDF - MWD - MXO - NON - POF - SDT - STF - TRB (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pStdt1 Beginning of date range of most recent stack test. (optional)
     * @param pStdt2 End of date range of most recent stack test. (optional)
     * @param pPityp Inspection Type: - CAC &#x3D; Corrective Action Inspection - CAV &#x3D; Compliance Assistance Visit - CDI &#x3D; Case Development Inspection - CEI &#x3D; Inspection Inspection - CSE &#x3D; Compliance Schedule Evaluation - FCI &#x3D; Focused Compliance - FRR &#x3D; Financial Record Review - FSD &#x3D; Facility Self Disclosure - FUI &#x3D; Follow-Up Inspection - GME &#x3D; Groundwater Monitoring Evaluation - NRR &#x3D; Non-Financial Record Review - OAM &#x3D; Operation and Maintenance Inspection May contain multiple comma-separated values. (optional)
     * @param pCifdi Compliance issuess found during inspection. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pSwpa Source water protection area (optional)
     * @param pDes Universe Designation Limiter.  Enter one or more universe designation codes.  Provide multiple values as a comma-delimited list.  Use code \\\&quot;TSDF\\\&quot; to return the full enforcement TSDF universe and \\\&quot;Operating TSDF\\\&quot; to return the operating TSDF universe. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pHpvmth Months in high priority violation status out of the previous three years limiter.  Provide a number of months in the past three years.  Results will limited to facilities in high priority violation status during that time.  (optional)
     * @param pRecvio Recent Violation Status Filter.  Enter one or more recent violation codes to limit results.  Provide multiple values as a comma-delimited list. - NO VIOL &#x3D; Selects facilities with no recent violations. - ANY HPV &#x3D; Selects facilities with either addressed or unaddressed high priority violations. - ADDRS-EPA - Select facilities with recent EPA addressed violations. - ADDRS-LOCAL - Select facilities with recent locally addressed violations. - ADDRS-STATE - Select facilities with recent state addressed violations. - UNADDR-EPA - Select facilities with recent EPA unaddressed violations. - UNADDR-LOCAL - Select facilities with recent locally unaddressed violations. - UNADDR-STATE - Select facilities with recent state unaddressed violations. - FRV VIOL &#x3D; Selects facilities with a recent federally reportable violation without a high priority violation. (optional)
     * @param pPollvio Air Pollutant Code For A Recent Violation Filter.  Provide one or more pollutant codes to select facilities with one or more of the entered pollutant codes for a recent air violation.  Provide multiple values as a comma-delimited list. (optional)
     * @param pAr Associated EPA Air Reports Program Filter.  Enter multiple values as a comma-delimited list.  Valid values are: - TRI &#x3D; Toxic Release Inventory. - GHG &#x3D; Green House Gas Reporter. - EIS &#x3D; Emission Inventory System. - CAMD &#x3D; Clean Air Markets Program Reporter. (optional)
     * @param pTriYr Toxic Release Inventory Reporting Year Filter.  Enter one or more year values to filter results by the TRI reporting year.  Provide multiple years as a comma-delimited list. (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pDecouple Decouple Inspection Code Search Flag.  Enter \\\&quot;Y\\\&quot; to search for inspection code types with p_pityp without respect to the date range search provided with p_ysl* parameters. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetFacilityInfoPostAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pLcon, String pFrs, String pReg, String pSic, String pNcs, BigDecimal pQnc, String pPen, String pOpst, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pAct, String pMaj, String pMact, String pNsps, String pNspsm, String pProg, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pNaa, String pImpw, String pTrep, String pTriCat, String pTriAmt, BigDecimal pTriAnyAmt, String pTriPol, String pGhgCat, String pGhgAmt, BigDecimal pGhgAnyAmt, String pGhgYr, String pNeiPol, String pNeiAmt, BigDecimal pNeiAnyAmt, String pNeiYr, String pNeiCat, String pPm, String pPd, String pIco, String pHuc, String pWbd, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pStsl, BigDecimal pStsly, String pStsla, String pStres, String pSttyp, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pOwop, String pAgoo, String pIdt1, String pIdt2, String pStdt1, String pStdt2, String pPityp, String pCifdi, String pPfead1, String pPfead2, String pPfeat, String pPsncq, String pPctrack, String pSwpa, String pDes, String pFntype, String pHpvmth, String pRecvio, String pPollvio, String pAr, String pTriYr, String pPidall, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pDecouple, String pEjscreenOver80cnt, BigDecimal queryset, BigDecimal responseset, String summarylist, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<AirRestServicesGetFacilityInfoGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetFacilityInfoPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pLcon, pFrs, pReg, pSic, pNcs, pQnc, pPen, pOpst, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pAct, pMaj, pMact, pNsps, pNspsm, pProg, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pNaa, pImpw, pTrep, pTriCat, pTriAmt, pTriAnyAmt, pTriPol, pGhgCat, pGhgAmt, pGhgAnyAmt, pGhgYr, pNeiPol, pNeiAmt, pNeiAnyAmt, pNeiYr, pNeiCat, pPm, pPd, pIco, pHuc, pWbd, pPid, pMed, pYsl, pYsly, pYsla, pStsl, pStsly, pStsla, pStres, pSttyp, pQs, pSfs, pTribeid, pTribename, pTribedist, pOwop, pAgoo, pIdt1, pIdt2, pStdt1, pStdt2, pPityp, pCifdi, pPfead1, pPfead2, pPfeat, pPsncq, pPctrack, pSwpa, pDes, pFntype, pHpvmth, pRecvio, pPollvio, pAr, pTriYr, pPidall, pFacIco, pIcoo, pFacIcos, pEjscreen, pLimitAddr, pLat, pLong, pRadius, pDecouple, pEjscreenOver80cnt, queryset, responseset, summarylist, paramCallback, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<AirRestServicesGetFacilityInfoGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetGeojsonGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetGeojsonGetCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_geojson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (newsort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newsort", newsort));
        }

        if (descending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descending", descending));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetGeojsonGetValidateBeforeCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling airRestServicesGetGeojsonGet(Async)");
        }

        return airRestServicesGetGeojsonGetCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Clean Air Act GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return AirRestServicesGetGeojsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public AirRestServicesGetGeojsonGet200Response airRestServicesGetGeojsonGet(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<AirRestServicesGetGeojsonGet200Response> localVarResp = airRestServicesGetGeojsonGetWithHttpInfo(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;AirRestServicesGetGeojsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirRestServicesGetGeojsonGet200Response> airRestServicesGetGeojsonGetWithHttpInfo(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetGeojsonGetValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<AirRestServicesGetGeojsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act GeoJSON Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetGeojsonGetAsync(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<AirRestServicesGetGeojsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetGeojsonGetValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<AirRestServicesGetGeojsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetGeojsonPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetGeojsonPostCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_geojson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (newsort != null) {
            localVarFormParams.put("newsort", newsort);
        }

        if (descending != null) {
            localVarFormParams.put("descending", descending);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetGeojsonPostValidateBeforeCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling airRestServicesGetGeojsonPost(Async)");
        }

        return airRestServicesGetGeojsonPostCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Clean Air Act GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return AirRestServicesGetGeojsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public AirRestServicesGetGeojsonGet200Response airRestServicesGetGeojsonPost(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<AirRestServicesGetGeojsonGet200Response> localVarResp = airRestServicesGetGeojsonPostWithHttpInfo(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;AirRestServicesGetGeojsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirRestServicesGetGeojsonGet200Response> airRestServicesGetGeojsonPostWithHttpInfo(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetGeojsonPostValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<AirRestServicesGetGeojsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act GeoJSON Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetGeojsonPostAsync(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<AirRestServicesGetGeojsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetGeojsonPostValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<AirRestServicesGetGeojsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetInfoClustersGet
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetInfoClustersGetCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_info_clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (pQid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qid", pQid));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetInfoClustersGetValidateBeforeCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pQid' is set
        if (pQid == null) {
            throw new ApiException("Missing the required parameter 'pQid' when calling airRestServicesGetInfoClustersGet(Async)");
        }

        return airRestServicesGetInfoClustersGetCall(pQid, output, pPrettyPrint, _callback);

    }

    /**
     * Clean Air Act Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File airRestServicesGetInfoClustersGet(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = airRestServicesGetInfoClustersGetWithHttpInfo(pQid, output, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> airRestServicesGetInfoClustersGetWithHttpInfo(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetInfoClustersGetValidateBeforeCall(pQid, output, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Info Clusters Service (asynchronously)
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetInfoClustersGetAsync(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetInfoClustersGetValidateBeforeCall(pQid, output, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetInfoClustersPost
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetInfoClustersPostCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_info_clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (pQid != null) {
            localVarFormParams.put("p_qid", pQid);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetInfoClustersPostValidateBeforeCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pQid' is set
        if (pQid == null) {
            throw new ApiException("Missing the required parameter 'pQid' when calling airRestServicesGetInfoClustersPost(Async)");
        }

        return airRestServicesGetInfoClustersPostCall(pQid, output, pPrettyPrint, _callback);

    }

    /**
     * Clean Air Act Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File airRestServicesGetInfoClustersPost(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = airRestServicesGetInfoClustersPostWithHttpInfo(pQid, output, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> airRestServicesGetInfoClustersPostWithHttpInfo(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetInfoClustersPostValidateBeforeCall(pQid, output, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Info Clusters Service (asynchronously)
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetInfoClustersPostAsync(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetInfoClustersPostValidateBeforeCall(pQid, output, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetMapGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetMapGetCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (tablelist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tablelist", tablelist));
        }

        if (c1Lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c1_lat", c1Lat));
        }

        if (c1Long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c1_long", c1Long));
        }

        if (c2Lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c2_lat", c2Lat));
        }

        if (c2Long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c2_long", c2Long));
        }

        if (pId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_id", pId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetMapGetValidateBeforeCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling airRestServicesGetMapGet(Async)");
        }

        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling airRestServicesGetMapGet(Async)");
        }

        return airRestServicesGetMapGetCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);

    }

    /**
     * Clean Air Act Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return AirRestServicesGetMapGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public AirRestServicesGetMapGet200Response airRestServicesGetMapGet(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        ApiResponse<AirRestServicesGetMapGet200Response> localVarResp = airRestServicesGetMapGetWithHttpInfo(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return ApiResponse&lt;AirRestServicesGetMapGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirRestServicesGetMapGet200Response> airRestServicesGetMapGetWithHttpInfo(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetMapGetValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, null);
        Type localVarReturnType = new TypeToken<AirRestServicesGetMapGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Map Service (asynchronously)
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetMapGetAsync(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback<AirRestServicesGetMapGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetMapGetValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);
        Type localVarReturnType = new TypeToken<AirRestServicesGetMapGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetMapPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetMapPostCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (tablelist != null) {
            localVarFormParams.put("tablelist", tablelist);
        }

        if (c1Lat != null) {
            localVarFormParams.put("c1_lat", c1Lat);
        }

        if (c1Long != null) {
            localVarFormParams.put("c1_long", c1Long);
        }

        if (c2Lat != null) {
            localVarFormParams.put("c2_lat", c2Lat);
        }

        if (c2Long != null) {
            localVarFormParams.put("c2_long", c2Long);
        }

        if (pId != null) {
            localVarFormParams.put("p_id", pId);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetMapPostValidateBeforeCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling airRestServicesGetMapPost(Async)");
        }

        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling airRestServicesGetMapPost(Async)");
        }

        return airRestServicesGetMapPostCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);

    }

    /**
     * Clean Air Act Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return AirRestServicesGetMapGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public AirRestServicesGetMapGet200Response airRestServicesGetMapPost(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        ApiResponse<AirRestServicesGetMapGet200Response> localVarResp = airRestServicesGetMapPostWithHttpInfo(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return ApiResponse&lt;AirRestServicesGetMapGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirRestServicesGetMapGet200Response> airRestServicesGetMapPostWithHttpInfo(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetMapPostValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, null);
        Type localVarReturnType = new TypeToken<AirRestServicesGetMapGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Map Service (asynchronously)
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetMapPostAsync(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback<AirRestServicesGetMapGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetMapPostValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);
        Type localVarReturnType = new TypeToken<AirRestServicesGetMapGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetQidGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CAA (ICIS Air) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetQidGetCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_qid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (pageno != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageno", pageno));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (newsort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newsort", newsort));
        }

        if (descending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descending", descending));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetQidGetValidateBeforeCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling airRestServicesGetQidGet(Async)");
        }

        return airRestServicesGetQidGetCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);

    }

    /**
     * Clean Air Act Search by Query ID
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return AirRestServicesGetQidGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CAA (ICIS Air) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public AirRestServicesGetQidGet200Response airRestServicesGetQidGet(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        ApiResponse<AirRestServicesGetQidGet200Response> localVarResp = airRestServicesGetQidGetWithHttpInfo(qid, output, pageno, paramCallback, newsort, descending, qcolumns);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Search by Query ID
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return ApiResponse&lt;AirRestServicesGetQidGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CAA (ICIS Air) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirRestServicesGetQidGet200Response> airRestServicesGetQidGetWithHttpInfo(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetQidGetValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, null);
        Type localVarReturnType = new TypeToken<AirRestServicesGetQidGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Search by Query ID (asynchronously)
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CAA (ICIS Air) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetQidGetAsync(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback<AirRestServicesGetQidGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetQidGetValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);
        Type localVarReturnType = new TypeToken<AirRestServicesGetQidGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for airRestServicesGetQidPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CAA (ICIS Air) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetQidPostCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_rest_services.get_qid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (pageno != null) {
            localVarFormParams.put("pageno", pageno);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (newsort != null) {
            localVarFormParams.put("newsort", newsort);
        }

        if (descending != null) {
            localVarFormParams.put("descending", descending);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airRestServicesGetQidPostValidateBeforeCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling airRestServicesGetQidPost(Async)");
        }

        return airRestServicesGetQidPostCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);

    }

    /**
     * Clean Air Act Search by Query ID
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return AirRestServicesGetQidGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CAA (ICIS Air) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public AirRestServicesGetQidGet200Response airRestServicesGetQidPost(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        ApiResponse<AirRestServicesGetQidGet200Response> localVarResp = airRestServicesGetQidPostWithHttpInfo(qid, output, pageno, paramCallback, newsort, descending, qcolumns);
        return localVarResp.getData();
    }

    /**
     * Clean Air Act Search by Query ID
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return ApiResponse&lt;AirRestServicesGetQidGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CAA (ICIS Air) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirRestServicesGetQidGet200Response> airRestServicesGetQidPostWithHttpInfo(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        okhttp3.Call localVarCall = airRestServicesGetQidPostValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, null);
        Type localVarReturnType = new TypeToken<AirRestServicesGetQidGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Air Act Search by Query ID (asynchronously)
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CAA (ICIS Air) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airRestServicesGetQidPostAsync(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback<AirRestServicesGetQidGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = airRestServicesGetQidPostValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);
        Type localVarReturnType = new TypeToken<AirRestServicesGetQidGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
