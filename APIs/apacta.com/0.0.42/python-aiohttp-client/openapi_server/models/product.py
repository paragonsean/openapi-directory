# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_cost_price: float=None, barcode: str=None, buying_price: float=None, centiga_id: str=None, company_id: str=None, created: str=None, created_by_id: str=None, deleted: str=None, description: str=None, erp_id: str=None, id: str=None, modified: str=None, name: str=None, pogo_id: str=None, product_number: str=None, project_status_type_id: str=None, selling_price: float=None, tripletex_id: str=None):
        """Product - a model defined in OpenAPI

        :param average_cost_price: The average_cost_price of this Product.
        :param barcode: The barcode of this Product.
        :param buying_price: The buying_price of this Product.
        :param centiga_id: The centiga_id of this Product.
        :param company_id: The company_id of this Product.
        :param created: The created of this Product.
        :param created_by_id: The created_by_id of this Product.
        :param deleted: The deleted of this Product.
        :param description: The description of this Product.
        :param erp_id: The erp_id of this Product.
        :param id: The id of this Product.
        :param modified: The modified of this Product.
        :param name: The name of this Product.
        :param pogo_id: The pogo_id of this Product.
        :param product_number: The product_number of this Product.
        :param project_status_type_id: The project_status_type_id of this Product.
        :param selling_price: The selling_price of this Product.
        :param tripletex_id: The tripletex_id of this Product.
        """
        self.openapi_types = {
            'average_cost_price': float,
            'barcode': str,
            'buying_price': float,
            'centiga_id': str,
            'company_id': str,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'description': str,
            'erp_id': str,
            'id': str,
            'modified': str,
            'name': str,
            'pogo_id': str,
            'product_number': str,
            'project_status_type_id': str,
            'selling_price': float,
            'tripletex_id': str
        }

        self.attribute_map = {
            'average_cost_price': 'average_cost_price',
            'barcode': 'barcode',
            'buying_price': 'buying_price',
            'centiga_id': 'centiga_id',
            'company_id': 'company_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'description': 'description',
            'erp_id': 'erp_id',
            'id': 'id',
            'modified': 'modified',
            'name': 'name',
            'pogo_id': 'pogo_id',
            'product_number': 'product_number',
            'project_status_type_id': 'project_status_type_id',
            'selling_price': 'selling_price',
            'tripletex_id': 'tripletex_id'
        }

        self._average_cost_price = average_cost_price
        self._barcode = barcode
        self._buying_price = buying_price
        self._centiga_id = centiga_id
        self._company_id = company_id
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._description = description
        self._erp_id = erp_id
        self._id = id
        self._modified = modified
        self._name = name
        self._pogo_id = pogo_id
        self._product_number = product_number
        self._project_status_type_id = project_status_type_id
        self._selling_price = selling_price
        self._tripletex_id = tripletex_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_cost_price(self):
        """Gets the average_cost_price of this Product.


        :return: The average_cost_price of this Product.
        :rtype: float
        """
        return self._average_cost_price

    @average_cost_price.setter
    def average_cost_price(self, average_cost_price):
        """Sets the average_cost_price of this Product.


        :param average_cost_price: The average_cost_price of this Product.
        :type average_cost_price: float
        """

        self._average_cost_price = average_cost_price

    @property
    def barcode(self):
        """Gets the barcode of this Product.


        :return: The barcode of this Product.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this Product.


        :param barcode: The barcode of this Product.
        :type barcode: str
        """
        if barcode is not None and len(barcode) > 255:
            raise ValueError("Invalid value for `barcode`, length must be less than or equal to `255`")

        self._barcode = barcode

    @property
    def buying_price(self):
        """Gets the buying_price of this Product.


        :return: The buying_price of this Product.
        :rtype: float
        """
        return self._buying_price

    @buying_price.setter
    def buying_price(self, buying_price):
        """Sets the buying_price of this Product.


        :param buying_price: The buying_price of this Product.
        :type buying_price: float
        """

        self._buying_price = buying_price

    @property
    def centiga_id(self):
        """Gets the centiga_id of this Product.


        :return: The centiga_id of this Product.
        :rtype: str
        """
        return self._centiga_id

    @centiga_id.setter
    def centiga_id(self, centiga_id):
        """Sets the centiga_id of this Product.


        :param centiga_id: The centiga_id of this Product.
        :type centiga_id: str
        """
        if centiga_id is not None and len(centiga_id) > 255:
            raise ValueError("Invalid value for `centiga_id`, length must be less than or equal to `255`")

        self._centiga_id = centiga_id

    @property
    def company_id(self):
        """Gets the company_id of this Product.


        :return: The company_id of this Product.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Product.


        :param company_id: The company_id of this Product.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def created(self):
        """Gets the created of this Product.


        :return: The created of this Product.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Product.


        :param created: The created of this Product.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Product.


        :return: The created_by_id of this Product.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Product.


        :param created_by_id: The created_by_id of this Product.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this Product.

        Only present if it's a deleted object

        :return: The deleted of this Product.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Product.

        Only present if it's a deleted object

        :param deleted: The deleted of this Product.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Product.


        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.


        :param description: The description of this Product.
        :type description: str
        """
        if description is not None and len(description) > 8192:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")

        self._description = description

    @property
    def erp_id(self):
        """Gets the erp_id of this Product.


        :return: The erp_id of this Product.
        :rtype: str
        """
        return self._erp_id

    @erp_id.setter
    def erp_id(self, erp_id):
        """Sets the erp_id of this Product.


        :param erp_id: The erp_id of this Product.
        :type erp_id: str
        """
        if erp_id is not None and len(erp_id) > 255:
            raise ValueError("Invalid value for `erp_id`, length must be less than or equal to `255`")

        self._erp_id = erp_id

    @property
    def id(self):
        """Gets the id of this Product.


        :return: The id of this Product.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.


        :param id: The id of this Product.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this Product.


        :return: The modified of this Product.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Product.


        :param modified: The modified of this Product.
        :type modified: str
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this Product.


        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.


        :param name: The name of this Product.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def pogo_id(self):
        """Gets the pogo_id of this Product.


        :return: The pogo_id of this Product.
        :rtype: str
        """
        return self._pogo_id

    @pogo_id.setter
    def pogo_id(self, pogo_id):
        """Sets the pogo_id of this Product.


        :param pogo_id: The pogo_id of this Product.
        :type pogo_id: str
        """
        if pogo_id is not None and len(pogo_id) > 255:
            raise ValueError("Invalid value for `pogo_id`, length must be less than or equal to `255`")

        self._pogo_id = pogo_id

    @property
    def product_number(self):
        """Gets the product_number of this Product.


        :return: The product_number of this Product.
        :rtype: str
        """
        return self._product_number

    @product_number.setter
    def product_number(self, product_number):
        """Sets the product_number of this Product.


        :param product_number: The product_number of this Product.
        :type product_number: str
        """
        if product_number is not None and len(product_number) > 255:
            raise ValueError("Invalid value for `product_number`, length must be less than or equal to `255`")

        self._product_number = product_number

    @property
    def project_status_type_id(self):
        """Gets the project_status_type_id of this Product.


        :return: The project_status_type_id of this Product.
        :rtype: str
        """
        return self._project_status_type_id

    @project_status_type_id.setter
    def project_status_type_id(self, project_status_type_id):
        """Sets the project_status_type_id of this Product.


        :param project_status_type_id: The project_status_type_id of this Product.
        :type project_status_type_id: str
        """

        self._project_status_type_id = project_status_type_id

    @property
    def selling_price(self):
        """Gets the selling_price of this Product.


        :return: The selling_price of this Product.
        :rtype: float
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this Product.


        :param selling_price: The selling_price of this Product.
        :type selling_price: float
        """

        self._selling_price = selling_price

    @property
    def tripletex_id(self):
        """Gets the tripletex_id of this Product.


        :return: The tripletex_id of this Product.
        :rtype: str
        """
        return self._tripletex_id

    @tripletex_id.setter
    def tripletex_id(self, tripletex_id):
        """Sets the tripletex_id of this Product.


        :param tripletex_id: The tripletex_id of this Product.
        :type tripletex_id: str
        """
        if tripletex_id is not None and len(tripletex_id) > 255:
            raise ValueError("Invalid value for `tripletex_id`, length must be less than or equal to `255`")

        self._tripletex_id = tripletex_id
