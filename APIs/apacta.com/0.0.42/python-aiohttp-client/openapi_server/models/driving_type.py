# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DrivingType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, created: str=None, created_by_id: str=None, deleted: str=None, employee_price: float=None, erp_id: str=None, id: str=None, invoice_price: float=None, modified: str=None, modified_by_id: str=None, name: str=None, salary_id: str=None):
        """DrivingType - a model defined in OpenAPI

        :param company_id: The company_id of this DrivingType.
        :param created: The created of this DrivingType.
        :param created_by_id: The created_by_id of this DrivingType.
        :param deleted: The deleted of this DrivingType.
        :param employee_price: The employee_price of this DrivingType.
        :param erp_id: The erp_id of this DrivingType.
        :param id: The id of this DrivingType.
        :param invoice_price: The invoice_price of this DrivingType.
        :param modified: The modified of this DrivingType.
        :param modified_by_id: The modified_by_id of this DrivingType.
        :param name: The name of this DrivingType.
        :param salary_id: The salary_id of this DrivingType.
        """
        self.openapi_types = {
            'company_id': str,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'employee_price': float,
            'erp_id': str,
            'id': str,
            'invoice_price': float,
            'modified': str,
            'modified_by_id': str,
            'name': str,
            'salary_id': str
        }

        self.attribute_map = {
            'company_id': 'company_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'employee_price': 'employee_price',
            'erp_id': 'erp_id',
            'id': 'id',
            'invoice_price': 'invoice_price',
            'modified': 'modified',
            'modified_by_id': 'modified_by_id',
            'name': 'name',
            'salary_id': 'salary_id'
        }

        self._company_id = company_id
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._employee_price = employee_price
        self._erp_id = erp_id
        self._id = id
        self._invoice_price = invoice_price
        self._modified = modified
        self._modified_by_id = modified_by_id
        self._name = name
        self._salary_id = salary_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DrivingType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DrivingType of this DrivingType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this DrivingType.


        :return: The company_id of this DrivingType.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this DrivingType.


        :param company_id: The company_id of this DrivingType.
        :type company_id: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")

        self._company_id = company_id

    @property
    def created(self):
        """Gets the created of this DrivingType.


        :return: The created of this DrivingType.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DrivingType.


        :param created: The created of this DrivingType.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this DrivingType.


        :return: The created_by_id of this DrivingType.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this DrivingType.


        :param created_by_id: The created_by_id of this DrivingType.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this DrivingType.

        Only present if it's a deleted object

        :return: The deleted of this DrivingType.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this DrivingType.

        Only present if it's a deleted object

        :param deleted: The deleted of this DrivingType.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def employee_price(self):
        """Gets the employee_price of this DrivingType.


        :return: The employee_price of this DrivingType.
        :rtype: float
        """
        return self._employee_price

    @employee_price.setter
    def employee_price(self, employee_price):
        """Sets the employee_price of this DrivingType.


        :param employee_price: The employee_price of this DrivingType.
        :type employee_price: float
        """
        if employee_price is None:
            raise ValueError("Invalid value for `employee_price`, must not be `None`")

        self._employee_price = employee_price

    @property
    def erp_id(self):
        """Gets the erp_id of this DrivingType.


        :return: The erp_id of this DrivingType.
        :rtype: str
        """
        return self._erp_id

    @erp_id.setter
    def erp_id(self, erp_id):
        """Sets the erp_id of this DrivingType.


        :param erp_id: The erp_id of this DrivingType.
        :type erp_id: str
        """
        if erp_id is not None and len(erp_id) > 255:
            raise ValueError("Invalid value for `erp_id`, length must be less than or equal to `255`")

        self._erp_id = erp_id

    @property
    def id(self):
        """Gets the id of this DrivingType.


        :return: The id of this DrivingType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DrivingType.


        :param id: The id of this DrivingType.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def invoice_price(self):
        """Gets the invoice_price of this DrivingType.


        :return: The invoice_price of this DrivingType.
        :rtype: float
        """
        return self._invoice_price

    @invoice_price.setter
    def invoice_price(self, invoice_price):
        """Sets the invoice_price of this DrivingType.


        :param invoice_price: The invoice_price of this DrivingType.
        :type invoice_price: float
        """
        if invoice_price is None:
            raise ValueError("Invalid value for `invoice_price`, must not be `None`")

        self._invoice_price = invoice_price

    @property
    def modified(self):
        """Gets the modified of this DrivingType.


        :return: The modified of this DrivingType.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this DrivingType.


        :param modified: The modified of this DrivingType.
        :type modified: str
        """
        if modified is None:
            raise ValueError("Invalid value for `modified`, must not be `None`")

        self._modified = modified

    @property
    def modified_by_id(self):
        """Gets the modified_by_id of this DrivingType.


        :return: The modified_by_id of this DrivingType.
        :rtype: str
        """
        return self._modified_by_id

    @modified_by_id.setter
    def modified_by_id(self, modified_by_id):
        """Sets the modified_by_id of this DrivingType.


        :param modified_by_id: The modified_by_id of this DrivingType.
        :type modified_by_id: str
        """

        self._modified_by_id = modified_by_id

    @property
    def name(self):
        """Gets the name of this DrivingType.


        :return: The name of this DrivingType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DrivingType.


        :param name: The name of this DrivingType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def salary_id(self):
        """Gets the salary_id of this DrivingType.


        :return: The salary_id of this DrivingType.
        :rtype: str
        """
        return self._salary_id

    @salary_id.setter
    def salary_id(self, salary_id):
        """Sets the salary_id of this DrivingType.


        :param salary_id: The salary_id of this DrivingType.
        :type salary_id: str
        """
        if salary_id is not None and len(salary_id) > 255:
            raise ValueError("Invalid value for `salary_id`, length must be less than or equal to `255`")

        self._salary_id = salary_id
