# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Form(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved_by_id: str=None, company_id: str=None, created: str=None, created_by_id: str=None, deleted: str=None, form_date: date=None, form_template_id: str=None, id: str=None, is_draft: bool=False, is_invoiced: str=None, is_shared: bool=False, mass_form_id: str=None, modified: str=None, project_id: str=None):
        """Form - a model defined in OpenAPI

        :param approved_by_id: The approved_by_id of this Form.
        :param company_id: The company_id of this Form.
        :param created: The created of this Form.
        :param created_by_id: The created_by_id of this Form.
        :param deleted: The deleted of this Form.
        :param form_date: The form_date of this Form.
        :param form_template_id: The form_template_id of this Form.
        :param id: The id of this Form.
        :param is_draft: The is_draft of this Form.
        :param is_invoiced: The is_invoiced of this Form.
        :param is_shared: The is_shared of this Form.
        :param mass_form_id: The mass_form_id of this Form.
        :param modified: The modified of this Form.
        :param project_id: The project_id of this Form.
        """
        self.openapi_types = {
            'approved_by_id': str,
            'company_id': str,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'form_date': date,
            'form_template_id': str,
            'id': str,
            'is_draft': bool,
            'is_invoiced': str,
            'is_shared': bool,
            'mass_form_id': str,
            'modified': str,
            'project_id': str
        }

        self.attribute_map = {
            'approved_by_id': 'approved_by_id',
            'company_id': 'company_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'form_date': 'form_date',
            'form_template_id': 'form_template_id',
            'id': 'id',
            'is_draft': 'is_draft',
            'is_invoiced': 'is_invoiced',
            'is_shared': 'is_shared',
            'mass_form_id': 'mass_form_id',
            'modified': 'modified',
            'project_id': 'project_id'
        }

        self._approved_by_id = approved_by_id
        self._company_id = company_id
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._form_date = form_date
        self._form_template_id = form_template_id
        self._id = id
        self._is_draft = is_draft
        self._is_invoiced = is_invoiced
        self._is_shared = is_shared
        self._mass_form_id = mass_form_id
        self._modified = modified
        self._project_id = project_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Form':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Form of this Form.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved_by_id(self):
        """Gets the approved_by_id of this Form.


        :return: The approved_by_id of this Form.
        :rtype: str
        """
        return self._approved_by_id

    @approved_by_id.setter
    def approved_by_id(self, approved_by_id):
        """Sets the approved_by_id of this Form.


        :param approved_by_id: The approved_by_id of this Form.
        :type approved_by_id: str
        """

        self._approved_by_id = approved_by_id

    @property
    def company_id(self):
        """Gets the company_id of this Form.


        :return: The company_id of this Form.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Form.


        :param company_id: The company_id of this Form.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def created(self):
        """Gets the created of this Form.


        :return: The created of this Form.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Form.


        :param created: The created of this Form.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Form.

        Read-only

        :return: The created_by_id of this Form.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Form.

        Read-only

        :param created_by_id: The created_by_id of this Form.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this Form.

        Only present if it's a deleted object

        :return: The deleted of this Form.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Form.

        Only present if it's a deleted object

        :param deleted: The deleted of this Form.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def form_date(self):
        """Gets the form_date of this Form.


        :return: The form_date of this Form.
        :rtype: date
        """
        return self._form_date

    @form_date.setter
    def form_date(self, form_date):
        """Sets the form_date of this Form.


        :param form_date: The form_date of this Form.
        :type form_date: date
        """

        self._form_date = form_date

    @property
    def form_template_id(self):
        """Gets the form_template_id of this Form.


        :return: The form_template_id of this Form.
        :rtype: str
        """
        return self._form_template_id

    @form_template_id.setter
    def form_template_id(self, form_template_id):
        """Sets the form_template_id of this Form.


        :param form_template_id: The form_template_id of this Form.
        :type form_template_id: str
        """

        self._form_template_id = form_template_id

    @property
    def id(self):
        """Gets the id of this Form.

        Read-only

        :return: The id of this Form.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Form.

        Read-only

        :param id: The id of this Form.
        :type id: str
        """

        self._id = id

    @property
    def is_draft(self):
        """Gets the is_draft of this Form.


        :return: The is_draft of this Form.
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this Form.


        :param is_draft: The is_draft of this Form.
        :type is_draft: bool
        """

        self._is_draft = is_draft

    @property
    def is_invoiced(self):
        """Gets the is_invoiced of this Form.


        :return: The is_invoiced of this Form.
        :rtype: str
        """
        return self._is_invoiced

    @is_invoiced.setter
    def is_invoiced(self, is_invoiced):
        """Sets the is_invoiced of this Form.


        :param is_invoiced: The is_invoiced of this Form.
        :type is_invoiced: str
        """

        self._is_invoiced = is_invoiced

    @property
    def is_shared(self):
        """Gets the is_shared of this Form.


        :return: The is_shared of this Form.
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this Form.


        :param is_shared: The is_shared of this Form.
        :type is_shared: bool
        """

        self._is_shared = is_shared

    @property
    def mass_form_id(self):
        """Gets the mass_form_id of this Form.


        :return: The mass_form_id of this Form.
        :rtype: str
        """
        return self._mass_form_id

    @mass_form_id.setter
    def mass_form_id(self, mass_form_id):
        """Sets the mass_form_id of this Form.


        :param mass_form_id: The mass_form_id of this Form.
        :type mass_form_id: str
        """

        self._mass_form_id = mass_form_id

    @property
    def modified(self):
        """Gets the modified of this Form.


        :return: The modified of this Form.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Form.


        :param modified: The modified of this Form.
        :type modified: str
        """

        self._modified = modified

    @property
    def project_id(self):
        """Gets the project_id of this Form.


        :return: The project_id of this Form.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Form.


        :param project_id: The project_id of this Form.
        :type project_id: str
        """

        self._project_id = project_id
