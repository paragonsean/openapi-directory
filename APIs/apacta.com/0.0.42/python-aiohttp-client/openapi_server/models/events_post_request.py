# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, end: str=None, name: str=None, project_id: str=None, start: str=None, user_id: str=None):
        """EventsPostRequest - a model defined in OpenAPI

        :param description: The description of this EventsPostRequest.
        :param end: The end of this EventsPostRequest.
        :param name: The name of this EventsPostRequest.
        :param project_id: The project_id of this EventsPostRequest.
        :param start: The start of this EventsPostRequest.
        :param user_id: The user_id of this EventsPostRequest.
        """
        self.openapi_types = {
            'description': str,
            'end': str,
            'name': str,
            'project_id': str,
            'start': str,
            'user_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'end': 'end',
            'name': 'name',
            'project_id': 'project_id',
            'start': 'start',
            'user_id': 'user_id'
        }

        self._description = description
        self._end = end
        self._name = name
        self._project_id = project_id
        self._start = start
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _events_post_request of this EventsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this EventsPostRequest.


        :return: The description of this EventsPostRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventsPostRequest.


        :param description: The description of this EventsPostRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def end(self):
        """Gets the end of this EventsPostRequest.


        :return: The end of this EventsPostRequest.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this EventsPostRequest.


        :param end: The end of this EventsPostRequest.
        :type end: str
        """

        self._end = end

    @property
    def name(self):
        """Gets the name of this EventsPostRequest.


        :return: The name of this EventsPostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventsPostRequest.


        :param name: The name of this EventsPostRequest.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this EventsPostRequest.


        :return: The project_id of this EventsPostRequest.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this EventsPostRequest.


        :param project_id: The project_id of this EventsPostRequest.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def start(self):
        """Gets the start of this EventsPostRequest.


        :return: The start of this EventsPostRequest.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this EventsPostRequest.


        :param start: The start of this EventsPostRequest.
        :type start: str
        """

        self._start = start

    @property
    def user_id(self):
        """Gets the user_id of this EventsPostRequest.


        :return: The user_id of this EventsPostRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EventsPostRequest.


        :param user_id: The user_id of this EventsPostRequest.
        :type user_id: str
        """

        self._user_id = user_id
