# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city_id: str=None, company_id: str=None, contact_id: str=None, created: str=None, created_by_id: str=None, deleted: str=None, description: str=None, end_time: str=None, erp_project_id: str=None, erp_task_id: str=None, full_name: str=None, has_final_invoice: bool=None, id: str=None, is_fixed_price: bool=None, is_offer: bool=None, is_rotten: str=None, latitude: str=None, longitude: str=None, modified: str=None, name: str=None, not_invoiced_amount: float=None, offer_id: str=None, parent_id: str=None, pre_calculation_id: str=None, products_total_cost_price: float=None, project_image_url: str=None, project_number: float=None, project_status_id: str=None, shared_project_id: str=None, start_time: str=None, street_name: str=None, thumbnail: str=None, total_sales_price: float=None, working_hours_total_cost_price: float=None):
        """Project - a model defined in OpenAPI

        :param city_id: The city_id of this Project.
        :param company_id: The company_id of this Project.
        :param contact_id: The contact_id of this Project.
        :param created: The created of this Project.
        :param created_by_id: The created_by_id of this Project.
        :param deleted: The deleted of this Project.
        :param description: The description of this Project.
        :param end_time: The end_time of this Project.
        :param erp_project_id: The erp_project_id of this Project.
        :param erp_task_id: The erp_task_id of this Project.
        :param full_name: The full_name of this Project.
        :param has_final_invoice: The has_final_invoice of this Project.
        :param id: The id of this Project.
        :param is_fixed_price: The is_fixed_price of this Project.
        :param is_offer: The is_offer of this Project.
        :param is_rotten: The is_rotten of this Project.
        :param latitude: The latitude of this Project.
        :param longitude: The longitude of this Project.
        :param modified: The modified of this Project.
        :param name: The name of this Project.
        :param not_invoiced_amount: The not_invoiced_amount of this Project.
        :param offer_id: The offer_id of this Project.
        :param parent_id: The parent_id of this Project.
        :param pre_calculation_id: The pre_calculation_id of this Project.
        :param products_total_cost_price: The products_total_cost_price of this Project.
        :param project_image_url: The project_image_url of this Project.
        :param project_number: The project_number of this Project.
        :param project_status_id: The project_status_id of this Project.
        :param shared_project_id: The shared_project_id of this Project.
        :param start_time: The start_time of this Project.
        :param street_name: The street_name of this Project.
        :param thumbnail: The thumbnail of this Project.
        :param total_sales_price: The total_sales_price of this Project.
        :param working_hours_total_cost_price: The working_hours_total_cost_price of this Project.
        """
        self.openapi_types = {
            'city_id': str,
            'company_id': str,
            'contact_id': str,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'description': str,
            'end_time': str,
            'erp_project_id': str,
            'erp_task_id': str,
            'full_name': str,
            'has_final_invoice': bool,
            'id': str,
            'is_fixed_price': bool,
            'is_offer': bool,
            'is_rotten': str,
            'latitude': str,
            'longitude': str,
            'modified': str,
            'name': str,
            'not_invoiced_amount': float,
            'offer_id': str,
            'parent_id': str,
            'pre_calculation_id': str,
            'products_total_cost_price': float,
            'project_image_url': str,
            'project_number': float,
            'project_status_id': str,
            'shared_project_id': str,
            'start_time': str,
            'street_name': str,
            'thumbnail': str,
            'total_sales_price': float,
            'working_hours_total_cost_price': float
        }

        self.attribute_map = {
            'city_id': 'city_id',
            'company_id': 'company_id',
            'contact_id': 'contact_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'description': 'description',
            'end_time': 'end_time',
            'erp_project_id': 'erp_project_id',
            'erp_task_id': 'erp_task_id',
            'full_name': 'full_name',
            'has_final_invoice': 'has_final_invoice',
            'id': 'id',
            'is_fixed_price': 'is_fixed_price',
            'is_offer': 'is_offer',
            'is_rotten': 'is_rotten',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'modified': 'modified',
            'name': 'name',
            'not_invoiced_amount': 'not_invoiced_amount',
            'offer_id': 'offer_id',
            'parent_id': 'parent_id',
            'pre_calculation_id': 'pre_calculation_id',
            'products_total_cost_price': 'products_total_cost_price',
            'project_image_url': 'project_image_url',
            'project_number': 'project_number',
            'project_status_id': 'project_status_id',
            'shared_project_id': 'shared_project_id',
            'start_time': 'start_time',
            'street_name': 'street_name',
            'thumbnail': 'thumbnail',
            'total_sales_price': 'total_sales_price',
            'working_hours_total_cost_price': 'working_hours_total_cost_price'
        }

        self._city_id = city_id
        self._company_id = company_id
        self._contact_id = contact_id
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._description = description
        self._end_time = end_time
        self._erp_project_id = erp_project_id
        self._erp_task_id = erp_task_id
        self._full_name = full_name
        self._has_final_invoice = has_final_invoice
        self._id = id
        self._is_fixed_price = is_fixed_price
        self._is_offer = is_offer
        self._is_rotten = is_rotten
        self._latitude = latitude
        self._longitude = longitude
        self._modified = modified
        self._name = name
        self._not_invoiced_amount = not_invoiced_amount
        self._offer_id = offer_id
        self._parent_id = parent_id
        self._pre_calculation_id = pre_calculation_id
        self._products_total_cost_price = products_total_cost_price
        self._project_image_url = project_image_url
        self._project_number = project_number
        self._project_status_id = project_status_id
        self._shared_project_id = shared_project_id
        self._start_time = start_time
        self._street_name = street_name
        self._thumbnail = thumbnail
        self._total_sales_price = total_sales_price
        self._working_hours_total_cost_price = working_hours_total_cost_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city_id(self):
        """Gets the city_id of this Project.


        :return: The city_id of this Project.
        :rtype: str
        """
        return self._city_id

    @city_id.setter
    def city_id(self, city_id):
        """Sets the city_id of this Project.


        :param city_id: The city_id of this Project.
        :type city_id: str
        """

        self._city_id = city_id

    @property
    def company_id(self):
        """Gets the company_id of this Project.


        :return: The company_id of this Project.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Project.


        :param company_id: The company_id of this Project.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def contact_id(self):
        """Gets the contact_id of this Project.


        :return: The contact_id of this Project.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this Project.


        :param contact_id: The contact_id of this Project.
        :type contact_id: str
        """

        self._contact_id = contact_id

    @property
    def created(self):
        """Gets the created of this Project.


        :return: The created of this Project.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Project.


        :param created: The created of this Project.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Project.


        :return: The created_by_id of this Project.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Project.


        :param created_by_id: The created_by_id of this Project.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this Project.

        Only present if it's a deleted object

        :return: The deleted of this Project.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Project.

        Only present if it's a deleted object

        :param deleted: The deleted of this Project.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Project.


        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.
        :type description: str
        """
        if description is not None and len(description) > 8192:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")

        self._description = description

    @property
    def end_time(self):
        """Gets the end_time of this Project.


        :return: The end_time of this Project.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Project.


        :param end_time: The end_time of this Project.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def erp_project_id(self):
        """Gets the erp_project_id of this Project.


        :return: The erp_project_id of this Project.
        :rtype: str
        """
        return self._erp_project_id

    @erp_project_id.setter
    def erp_project_id(self, erp_project_id):
        """Sets the erp_project_id of this Project.


        :param erp_project_id: The erp_project_id of this Project.
        :type erp_project_id: str
        """
        if erp_project_id is not None and len(erp_project_id) > 255:
            raise ValueError("Invalid value for `erp_project_id`, length must be less than or equal to `255`")

        self._erp_project_id = erp_project_id

    @property
    def erp_task_id(self):
        """Gets the erp_task_id of this Project.


        :return: The erp_task_id of this Project.
        :rtype: str
        """
        return self._erp_task_id

    @erp_task_id.setter
    def erp_task_id(self, erp_task_id):
        """Sets the erp_task_id of this Project.


        :param erp_task_id: The erp_task_id of this Project.
        :type erp_task_id: str
        """
        if erp_task_id is not None and len(erp_task_id) > 255:
            raise ValueError("Invalid value for `erp_task_id`, length must be less than or equal to `255`")

        self._erp_task_id = erp_task_id

    @property
    def full_name(self):
        """Gets the full_name of this Project.

        Project number + name

        :return: The full_name of this Project.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Project.

        Project number + name

        :param full_name: The full_name of this Project.
        :type full_name: str
        """
        if full_name is not None and len(full_name) > 255:
            raise ValueError("Invalid value for `full_name`, length must be less than or equal to `255`")

        self._full_name = full_name

    @property
    def has_final_invoice(self):
        """Gets the has_final_invoice of this Project.

        Is there at least one final invoice

        :return: The has_final_invoice of this Project.
        :rtype: bool
        """
        return self._has_final_invoice

    @has_final_invoice.setter
    def has_final_invoice(self, has_final_invoice):
        """Sets the has_final_invoice of this Project.

        Is there at least one final invoice

        :param has_final_invoice: The has_final_invoice of this Project.
        :type has_final_invoice: bool
        """

        self._has_final_invoice = has_final_invoice

    @property
    def id(self):
        """Gets the id of this Project.


        :return: The id of this Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_fixed_price(self):
        """Gets the is_fixed_price of this Project.


        :return: The is_fixed_price of this Project.
        :rtype: bool
        """
        return self._is_fixed_price

    @is_fixed_price.setter
    def is_fixed_price(self, is_fixed_price):
        """Sets the is_fixed_price of this Project.


        :param is_fixed_price: The is_fixed_price of this Project.
        :type is_fixed_price: bool
        """

        self._is_fixed_price = is_fixed_price

    @property
    def is_offer(self):
        """Gets the is_offer of this Project.

        Is the project was offer

        :return: The is_offer of this Project.
        :rtype: bool
        """
        return self._is_offer

    @is_offer.setter
    def is_offer(self, is_offer):
        """Sets the is_offer of this Project.

        Is the project was offer

        :param is_offer: The is_offer of this Project.
        :type is_offer: bool
        """

        self._is_offer = is_offer

    @property
    def is_rotten(self):
        """Gets the is_rotten of this Project.

        Last form date - read-only

        :return: The is_rotten of this Project.
        :rtype: str
        """
        return self._is_rotten

    @is_rotten.setter
    def is_rotten(self, is_rotten):
        """Sets the is_rotten of this Project.

        Last form date - read-only

        :param is_rotten: The is_rotten of this Project.
        :type is_rotten: str
        """

        self._is_rotten = is_rotten

    @property
    def latitude(self):
        """Gets the latitude of this Project.


        :return: The latitude of this Project.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Project.


        :param latitude: The latitude of this Project.
        :type latitude: str
        """
        if latitude is not None and len(latitude) > 255:
            raise ValueError("Invalid value for `latitude`, length must be less than or equal to `255`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Project.


        :return: The longitude of this Project.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Project.


        :param longitude: The longitude of this Project.
        :type longitude: str
        """
        if longitude is not None and len(longitude) > 255:
            raise ValueError("Invalid value for `longitude`, length must be less than or equal to `255`")

        self._longitude = longitude

    @property
    def modified(self):
        """Gets the modified of this Project.


        :return: The modified of this Project.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Project.


        :param modified: The modified of this Project.
        :type modified: str
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this Project.


        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def not_invoiced_amount(self):
        """Gets the not_invoiced_amount of this Project.


        :return: The not_invoiced_amount of this Project.
        :rtype: float
        """
        return self._not_invoiced_amount

    @not_invoiced_amount.setter
    def not_invoiced_amount(self, not_invoiced_amount):
        """Sets the not_invoiced_amount of this Project.


        :param not_invoiced_amount: The not_invoiced_amount of this Project.
        :type not_invoiced_amount: float
        """

        self._not_invoiced_amount = not_invoiced_amount

    @property
    def offer_id(self):
        """Gets the offer_id of this Project.


        :return: The offer_id of this Project.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this Project.


        :param offer_id: The offer_id of this Project.
        :type offer_id: str
        """

        self._offer_id = offer_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Project.


        :return: The parent_id of this Project.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Project.


        :param parent_id: The parent_id of this Project.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def pre_calculation_id(self):
        """Gets the pre_calculation_id of this Project.


        :return: The pre_calculation_id of this Project.
        :rtype: str
        """
        return self._pre_calculation_id

    @pre_calculation_id.setter
    def pre_calculation_id(self, pre_calculation_id):
        """Sets the pre_calculation_id of this Project.


        :param pre_calculation_id: The pre_calculation_id of this Project.
        :type pre_calculation_id: str
        """

        self._pre_calculation_id = pre_calculation_id

    @property
    def products_total_cost_price(self):
        """Gets the products_total_cost_price of this Project.


        :return: The products_total_cost_price of this Project.
        :rtype: float
        """
        return self._products_total_cost_price

    @products_total_cost_price.setter
    def products_total_cost_price(self, products_total_cost_price):
        """Sets the products_total_cost_price of this Project.


        :param products_total_cost_price: The products_total_cost_price of this Project.
        :type products_total_cost_price: float
        """

        self._products_total_cost_price = products_total_cost_price

    @property
    def project_image_url(self):
        """Gets the project_image_url of this Project.


        :return: The project_image_url of this Project.
        :rtype: str
        """
        return self._project_image_url

    @project_image_url.setter
    def project_image_url(self, project_image_url):
        """Sets the project_image_url of this Project.


        :param project_image_url: The project_image_url of this Project.
        :type project_image_url: str
        """

        self._project_image_url = project_image_url

    @property
    def project_number(self):
        """Gets the project_number of this Project.


        :return: The project_number of this Project.
        :rtype: float
        """
        return self._project_number

    @project_number.setter
    def project_number(self, project_number):
        """Sets the project_number of this Project.


        :param project_number: The project_number of this Project.
        :type project_number: float
        """

        self._project_number = project_number

    @property
    def project_status_id(self):
        """Gets the project_status_id of this Project.


        :return: The project_status_id of this Project.
        :rtype: str
        """
        return self._project_status_id

    @project_status_id.setter
    def project_status_id(self, project_status_id):
        """Sets the project_status_id of this Project.


        :param project_status_id: The project_status_id of this Project.
        :type project_status_id: str
        """

        self._project_status_id = project_status_id

    @property
    def shared_project_id(self):
        """Gets the shared_project_id of this Project.


        :return: The shared_project_id of this Project.
        :rtype: str
        """
        return self._shared_project_id

    @shared_project_id.setter
    def shared_project_id(self, shared_project_id):
        """Sets the shared_project_id of this Project.


        :param shared_project_id: The shared_project_id of this Project.
        :type shared_project_id: str
        """

        self._shared_project_id = shared_project_id

    @property
    def start_time(self):
        """Gets the start_time of this Project.


        :return: The start_time of this Project.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Project.


        :param start_time: The start_time of this Project.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def street_name(self):
        """Gets the street_name of this Project.


        :return: The street_name of this Project.
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this Project.


        :param street_name: The street_name of this Project.
        :type street_name: str
        """
        if street_name is not None and len(street_name) > 255:
            raise ValueError("Invalid value for `street_name`, length must be less than or equal to `255`")

        self._street_name = street_name

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Project.


        :return: The thumbnail of this Project.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Project.


        :param thumbnail: The thumbnail of this Project.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def total_sales_price(self):
        """Gets the total_sales_price of this Project.


        :return: The total_sales_price of this Project.
        :rtype: float
        """
        return self._total_sales_price

    @total_sales_price.setter
    def total_sales_price(self, total_sales_price):
        """Sets the total_sales_price of this Project.


        :param total_sales_price: The total_sales_price of this Project.
        :type total_sales_price: float
        """

        self._total_sales_price = total_sales_price

    @property
    def working_hours_total_cost_price(self):
        """Gets the working_hours_total_cost_price of this Project.


        :return: The working_hours_total_cost_price of this Project.
        :rtype: float
        """
        return self._working_hours_total_cost_price

    @working_hours_total_cost_price.setter
    def working_hours_total_cost_price(self, working_hours_total_cost_price):
        """Sets the working_hours_total_cost_price of this Project.


        :param working_hours_total_cost_price: The working_hours_total_cost_price of this Project.
        :type working_hours_total_cost_price: float
        """

        self._working_hours_total_cost_price = working_hours_total_cost_price
