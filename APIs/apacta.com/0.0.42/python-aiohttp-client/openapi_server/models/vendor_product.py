# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VendorProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, barcode: str=None, created: str=None, created_by_id: str=None, deleted: str=None, description: str=None, id: str=None, modified: str=None, name: str=None, price: float=None, product_category_number: str=None, product_number: str=None, vendor_id: str=None):
        """VendorProduct - a model defined in OpenAPI

        :param barcode: The barcode of this VendorProduct.
        :param created: The created of this VendorProduct.
        :param created_by_id: The created_by_id of this VendorProduct.
        :param deleted: The deleted of this VendorProduct.
        :param description: The description of this VendorProduct.
        :param id: The id of this VendorProduct.
        :param modified: The modified of this VendorProduct.
        :param name: The name of this VendorProduct.
        :param price: The price of this VendorProduct.
        :param product_category_number: The product_category_number of this VendorProduct.
        :param product_number: The product_number of this VendorProduct.
        :param vendor_id: The vendor_id of this VendorProduct.
        """
        self.openapi_types = {
            'barcode': str,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'description': str,
            'id': str,
            'modified': str,
            'name': str,
            'price': float,
            'product_category_number': str,
            'product_number': str,
            'vendor_id': str
        }

        self.attribute_map = {
            'barcode': 'barcode',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'description': 'description',
            'id': 'id',
            'modified': 'modified',
            'name': 'name',
            'price': 'price',
            'product_category_number': 'product_category_number',
            'product_number': 'product_number',
            'vendor_id': 'vendor_id'
        }

        self._barcode = barcode
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._description = description
        self._id = id
        self._modified = modified
        self._name = name
        self._price = price
        self._product_category_number = product_category_number
        self._product_number = product_number
        self._vendor_id = vendor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VendorProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VendorProduct of this VendorProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def barcode(self):
        """Gets the barcode of this VendorProduct.


        :return: The barcode of this VendorProduct.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this VendorProduct.


        :param barcode: The barcode of this VendorProduct.
        :type barcode: str
        """
        if barcode is not None and len(barcode) > 255:
            raise ValueError("Invalid value for `barcode`, length must be less than or equal to `255`")

        self._barcode = barcode

    @property
    def created(self):
        """Gets the created of this VendorProduct.


        :return: The created of this VendorProduct.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this VendorProduct.


        :param created: The created of this VendorProduct.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this VendorProduct.


        :return: The created_by_id of this VendorProduct.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this VendorProduct.


        :param created_by_id: The created_by_id of this VendorProduct.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this VendorProduct.

        Only present if it's a deleted object

        :return: The deleted of this VendorProduct.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this VendorProduct.

        Only present if it's a deleted object

        :param deleted: The deleted of this VendorProduct.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this VendorProduct.


        :return: The description of this VendorProduct.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VendorProduct.


        :param description: The description of this VendorProduct.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this VendorProduct.


        :return: The id of this VendorProduct.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VendorProduct.


        :param id: The id of this VendorProduct.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this VendorProduct.


        :return: The modified of this VendorProduct.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this VendorProduct.


        :param modified: The modified of this VendorProduct.
        :type modified: str
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this VendorProduct.


        :return: The name of this VendorProduct.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VendorProduct.


        :param name: The name of this VendorProduct.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def price(self):
        """Gets the price of this VendorProduct.


        :return: The price of this VendorProduct.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this VendorProduct.


        :param price: The price of this VendorProduct.
        :type price: float
        """

        self._price = price

    @property
    def product_category_number(self):
        """Gets the product_category_number of this VendorProduct.


        :return: The product_category_number of this VendorProduct.
        :rtype: str
        """
        return self._product_category_number

    @product_category_number.setter
    def product_category_number(self, product_category_number):
        """Sets the product_category_number of this VendorProduct.


        :param product_category_number: The product_category_number of this VendorProduct.
        :type product_category_number: str
        """
        if product_category_number is not None and len(product_category_number) > 255:
            raise ValueError("Invalid value for `product_category_number`, length must be less than or equal to `255`")

        self._product_category_number = product_category_number

    @property
    def product_number(self):
        """Gets the product_number of this VendorProduct.


        :return: The product_number of this VendorProduct.
        :rtype: str
        """
        return self._product_number

    @product_number.setter
    def product_number(self, product_number):
        """Sets the product_number of this VendorProduct.


        :param product_number: The product_number of this VendorProduct.
        :type product_number: str
        """
        if product_number is not None and len(product_number) > 255:
            raise ValueError("Invalid value for `product_number`, length must be less than or equal to `255`")

        self._product_number = product_number

    @property
    def vendor_id(self):
        """Gets the vendor_id of this VendorProduct.


        :return: The vendor_id of this VendorProduct.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this VendorProduct.


        :param vendor_id: The vendor_id of this VendorProduct.
        :type vendor_id: str
        """

        self._vendor_id = vendor_id
