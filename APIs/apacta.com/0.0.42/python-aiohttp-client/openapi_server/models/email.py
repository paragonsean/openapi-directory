# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Email(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_response: str=None, body: str=None, carbon_copy: str=None, company_id: str=None, created: str=None, created_by_id: str=None, deleted: str=None, id: str=None, is_sent: bool=None, modified: str=None, recipients: str=None, reply_to: str=None, subject: str=None):
        """Email - a model defined in OpenAPI

        :param api_response: The api_response of this Email.
        :param body: The body of this Email.
        :param carbon_copy: The carbon_copy of this Email.
        :param company_id: The company_id of this Email.
        :param created: The created of this Email.
        :param created_by_id: The created_by_id of this Email.
        :param deleted: The deleted of this Email.
        :param id: The id of this Email.
        :param is_sent: The is_sent of this Email.
        :param modified: The modified of this Email.
        :param recipients: The recipients of this Email.
        :param reply_to: The reply_to of this Email.
        :param subject: The subject of this Email.
        """
        self.openapi_types = {
            'api_response': str,
            'body': str,
            'carbon_copy': str,
            'company_id': str,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'id': str,
            'is_sent': bool,
            'modified': str,
            'recipients': str,
            'reply_to': str,
            'subject': str
        }

        self.attribute_map = {
            'api_response': 'api_response',
            'body': 'body',
            'carbon_copy': 'carbon_copy',
            'company_id': 'company_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'id': 'id',
            'is_sent': 'is_sent',
            'modified': 'modified',
            'recipients': 'recipients',
            'reply_to': 'reply_to',
            'subject': 'subject'
        }

        self._api_response = api_response
        self._body = body
        self._carbon_copy = carbon_copy
        self._company_id = company_id
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._id = id
        self._is_sent = is_sent
        self._modified = modified
        self._recipients = recipients
        self._reply_to = reply_to
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Email':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Email of this Email.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_response(self):
        """Gets the api_response of this Email.


        :return: The api_response of this Email.
        :rtype: str
        """
        return self._api_response

    @api_response.setter
    def api_response(self, api_response):
        """Sets the api_response of this Email.


        :param api_response: The api_response of this Email.
        :type api_response: str
        """

        self._api_response = api_response

    @property
    def body(self):
        """Gets the body of this Email.


        :return: The body of this Email.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Email.


        :param body: The body of this Email.
        :type body: str
        """

        self._body = body

    @property
    def carbon_copy(self):
        """Gets the carbon_copy of this Email.


        :return: The carbon_copy of this Email.
        :rtype: str
        """
        return self._carbon_copy

    @carbon_copy.setter
    def carbon_copy(self, carbon_copy):
        """Sets the carbon_copy of this Email.


        :param carbon_copy: The carbon_copy of this Email.
        :type carbon_copy: str
        """

        self._carbon_copy = carbon_copy

    @property
    def company_id(self):
        """Gets the company_id of this Email.


        :return: The company_id of this Email.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Email.


        :param company_id: The company_id of this Email.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def created(self):
        """Gets the created of this Email.


        :return: The created of this Email.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Email.


        :param created: The created of this Email.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Email.


        :return: The created_by_id of this Email.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Email.


        :param created_by_id: The created_by_id of this Email.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this Email.

        Only present if it's a deleted object

        :return: The deleted of this Email.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Email.

        Only present if it's a deleted object

        :param deleted: The deleted of this Email.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this Email.


        :return: The id of this Email.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Email.


        :param id: The id of this Email.
        :type id: str
        """

        self._id = id

    @property
    def is_sent(self):
        """Gets the is_sent of this Email.


        :return: The is_sent of this Email.
        :rtype: bool
        """
        return self._is_sent

    @is_sent.setter
    def is_sent(self, is_sent):
        """Sets the is_sent of this Email.


        :param is_sent: The is_sent of this Email.
        :type is_sent: bool
        """

        self._is_sent = is_sent

    @property
    def modified(self):
        """Gets the modified of this Email.


        :return: The modified of this Email.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Email.


        :param modified: The modified of this Email.
        :type modified: str
        """

        self._modified = modified

    @property
    def recipients(self):
        """Gets the recipients of this Email.


        :return: The recipients of this Email.
        :rtype: str
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this Email.


        :param recipients: The recipients of this Email.
        :type recipients: str
        """
        if recipients is not None and len(recipients) > 1024:
            raise ValueError("Invalid value for `recipients`, length must be less than or equal to `1024`")

        self._recipients = recipients

    @property
    def reply_to(self):
        """Gets the reply_to of this Email.


        :return: The reply_to of this Email.
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this Email.


        :param reply_to: The reply_to of this Email.
        :type reply_to: str
        """

        self._reply_to = reply_to

    @property
    def subject(self):
        """Gets the subject of this Email.


        :return: The subject of this Email.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Email.


        :param subject: The subject of this Email.
        :type subject: str
        """

        self._subject = subject
