# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, centiga_id: str=None, city_id: str=None, company_id: str=None, country_id: str=None, created: str=None, created_by_id: str=None, cvr: str=None, deleted: str=None, description: str=None, email: str=None, erp_id: str=None, id: str=None, modified: str=None, name: str=None, phone: str=None, pogo_id: str=None, tripletex_id: str=None, website: str=None):
        """Contact - a model defined in OpenAPI

        :param address: The address of this Contact.
        :param centiga_id: The centiga_id of this Contact.
        :param city_id: The city_id of this Contact.
        :param company_id: The company_id of this Contact.
        :param country_id: The country_id of this Contact.
        :param created: The created of this Contact.
        :param created_by_id: The created_by_id of this Contact.
        :param cvr: The cvr of this Contact.
        :param deleted: The deleted of this Contact.
        :param description: The description of this Contact.
        :param email: The email of this Contact.
        :param erp_id: The erp_id of this Contact.
        :param id: The id of this Contact.
        :param modified: The modified of this Contact.
        :param name: The name of this Contact.
        :param phone: The phone of this Contact.
        :param pogo_id: The pogo_id of this Contact.
        :param tripletex_id: The tripletex_id of this Contact.
        :param website: The website of this Contact.
        """
        self.openapi_types = {
            'address': str,
            'centiga_id': str,
            'city_id': str,
            'company_id': str,
            'country_id': str,
            'created': str,
            'created_by_id': str,
            'cvr': str,
            'deleted': str,
            'description': str,
            'email': str,
            'erp_id': str,
            'id': str,
            'modified': str,
            'name': str,
            'phone': str,
            'pogo_id': str,
            'tripletex_id': str,
            'website': str
        }

        self.attribute_map = {
            'address': 'address',
            'centiga_id': 'centiga_id',
            'city_id': 'city_id',
            'company_id': 'company_id',
            'country_id': 'country_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'cvr': 'cvr',
            'deleted': 'deleted',
            'description': 'description',
            'email': 'email',
            'erp_id': 'erp_id',
            'id': 'id',
            'modified': 'modified',
            'name': 'name',
            'phone': 'phone',
            'pogo_id': 'pogo_id',
            'tripletex_id': 'tripletex_id',
            'website': 'website'
        }

        self._address = address
        self._centiga_id = centiga_id
        self._city_id = city_id
        self._company_id = company_id
        self._country_id = country_id
        self._created = created
        self._created_by_id = created_by_id
        self._cvr = cvr
        self._deleted = deleted
        self._description = description
        self._email = email
        self._erp_id = erp_id
        self._id = id
        self._modified = modified
        self._name = name
        self._phone = phone
        self._pogo_id = pogo_id
        self._tripletex_id = tripletex_id
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Contact.

        Street address

        :return: The address of this Contact.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Contact.

        Street address

        :param address: The address of this Contact.
        :type address: str
        """
        if address is not None and len(address) > 255:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `255`")

        self._address = address

    @property
    def centiga_id(self):
        """Gets the centiga_id of this Contact.


        :return: The centiga_id of this Contact.
        :rtype: str
        """
        return self._centiga_id

    @centiga_id.setter
    def centiga_id(self, centiga_id):
        """Sets the centiga_id of this Contact.


        :param centiga_id: The centiga_id of this Contact.
        :type centiga_id: str
        """
        if centiga_id is not None and len(centiga_id) > 255:
            raise ValueError("Invalid value for `centiga_id`, length must be less than or equal to `255`")

        self._centiga_id = centiga_id

    @property
    def city_id(self):
        """Gets the city_id of this Contact.


        :return: The city_id of this Contact.
        :rtype: str
        """
        return self._city_id

    @city_id.setter
    def city_id(self, city_id):
        """Sets the city_id of this Contact.


        :param city_id: The city_id of this Contact.
        :type city_id: str
        """

        self._city_id = city_id

    @property
    def company_id(self):
        """Gets the company_id of this Contact.

        Only filled out if this represents another company within Apacta (used for partners)

        :return: The company_id of this Contact.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Contact.

        Only filled out if this represents another company within Apacta (used for partners)

        :param company_id: The company_id of this Contact.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def country_id(self):
        """Gets the country_id of this Contact.


        :return: The country_id of this Contact.
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this Contact.


        :param country_id: The country_id of this Contact.
        :type country_id: str
        """

        self._country_id = country_id

    @property
    def created(self):
        """Gets the created of this Contact.


        :return: The created of this Contact.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Contact.


        :param created: The created of this Contact.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Contact.

        Read-only

        :return: The created_by_id of this Contact.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Contact.

        Read-only

        :param created_by_id: The created_by_id of this Contact.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def cvr(self):
        """Gets the cvr of this Contact.


        :return: The cvr of this Contact.
        :rtype: str
        """
        return self._cvr

    @cvr.setter
    def cvr(self, cvr):
        """Sets the cvr of this Contact.


        :param cvr: The cvr of this Contact.
        :type cvr: str
        """
        if cvr is not None and len(cvr) > 255:
            raise ValueError("Invalid value for `cvr`, length must be less than or equal to `255`")

        self._cvr = cvr

    @property
    def deleted(self):
        """Gets the deleted of this Contact.

        Only present if it's a deleted object

        :return: The deleted of this Contact.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Contact.

        Only present if it's a deleted object

        :param deleted: The deleted of this Contact.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Contact.


        :return: The description of this Contact.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Contact.


        :param description: The description of this Contact.
        :type description: str
        """
        if description is not None and len(description) > 8192:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")

        self._description = description

    @property
    def email(self):
        """Gets the email of this Contact.


        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.


        :param email: The email of this Contact.
        :type email: str
        """
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")

        self._email = email

    @property
    def erp_id(self):
        """Gets the erp_id of this Contact.

        If company has integration to an ERP system, and the contacts are synchronized, this will be the ERP-systems ID of this contact

        :return: The erp_id of this Contact.
        :rtype: str
        """
        return self._erp_id

    @erp_id.setter
    def erp_id(self, erp_id):
        """Sets the erp_id of this Contact.

        If company has integration to an ERP system, and the contacts are synchronized, this will be the ERP-systems ID of this contact

        :param erp_id: The erp_id of this Contact.
        :type erp_id: str
        """
        if erp_id is not None and len(erp_id) > 255:
            raise ValueError("Invalid value for `erp_id`, length must be less than or equal to `255`")

        self._erp_id = erp_id

    @property
    def id(self):
        """Gets the id of this Contact.


        :return: The id of this Contact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.


        :param id: The id of this Contact.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this Contact.


        :return: The modified of this Contact.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Contact.


        :param modified: The modified of this Contact.
        :type modified: str
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this Contact.


        :return: The name of this Contact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contact.


        :param name: The name of this Contact.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this Contact.

        Format like eg. `28680133` or `046158971404`

        :return: The phone of this Contact.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Contact.

        Format like eg. `28680133` or `046158971404`

        :param phone: The phone of this Contact.
        :type phone: str
        """
        if phone is not None and len(phone) > 32:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `32`")

        self._phone = phone

    @property
    def pogo_id(self):
        """Gets the pogo_id of this Contact.


        :return: The pogo_id of this Contact.
        :rtype: str
        """
        return self._pogo_id

    @pogo_id.setter
    def pogo_id(self, pogo_id):
        """Sets the pogo_id of this Contact.


        :param pogo_id: The pogo_id of this Contact.
        :type pogo_id: str
        """
        if pogo_id is not None and len(pogo_id) > 255:
            raise ValueError("Invalid value for `pogo_id`, length must be less than or equal to `255`")

        self._pogo_id = pogo_id

    @property
    def tripletex_id(self):
        """Gets the tripletex_id of this Contact.


        :return: The tripletex_id of this Contact.
        :rtype: str
        """
        return self._tripletex_id

    @tripletex_id.setter
    def tripletex_id(self, tripletex_id):
        """Sets the tripletex_id of this Contact.


        :param tripletex_id: The tripletex_id of this Contact.
        :type tripletex_id: str
        """
        if tripletex_id is not None and len(tripletex_id) > 255:
            raise ValueError("Invalid value for `tripletex_id`, length must be less than or equal to `255`")

        self._tripletex_id = tripletex_id

    @property
    def website(self):
        """Gets the website of this Contact.


        :return: The website of this Contact.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Contact.


        :param website: The website of this Contact.
        :type website: str
        """
        if website is not None and len(website) > 255:
            raise ValueError("Invalid value for `website`, length must be less than or equal to `255`")

        self._website = website
