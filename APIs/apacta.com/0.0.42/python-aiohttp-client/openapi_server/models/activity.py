# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Activity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, created: str=None, created_by_id: str=None, deleted: str=None, hex_code: str=None, id: str=None, modified: str=None, name: str=None):
        """Activity - a model defined in OpenAPI

        :param company_id: The company_id of this Activity.
        :param created: The created of this Activity.
        :param created_by_id: The created_by_id of this Activity.
        :param deleted: The deleted of this Activity.
        :param hex_code: The hex_code of this Activity.
        :param id: The id of this Activity.
        :param modified: The modified of this Activity.
        :param name: The name of this Activity.
        """
        self.openapi_types = {
            'company_id': str,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'hex_code': str,
            'id': str,
            'modified': str,
            'name': str
        }

        self.attribute_map = {
            'company_id': 'company_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'hex_code': 'hex_code',
            'id': 'id',
            'modified': 'modified',
            'name': 'name'
        }

        self._company_id = company_id
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._hex_code = hex_code
        self._id = id
        self._modified = modified
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity of this Activity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this Activity.


        :return: The company_id of this Activity.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Activity.


        :param company_id: The company_id of this Activity.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def created(self):
        """Gets the created of this Activity.


        :return: The created of this Activity.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Activity.


        :param created: The created of this Activity.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Activity.


        :return: The created_by_id of this Activity.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Activity.


        :param created_by_id: The created_by_id of this Activity.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this Activity.

        Only present if it's a deleted object

        :return: The deleted of this Activity.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Activity.

        Only present if it's a deleted object

        :param deleted: The deleted of this Activity.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def hex_code(self):
        """Gets the hex_code of this Activity.


        :return: The hex_code of this Activity.
        :rtype: str
        """
        return self._hex_code

    @hex_code.setter
    def hex_code(self, hex_code):
        """Sets the hex_code of this Activity.


        :param hex_code: The hex_code of this Activity.
        :type hex_code: str
        """
        if hex_code is not None and len(hex_code) > 6:
            raise ValueError("Invalid value for `hex_code`, length must be less than or equal to `6`")

        self._hex_code = hex_code

    @property
    def id(self):
        """Gets the id of this Activity.


        :return: The id of this Activity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Activity.


        :param id: The id of this Activity.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this Activity.


        :return: The modified of this Activity.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Activity.


        :param modified: The modified of this Activity.
        :type modified: str
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this Activity.


        :return: The name of this Activity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Activity.


        :param name: The name of this Activity.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name
