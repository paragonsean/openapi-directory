# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_settings_category_id: str=None, created: str=None, created_by_id: str=None, default_value: str=None, deleted: str=None, description: str=None, feature_id: str=None, id: str=None, identifier: str=None, modified: str=None, modified_by_id: str=None, name: str=None, options: str=None, placement: int=None, type: str=None):
        """CompanySettings - a model defined in OpenAPI

        :param company_settings_category_id: The company_settings_category_id of this CompanySettings.
        :param created: The created of this CompanySettings.
        :param created_by_id: The created_by_id of this CompanySettings.
        :param default_value: The default_value of this CompanySettings.
        :param deleted: The deleted of this CompanySettings.
        :param description: The description of this CompanySettings.
        :param feature_id: The feature_id of this CompanySettings.
        :param id: The id of this CompanySettings.
        :param identifier: The identifier of this CompanySettings.
        :param modified: The modified of this CompanySettings.
        :param modified_by_id: The modified_by_id of this CompanySettings.
        :param name: The name of this CompanySettings.
        :param options: The options of this CompanySettings.
        :param placement: The placement of this CompanySettings.
        :param type: The type of this CompanySettings.
        """
        self.openapi_types = {
            'company_settings_category_id': str,
            'created': str,
            'created_by_id': str,
            'default_value': str,
            'deleted': str,
            'description': str,
            'feature_id': str,
            'id': str,
            'identifier': str,
            'modified': str,
            'modified_by_id': str,
            'name': str,
            'options': str,
            'placement': int,
            'type': str
        }

        self.attribute_map = {
            'company_settings_category_id': 'company_settings_category_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'default_value': 'default_value',
            'deleted': 'deleted',
            'description': 'description',
            'feature_id': 'feature_id',
            'id': 'id',
            'identifier': 'identifier',
            'modified': 'modified',
            'modified_by_id': 'modified_by_id',
            'name': 'name',
            'options': 'options',
            'placement': 'placement',
            'type': 'type'
        }

        self._company_settings_category_id = company_settings_category_id
        self._created = created
        self._created_by_id = created_by_id
        self._default_value = default_value
        self._deleted = deleted
        self._description = description
        self._feature_id = feature_id
        self._id = id
        self._identifier = identifier
        self._modified = modified
        self._modified_by_id = modified_by_id
        self._name = name
        self._options = options
        self._placement = placement
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompanySettings of this CompanySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_settings_category_id(self):
        """Gets the company_settings_category_id of this CompanySettings.


        :return: The company_settings_category_id of this CompanySettings.
        :rtype: str
        """
        return self._company_settings_category_id

    @company_settings_category_id.setter
    def company_settings_category_id(self, company_settings_category_id):
        """Sets the company_settings_category_id of this CompanySettings.


        :param company_settings_category_id: The company_settings_category_id of this CompanySettings.
        :type company_settings_category_id: str
        """

        self._company_settings_category_id = company_settings_category_id

    @property
    def created(self):
        """Gets the created of this CompanySettings.


        :return: The created of this CompanySettings.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CompanySettings.


        :param created: The created of this CompanySettings.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this CompanySettings.


        :return: The created_by_id of this CompanySettings.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this CompanySettings.


        :param created_by_id: The created_by_id of this CompanySettings.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def default_value(self):
        """Gets the default_value of this CompanySettings.


        :return: The default_value of this CompanySettings.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CompanySettings.


        :param default_value: The default_value of this CompanySettings.
        :type default_value: str
        """
        if default_value is not None and len(default_value) > 255:
            raise ValueError("Invalid value for `default_value`, length must be less than or equal to `255`")

        self._default_value = default_value

    @property
    def deleted(self):
        """Gets the deleted of this CompanySettings.

        Only present if it's a deleted object

        :return: The deleted of this CompanySettings.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CompanySettings.

        Only present if it's a deleted object

        :param deleted: The deleted of this CompanySettings.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this CompanySettings.


        :return: The description of this CompanySettings.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CompanySettings.


        :param description: The description of this CompanySettings.
        :type description: str
        """
        if description is not None and len(description) > 8192:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")

        self._description = description

    @property
    def feature_id(self):
        """Gets the feature_id of this CompanySettings.


        :return: The feature_id of this CompanySettings.
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this CompanySettings.


        :param feature_id: The feature_id of this CompanySettings.
        :type feature_id: str
        """

        self._feature_id = feature_id

    @property
    def id(self):
        """Gets the id of this CompanySettings.


        :return: The id of this CompanySettings.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanySettings.


        :param id: The id of this CompanySettings.
        :type id: str
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this CompanySettings.


        :return: The identifier of this CompanySettings.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CompanySettings.


        :param identifier: The identifier of this CompanySettings.
        :type identifier: str
        """
        if identifier is not None and len(identifier) > 255:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `255`")

        self._identifier = identifier

    @property
    def modified(self):
        """Gets the modified of this CompanySettings.


        :return: The modified of this CompanySettings.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this CompanySettings.


        :param modified: The modified of this CompanySettings.
        :type modified: str
        """

        self._modified = modified

    @property
    def modified_by_id(self):
        """Gets the modified_by_id of this CompanySettings.


        :return: The modified_by_id of this CompanySettings.
        :rtype: str
        """
        return self._modified_by_id

    @modified_by_id.setter
    def modified_by_id(self, modified_by_id):
        """Sets the modified_by_id of this CompanySettings.


        :param modified_by_id: The modified_by_id of this CompanySettings.
        :type modified_by_id: str
        """

        self._modified_by_id = modified_by_id

    @property
    def name(self):
        """Gets the name of this CompanySettings.


        :return: The name of this CompanySettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanySettings.


        :param name: The name of this CompanySettings.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def options(self):
        """Gets the options of this CompanySettings.


        :return: The options of this CompanySettings.
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CompanySettings.


        :param options: The options of this CompanySettings.
        :type options: str
        """
        if options is not None and len(options) > 255:
            raise ValueError("Invalid value for `options`, length must be less than or equal to `255`")

        self._options = options

    @property
    def placement(self):
        """Gets the placement of this CompanySettings.


        :return: The placement of this CompanySettings.
        :rtype: int
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this CompanySettings.


        :param placement: The placement of this CompanySettings.
        :type placement: int
        """

        self._placement = placement

    @property
    def type(self):
        """Gets the type of this CompanySettings.


        :return: The type of this CompanySettings.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompanySettings.


        :param type: The type of this CompanySettings.
        :type type: str
        """
        if type is not None and len(type) > 255:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `255`")

        self._type = type
