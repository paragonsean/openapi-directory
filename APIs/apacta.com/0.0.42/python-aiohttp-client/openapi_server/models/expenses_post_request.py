# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpensesPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, currency_id: str=None, delivery_date: date=None, description: str=None, project_id: str=None, reference: str=None, short_text: str=None, supplier_invoice_number: str=None):
        """ExpensesPostRequest - a model defined in OpenAPI

        :param contact_id: The contact_id of this ExpensesPostRequest.
        :param currency_id: The currency_id of this ExpensesPostRequest.
        :param delivery_date: The delivery_date of this ExpensesPostRequest.
        :param description: The description of this ExpensesPostRequest.
        :param project_id: The project_id of this ExpensesPostRequest.
        :param reference: The reference of this ExpensesPostRequest.
        :param short_text: The short_text of this ExpensesPostRequest.
        :param supplier_invoice_number: The supplier_invoice_number of this ExpensesPostRequest.
        """
        self.openapi_types = {
            'contact_id': str,
            'currency_id': str,
            'delivery_date': date,
            'description': str,
            'project_id': str,
            'reference': str,
            'short_text': str,
            'supplier_invoice_number': str
        }

        self.attribute_map = {
            'contact_id': 'contact_id',
            'currency_id': 'currency_id',
            'delivery_date': 'delivery_date',
            'description': 'description',
            'project_id': 'project_id',
            'reference': 'reference',
            'short_text': 'short_text',
            'supplier_invoice_number': 'supplier_invoice_number'
        }

        self._contact_id = contact_id
        self._currency_id = currency_id
        self._delivery_date = delivery_date
        self._description = description
        self._project_id = project_id
        self._reference = reference
        self._short_text = short_text
        self._supplier_invoice_number = supplier_invoice_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpensesPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _expenses_post_request of this ExpensesPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this ExpensesPostRequest.


        :return: The contact_id of this ExpensesPostRequest.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this ExpensesPostRequest.


        :param contact_id: The contact_id of this ExpensesPostRequest.
        :type contact_id: str
        """

        self._contact_id = contact_id

    @property
    def currency_id(self):
        """Gets the currency_id of this ExpensesPostRequest.


        :return: The currency_id of this ExpensesPostRequest.
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this ExpensesPostRequest.


        :param currency_id: The currency_id of this ExpensesPostRequest.
        :type currency_id: str
        """

        self._currency_id = currency_id

    @property
    def delivery_date(self):
        """Gets the delivery_date of this ExpensesPostRequest.


        :return: The delivery_date of this ExpensesPostRequest.
        :rtype: date
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this ExpensesPostRequest.


        :param delivery_date: The delivery_date of this ExpensesPostRequest.
        :type delivery_date: date
        """

        self._delivery_date = delivery_date

    @property
    def description(self):
        """Gets the description of this ExpensesPostRequest.


        :return: The description of this ExpensesPostRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExpensesPostRequest.


        :param description: The description of this ExpensesPostRequest.
        :type description: str
        """
        if description is not None and len(description) > 8192:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")

        self._description = description

    @property
    def project_id(self):
        """Gets the project_id of this ExpensesPostRequest.


        :return: The project_id of this ExpensesPostRequest.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ExpensesPostRequest.


        :param project_id: The project_id of this ExpensesPostRequest.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def reference(self):
        """Gets the reference of this ExpensesPostRequest.


        :return: The reference of this ExpensesPostRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ExpensesPostRequest.


        :param reference: The reference of this ExpensesPostRequest.
        :type reference: str
        """
        if reference is not None and len(reference) > 8192:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `8192`")

        self._reference = reference

    @property
    def short_text(self):
        """Gets the short_text of this ExpensesPostRequest.


        :return: The short_text of this ExpensesPostRequest.
        :rtype: str
        """
        return self._short_text

    @short_text.setter
    def short_text(self, short_text):
        """Sets the short_text of this ExpensesPostRequest.


        :param short_text: The short_text of this ExpensesPostRequest.
        :type short_text: str
        """
        if short_text is not None and len(short_text) > 255:
            raise ValueError("Invalid value for `short_text`, length must be less than or equal to `255`")

        self._short_text = short_text

    @property
    def supplier_invoice_number(self):
        """Gets the supplier_invoice_number of this ExpensesPostRequest.


        :return: The supplier_invoice_number of this ExpensesPostRequest.
        :rtype: str
        """
        return self._supplier_invoice_number

    @supplier_invoice_number.setter
    def supplier_invoice_number(self, supplier_invoice_number):
        """Sets the supplier_invoice_number of this ExpensesPostRequest.


        :param supplier_invoice_number: The supplier_invoice_number of this ExpensesPostRequest.
        :type supplier_invoice_number: str
        """
        if supplier_invoice_number is not None and len(supplier_invoice_number) > 255:
            raise ValueError("Invalid value for `supplier_invoice_number`, length must be less than or equal to `255`")

        self._supplier_invoice_number = supplier_invoice_number
