# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpenseLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buying_price: float=None, created: str=None, created_by_id: str=None, currency_id: str=None, deleted: str=None, expense_id: str=None, id: str=None, is_invoiced: str=None, modified: str=None, quantity: int=None, selling_price: float=None, text: str=None):
        """ExpenseLine - a model defined in OpenAPI

        :param buying_price: The buying_price of this ExpenseLine.
        :param created: The created of this ExpenseLine.
        :param created_by_id: The created_by_id of this ExpenseLine.
        :param currency_id: The currency_id of this ExpenseLine.
        :param deleted: The deleted of this ExpenseLine.
        :param expense_id: The expense_id of this ExpenseLine.
        :param id: The id of this ExpenseLine.
        :param is_invoiced: The is_invoiced of this ExpenseLine.
        :param modified: The modified of this ExpenseLine.
        :param quantity: The quantity of this ExpenseLine.
        :param selling_price: The selling_price of this ExpenseLine.
        :param text: The text of this ExpenseLine.
        """
        self.openapi_types = {
            'buying_price': float,
            'created': str,
            'created_by_id': str,
            'currency_id': str,
            'deleted': str,
            'expense_id': str,
            'id': str,
            'is_invoiced': str,
            'modified': str,
            'quantity': int,
            'selling_price': float,
            'text': str
        }

        self.attribute_map = {
            'buying_price': 'buying_price',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'currency_id': 'currency_id',
            'deleted': 'deleted',
            'expense_id': 'expense_id',
            'id': 'id',
            'is_invoiced': 'is_invoiced',
            'modified': 'modified',
            'quantity': 'quantity',
            'selling_price': 'selling_price',
            'text': 'text'
        }

        self._buying_price = buying_price
        self._created = created
        self._created_by_id = created_by_id
        self._currency_id = currency_id
        self._deleted = deleted
        self._expense_id = expense_id
        self._id = id
        self._is_invoiced = is_invoiced
        self._modified = modified
        self._quantity = quantity
        self._selling_price = selling_price
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpenseLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpenseLine of this ExpenseLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buying_price(self):
        """Gets the buying_price of this ExpenseLine.


        :return: The buying_price of this ExpenseLine.
        :rtype: float
        """
        return self._buying_price

    @buying_price.setter
    def buying_price(self, buying_price):
        """Sets the buying_price of this ExpenseLine.


        :param buying_price: The buying_price of this ExpenseLine.
        :type buying_price: float
        """

        self._buying_price = buying_price

    @property
    def created(self):
        """Gets the created of this ExpenseLine.


        :return: The created of this ExpenseLine.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ExpenseLine.


        :param created: The created of this ExpenseLine.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ExpenseLine.

        Read-only

        :return: The created_by_id of this ExpenseLine.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ExpenseLine.

        Read-only

        :param created_by_id: The created_by_id of this ExpenseLine.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def currency_id(self):
        """Gets the currency_id of this ExpenseLine.


        :return: The currency_id of this ExpenseLine.
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this ExpenseLine.


        :param currency_id: The currency_id of this ExpenseLine.
        :type currency_id: str
        """

        self._currency_id = currency_id

    @property
    def deleted(self):
        """Gets the deleted of this ExpenseLine.

        Only present if it's a deleted object

        :return: The deleted of this ExpenseLine.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ExpenseLine.

        Only present if it's a deleted object

        :param deleted: The deleted of this ExpenseLine.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def expense_id(self):
        """Gets the expense_id of this ExpenseLine.


        :return: The expense_id of this ExpenseLine.
        :rtype: str
        """
        return self._expense_id

    @expense_id.setter
    def expense_id(self, expense_id):
        """Sets the expense_id of this ExpenseLine.


        :param expense_id: The expense_id of this ExpenseLine.
        :type expense_id: str
        """

        self._expense_id = expense_id

    @property
    def id(self):
        """Gets the id of this ExpenseLine.

        Read-only

        :return: The id of this ExpenseLine.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExpenseLine.

        Read-only

        :param id: The id of this ExpenseLine.
        :type id: str
        """

        self._id = id

    @property
    def is_invoiced(self):
        """Gets the is_invoiced of this ExpenseLine.


        :return: The is_invoiced of this ExpenseLine.
        :rtype: str
        """
        return self._is_invoiced

    @is_invoiced.setter
    def is_invoiced(self, is_invoiced):
        """Sets the is_invoiced of this ExpenseLine.


        :param is_invoiced: The is_invoiced of this ExpenseLine.
        :type is_invoiced: str
        """

        self._is_invoiced = is_invoiced

    @property
    def modified(self):
        """Gets the modified of this ExpenseLine.


        :return: The modified of this ExpenseLine.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ExpenseLine.


        :param modified: The modified of this ExpenseLine.
        :type modified: str
        """

        self._modified = modified

    @property
    def quantity(self):
        """Gets the quantity of this ExpenseLine.


        :return: The quantity of this ExpenseLine.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ExpenseLine.


        :param quantity: The quantity of this ExpenseLine.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def selling_price(self):
        """Gets the selling_price of this ExpenseLine.


        :return: The selling_price of this ExpenseLine.
        :rtype: float
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this ExpenseLine.


        :param selling_price: The selling_price of this ExpenseLine.
        :type selling_price: float
        """

        self._selling_price = selling_price

    @property
    def text(self):
        """Gets the text of this ExpenseLine.


        :return: The text of this ExpenseLine.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ExpenseLine.


        :param text: The text of this ExpenseLine.
        :type text: str
        """
        if text is not None and len(text) > 255:
            raise ValueError("Invalid value for `text`, length must be less than or equal to `255`")

        self._text = text
