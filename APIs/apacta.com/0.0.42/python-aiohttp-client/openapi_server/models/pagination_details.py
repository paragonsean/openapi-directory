# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaginationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, current_page: str=None, has_next_page: bool=None, has_prev_page: bool=None, limit: int=None, page_count: str=None):
        """PaginationDetails - a model defined in OpenAPI

        :param count: The count of this PaginationDetails.
        :param current_page: The current_page of this PaginationDetails.
        :param has_next_page: The has_next_page of this PaginationDetails.
        :param has_prev_page: The has_prev_page of this PaginationDetails.
        :param limit: The limit of this PaginationDetails.
        :param page_count: The page_count of this PaginationDetails.
        """
        self.openapi_types = {
            'count': int,
            'current_page': str,
            'has_next_page': bool,
            'has_prev_page': bool,
            'limit': int,
            'page_count': str
        }

        self.attribute_map = {
            'count': 'count',
            'current_page': 'current_page',
            'has_next_page': 'has_next_page',
            'has_prev_page': 'has_prev_page',
            'limit': 'limit',
            'page_count': 'page_count'
        }

        self._count = count
        self._current_page = current_page
        self._has_next_page = has_next_page
        self._has_prev_page = has_prev_page
        self._limit = limit
        self._page_count = page_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaginationDetails of this PaginationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this PaginationDetails.


        :return: The count of this PaginationDetails.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this PaginationDetails.


        :param count: The count of this PaginationDetails.
        :type count: int
        """

        self._count = count

    @property
    def current_page(self):
        """Gets the current_page of this PaginationDetails.


        :return: The current_page of this PaginationDetails.
        :rtype: str
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this PaginationDetails.


        :param current_page: The current_page of this PaginationDetails.
        :type current_page: str
        """

        self._current_page = current_page

    @property
    def has_next_page(self):
        """Gets the has_next_page of this PaginationDetails.


        :return: The has_next_page of this PaginationDetails.
        :rtype: bool
        """
        return self._has_next_page

    @has_next_page.setter
    def has_next_page(self, has_next_page):
        """Sets the has_next_page of this PaginationDetails.


        :param has_next_page: The has_next_page of this PaginationDetails.
        :type has_next_page: bool
        """

        self._has_next_page = has_next_page

    @property
    def has_prev_page(self):
        """Gets the has_prev_page of this PaginationDetails.


        :return: The has_prev_page of this PaginationDetails.
        :rtype: bool
        """
        return self._has_prev_page

    @has_prev_page.setter
    def has_prev_page(self, has_prev_page):
        """Sets the has_prev_page of this PaginationDetails.


        :param has_prev_page: The has_prev_page of this PaginationDetails.
        :type has_prev_page: bool
        """

        self._has_prev_page = has_prev_page

    @property
    def limit(self):
        """Gets the limit of this PaginationDetails.


        :return: The limit of this PaginationDetails.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PaginationDetails.


        :param limit: The limit of this PaginationDetails.
        :type limit: int
        """

        self._limit = limit

    @property
    def page_count(self):
        """Gets the page_count of this PaginationDetails.


        :return: The page_count of this PaginationDetails.
        :rtype: str
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this PaginationDetails.


        :param page_count: The page_count of this PaginationDetails.
        :type page_count: str
        """

        self._page_count = page_count
