# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaterialsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, barcode: str=None, billing_cysle: str=None, cost_price: float=None, description: str=None, is_single_usage: bool=None, name: str=None, selling_price: float=None):
        """MaterialsPostRequest - a model defined in OpenAPI

        :param barcode: The barcode of this MaterialsPostRequest.
        :param billing_cysle: The billing_cysle of this MaterialsPostRequest.
        :param cost_price: The cost_price of this MaterialsPostRequest.
        :param description: The description of this MaterialsPostRequest.
        :param is_single_usage: The is_single_usage of this MaterialsPostRequest.
        :param name: The name of this MaterialsPostRequest.
        :param selling_price: The selling_price of this MaterialsPostRequest.
        """
        self.openapi_types = {
            'barcode': str,
            'billing_cysle': str,
            'cost_price': float,
            'description': str,
            'is_single_usage': bool,
            'name': str,
            'selling_price': float
        }

        self.attribute_map = {
            'barcode': 'barcode',
            'billing_cysle': 'billing_cysle',
            'cost_price': 'cost_price',
            'description': 'description',
            'is_single_usage': 'is_single_usage',
            'name': 'name',
            'selling_price': 'selling_price'
        }

        self._barcode = barcode
        self._billing_cysle = billing_cysle
        self._cost_price = cost_price
        self._description = description
        self._is_single_usage = is_single_usage
        self._name = name
        self._selling_price = selling_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaterialsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _materials_post_request of this MaterialsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def barcode(self):
        """Gets the barcode of this MaterialsPostRequest.


        :return: The barcode of this MaterialsPostRequest.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this MaterialsPostRequest.


        :param barcode: The barcode of this MaterialsPostRequest.
        :type barcode: str
        """

        self._barcode = barcode

    @property
    def billing_cysle(self):
        """Gets the billing_cysle of this MaterialsPostRequest.


        :return: The billing_cysle of this MaterialsPostRequest.
        :rtype: str
        """
        return self._billing_cysle

    @billing_cysle.setter
    def billing_cysle(self, billing_cysle):
        """Sets the billing_cysle of this MaterialsPostRequest.


        :param billing_cysle: The billing_cysle of this MaterialsPostRequest.
        :type billing_cysle: str
        """
        allowed_values = ["hourly", "daily", "weekly"]  # noqa: E501
        if billing_cysle not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_cysle` ({0}), must be one of {1}"
                .format(billing_cysle, allowed_values)
            )

        self._billing_cysle = billing_cysle

    @property
    def cost_price(self):
        """Gets the cost_price of this MaterialsPostRequest.


        :return: The cost_price of this MaterialsPostRequest.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this MaterialsPostRequest.


        :param cost_price: The cost_price of this MaterialsPostRequest.
        :type cost_price: float
        """

        self._cost_price = cost_price

    @property
    def description(self):
        """Gets the description of this MaterialsPostRequest.


        :return: The description of this MaterialsPostRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MaterialsPostRequest.


        :param description: The description of this MaterialsPostRequest.
        :type description: str
        """

        self._description = description

    @property
    def is_single_usage(self):
        """Gets the is_single_usage of this MaterialsPostRequest.


        :return: The is_single_usage of this MaterialsPostRequest.
        :rtype: bool
        """
        return self._is_single_usage

    @is_single_usage.setter
    def is_single_usage(self, is_single_usage):
        """Sets the is_single_usage of this MaterialsPostRequest.


        :param is_single_usage: The is_single_usage of this MaterialsPostRequest.
        :type is_single_usage: bool
        """

        self._is_single_usage = is_single_usage

    @property
    def name(self):
        """Gets the name of this MaterialsPostRequest.


        :return: The name of this MaterialsPostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MaterialsPostRequest.


        :param name: The name of this MaterialsPostRequest.
        :type name: str
        """

        self._name = name

    @property
    def selling_price(self):
        """Gets the selling_price of this MaterialsPostRequest.


        :return: The selling_price of this MaterialsPostRequest.
        :rtype: float
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this MaterialsPostRequest.


        :param selling_price: The selling_price of this MaterialsPostRequest.
        :type selling_price: float
        """

        self._selling_price = selling_price
