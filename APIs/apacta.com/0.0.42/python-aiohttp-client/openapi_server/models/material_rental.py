# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaterialRental(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, created: str=None, created_by_id: str=None, deleted: str=None, from_date: str=None, id: str=None, is_invoiced: str=None, material_id: str=None, modified: str=None, modified_by_id: str=None, project_id: str=None, quantity: float=None, to_date: str=None):
        """MaterialRental - a model defined in OpenAPI

        :param amount: The amount of this MaterialRental.
        :param created: The created of this MaterialRental.
        :param created_by_id: The created_by_id of this MaterialRental.
        :param deleted: The deleted of this MaterialRental.
        :param from_date: The from_date of this MaterialRental.
        :param id: The id of this MaterialRental.
        :param is_invoiced: The is_invoiced of this MaterialRental.
        :param material_id: The material_id of this MaterialRental.
        :param modified: The modified of this MaterialRental.
        :param modified_by_id: The modified_by_id of this MaterialRental.
        :param project_id: The project_id of this MaterialRental.
        :param quantity: The quantity of this MaterialRental.
        :param to_date: The to_date of this MaterialRental.
        """
        self.openapi_types = {
            'amount': float,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'from_date': str,
            'id': str,
            'is_invoiced': str,
            'material_id': str,
            'modified': str,
            'modified_by_id': str,
            'project_id': str,
            'quantity': float,
            'to_date': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'from_date': 'from_date',
            'id': 'id',
            'is_invoiced': 'is_invoiced',
            'material_id': 'material_id',
            'modified': 'modified',
            'modified_by_id': 'modified_by_id',
            'project_id': 'project_id',
            'quantity': 'quantity',
            'to_date': 'to_date'
        }

        self._amount = amount
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._from_date = from_date
        self._id = id
        self._is_invoiced = is_invoiced
        self._material_id = material_id
        self._modified = modified
        self._modified_by_id = modified_by_id
        self._project_id = project_id
        self._quantity = quantity
        self._to_date = to_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaterialRental':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaterialRental of this MaterialRental.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this MaterialRental.


        :return: The amount of this MaterialRental.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this MaterialRental.


        :param amount: The amount of this MaterialRental.
        :type amount: float
        """

        self._amount = amount

    @property
    def created(self):
        """Gets the created of this MaterialRental.


        :return: The created of this MaterialRental.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MaterialRental.


        :param created: The created of this MaterialRental.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this MaterialRental.


        :return: The created_by_id of this MaterialRental.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this MaterialRental.


        :param created_by_id: The created_by_id of this MaterialRental.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this MaterialRental.

        Only present if it's a deleted object

        :return: The deleted of this MaterialRental.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this MaterialRental.

        Only present if it's a deleted object

        :param deleted: The deleted of this MaterialRental.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def from_date(self):
        """Gets the from_date of this MaterialRental.


        :return: The from_date of this MaterialRental.
        :rtype: str
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this MaterialRental.


        :param from_date: The from_date of this MaterialRental.
        :type from_date: str
        """

        self._from_date = from_date

    @property
    def id(self):
        """Gets the id of this MaterialRental.


        :return: The id of this MaterialRental.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MaterialRental.


        :param id: The id of this MaterialRental.
        :type id: str
        """

        self._id = id

    @property
    def is_invoiced(self):
        """Gets the is_invoiced of this MaterialRental.


        :return: The is_invoiced of this MaterialRental.
        :rtype: str
        """
        return self._is_invoiced

    @is_invoiced.setter
    def is_invoiced(self, is_invoiced):
        """Sets the is_invoiced of this MaterialRental.


        :param is_invoiced: The is_invoiced of this MaterialRental.
        :type is_invoiced: str
        """

        self._is_invoiced = is_invoiced

    @property
    def material_id(self):
        """Gets the material_id of this MaterialRental.


        :return: The material_id of this MaterialRental.
        :rtype: str
        """
        return self._material_id

    @material_id.setter
    def material_id(self, material_id):
        """Sets the material_id of this MaterialRental.


        :param material_id: The material_id of this MaterialRental.
        :type material_id: str
        """

        self._material_id = material_id

    @property
    def modified(self):
        """Gets the modified of this MaterialRental.


        :return: The modified of this MaterialRental.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this MaterialRental.


        :param modified: The modified of this MaterialRental.
        :type modified: str
        """

        self._modified = modified

    @property
    def modified_by_id(self):
        """Gets the modified_by_id of this MaterialRental.


        :return: The modified_by_id of this MaterialRental.
        :rtype: str
        """
        return self._modified_by_id

    @modified_by_id.setter
    def modified_by_id(self, modified_by_id):
        """Sets the modified_by_id of this MaterialRental.


        :param modified_by_id: The modified_by_id of this MaterialRental.
        :type modified_by_id: str
        """

        self._modified_by_id = modified_by_id

    @property
    def project_id(self):
        """Gets the project_id of this MaterialRental.


        :return: The project_id of this MaterialRental.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this MaterialRental.


        :param project_id: The project_id of this MaterialRental.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def quantity(self):
        """Gets the quantity of this MaterialRental.


        :return: The quantity of this MaterialRental.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this MaterialRental.


        :param quantity: The quantity of this MaterialRental.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def to_date(self):
        """Gets the to_date of this MaterialRental.


        :return: The to_date of this MaterialRental.
        :rtype: str
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this MaterialRental.


        :param to_date: The to_date of this MaterialRental.
        :type to_date: str
        """

        self._to_date = to_date
