# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpenseLinesPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buying_price: float=None, currency_id: str=None, expense_id: str=None, quantity: int=None, selling_price: float=None, text: str=None):
        """ExpenseLinesPostRequest - a model defined in OpenAPI

        :param buying_price: The buying_price of this ExpenseLinesPostRequest.
        :param currency_id: The currency_id of this ExpenseLinesPostRequest.
        :param expense_id: The expense_id of this ExpenseLinesPostRequest.
        :param quantity: The quantity of this ExpenseLinesPostRequest.
        :param selling_price: The selling_price of this ExpenseLinesPostRequest.
        :param text: The text of this ExpenseLinesPostRequest.
        """
        self.openapi_types = {
            'buying_price': float,
            'currency_id': str,
            'expense_id': str,
            'quantity': int,
            'selling_price': float,
            'text': str
        }

        self.attribute_map = {
            'buying_price': 'buying_price',
            'currency_id': 'currency_id',
            'expense_id': 'expense_id',
            'quantity': 'quantity',
            'selling_price': 'selling_price',
            'text': 'text'
        }

        self._buying_price = buying_price
        self._currency_id = currency_id
        self._expense_id = expense_id
        self._quantity = quantity
        self._selling_price = selling_price
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpenseLinesPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _expense_lines_post_request of this ExpenseLinesPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buying_price(self):
        """Gets the buying_price of this ExpenseLinesPostRequest.


        :return: The buying_price of this ExpenseLinesPostRequest.
        :rtype: float
        """
        return self._buying_price

    @buying_price.setter
    def buying_price(self, buying_price):
        """Sets the buying_price of this ExpenseLinesPostRequest.


        :param buying_price: The buying_price of this ExpenseLinesPostRequest.
        :type buying_price: float
        """

        self._buying_price = buying_price

    @property
    def currency_id(self):
        """Gets the currency_id of this ExpenseLinesPostRequest.


        :return: The currency_id of this ExpenseLinesPostRequest.
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this ExpenseLinesPostRequest.


        :param currency_id: The currency_id of this ExpenseLinesPostRequest.
        :type currency_id: str
        """

        self._currency_id = currency_id

    @property
    def expense_id(self):
        """Gets the expense_id of this ExpenseLinesPostRequest.


        :return: The expense_id of this ExpenseLinesPostRequest.
        :rtype: str
        """
        return self._expense_id

    @expense_id.setter
    def expense_id(self, expense_id):
        """Sets the expense_id of this ExpenseLinesPostRequest.


        :param expense_id: The expense_id of this ExpenseLinesPostRequest.
        :type expense_id: str
        """

        self._expense_id = expense_id

    @property
    def quantity(self):
        """Gets the quantity of this ExpenseLinesPostRequest.


        :return: The quantity of this ExpenseLinesPostRequest.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ExpenseLinesPostRequest.


        :param quantity: The quantity of this ExpenseLinesPostRequest.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def selling_price(self):
        """Gets the selling_price of this ExpenseLinesPostRequest.


        :return: The selling_price of this ExpenseLinesPostRequest.
        :rtype: float
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this ExpenseLinesPostRequest.


        :param selling_price: The selling_price of this ExpenseLinesPostRequest.
        :type selling_price: float
        """

        self._selling_price = selling_price

    @property
    def text(self):
        """Gets the text of this ExpenseLinesPostRequest.


        :return: The text of this ExpenseLinesPostRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ExpenseLinesPostRequest.


        :param text: The text of this ExpenseLinesPostRequest.
        :type text: str
        """
        if text is not None and len(text) > 255:
            raise ValueError("Invalid value for `text`, length must be less than or equal to `255`")

        self._text = text
