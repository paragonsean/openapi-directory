# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Currency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, centiga_id: str=None, created: str=None, currency_sign: str=None, deleted: str=None, description: str=None, id: str=None, identifier: str=None, modified: str=None, name: str=None, pogo_id: str=None, tripletex_id: str=None):
        """Currency - a model defined in OpenAPI

        :param centiga_id: The centiga_id of this Currency.
        :param created: The created of this Currency.
        :param currency_sign: The currency_sign of this Currency.
        :param deleted: The deleted of this Currency.
        :param description: The description of this Currency.
        :param id: The id of this Currency.
        :param identifier: The identifier of this Currency.
        :param modified: The modified of this Currency.
        :param name: The name of this Currency.
        :param pogo_id: The pogo_id of this Currency.
        :param tripletex_id: The tripletex_id of this Currency.
        """
        self.openapi_types = {
            'centiga_id': str,
            'created': str,
            'currency_sign': str,
            'deleted': str,
            'description': str,
            'id': str,
            'identifier': str,
            'modified': str,
            'name': str,
            'pogo_id': str,
            'tripletex_id': str
        }

        self.attribute_map = {
            'centiga_id': 'centiga_id',
            'created': 'created',
            'currency_sign': 'currency_sign',
            'deleted': 'deleted',
            'description': 'description',
            'id': 'id',
            'identifier': 'identifier',
            'modified': 'modified',
            'name': 'name',
            'pogo_id': 'pogo_id',
            'tripletex_id': 'tripletex_id'
        }

        self._centiga_id = centiga_id
        self._created = created
        self._currency_sign = currency_sign
        self._deleted = deleted
        self._description = description
        self._id = id
        self._identifier = identifier
        self._modified = modified
        self._name = name
        self._pogo_id = pogo_id
        self._tripletex_id = tripletex_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Currency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Currency of this Currency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def centiga_id(self):
        """Gets the centiga_id of this Currency.


        :return: The centiga_id of this Currency.
        :rtype: str
        """
        return self._centiga_id

    @centiga_id.setter
    def centiga_id(self, centiga_id):
        """Sets the centiga_id of this Currency.


        :param centiga_id: The centiga_id of this Currency.
        :type centiga_id: str
        """
        if centiga_id is not None and len(centiga_id) > 255:
            raise ValueError("Invalid value for `centiga_id`, length must be less than or equal to `255`")

        self._centiga_id = centiga_id

    @property
    def created(self):
        """Gets the created of this Currency.


        :return: The created of this Currency.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Currency.


        :param created: The created of this Currency.
        :type created: str
        """

        self._created = created

    @property
    def currency_sign(self):
        """Gets the currency_sign of this Currency.


        :return: The currency_sign of this Currency.
        :rtype: str
        """
        return self._currency_sign

    @currency_sign.setter
    def currency_sign(self, currency_sign):
        """Sets the currency_sign of this Currency.


        :param currency_sign: The currency_sign of this Currency.
        :type currency_sign: str
        """
        if currency_sign is not None and len(currency_sign) > 8:
            raise ValueError("Invalid value for `currency_sign`, length must be less than or equal to `8`")

        self._currency_sign = currency_sign

    @property
    def deleted(self):
        """Gets the deleted of this Currency.

        Only present if it's a deleted object

        :return: The deleted of this Currency.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Currency.

        Only present if it's a deleted object

        :param deleted: The deleted of this Currency.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Currency.


        :return: The description of this Currency.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Currency.


        :param description: The description of this Currency.
        :type description: str
        """
        if description is not None and len(description) > 8192:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Currency.


        :return: The id of this Currency.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Currency.


        :param id: The id of this Currency.
        :type id: str
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this Currency.


        :return: The identifier of this Currency.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Currency.


        :param identifier: The identifier of this Currency.
        :type identifier: str
        """
        if identifier is not None and len(identifier) > 255:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `255`")

        self._identifier = identifier

    @property
    def modified(self):
        """Gets the modified of this Currency.


        :return: The modified of this Currency.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Currency.


        :param modified: The modified of this Currency.
        :type modified: str
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this Currency.


        :return: The name of this Currency.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Currency.


        :param name: The name of this Currency.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def pogo_id(self):
        """Gets the pogo_id of this Currency.


        :return: The pogo_id of this Currency.
        :rtype: str
        """
        return self._pogo_id

    @pogo_id.setter
    def pogo_id(self, pogo_id):
        """Sets the pogo_id of this Currency.


        :param pogo_id: The pogo_id of this Currency.
        :type pogo_id: str
        """
        if pogo_id is not None and len(pogo_id) > 255:
            raise ValueError("Invalid value for `pogo_id`, length must be less than or equal to `255`")

        self._pogo_id = pogo_id

    @property
    def tripletex_id(self):
        """Gets the tripletex_id of this Currency.


        :return: The tripletex_id of this Currency.
        :rtype: str
        """
        return self._tripletex_id

    @tripletex_id.setter
    def tripletex_id(self, tripletex_id):
        """Sets the tripletex_id of this Currency.


        :param tripletex_id: The tripletex_id of this Currency.
        :type tripletex_id: str
        """
        if tripletex_id is not None and len(tripletex_id) > 255:
            raise ValueError("Invalid value for `tripletex_id`, length must be less than or equal to `255`")

        self._tripletex_id = tripletex_id
