# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, barcode: str=None, buying_price: float=None, description: str=None, erp_id: str=None, name: str=None, product_number: str=None, selling_price: float=None):
        """ProductsPostRequest - a model defined in OpenAPI

        :param barcode: The barcode of this ProductsPostRequest.
        :param buying_price: The buying_price of this ProductsPostRequest.
        :param description: The description of this ProductsPostRequest.
        :param erp_id: The erp_id of this ProductsPostRequest.
        :param name: The name of this ProductsPostRequest.
        :param product_number: The product_number of this ProductsPostRequest.
        :param selling_price: The selling_price of this ProductsPostRequest.
        """
        self.openapi_types = {
            'barcode': str,
            'buying_price': float,
            'description': str,
            'erp_id': str,
            'name': str,
            'product_number': str,
            'selling_price': float
        }

        self.attribute_map = {
            'barcode': 'barcode',
            'buying_price': 'buying_price',
            'description': 'description',
            'erp_id': 'erp_id',
            'name': 'name',
            'product_number': 'product_number',
            'selling_price': 'selling_price'
        }

        self._barcode = barcode
        self._buying_price = buying_price
        self._description = description
        self._erp_id = erp_id
        self._name = name
        self._product_number = product_number
        self._selling_price = selling_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _products_post_request of this ProductsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def barcode(self):
        """Gets the barcode of this ProductsPostRequest.


        :return: The barcode of this ProductsPostRequest.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ProductsPostRequest.


        :param barcode: The barcode of this ProductsPostRequest.
        :type barcode: str
        """
        if barcode is not None and len(barcode) > 255:
            raise ValueError("Invalid value for `barcode`, length must be less than or equal to `255`")

        self._barcode = barcode

    @property
    def buying_price(self):
        """Gets the buying_price of this ProductsPostRequest.


        :return: The buying_price of this ProductsPostRequest.
        :rtype: float
        """
        return self._buying_price

    @buying_price.setter
    def buying_price(self, buying_price):
        """Sets the buying_price of this ProductsPostRequest.


        :param buying_price: The buying_price of this ProductsPostRequest.
        :type buying_price: float
        """

        self._buying_price = buying_price

    @property
    def description(self):
        """Gets the description of this ProductsPostRequest.


        :return: The description of this ProductsPostRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductsPostRequest.


        :param description: The description of this ProductsPostRequest.
        :type description: str
        """
        if description is not None and len(description) > 8192:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")

        self._description = description

    @property
    def erp_id(self):
        """Gets the erp_id of this ProductsPostRequest.


        :return: The erp_id of this ProductsPostRequest.
        :rtype: str
        """
        return self._erp_id

    @erp_id.setter
    def erp_id(self, erp_id):
        """Sets the erp_id of this ProductsPostRequest.


        :param erp_id: The erp_id of this ProductsPostRequest.
        :type erp_id: str
        """
        if erp_id is not None and len(erp_id) > 255:
            raise ValueError("Invalid value for `erp_id`, length must be less than or equal to `255`")

        self._erp_id = erp_id

    @property
    def name(self):
        """Gets the name of this ProductsPostRequest.


        :return: The name of this ProductsPostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductsPostRequest.


        :param name: The name of this ProductsPostRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def product_number(self):
        """Gets the product_number of this ProductsPostRequest.


        :return: The product_number of this ProductsPostRequest.
        :rtype: str
        """
        return self._product_number

    @product_number.setter
    def product_number(self, product_number):
        """Sets the product_number of this ProductsPostRequest.


        :param product_number: The product_number of this ProductsPostRequest.
        :type product_number: str
        """
        if product_number is not None and len(product_number) > 255:
            raise ValueError("Invalid value for `product_number`, length must be less than or equal to `255`")

        self._product_number = product_number

    @property
    def selling_price(self):
        """Gets the selling_price of this ProductsPostRequest.


        :return: The selling_price of this ProductsPostRequest.
        :rtype: float
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this ProductsPostRequest.


        :param selling_price: The selling_price of this ProductsPostRequest.
        :type selling_price: float
        """

        self._selling_price = selling_price
