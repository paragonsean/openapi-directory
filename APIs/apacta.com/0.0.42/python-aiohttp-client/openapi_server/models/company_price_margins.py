# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanyPriceMargins(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_from: float=None, amount_to: float=None, company_id: str=None, created: str=None, deleted: str=None, id: str=None, modified: str=None, percentage_ratio: float=None, ratio: float=None, type: str=None):
        """CompanyPriceMargins - a model defined in OpenAPI

        :param amount_from: The amount_from of this CompanyPriceMargins.
        :param amount_to: The amount_to of this CompanyPriceMargins.
        :param company_id: The company_id of this CompanyPriceMargins.
        :param created: The created of this CompanyPriceMargins.
        :param deleted: The deleted of this CompanyPriceMargins.
        :param id: The id of this CompanyPriceMargins.
        :param modified: The modified of this CompanyPriceMargins.
        :param percentage_ratio: The percentage_ratio of this CompanyPriceMargins.
        :param ratio: The ratio of this CompanyPriceMargins.
        :param type: The type of this CompanyPriceMargins.
        """
        self.openapi_types = {
            'amount_from': float,
            'amount_to': float,
            'company_id': str,
            'created': str,
            'deleted': str,
            'id': str,
            'modified': str,
            'percentage_ratio': float,
            'ratio': float,
            'type': str
        }

        self.attribute_map = {
            'amount_from': 'amount_from',
            'amount_to': 'amount_to',
            'company_id': 'company_id',
            'created': 'created',
            'deleted': 'deleted',
            'id': 'id',
            'modified': 'modified',
            'percentage_ratio': 'percentage_ratio',
            'ratio': 'ratio',
            'type': 'type'
        }

        self._amount_from = amount_from
        self._amount_to = amount_to
        self._company_id = company_id
        self._created = created
        self._deleted = deleted
        self._id = id
        self._modified = modified
        self._percentage_ratio = percentage_ratio
        self._ratio = ratio
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyPriceMargins':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompanyPriceMargins of this CompanyPriceMargins.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_from(self):
        """Gets the amount_from of this CompanyPriceMargins.


        :return: The amount_from of this CompanyPriceMargins.
        :rtype: float
        """
        return self._amount_from

    @amount_from.setter
    def amount_from(self, amount_from):
        """Sets the amount_from of this CompanyPriceMargins.


        :param amount_from: The amount_from of this CompanyPriceMargins.
        :type amount_from: float
        """

        self._amount_from = amount_from

    @property
    def amount_to(self):
        """Gets the amount_to of this CompanyPriceMargins.


        :return: The amount_to of this CompanyPriceMargins.
        :rtype: float
        """
        return self._amount_to

    @amount_to.setter
    def amount_to(self, amount_to):
        """Sets the amount_to of this CompanyPriceMargins.


        :param amount_to: The amount_to of this CompanyPriceMargins.
        :type amount_to: float
        """

        self._amount_to = amount_to

    @property
    def company_id(self):
        """Gets the company_id of this CompanyPriceMargins.


        :return: The company_id of this CompanyPriceMargins.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CompanyPriceMargins.


        :param company_id: The company_id of this CompanyPriceMargins.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def created(self):
        """Gets the created of this CompanyPriceMargins.


        :return: The created of this CompanyPriceMargins.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CompanyPriceMargins.


        :param created: The created of this CompanyPriceMargins.
        :type created: str
        """

        self._created = created

    @property
    def deleted(self):
        """Gets the deleted of this CompanyPriceMargins.

        Only present if it's a deleted object

        :return: The deleted of this CompanyPriceMargins.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CompanyPriceMargins.

        Only present if it's a deleted object

        :param deleted: The deleted of this CompanyPriceMargins.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this CompanyPriceMargins.


        :return: The id of this CompanyPriceMargins.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyPriceMargins.


        :param id: The id of this CompanyPriceMargins.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this CompanyPriceMargins.


        :return: The modified of this CompanyPriceMargins.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this CompanyPriceMargins.


        :param modified: The modified of this CompanyPriceMargins.
        :type modified: str
        """

        self._modified = modified

    @property
    def percentage_ratio(self):
        """Gets the percentage_ratio of this CompanyPriceMargins.


        :return: The percentage_ratio of this CompanyPriceMargins.
        :rtype: float
        """
        return self._percentage_ratio

    @percentage_ratio.setter
    def percentage_ratio(self, percentage_ratio):
        """Sets the percentage_ratio of this CompanyPriceMargins.


        :param percentage_ratio: The percentage_ratio of this CompanyPriceMargins.
        :type percentage_ratio: float
        """

        self._percentage_ratio = percentage_ratio

    @property
    def ratio(self):
        """Gets the ratio of this CompanyPriceMargins.


        :return: The ratio of this CompanyPriceMargins.
        :rtype: float
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this CompanyPriceMargins.


        :param ratio: The ratio of this CompanyPriceMargins.
        :type ratio: float
        """

        self._ratio = ratio

    @property
    def type(self):
        """Gets the type of this CompanyPriceMargins.


        :return: The type of this CompanyPriceMargins.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompanyPriceMargins.


        :param type: The type of this CompanyPriceMargins.
        :type type: str
        """
        if type is not None and len(type) > 255:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `255`")

        self._type = type
