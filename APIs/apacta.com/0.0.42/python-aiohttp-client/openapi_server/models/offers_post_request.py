# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OffersPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer_lines: List[object]=None, project_id: str=None, status: str='draft'):
        """OffersPostRequest - a model defined in OpenAPI

        :param offer_lines: The offer_lines of this OffersPostRequest.
        :param project_id: The project_id of this OffersPostRequest.
        :param status: The status of this OffersPostRequest.
        """
        self.openapi_types = {
            'offer_lines': List[object],
            'project_id': str,
            'status': str
        }

        self.attribute_map = {
            'offer_lines': 'offer_lines',
            'project_id': 'project_id',
            'status': 'status'
        }

        self._offer_lines = offer_lines
        self._project_id = project_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OffersPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _offers_post_request of this OffersPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_lines(self):
        """Gets the offer_lines of this OffersPostRequest.


        :return: The offer_lines of this OffersPostRequest.
        :rtype: List[object]
        """
        return self._offer_lines

    @offer_lines.setter
    def offer_lines(self, offer_lines):
        """Sets the offer_lines of this OffersPostRequest.


        :param offer_lines: The offer_lines of this OffersPostRequest.
        :type offer_lines: List[object]
        """

        self._offer_lines = offer_lines

    @property
    def project_id(self):
        """Gets the project_id of this OffersPostRequest.


        :return: The project_id of this OffersPostRequest.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this OffersPostRequest.


        :param project_id: The project_id of this OffersPostRequest.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def status(self):
        """Gets the status of this OffersPostRequest.


        :return: The status of this OffersPostRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OffersPostRequest.


        :param status: The status of this OffersPostRequest.
        :type status: str
        """
        allowed_values = ["draft", "accepted", "rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
