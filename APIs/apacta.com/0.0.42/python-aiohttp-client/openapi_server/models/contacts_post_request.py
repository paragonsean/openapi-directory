# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contacts_post_request_contact_types import ContactsPostRequestContactTypes
from openapi_server import util


class ContactsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city_id: str=None, contact_types: ContactsPostRequestContactTypes=None, cvr: str=None, description: str=None, email: str=None, erp_id: str=None, name: str=None, phone: str=None, website: str=None):
        """ContactsPostRequest - a model defined in OpenAPI

        :param address: The address of this ContactsPostRequest.
        :param city_id: The city_id of this ContactsPostRequest.
        :param contact_types: The contact_types of this ContactsPostRequest.
        :param cvr: The cvr of this ContactsPostRequest.
        :param description: The description of this ContactsPostRequest.
        :param email: The email of this ContactsPostRequest.
        :param erp_id: The erp_id of this ContactsPostRequest.
        :param name: The name of this ContactsPostRequest.
        :param phone: The phone of this ContactsPostRequest.
        :param website: The website of this ContactsPostRequest.
        """
        self.openapi_types = {
            'address': str,
            'city_id': str,
            'contact_types': ContactsPostRequestContactTypes,
            'cvr': str,
            'description': str,
            'email': str,
            'erp_id': str,
            'name': str,
            'phone': str,
            'website': str
        }

        self.attribute_map = {
            'address': 'address',
            'city_id': 'city_id',
            'contact_types': 'contact_types',
            'cvr': 'cvr',
            'description': 'description',
            'email': 'email',
            'erp_id': 'erp_id',
            'name': 'name',
            'phone': 'phone',
            'website': 'website'
        }

        self._address = address
        self._city_id = city_id
        self._contact_types = contact_types
        self._cvr = cvr
        self._description = description
        self._email = email
        self._erp_id = erp_id
        self._name = name
        self._phone = phone
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _contacts_post_request of this ContactsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ContactsPostRequest.

        Street address

        :return: The address of this ContactsPostRequest.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContactsPostRequest.

        Street address

        :param address: The address of this ContactsPostRequest.
        :type address: str
        """
        if address is not None and len(address) > 255:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `255`")

        self._address = address

    @property
    def city_id(self):
        """Gets the city_id of this ContactsPostRequest.


        :return: The city_id of this ContactsPostRequest.
        :rtype: str
        """
        return self._city_id

    @city_id.setter
    def city_id(self, city_id):
        """Sets the city_id of this ContactsPostRequest.


        :param city_id: The city_id of this ContactsPostRequest.
        :type city_id: str
        """

        self._city_id = city_id

    @property
    def contact_types(self):
        """Gets the contact_types of this ContactsPostRequest.


        :return: The contact_types of this ContactsPostRequest.
        :rtype: ContactsPostRequestContactTypes
        """
        return self._contact_types

    @contact_types.setter
    def contact_types(self, contact_types):
        """Sets the contact_types of this ContactsPostRequest.


        :param contact_types: The contact_types of this ContactsPostRequest.
        :type contact_types: ContactsPostRequestContactTypes
        """

        self._contact_types = contact_types

    @property
    def cvr(self):
        """Gets the cvr of this ContactsPostRequest.


        :return: The cvr of this ContactsPostRequest.
        :rtype: str
        """
        return self._cvr

    @cvr.setter
    def cvr(self, cvr):
        """Sets the cvr of this ContactsPostRequest.


        :param cvr: The cvr of this ContactsPostRequest.
        :type cvr: str
        """
        if cvr is not None and len(cvr) > 255:
            raise ValueError("Invalid value for `cvr`, length must be less than or equal to `255`")

        self._cvr = cvr

    @property
    def description(self):
        """Gets the description of this ContactsPostRequest.


        :return: The description of this ContactsPostRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContactsPostRequest.


        :param description: The description of this ContactsPostRequest.
        :type description: str
        """
        if description is not None and len(description) > 8192:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")

        self._description = description

    @property
    def email(self):
        """Gets the email of this ContactsPostRequest.


        :return: The email of this ContactsPostRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactsPostRequest.


        :param email: The email of this ContactsPostRequest.
        :type email: str
        """
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")

        self._email = email

    @property
    def erp_id(self):
        """Gets the erp_id of this ContactsPostRequest.

        If company has integration to an ERP system, and the contacts are synchronized, this will be the ERP-systems ID of this contact

        :return: The erp_id of this ContactsPostRequest.
        :rtype: str
        """
        return self._erp_id

    @erp_id.setter
    def erp_id(self, erp_id):
        """Sets the erp_id of this ContactsPostRequest.

        If company has integration to an ERP system, and the contacts are synchronized, this will be the ERP-systems ID of this contact

        :param erp_id: The erp_id of this ContactsPostRequest.
        :type erp_id: str
        """
        if erp_id is not None and len(erp_id) > 255:
            raise ValueError("Invalid value for `erp_id`, length must be less than or equal to `255`")

        self._erp_id = erp_id

    @property
    def name(self):
        """Gets the name of this ContactsPostRequest.


        :return: The name of this ContactsPostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactsPostRequest.


        :param name: The name of this ContactsPostRequest.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this ContactsPostRequest.

        Format like eg. `28680133` or `046158971404`

        :return: The phone of this ContactsPostRequest.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ContactsPostRequest.

        Format like eg. `28680133` or `046158971404`

        :param phone: The phone of this ContactsPostRequest.
        :type phone: str
        """
        if phone is not None and len(phone) > 32:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `32`")

        self._phone = phone

    @property
    def website(self):
        """Gets the website of this ContactsPostRequest.


        :return: The website of this ContactsPostRequest.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this ContactsPostRequest.


        :param website: The website of this ContactsPostRequest.
        :type website: str
        """
        if website is not None and len(website) > 255:
            raise ValueError("Invalid value for `website`, length must be less than or equal to `255`")

        self._website = website
