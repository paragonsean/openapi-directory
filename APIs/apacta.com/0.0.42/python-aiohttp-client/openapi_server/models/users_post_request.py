# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contacts_post_request_contact_types import ContactsPostRequestContactTypes
from openapi_server import util


class UsersPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city_id: str=None, cost_price: float=None, email: str=None, expected_billable_hours: float=None, extra_price: float=None, first_name: str=None, hide_address: bool=None, hide_phone: bool=None, initials: str=None, is_active: bool=None, language_id: str=None, last_name: str=None, mobile: str=None, mobile_countrycode: str=None, password: str=None, phone: str=None, phone_countrycode: str=None, receive_form_mails: bool=None, roles: ContactsPostRequestContactTypes=None, sale_price: float=None, street_name: str=None):
        """UsersPostRequest - a model defined in OpenAPI

        :param city_id: The city_id of this UsersPostRequest.
        :param cost_price: The cost_price of this UsersPostRequest.
        :param email: The email of this UsersPostRequest.
        :param expected_billable_hours: The expected_billable_hours of this UsersPostRequest.
        :param extra_price: The extra_price of this UsersPostRequest.
        :param first_name: The first_name of this UsersPostRequest.
        :param hide_address: The hide_address of this UsersPostRequest.
        :param hide_phone: The hide_phone of this UsersPostRequest.
        :param initials: The initials of this UsersPostRequest.
        :param is_active: The is_active of this UsersPostRequest.
        :param language_id: The language_id of this UsersPostRequest.
        :param last_name: The last_name of this UsersPostRequest.
        :param mobile: The mobile of this UsersPostRequest.
        :param mobile_countrycode: The mobile_countrycode of this UsersPostRequest.
        :param password: The password of this UsersPostRequest.
        :param phone: The phone of this UsersPostRequest.
        :param phone_countrycode: The phone_countrycode of this UsersPostRequest.
        :param receive_form_mails: The receive_form_mails of this UsersPostRequest.
        :param roles: The roles of this UsersPostRequest.
        :param sale_price: The sale_price of this UsersPostRequest.
        :param street_name: The street_name of this UsersPostRequest.
        """
        self.openapi_types = {
            'city_id': str,
            'cost_price': float,
            'email': str,
            'expected_billable_hours': float,
            'extra_price': float,
            'first_name': str,
            'hide_address': bool,
            'hide_phone': bool,
            'initials': str,
            'is_active': bool,
            'language_id': str,
            'last_name': str,
            'mobile': str,
            'mobile_countrycode': str,
            'password': str,
            'phone': str,
            'phone_countrycode': str,
            'receive_form_mails': bool,
            'roles': ContactsPostRequestContactTypes,
            'sale_price': float,
            'street_name': str
        }

        self.attribute_map = {
            'city_id': 'city_id',
            'cost_price': 'cost_price',
            'email': 'email',
            'expected_billable_hours': 'expected_billable_hours',
            'extra_price': 'extra_price',
            'first_name': 'first_name',
            'hide_address': 'hide_address',
            'hide_phone': 'hide_phone',
            'initials': 'initials',
            'is_active': 'is_active',
            'language_id': 'language_id',
            'last_name': 'last_name',
            'mobile': 'mobile',
            'mobile_countrycode': 'mobile_countrycode',
            'password': 'password',
            'phone': 'phone',
            'phone_countrycode': 'phone_countrycode',
            'receive_form_mails': 'receive_form_mails',
            'roles': 'roles',
            'sale_price': 'sale_price',
            'street_name': 'street_name'
        }

        self._city_id = city_id
        self._cost_price = cost_price
        self._email = email
        self._expected_billable_hours = expected_billable_hours
        self._extra_price = extra_price
        self._first_name = first_name
        self._hide_address = hide_address
        self._hide_phone = hide_phone
        self._initials = initials
        self._is_active = is_active
        self._language_id = language_id
        self._last_name = last_name
        self._mobile = mobile
        self._mobile_countrycode = mobile_countrycode
        self._password = password
        self._phone = phone
        self._phone_countrycode = phone_countrycode
        self._receive_form_mails = receive_form_mails
        self._roles = roles
        self._sale_price = sale_price
        self._street_name = street_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _users_post_request of this UsersPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city_id(self):
        """Gets the city_id of this UsersPostRequest.


        :return: The city_id of this UsersPostRequest.
        :rtype: str
        """
        return self._city_id

    @city_id.setter
    def city_id(self, city_id):
        """Sets the city_id of this UsersPostRequest.


        :param city_id: The city_id of this UsersPostRequest.
        :type city_id: str
        """

        self._city_id = city_id

    @property
    def cost_price(self):
        """Gets the cost_price of this UsersPostRequest.

        Cost of salaries

        :return: The cost_price of this UsersPostRequest.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this UsersPostRequest.

        Cost of salaries

        :param cost_price: The cost_price of this UsersPostRequest.
        :type cost_price: float
        """

        self._cost_price = cost_price

    @property
    def email(self):
        """Gets the email of this UsersPostRequest.


        :return: The email of this UsersPostRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UsersPostRequest.


        :param email: The email of this UsersPostRequest.
        :type email: str
        """
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")

        self._email = email

    @property
    def expected_billable_hours(self):
        """Gets the expected_billable_hours of this UsersPostRequest.


        :return: The expected_billable_hours of this UsersPostRequest.
        :rtype: float
        """
        return self._expected_billable_hours

    @expected_billable_hours.setter
    def expected_billable_hours(self, expected_billable_hours):
        """Sets the expected_billable_hours of this UsersPostRequest.


        :param expected_billable_hours: The expected_billable_hours of this UsersPostRequest.
        :type expected_billable_hours: float
        """

        self._expected_billable_hours = expected_billable_hours

    @property
    def extra_price(self):
        """Gets the extra_price of this UsersPostRequest.

        Additional cost on this employee (pension, vacation etc.)

        :return: The extra_price of this UsersPostRequest.
        :rtype: float
        """
        return self._extra_price

    @extra_price.setter
    def extra_price(self, extra_price):
        """Sets the extra_price of this UsersPostRequest.

        Additional cost on this employee (pension, vacation etc.)

        :param extra_price: The extra_price of this UsersPostRequest.
        :type extra_price: float
        """

        self._extra_price = extra_price

    @property
    def first_name(self):
        """Gets the first_name of this UsersPostRequest.


        :return: The first_name of this UsersPostRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UsersPostRequest.


        :param first_name: The first_name of this UsersPostRequest.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) > 255:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `255`")

        self._first_name = first_name

    @property
    def hide_address(self):
        """Gets the hide_address of this UsersPostRequest.


        :return: The hide_address of this UsersPostRequest.
        :rtype: bool
        """
        return self._hide_address

    @hide_address.setter
    def hide_address(self, hide_address):
        """Sets the hide_address of this UsersPostRequest.


        :param hide_address: The hide_address of this UsersPostRequest.
        :type hide_address: bool
        """

        self._hide_address = hide_address

    @property
    def hide_phone(self):
        """Gets the hide_phone of this UsersPostRequest.


        :return: The hide_phone of this UsersPostRequest.
        :rtype: bool
        """
        return self._hide_phone

    @hide_phone.setter
    def hide_phone(self, hide_phone):
        """Sets the hide_phone of this UsersPostRequest.


        :param hide_phone: The hide_phone of this UsersPostRequest.
        :type hide_phone: bool
        """

        self._hide_phone = hide_phone

    @property
    def initials(self):
        """Gets the initials of this UsersPostRequest.


        :return: The initials of this UsersPostRequest.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this UsersPostRequest.


        :param initials: The initials of this UsersPostRequest.
        :type initials: str
        """
        if initials is not None and len(initials) > 3:
            raise ValueError("Invalid value for `initials`, length must be less than or equal to `3`")

        self._initials = initials

    @property
    def is_active(self):
        """Gets the is_active of this UsersPostRequest.


        :return: The is_active of this UsersPostRequest.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UsersPostRequest.


        :param is_active: The is_active of this UsersPostRequest.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def language_id(self):
        """Gets the language_id of this UsersPostRequest.


        :return: The language_id of this UsersPostRequest.
        :rtype: str
        """
        return self._language_id

    @language_id.setter
    def language_id(self, language_id):
        """Sets the language_id of this UsersPostRequest.


        :param language_id: The language_id of this UsersPostRequest.
        :type language_id: str
        """

        self._language_id = language_id

    @property
    def last_name(self):
        """Gets the last_name of this UsersPostRequest.


        :return: The last_name of this UsersPostRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UsersPostRequest.


        :param last_name: The last_name of this UsersPostRequest.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 255:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `255`")

        self._last_name = last_name

    @property
    def mobile(self):
        """Gets the mobile of this UsersPostRequest.


        :return: The mobile of this UsersPostRequest.
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this UsersPostRequest.


        :param mobile: The mobile of this UsersPostRequest.
        :type mobile: str
        """
        if mobile is not None and len(mobile) > 32:
            raise ValueError("Invalid value for `mobile`, length must be less than or equal to `32`")

        self._mobile = mobile

    @property
    def mobile_countrycode(self):
        """Gets the mobile_countrycode of this UsersPostRequest.


        :return: The mobile_countrycode of this UsersPostRequest.
        :rtype: str
        """
        return self._mobile_countrycode

    @mobile_countrycode.setter
    def mobile_countrycode(self, mobile_countrycode):
        """Sets the mobile_countrycode of this UsersPostRequest.


        :param mobile_countrycode: The mobile_countrycode of this UsersPostRequest.
        :type mobile_countrycode: str
        """
        if mobile_countrycode is not None and len(mobile_countrycode) > 8:
            raise ValueError("Invalid value for `mobile_countrycode`, length must be less than or equal to `8`")

        self._mobile_countrycode = mobile_countrycode

    @property
    def password(self):
        """Gets the password of this UsersPostRequest.


        :return: The password of this UsersPostRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UsersPostRequest.


        :param password: The password of this UsersPostRequest.
        :type password: str
        """
        if password is not None and len(password) > 255:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `255`")

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this UsersPostRequest.


        :return: The phone of this UsersPostRequest.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UsersPostRequest.


        :param phone: The phone of this UsersPostRequest.
        :type phone: str
        """
        if phone is not None and len(phone) > 32:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `32`")

        self._phone = phone

    @property
    def phone_countrycode(self):
        """Gets the phone_countrycode of this UsersPostRequest.


        :return: The phone_countrycode of this UsersPostRequest.
        :rtype: str
        """
        return self._phone_countrycode

    @phone_countrycode.setter
    def phone_countrycode(self, phone_countrycode):
        """Sets the phone_countrycode of this UsersPostRequest.


        :param phone_countrycode: The phone_countrycode of this UsersPostRequest.
        :type phone_countrycode: str
        """
        if phone_countrycode is not None and len(phone_countrycode) > 8:
            raise ValueError("Invalid value for `phone_countrycode`, length must be less than or equal to `8`")

        self._phone_countrycode = phone_countrycode

    @property
    def receive_form_mails(self):
        """Gets the receive_form_mails of this UsersPostRequest.

        If `true` the employee will receive an email receipt of every form submitted

        :return: The receive_form_mails of this UsersPostRequest.
        :rtype: bool
        """
        return self._receive_form_mails

    @receive_form_mails.setter
    def receive_form_mails(self, receive_form_mails):
        """Sets the receive_form_mails of this UsersPostRequest.

        If `true` the employee will receive an email receipt of every form submitted

        :param receive_form_mails: The receive_form_mails of this UsersPostRequest.
        :type receive_form_mails: bool
        """

        self._receive_form_mails = receive_form_mails

    @property
    def roles(self):
        """Gets the roles of this UsersPostRequest.


        :return: The roles of this UsersPostRequest.
        :rtype: ContactsPostRequestContactTypes
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UsersPostRequest.


        :param roles: The roles of this UsersPostRequest.
        :type roles: ContactsPostRequestContactTypes
        """

        self._roles = roles

    @property
    def sale_price(self):
        """Gets the sale_price of this UsersPostRequest.

        The price this employee costs per hour when working

        :return: The sale_price of this UsersPostRequest.
        :rtype: float
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this UsersPostRequest.

        The price this employee costs per hour when working

        :param sale_price: The sale_price of this UsersPostRequest.
        :type sale_price: float
        """

        self._sale_price = sale_price

    @property
    def street_name(self):
        """Gets the street_name of this UsersPostRequest.


        :return: The street_name of this UsersPostRequest.
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this UsersPostRequest.


        :param street_name: The street_name of this UsersPostRequest.
        :type street_name: str
        """
        if street_name is not None and len(street_name) > 255:
            raise ValueError("Invalid value for `street_name`, length must be less than or equal to `255`")

        self._street_name = street_name
