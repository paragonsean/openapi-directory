# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Vendor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, cvr: str=None, deleted: str=None, email: str=None, id: str=None, identifier: str=None, is_custom: bool=None, modified: str=None, name: str=None):
        """Vendor - a model defined in OpenAPI

        :param created: The created of this Vendor.
        :param cvr: The cvr of this Vendor.
        :param deleted: The deleted of this Vendor.
        :param email: The email of this Vendor.
        :param id: The id of this Vendor.
        :param identifier: The identifier of this Vendor.
        :param is_custom: The is_custom of this Vendor.
        :param modified: The modified of this Vendor.
        :param name: The name of this Vendor.
        """
        self.openapi_types = {
            'created': str,
            'cvr': str,
            'deleted': str,
            'email': str,
            'id': str,
            'identifier': str,
            'is_custom': bool,
            'modified': str,
            'name': str
        }

        self.attribute_map = {
            'created': 'created',
            'cvr': 'cvr',
            'deleted': 'deleted',
            'email': 'email',
            'id': 'id',
            'identifier': 'identifier',
            'is_custom': 'is_custom',
            'modified': 'modified',
            'name': 'name'
        }

        self._created = created
        self._cvr = cvr
        self._deleted = deleted
        self._email = email
        self._id = id
        self._identifier = identifier
        self._is_custom = is_custom
        self._modified = modified
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Vendor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Vendor of this Vendor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Vendor.


        :return: The created of this Vendor.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Vendor.


        :param created: The created of this Vendor.
        :type created: str
        """

        self._created = created

    @property
    def cvr(self):
        """Gets the cvr of this Vendor.


        :return: The cvr of this Vendor.
        :rtype: str
        """
        return self._cvr

    @cvr.setter
    def cvr(self, cvr):
        """Sets the cvr of this Vendor.


        :param cvr: The cvr of this Vendor.
        :type cvr: str
        """
        if cvr is not None and len(cvr) > 12:
            raise ValueError("Invalid value for `cvr`, length must be less than or equal to `12`")

        self._cvr = cvr

    @property
    def deleted(self):
        """Gets the deleted of this Vendor.

        Only present if it's a deleted object

        :return: The deleted of this Vendor.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Vendor.

        Only present if it's a deleted object

        :param deleted: The deleted of this Vendor.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def email(self):
        """Gets the email of this Vendor.


        :return: The email of this Vendor.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Vendor.


        :param email: The email of this Vendor.
        :type email: str
        """
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this Vendor.


        :return: The id of this Vendor.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vendor.


        :param id: The id of this Vendor.
        :type id: str
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this Vendor.


        :return: The identifier of this Vendor.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Vendor.


        :param identifier: The identifier of this Vendor.
        :type identifier: str
        """
        if identifier is not None and len(identifier) > 255:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `255`")

        self._identifier = identifier

    @property
    def is_custom(self):
        """Gets the is_custom of this Vendor.


        :return: The is_custom of this Vendor.
        :rtype: bool
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """Sets the is_custom of this Vendor.


        :param is_custom: The is_custom of this Vendor.
        :type is_custom: bool
        """

        self._is_custom = is_custom

    @property
    def modified(self):
        """Gets the modified of this Vendor.


        :return: The modified of this Vendor.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Vendor.


        :param modified: The modified of this Vendor.
        :type modified: str
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this Vendor.


        :return: The name of this Vendor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vendor.


        :param name: The name of this Vendor.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name
