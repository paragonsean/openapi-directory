# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Expense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_id: str=None, comment: str=None, company_id: str=None, contact_id: str=None, created: str=None, created_by_id: str=None, currency_id: str=None, deleted: str=None, delivery_date: date=None, description: str=None, due_date: date=None, file_reference: str=None, id: str=None, is_imported: str=None, modified: str=None, order_number: str=None, project_id: str=None, readsoft_id: str=None, reference: str=None, roger_id: str=None, sent_to_email: str=None, short_text: str=None, status: str=None, supplier_invoice_number: str=None, total_buying_price: float=None, total_selling_price: float=None):
        """Expense - a model defined in OpenAPI

        :param activity_id: The activity_id of this Expense.
        :param comment: The comment of this Expense.
        :param company_id: The company_id of this Expense.
        :param contact_id: The contact_id of this Expense.
        :param created: The created of this Expense.
        :param created_by_id: The created_by_id of this Expense.
        :param currency_id: The currency_id of this Expense.
        :param deleted: The deleted of this Expense.
        :param delivery_date: The delivery_date of this Expense.
        :param description: The description of this Expense.
        :param due_date: The due_date of this Expense.
        :param file_reference: The file_reference of this Expense.
        :param id: The id of this Expense.
        :param is_imported: The is_imported of this Expense.
        :param modified: The modified of this Expense.
        :param order_number: The order_number of this Expense.
        :param project_id: The project_id of this Expense.
        :param readsoft_id: The readsoft_id of this Expense.
        :param reference: The reference of this Expense.
        :param roger_id: The roger_id of this Expense.
        :param sent_to_email: The sent_to_email of this Expense.
        :param short_text: The short_text of this Expense.
        :param status: The status of this Expense.
        :param supplier_invoice_number: The supplier_invoice_number of this Expense.
        :param total_buying_price: The total_buying_price of this Expense.
        :param total_selling_price: The total_selling_price of this Expense.
        """
        self.openapi_types = {
            'activity_id': str,
            'comment': str,
            'company_id': str,
            'contact_id': str,
            'created': str,
            'created_by_id': str,
            'currency_id': str,
            'deleted': str,
            'delivery_date': date,
            'description': str,
            'due_date': date,
            'file_reference': str,
            'id': str,
            'is_imported': str,
            'modified': str,
            'order_number': str,
            'project_id': str,
            'readsoft_id': str,
            'reference': str,
            'roger_id': str,
            'sent_to_email': str,
            'short_text': str,
            'status': str,
            'supplier_invoice_number': str,
            'total_buying_price': float,
            'total_selling_price': float
        }

        self.attribute_map = {
            'activity_id': 'activity_id',
            'comment': 'comment',
            'company_id': 'company_id',
            'contact_id': 'contact_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'currency_id': 'currency_id',
            'deleted': 'deleted',
            'delivery_date': 'delivery_date',
            'description': 'description',
            'due_date': 'due_date',
            'file_reference': 'file_reference',
            'id': 'id',
            'is_imported': 'is_imported',
            'modified': 'modified',
            'order_number': 'order_number',
            'project_id': 'project_id',
            'readsoft_id': 'readsoft_id',
            'reference': 'reference',
            'roger_id': 'roger_id',
            'sent_to_email': 'sent_to_email',
            'short_text': 'short_text',
            'status': 'status',
            'supplier_invoice_number': 'supplier_invoice_number',
            'total_buying_price': 'total_buying_price',
            'total_selling_price': 'total_selling_price'
        }

        self._activity_id = activity_id
        self._comment = comment
        self._company_id = company_id
        self._contact_id = contact_id
        self._created = created
        self._created_by_id = created_by_id
        self._currency_id = currency_id
        self._deleted = deleted
        self._delivery_date = delivery_date
        self._description = description
        self._due_date = due_date
        self._file_reference = file_reference
        self._id = id
        self._is_imported = is_imported
        self._modified = modified
        self._order_number = order_number
        self._project_id = project_id
        self._readsoft_id = readsoft_id
        self._reference = reference
        self._roger_id = roger_id
        self._sent_to_email = sent_to_email
        self._short_text = short_text
        self._status = status
        self._supplier_invoice_number = supplier_invoice_number
        self._total_buying_price = total_buying_price
        self._total_selling_price = total_selling_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Expense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Expense of this Expense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_id(self):
        """Gets the activity_id of this Expense.


        :return: The activity_id of this Expense.
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this Expense.


        :param activity_id: The activity_id of this Expense.
        :type activity_id: str
        """

        self._activity_id = activity_id

    @property
    def comment(self):
        """Gets the comment of this Expense.


        :return: The comment of this Expense.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Expense.


        :param comment: The comment of this Expense.
        :type comment: str
        """
        if comment is not None and len(comment) > 8192:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `8192`")

        self._comment = comment

    @property
    def company_id(self):
        """Gets the company_id of this Expense.

        Read-only

        :return: The company_id of this Expense.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Expense.

        Read-only

        :param company_id: The company_id of this Expense.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def contact_id(self):
        """Gets the contact_id of this Expense.


        :return: The contact_id of this Expense.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this Expense.


        :param contact_id: The contact_id of this Expense.
        :type contact_id: str
        """

        self._contact_id = contact_id

    @property
    def created(self):
        """Gets the created of this Expense.


        :return: The created of this Expense.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Expense.


        :param created: The created of this Expense.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Expense.

        Read-only

        :return: The created_by_id of this Expense.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Expense.

        Read-only

        :param created_by_id: The created_by_id of this Expense.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def currency_id(self):
        """Gets the currency_id of this Expense.


        :return: The currency_id of this Expense.
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this Expense.


        :param currency_id: The currency_id of this Expense.
        :type currency_id: str
        """

        self._currency_id = currency_id

    @property
    def deleted(self):
        """Gets the deleted of this Expense.

        Only present if it's a deleted object

        :return: The deleted of this Expense.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Expense.

        Only present if it's a deleted object

        :param deleted: The deleted of this Expense.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def delivery_date(self):
        """Gets the delivery_date of this Expense.


        :return: The delivery_date of this Expense.
        :rtype: date
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this Expense.


        :param delivery_date: The delivery_date of this Expense.
        :type delivery_date: date
        """

        self._delivery_date = delivery_date

    @property
    def description(self):
        """Gets the description of this Expense.


        :return: The description of this Expense.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Expense.


        :param description: The description of this Expense.
        :type description: str
        """
        if description is not None and len(description) > 8192:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")

        self._description = description

    @property
    def due_date(self):
        """Gets the due_date of this Expense.


        :return: The due_date of this Expense.
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Expense.


        :param due_date: The due_date of this Expense.
        :type due_date: date
        """

        self._due_date = due_date

    @property
    def file_reference(self):
        """Gets the file_reference of this Expense.


        :return: The file_reference of this Expense.
        :rtype: str
        """
        return self._file_reference

    @file_reference.setter
    def file_reference(self, file_reference):
        """Sets the file_reference of this Expense.


        :param file_reference: The file_reference of this Expense.
        :type file_reference: str
        """
        if file_reference is not None and len(file_reference) > 255:
            raise ValueError("Invalid value for `file_reference`, length must be less than or equal to `255`")

        self._file_reference = file_reference

    @property
    def id(self):
        """Gets the id of this Expense.

        Read-only

        :return: The id of this Expense.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Expense.

        Read-only

        :param id: The id of this Expense.
        :type id: str
        """

        self._id = id

    @property
    def is_imported(self):
        """Gets the is_imported of this Expense.


        :return: The is_imported of this Expense.
        :rtype: str
        """
        return self._is_imported

    @is_imported.setter
    def is_imported(self, is_imported):
        """Sets the is_imported of this Expense.


        :param is_imported: The is_imported of this Expense.
        :type is_imported: str
        """
        if is_imported is not None and len(is_imported) > 8192:
            raise ValueError("Invalid value for `is_imported`, length must be less than or equal to `8192`")

        self._is_imported = is_imported

    @property
    def modified(self):
        """Gets the modified of this Expense.


        :return: The modified of this Expense.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Expense.


        :param modified: The modified of this Expense.
        :type modified: str
        """

        self._modified = modified

    @property
    def order_number(self):
        """Gets the order_number of this Expense.


        :return: The order_number of this Expense.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Expense.


        :param order_number: The order_number of this Expense.
        :type order_number: str
        """
        if order_number is not None and len(order_number) > 8192:
            raise ValueError("Invalid value for `order_number`, length must be less than or equal to `8192`")

        self._order_number = order_number

    @property
    def project_id(self):
        """Gets the project_id of this Expense.


        :return: The project_id of this Expense.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Expense.


        :param project_id: The project_id of this Expense.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def readsoft_id(self):
        """Gets the readsoft_id of this Expense.


        :return: The readsoft_id of this Expense.
        :rtype: str
        """
        return self._readsoft_id

    @readsoft_id.setter
    def readsoft_id(self, readsoft_id):
        """Sets the readsoft_id of this Expense.


        :param readsoft_id: The readsoft_id of this Expense.
        :type readsoft_id: str
        """
        if readsoft_id is not None and len(readsoft_id) > 255:
            raise ValueError("Invalid value for `readsoft_id`, length must be less than or equal to `255`")

        self._readsoft_id = readsoft_id

    @property
    def reference(self):
        """Gets the reference of this Expense.


        :return: The reference of this Expense.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Expense.


        :param reference: The reference of this Expense.
        :type reference: str
        """
        if reference is not None and len(reference) > 8192:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `8192`")

        self._reference = reference

    @property
    def roger_id(self):
        """Gets the roger_id of this Expense.


        :return: The roger_id of this Expense.
        :rtype: str
        """
        return self._roger_id

    @roger_id.setter
    def roger_id(self, roger_id):
        """Sets the roger_id of this Expense.


        :param roger_id: The roger_id of this Expense.
        :type roger_id: str
        """

        self._roger_id = roger_id

    @property
    def sent_to_email(self):
        """Gets the sent_to_email of this Expense.


        :return: The sent_to_email of this Expense.
        :rtype: str
        """
        return self._sent_to_email

    @sent_to_email.setter
    def sent_to_email(self, sent_to_email):
        """Sets the sent_to_email of this Expense.


        :param sent_to_email: The sent_to_email of this Expense.
        :type sent_to_email: str
        """
        if sent_to_email is not None and len(sent_to_email) > 8192:
            raise ValueError("Invalid value for `sent_to_email`, length must be less than or equal to `8192`")

        self._sent_to_email = sent_to_email

    @property
    def short_text(self):
        """Gets the short_text of this Expense.


        :return: The short_text of this Expense.
        :rtype: str
        """
        return self._short_text

    @short_text.setter
    def short_text(self, short_text):
        """Sets the short_text of this Expense.


        :param short_text: The short_text of this Expense.
        :type short_text: str
        """
        if short_text is not None and len(short_text) > 255:
            raise ValueError("Invalid value for `short_text`, length must be less than or equal to `255`")

        self._short_text = short_text

    @property
    def status(self):
        """Gets the status of this Expense.


        :return: The status of this Expense.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Expense.


        :param status: The status of this Expense.
        :type status: str
        """
        if status is not None and len(status) > 255:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `255`")

        self._status = status

    @property
    def supplier_invoice_number(self):
        """Gets the supplier_invoice_number of this Expense.


        :return: The supplier_invoice_number of this Expense.
        :rtype: str
        """
        return self._supplier_invoice_number

    @supplier_invoice_number.setter
    def supplier_invoice_number(self, supplier_invoice_number):
        """Sets the supplier_invoice_number of this Expense.


        :param supplier_invoice_number: The supplier_invoice_number of this Expense.
        :type supplier_invoice_number: str
        """
        if supplier_invoice_number is not None and len(supplier_invoice_number) > 255:
            raise ValueError("Invalid value for `supplier_invoice_number`, length must be less than or equal to `255`")

        self._supplier_invoice_number = supplier_invoice_number

    @property
    def total_buying_price(self):
        """Gets the total_buying_price of this Expense.

        Sum of all `buying_price` from expense lines

        :return: The total_buying_price of this Expense.
        :rtype: float
        """
        return self._total_buying_price

    @total_buying_price.setter
    def total_buying_price(self, total_buying_price):
        """Sets the total_buying_price of this Expense.

        Sum of all `buying_price` from expense lines

        :param total_buying_price: The total_buying_price of this Expense.
        :type total_buying_price: float
        """

        self._total_buying_price = total_buying_price

    @property
    def total_selling_price(self):
        """Gets the total_selling_price of this Expense.

        Sum of all `selling_price` from expense lines

        :return: The total_selling_price of this Expense.
        :rtype: float
        """
        return self._total_selling_price

    @total_selling_price.setter
    def total_selling_price(self, total_selling_price):
        """Sets the total_selling_price of this Expense.

        Sum of all `selling_price` from expense lines

        :param total_selling_price: The total_selling_price of this Expense.
        :type total_selling_price: float
        """

        self._total_selling_price = total_selling_price
