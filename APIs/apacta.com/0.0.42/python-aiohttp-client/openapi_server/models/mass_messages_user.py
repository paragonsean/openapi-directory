# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mass_message import MassMessage
from openapi_server import util


class MassMessagesUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, created_by_id: str=None, deleted: str=None, id: str=None, is_read: bool=None, is_sent_email: bool=None, mass_message: MassMessage=None, mass_message_id: str=None, modified: str=None, modified_by_id: str=None, user_id: str=None):
        """MassMessagesUser - a model defined in OpenAPI

        :param created: The created of this MassMessagesUser.
        :param created_by_id: The created_by_id of this MassMessagesUser.
        :param deleted: The deleted of this MassMessagesUser.
        :param id: The id of this MassMessagesUser.
        :param is_read: The is_read of this MassMessagesUser.
        :param is_sent_email: The is_sent_email of this MassMessagesUser.
        :param mass_message: The mass_message of this MassMessagesUser.
        :param mass_message_id: The mass_message_id of this MassMessagesUser.
        :param modified: The modified of this MassMessagesUser.
        :param modified_by_id: The modified_by_id of this MassMessagesUser.
        :param user_id: The user_id of this MassMessagesUser.
        """
        self.openapi_types = {
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'id': str,
            'is_read': bool,
            'is_sent_email': bool,
            'mass_message': MassMessage,
            'mass_message_id': str,
            'modified': str,
            'modified_by_id': str,
            'user_id': str
        }

        self.attribute_map = {
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'id': 'id',
            'is_read': 'is_read',
            'is_sent_email': 'is_sent_email',
            'mass_message': 'mass_message',
            'mass_message_id': 'mass_message_id',
            'modified': 'modified',
            'modified_by_id': 'modified_by_id',
            'user_id': 'user_id'
        }

        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._id = id
        self._is_read = is_read
        self._is_sent_email = is_sent_email
        self._mass_message = mass_message
        self._mass_message_id = mass_message_id
        self._modified = modified
        self._modified_by_id = modified_by_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MassMessagesUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MassMessagesUser of this MassMessagesUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this MassMessagesUser.


        :return: The created of this MassMessagesUser.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MassMessagesUser.


        :param created: The created of this MassMessagesUser.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this MassMessagesUser.


        :return: The created_by_id of this MassMessagesUser.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this MassMessagesUser.


        :param created_by_id: The created_by_id of this MassMessagesUser.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this MassMessagesUser.

        Only present if it's a deleted object

        :return: The deleted of this MassMessagesUser.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this MassMessagesUser.

        Only present if it's a deleted object

        :param deleted: The deleted of this MassMessagesUser.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this MassMessagesUser.


        :return: The id of this MassMessagesUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MassMessagesUser.


        :param id: The id of this MassMessagesUser.
        :type id: str
        """

        self._id = id

    @property
    def is_read(self):
        """Gets the is_read of this MassMessagesUser.


        :return: The is_read of this MassMessagesUser.
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this MassMessagesUser.


        :param is_read: The is_read of this MassMessagesUser.
        :type is_read: bool
        """

        self._is_read = is_read

    @property
    def is_sent_email(self):
        """Gets the is_sent_email of this MassMessagesUser.


        :return: The is_sent_email of this MassMessagesUser.
        :rtype: bool
        """
        return self._is_sent_email

    @is_sent_email.setter
    def is_sent_email(self, is_sent_email):
        """Sets the is_sent_email of this MassMessagesUser.


        :param is_sent_email: The is_sent_email of this MassMessagesUser.
        :type is_sent_email: bool
        """

        self._is_sent_email = is_sent_email

    @property
    def mass_message(self):
        """Gets the mass_message of this MassMessagesUser.


        :return: The mass_message of this MassMessagesUser.
        :rtype: MassMessage
        """
        return self._mass_message

    @mass_message.setter
    def mass_message(self, mass_message):
        """Sets the mass_message of this MassMessagesUser.


        :param mass_message: The mass_message of this MassMessagesUser.
        :type mass_message: MassMessage
        """

        self._mass_message = mass_message

    @property
    def mass_message_id(self):
        """Gets the mass_message_id of this MassMessagesUser.


        :return: The mass_message_id of this MassMessagesUser.
        :rtype: str
        """
        return self._mass_message_id

    @mass_message_id.setter
    def mass_message_id(self, mass_message_id):
        """Sets the mass_message_id of this MassMessagesUser.


        :param mass_message_id: The mass_message_id of this MassMessagesUser.
        :type mass_message_id: str
        """

        self._mass_message_id = mass_message_id

    @property
    def modified(self):
        """Gets the modified of this MassMessagesUser.


        :return: The modified of this MassMessagesUser.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this MassMessagesUser.


        :param modified: The modified of this MassMessagesUser.
        :type modified: str
        """

        self._modified = modified

    @property
    def modified_by_id(self):
        """Gets the modified_by_id of this MassMessagesUser.


        :return: The modified_by_id of this MassMessagesUser.
        :rtype: str
        """
        return self._modified_by_id

    @modified_by_id.setter
    def modified_by_id(self, modified_by_id):
        """Sets the modified_by_id of this MassMessagesUser.


        :param modified_by_id: The modified_by_id of this MassMessagesUser.
        :type modified_by_id: str
        """

        self._modified_by_id = modified_by_id

    @property
    def user_id(self):
        """Gets the user_id of this MassMessagesUser.


        :return: The user_id of this MassMessagesUser.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MassMessagesUser.


        :param user_id: The user_id of this MassMessagesUser.
        :type user_id: str
        """

        self._user_id = user_id
