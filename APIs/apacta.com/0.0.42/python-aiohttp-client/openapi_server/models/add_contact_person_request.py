# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddContactPersonRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, name: str=None, phone: str=None, title: str=None):
        """AddContactPersonRequest - a model defined in OpenAPI

        :param email: The email of this AddContactPersonRequest.
        :param name: The name of this AddContactPersonRequest.
        :param phone: The phone of this AddContactPersonRequest.
        :param title: The title of this AddContactPersonRequest.
        """
        self.openapi_types = {
            'email': str,
            'name': str,
            'phone': str,
            'title': str
        }

        self.attribute_map = {
            'email': 'email',
            'name': 'name',
            'phone': 'phone',
            'title': 'title'
        }

        self._email = email
        self._name = name
        self._phone = phone
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddContactPersonRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The addContactPerson_request of this AddContactPersonRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this AddContactPersonRequest.


        :return: The email of this AddContactPersonRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AddContactPersonRequest.


        :param email: The email of this AddContactPersonRequest.
        :type email: str
        """
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")

        self._email = email

    @property
    def name(self):
        """Gets the name of this AddContactPersonRequest.


        :return: The name of this AddContactPersonRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddContactPersonRequest.


        :param name: The name of this AddContactPersonRequest.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this AddContactPersonRequest.


        :return: The phone of this AddContactPersonRequest.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AddContactPersonRequest.


        :param phone: The phone of this AddContactPersonRequest.
        :type phone: str
        """
        if phone is not None and len(phone) > 32:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `32`")

        self._phone = phone

    @property
    def title(self):
        """Gets the title of this AddContactPersonRequest.


        :return: The title of this AddContactPersonRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AddContactPersonRequest.


        :param title: The title of this AddContactPersonRequest.
        :type title: str
        """
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")

        self._title = title
