# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SharedProjectContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, created: str=None, created_by_id: str=None, deleted: str=None, id: str=None, modified: str=None, modified_by_id: str=None, project_id: str=None, sent_email: bool=None, sent_sms: bool=None):
        """SharedProjectContact - a model defined in OpenAPI

        :param contact_id: The contact_id of this SharedProjectContact.
        :param created: The created of this SharedProjectContact.
        :param created_by_id: The created_by_id of this SharedProjectContact.
        :param deleted: The deleted of this SharedProjectContact.
        :param id: The id of this SharedProjectContact.
        :param modified: The modified of this SharedProjectContact.
        :param modified_by_id: The modified_by_id of this SharedProjectContact.
        :param project_id: The project_id of this SharedProjectContact.
        :param sent_email: The sent_email of this SharedProjectContact.
        :param sent_sms: The sent_sms of this SharedProjectContact.
        """
        self.openapi_types = {
            'contact_id': str,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'id': str,
            'modified': str,
            'modified_by_id': str,
            'project_id': str,
            'sent_email': bool,
            'sent_sms': bool
        }

        self.attribute_map = {
            'contact_id': 'contact_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'id': 'id',
            'modified': 'modified',
            'modified_by_id': 'modified_by_id',
            'project_id': 'project_id',
            'sent_email': 'sent_email',
            'sent_sms': 'sent_sms'
        }

        self._contact_id = contact_id
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._id = id
        self._modified = modified
        self._modified_by_id = modified_by_id
        self._project_id = project_id
        self._sent_email = sent_email
        self._sent_sms = sent_sms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SharedProjectContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SharedProjectContact of this SharedProjectContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this SharedProjectContact.


        :return: The contact_id of this SharedProjectContact.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this SharedProjectContact.


        :param contact_id: The contact_id of this SharedProjectContact.
        :type contact_id: str
        """

        self._contact_id = contact_id

    @property
    def created(self):
        """Gets the created of this SharedProjectContact.


        :return: The created of this SharedProjectContact.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SharedProjectContact.


        :param created: The created of this SharedProjectContact.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this SharedProjectContact.


        :return: The created_by_id of this SharedProjectContact.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this SharedProjectContact.


        :param created_by_id: The created_by_id of this SharedProjectContact.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this SharedProjectContact.

        Only present if it's a deleted object

        :return: The deleted of this SharedProjectContact.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SharedProjectContact.

        Only present if it's a deleted object

        :param deleted: The deleted of this SharedProjectContact.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this SharedProjectContact.


        :return: The id of this SharedProjectContact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedProjectContact.


        :param id: The id of this SharedProjectContact.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this SharedProjectContact.


        :return: The modified of this SharedProjectContact.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this SharedProjectContact.


        :param modified: The modified of this SharedProjectContact.
        :type modified: str
        """

        self._modified = modified

    @property
    def modified_by_id(self):
        """Gets the modified_by_id of this SharedProjectContact.


        :return: The modified_by_id of this SharedProjectContact.
        :rtype: str
        """
        return self._modified_by_id

    @modified_by_id.setter
    def modified_by_id(self, modified_by_id):
        """Sets the modified_by_id of this SharedProjectContact.


        :param modified_by_id: The modified_by_id of this SharedProjectContact.
        :type modified_by_id: str
        """

        self._modified_by_id = modified_by_id

    @property
    def project_id(self):
        """Gets the project_id of this SharedProjectContact.


        :return: The project_id of this SharedProjectContact.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SharedProjectContact.


        :param project_id: The project_id of this SharedProjectContact.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def sent_email(self):
        """Gets the sent_email of this SharedProjectContact.


        :return: The sent_email of this SharedProjectContact.
        :rtype: bool
        """
        return self._sent_email

    @sent_email.setter
    def sent_email(self, sent_email):
        """Sets the sent_email of this SharedProjectContact.


        :param sent_email: The sent_email of this SharedProjectContact.
        :type sent_email: bool
        """

        self._sent_email = sent_email

    @property
    def sent_sms(self):
        """Gets the sent_sms of this SharedProjectContact.


        :return: The sent_sms of this SharedProjectContact.
        :rtype: bool
        """
        return self._sent_sms

    @sent_sms.setter
    def sent_sms(self, sent_sms):
        """Sets the sent_sms of this SharedProjectContact.


        :param sent_sms: The sent_sms of this SharedProjectContact.
        :type sent_sms: bool
        """

        self._sent_sms = sent_sms
