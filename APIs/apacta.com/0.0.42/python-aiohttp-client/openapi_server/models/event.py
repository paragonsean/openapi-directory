# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, created: str=None, created_by_id: str=None, deleted: str=None, description: str=None, end: str=None, id: str=None, modified: str=None, modified_by_id: str=None, name: str=None, project_id: str=None, start: str=None, user_id: str=None):
        """Event - a model defined in OpenAPI

        :param company_id: The company_id of this Event.
        :param created: The created of this Event.
        :param created_by_id: The created_by_id of this Event.
        :param deleted: The deleted of this Event.
        :param description: The description of this Event.
        :param end: The end of this Event.
        :param id: The id of this Event.
        :param modified: The modified of this Event.
        :param modified_by_id: The modified_by_id of this Event.
        :param name: The name of this Event.
        :param project_id: The project_id of this Event.
        :param start: The start of this Event.
        :param user_id: The user_id of this Event.
        """
        self.openapi_types = {
            'company_id': str,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'description': str,
            'end': str,
            'id': str,
            'modified': str,
            'modified_by_id': str,
            'name': str,
            'project_id': str,
            'start': str,
            'user_id': str
        }

        self.attribute_map = {
            'company_id': 'company_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'description': 'description',
            'end': 'end',
            'id': 'id',
            'modified': 'modified',
            'modified_by_id': 'modified_by_id',
            'name': 'name',
            'project_id': 'project_id',
            'start': 'start',
            'user_id': 'user_id'
        }

        self._company_id = company_id
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._description = description
        self._end = end
        self._id = id
        self._modified = modified
        self._modified_by_id = modified_by_id
        self._name = name
        self._project_id = project_id
        self._start = start
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this Event.

        Read-only

        :return: The company_id of this Event.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Event.

        Read-only

        :param company_id: The company_id of this Event.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def created(self):
        """Gets the created of this Event.


        :return: The created of this Event.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Event.


        :param created: The created of this Event.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Event.

        Read-only

        :return: The created_by_id of this Event.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Event.

        Read-only

        :param created_by_id: The created_by_id of this Event.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this Event.

        Only present if it's a deleted object

        :return: The deleted of this Event.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Event.

        Only present if it's a deleted object

        :param deleted: The deleted of this Event.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Event.


        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.


        :param description: The description of this Event.
        :type description: str
        """
        if description is not None and len(description) > 8192:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")

        self._description = description

    @property
    def end(self):
        """Gets the end of this Event.


        :return: The end of this Event.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Event.


        :param end: The end of this Event.
        :type end: str
        """

        self._end = end

    @property
    def id(self):
        """Gets the id of this Event.

        Read-only

        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.

        Read-only

        :param id: The id of this Event.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this Event.


        :return: The modified of this Event.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Event.


        :param modified: The modified of this Event.
        :type modified: str
        """

        self._modified = modified

    @property
    def modified_by_id(self):
        """Gets the modified_by_id of this Event.

        Read-only

        :return: The modified_by_id of this Event.
        :rtype: str
        """
        return self._modified_by_id

    @modified_by_id.setter
    def modified_by_id(self, modified_by_id):
        """Sets the modified_by_id of this Event.

        Read-only

        :param modified_by_id: The modified_by_id of this Event.
        :type modified_by_id: str
        """

        self._modified_by_id = modified_by_id

    @property
    def name(self):
        """Gets the name of this Event.


        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this Event.


        :return: The project_id of this Event.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Event.


        :param project_id: The project_id of this Event.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def start(self):
        """Gets the start of this Event.


        :return: The start of this Event.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Event.


        :param start: The start of this Event.
        :type start: str
        """

        self._start = start

    @property
    def user_id(self):
        """Gets the user_id of this Event.


        :return: The user_id of this Event.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Event.


        :param user_id: The user_id of this Event.
        :type user_id: str
        """

        self._user_id = user_id
