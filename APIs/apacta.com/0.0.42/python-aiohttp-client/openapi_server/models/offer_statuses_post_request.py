# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OfferStatusesPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, description: str=None, identifier: str=None, is_custom: bool=None, name: str=None):
        """OfferStatusesPostRequest - a model defined in OpenAPI

        :param company_id: The company_id of this OfferStatusesPostRequest.
        :param description: The description of this OfferStatusesPostRequest.
        :param identifier: The identifier of this OfferStatusesPostRequest.
        :param is_custom: The is_custom of this OfferStatusesPostRequest.
        :param name: The name of this OfferStatusesPostRequest.
        """
        self.openapi_types = {
            'company_id': str,
            'description': str,
            'identifier': str,
            'is_custom': bool,
            'name': str
        }

        self.attribute_map = {
            'company_id': 'company_id',
            'description': 'description',
            'identifier': 'identifier',
            'is_custom': 'is_custom',
            'name': 'name'
        }

        self._company_id = company_id
        self._description = description
        self._identifier = identifier
        self._is_custom = is_custom
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferStatusesPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _offer_statuses_post_request of this OfferStatusesPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this OfferStatusesPostRequest.


        :return: The company_id of this OfferStatusesPostRequest.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this OfferStatusesPostRequest.


        :param company_id: The company_id of this OfferStatusesPostRequest.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def description(self):
        """Gets the description of this OfferStatusesPostRequest.


        :return: The description of this OfferStatusesPostRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OfferStatusesPostRequest.


        :param description: The description of this OfferStatusesPostRequest.
        :type description: str
        """
        if description is not None and len(description) > 8192:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")

        self._description = description

    @property
    def identifier(self):
        """Gets the identifier of this OfferStatusesPostRequest.


        :return: The identifier of this OfferStatusesPostRequest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this OfferStatusesPostRequest.


        :param identifier: The identifier of this OfferStatusesPostRequest.
        :type identifier: str
        """
        if identifier is not None and len(identifier) > 255:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `255`")

        self._identifier = identifier

    @property
    def is_custom(self):
        """Gets the is_custom of this OfferStatusesPostRequest.


        :return: The is_custom of this OfferStatusesPostRequest.
        :rtype: bool
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """Sets the is_custom of this OfferStatusesPostRequest.


        :param is_custom: The is_custom of this OfferStatusesPostRequest.
        :type is_custom: bool
        """

        self._is_custom = is_custom

    @property
    def name(self):
        """Gets the name of this OfferStatusesPostRequest.


        :return: The name of this OfferStatusesPostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OfferStatusesPostRequest.


        :param name: The name of this OfferStatusesPostRequest.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name
