# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VendorProductPriceFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, companies_vendor_id: str=None, created: str=None, created_by_id: str=None, deleted: str=None, dir: str=None, file: str=None, finished: bool=None, id: str=None, modified: str=None, original_file_name: str=None, progress: int=None, size: int=None, status: str=None, type: str=None, vendor_products_count: int=None, vendor_products_count_total: int=None):
        """VendorProductPriceFile - a model defined in OpenAPI

        :param companies_vendor_id: The companies_vendor_id of this VendorProductPriceFile.
        :param created: The created of this VendorProductPriceFile.
        :param created_by_id: The created_by_id of this VendorProductPriceFile.
        :param deleted: The deleted of this VendorProductPriceFile.
        :param dir: The dir of this VendorProductPriceFile.
        :param file: The file of this VendorProductPriceFile.
        :param finished: The finished of this VendorProductPriceFile.
        :param id: The id of this VendorProductPriceFile.
        :param modified: The modified of this VendorProductPriceFile.
        :param original_file_name: The original_file_name of this VendorProductPriceFile.
        :param progress: The progress of this VendorProductPriceFile.
        :param size: The size of this VendorProductPriceFile.
        :param status: The status of this VendorProductPriceFile.
        :param type: The type of this VendorProductPriceFile.
        :param vendor_products_count: The vendor_products_count of this VendorProductPriceFile.
        :param vendor_products_count_total: The vendor_products_count_total of this VendorProductPriceFile.
        """
        self.openapi_types = {
            'companies_vendor_id': str,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'dir': str,
            'file': str,
            'finished': bool,
            'id': str,
            'modified': str,
            'original_file_name': str,
            'progress': int,
            'size': int,
            'status': str,
            'type': str,
            'vendor_products_count': int,
            'vendor_products_count_total': int
        }

        self.attribute_map = {
            'companies_vendor_id': 'companies_vendor_id',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'dir': 'dir',
            'file': 'file',
            'finished': 'finished',
            'id': 'id',
            'modified': 'modified',
            'original_file_name': 'original_file_name',
            'progress': 'progress',
            'size': 'size',
            'status': 'status',
            'type': 'type',
            'vendor_products_count': 'vendor_products_count',
            'vendor_products_count_total': 'vendor_products_count_total'
        }

        self._companies_vendor_id = companies_vendor_id
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._dir = dir
        self._file = file
        self._finished = finished
        self._id = id
        self._modified = modified
        self._original_file_name = original_file_name
        self._progress = progress
        self._size = size
        self._status = status
        self._type = type
        self._vendor_products_count = vendor_products_count
        self._vendor_products_count_total = vendor_products_count_total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VendorProductPriceFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VendorProductPriceFile of this VendorProductPriceFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def companies_vendor_id(self):
        """Gets the companies_vendor_id of this VendorProductPriceFile.


        :return: The companies_vendor_id of this VendorProductPriceFile.
        :rtype: str
        """
        return self._companies_vendor_id

    @companies_vendor_id.setter
    def companies_vendor_id(self, companies_vendor_id):
        """Sets the companies_vendor_id of this VendorProductPriceFile.


        :param companies_vendor_id: The companies_vendor_id of this VendorProductPriceFile.
        :type companies_vendor_id: str
        """

        self._companies_vendor_id = companies_vendor_id

    @property
    def created(self):
        """Gets the created of this VendorProductPriceFile.


        :return: The created of this VendorProductPriceFile.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this VendorProductPriceFile.


        :param created: The created of this VendorProductPriceFile.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this VendorProductPriceFile.


        :return: The created_by_id of this VendorProductPriceFile.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this VendorProductPriceFile.


        :param created_by_id: The created_by_id of this VendorProductPriceFile.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this VendorProductPriceFile.

        Only present if it's a deleted object

        :return: The deleted of this VendorProductPriceFile.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this VendorProductPriceFile.

        Only present if it's a deleted object

        :param deleted: The deleted of this VendorProductPriceFile.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def dir(self):
        """Gets the dir of this VendorProductPriceFile.


        :return: The dir of this VendorProductPriceFile.
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this VendorProductPriceFile.


        :param dir: The dir of this VendorProductPriceFile.
        :type dir: str
        """

        self._dir = dir

    @property
    def file(self):
        """Gets the file of this VendorProductPriceFile.


        :return: The file of this VendorProductPriceFile.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this VendorProductPriceFile.


        :param file: The file of this VendorProductPriceFile.
        :type file: str
        """

        self._file = file

    @property
    def finished(self):
        """Gets the finished of this VendorProductPriceFile.


        :return: The finished of this VendorProductPriceFile.
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this VendorProductPriceFile.


        :param finished: The finished of this VendorProductPriceFile.
        :type finished: bool
        """

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this VendorProductPriceFile.


        :return: The id of this VendorProductPriceFile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VendorProductPriceFile.


        :param id: The id of this VendorProductPriceFile.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this VendorProductPriceFile.


        :return: The modified of this VendorProductPriceFile.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this VendorProductPriceFile.


        :param modified: The modified of this VendorProductPriceFile.
        :type modified: str
        """

        self._modified = modified

    @property
    def original_file_name(self):
        """Gets the original_file_name of this VendorProductPriceFile.


        :return: The original_file_name of this VendorProductPriceFile.
        :rtype: str
        """
        return self._original_file_name

    @original_file_name.setter
    def original_file_name(self, original_file_name):
        """Sets the original_file_name of this VendorProductPriceFile.


        :param original_file_name: The original_file_name of this VendorProductPriceFile.
        :type original_file_name: str
        """

        self._original_file_name = original_file_name

    @property
    def progress(self):
        """Gets the progress of this VendorProductPriceFile.


        :return: The progress of this VendorProductPriceFile.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this VendorProductPriceFile.


        :param progress: The progress of this VendorProductPriceFile.
        :type progress: int
        """

        self._progress = progress

    @property
    def size(self):
        """Gets the size of this VendorProductPriceFile.


        :return: The size of this VendorProductPriceFile.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VendorProductPriceFile.


        :param size: The size of this VendorProductPriceFile.
        :type size: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this VendorProductPriceFile.


        :return: The status of this VendorProductPriceFile.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VendorProductPriceFile.


        :param status: The status of this VendorProductPriceFile.
        :type status: str
        """
        allowed_values = ["awaiting", "fresh", "expired", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this VendorProductPriceFile.


        :return: The type of this VendorProductPriceFile.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VendorProductPriceFile.


        :param type: The type of this VendorProductPriceFile.
        :type type: str
        """

        self._type = type

    @property
    def vendor_products_count(self):
        """Gets the vendor_products_count of this VendorProductPriceFile.


        :return: The vendor_products_count of this VendorProductPriceFile.
        :rtype: int
        """
        return self._vendor_products_count

    @vendor_products_count.setter
    def vendor_products_count(self, vendor_products_count):
        """Sets the vendor_products_count of this VendorProductPriceFile.


        :param vendor_products_count: The vendor_products_count of this VendorProductPriceFile.
        :type vendor_products_count: int
        """

        self._vendor_products_count = vendor_products_count

    @property
    def vendor_products_count_total(self):
        """Gets the vendor_products_count_total of this VendorProductPriceFile.


        :return: The vendor_products_count_total of this VendorProductPriceFile.
        :rtype: int
        """
        return self._vendor_products_count_total

    @vendor_products_count_total.setter
    def vendor_products_count_total(self, vendor_products_count_total):
        """Sets the vendor_products_count_total of this VendorProductPriceFile.


        :param vendor_products_count_total: The vendor_products_count_total of this VendorProductPriceFile.
        :type vendor_products_count_total: int
        """

        self._vendor_products_count_total = vendor_products_count_total
