# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FormField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, content_value: str=None, created: str=None, created_by_id: str=None, deleted: str=None, file_id: str=None, form_field_type_id: str=None, form_id: str=None, form_template_field_id: str=None, id: str=None, modified: str=None, placement: int=None):
        """FormField - a model defined in OpenAPI

        :param comment: The comment of this FormField.
        :param content_value: The content_value of this FormField.
        :param created: The created of this FormField.
        :param created_by_id: The created_by_id of this FormField.
        :param deleted: The deleted of this FormField.
        :param file_id: The file_id of this FormField.
        :param form_field_type_id: The form_field_type_id of this FormField.
        :param form_id: The form_id of this FormField.
        :param form_template_field_id: The form_template_field_id of this FormField.
        :param id: The id of this FormField.
        :param modified: The modified of this FormField.
        :param placement: The placement of this FormField.
        """
        self.openapi_types = {
            'comment': str,
            'content_value': str,
            'created': str,
            'created_by_id': str,
            'deleted': str,
            'file_id': str,
            'form_field_type_id': str,
            'form_id': str,
            'form_template_field_id': str,
            'id': str,
            'modified': str,
            'placement': int
        }

        self.attribute_map = {
            'comment': 'comment',
            'content_value': 'content_value',
            'created': 'created',
            'created_by_id': 'created_by_id',
            'deleted': 'deleted',
            'file_id': 'file_id',
            'form_field_type_id': 'form_field_type_id',
            'form_id': 'form_id',
            'form_template_field_id': 'form_template_field_id',
            'id': 'id',
            'modified': 'modified',
            'placement': 'placement'
        }

        self._comment = comment
        self._content_value = content_value
        self._created = created
        self._created_by_id = created_by_id
        self._deleted = deleted
        self._file_id = file_id
        self._form_field_type_id = form_field_type_id
        self._form_id = form_id
        self._form_template_field_id = form_template_field_id
        self._id = id
        self._modified = modified
        self._placement = placement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FormField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FormField of this FormField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this FormField.


        :return: The comment of this FormField.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this FormField.


        :param comment: The comment of this FormField.
        :type comment: str
        """
        if comment is not None and len(comment) > 8192:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `8192`")

        self._comment = comment

    @property
    def content_value(self):
        """Gets the content_value of this FormField.


        :return: The content_value of this FormField.
        :rtype: str
        """
        return self._content_value

    @content_value.setter
    def content_value(self, content_value):
        """Sets the content_value of this FormField.


        :param content_value: The content_value of this FormField.
        :type content_value: str
        """
        if content_value is not None and len(content_value) > 255:
            raise ValueError("Invalid value for `content_value`, length must be less than or equal to `255`")

        self._content_value = content_value

    @property
    def created(self):
        """Gets the created of this FormField.


        :return: The created of this FormField.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FormField.


        :param created: The created of this FormField.
        :type created: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this FormField.

        Read-only

        :return: The created_by_id of this FormField.
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this FormField.

        Read-only

        :param created_by_id: The created_by_id of this FormField.
        :type created_by_id: str
        """

        self._created_by_id = created_by_id

    @property
    def deleted(self):
        """Gets the deleted of this FormField.

        Only present if it's a deleted object

        :return: The deleted of this FormField.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this FormField.

        Only present if it's a deleted object

        :param deleted: The deleted of this FormField.
        :type deleted: str
        """

        self._deleted = deleted

    @property
    def file_id(self):
        """Gets the file_id of this FormField.


        :return: The file_id of this FormField.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this FormField.


        :param file_id: The file_id of this FormField.
        :type file_id: str
        """

        self._file_id = file_id

    @property
    def form_field_type_id(self):
        """Gets the form_field_type_id of this FormField.


        :return: The form_field_type_id of this FormField.
        :rtype: str
        """
        return self._form_field_type_id

    @form_field_type_id.setter
    def form_field_type_id(self, form_field_type_id):
        """Sets the form_field_type_id of this FormField.


        :param form_field_type_id: The form_field_type_id of this FormField.
        :type form_field_type_id: str
        """

        self._form_field_type_id = form_field_type_id

    @property
    def form_id(self):
        """Gets the form_id of this FormField.


        :return: The form_id of this FormField.
        :rtype: str
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this FormField.


        :param form_id: The form_id of this FormField.
        :type form_id: str
        """

        self._form_id = form_id

    @property
    def form_template_field_id(self):
        """Gets the form_template_field_id of this FormField.


        :return: The form_template_field_id of this FormField.
        :rtype: str
        """
        return self._form_template_field_id

    @form_template_field_id.setter
    def form_template_field_id(self, form_template_field_id):
        """Sets the form_template_field_id of this FormField.


        :param form_template_field_id: The form_template_field_id of this FormField.
        :type form_template_field_id: str
        """

        self._form_template_field_id = form_template_field_id

    @property
    def id(self):
        """Gets the id of this FormField.

        Read-only

        :return: The id of this FormField.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FormField.

        Read-only

        :param id: The id of this FormField.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this FormField.


        :return: The modified of this FormField.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this FormField.


        :param modified: The modified of this FormField.
        :type modified: str
        """

        self._modified = modified

    @property
    def placement(self):
        """Gets the placement of this FormField.


        :return: The placement of this FormField.
        :rtype: int
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this FormField.


        :param placement: The placement of this FormField.
        :type placement: int
        """

        self._placement = placement
