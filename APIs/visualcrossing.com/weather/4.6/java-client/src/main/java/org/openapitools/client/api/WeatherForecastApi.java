/*
 * Visual Crossing Weather API
 * Weather Forecast and Historical Weather Data via RESTful API.
 *
 * The version of the OpenAPI document: 4.6
 * Contact: info@visualcrossing.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WeatherForecastApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WeatherForecastApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WeatherForecastApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for visualCrossingWebServicesRestServicesWeatherdataForecastGet
     * @param sendAsDatasource  (optional)
     * @param allowAsynch  (optional)
     * @param shortColumnNames  (optional)
     * @param locations  (optional)
     * @param aggregateHours  (optional)
     * @param contentType  (optional)
     * @param unitGroup  (optional)
     * @param key  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Auto generated using Swagger Inspector </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call visualCrossingWebServicesRestServicesWeatherdataForecastGetCall(Boolean sendAsDatasource, Boolean allowAsynch, Boolean shortColumnNames, String locations, String aggregateHours, String contentType, String unitGroup, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://weather.visualcrossing.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/VisualCrossingWebServices/rest/services/weatherdata/forecast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendAsDatasource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendAsDatasource", sendAsDatasource));
        }

        if (allowAsynch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowAsynch", allowAsynch));
        }

        if (shortColumnNames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shortColumnNames", shortColumnNames));
        }

        if (locations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locations", locations));
        }

        if (aggregateHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggregateHours", aggregateHours));
        }

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentType", contentType));
        }

        if (unitGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitGroup", unitGroup));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualCrossingWebServicesRestServicesWeatherdataForecastGetValidateBeforeCall(Boolean sendAsDatasource, Boolean allowAsynch, Boolean shortColumnNames, String locations, String aggregateHours, String contentType, String unitGroup, String key, final ApiCallback _callback) throws ApiException {
        return visualCrossingWebServicesRestServicesWeatherdataForecastGetCall(sendAsDatasource, allowAsynch, shortColumnNames, locations, aggregateHours, contentType, unitGroup, key, _callback);

    }

    /**
     * Weather Forecast API
     * Provides access to weather forecast information. The forecast is available for up to 15 days at the hourly, 12 hour and daily summary level.
     * @param sendAsDatasource  (optional)
     * @param allowAsynch  (optional)
     * @param shortColumnNames  (optional)
     * @param locations  (optional)
     * @param aggregateHours  (optional)
     * @param contentType  (optional)
     * @param unitGroup  (optional)
     * @param key  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Auto generated using Swagger Inspector </td><td>  -  </td></tr>
     </table>
     */
    public void visualCrossingWebServicesRestServicesWeatherdataForecastGet(Boolean sendAsDatasource, Boolean allowAsynch, Boolean shortColumnNames, String locations, String aggregateHours, String contentType, String unitGroup, String key) throws ApiException {
        visualCrossingWebServicesRestServicesWeatherdataForecastGetWithHttpInfo(sendAsDatasource, allowAsynch, shortColumnNames, locations, aggregateHours, contentType, unitGroup, key);
    }

    /**
     * Weather Forecast API
     * Provides access to weather forecast information. The forecast is available for up to 15 days at the hourly, 12 hour and daily summary level.
     * @param sendAsDatasource  (optional)
     * @param allowAsynch  (optional)
     * @param shortColumnNames  (optional)
     * @param locations  (optional)
     * @param aggregateHours  (optional)
     * @param contentType  (optional)
     * @param unitGroup  (optional)
     * @param key  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Auto generated using Swagger Inspector </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> visualCrossingWebServicesRestServicesWeatherdataForecastGetWithHttpInfo(Boolean sendAsDatasource, Boolean allowAsynch, Boolean shortColumnNames, String locations, String aggregateHours, String contentType, String unitGroup, String key) throws ApiException {
        okhttp3.Call localVarCall = visualCrossingWebServicesRestServicesWeatherdataForecastGetValidateBeforeCall(sendAsDatasource, allowAsynch, shortColumnNames, locations, aggregateHours, contentType, unitGroup, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Weather Forecast API (asynchronously)
     * Provides access to weather forecast information. The forecast is available for up to 15 days at the hourly, 12 hour and daily summary level.
     * @param sendAsDatasource  (optional)
     * @param allowAsynch  (optional)
     * @param shortColumnNames  (optional)
     * @param locations  (optional)
     * @param aggregateHours  (optional)
     * @param contentType  (optional)
     * @param unitGroup  (optional)
     * @param key  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Auto generated using Swagger Inspector </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call visualCrossingWebServicesRestServicesWeatherdataForecastGetAsync(Boolean sendAsDatasource, Boolean allowAsynch, Boolean shortColumnNames, String locations, String aggregateHours, String contentType, String unitGroup, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualCrossingWebServicesRestServicesWeatherdataForecastGetValidateBeforeCall(sendAsDatasource, allowAsynch, shortColumnNames, locations, aggregateHours, contentType, unitGroup, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
