/**
 * Visual Crossing Weather API
 * Weather Forecast and Historical Weather Data via RESTful API.
 *
 * The version of the OpenAPI document: 4.6
 * Contact: info@visualcrossing.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* TimelineWeatherAPI15DayForecastRequest service.
* @module api/TimelineWeatherAPI15DayForecastRequestApi
* @version 4.6
*/
export default class TimelineWeatherAPI15DayForecastRequestApi {

    /**
    * Constructs a new TimelineWeatherAPI15DayForecastRequestApi. 
    * @alias module:api/TimelineWeatherAPI15DayForecastRequestApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the visualCrossingWebServicesRestServicesTimelineLocationGet operation.
     * @callback module:api/TimelineWeatherAPI15DayForecastRequestApi~visualCrossingWebServicesRestServicesTimelineLocationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historical and Forecast Weather API
     * Seamless access to daily and hourly historical and forecast weather data plus weather alerts, events and current conditions.
     * @param {String} location Locaton of interest as an address, partial address or decimal latitude,longtude value
     * @param {String} key 
     * @param {Object} opts Optional parameters
     * @param {String} [contentType] data format of the output either json or CSV
     * @param {String} [unitGroup] 
     * @param {String} [include] data to include in the output (required for CSV format - days,hours,alerts,current,events )
     * @param {String} [lang] Language to use for weather descriptions
     * @param {module:api/TimelineWeatherAPI15DayForecastRequestApi~visualCrossingWebServicesRestServicesTimelineLocationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    visualCrossingWebServicesRestServicesTimelineLocationGet(location, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling visualCrossingWebServicesRestServicesTimelineLocationGet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling visualCrossingWebServicesRestServicesTimelineLocationGet");
      }

      let pathParams = {
        'location': location
      };
      let queryParams = {
        'contentType': opts['contentType'],
        'unitGroup': opts['unitGroup'],
        'include': opts['include'],
        'lang': opts['lang'],
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://weather.visualcrossing.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/VisualCrossingWebServices/rest/services/timeline/{location}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
