# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MapCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: int=None, comments: int=None, impressions: int=None, respots: int=None, spots: int=None, subscriptions: int=None):
        """MapCounts - a model defined in OpenAPI

        :param attachments: The attachments of this MapCounts.
        :param comments: The comments of this MapCounts.
        :param impressions: The impressions of this MapCounts.
        :param respots: The respots of this MapCounts.
        :param spots: The spots of this MapCounts.
        :param subscriptions: The subscriptions of this MapCounts.
        """
        self.openapi_types = {
            'attachments': int,
            'comments': int,
            'impressions': int,
            'respots': int,
            'spots': int,
            'subscriptions': int
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'comments': 'comments',
            'impressions': 'impressions',
            'respots': 'respots',
            'spots': 'spots',
            'subscriptions': 'subscriptions'
        }

        self._attachments = attachments
        self._comments = comments
        self._impressions = impressions
        self._respots = respots
        self._spots = spots
        self._subscriptions = subscriptions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MapCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MapCounts of this MapCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this MapCounts.


        :return: The attachments of this MapCounts.
        :rtype: int
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this MapCounts.


        :param attachments: The attachments of this MapCounts.
        :type attachments: int
        """

        self._attachments = attachments

    @property
    def comments(self):
        """Gets the comments of this MapCounts.


        :return: The comments of this MapCounts.
        :rtype: int
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this MapCounts.


        :param comments: The comments of this MapCounts.
        :type comments: int
        """

        self._comments = comments

    @property
    def impressions(self):
        """Gets the impressions of this MapCounts.


        :return: The impressions of this MapCounts.
        :rtype: int
        """
        return self._impressions

    @impressions.setter
    def impressions(self, impressions):
        """Sets the impressions of this MapCounts.


        :param impressions: The impressions of this MapCounts.
        :type impressions: int
        """

        self._impressions = impressions

    @property
    def respots(self):
        """Gets the respots of this MapCounts.


        :return: The respots of this MapCounts.
        :rtype: int
        """
        return self._respots

    @respots.setter
    def respots(self, respots):
        """Sets the respots of this MapCounts.


        :param respots: The respots of this MapCounts.
        :type respots: int
        """

        self._respots = respots

    @property
    def spots(self):
        """Gets the spots of this MapCounts.


        :return: The spots of this MapCounts.
        :rtype: int
        """
        return self._spots

    @spots.setter
    def spots(self, spots):
        """Sets the spots of this MapCounts.


        :param spots: The spots of this MapCounts.
        :type spots: int
        """

        self._spots = spots

    @property
    def subscriptions(self):
        """Gets the subscriptions of this MapCounts.


        :return: The subscriptions of this MapCounts.
        :rtype: int
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this MapCounts.


        :param subscriptions: The subscriptions of this MapCounts.
        :type subscriptions: int
        """

        self._subscriptions = subscriptions
