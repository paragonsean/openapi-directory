# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MapRelation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, access_group: str=None, subscribed: bool=None):
        """MapRelation - a model defined in OpenAPI

        :param access: The access of this MapRelation.
        :param access_group: The access_group of this MapRelation.
        :param subscribed: The subscribed of this MapRelation.
        """
        self.openapi_types = {
            'access': str,
            'access_group': str,
            'subscribed': bool
        }

        self.attribute_map = {
            'access': 'access',
            'access_group': 'access_group',
            'subscribed': 'subscribed'
        }

        self._access = access
        self._access_group = access_group
        self._subscribed = subscribed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MapRelation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MapRelation of this MapRelation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this MapRelation.


        :return: The access of this MapRelation.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this MapRelation.


        :param access: The access of this MapRelation.
        :type access: str
        """

        self._access = access

    @property
    def access_group(self):
        """Gets the access_group of this MapRelation.


        :return: The access_group of this MapRelation.
        :rtype: str
        """
        return self._access_group

    @access_group.setter
    def access_group(self, access_group):
        """Sets the access_group of this MapRelation.


        :param access_group: The access_group of this MapRelation.
        :type access_group: str
        """
        allowed_values = ["visitor", "editor", "admin"]  # noqa: E501
        if access_group not in allowed_values:
            raise ValueError(
                "Invalid value for `access_group` ({0}), must be one of {1}"
                .format(access_group, allowed_values)
            )

        self._access_group = access_group

    @property
    def subscribed(self):
        """Gets the subscribed of this MapRelation.


        :return: The subscribed of this MapRelation.
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this MapRelation.


        :param subscribed: The subscribed of this MapRelation.
        :type subscribed: bool
        """

        self._subscribed = subscribed
