# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, created_at: datetime=None, id: int=None, status: str=None, updated_at: datetime=None, user: User=None):
        """Comment - a model defined in OpenAPI

        :param body: The body of this Comment.
        :param created_at: The created_at of this Comment.
        :param id: The id of this Comment.
        :param status: The status of this Comment.
        :param updated_at: The updated_at of this Comment.
        :param user: The user of this Comment.
        """
        self.openapi_types = {
            'body': str,
            'created_at': datetime,
            'id': int,
            'status': str,
            'updated_at': datetime,
            'user': User
        }

        self.attribute_map = {
            'body': 'body',
            'created_at': 'created_at',
            'id': 'id',
            'status': 'status',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._body = body
        self._created_at = created_at
        self._id = id
        self._status = status
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Comment.


        :return: The body of this Comment.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Comment.


        :param body: The body of this Comment.
        :type body: str
        """

        self._body = body

    @property
    def created_at(self):
        """Gets the created_at of this Comment.


        :return: The created_at of this Comment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Comment.


        :param created_at: The created_at of this Comment.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Comment.


        :return: The id of this Comment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.


        :param id: The id of this Comment.
        :type id: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this Comment.


        :return: The status of this Comment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Comment.


        :param status: The status of this Comment.
        :type status: str
        """
        allowed_values = ["approved", "unapproved"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this Comment.


        :return: The updated_at of this Comment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Comment.


        :param updated_at: The updated_at of this Comment.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Comment.


        :return: The user of this Comment.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Comment.


        :param user: The user of this Comment.
        :type user: User
        """

        self._user = user
