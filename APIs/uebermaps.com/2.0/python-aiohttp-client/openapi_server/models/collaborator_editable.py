# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollaboratorEditable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: str=None):
        """CollaboratorEditable - a model defined in OpenAPI

        :param group: The group of this CollaboratorEditable.
        """
        self.openapi_types = {
            'group': str
        }

        self.attribute_map = {
            'group': 'group'
        }

        self._group = group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollaboratorEditable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollaboratorEditable of this CollaboratorEditable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this CollaboratorEditable.


        :return: The group of this CollaboratorEditable.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this CollaboratorEditable.


        :param group: The group of this CollaboratorEditable.
        :type group: str
        """
        allowed_values = ["admin", "editor"]  # noqa: E501
        if group not in allowed_values:
            raise ValueError(
                "Invalid value for `group` ({0}), must be one of {1}"
                .format(group, allowed_values)
            )

        self._group = group
