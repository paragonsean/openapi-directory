# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.spot import Spot
from openapi_server.models.user import User
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachable_id: int=None, attachable_type: str=None, created_at: datetime=None, description: str=None, file_url: str=None, id: int=None, map_id: int=None, sizes: object=None, spot: Spot=None, status: str=None, user: User=None):
        """Attachment - a model defined in OpenAPI

        :param attachable_id: The attachable_id of this Attachment.
        :param attachable_type: The attachable_type of this Attachment.
        :param created_at: The created_at of this Attachment.
        :param description: The description of this Attachment.
        :param file_url: The file_url of this Attachment.
        :param id: The id of this Attachment.
        :param map_id: The map_id of this Attachment.
        :param sizes: The sizes of this Attachment.
        :param spot: The spot of this Attachment.
        :param status: The status of this Attachment.
        :param user: The user of this Attachment.
        """
        self.openapi_types = {
            'attachable_id': int,
            'attachable_type': str,
            'created_at': datetime,
            'description': str,
            'file_url': str,
            'id': int,
            'map_id': int,
            'sizes': object,
            'spot': Spot,
            'status': str,
            'user': User
        }

        self.attribute_map = {
            'attachable_id': 'attachable_id',
            'attachable_type': 'attachable_type',
            'created_at': 'created_at',
            'description': 'description',
            'file_url': 'file_url',
            'id': 'id',
            'map_id': 'map_id',
            'sizes': 'sizes',
            'spot': 'spot',
            'status': 'status',
            'user': 'user'
        }

        self._attachable_id = attachable_id
        self._attachable_type = attachable_type
        self._created_at = created_at
        self._description = description
        self._file_url = file_url
        self._id = id
        self._map_id = map_id
        self._sizes = sizes
        self._spot = spot
        self._status = status
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attachment of this Attachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachable_id(self):
        """Gets the attachable_id of this Attachment.


        :return: The attachable_id of this Attachment.
        :rtype: int
        """
        return self._attachable_id

    @attachable_id.setter
    def attachable_id(self, attachable_id):
        """Sets the attachable_id of this Attachment.


        :param attachable_id: The attachable_id of this Attachment.
        :type attachable_id: int
        """

        self._attachable_id = attachable_id

    @property
    def attachable_type(self):
        """Gets the attachable_type of this Attachment.


        :return: The attachable_type of this Attachment.
        :rtype: str
        """
        return self._attachable_type

    @attachable_type.setter
    def attachable_type(self, attachable_type):
        """Sets the attachable_type of this Attachment.


        :param attachable_type: The attachable_type of this Attachment.
        :type attachable_type: str
        """

        self._attachable_type = attachable_type

    @property
    def created_at(self):
        """Gets the created_at of this Attachment.


        :return: The created_at of this Attachment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Attachment.


        :param created_at: The created_at of this Attachment.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Attachment.


        :return: The description of this Attachment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attachment.


        :param description: The description of this Attachment.
        :type description: str
        """

        self._description = description

    @property
    def file_url(self):
        """Gets the file_url of this Attachment.


        :return: The file_url of this Attachment.
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """Sets the file_url of this Attachment.


        :param file_url: The file_url of this Attachment.
        :type file_url: str
        """

        self._file_url = file_url

    @property
    def id(self):
        """Gets the id of this Attachment.


        :return: The id of this Attachment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attachment.


        :param id: The id of this Attachment.
        :type id: int
        """

        self._id = id

    @property
    def map_id(self):
        """Gets the map_id of this Attachment.


        :return: The map_id of this Attachment.
        :rtype: int
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this Attachment.


        :param map_id: The map_id of this Attachment.
        :type map_id: int
        """

        self._map_id = map_id

    @property
    def sizes(self):
        """Gets the sizes of this Attachment.


        :return: The sizes of this Attachment.
        :rtype: object
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes):
        """Sets the sizes of this Attachment.


        :param sizes: The sizes of this Attachment.
        :type sizes: object
        """

        self._sizes = sizes

    @property
    def spot(self):
        """Gets the spot of this Attachment.


        :return: The spot of this Attachment.
        :rtype: Spot
        """
        return self._spot

    @spot.setter
    def spot(self, spot):
        """Sets the spot of this Attachment.


        :param spot: The spot of this Attachment.
        :type spot: Spot
        """

        self._spot = spot

    @property
    def status(self):
        """Gets the status of this Attachment.


        :return: The status of this Attachment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Attachment.


        :param status: The status of this Attachment.
        :type status: str
        """
        allowed_values = ["approved", "unapproved"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def user(self):
        """Gets the user of this Attachment.


        :return: The user of this Attachment.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Attachment.


        :param user: The user of this Attachment.
        :type user: User
        """

        self._user = user
