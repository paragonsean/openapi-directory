# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpotCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: int=None, comments: int=None, respot: int=None):
        """SpotCounts - a model defined in OpenAPI

        :param attachments: The attachments of this SpotCounts.
        :param comments: The comments of this SpotCounts.
        :param respot: The respot of this SpotCounts.
        """
        self.openapi_types = {
            'attachments': int,
            'comments': int,
            'respot': int
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'comments': 'comments',
            'respot': 'respot'
        }

        self._attachments = attachments
        self._comments = comments
        self._respot = respot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpotCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpotCounts of this SpotCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this SpotCounts.


        :return: The attachments of this SpotCounts.
        :rtype: int
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this SpotCounts.


        :param attachments: The attachments of this SpotCounts.
        :type attachments: int
        """

        self._attachments = attachments

    @property
    def comments(self):
        """Gets the comments of this SpotCounts.


        :return: The comments of this SpotCounts.
        :rtype: int
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this SpotCounts.


        :param comments: The comments of this SpotCounts.
        :type comments: int
        """

        self._comments = comments

    @property
    def respot(self):
        """Gets the respot of this SpotCounts.


        :return: The respot of this SpotCounts.
        :rtype: int
        """
        return self._respot

    @respot.setter
    def respot(self, respot):
        """Sets the respot of this SpotCounts.


        :param respot: The respot of this SpotCounts.
        :type respot: int
        """

        self._respot = respot
