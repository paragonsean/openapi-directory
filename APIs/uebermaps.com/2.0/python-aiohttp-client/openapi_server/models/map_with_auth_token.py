# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.map_counts import MapCounts
from openapi_server import util


class MapWithAuthToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts: MapCounts=None, created_at: datetime=None, description: str=None, id: int=None, owner_id: int=None, picture_url: str=None, title: str=None, token: str=None, updated_at: datetime=None, visibility: str=None):
        """MapWithAuthToken - a model defined in OpenAPI

        :param counts: The counts of this MapWithAuthToken.
        :param created_at: The created_at of this MapWithAuthToken.
        :param description: The description of this MapWithAuthToken.
        :param id: The id of this MapWithAuthToken.
        :param owner_id: The owner_id of this MapWithAuthToken.
        :param picture_url: The picture_url of this MapWithAuthToken.
        :param title: The title of this MapWithAuthToken.
        :param token: The token of this MapWithAuthToken.
        :param updated_at: The updated_at of this MapWithAuthToken.
        :param visibility: The visibility of this MapWithAuthToken.
        """
        self.openapi_types = {
            'counts': MapCounts,
            'created_at': datetime,
            'description': str,
            'id': int,
            'owner_id': int,
            'picture_url': str,
            'title': str,
            'token': str,
            'updated_at': datetime,
            'visibility': str
        }

        self.attribute_map = {
            'counts': 'counts',
            'created_at': 'created_at',
            'description': 'description',
            'id': 'id',
            'owner_id': 'owner_id',
            'picture_url': 'picture_url',
            'title': 'title',
            'token': 'token',
            'updated_at': 'updated_at',
            'visibility': 'visibility'
        }

        self._counts = counts
        self._created_at = created_at
        self._description = description
        self._id = id
        self._owner_id = owner_id
        self._picture_url = picture_url
        self._title = title
        self._token = token
        self._updated_at = updated_at
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MapWithAuthToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MapWithAuthToken of this MapWithAuthToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts(self):
        """Gets the counts of this MapWithAuthToken.


        :return: The counts of this MapWithAuthToken.
        :rtype: MapCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this MapWithAuthToken.


        :param counts: The counts of this MapWithAuthToken.
        :type counts: MapCounts
        """

        self._counts = counts

    @property
    def created_at(self):
        """Gets the created_at of this MapWithAuthToken.


        :return: The created_at of this MapWithAuthToken.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MapWithAuthToken.


        :param created_at: The created_at of this MapWithAuthToken.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this MapWithAuthToken.


        :return: The description of this MapWithAuthToken.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MapWithAuthToken.


        :param description: The description of this MapWithAuthToken.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this MapWithAuthToken.


        :return: The id of this MapWithAuthToken.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MapWithAuthToken.


        :param id: The id of this MapWithAuthToken.
        :type id: int
        """

        self._id = id

    @property
    def owner_id(self):
        """Gets the owner_id of this MapWithAuthToken.


        :return: The owner_id of this MapWithAuthToken.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this MapWithAuthToken.


        :param owner_id: The owner_id of this MapWithAuthToken.
        :type owner_id: int
        """

        self._owner_id = owner_id

    @property
    def picture_url(self):
        """Gets the picture_url of this MapWithAuthToken.


        :return: The picture_url of this MapWithAuthToken.
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this MapWithAuthToken.


        :param picture_url: The picture_url of this MapWithAuthToken.
        :type picture_url: str
        """

        self._picture_url = picture_url

    @property
    def title(self):
        """Gets the title of this MapWithAuthToken.


        :return: The title of this MapWithAuthToken.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MapWithAuthToken.


        :param title: The title of this MapWithAuthToken.
        :type title: str
        """

        self._title = title

    @property
    def token(self):
        """Gets the token of this MapWithAuthToken.


        :return: The token of this MapWithAuthToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this MapWithAuthToken.


        :param token: The token of this MapWithAuthToken.
        :type token: str
        """

        self._token = token

    @property
    def updated_at(self):
        """Gets the updated_at of this MapWithAuthToken.


        :return: The updated_at of this MapWithAuthToken.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MapWithAuthToken.


        :param updated_at: The updated_at of this MapWithAuthToken.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def visibility(self):
        """Gets the visibility of this MapWithAuthToken.


        :return: The visibility of this MapWithAuthToken.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this MapWithAuthToken.


        :param visibility: The visibility of this MapWithAuthToken.
        :type visibility: str
        """
        allowed_values = ["public", "link", "private"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
