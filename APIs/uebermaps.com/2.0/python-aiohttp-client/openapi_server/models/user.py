# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_counts import UserCounts
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about: str=None, counts: UserCounts=None, header_picture: str=None, id: int=None, location: str=None, name: str=None, picture_url: str=None, screen_name: str=None, url: str=None):
        """User - a model defined in OpenAPI

        :param about: The about of this User.
        :param counts: The counts of this User.
        :param header_picture: The header_picture of this User.
        :param id: The id of this User.
        :param location: The location of this User.
        :param name: The name of this User.
        :param picture_url: The picture_url of this User.
        :param screen_name: The screen_name of this User.
        :param url: The url of this User.
        """
        self.openapi_types = {
            'about': str,
            'counts': UserCounts,
            'header_picture': str,
            'id': int,
            'location': str,
            'name': str,
            'picture_url': str,
            'screen_name': str,
            'url': str
        }

        self.attribute_map = {
            'about': 'about',
            'counts': 'counts',
            'header_picture': 'header_picture',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'picture_url': 'picture_url',
            'screen_name': 'screen_name',
            'url': 'url'
        }

        self._about = about
        self._counts = counts
        self._header_picture = header_picture
        self._id = id
        self._location = location
        self._name = name
        self._picture_url = picture_url
        self._screen_name = screen_name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about(self):
        """Gets the about of this User.


        :return: The about of this User.
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this User.


        :param about: The about of this User.
        :type about: str
        """

        self._about = about

    @property
    def counts(self):
        """Gets the counts of this User.


        :return: The counts of this User.
        :rtype: UserCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this User.


        :param counts: The counts of this User.
        :type counts: UserCounts
        """

        self._counts = counts

    @property
    def header_picture(self):
        """Gets the header_picture of this User.


        :return: The header_picture of this User.
        :rtype: str
        """
        return self._header_picture

    @header_picture.setter
    def header_picture(self, header_picture):
        """Sets the header_picture of this User.


        :param header_picture: The header_picture of this User.
        :type header_picture: str
        """

        self._header_picture = header_picture

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this User.


        :return: The location of this User.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this User.


        :param location: The location of this User.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def picture_url(self):
        """Gets the picture_url of this User.


        :return: The picture_url of this User.
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this User.


        :param picture_url: The picture_url of this User.
        :type picture_url: str
        """

        self._picture_url = picture_url

    @property
    def screen_name(self):
        """Gets the screen_name of this User.


        :return: The screen_name of this User.
        :rtype: str
        """
        return self._screen_name

    @screen_name.setter
    def screen_name(self, screen_name):
        """Sets the screen_name of this User.


        :param screen_name: The screen_name of this User.
        :type screen_name: str
        """

        self._screen_name = screen_name

    @property
    def url(self):
        """Gets the url of this User.


        :return: The url of this User.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this User.


        :param url: The url of this User.
        :type url: str
        """

        self._url = url
