# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.map_settings import MapSettings
from openapi_server import util


class MapEditable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, map_settings: MapSettings=None, picture: str=None, title: str=None, visibility: str=None):
        """MapEditable - a model defined in OpenAPI

        :param description: The description of this MapEditable.
        :param map_settings: The map_settings of this MapEditable.
        :param picture: The picture of this MapEditable.
        :param title: The title of this MapEditable.
        :param visibility: The visibility of this MapEditable.
        """
        self.openapi_types = {
            'description': str,
            'map_settings': MapSettings,
            'picture': str,
            'title': str,
            'visibility': str
        }

        self.attribute_map = {
            'description': 'description',
            'map_settings': 'map_settings',
            'picture': 'picture',
            'title': 'title',
            'visibility': 'visibility'
        }

        self._description = description
        self._map_settings = map_settings
        self._picture = picture
        self._title = title
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MapEditable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MapEditable of this MapEditable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this MapEditable.


        :return: The description of this MapEditable.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MapEditable.


        :param description: The description of this MapEditable.
        :type description: str
        """

        self._description = description

    @property
    def map_settings(self):
        """Gets the map_settings of this MapEditable.


        :return: The map_settings of this MapEditable.
        :rtype: MapSettings
        """
        return self._map_settings

    @map_settings.setter
    def map_settings(self, map_settings):
        """Sets the map_settings of this MapEditable.


        :param map_settings: The map_settings of this MapEditable.
        :type map_settings: MapSettings
        """

        self._map_settings = map_settings

    @property
    def picture(self):
        """Gets the picture of this MapEditable.


        :return: The picture of this MapEditable.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this MapEditable.


        :param picture: The picture of this MapEditable.
        :type picture: str
        """

        self._picture = picture

    @property
    def title(self):
        """Gets the title of this MapEditable.


        :return: The title of this MapEditable.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MapEditable.


        :param title: The title of this MapEditable.
        :type title: str
        """

        self._title = title

    @property
    def visibility(self):
        """Gets the visibility of this MapEditable.


        :return: The visibility of this MapEditable.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this MapEditable.


        :param visibility: The visibility of this MapEditable.
        :type visibility: str
        """
        allowed_values = ["public", "link", "private"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
