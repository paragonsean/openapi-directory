# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.map import Map
from openapi_server.models.user import User
from openapi_server import util


class Collaborator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, group: str=None, id: int=None, is_admin: bool=None, map: Map=None, map_id: int=None, updated_at: datetime=None, user: User=None, user_id: int=None):
        """Collaborator - a model defined in OpenAPI

        :param created_at: The created_at of this Collaborator.
        :param group: The group of this Collaborator.
        :param id: The id of this Collaborator.
        :param is_admin: The is_admin of this Collaborator.
        :param map: The map of this Collaborator.
        :param map_id: The map_id of this Collaborator.
        :param updated_at: The updated_at of this Collaborator.
        :param user: The user of this Collaborator.
        :param user_id: The user_id of this Collaborator.
        """
        self.openapi_types = {
            'created_at': datetime,
            'group': str,
            'id': int,
            'is_admin': bool,
            'map': Map,
            'map_id': int,
            'updated_at': datetime,
            'user': User,
            'user_id': int
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'group': 'group',
            'id': 'id',
            'is_admin': 'is_admin',
            'map': 'map',
            'map_id': 'map_id',
            'updated_at': 'updated_at',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._created_at = created_at
        self._group = group
        self._id = id
        self._is_admin = is_admin
        self._map = map
        self._map_id = map_id
        self._updated_at = updated_at
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Collaborator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collaborator of this Collaborator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Collaborator.


        :return: The created_at of this Collaborator.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Collaborator.


        :param created_at: The created_at of this Collaborator.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def group(self):
        """Gets the group of this Collaborator.


        :return: The group of this Collaborator.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Collaborator.


        :param group: The group of this Collaborator.
        :type group: str
        """
        allowed_values = ["admin", "editor"]  # noqa: E501
        if group not in allowed_values:
            raise ValueError(
                "Invalid value for `group` ({0}), must be one of {1}"
                .format(group, allowed_values)
            )

        self._group = group

    @property
    def id(self):
        """Gets the id of this Collaborator.


        :return: The id of this Collaborator.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Collaborator.


        :param id: The id of this Collaborator.
        :type id: int
        """

        self._id = id

    @property
    def is_admin(self):
        """Gets the is_admin of this Collaborator.


        :return: The is_admin of this Collaborator.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this Collaborator.


        :param is_admin: The is_admin of this Collaborator.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def map(self):
        """Gets the map of this Collaborator.


        :return: The map of this Collaborator.
        :rtype: Map
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this Collaborator.


        :param map: The map of this Collaborator.
        :type map: Map
        """

        self._map = map

    @property
    def map_id(self):
        """Gets the map_id of this Collaborator.


        :return: The map_id of this Collaborator.
        :rtype: int
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this Collaborator.


        :param map_id: The map_id of this Collaborator.
        :type map_id: int
        """

        self._map_id = map_id

    @property
    def updated_at(self):
        """Gets the updated_at of this Collaborator.


        :return: The updated_at of this Collaborator.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Collaborator.


        :param updated_at: The updated_at of this Collaborator.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Collaborator.


        :return: The user of this Collaborator.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Collaborator.


        :param user: The user of this Collaborator.
        :type user: User
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this Collaborator.


        :return: The user_id of this Collaborator.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Collaborator.


        :param user_id: The user_id of this Collaborator.
        :type user_id: int
        """

        self._user_id = user_id
