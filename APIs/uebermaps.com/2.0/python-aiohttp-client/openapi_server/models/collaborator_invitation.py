# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.map import Map
from openapi_server.models.user import User
from openapi_server import util


class CollaboratorInvitation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted: bool=None, created_at: datetime=None, email: str=None, group: str=None, id: int=None, invited_by_user: User=None, map: Map=None, sent: bool=None, updated_at: datetime=None, user: User=None):
        """CollaboratorInvitation - a model defined in OpenAPI

        :param accepted: The accepted of this CollaboratorInvitation.
        :param created_at: The created_at of this CollaboratorInvitation.
        :param email: The email of this CollaboratorInvitation.
        :param group: The group of this CollaboratorInvitation.
        :param id: The id of this CollaboratorInvitation.
        :param invited_by_user: The invited_by_user of this CollaboratorInvitation.
        :param map: The map of this CollaboratorInvitation.
        :param sent: The sent of this CollaboratorInvitation.
        :param updated_at: The updated_at of this CollaboratorInvitation.
        :param user: The user of this CollaboratorInvitation.
        """
        self.openapi_types = {
            'accepted': bool,
            'created_at': datetime,
            'email': str,
            'group': str,
            'id': int,
            'invited_by_user': User,
            'map': Map,
            'sent': bool,
            'updated_at': datetime,
            'user': User
        }

        self.attribute_map = {
            'accepted': 'accepted',
            'created_at': 'created_at',
            'email': 'email',
            'group': 'group',
            'id': 'id',
            'invited_by_user': 'invited_by_user',
            'map': 'map',
            'sent': 'sent',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._accepted = accepted
        self._created_at = created_at
        self._email = email
        self._group = group
        self._id = id
        self._invited_by_user = invited_by_user
        self._map = map
        self._sent = sent
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollaboratorInvitation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollaboratorInvitation of this CollaboratorInvitation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted(self):
        """Gets the accepted of this CollaboratorInvitation.


        :return: The accepted of this CollaboratorInvitation.
        :rtype: bool
        """
        return self._accepted

    @accepted.setter
    def accepted(self, accepted):
        """Sets the accepted of this CollaboratorInvitation.


        :param accepted: The accepted of this CollaboratorInvitation.
        :type accepted: bool
        """

        self._accepted = accepted

    @property
    def created_at(self):
        """Gets the created_at of this CollaboratorInvitation.


        :return: The created_at of this CollaboratorInvitation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CollaboratorInvitation.


        :param created_at: The created_at of this CollaboratorInvitation.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this CollaboratorInvitation.


        :return: The email of this CollaboratorInvitation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CollaboratorInvitation.


        :param email: The email of this CollaboratorInvitation.
        :type email: str
        """

        self._email = email

    @property
    def group(self):
        """Gets the group of this CollaboratorInvitation.


        :return: The group of this CollaboratorInvitation.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this CollaboratorInvitation.


        :param group: The group of this CollaboratorInvitation.
        :type group: str
        """
        allowed_values = ["admin", "editor"]  # noqa: E501
        if group not in allowed_values:
            raise ValueError(
                "Invalid value for `group` ({0}), must be one of {1}"
                .format(group, allowed_values)
            )

        self._group = group

    @property
    def id(self):
        """Gets the id of this CollaboratorInvitation.


        :return: The id of this CollaboratorInvitation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollaboratorInvitation.


        :param id: The id of this CollaboratorInvitation.
        :type id: int
        """

        self._id = id

    @property
    def invited_by_user(self):
        """Gets the invited_by_user of this CollaboratorInvitation.


        :return: The invited_by_user of this CollaboratorInvitation.
        :rtype: User
        """
        return self._invited_by_user

    @invited_by_user.setter
    def invited_by_user(self, invited_by_user):
        """Sets the invited_by_user of this CollaboratorInvitation.


        :param invited_by_user: The invited_by_user of this CollaboratorInvitation.
        :type invited_by_user: User
        """

        self._invited_by_user = invited_by_user

    @property
    def map(self):
        """Gets the map of this CollaboratorInvitation.


        :return: The map of this CollaboratorInvitation.
        :rtype: Map
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this CollaboratorInvitation.


        :param map: The map of this CollaboratorInvitation.
        :type map: Map
        """

        self._map = map

    @property
    def sent(self):
        """Gets the sent of this CollaboratorInvitation.


        :return: The sent of this CollaboratorInvitation.
        :rtype: bool
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this CollaboratorInvitation.


        :param sent: The sent of this CollaboratorInvitation.
        :type sent: bool
        """

        self._sent = sent

    @property
    def updated_at(self):
        """Gets the updated_at of this CollaboratorInvitation.


        :return: The updated_at of this CollaboratorInvitation.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CollaboratorInvitation.


        :param updated_at: The updated_at of this CollaboratorInvitation.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this CollaboratorInvitation.


        :return: The user of this CollaboratorInvitation.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CollaboratorInvitation.


        :param user: The user of this CollaboratorInvitation.
        :type user: User
        """

        self._user = user
