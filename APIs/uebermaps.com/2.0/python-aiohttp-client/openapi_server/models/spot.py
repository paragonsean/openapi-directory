# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.spot_counts import SpotCounts
from openapi_server.models.user import User
from openapi_server import util


class Spot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts: SpotCounts=None, created_at: datetime=None, description: str=None, id: int=None, lat: float=None, lon: float=None, map_id: int=None, picture_url: str=None, status: str=None, time_zone: str=None, title: str=None, updated_at: datetime=None, user: User=None):
        """Spot - a model defined in OpenAPI

        :param counts: The counts of this Spot.
        :param created_at: The created_at of this Spot.
        :param description: The description of this Spot.
        :param id: The id of this Spot.
        :param lat: The lat of this Spot.
        :param lon: The lon of this Spot.
        :param map_id: The map_id of this Spot.
        :param picture_url: The picture_url of this Spot.
        :param status: The status of this Spot.
        :param time_zone: The time_zone of this Spot.
        :param title: The title of this Spot.
        :param updated_at: The updated_at of this Spot.
        :param user: The user of this Spot.
        """
        self.openapi_types = {
            'counts': SpotCounts,
            'created_at': datetime,
            'description': str,
            'id': int,
            'lat': float,
            'lon': float,
            'map_id': int,
            'picture_url': str,
            'status': str,
            'time_zone': str,
            'title': str,
            'updated_at': datetime,
            'user': User
        }

        self.attribute_map = {
            'counts': 'counts',
            'created_at': 'created_at',
            'description': 'description',
            'id': 'id',
            'lat': 'lat',
            'lon': 'lon',
            'map_id': 'map_id',
            'picture_url': 'picture_url',
            'status': 'status',
            'time_zone': 'time_zone',
            'title': 'title',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._counts = counts
        self._created_at = created_at
        self._description = description
        self._id = id
        self._lat = lat
        self._lon = lon
        self._map_id = map_id
        self._picture_url = picture_url
        self._status = status
        self._time_zone = time_zone
        self._title = title
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Spot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Spot of this Spot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts(self):
        """Gets the counts of this Spot.


        :return: The counts of this Spot.
        :rtype: SpotCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this Spot.


        :param counts: The counts of this Spot.
        :type counts: SpotCounts
        """

        self._counts = counts

    @property
    def created_at(self):
        """Gets the created_at of this Spot.


        :return: The created_at of this Spot.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Spot.


        :param created_at: The created_at of this Spot.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Spot.


        :return: The description of this Spot.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Spot.


        :param description: The description of this Spot.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Spot.


        :return: The id of this Spot.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Spot.


        :param id: The id of this Spot.
        :type id: int
        """

        self._id = id

    @property
    def lat(self):
        """Gets the lat of this Spot.


        :return: The lat of this Spot.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Spot.


        :param lat: The lat of this Spot.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Spot.


        :return: The lon of this Spot.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Spot.


        :param lon: The lon of this Spot.
        :type lon: float
        """

        self._lon = lon

    @property
    def map_id(self):
        """Gets the map_id of this Spot.


        :return: The map_id of this Spot.
        :rtype: int
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this Spot.


        :param map_id: The map_id of this Spot.
        :type map_id: int
        """

        self._map_id = map_id

    @property
    def picture_url(self):
        """Gets the picture_url of this Spot.


        :return: The picture_url of this Spot.
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this Spot.


        :param picture_url: The picture_url of this Spot.
        :type picture_url: str
        """

        self._picture_url = picture_url

    @property
    def status(self):
        """Gets the status of this Spot.


        :return: The status of this Spot.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Spot.


        :param status: The status of this Spot.
        :type status: str
        """
        allowed_values = ["approved", "unapproved"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_zone(self):
        """Gets the time_zone of this Spot.


        :return: The time_zone of this Spot.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Spot.


        :param time_zone: The time_zone of this Spot.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def title(self):
        """Gets the title of this Spot.


        :return: The title of this Spot.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Spot.


        :param title: The title of this Spot.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Spot.


        :return: The updated_at of this Spot.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Spot.


        :param updated_at: The updated_at of this Spot.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Spot.


        :return: The user of this Spot.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Spot.


        :param user: The user of this Spot.
        :type user: User
        """

        self._user = user
