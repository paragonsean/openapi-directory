# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_counts import EventCounts
from openapi_server.models.spot import Spot
from openapi_server.models.user import User
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts: EventCounts=None, created_at: datetime=None, description: str=None, ends_at: datetime=None, id: int=None, lat: float=None, lon: float=None, owner_id: int=None, picture_url: str=None, spot: Spot=None, starts_at: datetime=None, time_zone: str=None, title: str=None, updated_at: datetime=None, user: User=None):
        """Event - a model defined in OpenAPI

        :param counts: The counts of this Event.
        :param created_at: The created_at of this Event.
        :param description: The description of this Event.
        :param ends_at: The ends_at of this Event.
        :param id: The id of this Event.
        :param lat: The lat of this Event.
        :param lon: The lon of this Event.
        :param owner_id: The owner_id of this Event.
        :param picture_url: The picture_url of this Event.
        :param spot: The spot of this Event.
        :param starts_at: The starts_at of this Event.
        :param time_zone: The time_zone of this Event.
        :param title: The title of this Event.
        :param updated_at: The updated_at of this Event.
        :param user: The user of this Event.
        """
        self.openapi_types = {
            'counts': EventCounts,
            'created_at': datetime,
            'description': str,
            'ends_at': datetime,
            'id': int,
            'lat': float,
            'lon': float,
            'owner_id': int,
            'picture_url': str,
            'spot': Spot,
            'starts_at': datetime,
            'time_zone': str,
            'title': str,
            'updated_at': datetime,
            'user': User
        }

        self.attribute_map = {
            'counts': 'counts',
            'created_at': 'created_at',
            'description': 'description',
            'ends_at': 'ends_at',
            'id': 'id',
            'lat': 'lat',
            'lon': 'lon',
            'owner_id': 'owner_id',
            'picture_url': 'picture_url',
            'spot': 'spot',
            'starts_at': 'starts_at',
            'time_zone': 'time_zone',
            'title': 'title',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._counts = counts
        self._created_at = created_at
        self._description = description
        self._ends_at = ends_at
        self._id = id
        self._lat = lat
        self._lon = lon
        self._owner_id = owner_id
        self._picture_url = picture_url
        self._spot = spot
        self._starts_at = starts_at
        self._time_zone = time_zone
        self._title = title
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts(self):
        """Gets the counts of this Event.


        :return: The counts of this Event.
        :rtype: EventCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this Event.


        :param counts: The counts of this Event.
        :type counts: EventCounts
        """

        self._counts = counts

    @property
    def created_at(self):
        """Gets the created_at of this Event.


        :return: The created_at of this Event.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.


        :param created_at: The created_at of this Event.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Event.


        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.


        :param description: The description of this Event.
        :type description: str
        """

        self._description = description

    @property
    def ends_at(self):
        """Gets the ends_at of this Event.


        :return: The ends_at of this Event.
        :rtype: datetime
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this Event.


        :param ends_at: The ends_at of this Event.
        :type ends_at: datetime
        """

        self._ends_at = ends_at

    @property
    def id(self):
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: int
        """

        self._id = id

    @property
    def lat(self):
        """Gets the lat of this Event.


        :return: The lat of this Event.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Event.


        :param lat: The lat of this Event.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Event.


        :return: The lon of this Event.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Event.


        :param lon: The lon of this Event.
        :type lon: float
        """

        self._lon = lon

    @property
    def owner_id(self):
        """Gets the owner_id of this Event.


        :return: The owner_id of this Event.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Event.


        :param owner_id: The owner_id of this Event.
        :type owner_id: int
        """

        self._owner_id = owner_id

    @property
    def picture_url(self):
        """Gets the picture_url of this Event.


        :return: The picture_url of this Event.
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this Event.


        :param picture_url: The picture_url of this Event.
        :type picture_url: str
        """

        self._picture_url = picture_url

    @property
    def spot(self):
        """Gets the spot of this Event.


        :return: The spot of this Event.
        :rtype: Spot
        """
        return self._spot

    @spot.setter
    def spot(self, spot):
        """Sets the spot of this Event.


        :param spot: The spot of this Event.
        :type spot: Spot
        """

        self._spot = spot

    @property
    def starts_at(self):
        """Gets the starts_at of this Event.


        :return: The starts_at of this Event.
        :rtype: datetime
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this Event.


        :param starts_at: The starts_at of this Event.
        :type starts_at: datetime
        """

        self._starts_at = starts_at

    @property
    def time_zone(self):
        """Gets the time_zone of this Event.


        :return: The time_zone of this Event.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Event.


        :param time_zone: The time_zone of this Event.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def title(self):
        """Gets the title of this Event.


        :return: The title of this Event.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Event.


        :param title: The title of this Event.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Event.


        :return: The updated_at of this Event.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Event.


        :param updated_at: The updated_at of this Event.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Event.


        :return: The user of this Event.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Event.


        :param user: The user of this Event.
        :type user: User
        """

        self._user = user
