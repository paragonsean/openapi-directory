/*
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Spot;
import org.openapitools.client.model.SpotEditable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SpotsApi
 */
@Disabled
public class SpotsApiTest {

    private final SpotsApi api = new SpotsApi();

    /**
     * List spots for a given map
     *
     * List spots for a given map.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mapsIdSpotsGetTest() throws ApiException {
        Integer id = null;
        String order = null;
        List<Spot> response = api.mapsIdSpotsGet(id, order);
        // TODO: test validations
    }

    /**
     * Create spot
     *
     * Create spot. Wrap parameters in [spot]. To add a spot picture pass a base64 encoded string to [spot][picture].
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mapsIdSpotsPostTest() throws ApiException {
        Integer id = null;
        SpotEditable spot = null;
        Spot response = api.mapsIdSpotsPost(id, spot);
        // TODO: test validations
    }

    /**
     * Get spot
     *
     * Get basic information about a spot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mapsMapIdSpotsIdGetTest() throws ApiException {
        Integer id = null;
        Integer mapId = null;
        Spot response = api.mapsMapIdSpotsIdGet(id, mapId);
        // TODO: test validations
    }

    /**
     * List your own spots
     *
     * List your own spots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spotsGetTest() throws ApiException {
        String order = null;
        List<Spot> response = api.spotsGet(order);
        // TODO: test validations
    }

    /**
     * Delete spot
     *
     * Delete spot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spotsIdDeleteTest() throws ApiException {
        Integer id = null;
        Spot response = api.spotsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Update spot
     *
     * Update spot. Wrap parameters in [spot]. To update the spot picture pass a base64 encoded string to [spot][picture].
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spotsIdPatchTest() throws ApiException {
        Integer id = null;
        SpotEditable spot = null;
        Spot response = api.spotsIdPatch(id, spot);
        // TODO: test validations
    }

}
