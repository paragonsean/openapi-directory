/*
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.EventEditable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Disabled
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    /**
     * List your own events
     *
     * List your own events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsGetTest() throws ApiException {
        String timeframeStart = null;
        String timeframeEnd = null;
        String bounds = null;
        List<Event> response = api.eventsGet(timeframeStart, timeframeEnd, bounds);
        // TODO: test validations
    }

    /**
     * Delete event
     *
     * Delete event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsIdDeleteTest() throws ApiException {
        Integer id = null;
        Event response = api.eventsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get event
     *
     * Get basic information about an event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsIdGetTest() throws ApiException {
        Integer id = null;
        Event response = api.eventsIdGet(id);
        // TODO: test validations
    }

    /**
     * Update event
     *
     * Update event. Wrap event parameters in [event].
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsIdPatchTest() throws ApiException {
        Integer id = null;
        EventEditable event = null;
        Map response = api.eventsIdPatch(id, event);
        // TODO: test validations
    }

    /**
     * List events for a given spot
     *
     * List maps for a given spot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spotsIdEventsGetTest() throws ApiException {
        Integer id = null;
        String timeframeStart = null;
        String timeframeEnd = null;
        String bounds = null;
        List<Event> response = api.spotsIdEventsGet(id, timeframeStart, timeframeEnd, bounds);
        // TODO: test validations
    }

    /**
     * Create event
     *
     * Create event. Wrap map parameters in [event].
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spotsIdEventsPostTest() throws ApiException {
        Integer id = null;
        EventEditable event = null;
        Event response = api.spotsIdEventsPost(id, event);
        // TODO: test validations
    }

}
