/*
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CommentEditable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommentsApi
 */
@Disabled
public class CommentsApiTest {

    private final CommentsApi api = new CommentsApi();

    /**
     * Delete comment
     *
     * Delete comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commentsIdDeleteTest() throws ApiException {
        Integer id = null;
        Comment response = api.commentsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Update comment
     *
     * Update comment. Wrap comment parameters in [comment].
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commentsIdPatchTest() throws ApiException {
        Integer id = null;
        CommentEditable comment = null;
        Comment response = api.commentsIdPatch(id, comment);
        // TODO: test validations
    }

    /**
     * List comments for a given map
     *
     * List comments for a given map.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mapsIdCommentsGetTest() throws ApiException {
        Integer id = null;
        List<Comment> response = api.mapsIdCommentsGet(id);
        // TODO: test validations
    }

    /**
     * Create map comment
     *
     * Create map comment. Wrap comment parameters in [comment].
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mapsIdCommentsPostTest() throws ApiException {
        Integer id = null;
        CommentEditable comment = null;
        Comment response = api.mapsIdCommentsPost(id, comment);
        // TODO: test validations
    }

    /**
     * List comments for a given spot
     *
     * List comments for a given spot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spotsIdCommentsGetTest() throws ApiException {
        Integer id = null;
        List<Comment> response = api.spotsIdCommentsGet(id);
        // TODO: test validations
    }

    /**
     * Create spot comment
     *
     * Create spot comment. Wrap comment parameters in [comment].
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spotsIdCommentsPostTest() throws ApiException {
        Integer id = null;
        CommentEditable comment = null;
        Comment response = api.spotsIdCommentsPost(id, comment);
        // TODO: test validations
    }

}
