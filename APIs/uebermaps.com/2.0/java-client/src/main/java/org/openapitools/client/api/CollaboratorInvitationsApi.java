/*
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CollaboratorInvitation;
import org.openapitools.client.model.CollaboratorInvitationCreate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CollaboratorInvitationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CollaboratorInvitationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CollaboratorInvitationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for collaboratorInvitationsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of collaborator invitations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collaboratorInvitationsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaborator_invitations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collaboratorInvitationsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return collaboratorInvitationsGetCall(_callback);

    }

    /**
     * List your collaborator invitations
     * List your collaborator invitations.
     * @return List&lt;CollaboratorInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of collaborator invitations. </td><td>  -  </td></tr>
     </table>
     */
    public List<CollaboratorInvitation> collaboratorInvitationsGet() throws ApiException {
        ApiResponse<List<CollaboratorInvitation>> localVarResp = collaboratorInvitationsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List your collaborator invitations
     * List your collaborator invitations.
     * @return ApiResponse&lt;List&lt;CollaboratorInvitation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of collaborator invitations. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CollaboratorInvitation>> collaboratorInvitationsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = collaboratorInvitationsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CollaboratorInvitation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List your collaborator invitations (asynchronously)
     * List your collaborator invitations.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of collaborator invitations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collaboratorInvitationsGetAsync(final ApiCallback<List<CollaboratorInvitation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = collaboratorInvitationsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CollaboratorInvitation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collaboratorInvitationsIdDelete
     * @param id Collaborator invitation id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted collaborator invitation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collaboratorInvitationsIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaborator_invitations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collaboratorInvitationsIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling collaboratorInvitationsIdDelete(Async)");
        }

        return collaboratorInvitationsIdDeleteCall(id, _callback);

    }

    /**
     * Delete collaborator invitation
     * Delete collaborator invitation.
     * @param id Collaborator invitation id (required)
     * @return CollaboratorInvitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted collaborator invitation. </td><td>  -  </td></tr>
     </table>
     */
    public CollaboratorInvitation collaboratorInvitationsIdDelete(Integer id) throws ApiException {
        ApiResponse<CollaboratorInvitation> localVarResp = collaboratorInvitationsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete collaborator invitation
     * Delete collaborator invitation.
     * @param id Collaborator invitation id (required)
     * @return ApiResponse&lt;CollaboratorInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted collaborator invitation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollaboratorInvitation> collaboratorInvitationsIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = collaboratorInvitationsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CollaboratorInvitation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete collaborator invitation (asynchronously)
     * Delete collaborator invitation.
     * @param id Collaborator invitation id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted collaborator invitation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collaboratorInvitationsIdDeleteAsync(Integer id, final ApiCallback<CollaboratorInvitation> _callback) throws ApiException {

        okhttp3.Call localVarCall = collaboratorInvitationsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CollaboratorInvitation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collaboratorInvitationsIdGet
     * @param id Collaborator invitation id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collaboratorInvitationsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaborator_invitations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collaboratorInvitationsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling collaboratorInvitationsIdGet(Async)");
        }

        return collaboratorInvitationsIdGetCall(id, _callback);

    }

    /**
     * Show collaborator invitation
     * Show collaborator invitation
     * @param id Collaborator invitation id (required)
     * @return CollaboratorInvitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public CollaboratorInvitation collaboratorInvitationsIdGet(Integer id) throws ApiException {
        ApiResponse<CollaboratorInvitation> localVarResp = collaboratorInvitationsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Show collaborator invitation
     * Show collaborator invitation
     * @param id Collaborator invitation id (required)
     * @return ApiResponse&lt;CollaboratorInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollaboratorInvitation> collaboratorInvitationsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = collaboratorInvitationsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CollaboratorInvitation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show collaborator invitation (asynchronously)
     * Show collaborator invitation
     * @param id Collaborator invitation id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collaboratorInvitationsIdGetAsync(Integer id, final ApiCallback<CollaboratorInvitation> _callback) throws ApiException {

        okhttp3.Call localVarCall = collaboratorInvitationsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CollaboratorInvitation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collaboratorInvitationsIdPatch
     * @param id Collaborator invitation id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collaboratorInvitationsIdPatchCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaborator_invitations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collaboratorInvitationsIdPatchValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling collaboratorInvitationsIdPatch(Async)");
        }

        return collaboratorInvitationsIdPatchCall(id, _callback);

    }

    /**
     * Accept collaborator invitation.
     * Accept collaborator invitation.
     * @param id Collaborator invitation id (required)
     * @return CollaboratorInvitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public CollaboratorInvitation collaboratorInvitationsIdPatch(Integer id) throws ApiException {
        ApiResponse<CollaboratorInvitation> localVarResp = collaboratorInvitationsIdPatchWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Accept collaborator invitation.
     * Accept collaborator invitation.
     * @param id Collaborator invitation id (required)
     * @return ApiResponse&lt;CollaboratorInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollaboratorInvitation> collaboratorInvitationsIdPatchWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = collaboratorInvitationsIdPatchValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CollaboratorInvitation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accept collaborator invitation. (asynchronously)
     * Accept collaborator invitation.
     * @param id Collaborator invitation id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collaboratorInvitationsIdPatchAsync(Integer id, final ApiCallback<CollaboratorInvitation> _callback) throws ApiException {

        okhttp3.Call localVarCall = collaboratorInvitationsIdPatchValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CollaboratorInvitation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collaboratorInvitationsPost
     * @param body Supply map_id and either a comma separated list of user_ids or emails. Optionally you can provide a &#39;is_admin&#39; parameter with &#39;true&#39; or &#39;false&#39; to give the invited users admin privileges. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collaboratorInvitationsPostCall(CollaboratorInvitationCreate body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/collaborator_invitations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collaboratorInvitationsPostValidateBeforeCall(CollaboratorInvitationCreate body, final ApiCallback _callback) throws ApiException {
        return collaboratorInvitationsPostCall(body, _callback);

    }

    /**
     * Invite user to collaborate on map
     * Invite user to collaborate on map.
     * @param body Supply map_id and either a comma separated list of user_ids or emails. Optionally you can provide a &#39;is_admin&#39; parameter with &#39;true&#39; or &#39;false&#39; to give the invited users admin privileges. (optional)
     * @return CollaboratorInvitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public CollaboratorInvitation collaboratorInvitationsPost(CollaboratorInvitationCreate body) throws ApiException {
        ApiResponse<CollaboratorInvitation> localVarResp = collaboratorInvitationsPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Invite user to collaborate on map
     * Invite user to collaborate on map.
     * @param body Supply map_id and either a comma separated list of user_ids or emails. Optionally you can provide a &#39;is_admin&#39; parameter with &#39;true&#39; or &#39;false&#39; to give the invited users admin privileges. (optional)
     * @return ApiResponse&lt;CollaboratorInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollaboratorInvitation> collaboratorInvitationsPostWithHttpInfo(CollaboratorInvitationCreate body) throws ApiException {
        okhttp3.Call localVarCall = collaboratorInvitationsPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CollaboratorInvitation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invite user to collaborate on map (asynchronously)
     * Invite user to collaborate on map.
     * @param body Supply map_id and either a comma separated list of user_ids or emails. Optionally you can provide a &#39;is_admin&#39; parameter with &#39;true&#39; or &#39;false&#39; to give the invited users admin privileges. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains collaborator invitation data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collaboratorInvitationsPostAsync(CollaboratorInvitationCreate body, final ApiCallback<CollaboratorInvitation> _callback) throws ApiException {

        okhttp3.Call localVarCall = collaboratorInvitationsPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CollaboratorInvitation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
