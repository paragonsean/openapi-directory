/*
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Respot;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RespotsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RespotsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RespotsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mapsIdRespotsGet
     * @param id Map Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of respots. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdRespotsGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/maps/{id}/respots"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapsIdRespotsGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mapsIdRespotsGet(Async)");
        }

        return mapsIdRespotsGetCall(id, _callback);

    }

    /**
     * List respots of a map
     * List respots of a map.
     * @param id Map Id (required)
     * @return List&lt;Respot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of respots. </td><td>  -  </td></tr>
     </table>
     */
    public List<Respot> mapsIdRespotsGet(Integer id) throws ApiException {
        ApiResponse<List<Respot>> localVarResp = mapsIdRespotsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * List respots of a map
     * List respots of a map.
     * @param id Map Id (required)
     * @return ApiResponse&lt;List&lt;Respot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of respots. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Respot>> mapsIdRespotsGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = mapsIdRespotsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Respot>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List respots of a map (asynchronously)
     * List respots of a map.
     * @param id Map Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of respots. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdRespotsGetAsync(Integer id, final ApiCallback<List<Respot>> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapsIdRespotsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Respot>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapsMapIdSpotsSpotIdRespotDelete
     * @param mapId Map Id (required)
     * @param spotId Spot Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted respot. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsMapIdSpotsSpotIdRespotDeleteCall(Integer mapId, Integer spotId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/maps/{map_id}/spots/{spot_id}/respot"
            .replace("{" + "map_id" + "}", localVarApiClient.escapeString(mapId.toString()))
            .replace("{" + "spot_id" + "}", localVarApiClient.escapeString(spotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapsMapIdSpotsSpotIdRespotDeleteValidateBeforeCall(Integer mapId, Integer spotId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mapId' is set
        if (mapId == null) {
            throw new ApiException("Missing the required parameter 'mapId' when calling mapsMapIdSpotsSpotIdRespotDelete(Async)");
        }

        // verify the required parameter 'spotId' is set
        if (spotId == null) {
            throw new ApiException("Missing the required parameter 'spotId' when calling mapsMapIdSpotsSpotIdRespotDelete(Async)");
        }

        return mapsMapIdSpotsSpotIdRespotDeleteCall(mapId, spotId, _callback);

    }

    /**
     * Delete respot from map by spot id
     * Delete respot from map by spot id.
     * @param mapId Map Id (required)
     * @param spotId Spot Id (required)
     * @return Respot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted respot. </td><td>  -  </td></tr>
     </table>
     */
    public Respot mapsMapIdSpotsSpotIdRespotDelete(Integer mapId, Integer spotId) throws ApiException {
        ApiResponse<Respot> localVarResp = mapsMapIdSpotsSpotIdRespotDeleteWithHttpInfo(mapId, spotId);
        return localVarResp.getData();
    }

    /**
     * Delete respot from map by spot id
     * Delete respot from map by spot id.
     * @param mapId Map Id (required)
     * @param spotId Spot Id (required)
     * @return ApiResponse&lt;Respot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted respot. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Respot> mapsMapIdSpotsSpotIdRespotDeleteWithHttpInfo(Integer mapId, Integer spotId) throws ApiException {
        okhttp3.Call localVarCall = mapsMapIdSpotsSpotIdRespotDeleteValidateBeforeCall(mapId, spotId, null);
        Type localVarReturnType = new TypeToken<Respot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete respot from map by spot id (asynchronously)
     * Delete respot from map by spot id.
     * @param mapId Map Id (required)
     * @param spotId Spot Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted respot. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsMapIdSpotsSpotIdRespotDeleteAsync(Integer mapId, Integer spotId, final ApiCallback<Respot> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapsMapIdSpotsSpotIdRespotDeleteValidateBeforeCall(mapId, spotId, _callback);
        Type localVarReturnType = new TypeToken<Respot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for respotMapsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respotMapsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/respot_maps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call respotMapsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return respotMapsGetCall(_callback);

    }

    /**
     * List maps that user can respot to
     * List maps that user can respot to.
     * @return List&lt;Map&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public List<Map> respotMapsGet() throws ApiException {
        ApiResponse<List<Map>> localVarResp = respotMapsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List maps that user can respot to
     * List maps that user can respot to.
     * @return ApiResponse&lt;List&lt;Map&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map>> respotMapsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = respotMapsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Map>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List maps that user can respot to (asynchronously)
     * List maps that user can respot to.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respotMapsGetAsync(final ApiCallback<List<Map>> _callback) throws ApiException {

        okhttp3.Call localVarCall = respotMapsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Map>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for respotsIdDelete
     * @param id Respot Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted respot. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respotsIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/respots/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call respotsIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling respotsIdDelete(Async)");
        }

        return respotsIdDeleteCall(id, _callback);

    }

    /**
     * Delete respot
     * Delete respot.
     * @param id Respot Id (required)
     * @return Respot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted respot. </td><td>  -  </td></tr>
     </table>
     */
    public Respot respotsIdDelete(Integer id) throws ApiException {
        ApiResponse<Respot> localVarResp = respotsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete respot
     * Delete respot.
     * @param id Respot Id (required)
     * @return ApiResponse&lt;Respot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted respot. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Respot> respotsIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = respotsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Respot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete respot (asynchronously)
     * Delete respot.
     * @param id Respot Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted respot. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respotsIdDeleteAsync(Integer id, final ApiCallback<Respot> _callback) throws ApiException {

        okhttp3.Call localVarCall = respotsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Respot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for respotsIdGet
     * @param id Id of respot (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains respot data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respotsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/respots/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call respotsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling respotsIdGet(Async)");
        }

        return respotsIdGetCall(id, _callback);

    }

    /**
     * Get respot
     * Get basic information about a respot
     * @param id Id of respot (required)
     * @return Respot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains respot data. </td><td>  -  </td></tr>
     </table>
     */
    public Respot respotsIdGet(Integer id) throws ApiException {
        ApiResponse<Respot> localVarResp = respotsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get respot
     * Get basic information about a respot
     * @param id Id of respot (required)
     * @return ApiResponse&lt;Respot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains respot data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Respot> respotsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = respotsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Respot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get respot (asynchronously)
     * Get basic information about a respot
     * @param id Id of respot (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains respot data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respotsIdGetAsync(Integer id, final ApiCallback<Respot> _callback) throws ApiException {

        okhttp3.Call localVarCall = respotsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Respot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spotsIdRespotsPost
     * @param id Spot Id (required)
     * @param mapId Map Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains respot data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsIdRespotsPostCall(Integer id, BigDecimal mapId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mapId;

        // create path and map variables
        String localVarPath = "/spots/{id}/respots"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spotsIdRespotsPostValidateBeforeCall(Integer id, BigDecimal mapId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spotsIdRespotsPost(Async)");
        }

        // verify the required parameter 'mapId' is set
        if (mapId == null) {
            throw new ApiException("Missing the required parameter 'mapId' when calling spotsIdRespotsPost(Async)");
        }

        return spotsIdRespotsPostCall(id, mapId, _callback);

    }

    /**
     * Respot a spot onto a map
     * Respot a spot onto a map.
     * @param id Spot Id (required)
     * @param mapId Map Id (required)
     * @return Respot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains respot data. </td><td>  -  </td></tr>
     </table>
     */
    public Respot spotsIdRespotsPost(Integer id, BigDecimal mapId) throws ApiException {
        ApiResponse<Respot> localVarResp = spotsIdRespotsPostWithHttpInfo(id, mapId);
        return localVarResp.getData();
    }

    /**
     * Respot a spot onto a map
     * Respot a spot onto a map.
     * @param id Spot Id (required)
     * @param mapId Map Id (required)
     * @return ApiResponse&lt;Respot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains respot data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Respot> spotsIdRespotsPostWithHttpInfo(Integer id, BigDecimal mapId) throws ApiException {
        okhttp3.Call localVarCall = spotsIdRespotsPostValidateBeforeCall(id, mapId, null);
        Type localVarReturnType = new TypeToken<Respot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Respot a spot onto a map (asynchronously)
     * Respot a spot onto a map.
     * @param id Spot Id (required)
     * @param mapId Map Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains respot data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsIdRespotsPostAsync(Integer id, BigDecimal mapId, final ApiCallback<Respot> _callback) throws ApiException {

        okhttp3.Call localVarCall = spotsIdRespotsPostValidateBeforeCall(id, mapId, _callback);
        Type localVarReturnType = new TypeToken<Respot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
