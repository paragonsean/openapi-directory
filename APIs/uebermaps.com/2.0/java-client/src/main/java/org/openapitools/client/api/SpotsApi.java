/*
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Spot;
import org.openapitools.client.model.SpotEditable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpotsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SpotsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpotsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mapsIdSpotsGet
     * @param id Id of map (required)
     * @param order Order of spots (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of spots. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdSpotsGetCall(Integer id, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/maps/{id}/spots"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapsIdSpotsGetValidateBeforeCall(Integer id, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mapsIdSpotsGet(Async)");
        }

        return mapsIdSpotsGetCall(id, order, _callback);

    }

    /**
     * List spots for a given map
     * List spots for a given map.
     * @param id Id of map (required)
     * @param order Order of spots (optional)
     * @return List&lt;Spot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of spots. </td><td>  -  </td></tr>
     </table>
     */
    public List<Spot> mapsIdSpotsGet(Integer id, String order) throws ApiException {
        ApiResponse<List<Spot>> localVarResp = mapsIdSpotsGetWithHttpInfo(id, order);
        return localVarResp.getData();
    }

    /**
     * List spots for a given map
     * List spots for a given map.
     * @param id Id of map (required)
     * @param order Order of spots (optional)
     * @return ApiResponse&lt;List&lt;Spot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of spots. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Spot>> mapsIdSpotsGetWithHttpInfo(Integer id, String order) throws ApiException {
        okhttp3.Call localVarCall = mapsIdSpotsGetValidateBeforeCall(id, order, null);
        Type localVarReturnType = new TypeToken<List<Spot>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List spots for a given map (asynchronously)
     * List spots for a given map.
     * @param id Id of map (required)
     * @param order Order of spots (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of spots. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdSpotsGetAsync(Integer id, String order, final ApiCallback<List<Spot>> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapsIdSpotsGetValidateBeforeCall(id, order, _callback);
        Type localVarReturnType = new TypeToken<List<Spot>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapsIdSpotsPost
     * @param id Id of map (required)
     * @param spot spot attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdSpotsPostCall(Integer id, SpotEditable spot, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = spot;

        // create path and map variables
        String localVarPath = "/maps/{id}/spots"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapsIdSpotsPostValidateBeforeCall(Integer id, SpotEditable spot, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mapsIdSpotsPost(Async)");
        }

        // verify the required parameter 'spot' is set
        if (spot == null) {
            throw new ApiException("Missing the required parameter 'spot' when calling mapsIdSpotsPost(Async)");
        }

        return mapsIdSpotsPostCall(id, spot, _callback);

    }

    /**
     * Create spot
     * Create spot. Wrap parameters in [spot]. To add a spot picture pass a base64 encoded string to [spot][picture].
     * @param id Id of map (required)
     * @param spot spot attributes (required)
     * @return Spot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public Spot mapsIdSpotsPost(Integer id, SpotEditable spot) throws ApiException {
        ApiResponse<Spot> localVarResp = mapsIdSpotsPostWithHttpInfo(id, spot);
        return localVarResp.getData();
    }

    /**
     * Create spot
     * Create spot. Wrap parameters in [spot]. To add a spot picture pass a base64 encoded string to [spot][picture].
     * @param id Id of map (required)
     * @param spot spot attributes (required)
     * @return ApiResponse&lt;Spot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Spot> mapsIdSpotsPostWithHttpInfo(Integer id, SpotEditable spot) throws ApiException {
        okhttp3.Call localVarCall = mapsIdSpotsPostValidateBeforeCall(id, spot, null);
        Type localVarReturnType = new TypeToken<Spot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create spot (asynchronously)
     * Create spot. Wrap parameters in [spot]. To add a spot picture pass a base64 encoded string to [spot][picture].
     * @param id Id of map (required)
     * @param spot spot attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdSpotsPostAsync(Integer id, SpotEditable spot, final ApiCallback<Spot> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapsIdSpotsPostValidateBeforeCall(id, spot, _callback);
        Type localVarReturnType = new TypeToken<Spot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapsMapIdSpotsIdGet
     * @param id Id of spot (required)
     * @param mapId Id of map (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsMapIdSpotsIdGetCall(Integer id, Integer mapId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/maps/{map_id}/spots/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "map_id" + "}", localVarApiClient.escapeString(mapId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapsMapIdSpotsIdGetValidateBeforeCall(Integer id, Integer mapId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mapsMapIdSpotsIdGet(Async)");
        }

        // verify the required parameter 'mapId' is set
        if (mapId == null) {
            throw new ApiException("Missing the required parameter 'mapId' when calling mapsMapIdSpotsIdGet(Async)");
        }

        return mapsMapIdSpotsIdGetCall(id, mapId, _callback);

    }

    /**
     * Get spot
     * Get basic information about a spot
     * @param id Id of spot (required)
     * @param mapId Id of map (required)
     * @return Spot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public Spot mapsMapIdSpotsIdGet(Integer id, Integer mapId) throws ApiException {
        ApiResponse<Spot> localVarResp = mapsMapIdSpotsIdGetWithHttpInfo(id, mapId);
        return localVarResp.getData();
    }

    /**
     * Get spot
     * Get basic information about a spot
     * @param id Id of spot (required)
     * @param mapId Id of map (required)
     * @return ApiResponse&lt;Spot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Spot> mapsMapIdSpotsIdGetWithHttpInfo(Integer id, Integer mapId) throws ApiException {
        okhttp3.Call localVarCall = mapsMapIdSpotsIdGetValidateBeforeCall(id, mapId, null);
        Type localVarReturnType = new TypeToken<Spot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get spot (asynchronously)
     * Get basic information about a spot
     * @param id Id of spot (required)
     * @param mapId Id of map (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsMapIdSpotsIdGetAsync(Integer id, Integer mapId, final ApiCallback<Spot> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapsMapIdSpotsIdGetValidateBeforeCall(id, mapId, _callback);
        Type localVarReturnType = new TypeToken<Spot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spotsGet
     * @param order Order of spots (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of spots. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsGetCall(String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spotsGetValidateBeforeCall(String order, final ApiCallback _callback) throws ApiException {
        return spotsGetCall(order, _callback);

    }

    /**
     * List your own spots
     * List your own spots.
     * @param order Order of spots (optional)
     * @return List&lt;Spot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of spots. </td><td>  -  </td></tr>
     </table>
     */
    public List<Spot> spotsGet(String order) throws ApiException {
        ApiResponse<List<Spot>> localVarResp = spotsGetWithHttpInfo(order);
        return localVarResp.getData();
    }

    /**
     * List your own spots
     * List your own spots.
     * @param order Order of spots (optional)
     * @return ApiResponse&lt;List&lt;Spot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of spots. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Spot>> spotsGetWithHttpInfo(String order) throws ApiException {
        okhttp3.Call localVarCall = spotsGetValidateBeforeCall(order, null);
        Type localVarReturnType = new TypeToken<List<Spot>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List your own spots (asynchronously)
     * List your own spots.
     * @param order Order of spots (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of spots. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsGetAsync(String order, final ApiCallback<List<Spot>> _callback) throws ApiException {

        okhttp3.Call localVarCall = spotsGetValidateBeforeCall(order, _callback);
        Type localVarReturnType = new TypeToken<List<Spot>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spotsIdDelete
     * @param id spot id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted spot. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spots/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spotsIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spotsIdDelete(Async)");
        }

        return spotsIdDeleteCall(id, _callback);

    }

    /**
     * Delete spot
     * Delete spot.
     * @param id spot id (required)
     * @return Spot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted spot. </td><td>  -  </td></tr>
     </table>
     */
    public Spot spotsIdDelete(Integer id) throws ApiException {
        ApiResponse<Spot> localVarResp = spotsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete spot
     * Delete spot.
     * @param id spot id (required)
     * @return ApiResponse&lt;Spot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted spot. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Spot> spotsIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = spotsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Spot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete spot (asynchronously)
     * Delete spot.
     * @param id spot id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted spot. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsIdDeleteAsync(Integer id, final ApiCallback<Spot> _callback) throws ApiException {

        okhttp3.Call localVarCall = spotsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Spot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spotsIdPatch
     * @param id spot id (required)
     * @param spot spot attributes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsIdPatchCall(Integer id, SpotEditable spot, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = spot;

        // create path and map variables
        String localVarPath = "/spots/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spotsIdPatchValidateBeforeCall(Integer id, SpotEditable spot, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spotsIdPatch(Async)");
        }

        return spotsIdPatchCall(id, spot, _callback);

    }

    /**
     * Update spot
     * Update spot. Wrap parameters in [spot]. To update the spot picture pass a base64 encoded string to [spot][picture].
     * @param id spot id (required)
     * @param spot spot attributes (optional)
     * @return Spot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public Spot spotsIdPatch(Integer id, SpotEditable spot) throws ApiException {
        ApiResponse<Spot> localVarResp = spotsIdPatchWithHttpInfo(id, spot);
        return localVarResp.getData();
    }

    /**
     * Update spot
     * Update spot. Wrap parameters in [spot]. To update the spot picture pass a base64 encoded string to [spot][picture].
     * @param id spot id (required)
     * @param spot spot attributes (optional)
     * @return ApiResponse&lt;Spot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Spot> spotsIdPatchWithHttpInfo(Integer id, SpotEditable spot) throws ApiException {
        okhttp3.Call localVarCall = spotsIdPatchValidateBeforeCall(id, spot, null);
        Type localVarReturnType = new TypeToken<Spot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update spot (asynchronously)
     * Update spot. Wrap parameters in [spot]. To update the spot picture pass a base64 encoded string to [spot][picture].
     * @param id spot id (required)
     * @param spot spot attributes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsIdPatchAsync(Integer id, SpotEditable spot, final ApiCallback<Spot> _callback) throws ApiException {

        okhttp3.Call localVarCall = spotsIdPatchValidateBeforeCall(id, spot, _callback);
        Type localVarReturnType = new TypeToken<Spot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
