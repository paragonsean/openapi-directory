/*
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Spot;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mapsSearchGet
     * @param q Query (optional)
     * @param d Distance. Diameter of search radius in meter (default: 2000 meter) (optional)
     * @param lat Latitude for search radius (default distance: 2000 meter) (optional)
     * @param lon Longitude for search radius (default distance: 2000 meter) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsSearchGetCall(String q, Integer d, BigDecimal lat, BigDecimal lon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/maps/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (d != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("d", d));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapsSearchGetValidateBeforeCall(String q, Integer d, BigDecimal lat, BigDecimal lon, final ApiCallback _callback) throws ApiException {
        return mapsSearchGetCall(q, d, lat, lon, _callback);

    }

    /**
     * Search maps
     * Search maps
     * @param q Query (optional)
     * @param d Distance. Diameter of search radius in meter (default: 2000 meter) (optional)
     * @param lat Latitude for search radius (default distance: 2000 meter) (optional)
     * @param lon Longitude for search radius (default distance: 2000 meter) (optional)
     * @return Map
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data. </td><td>  -  </td></tr>
     </table>
     */
    public Map mapsSearchGet(String q, Integer d, BigDecimal lat, BigDecimal lon) throws ApiException {
        ApiResponse<Map> localVarResp = mapsSearchGetWithHttpInfo(q, d, lat, lon);
        return localVarResp.getData();
    }

    /**
     * Search maps
     * Search maps
     * @param q Query (optional)
     * @param d Distance. Diameter of search radius in meter (default: 2000 meter) (optional)
     * @param lat Latitude for search radius (default distance: 2000 meter) (optional)
     * @param lon Longitude for search radius (default distance: 2000 meter) (optional)
     * @return ApiResponse&lt;Map&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map> mapsSearchGetWithHttpInfo(String q, Integer d, BigDecimal lat, BigDecimal lon) throws ApiException {
        okhttp3.Call localVarCall = mapsSearchGetValidateBeforeCall(q, d, lat, lon, null);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search maps (asynchronously)
     * Search maps
     * @param q Query (optional)
     * @param d Distance. Diameter of search radius in meter (default: 2000 meter) (optional)
     * @param lat Latitude for search radius (default distance: 2000 meter) (optional)
     * @param lon Longitude for search radius (default distance: 2000 meter) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsSearchGetAsync(String q, Integer d, BigDecimal lat, BigDecimal lon, final ApiCallback<Map> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapsSearchGetValidateBeforeCall(q, d, lat, lon, _callback);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spotsSearchGet
     * @param q Query (optional)
     * @param d Distance. Diameter of search radius in meter (default: 2000 meter) (optional)
     * @param lat Latitude for search radius (2 km) (optional)
     * @param lon Longitude for search radius (2 km) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsSearchGetCall(String q, Integer d, BigDecimal lat, BigDecimal lon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spots/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (d != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("d", d));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spotsSearchGetValidateBeforeCall(String q, Integer d, BigDecimal lat, BigDecimal lon, final ApiCallback _callback) throws ApiException {
        return spotsSearchGetCall(q, d, lat, lon, _callback);

    }

    /**
     * Search spots
     * Search spots
     * @param q Query (optional)
     * @param d Distance. Diameter of search radius in meter (default: 2000 meter) (optional)
     * @param lat Latitude for search radius (2 km) (optional)
     * @param lon Longitude for search radius (2 km) (optional)
     * @return Spot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data. </td><td>  -  </td></tr>
     </table>
     */
    public Spot spotsSearchGet(String q, Integer d, BigDecimal lat, BigDecimal lon) throws ApiException {
        ApiResponse<Spot> localVarResp = spotsSearchGetWithHttpInfo(q, d, lat, lon);
        return localVarResp.getData();
    }

    /**
     * Search spots
     * Search spots
     * @param q Query (optional)
     * @param d Distance. Diameter of search radius in meter (default: 2000 meter) (optional)
     * @param lat Latitude for search radius (2 km) (optional)
     * @param lon Longitude for search radius (2 km) (optional)
     * @return ApiResponse&lt;Spot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Spot> spotsSearchGetWithHttpInfo(String q, Integer d, BigDecimal lat, BigDecimal lon) throws ApiException {
        okhttp3.Call localVarCall = spotsSearchGetValidateBeforeCall(q, d, lat, lon, null);
        Type localVarReturnType = new TypeToken<Spot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search spots (asynchronously)
     * Search spots
     * @param q Query (optional)
     * @param d Distance. Diameter of search radius in meter (default: 2000 meter) (optional)
     * @param lat Latitude for search radius (2 km) (optional)
     * @param lon Longitude for search radius (2 km) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains spot data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsSearchGetAsync(String q, Integer d, BigDecimal lat, BigDecimal lon, final ApiCallback<Spot> _callback) throws ApiException {

        okhttp3.Call localVarCall = spotsSearchGetValidateBeforeCall(q, d, lat, lon, _callback);
        Type localVarReturnType = new TypeToken<Spot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSearchGet
     * @param q Query (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains users data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSearchGetCall(String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSearchGetValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        return usersSearchGetCall(q, _callback);

    }

    /**
     * Search users
     * Search users
     * @param q Query (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains users data. </td><td>  -  </td></tr>
     </table>
     */
    public User usersSearchGet(String q) throws ApiException {
        ApiResponse<User> localVarResp = usersSearchGetWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * Search users
     * Search users
     * @param q Query (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains users data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersSearchGetWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = usersSearchGetValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search users (asynchronously)
     * Search users
     * @param q Query (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains users data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSearchGetAsync(String q, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSearchGetValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
