/*
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Event;
import org.openapitools.client.model.EventEditable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventsGet
     * @param timeframeStart Begin of time range of event (ISO 8601 date format). (optional)
     * @param timeframeEnd End of time range of event (ISO 8601 date format). (optional)
     * @param bounds To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within &#39;Hamburg, St. Pauli&#39;:                                                             bounds[sw_lat]&#x3D;53.54831449741324                                                             bounds[sw_lon]&#x3D;9.943227767944336                                                             bounds[ne_lat]&#x3D;53.5571103674878                                                             bounds[ne_lon]&#x3D;9.9776029586792 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of events. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetCall(String timeframeStart, String timeframeEnd, String bounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeframeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeframe_start", timeframeStart));
        }

        if (timeframeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeframe_end", timeframeEnd));
        }

        if (bounds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bounds", bounds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsGetValidateBeforeCall(String timeframeStart, String timeframeEnd, String bounds, final ApiCallback _callback) throws ApiException {
        return eventsGetCall(timeframeStart, timeframeEnd, bounds, _callback);

    }

    /**
     * List your own events
     * List your own events.
     * @param timeframeStart Begin of time range of event (ISO 8601 date format). (optional)
     * @param timeframeEnd End of time range of event (ISO 8601 date format). (optional)
     * @param bounds To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within &#39;Hamburg, St. Pauli&#39;:                                                             bounds[sw_lat]&#x3D;53.54831449741324                                                             bounds[sw_lon]&#x3D;9.943227767944336                                                             bounds[ne_lat]&#x3D;53.5571103674878                                                             bounds[ne_lon]&#x3D;9.9776029586792 (optional)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of events. </td><td>  -  </td></tr>
     </table>
     */
    public List<Event> eventsGet(String timeframeStart, String timeframeEnd, String bounds) throws ApiException {
        ApiResponse<List<Event>> localVarResp = eventsGetWithHttpInfo(timeframeStart, timeframeEnd, bounds);
        return localVarResp.getData();
    }

    /**
     * List your own events
     * List your own events.
     * @param timeframeStart Begin of time range of event (ISO 8601 date format). (optional)
     * @param timeframeEnd End of time range of event (ISO 8601 date format). (optional)
     * @param bounds To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within &#39;Hamburg, St. Pauli&#39;:                                                             bounds[sw_lat]&#x3D;53.54831449741324                                                             bounds[sw_lon]&#x3D;9.943227767944336                                                             bounds[ne_lat]&#x3D;53.5571103674878                                                             bounds[ne_lon]&#x3D;9.9776029586792 (optional)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of events. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Event>> eventsGetWithHttpInfo(String timeframeStart, String timeframeEnd, String bounds) throws ApiException {
        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(timeframeStart, timeframeEnd, bounds, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List your own events (asynchronously)
     * List your own events.
     * @param timeframeStart Begin of time range of event (ISO 8601 date format). (optional)
     * @param timeframeEnd End of time range of event (ISO 8601 date format). (optional)
     * @param bounds To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within &#39;Hamburg, St. Pauli&#39;:                                                             bounds[sw_lat]&#x3D;53.54831449741324                                                             bounds[sw_lon]&#x3D;9.943227767944336                                                             bounds[ne_lat]&#x3D;53.5571103674878                                                             bounds[ne_lon]&#x3D;9.9776029586792 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of events. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetAsync(String timeframeStart, String timeframeEnd, String bounds, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(timeframeStart, timeframeEnd, bounds, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsIdDelete
     * @param id Event id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted event. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventsIdDelete(Async)");
        }

        return eventsIdDeleteCall(id, _callback);

    }

    /**
     * Delete event
     * Delete event.
     * @param id Event id (required)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted event. </td><td>  -  </td></tr>
     </table>
     */
    public Event eventsIdDelete(Integer id) throws ApiException {
        ApiResponse<Event> localVarResp = eventsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete event
     * Delete event.
     * @param id Event id (required)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted event. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> eventsIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = eventsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete event (asynchronously)
     * Delete event.
     * @param id Event id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted event. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsIdDeleteAsync(Integer id, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsIdGet
     * @param id Id of event (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains event data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventsIdGet(Async)");
        }

        return eventsIdGetCall(id, _callback);

    }

    /**
     * Get event
     * Get basic information about an event
     * @param id Id of event (required)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains event data. </td><td>  -  </td></tr>
     </table>
     */
    public Event eventsIdGet(Integer id) throws ApiException {
        ApiResponse<Event> localVarResp = eventsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get event
     * Get basic information about an event
     * @param id Id of event (required)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains event data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> eventsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = eventsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get event (asynchronously)
     * Get basic information about an event
     * @param id Id of event (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains event data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsIdGetAsync(Integer id, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsIdPatch
     * @param id Event id (required)
     * @param event Event attributes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsIdPatchCall(Integer id, EventEditable event, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = event;

        // create path and map variables
        String localVarPath = "/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsIdPatchValidateBeforeCall(Integer id, EventEditable event, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventsIdPatch(Async)");
        }

        return eventsIdPatchCall(id, event, _callback);

    }

    /**
     * Update event
     * Update event. Wrap event parameters in [event].
     * @param id Event id (required)
     * @param event Event attributes (optional)
     * @return Map
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public Map eventsIdPatch(Integer id, EventEditable event) throws ApiException {
        ApiResponse<Map> localVarResp = eventsIdPatchWithHttpInfo(id, event);
        return localVarResp.getData();
    }

    /**
     * Update event
     * Update event. Wrap event parameters in [event].
     * @param id Event id (required)
     * @param event Event attributes (optional)
     * @return ApiResponse&lt;Map&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map> eventsIdPatchWithHttpInfo(Integer id, EventEditable event) throws ApiException {
        okhttp3.Call localVarCall = eventsIdPatchValidateBeforeCall(id, event, null);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update event (asynchronously)
     * Update event. Wrap event parameters in [event].
     * @param id Event id (required)
     * @param event Event attributes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsIdPatchAsync(Integer id, EventEditable event, final ApiCallback<Map> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsIdPatchValidateBeforeCall(id, event, _callback);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spotsIdEventsGet
     * @param id Id of spot (required)
     * @param timeframeStart Begin of time range of event (ISO 8601 date format). (optional)
     * @param timeframeEnd End of time range of event (ISO 8601 date format). (optional)
     * @param bounds To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within &#39;Hamburg, St. Pauli&#39;:                                                             bounds[sw_lat]&#x3D;53.54831449741324                                                             bounds[sw_lon]&#x3D;9.943227767944336                                                             bounds[ne_lat]&#x3D;53.5571103674878                                                             bounds[ne_lon]&#x3D;9.9776029586792 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of events. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsIdEventsGetCall(Integer id, String timeframeStart, String timeframeEnd, String bounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spots/{id}/events"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeframeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeframe_start", timeframeStart));
        }

        if (timeframeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeframe_end", timeframeEnd));
        }

        if (bounds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bounds", bounds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spotsIdEventsGetValidateBeforeCall(Integer id, String timeframeStart, String timeframeEnd, String bounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spotsIdEventsGet(Async)");
        }

        return spotsIdEventsGetCall(id, timeframeStart, timeframeEnd, bounds, _callback);

    }

    /**
     * List events for a given spot
     * List maps for a given spot.
     * @param id Id of spot (required)
     * @param timeframeStart Begin of time range of event (ISO 8601 date format). (optional)
     * @param timeframeEnd End of time range of event (ISO 8601 date format). (optional)
     * @param bounds To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within &#39;Hamburg, St. Pauli&#39;:                                                             bounds[sw_lat]&#x3D;53.54831449741324                                                             bounds[sw_lon]&#x3D;9.943227767944336                                                             bounds[ne_lat]&#x3D;53.5571103674878                                                             bounds[ne_lon]&#x3D;9.9776029586792 (optional)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of events. </td><td>  -  </td></tr>
     </table>
     */
    public List<Event> spotsIdEventsGet(Integer id, String timeframeStart, String timeframeEnd, String bounds) throws ApiException {
        ApiResponse<List<Event>> localVarResp = spotsIdEventsGetWithHttpInfo(id, timeframeStart, timeframeEnd, bounds);
        return localVarResp.getData();
    }

    /**
     * List events for a given spot
     * List maps for a given spot.
     * @param id Id of spot (required)
     * @param timeframeStart Begin of time range of event (ISO 8601 date format). (optional)
     * @param timeframeEnd End of time range of event (ISO 8601 date format). (optional)
     * @param bounds To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within &#39;Hamburg, St. Pauli&#39;:                                                             bounds[sw_lat]&#x3D;53.54831449741324                                                             bounds[sw_lon]&#x3D;9.943227767944336                                                             bounds[ne_lat]&#x3D;53.5571103674878                                                             bounds[ne_lon]&#x3D;9.9776029586792 (optional)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of events. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Event>> spotsIdEventsGetWithHttpInfo(Integer id, String timeframeStart, String timeframeEnd, String bounds) throws ApiException {
        okhttp3.Call localVarCall = spotsIdEventsGetValidateBeforeCall(id, timeframeStart, timeframeEnd, bounds, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List events for a given spot (asynchronously)
     * List maps for a given spot.
     * @param id Id of spot (required)
     * @param timeframeStart Begin of time range of event (ISO 8601 date format). (optional)
     * @param timeframeEnd End of time range of event (ISO 8601 date format). (optional)
     * @param bounds To refine your event index request to contain only events within                                                             a geographical box pass the followng bounds parameters.                                                             F. e. to get events within &#39;Hamburg, St. Pauli&#39;:                                                             bounds[sw_lat]&#x3D;53.54831449741324                                                             bounds[sw_lon]&#x3D;9.943227767944336                                                             bounds[ne_lat]&#x3D;53.5571103674878                                                             bounds[ne_lon]&#x3D;9.9776029586792 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of events. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsIdEventsGetAsync(Integer id, String timeframeStart, String timeframeEnd, String bounds, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = spotsIdEventsGetValidateBeforeCall(id, timeframeStart, timeframeEnd, bounds, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spotsIdEventsPost
     * @param id Spot id (required)
     * @param event Event attributes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains event data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsIdEventsPostCall(Integer id, EventEditable event, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = event;

        // create path and map variables
        String localVarPath = "/spots/{id}/events"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spotsIdEventsPostValidateBeforeCall(Integer id, EventEditable event, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spotsIdEventsPost(Async)");
        }

        return spotsIdEventsPostCall(id, event, _callback);

    }

    /**
     * Create event
     * Create event. Wrap map parameters in [event].
     * @param id Spot id (required)
     * @param event Event attributes (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains event data </td><td>  -  </td></tr>
     </table>
     */
    public Event spotsIdEventsPost(Integer id, EventEditable event) throws ApiException {
        ApiResponse<Event> localVarResp = spotsIdEventsPostWithHttpInfo(id, event);
        return localVarResp.getData();
    }

    /**
     * Create event
     * Create event. Wrap map parameters in [event].
     * @param id Spot id (required)
     * @param event Event attributes (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains event data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> spotsIdEventsPostWithHttpInfo(Integer id, EventEditable event) throws ApiException {
        okhttp3.Call localVarCall = spotsIdEventsPostValidateBeforeCall(id, event, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create event (asynchronously)
     * Create event. Wrap map parameters in [event].
     * @param id Spot id (required)
     * @param event Event attributes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains event data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spotsIdEventsPostAsync(Integer id, EventEditable event, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = spotsIdEventsPostValidateBeforeCall(id, event, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
