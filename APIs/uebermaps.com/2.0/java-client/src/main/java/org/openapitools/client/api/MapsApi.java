/*
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MapEditable;
import org.openapitools.client.model.MapWithRelation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MapsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MapsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MapsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mapsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/maps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return mapsGetCall(_callback);

    }

    /**
     * List your own maps
     * List your own maps.
     * @return List&lt;Map&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public List<Map> mapsGet() throws ApiException {
        ApiResponse<List<Map>> localVarResp = mapsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List your own maps
     * List your own maps.
     * @return ApiResponse&lt;List&lt;Map&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map>> mapsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = mapsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Map>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List your own maps (asynchronously)
     * List your own maps.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsGetAsync(final ApiCallback<List<Map>> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Map>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapsIdDelete
     * @param id map id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted map. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/maps/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapsIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mapsIdDelete(Async)");
        }

        return mapsIdDeleteCall(id, _callback);

    }

    /**
     * Delete map
     * Delete map.
     * @param id map id (required)
     * @return Map
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted map. </td><td>  -  </td></tr>
     </table>
     */
    public Map mapsIdDelete(Integer id) throws ApiException {
        ApiResponse<Map> localVarResp = mapsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete map
     * Delete map.
     * @param id map id (required)
     * @return ApiResponse&lt;Map&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted map. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map> mapsIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = mapsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete map (asynchronously)
     * Delete map.
     * @param id map id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains deleted map. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdDeleteAsync(Integer id, final ApiCallback<Map> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapsIdGet
     * @param id Id of map (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/maps/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mapsIdGet(Async)");
        }

        return mapsIdGetCall(id, _callback);

    }

    /**
     * Get map
     * Get basic information about a map
     * @param id Id of map (required)
     * @return MapWithRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public MapWithRelation mapsIdGet(Integer id) throws ApiException {
        ApiResponse<MapWithRelation> localVarResp = mapsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get map
     * Get basic information about a map
     * @param id Id of map (required)
     * @return ApiResponse&lt;MapWithRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MapWithRelation> mapsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = mapsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MapWithRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get map (asynchronously)
     * Get basic information about a map
     * @param id Id of map (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdGetAsync(Integer id, final ApiCallback<MapWithRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MapWithRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapsIdPatch
     * @param id map id (required)
     * @param map map settings attributes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdPatchCall(Integer id, MapEditable map, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = map;

        // create path and map variables
        String localVarPath = "/maps/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapsIdPatchValidateBeforeCall(Integer id, MapEditable map, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mapsIdPatch(Async)");
        }

        return mapsIdPatchCall(id, map, _callback);

    }

    /**
     * Update map
     * Update map. Wrap map parameters in [map]. To update the map header picture pass a base64 encoded string to [map][picture].
     * @param id map id (required)
     * @param map map settings attributes (optional)
     * @return Map
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public Map mapsIdPatch(Integer id, MapEditable map) throws ApiException {
        ApiResponse<Map> localVarResp = mapsIdPatchWithHttpInfo(id, map);
        return localVarResp.getData();
    }

    /**
     * Update map
     * Update map. Wrap map parameters in [map]. To update the map header picture pass a base64 encoded string to [map][picture].
     * @param id map id (required)
     * @param map map settings attributes (optional)
     * @return ApiResponse&lt;Map&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map> mapsIdPatchWithHttpInfo(Integer id, MapEditable map) throws ApiException {
        okhttp3.Call localVarCall = mapsIdPatchValidateBeforeCall(id, map, null);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update map (asynchronously)
     * Update map. Wrap map parameters in [map]. To update the map header picture pass a base64 encoded string to [map][picture].
     * @param id map id (required)
     * @param map map settings attributes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsIdPatchAsync(Integer id, MapEditable map, final ApiCallback<Map> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapsIdPatchValidateBeforeCall(id, map, _callback);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapsPost
     * @param map map attributes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsPostCall(MapEditable map, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = map;

        // create path and map variables
        String localVarPath = "/maps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapsPostValidateBeforeCall(MapEditable map, final ApiCallback _callback) throws ApiException {
        return mapsPostCall(map, _callback);

    }

    /**
     * Create map
     * Create map. Wrap map parameters in [map]. To add a map header picture pass a base64 encoded string to [map][picture].
     * @param map map attributes (optional)
     * @return Map
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public Map mapsPost(MapEditable map) throws ApiException {
        ApiResponse<Map> localVarResp = mapsPostWithHttpInfo(map);
        return localVarResp.getData();
    }

    /**
     * Create map
     * Create map. Wrap map parameters in [map]. To add a map header picture pass a base64 encoded string to [map][picture].
     * @param map map attributes (optional)
     * @return ApiResponse&lt;Map&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map> mapsPostWithHttpInfo(MapEditable map) throws ApiException {
        okhttp3.Call localVarCall = mapsPostValidateBeforeCall(map, null);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create map (asynchronously)
     * Create map. Wrap map parameters in [map]. To add a map header picture pass a base64 encoded string to [map][picture].
     * @param map map attributes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains map data, map settings and your relation to this map </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapsPostAsync(MapEditable map, final ApiCallback<Map> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapsPostValidateBeforeCall(map, _callback);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdMapsGet
     * @param userId Id of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdMapsGetCall(Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/maps"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdMapsGetValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdMapsGet(Async)");
        }

        return usersUserIdMapsGetCall(userId, _callback);

    }

    /**
     * List maps for a given user
     * List maps for a given user.
     * @param userId Id of user (required)
     * @return List&lt;Map&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public List<Map> usersUserIdMapsGet(Integer userId) throws ApiException {
        ApiResponse<List<Map>> localVarResp = usersUserIdMapsGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * List maps for a given user
     * List maps for a given user.
     * @param userId Id of user (required)
     * @return ApiResponse&lt;List&lt;Map&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map>> usersUserIdMapsGetWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdMapsGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<Map>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List maps for a given user (asynchronously)
     * List maps for a given user.
     * @param userId Id of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains list of maps. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdMapsGetAsync(Integer userId, final ApiCallback<List<Map>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdMapsGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<Map>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
