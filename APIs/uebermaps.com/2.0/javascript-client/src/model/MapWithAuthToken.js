/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MapCounts from './MapCounts';

/**
 * The MapWithAuthToken model module.
 * @module model/MapWithAuthToken
 * @version 2.0
 */
class MapWithAuthToken {
    /**
     * Constructs a new <code>MapWithAuthToken</code>.
     * @alias module:model/MapWithAuthToken
     */
    constructor() { 
        
        MapWithAuthToken.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MapWithAuthToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MapWithAuthToken} obj Optional instance to populate.
     * @return {module:model/MapWithAuthToken} The populated <code>MapWithAuthToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MapWithAuthToken();

            if (data.hasOwnProperty('counts')) {
                obj['counts'] = MapCounts.constructFromObject(data['counts']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('owner_id')) {
                obj['owner_id'] = ApiClient.convertToType(data['owner_id'], 'Number');
            }
            if (data.hasOwnProperty('picture_url')) {
                obj['picture_url'] = ApiClient.convertToType(data['picture_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MapWithAuthToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MapWithAuthToken</code>.
     */
    static validateJSON(data) {
        // validate the optional field `counts`
        if (data['counts']) { // data not null
          MapCounts.validateJSON(data['counts']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['picture_url'] && !(typeof data['picture_url'] === 'string' || data['picture_url'] instanceof String)) {
            throw new Error("Expected the field `picture_url` to be a primitive type in the JSON string but got " + data['picture_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * @member {module:model/MapCounts} counts
 */
MapWithAuthToken.prototype['counts'] = undefined;

/**
 * @member {Date} created_at
 */
MapWithAuthToken.prototype['created_at'] = undefined;

/**
 * @member {String} description
 */
MapWithAuthToken.prototype['description'] = undefined;

/**
 * @member {Number} id
 */
MapWithAuthToken.prototype['id'] = undefined;

/**
 * @member {Number} owner_id
 */
MapWithAuthToken.prototype['owner_id'] = undefined;

/**
 * @member {String} picture_url
 */
MapWithAuthToken.prototype['picture_url'] = undefined;

/**
 * @member {String} title
 */
MapWithAuthToken.prototype['title'] = undefined;

/**
 * @member {String} token
 */
MapWithAuthToken.prototype['token'] = undefined;

/**
 * @member {Date} updated_at
 */
MapWithAuthToken.prototype['updated_at'] = undefined;

/**
 * @member {module:model/MapWithAuthToken.VisibilityEnum} visibility
 */
MapWithAuthToken.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
MapWithAuthToken['VisibilityEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "link"
     * @const
     */
    "link": "link",

    /**
     * value: "private"
     * @const
     */
    "private": "private"
};



export default MapWithAuthToken;

