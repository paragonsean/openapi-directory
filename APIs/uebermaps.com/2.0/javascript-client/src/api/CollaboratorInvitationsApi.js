/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CollaboratorInvitation from '../model/CollaboratorInvitation';
import CollaboratorInvitationCreate from '../model/CollaboratorInvitationCreate';

/**
* CollaboratorInvitations service.
* @module api/CollaboratorInvitationsApi
* @version 2.0
*/
export default class CollaboratorInvitationsApi {

    /**
    * Constructs a new CollaboratorInvitationsApi. 
    * @alias module:api/CollaboratorInvitationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the collaboratorInvitationsGet operation.
     * @callback module:api/CollaboratorInvitationsApi~collaboratorInvitationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CollaboratorInvitation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List your collaborator invitations
     * List your collaborator invitations.
     * @param {module:api/CollaboratorInvitationsApi~collaboratorInvitationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CollaboratorInvitation>}
     */
    collaboratorInvitationsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CollaboratorInvitation];
      return this.apiClient.callApi(
        '/collaborator_invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collaboratorInvitationsIdDelete operation.
     * @callback module:api/CollaboratorInvitationsApi~collaboratorInvitationsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollaboratorInvitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collaborator invitation
     * Delete collaborator invitation.
     * @param {Number} id Collaborator invitation id
     * @param {module:api/CollaboratorInvitationsApi~collaboratorInvitationsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollaboratorInvitation}
     */
    collaboratorInvitationsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling collaboratorInvitationsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollaboratorInvitation;
      return this.apiClient.callApi(
        '/collaborator_invitations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collaboratorInvitationsIdGet operation.
     * @callback module:api/CollaboratorInvitationsApi~collaboratorInvitationsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollaboratorInvitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show collaborator invitation
     * Show collaborator invitation
     * @param {Number} id Collaborator invitation id
     * @param {module:api/CollaboratorInvitationsApi~collaboratorInvitationsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollaboratorInvitation}
     */
    collaboratorInvitationsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling collaboratorInvitationsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollaboratorInvitation;
      return this.apiClient.callApi(
        '/collaborator_invitations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collaboratorInvitationsIdPatch operation.
     * @callback module:api/CollaboratorInvitationsApi~collaboratorInvitationsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollaboratorInvitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept collaborator invitation.
     * Accept collaborator invitation.
     * @param {Number} id Collaborator invitation id
     * @param {module:api/CollaboratorInvitationsApi~collaboratorInvitationsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollaboratorInvitation}
     */
    collaboratorInvitationsIdPatch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling collaboratorInvitationsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollaboratorInvitation;
      return this.apiClient.callApi(
        '/collaborator_invitations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collaboratorInvitationsPost operation.
     * @callback module:api/CollaboratorInvitationsApi~collaboratorInvitationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollaboratorInvitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite user to collaborate on map
     * Invite user to collaborate on map.
     * @param {Object} opts Optional parameters
     * @param {module:model/CollaboratorInvitationCreate} [body] Supply map_id and either a comma separated list of user_ids or emails. Optionally you can provide a 'is_admin' parameter with 'true' or 'false' to give the invited users admin privileges.
     * @param {module:api/CollaboratorInvitationsApi~collaboratorInvitationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollaboratorInvitation}
     */
    collaboratorInvitationsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CollaboratorInvitation;
      return this.apiClient.callApi(
        '/collaborator_invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
