/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Map from '../model/Map';
import MapEditable from '../model/MapEditable';
import MapWithRelation from '../model/MapWithRelation';

/**
* Maps service.
* @module api/MapsApi
* @version 2.0
*/
export default class MapsApi {

    /**
    * Constructs a new MapsApi. 
    * @alias module:api/MapsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapsGet operation.
     * @callback module:api/MapsApi~mapsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Map>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List your own maps
     * List your own maps.
     * @param {module:api/MapsApi~mapsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Map>}
     */
    mapsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Map];
      return this.apiClient.callApi(
        '/maps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsIdDelete operation.
     * @callback module:api/MapsApi~mapsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Map} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete map
     * Delete map.
     * @param {Number} id map id
     * @param {module:api/MapsApi~mapsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Map}
     */
    mapsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Map;
      return this.apiClient.callApi(
        '/maps/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsIdGet operation.
     * @callback module:api/MapsApi~mapsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MapWithRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get map
     * Get basic information about a map
     * @param {Number} id Id of map
     * @param {module:api/MapsApi~mapsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MapWithRelation}
     */
    mapsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MapWithRelation;
      return this.apiClient.callApi(
        '/maps/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsIdPatch operation.
     * @callback module:api/MapsApi~mapsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Map} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update map
     * Update map. Wrap map parameters in [map]. To update the map header picture pass a base64 encoded string to [map][picture].
     * @param {Number} id map id
     * @param {Object} opts Optional parameters
     * @param {module:model/MapEditable} [map] map settings attributes
     * @param {module:api/MapsApi~mapsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Map}
     */
    mapsIdPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['map'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Map;
      return this.apiClient.callApi(
        '/maps/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsPost operation.
     * @callback module:api/MapsApi~mapsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Map} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create map
     * Create map. Wrap map parameters in [map]. To add a map header picture pass a base64 encoded string to [map][picture].
     * @param {Object} opts Optional parameters
     * @param {module:model/MapEditable} [map] map attributes
     * @param {module:api/MapsApi~mapsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Map}
     */
    mapsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['map'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Map;
      return this.apiClient.callApi(
        '/maps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdMapsGet operation.
     * @callback module:api/MapsApi~usersUserIdMapsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Map>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List maps for a given user
     * List maps for a given user.
     * @param {Number} userId Id of user
     * @param {module:api/MapsApi~usersUserIdMapsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Map>}
     */
    usersUserIdMapsGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdMapsGet");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Map];
      return this.apiClient.callApi(
        '/users/{user_id}/maps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
