/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Spot from '../model/Spot';
import SpotEditable from '../model/SpotEditable';

/**
* Spots service.
* @module api/SpotsApi
* @version 2.0
*/
export default class SpotsApi {

    /**
    * Constructs a new SpotsApi. 
    * @alias module:api/SpotsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapsIdSpotsGet operation.
     * @callback module:api/SpotsApi~mapsIdSpotsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Spot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List spots for a given map
     * List spots for a given map.
     * @param {Number} id Id of map
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] Order of spots
     * @param {module:api/SpotsApi~mapsIdSpotsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Spot>}
     */
    mapsIdSpotsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsIdSpotsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Spot];
      return this.apiClient.callApi(
        '/maps/{id}/spots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsIdSpotsPost operation.
     * @callback module:api/SpotsApi~mapsIdSpotsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create spot
     * Create spot. Wrap parameters in [spot]. To add a spot picture pass a base64 encoded string to [spot][picture].
     * @param {Number} id Id of map
     * @param {module:model/SpotEditable} spot spot attributes
     * @param {module:api/SpotsApi~mapsIdSpotsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spot}
     */
    mapsIdSpotsPost(id, spot, callback) {
      let postBody = spot;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsIdSpotsPost");
      }
      // verify the required parameter 'spot' is set
      if (spot === undefined || spot === null) {
        throw new Error("Missing the required parameter 'spot' when calling mapsIdSpotsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Spot;
      return this.apiClient.callApi(
        '/maps/{id}/spots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsMapIdSpotsIdGet operation.
     * @callback module:api/SpotsApi~mapsMapIdSpotsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get spot
     * Get basic information about a spot
     * @param {Number} id Id of spot
     * @param {Number} mapId Id of map
     * @param {module:api/SpotsApi~mapsMapIdSpotsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spot}
     */
    mapsMapIdSpotsIdGet(id, mapId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsMapIdSpotsIdGet");
      }
      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapsMapIdSpotsIdGet");
      }

      let pathParams = {
        'id': id,
        'map_id': mapId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Spot;
      return this.apiClient.callApi(
        '/maps/{map_id}/spots/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spotsGet operation.
     * @callback module:api/SpotsApi~spotsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Spot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List your own spots
     * List your own spots.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] Order of spots
     * @param {module:api/SpotsApi~spotsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Spot>}
     */
    spotsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Spot];
      return this.apiClient.callApi(
        '/spots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spotsIdDelete operation.
     * @callback module:api/SpotsApi~spotsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete spot
     * Delete spot.
     * @param {Number} id spot id
     * @param {module:api/SpotsApi~spotsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spot}
     */
    spotsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spotsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Spot;
      return this.apiClient.callApi(
        '/spots/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spotsIdPatch operation.
     * @callback module:api/SpotsApi~spotsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update spot
     * Update spot. Wrap parameters in [spot]. To update the spot picture pass a base64 encoded string to [spot][picture].
     * @param {Number} id spot id
     * @param {Object} opts Optional parameters
     * @param {module:model/SpotEditable} [spot] spot attributes
     * @param {module:api/SpotsApi~spotsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spot}
     */
    spotsIdPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['spot'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spotsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Spot;
      return this.apiClient.callApi(
        '/spots/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
