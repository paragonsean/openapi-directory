/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Map from '../model/Map';
import Respot from '../model/Respot';

/**
* Respots service.
* @module api/RespotsApi
* @version 2.0
*/
export default class RespotsApi {

    /**
    * Constructs a new RespotsApi. 
    * @alias module:api/RespotsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapsIdRespotsGet operation.
     * @callback module:api/RespotsApi~mapsIdRespotsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Respot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List respots of a map
     * List respots of a map.
     * @param {Number} id Map Id
     * @param {module:api/RespotsApi~mapsIdRespotsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Respot>}
     */
    mapsIdRespotsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsIdRespotsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Respot];
      return this.apiClient.callApi(
        '/maps/{id}/respots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsMapIdSpotsSpotIdRespotDelete operation.
     * @callback module:api/RespotsApi~mapsMapIdSpotsSpotIdRespotDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Respot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete respot from map by spot id
     * Delete respot from map by spot id.
     * @param {Number} mapId Map Id
     * @param {Number} spotId Spot Id
     * @param {module:api/RespotsApi~mapsMapIdSpotsSpotIdRespotDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Respot}
     */
    mapsMapIdSpotsSpotIdRespotDelete(mapId, spotId, callback) {
      let postBody = null;
      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapsMapIdSpotsSpotIdRespotDelete");
      }
      // verify the required parameter 'spotId' is set
      if (spotId === undefined || spotId === null) {
        throw new Error("Missing the required parameter 'spotId' when calling mapsMapIdSpotsSpotIdRespotDelete");
      }

      let pathParams = {
        'map_id': mapId,
        'spot_id': spotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Respot;
      return this.apiClient.callApi(
        '/maps/{map_id}/spots/{spot_id}/respot', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the respotMapsGet operation.
     * @callback module:api/RespotsApi~respotMapsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Map>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List maps that user can respot to
     * List maps that user can respot to.
     * @param {module:api/RespotsApi~respotMapsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Map>}
     */
    respotMapsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Map];
      return this.apiClient.callApi(
        '/respot_maps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the respotsIdDelete operation.
     * @callback module:api/RespotsApi~respotsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Respot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete respot
     * Delete respot.
     * @param {Number} id Respot Id
     * @param {module:api/RespotsApi~respotsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Respot}
     */
    respotsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling respotsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Respot;
      return this.apiClient.callApi(
        '/respots/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the respotsIdGet operation.
     * @callback module:api/RespotsApi~respotsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Respot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get respot
     * Get basic information about a respot
     * @param {Number} id Id of respot
     * @param {module:api/RespotsApi~respotsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Respot}
     */
    respotsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling respotsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Respot;
      return this.apiClient.callApi(
        '/respots/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spotsIdRespotsPost operation.
     * @callback module:api/RespotsApi~spotsIdRespotsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Respot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Respot a spot onto a map
     * Respot a spot onto a map.
     * @param {Number} id Spot Id
     * @param {Number} mapId Map Id
     * @param {module:api/RespotsApi~spotsIdRespotsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Respot}
     */
    spotsIdRespotsPost(id, mapId, callback) {
      let postBody = mapId;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spotsIdRespotsPost");
      }
      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling spotsIdRespotsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Respot;
      return this.apiClient.callApi(
        '/spots/{id}/respots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
