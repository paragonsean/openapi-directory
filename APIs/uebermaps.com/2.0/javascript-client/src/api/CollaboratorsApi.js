/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Collaborator from '../model/Collaborator';
import CollaboratorEditable from '../model/CollaboratorEditable';

/**
* Collaborators service.
* @module api/CollaboratorsApi
* @version 2.0
*/
export default class CollaboratorsApi {

    /**
    * Constructs a new CollaboratorsApi. 
    * @alias module:api/CollaboratorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapsIdCollaboratorsGet operation.
     * @callback module:api/CollaboratorsApi~mapsIdCollaboratorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Collaborator>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List collaborators of a map
     * List collaborators of a map.
     * @param {Number} id Map id
     * @param {module:api/CollaboratorsApi~mapsIdCollaboratorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Collaborator>}
     */
    mapsIdCollaboratorsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsIdCollaboratorsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Collaborator];
      return this.apiClient.callApi(
        '/maps/{id}/collaborators/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsIdCollaboratorsUserIdDelete operation.
     * @callback module:api/CollaboratorsApi~mapsIdCollaboratorsUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collaborator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collaboration
     * Delete collaboration.
     * @param {Number} id map id
     * @param {Number} userId user id
     * @param {module:api/CollaboratorsApi~mapsIdCollaboratorsUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collaborator}
     */
    mapsIdCollaboratorsUserIdDelete(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsIdCollaboratorsUserIdDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling mapsIdCollaboratorsUserIdDelete");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Collaborator;
      return this.apiClient.callApi(
        '/maps/{id}/collaborators/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsIdCollaboratorsUserIdPatch operation.
     * @callback module:api/CollaboratorsApi~mapsIdCollaboratorsUserIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collaborator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update collaborator
     * Update collaborator. Wrap collaborator parameters in [collaborator]
     * @param {Number} id map id
     * @param {Number} userId user id
     * @param {Object} opts Optional parameters
     * @param {module:model/CollaboratorEditable} [collaborator] collaborator attributes
     * @param {module:api/CollaboratorsApi~mapsIdCollaboratorsUserIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collaborator}
     */
    mapsIdCollaboratorsUserIdPatch(id, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['collaborator'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsIdCollaboratorsUserIdPatch");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling mapsIdCollaboratorsUserIdPatch");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collaborator;
      return this.apiClient.callApi(
        '/maps/{id}/collaborators/{user_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
