/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Map from '../model/Map';
import Spot from '../model/Spot';
import User from '../model/User';

/**
* Search service.
* @module api/SearchApi
* @version 2.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapsSearchGet operation.
     * @callback module:api/SearchApi~mapsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Map} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search maps
     * Search maps
     * @param {Object} opts Optional parameters
     * @param {String} [q] Query
     * @param {Number} [d] Distance. Diameter of search radius in meter (default: 2000 meter)
     * @param {Number} [lat] Latitude for search radius (default distance: 2000 meter)
     * @param {Number} [lon] Longitude for search radius (default distance: 2000 meter)
     * @param {module:api/SearchApi~mapsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Map}
     */
    mapsSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'd': opts['d'],
        'lat': opts['lat'],
        'lon': opts['lon']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Map;
      return this.apiClient.callApi(
        '/maps/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spotsSearchGet operation.
     * @callback module:api/SearchApi~spotsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search spots
     * Search spots
     * @param {Object} opts Optional parameters
     * @param {String} [q] Query
     * @param {Number} [d] Distance. Diameter of search radius in meter (default: 2000 meter)
     * @param {Number} [lat] Latitude for search radius (2 km)
     * @param {Number} [lon] Longitude for search radius (2 km)
     * @param {module:api/SearchApi~spotsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spot}
     */
    spotsSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'd': opts['d'],
        'lat': opts['lat'],
        'lon': opts['lon']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Spot;
      return this.apiClient.callApi(
        '/spots/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSearchGet operation.
     * @callback module:api/SearchApi~usersSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search users
     * Search users
     * @param {Object} opts Optional parameters
     * @param {String} [q] Query
     * @param {module:api/SearchApi~usersSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
