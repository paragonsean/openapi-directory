/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UebermapsApiEndpoints);
  }
}(this, function(expect, UebermapsApiEndpoints) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new UebermapsApiEndpoints.Event();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Event', function() {
    it('should create an instance of Event', function() {
      // uncomment below and update the code to test Event
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be.a(UebermapsApiEndpoints.Event);
    });

    it('should have the property counts (base name: "counts")', function() {
      // uncomment below and update the code to test the property counts
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property endsAt (base name: "ends_at")', function() {
      // uncomment below and update the code to test the property endsAt
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property lat (base name: "lat")', function() {
      // uncomment below and update the code to test the property lat
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property lon (base name: "lon")', function() {
      // uncomment below and update the code to test the property lon
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property ownerId (base name: "owner_id")', function() {
      // uncomment below and update the code to test the property ownerId
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property pictureUrl (base name: "picture_url")', function() {
      // uncomment below and update the code to test the property pictureUrl
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property spot (base name: "spot")', function() {
      // uncomment below and update the code to test the property spot
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property startsAt (base name: "starts_at")', function() {
      // uncomment below and update the code to test the property startsAt
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property timeZone (base name: "time_zone")', function() {
      // uncomment below and update the code to test the property timeZone
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new UebermapsApiEndpoints.Event();
      //expect(instance).to.be();
    });

  });

}));
