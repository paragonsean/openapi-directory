/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMapWithAuthToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMapWithAuthToken::OAIMapWithAuthToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMapWithAuthToken::OAIMapWithAuthToken() {
    this->initializeModel();
}

OAIMapWithAuthToken::~OAIMapWithAuthToken() {}

void OAIMapWithAuthToken::initializeModel() {

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_picture_url_isSet = false;
    m_picture_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIMapWithAuthToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMapWithAuthToken::fromJsonObject(QJsonObject json) {

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("owner_id")]);
    m_owner_id_isSet = !json[QString("owner_id")].isNull() && m_owner_id_isValid;

    m_picture_url_isValid = ::OpenAPI::fromJsonValue(m_picture_url, json[QString("picture_url")]);
    m_picture_url_isSet = !json[QString("picture_url")].isNull() && m_picture_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIMapWithAuthToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMapWithAuthToken::asJsonObject() const {
    QJsonObject obj;
    if (m_counts.isSet()) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("owner_id"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_picture_url_isSet) {
        obj.insert(QString("picture_url"), ::OpenAPI::toJsonValue(m_picture_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAIMapCounts OAIMapWithAuthToken::getCounts() const {
    return m_counts;
}
void OAIMapWithAuthToken::setCounts(const OAIMapCounts &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIMapWithAuthToken::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIMapWithAuthToken::is_counts_Valid() const{
    return m_counts_isValid;
}

QDateTime OAIMapWithAuthToken::getCreatedAt() const {
    return m_created_at;
}
void OAIMapWithAuthToken::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMapWithAuthToken::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMapWithAuthToken::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIMapWithAuthToken::getDescription() const {
    return m_description;
}
void OAIMapWithAuthToken::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMapWithAuthToken::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMapWithAuthToken::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIMapWithAuthToken::getId() const {
    return m_id;
}
void OAIMapWithAuthToken::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMapWithAuthToken::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMapWithAuthToken::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIMapWithAuthToken::getOwnerId() const {
    return m_owner_id;
}
void OAIMapWithAuthToken::setOwnerId(const qint32 &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIMapWithAuthToken::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIMapWithAuthToken::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAIMapWithAuthToken::getPictureUrl() const {
    return m_picture_url;
}
void OAIMapWithAuthToken::setPictureUrl(const QString &picture_url) {
    m_picture_url = picture_url;
    m_picture_url_isSet = true;
}

bool OAIMapWithAuthToken::is_picture_url_Set() const{
    return m_picture_url_isSet;
}

bool OAIMapWithAuthToken::is_picture_url_Valid() const{
    return m_picture_url_isValid;
}

QString OAIMapWithAuthToken::getTitle() const {
    return m_title;
}
void OAIMapWithAuthToken::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMapWithAuthToken::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMapWithAuthToken::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIMapWithAuthToken::getToken() const {
    return m_token;
}
void OAIMapWithAuthToken::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIMapWithAuthToken::is_token_Set() const{
    return m_token_isSet;
}

bool OAIMapWithAuthToken::is_token_Valid() const{
    return m_token_isValid;
}

QDateTime OAIMapWithAuthToken::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMapWithAuthToken::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMapWithAuthToken::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMapWithAuthToken::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIMapWithAuthToken::getVisibility() const {
    return m_visibility;
}
void OAIMapWithAuthToken::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIMapWithAuthToken::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIMapWithAuthToken::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIMapWithAuthToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMapWithAuthToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
