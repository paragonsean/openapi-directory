/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_header_picture_isSet = false;
    m_header_picture_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_picture_url_isSet = false;
    m_picture_url_isValid = false;

    m_screen_name_isSet = false;
    m_screen_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_header_picture_isValid = ::OpenAPI::fromJsonValue(m_header_picture, json[QString("header_picture")]);
    m_header_picture_isSet = !json[QString("header_picture")].isNull() && m_header_picture_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_picture_url_isValid = ::OpenAPI::fromJsonValue(m_picture_url, json[QString("picture_url")]);
    m_picture_url_isSet = !json[QString("picture_url")].isNull() && m_picture_url_isValid;

    m_screen_name_isValid = ::OpenAPI::fromJsonValue(m_screen_name, json[QString("screen_name")]);
    m_screen_name_isSet = !json[QString("screen_name")].isNull() && m_screen_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_about_isSet) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_counts.isSet()) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_header_picture_isSet) {
        obj.insert(QString("header_picture"), ::OpenAPI::toJsonValue(m_header_picture));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_picture_url_isSet) {
        obj.insert(QString("picture_url"), ::OpenAPI::toJsonValue(m_picture_url));
    }
    if (m_screen_name_isSet) {
        obj.insert(QString("screen_name"), ::OpenAPI::toJsonValue(m_screen_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIUser::getAbout() const {
    return m_about;
}
void OAIUser::setAbout(const QString &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAIUser::is_about_Set() const{
    return m_about_isSet;
}

bool OAIUser::is_about_Valid() const{
    return m_about_isValid;
}

OAIUser_counts OAIUser::getCounts() const {
    return m_counts;
}
void OAIUser::setCounts(const OAIUser_counts &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIUser::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIUser::is_counts_Valid() const{
    return m_counts_isValid;
}

QString OAIUser::getHeaderPicture() const {
    return m_header_picture;
}
void OAIUser::setHeaderPicture(const QString &header_picture) {
    m_header_picture = header_picture;
    m_header_picture_isSet = true;
}

bool OAIUser::is_header_picture_Set() const{
    return m_header_picture_isSet;
}

bool OAIUser::is_header_picture_Valid() const{
    return m_header_picture_isValid;
}

qint32 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getLocation() const {
    return m_location;
}
void OAIUser::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUser::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUser::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getPictureUrl() const {
    return m_picture_url;
}
void OAIUser::setPictureUrl(const QString &picture_url) {
    m_picture_url = picture_url;
    m_picture_url_isSet = true;
}

bool OAIUser::is_picture_url_Set() const{
    return m_picture_url_isSet;
}

bool OAIUser::is_picture_url_Valid() const{
    return m_picture_url_isValid;
}

QString OAIUser::getScreenName() const {
    return m_screen_name;
}
void OAIUser::setScreenName(const QString &screen_name) {
    m_screen_name = screen_name;
    m_screen_name_isSet = true;
}

bool OAIUser::is_screen_name_Set() const{
    return m_screen_name_isSet;
}

bool OAIUser::is_screen_name_Valid() const{
    return m_screen_name_isValid;
}

QString OAIUser::getUrl() const {
    return m_url;
}
void OAIUser::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUser::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUser::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_picture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
