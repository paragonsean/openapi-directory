/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMapSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMapSettings::OAIMapSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMapSettings::OAIMapSettings() {
    this->initializeModel();
}

OAIMapSettings::~OAIMapSettings() {}

void OAIMapSettings::initializeModel() {

    m_editor_access_isSet = false;
    m_editor_access_isValid = false;

    m_respotting_to_this_map_isSet = false;
    m_respotting_to_this_map_isValid = false;

    m_visitor_access_isSet = false;
    m_visitor_access_isValid = false;
}

void OAIMapSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMapSettings::fromJsonObject(QJsonObject json) {

    m_editor_access_isValid = ::OpenAPI::fromJsonValue(m_editor_access, json[QString("editor_access")]);
    m_editor_access_isSet = !json[QString("editor_access")].isNull() && m_editor_access_isValid;

    m_respotting_to_this_map_isValid = ::OpenAPI::fromJsonValue(m_respotting_to_this_map, json[QString("respotting_to_this_map")]);
    m_respotting_to_this_map_isSet = !json[QString("respotting_to_this_map")].isNull() && m_respotting_to_this_map_isValid;

    m_visitor_access_isValid = ::OpenAPI::fromJsonValue(m_visitor_access, json[QString("visitor_access")]);
    m_visitor_access_isSet = !json[QString("visitor_access")].isNull() && m_visitor_access_isValid;
}

QString OAIMapSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMapSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_editor_access_isSet) {
        obj.insert(QString("editor_access"), ::OpenAPI::toJsonValue(m_editor_access));
    }
    if (m_respotting_to_this_map_isSet) {
        obj.insert(QString("respotting_to_this_map"), ::OpenAPI::toJsonValue(m_respotting_to_this_map));
    }
    if (m_visitor_access_isSet) {
        obj.insert(QString("visitor_access"), ::OpenAPI::toJsonValue(m_visitor_access));
    }
    return obj;
}

QString OAIMapSettings::getEditorAccess() const {
    return m_editor_access;
}
void OAIMapSettings::setEditorAccess(const QString &editor_access) {
    m_editor_access = editor_access;
    m_editor_access_isSet = true;
}

bool OAIMapSettings::is_editor_access_Set() const{
    return m_editor_access_isSet;
}

bool OAIMapSettings::is_editor_access_Valid() const{
    return m_editor_access_isValid;
}

bool OAIMapSettings::isRespottingToThisMap() const {
    return m_respotting_to_this_map;
}
void OAIMapSettings::setRespottingToThisMap(const bool &respotting_to_this_map) {
    m_respotting_to_this_map = respotting_to_this_map;
    m_respotting_to_this_map_isSet = true;
}

bool OAIMapSettings::is_respotting_to_this_map_Set() const{
    return m_respotting_to_this_map_isSet;
}

bool OAIMapSettings::is_respotting_to_this_map_Valid() const{
    return m_respotting_to_this_map_isValid;
}

QString OAIMapSettings::getVisitorAccess() const {
    return m_visitor_access;
}
void OAIMapSettings::setVisitorAccess(const QString &visitor_access) {
    m_visitor_access = visitor_access;
    m_visitor_access_isSet = true;
}

bool OAIMapSettings::is_visitor_access_Set() const{
    return m_visitor_access_isSet;
}

bool OAIMapSettings::is_visitor_access_Valid() const{
    return m_visitor_access_isValid;
}

bool OAIMapSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_editor_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_respotting_to_this_map_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visitor_access_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMapSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
