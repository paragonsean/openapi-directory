/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICommentsApi_H
#define OAI_OAICommentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComment.h"
#include "OAICommentEditable.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICommentsApi : public QObject {
    Q_OBJECT

public:
    OAICommentsApi(const int timeOut = 0);
    ~OAICommentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void commentsIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  comment OAICommentEditable [optional]
    */
    virtual void commentsIdPatch(const qint32 &id, const ::OpenAPI::OptionalParam<OAICommentEditable> &comment = ::OpenAPI::OptionalParam<OAICommentEditable>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void mapsIdCommentsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  comment OAICommentEditable [optional]
    */
    virtual void mapsIdCommentsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAICommentEditable> &comment = ::OpenAPI::OptionalParam<OAICommentEditable>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void spotsIdCommentsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  comment OAICommentEditable [optional]
    */
    virtual void spotsIdCommentsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAICommentEditable> &comment = ::OpenAPI::OptionalParam<OAICommentEditable>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void commentsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void commentsIdPatchCallback(OAIHttpRequestWorker *worker);
    void mapsIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void mapsIdCommentsPostCallback(OAIHttpRequestWorker *worker);
    void spotsIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void spotsIdCommentsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void commentsIdDeleteSignal(OAIComment summary);
    void commentsIdPatchSignal(OAIComment summary);
    void mapsIdCommentsGetSignal(QList<OAIComment> summary);
    void mapsIdCommentsPostSignal(OAIComment summary);
    void spotsIdCommentsGetSignal(QList<OAIComment> summary);
    void spotsIdCommentsPostSignal(OAIComment summary);


    void commentsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void commentsIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void mapsIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void mapsIdCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void spotsIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void spotsIdCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);

    Q_DECL_DEPRECATED_X("Use commentsIdDeleteSignalError() instead")
    void commentsIdDeleteSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commentsIdDeleteSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commentsIdPatchSignalError() instead")
    void commentsIdPatchSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commentsIdPatchSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdCommentsGetSignalError() instead")
    void mapsIdCommentsGetSignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdCommentsGetSignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdCommentsPostSignalError() instead")
    void mapsIdCommentsPostSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdCommentsPostSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdCommentsGetSignalError() instead")
    void spotsIdCommentsGetSignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdCommentsGetSignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdCommentsPostSignalError() instead")
    void spotsIdCommentsPostSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdCommentsPostSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use commentsIdDeleteSignalErrorFull() instead")
    void commentsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commentsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commentsIdPatchSignalErrorFull() instead")
    void commentsIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commentsIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdCommentsGetSignalErrorFull() instead")
    void mapsIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdCommentsPostSignalErrorFull() instead")
    void mapsIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdCommentsGetSignalErrorFull() instead")
    void spotsIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdCommentsPostSignalErrorFull() instead")
    void spotsIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
