/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvent.h
 *
 * 
 */

#ifndef OAIEvent_H
#define OAIEvent_H

#include <QJsonObject>

#include "OAIEventCounts.h"
#include "OAISpot.h"
#include "OAIUser.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEventCounts;
class OAISpot;
class OAIUser;

class OAIEvent : public OAIObject {
public:
    OAIEvent();
    OAIEvent(QString json);
    ~OAIEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEventCounts getCounts() const;
    void setCounts(const OAIEventCounts &counts);
    bool is_counts_Set() const;
    bool is_counts_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getEndsAt() const;
    void setEndsAt(const QDateTime &ends_at);
    bool is_ends_at_Set() const;
    bool is_ends_at_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    double getLat() const;
    void setLat(const double &lat);
    bool is_lat_Set() const;
    bool is_lat_Valid() const;

    double getLon() const;
    void setLon(const double &lon);
    bool is_lon_Set() const;
    bool is_lon_Valid() const;

    qint32 getOwnerId() const;
    void setOwnerId(const qint32 &owner_id);
    bool is_owner_id_Set() const;
    bool is_owner_id_Valid() const;

    QString getPictureUrl() const;
    void setPictureUrl(const QString &picture_url);
    bool is_picture_url_Set() const;
    bool is_picture_url_Valid() const;

    OAISpot getSpot() const;
    void setSpot(const OAISpot &spot);
    bool is_spot_Set() const;
    bool is_spot_Valid() const;

    QDateTime getStartsAt() const;
    void setStartsAt(const QDateTime &starts_at);
    bool is_starts_at_Set() const;
    bool is_starts_at_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    OAIUser getUser() const;
    void setUser(const OAIUser &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEventCounts m_counts;
    bool m_counts_isSet;
    bool m_counts_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_ends_at;
    bool m_ends_at_isSet;
    bool m_ends_at_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    double m_lat;
    bool m_lat_isSet;
    bool m_lat_isValid;

    double m_lon;
    bool m_lon_isSet;
    bool m_lon_isValid;

    qint32 m_owner_id;
    bool m_owner_id_isSet;
    bool m_owner_id_isValid;

    QString m_picture_url;
    bool m_picture_url_isSet;
    bool m_picture_url_isValid;

    OAISpot m_spot;
    bool m_spot_isSet;
    bool m_spot_isValid;

    QDateTime m_starts_at;
    bool m_starts_at_isSet;
    bool m_starts_at_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    OAIUser m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvent)

#endif // OAIEvent_H
