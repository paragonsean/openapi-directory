/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ends_at_isSet = false;
    m_ends_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_picture_url_isSet = false;
    m_picture_url_isValid = false;

    m_spot_isSet = false;
    m_spot_isValid = false;

    m_starts_at_isSet = false;
    m_starts_at_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ends_at_isValid = ::OpenAPI::fromJsonValue(m_ends_at, json[QString("ends_at")]);
    m_ends_at_isSet = !json[QString("ends_at")].isNull() && m_ends_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("owner_id")]);
    m_owner_id_isSet = !json[QString("owner_id")].isNull() && m_owner_id_isValid;

    m_picture_url_isValid = ::OpenAPI::fromJsonValue(m_picture_url, json[QString("picture_url")]);
    m_picture_url_isSet = !json[QString("picture_url")].isNull() && m_picture_url_isValid;

    m_spot_isValid = ::OpenAPI::fromJsonValue(m_spot, json[QString("spot")]);
    m_spot_isSet = !json[QString("spot")].isNull() && m_spot_isValid;

    m_starts_at_isValid = ::OpenAPI::fromJsonValue(m_starts_at, json[QString("starts_at")]);
    m_starts_at_isSet = !json[QString("starts_at")].isNull() && m_starts_at_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("time_zone")]);
    m_time_zone_isSet = !json[QString("time_zone")].isNull() && m_time_zone_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_counts.isSet()) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ends_at_isSet) {
        obj.insert(QString("ends_at"), ::OpenAPI::toJsonValue(m_ends_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("owner_id"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_picture_url_isSet) {
        obj.insert(QString("picture_url"), ::OpenAPI::toJsonValue(m_picture_url));
    }
    if (m_spot.isSet()) {
        obj.insert(QString("spot"), ::OpenAPI::toJsonValue(m_spot));
    }
    if (m_starts_at_isSet) {
        obj.insert(QString("starts_at"), ::OpenAPI::toJsonValue(m_starts_at));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("time_zone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIEventCounts OAIEvent::getCounts() const {
    return m_counts;
}
void OAIEvent::setCounts(const OAIEventCounts &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIEvent::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIEvent::is_counts_Valid() const{
    return m_counts_isValid;
}

QDateTime OAIEvent::getCreatedAt() const {
    return m_created_at;
}
void OAIEvent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIEvent::getDescription() const {
    return m_description;
}
void OAIEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEvent::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIEvent::getEndsAt() const {
    return m_ends_at;
}
void OAIEvent::setEndsAt(const QDateTime &ends_at) {
    m_ends_at = ends_at;
    m_ends_at_isSet = true;
}

bool OAIEvent::is_ends_at_Set() const{
    return m_ends_at_isSet;
}

bool OAIEvent::is_ends_at_Valid() const{
    return m_ends_at_isValid;
}

qint32 OAIEvent::getId() const {
    return m_id;
}
void OAIEvent::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent::is_id_Valid() const{
    return m_id_isValid;
}

double OAIEvent::getLat() const {
    return m_lat;
}
void OAIEvent::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIEvent::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIEvent::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIEvent::getLon() const {
    return m_lon;
}
void OAIEvent::setLon(const double &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIEvent::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIEvent::is_lon_Valid() const{
    return m_lon_isValid;
}

qint32 OAIEvent::getOwnerId() const {
    return m_owner_id;
}
void OAIEvent::setOwnerId(const qint32 &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIEvent::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIEvent::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAIEvent::getPictureUrl() const {
    return m_picture_url;
}
void OAIEvent::setPictureUrl(const QString &picture_url) {
    m_picture_url = picture_url;
    m_picture_url_isSet = true;
}

bool OAIEvent::is_picture_url_Set() const{
    return m_picture_url_isSet;
}

bool OAIEvent::is_picture_url_Valid() const{
    return m_picture_url_isValid;
}

OAISpot OAIEvent::getSpot() const {
    return m_spot;
}
void OAIEvent::setSpot(const OAISpot &spot) {
    m_spot = spot;
    m_spot_isSet = true;
}

bool OAIEvent::is_spot_Set() const{
    return m_spot_isSet;
}

bool OAIEvent::is_spot_Valid() const{
    return m_spot_isValid;
}

QDateTime OAIEvent::getStartsAt() const {
    return m_starts_at;
}
void OAIEvent::setStartsAt(const QDateTime &starts_at) {
    m_starts_at = starts_at;
    m_starts_at_isSet = true;
}

bool OAIEvent::is_starts_at_Set() const{
    return m_starts_at_isSet;
}

bool OAIEvent::is_starts_at_Valid() const{
    return m_starts_at_isValid;
}

QString OAIEvent::getTimeZone() const {
    return m_time_zone;
}
void OAIEvent::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIEvent::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIEvent::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIEvent::getTitle() const {
    return m_title;
}
void OAIEvent::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEvent::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEvent::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIEvent::getUpdatedAt() const {
    return m_updated_at;
}
void OAIEvent::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIEvent::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIEvent::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUser OAIEvent::getUser() const {
    return m_user;
}
void OAIEvent::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEvent::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEvent::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ends_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_starts_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
