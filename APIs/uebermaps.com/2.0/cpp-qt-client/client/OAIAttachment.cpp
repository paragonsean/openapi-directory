/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachment::OAIAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachment::OAIAttachment() {
    this->initializeModel();
}

OAIAttachment::~OAIAttachment() {}

void OAIAttachment::initializeModel() {

    m_attachable_id_isSet = false;
    m_attachable_id_isValid = false;

    m_attachable_type_isSet = false;
    m_attachable_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_file_url_isSet = false;
    m_file_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_map_id_isSet = false;
    m_map_id_isValid = false;

    m_sizes_isSet = false;
    m_sizes_isValid = false;

    m_spot_isSet = false;
    m_spot_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachment::fromJsonObject(QJsonObject json) {

    m_attachable_id_isValid = ::OpenAPI::fromJsonValue(m_attachable_id, json[QString("attachable_id")]);
    m_attachable_id_isSet = !json[QString("attachable_id")].isNull() && m_attachable_id_isValid;

    m_attachable_type_isValid = ::OpenAPI::fromJsonValue(m_attachable_type, json[QString("attachable_type")]);
    m_attachable_type_isSet = !json[QString("attachable_type")].isNull() && m_attachable_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_file_url_isValid = ::OpenAPI::fromJsonValue(m_file_url, json[QString("file_url")]);
    m_file_url_isSet = !json[QString("file_url")].isNull() && m_file_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_map_id_isValid = ::OpenAPI::fromJsonValue(m_map_id, json[QString("map_id")]);
    m_map_id_isSet = !json[QString("map_id")].isNull() && m_map_id_isValid;

    m_sizes_isValid = ::OpenAPI::fromJsonValue(m_sizes, json[QString("sizes")]);
    m_sizes_isSet = !json[QString("sizes")].isNull() && m_sizes_isValid;

    m_spot_isValid = ::OpenAPI::fromJsonValue(m_spot, json[QString("spot")]);
    m_spot_isSet = !json[QString("spot")].isNull() && m_spot_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_attachable_id_isSet) {
        obj.insert(QString("attachable_id"), ::OpenAPI::toJsonValue(m_attachable_id));
    }
    if (m_attachable_type_isSet) {
        obj.insert(QString("attachable_type"), ::OpenAPI::toJsonValue(m_attachable_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_file_url_isSet) {
        obj.insert(QString("file_url"), ::OpenAPI::toJsonValue(m_file_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_map_id_isSet) {
        obj.insert(QString("map_id"), ::OpenAPI::toJsonValue(m_map_id));
    }
    if (m_sizes_isSet) {
        obj.insert(QString("sizes"), ::OpenAPI::toJsonValue(m_sizes));
    }
    if (m_spot.isSet()) {
        obj.insert(QString("spot"), ::OpenAPI::toJsonValue(m_spot));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

qint32 OAIAttachment::getAttachableId() const {
    return m_attachable_id;
}
void OAIAttachment::setAttachableId(const qint32 &attachable_id) {
    m_attachable_id = attachable_id;
    m_attachable_id_isSet = true;
}

bool OAIAttachment::is_attachable_id_Set() const{
    return m_attachable_id_isSet;
}

bool OAIAttachment::is_attachable_id_Valid() const{
    return m_attachable_id_isValid;
}

QString OAIAttachment::getAttachableType() const {
    return m_attachable_type;
}
void OAIAttachment::setAttachableType(const QString &attachable_type) {
    m_attachable_type = attachable_type;
    m_attachable_type_isSet = true;
}

bool OAIAttachment::is_attachable_type_Set() const{
    return m_attachable_type_isSet;
}

bool OAIAttachment::is_attachable_type_Valid() const{
    return m_attachable_type_isValid;
}

QDateTime OAIAttachment::getCreatedAt() const {
    return m_created_at;
}
void OAIAttachment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAttachment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAttachment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAttachment::getDescription() const {
    return m_description;
}
void OAIAttachment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttachment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttachment::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAttachment::getFileUrl() const {
    return m_file_url;
}
void OAIAttachment::setFileUrl(const QString &file_url) {
    m_file_url = file_url;
    m_file_url_isSet = true;
}

bool OAIAttachment::is_file_url_Set() const{
    return m_file_url_isSet;
}

bool OAIAttachment::is_file_url_Valid() const{
    return m_file_url_isValid;
}

qint32 OAIAttachment::getId() const {
    return m_id;
}
void OAIAttachment::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAttachment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAttachment::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIAttachment::getMapId() const {
    return m_map_id;
}
void OAIAttachment::setMapId(const qint32 &map_id) {
    m_map_id = map_id;
    m_map_id_isSet = true;
}

bool OAIAttachment::is_map_id_Set() const{
    return m_map_id_isSet;
}

bool OAIAttachment::is_map_id_Valid() const{
    return m_map_id_isValid;
}

OAIObject OAIAttachment::getSizes() const {
    return m_sizes;
}
void OAIAttachment::setSizes(const OAIObject &sizes) {
    m_sizes = sizes;
    m_sizes_isSet = true;
}

bool OAIAttachment::is_sizes_Set() const{
    return m_sizes_isSet;
}

bool OAIAttachment::is_sizes_Valid() const{
    return m_sizes_isValid;
}

OAISpot OAIAttachment::getSpot() const {
    return m_spot;
}
void OAIAttachment::setSpot(const OAISpot &spot) {
    m_spot = spot;
    m_spot_isSet = true;
}

bool OAIAttachment::is_spot_Set() const{
    return m_spot_isSet;
}

bool OAIAttachment::is_spot_Valid() const{
    return m_spot_isValid;
}

QString OAIAttachment::getStatus() const {
    return m_status;
}
void OAIAttachment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAttachment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAttachment::is_status_Valid() const{
    return m_status_isValid;
}

OAIUser OAIAttachment::getUser() const {
    return m_user;
}
void OAIAttachment::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAttachment::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAttachment::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachable_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sizes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
