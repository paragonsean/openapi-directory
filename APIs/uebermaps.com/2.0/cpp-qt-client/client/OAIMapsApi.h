/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMapsApi_H
#define OAI_OAIMapsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMap.h"
#include "OAIMapEditable.h"
#include "OAIMapWithRelation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMapsApi : public QObject {
    Q_OBJECT

public:
    OAIMapsApi(const int timeOut = 0);
    ~OAIMapsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void mapsGet();

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void mapsIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void mapsIdGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  map OAIMapEditable [optional]
    */
    virtual void mapsIdPatch(const qint32 &id, const ::OpenAPI::OptionalParam<OAIMapEditable> &map = ::OpenAPI::OptionalParam<OAIMapEditable>());

    /**
    * @param[in]  map OAIMapEditable [optional]
    */
    virtual void mapsPost(const ::OpenAPI::OptionalParam<OAIMapEditable> &map = ::OpenAPI::OptionalParam<OAIMapEditable>());

    /**
    * @param[in]  user_id qint32 [required]
    */
    virtual void usersUserIdMapsGet(const qint32 &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mapsGetCallback(OAIHttpRequestWorker *worker);
    void mapsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void mapsIdGetCallback(OAIHttpRequestWorker *worker);
    void mapsIdPatchCallback(OAIHttpRequestWorker *worker);
    void mapsPostCallback(OAIHttpRequestWorker *worker);
    void usersUserIdMapsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mapsGetSignal(QList<OAIMap> summary);
    void mapsIdDeleteSignal(OAIMap summary);
    void mapsIdGetSignal(OAIMapWithRelation summary);
    void mapsIdPatchSignal(OAIMap summary);
    void mapsPostSignal(OAIMap summary);
    void usersUserIdMapsGetSignal(QList<OAIMap> summary);


    void mapsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMap> summary);
    void mapsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIMap summary);
    void mapsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIMapWithRelation summary);
    void mapsIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIMap summary);
    void mapsPostSignalFull(OAIHttpRequestWorker *worker, OAIMap summary);
    void usersUserIdMapsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMap> summary);

    Q_DECL_DEPRECATED_X("Use mapsGetSignalError() instead")
    void mapsGetSignalE(QList<OAIMap> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsGetSignalError(QList<OAIMap> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdDeleteSignalError() instead")
    void mapsIdDeleteSignalE(OAIMap summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdDeleteSignalError(OAIMap summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdGetSignalError() instead")
    void mapsIdGetSignalE(OAIMapWithRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdGetSignalError(OAIMapWithRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdPatchSignalError() instead")
    void mapsIdPatchSignalE(OAIMap summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdPatchSignalError(OAIMap summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsPostSignalError() instead")
    void mapsPostSignalE(OAIMap summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsPostSignalError(OAIMap summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdMapsGetSignalError() instead")
    void usersUserIdMapsGetSignalE(QList<OAIMap> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdMapsGetSignalError(QList<OAIMap> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mapsGetSignalErrorFull() instead")
    void mapsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdDeleteSignalErrorFull() instead")
    void mapsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdGetSignalErrorFull() instead")
    void mapsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdPatchSignalErrorFull() instead")
    void mapsIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsPostSignalErrorFull() instead")
    void mapsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdMapsGetSignalErrorFull() instead")
    void usersUserIdMapsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdMapsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
