/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserFullProfile.h
 *
 * 
 */

#ifndef OAIUserFullProfile_H
#define OAIUserFullProfile_H

#include <QJsonObject>

#include "OAIUser_counts.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser_counts;

class OAIUserFullProfile : public OAIObject {
public:
    OAIUserFullProfile();
    OAIUserFullProfile(QString json);
    ~OAIUserFullProfile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthToken() const;
    void setAuthToken(const QString &auth_token);
    bool is_auth_token_Set() const;
    bool is_auth_token_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    QString getAbout() const;
    void setAbout(const QString &about);
    bool is_about_Set() const;
    bool is_about_Valid() const;

    OAIUser_counts getCounts() const;
    void setCounts(const OAIUser_counts &counts);
    bool is_counts_Set() const;
    bool is_counts_Valid() const;

    QString getHeaderPicture() const;
    void setHeaderPicture(const QString &header_picture);
    bool is_header_picture_Set() const;
    bool is_header_picture_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPictureUrl() const;
    void setPictureUrl(const QString &picture_url);
    bool is_picture_url_Set() const;
    bool is_picture_url_Valid() const;

    QString getScreenName() const;
    void setScreenName(const QString &screen_name);
    bool is_screen_name_Set() const;
    bool is_screen_name_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_auth_token;
    bool m_auth_token_isSet;
    bool m_auth_token_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;

    QString m_about;
    bool m_about_isSet;
    bool m_about_isValid;

    OAIUser_counts m_counts;
    bool m_counts_isSet;
    bool m_counts_isValid;

    QString m_header_picture;
    bool m_header_picture_isSet;
    bool m_header_picture_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_picture_url;
    bool m_picture_url_isSet;
    bool m_picture_url_isValid;

    QString m_screen_name;
    bool m_screen_name_isSet;
    bool m_screen_name_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserFullProfile)

#endif // OAIUserFullProfile_H
