/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRespotsApi_H
#define OAI_OAIRespotsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMap.h"
#include "OAIRespot.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRespotsApi : public QObject {
    Q_OBJECT

public:
    OAIRespotsApi(const int timeOut = 0);
    ~OAIRespotsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void mapsIdRespotsGet(const qint32 &id);

    /**
    * @param[in]  map_id qint32 [required]
    * @param[in]  spot_id qint32 [required]
    */
    virtual void mapsMapIdSpotsSpotIdRespotDelete(const qint32 &map_id, const qint32 &spot_id);


    virtual void respotMapsGet();

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void respotsIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void respotsIdGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  map_id double [required]
    */
    virtual void spotsIdRespotsPost(const qint32 &id, const double &map_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mapsIdRespotsGetCallback(OAIHttpRequestWorker *worker);
    void mapsMapIdSpotsSpotIdRespotDeleteCallback(OAIHttpRequestWorker *worker);
    void respotMapsGetCallback(OAIHttpRequestWorker *worker);
    void respotsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void respotsIdGetCallback(OAIHttpRequestWorker *worker);
    void spotsIdRespotsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mapsIdRespotsGetSignal(QList<OAIRespot> summary);
    void mapsMapIdSpotsSpotIdRespotDeleteSignal(OAIRespot summary);
    void respotMapsGetSignal(QList<OAIMap> summary);
    void respotsIdDeleteSignal(OAIRespot summary);
    void respotsIdGetSignal(OAIRespot summary);
    void spotsIdRespotsPostSignal(OAIRespot summary);


    void mapsIdRespotsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRespot> summary);
    void mapsMapIdSpotsSpotIdRespotDeleteSignalFull(OAIHttpRequestWorker *worker, OAIRespot summary);
    void respotMapsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMap> summary);
    void respotsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIRespot summary);
    void respotsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIRespot summary);
    void spotsIdRespotsPostSignalFull(OAIHttpRequestWorker *worker, OAIRespot summary);

    Q_DECL_DEPRECATED_X("Use mapsIdRespotsGetSignalError() instead")
    void mapsIdRespotsGetSignalE(QList<OAIRespot> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdRespotsGetSignalError(QList<OAIRespot> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsMapIdSpotsSpotIdRespotDeleteSignalError() instead")
    void mapsMapIdSpotsSpotIdRespotDeleteSignalE(OAIRespot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsMapIdSpotsSpotIdRespotDeleteSignalError(OAIRespot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use respotMapsGetSignalError() instead")
    void respotMapsGetSignalE(QList<OAIMap> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void respotMapsGetSignalError(QList<OAIMap> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use respotsIdDeleteSignalError() instead")
    void respotsIdDeleteSignalE(OAIRespot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void respotsIdDeleteSignalError(OAIRespot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use respotsIdGetSignalError() instead")
    void respotsIdGetSignalE(OAIRespot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void respotsIdGetSignalError(OAIRespot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdRespotsPostSignalError() instead")
    void spotsIdRespotsPostSignalE(OAIRespot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdRespotsPostSignalError(OAIRespot summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mapsIdRespotsGetSignalErrorFull() instead")
    void mapsIdRespotsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdRespotsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsMapIdSpotsSpotIdRespotDeleteSignalErrorFull() instead")
    void mapsMapIdSpotsSpotIdRespotDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsMapIdSpotsSpotIdRespotDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use respotMapsGetSignalErrorFull() instead")
    void respotMapsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void respotMapsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use respotsIdDeleteSignalErrorFull() instead")
    void respotsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void respotsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use respotsIdGetSignalErrorFull() instead")
    void respotsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void respotsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdRespotsPostSignalErrorFull() instead")
    void spotsIdRespotsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdRespotsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
