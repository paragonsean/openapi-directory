/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubscriptionsApi_H
#define OAI_OAISubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISubscription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAISubscriptionsApi(const int timeOut = 0);
    ~OAISubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void mapsIdSubscriptionsDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void mapsIdSubscriptionsGet(const qint32 &id);

    /**
    * @param[in]  user_id qint32 [optional]
    * @param[in]  map_id qint32 [optional]
    */
    virtual void subscriptionsGet(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &map_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  map_id double [required]
    */
    virtual void subscriptionsPost(const double &map_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mapsIdSubscriptionsDeleteCallback(OAIHttpRequestWorker *worker);
    void mapsIdSubscriptionsGetCallback(OAIHttpRequestWorker *worker);
    void subscriptionsGetCallback(OAIHttpRequestWorker *worker);
    void subscriptionsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mapsIdSubscriptionsDeleteSignal(OAISubscription summary);
    void mapsIdSubscriptionsGetSignal(QList<OAISubscription> summary);
    void subscriptionsGetSignal(QList<OAISubscription> summary);
    void subscriptionsPostSignal(OAISubscription summary);


    void mapsIdSubscriptionsDeleteSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void mapsIdSubscriptionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscription> summary);
    void subscriptionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscription> summary);
    void subscriptionsPostSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);

    Q_DECL_DEPRECATED_X("Use mapsIdSubscriptionsDeleteSignalError() instead")
    void mapsIdSubscriptionsDeleteSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdSubscriptionsDeleteSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdSubscriptionsGetSignalError() instead")
    void mapsIdSubscriptionsGetSignalE(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdSubscriptionsGetSignalError(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsGetSignalError() instead")
    void subscriptionsGetSignalE(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsGetSignalError(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsPostSignalError() instead")
    void subscriptionsPostSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsPostSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mapsIdSubscriptionsDeleteSignalErrorFull() instead")
    void mapsIdSubscriptionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdSubscriptionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdSubscriptionsGetSignalErrorFull() instead")
    void mapsIdSubscriptionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdSubscriptionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsGetSignalErrorFull() instead")
    void subscriptionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsPostSignalErrorFull() instead")
    void subscriptionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
