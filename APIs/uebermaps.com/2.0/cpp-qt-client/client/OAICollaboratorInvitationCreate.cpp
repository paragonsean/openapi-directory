/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollaboratorInvitationCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollaboratorInvitationCreate::OAICollaboratorInvitationCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollaboratorInvitationCreate::OAICollaboratorInvitationCreate() {
    this->initializeModel();
}

OAICollaboratorInvitationCreate::~OAICollaboratorInvitationCreate() {}

void OAICollaboratorInvitationCreate::initializeModel() {

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_map_id_isSet = false;
    m_map_id_isValid = false;

    m_user_ids_isSet = false;
    m_user_ids_isValid = false;
}

void OAICollaboratorInvitationCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollaboratorInvitationCreate::fromJsonObject(QJsonObject json) {

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("is_admin")]);
    m_is_admin_isSet = !json[QString("is_admin")].isNull() && m_is_admin_isValid;

    m_map_id_isValid = ::OpenAPI::fromJsonValue(m_map_id, json[QString("map_id")]);
    m_map_id_isSet = !json[QString("map_id")].isNull() && m_map_id_isValid;

    m_user_ids_isValid = ::OpenAPI::fromJsonValue(m_user_ids, json[QString("user_ids")]);
    m_user_ids_isSet = !json[QString("user_ids")].isNull() && m_user_ids_isValid;
}

QString OAICollaboratorInvitationCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollaboratorInvitationCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_emails_isSet) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("is_admin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_map_id_isSet) {
        obj.insert(QString("map_id"), ::OpenAPI::toJsonValue(m_map_id));
    }
    if (m_user_ids_isSet) {
        obj.insert(QString("user_ids"), ::OpenAPI::toJsonValue(m_user_ids));
    }
    return obj;
}

QString OAICollaboratorInvitationCreate::getEmails() const {
    return m_emails;
}
void OAICollaboratorInvitationCreate::setEmails(const QString &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAICollaboratorInvitationCreate::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAICollaboratorInvitationCreate::is_emails_Valid() const{
    return m_emails_isValid;
}

bool OAICollaboratorInvitationCreate::isIsAdmin() const {
    return m_is_admin;
}
void OAICollaboratorInvitationCreate::setIsAdmin(const bool &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAICollaboratorInvitationCreate::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAICollaboratorInvitationCreate::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

qint32 OAICollaboratorInvitationCreate::getMapId() const {
    return m_map_id;
}
void OAICollaboratorInvitationCreate::setMapId(const qint32 &map_id) {
    m_map_id = map_id;
    m_map_id_isSet = true;
}

bool OAICollaboratorInvitationCreate::is_map_id_Set() const{
    return m_map_id_isSet;
}

bool OAICollaboratorInvitationCreate::is_map_id_Valid() const{
    return m_map_id_isValid;
}

QString OAICollaboratorInvitationCreate::getUserIds() const {
    return m_user_ids;
}
void OAICollaboratorInvitationCreate::setUserIds(const QString &user_ids) {
    m_user_ids = user_ids;
    m_user_ids_isSet = true;
}

bool OAICollaboratorInvitationCreate::is_user_ids_Set() const{
    return m_user_ids_isSet;
}

bool OAICollaboratorInvitationCreate::is_user_ids_Valid() const{
    return m_user_ids_isValid;
}

bool OAICollaboratorInvitationCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_ids_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollaboratorInvitationCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
