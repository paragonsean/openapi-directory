/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMapCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMapCounts::OAIMapCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMapCounts::OAIMapCounts() {
    this->initializeModel();
}

OAIMapCounts::~OAIMapCounts() {}

void OAIMapCounts::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_impressions_isSet = false;
    m_impressions_isValid = false;

    m_respots_isSet = false;
    m_respots_isValid = false;

    m_spots_isSet = false;
    m_spots_isValid = false;

    m_subscriptions_isSet = false;
    m_subscriptions_isValid = false;
}

void OAIMapCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMapCounts::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_impressions_isValid = ::OpenAPI::fromJsonValue(m_impressions, json[QString("impressions")]);
    m_impressions_isSet = !json[QString("impressions")].isNull() && m_impressions_isValid;

    m_respots_isValid = ::OpenAPI::fromJsonValue(m_respots, json[QString("respots")]);
    m_respots_isSet = !json[QString("respots")].isNull() && m_respots_isValid;

    m_spots_isValid = ::OpenAPI::fromJsonValue(m_spots, json[QString("spots")]);
    m_spots_isSet = !json[QString("spots")].isNull() && m_spots_isValid;

    m_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_subscriptions, json[QString("subscriptions")]);
    m_subscriptions_isSet = !json[QString("subscriptions")].isNull() && m_subscriptions_isValid;
}

QString OAIMapCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMapCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments_isSet) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_impressions_isSet) {
        obj.insert(QString("impressions"), ::OpenAPI::toJsonValue(m_impressions));
    }
    if (m_respots_isSet) {
        obj.insert(QString("respots"), ::OpenAPI::toJsonValue(m_respots));
    }
    if (m_spots_isSet) {
        obj.insert(QString("spots"), ::OpenAPI::toJsonValue(m_spots));
    }
    if (m_subscriptions_isSet) {
        obj.insert(QString("subscriptions"), ::OpenAPI::toJsonValue(m_subscriptions));
    }
    return obj;
}

qint32 OAIMapCounts::getAttachments() const {
    return m_attachments;
}
void OAIMapCounts::setAttachments(const qint32 &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIMapCounts::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIMapCounts::is_attachments_Valid() const{
    return m_attachments_isValid;
}

qint32 OAIMapCounts::getComments() const {
    return m_comments;
}
void OAIMapCounts::setComments(const qint32 &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIMapCounts::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIMapCounts::is_comments_Valid() const{
    return m_comments_isValid;
}

qint32 OAIMapCounts::getImpressions() const {
    return m_impressions;
}
void OAIMapCounts::setImpressions(const qint32 &impressions) {
    m_impressions = impressions;
    m_impressions_isSet = true;
}

bool OAIMapCounts::is_impressions_Set() const{
    return m_impressions_isSet;
}

bool OAIMapCounts::is_impressions_Valid() const{
    return m_impressions_isValid;
}

qint32 OAIMapCounts::getRespots() const {
    return m_respots;
}
void OAIMapCounts::setRespots(const qint32 &respots) {
    m_respots = respots;
    m_respots_isSet = true;
}

bool OAIMapCounts::is_respots_Set() const{
    return m_respots_isSet;
}

bool OAIMapCounts::is_respots_Valid() const{
    return m_respots_isValid;
}

qint32 OAIMapCounts::getSpots() const {
    return m_spots;
}
void OAIMapCounts::setSpots(const qint32 &spots) {
    m_spots = spots;
    m_spots_isSet = true;
}

bool OAIMapCounts::is_spots_Set() const{
    return m_spots_isSet;
}

bool OAIMapCounts::is_spots_Valid() const{
    return m_spots_isValid;
}

qint32 OAIMapCounts::getSubscriptions() const {
    return m_subscriptions;
}
void OAIMapCounts::setSubscriptions(const qint32 &subscriptions) {
    m_subscriptions = subscriptions;
    m_subscriptions_isSet = true;
}

bool OAIMapCounts::is_subscriptions_Set() const{
    return m_subscriptions_isSet;
}

bool OAIMapCounts::is_subscriptions_Valid() const{
    return m_subscriptions_isValid;
}

bool OAIMapCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impressions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_respots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriptions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMapCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
