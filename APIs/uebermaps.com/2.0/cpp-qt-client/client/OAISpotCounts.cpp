/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpotCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpotCounts::OAISpotCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpotCounts::OAISpotCounts() {
    this->initializeModel();
}

OAISpotCounts::~OAISpotCounts() {}

void OAISpotCounts::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_respot_isSet = false;
    m_respot_isValid = false;
}

void OAISpotCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpotCounts::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_respot_isValid = ::OpenAPI::fromJsonValue(m_respot, json[QString("respot")]);
    m_respot_isSet = !json[QString("respot")].isNull() && m_respot_isValid;
}

QString OAISpotCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpotCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments_isSet) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_respot_isSet) {
        obj.insert(QString("respot"), ::OpenAPI::toJsonValue(m_respot));
    }
    return obj;
}

qint32 OAISpotCounts::getAttachments() const {
    return m_attachments;
}
void OAISpotCounts::setAttachments(const qint32 &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAISpotCounts::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAISpotCounts::is_attachments_Valid() const{
    return m_attachments_isValid;
}

qint32 OAISpotCounts::getComments() const {
    return m_comments;
}
void OAISpotCounts::setComments(const qint32 &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAISpotCounts::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAISpotCounts::is_comments_Valid() const{
    return m_comments_isValid;
}

qint32 OAISpotCounts::getRespot() const {
    return m_respot;
}
void OAISpotCounts::setRespot(const qint32 &respot) {
    m_respot = respot;
    m_respot_isSet = true;
}

bool OAISpotCounts::is_respot_Set() const{
    return m_respot_isSet;
}

bool OAISpotCounts::is_respot_Valid() const{
    return m_respot_isValid;
}

bool OAISpotCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_respot_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpotCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
