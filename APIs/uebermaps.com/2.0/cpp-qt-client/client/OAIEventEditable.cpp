/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventEditable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventEditable::OAIEventEditable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventEditable::OAIEventEditable() {
    this->initializeModel();
}

OAIEventEditable::~OAIEventEditable() {}

void OAIEventEditable::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_ends_at_isSet = false;
    m_ends_at_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_picture_isSet = false;
    m_picture_isValid = false;

    m_starts_at_isSet = false;
    m_starts_at_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIEventEditable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventEditable::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ends_at_isValid = ::OpenAPI::fromJsonValue(m_ends_at, json[QString("ends_at")]);
    m_ends_at_isSet = !json[QString("ends_at")].isNull() && m_ends_at_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_picture_isValid = ::OpenAPI::fromJsonValue(m_picture, json[QString("picture")]);
    m_picture_isSet = !json[QString("picture")].isNull() && m_picture_isValid;

    m_starts_at_isValid = ::OpenAPI::fromJsonValue(m_starts_at, json[QString("starts_at")]);
    m_starts_at_isSet = !json[QString("starts_at")].isNull() && m_starts_at_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("time_zone")]);
    m_time_zone_isSet = !json[QString("time_zone")].isNull() && m_time_zone_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIEventEditable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventEditable::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ends_at_isSet) {
        obj.insert(QString("ends_at"), ::OpenAPI::toJsonValue(m_ends_at));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_picture_isSet) {
        obj.insert(QString("picture"), ::OpenAPI::toJsonValue(m_picture));
    }
    if (m_starts_at_isSet) {
        obj.insert(QString("starts_at"), ::OpenAPI::toJsonValue(m_starts_at));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("time_zone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIEventEditable::getDescription() const {
    return m_description;
}
void OAIEventEditable::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventEditable::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventEditable::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIEventEditable::getEndsAt() const {
    return m_ends_at;
}
void OAIEventEditable::setEndsAt(const QDateTime &ends_at) {
    m_ends_at = ends_at;
    m_ends_at_isSet = true;
}

bool OAIEventEditable::is_ends_at_Set() const{
    return m_ends_at_isSet;
}

bool OAIEventEditable::is_ends_at_Valid() const{
    return m_ends_at_isValid;
}

double OAIEventEditable::getLat() const {
    return m_lat;
}
void OAIEventEditable::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIEventEditable::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIEventEditable::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIEventEditable::getLon() const {
    return m_lon;
}
void OAIEventEditable::setLon(const double &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIEventEditable::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIEventEditable::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAIEventEditable::getPicture() const {
    return m_picture;
}
void OAIEventEditable::setPicture(const QString &picture) {
    m_picture = picture;
    m_picture_isSet = true;
}

bool OAIEventEditable::is_picture_Set() const{
    return m_picture_isSet;
}

bool OAIEventEditable::is_picture_Valid() const{
    return m_picture_isValid;
}

QDateTime OAIEventEditable::getStartsAt() const {
    return m_starts_at;
}
void OAIEventEditable::setStartsAt(const QDateTime &starts_at) {
    m_starts_at = starts_at;
    m_starts_at_isSet = true;
}

bool OAIEventEditable::is_starts_at_Set() const{
    return m_starts_at_isSet;
}

bool OAIEventEditable::is_starts_at_Valid() const{
    return m_starts_at_isValid;
}

QString OAIEventEditable::getTimeZone() const {
    return m_time_zone;
}
void OAIEventEditable::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIEventEditable::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIEventEditable::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIEventEditable::getTitle() const {
    return m_title;
}
void OAIEventEditable::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEventEditable::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEventEditable::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIEventEditable::getUserId() const {
    return m_user_id;
}
void OAIEventEditable::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIEventEditable::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIEventEditable::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIEventEditable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ends_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starts_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventEditable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
