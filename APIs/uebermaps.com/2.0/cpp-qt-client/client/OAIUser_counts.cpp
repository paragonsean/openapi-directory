/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_counts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_counts::OAIUser_counts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_counts::OAIUser_counts() {
    this->initializeModel();
}

OAIUser_counts::~OAIUser_counts() {}

void OAIUser_counts::initializeModel() {

    m_maps_isSet = false;
    m_maps_isValid = false;
}

void OAIUser_counts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_counts::fromJsonObject(QJsonObject json) {

    m_maps_isValid = ::OpenAPI::fromJsonValue(m_maps, json[QString("maps")]);
    m_maps_isSet = !json[QString("maps")].isNull() && m_maps_isValid;
}

QString OAIUser_counts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_counts::asJsonObject() const {
    QJsonObject obj;
    if (m_maps_isSet) {
        obj.insert(QString("maps"), ::OpenAPI::toJsonValue(m_maps));
    }
    return obj;
}

qint32 OAIUser_counts::getMaps() const {
    return m_maps;
}
void OAIUser_counts::setMaps(const qint32 &maps) {
    m_maps = maps;
    m_maps_isSet = true;
}

bool OAIUser_counts::is_maps_Set() const{
    return m_maps_isSet;
}

bool OAIUser_counts::is_maps_Valid() const{
    return m_maps_isValid;
}

bool OAIUser_counts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_counts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
