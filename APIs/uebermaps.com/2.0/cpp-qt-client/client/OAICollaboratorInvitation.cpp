/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollaboratorInvitation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollaboratorInvitation::OAICollaboratorInvitation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollaboratorInvitation::OAICollaboratorInvitation() {
    this->initializeModel();
}

OAICollaboratorInvitation::~OAICollaboratorInvitation() {}

void OAICollaboratorInvitation::initializeModel() {

    m_accepted_isSet = false;
    m_accepted_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invited_by_user_isSet = false;
    m_invited_by_user_isValid = false;

    m_map_isSet = false;
    m_map_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAICollaboratorInvitation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollaboratorInvitation::fromJsonObject(QJsonObject json) {

    m_accepted_isValid = ::OpenAPI::fromJsonValue(m_accepted, json[QString("accepted")]);
    m_accepted_isSet = !json[QString("accepted")].isNull() && m_accepted_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invited_by_user_isValid = ::OpenAPI::fromJsonValue(m_invited_by_user, json[QString("invited_by_user")]);
    m_invited_by_user_isSet = !json[QString("invited_by_user")].isNull() && m_invited_by_user_isValid;

    m_map_isValid = ::OpenAPI::fromJsonValue(m_map, json[QString("map")]);
    m_map_isSet = !json[QString("map")].isNull() && m_map_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAICollaboratorInvitation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollaboratorInvitation::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_isSet) {
        obj.insert(QString("accepted"), ::OpenAPI::toJsonValue(m_accepted));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invited_by_user.isSet()) {
        obj.insert(QString("invited_by_user"), ::OpenAPI::toJsonValue(m_invited_by_user));
    }
    if (m_map.isSet()) {
        obj.insert(QString("map"), ::OpenAPI::toJsonValue(m_map));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

bool OAICollaboratorInvitation::isAccepted() const {
    return m_accepted;
}
void OAICollaboratorInvitation::setAccepted(const bool &accepted) {
    m_accepted = accepted;
    m_accepted_isSet = true;
}

bool OAICollaboratorInvitation::is_accepted_Set() const{
    return m_accepted_isSet;
}

bool OAICollaboratorInvitation::is_accepted_Valid() const{
    return m_accepted_isValid;
}

QDateTime OAICollaboratorInvitation::getCreatedAt() const {
    return m_created_at;
}
void OAICollaboratorInvitation::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICollaboratorInvitation::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICollaboratorInvitation::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICollaboratorInvitation::getEmail() const {
    return m_email;
}
void OAICollaboratorInvitation::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICollaboratorInvitation::is_email_Set() const{
    return m_email_isSet;
}

bool OAICollaboratorInvitation::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICollaboratorInvitation::getGroup() const {
    return m_group;
}
void OAICollaboratorInvitation::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAICollaboratorInvitation::is_group_Set() const{
    return m_group_isSet;
}

bool OAICollaboratorInvitation::is_group_Valid() const{
    return m_group_isValid;
}

qint32 OAICollaboratorInvitation::getId() const {
    return m_id;
}
void OAICollaboratorInvitation::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollaboratorInvitation::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollaboratorInvitation::is_id_Valid() const{
    return m_id_isValid;
}

OAIUser OAICollaboratorInvitation::getInvitedByUser() const {
    return m_invited_by_user;
}
void OAICollaboratorInvitation::setInvitedByUser(const OAIUser &invited_by_user) {
    m_invited_by_user = invited_by_user;
    m_invited_by_user_isSet = true;
}

bool OAICollaboratorInvitation::is_invited_by_user_Set() const{
    return m_invited_by_user_isSet;
}

bool OAICollaboratorInvitation::is_invited_by_user_Valid() const{
    return m_invited_by_user_isValid;
}

OAIMap OAICollaboratorInvitation::getMap() const {
    return m_map;
}
void OAICollaboratorInvitation::setMap(const OAIMap &map) {
    m_map = map;
    m_map_isSet = true;
}

bool OAICollaboratorInvitation::is_map_Set() const{
    return m_map_isSet;
}

bool OAICollaboratorInvitation::is_map_Valid() const{
    return m_map_isValid;
}

bool OAICollaboratorInvitation::isSent() const {
    return m_sent;
}
void OAICollaboratorInvitation::setSent(const bool &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAICollaboratorInvitation::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAICollaboratorInvitation::is_sent_Valid() const{
    return m_sent_isValid;
}

QDateTime OAICollaboratorInvitation::getUpdatedAt() const {
    return m_updated_at;
}
void OAICollaboratorInvitation::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICollaboratorInvitation::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICollaboratorInvitation::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUser OAICollaboratorInvitation::getUser() const {
    return m_user;
}
void OAICollaboratorInvitation::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICollaboratorInvitation::is_user_Set() const{
    return m_user_isSet;
}

bool OAICollaboratorInvitation::is_user_Valid() const{
    return m_user_isValid;
}

bool OAICollaboratorInvitation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_by_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollaboratorInvitation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
