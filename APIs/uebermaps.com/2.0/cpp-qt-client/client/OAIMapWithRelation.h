/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMapWithRelation.h
 *
 * 
 */

#ifndef OAIMapWithRelation_H
#define OAIMapWithRelation_H

#include <QJsonObject>

#include "OAIMapCounts.h"
#include "OAIMapRelation.h"
#include "OAIMapSettings.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMapCounts;
class OAIMapSettings;
class OAIMapRelation;

class OAIMapWithRelation : public OAIObject {
public:
    OAIMapWithRelation();
    OAIMapWithRelation(QString json);
    ~OAIMapWithRelation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMapCounts getCounts() const;
    void setCounts(const OAIMapCounts &counts);
    bool is_counts_Set() const;
    bool is_counts_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIMapSettings getMapSettings() const;
    void setMapSettings(const OAIMapSettings &map_settings);
    bool is_map_settings_Set() const;
    bool is_map_settings_Valid() const;

    qint32 getOwnerId() const;
    void setOwnerId(const qint32 &owner_id);
    bool is_owner_id_Set() const;
    bool is_owner_id_Valid() const;

    QString getPictureUrl() const;
    void setPictureUrl(const QString &picture_url);
    bool is_picture_url_Set() const;
    bool is_picture_url_Valid() const;

    OAIMapRelation getRelation() const;
    void setRelation(const OAIMapRelation &relation);
    bool is_relation_Set() const;
    bool is_relation_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getVisibility() const;
    void setVisibility(const QString &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMapCounts m_counts;
    bool m_counts_isSet;
    bool m_counts_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIMapSettings m_map_settings;
    bool m_map_settings_isSet;
    bool m_map_settings_isValid;

    qint32 m_owner_id;
    bool m_owner_id_isSet;
    bool m_owner_id_isValid;

    QString m_picture_url;
    bool m_picture_url_isSet;
    bool m_picture_url_isValid;

    OAIMapRelation m_relation;
    bool m_relation_isSet;
    bool m_relation_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMapWithRelation)

#endif // OAIMapWithRelation_H
