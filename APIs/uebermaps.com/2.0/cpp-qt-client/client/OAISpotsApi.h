/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISpotsApi_H
#define OAI_OAISpotsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISpot.h"
#include "OAISpotEditable.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISpotsApi : public QObject {
    Q_OBJECT

public:
    OAISpotsApi(const int timeOut = 0);
    ~OAISpotsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  order QString [optional]
    */
    virtual void mapsIdSpotsGet(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  spot OAISpotEditable [required]
    */
    virtual void mapsIdSpotsPost(const qint32 &id, const OAISpotEditable &spot);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  map_id qint32 [required]
    */
    virtual void mapsMapIdSpotsIdGet(const qint32 &id, const qint32 &map_id);

    /**
    * @param[in]  order QString [optional]
    */
    virtual void spotsGet(const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void spotsIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  spot OAISpotEditable [optional]
    */
    virtual void spotsIdPatch(const qint32 &id, const ::OpenAPI::OptionalParam<OAISpotEditable> &spot = ::OpenAPI::OptionalParam<OAISpotEditable>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mapsIdSpotsGetCallback(OAIHttpRequestWorker *worker);
    void mapsIdSpotsPostCallback(OAIHttpRequestWorker *worker);
    void mapsMapIdSpotsIdGetCallback(OAIHttpRequestWorker *worker);
    void spotsGetCallback(OAIHttpRequestWorker *worker);
    void spotsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void spotsIdPatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mapsIdSpotsGetSignal(QList<OAISpot> summary);
    void mapsIdSpotsPostSignal(OAISpot summary);
    void mapsMapIdSpotsIdGetSignal(OAISpot summary);
    void spotsGetSignal(QList<OAISpot> summary);
    void spotsIdDeleteSignal(OAISpot summary);
    void spotsIdPatchSignal(OAISpot summary);


    void mapsIdSpotsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISpot> summary);
    void mapsIdSpotsPostSignalFull(OAIHttpRequestWorker *worker, OAISpot summary);
    void mapsMapIdSpotsIdGetSignalFull(OAIHttpRequestWorker *worker, OAISpot summary);
    void spotsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISpot> summary);
    void spotsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAISpot summary);
    void spotsIdPatchSignalFull(OAIHttpRequestWorker *worker, OAISpot summary);

    Q_DECL_DEPRECATED_X("Use mapsIdSpotsGetSignalError() instead")
    void mapsIdSpotsGetSignalE(QList<OAISpot> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdSpotsGetSignalError(QList<OAISpot> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdSpotsPostSignalError() instead")
    void mapsIdSpotsPostSignalE(OAISpot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdSpotsPostSignalError(OAISpot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsMapIdSpotsIdGetSignalError() instead")
    void mapsMapIdSpotsIdGetSignalE(OAISpot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsMapIdSpotsIdGetSignalError(OAISpot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsGetSignalError() instead")
    void spotsGetSignalE(QList<OAISpot> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsGetSignalError(QList<OAISpot> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdDeleteSignalError() instead")
    void spotsIdDeleteSignalE(OAISpot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdDeleteSignalError(OAISpot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdPatchSignalError() instead")
    void spotsIdPatchSignalE(OAISpot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdPatchSignalError(OAISpot summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mapsIdSpotsGetSignalErrorFull() instead")
    void mapsIdSpotsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdSpotsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsIdSpotsPostSignalErrorFull() instead")
    void mapsIdSpotsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsIdSpotsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapsMapIdSpotsIdGetSignalErrorFull() instead")
    void mapsMapIdSpotsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapsMapIdSpotsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsGetSignalErrorFull() instead")
    void spotsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdDeleteSignalErrorFull() instead")
    void spotsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdPatchSignalErrorFull() instead")
    void spotsIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
