/**
 * uebermaps API endpoints
 * Enable people to store spots on public and private maps
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsApi_H
#define OAI_OAIEventsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEvent.h"
#include "OAIEventEditable.h"
#include "OAIMap.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsApi : public QObject {
    Q_OBJECT

public:
    OAIEventsApi(const int timeOut = 0);
    ~OAIEventsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  timeframe_start QString [optional]
    * @param[in]  timeframe_end QString [optional]
    * @param[in]  bounds QString [optional]
    */
    virtual void eventsGet(const ::OpenAPI::OptionalParam<QString> &timeframe_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timeframe_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bounds = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void eventsIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void eventsIdGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  event OAIEventEditable [optional]
    */
    virtual void eventsIdPatch(const qint32 &id, const ::OpenAPI::OptionalParam<OAIEventEditable> &event = ::OpenAPI::OptionalParam<OAIEventEditable>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  timeframe_start QString [optional]
    * @param[in]  timeframe_end QString [optional]
    * @param[in]  bounds QString [optional]
    */
    virtual void spotsIdEventsGet(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &timeframe_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timeframe_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bounds = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  event OAIEventEditable [optional]
    */
    virtual void spotsIdEventsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAIEventEditable> &event = ::OpenAPI::OptionalParam<OAIEventEditable>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void eventsGetCallback(OAIHttpRequestWorker *worker);
    void eventsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void eventsIdGetCallback(OAIHttpRequestWorker *worker);
    void eventsIdPatchCallback(OAIHttpRequestWorker *worker);
    void spotsIdEventsGetCallback(OAIHttpRequestWorker *worker);
    void spotsIdEventsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void eventsGetSignal(QList<OAIEvent> summary);
    void eventsIdDeleteSignal(OAIEvent summary);
    void eventsIdGetSignal(OAIEvent summary);
    void eventsIdPatchSignal(OAIMap summary);
    void spotsIdEventsGetSignal(QList<OAIEvent> summary);
    void spotsIdEventsPostSignal(OAIEvent summary);


    void eventsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void eventsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void eventsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void eventsIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIMap summary);
    void spotsIdEventsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void spotsIdEventsPostSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);

    Q_DECL_DEPRECATED_X("Use eventsGetSignalError() instead")
    void eventsGetSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdDeleteSignalError() instead")
    void eventsIdDeleteSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdDeleteSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdGetSignalError() instead")
    void eventsIdGetSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdGetSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdPatchSignalError() instead")
    void eventsIdPatchSignalE(OAIMap summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdPatchSignalError(OAIMap summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdEventsGetSignalError() instead")
    void spotsIdEventsGetSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdEventsGetSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdEventsPostSignalError() instead")
    void spotsIdEventsPostSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdEventsPostSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use eventsGetSignalErrorFull() instead")
    void eventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdDeleteSignalErrorFull() instead")
    void eventsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdGetSignalErrorFull() instead")
    void eventsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdPatchSignalErrorFull() instead")
    void eventsIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdEventsGetSignalErrorFull() instead")
    void spotsIdEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spotsIdEventsPostSignalErrorFull() instead")
    void spotsIdEventsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spotsIdEventsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
