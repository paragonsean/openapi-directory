/*
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CompleteCodenameLsit;
import org.openapitools.client.model.DetailedOrderingLevelInfo;
import org.openapitools.client.model.DetailedProductInformation;
import org.openapitools.client.model.ProductListingLevelInfo;
import org.openapitools.client.model.UnsuccessfulOperation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCodeName
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCodeNameCall(String localeGeoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/products/get-codename";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (localeGeoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale_geo_id", localeGeoId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCodeNameValidateBeforeCall(String localeGeoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localeGeoId' is set
        if (localeGeoId == null) {
            throw new ApiException("Missing the required parameter 'localeGeoId' when calling getCodeName(Async)");
        }

        return getCodeNameCall(localeGeoId, _callback);

    }

    /**
     * 5. Get list of codename details for Intel products.
     * Use this to get codename details for Intel products. No pagination supported.
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @return CompleteCodenameLsit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public CompleteCodenameLsit getCodeName(String localeGeoId) throws ApiException {
        ApiResponse<CompleteCodenameLsit> localVarResp = getCodeNameWithHttpInfo(localeGeoId);
        return localVarResp.getData();
    }

    /**
     * 5. Get list of codename details for Intel products.
     * Use this to get codename details for Intel products. No pagination supported.
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @return ApiResponse&lt;CompleteCodenameLsit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompleteCodenameLsit> getCodeNameWithHttpInfo(String localeGeoId) throws ApiException {
        okhttp3.Call localVarCall = getCodeNameValidateBeforeCall(localeGeoId, null);
        Type localVarReturnType = new TypeToken<CompleteCodenameLsit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 5. Get list of codename details for Intel products. (asynchronously)
     * Use this to get codename details for Intel products. No pagination supported.
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCodeNameAsync(String localeGeoId, final ApiCallback<CompleteCodenameLsit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCodeNameValidateBeforeCall(localeGeoId, _callback);
        Type localVarReturnType = new TypeToken<CompleteCodenameLsit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductInfo
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param productId Product id&#39;s that needs to be filtered. Only max of 40 products are supported now. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values.&lt;br/&gt;&lt;br/&gt;Example: [\&quot;223\&quot;,\&quot;224\&quot;] (required)
     * @param includeReference If send \&quot;true\&quot;, this will fetch variant/compatible info into result set. Default is false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductInfoCall(String localeGeoId, String productId, String includeReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/products/get-products-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (localeGeoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale_geo_id", localeGeoId));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (includeReference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_reference", includeReference));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductInfoValidateBeforeCall(String localeGeoId, String productId, String includeReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localeGeoId' is set
        if (localeGeoId == null) {
            throw new ApiException("Missing the required parameter 'localeGeoId' when calling getProductInfo(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductInfo(Async)");
        }

        return getProductInfoCall(localeGeoId, productId, includeReference, _callback);

    }

    /**
     * 2. Get complete product info with product id.
     * Use this to get complete product info. No pagination supported.
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param productId Product id&#39;s that needs to be filtered. Only max of 40 products are supported now. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values.&lt;br/&gt;&lt;br/&gt;Example: [\&quot;223\&quot;,\&quot;224\&quot;] (required)
     * @param includeReference If send \&quot;true\&quot;, this will fetch variant/compatible info into result set. Default is false. (optional)
     * @return DetailedProductInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public DetailedProductInformation getProductInfo(String localeGeoId, String productId, String includeReference) throws ApiException {
        ApiResponse<DetailedProductInformation> localVarResp = getProductInfoWithHttpInfo(localeGeoId, productId, includeReference);
        return localVarResp.getData();
    }

    /**
     * 2. Get complete product info with product id.
     * Use this to get complete product info. No pagination supported.
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param productId Product id&#39;s that needs to be filtered. Only max of 40 products are supported now. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values.&lt;br/&gt;&lt;br/&gt;Example: [\&quot;223\&quot;,\&quot;224\&quot;] (required)
     * @param includeReference If send \&quot;true\&quot;, this will fetch variant/compatible info into result set. Default is false. (optional)
     * @return ApiResponse&lt;DetailedProductInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetailedProductInformation> getProductInfoWithHttpInfo(String localeGeoId, String productId, String includeReference) throws ApiException {
        okhttp3.Call localVarCall = getProductInfoValidateBeforeCall(localeGeoId, productId, includeReference, null);
        Type localVarReturnType = new TypeToken<DetailedProductInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 2. Get complete product info with product id. (asynchronously)
     * Use this to get complete product info. No pagination supported.
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param productId Product id&#39;s that needs to be filtered. Only max of 40 products are supported now. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values.&lt;br/&gt;&lt;br/&gt;Example: [\&quot;223\&quot;,\&quot;224\&quot;] (required)
     * @param includeReference If send \&quot;true\&quot;, this will fetch variant/compatible info into result set. Default is false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductInfoAsync(String localeGeoId, String productId, String includeReference, final ApiCallback<DetailedProductInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductInfoValidateBeforeCall(localeGeoId, productId, includeReference, _callback);
        Type localVarReturnType = new TypeToken<DetailedProductInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductList
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param categoryId Filter products based on one or multiple category id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;873\&quot;]&lt;br/&gt;&lt;br/&gt;Categories Available:&lt;br/&gt; Processors &#x3D; 873, Server Products &#x3D; 1201, Mini PC&#39;s &#x3D; 98414, Wireless Networking &#x3D; 59485, Ethernet Products &#x3D; 36773, Fabric products &#x3D; 70021, Memory and Storage &#x3D; 35125, Chipsets &#x3D; 53, Graphics Drivers &#x3D; 80939 &lt;br/&gt;&lt;br/&gt; (optional)
     * @param productId Filter products based on one or multiple product id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;123003\&quot;]&lt;br/&gt;&lt;br/&gt; (optional)
     * @param highlights Specification values which needs to be pulled from product data. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;CoreCount\&quot;, \&quot;StatusCodeText\&quot;]&lt;br/&gt;&lt;br/&gt; (optional)
     * @param sort Indicates sorting fields. Accepts array of objects in format like: [{\&quot;field\&quot;:\&quot;name\&quot;,\&quot;order\&quot;:\&quot;ASC\&quot;}].&lt;br/&gt;&lt;br/&gt;Any specification that we get from get-product-info can be used to sort result. Other generic sort field is \&quot;name\&quot;.&lt;br/&gt;&lt;br/&gt; (optional)
     * @param filters Allows to filter data.&lt;br/&gt;&lt;br/&gt;Format of filter: [{\&quot;type\&quot;:\&quot;specvalue\&quot;,\&quot;name\&quot;:\&quot;ThreadCount\&quot;,\&quot;gteq\&quot;:\&quot;4\&quot;}]&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Available operators are:&lt;/b&gt; \&quot;eq\&quot;: equal to, \&quot;neq\&quot;: not equal to, \&quot;lteq\&quot;: less than or equal to, \&quot;gteq\&quot;: greater than or equal to, \&quot;swc\&quot;: starts with characters, \&quot;nswc\&quot;: not starting with characters, \&quot;cts\&quot;: contains, \&quot;ncts\&quot;: not contains&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Conditions:&lt;/b&gt; By default all objects works on an AND condition. But inside an object we have the capability to put an \&quot;OR\&quot; or \&quot;AND\&quot; condition.&lt;br/&gt;Example conditions: [{\&quot;type\&quot;:\&quot;specvalue\&quot;,\&quot;name\&quot;:\&quot;ThreadCount\&quot;,\&quot;ncts\&quot;:\&quot;4,5\&quot;,\&quot;cond\&quot;:\&quot;AND\&quot;}]&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; (optional)
     * @param perPage Filter number of products in response to desired size. (optional)
     * @param pageNo Indicates page number for pagination of results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductListCall(String localeGeoId, String categoryId, String productId, String highlights, String sort, String filters, Integer perPage, Integer pageNo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/products/get-products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (localeGeoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale_geo_id", localeGeoId));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (highlights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highlights", highlights));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (pageNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_no", pageNo));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductListValidateBeforeCall(String localeGeoId, String categoryId, String productId, String highlights, String sort, String filters, Integer perPage, Integer pageNo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localeGeoId' is set
        if (localeGeoId == null) {
            throw new ApiException("Missing the required parameter 'localeGeoId' when calling getProductList(Async)");
        }

        return getProductListCall(localeGeoId, categoryId, productId, highlights, sort, filters, perPage, pageNo, _callback);

    }

    /**
     * 1. Find products by product id or category id
     * Use this to get basic details of products with pagination. Can be used to generate listing page for products.
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param categoryId Filter products based on one or multiple category id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;873\&quot;]&lt;br/&gt;&lt;br/&gt;Categories Available:&lt;br/&gt; Processors &#x3D; 873, Server Products &#x3D; 1201, Mini PC&#39;s &#x3D; 98414, Wireless Networking &#x3D; 59485, Ethernet Products &#x3D; 36773, Fabric products &#x3D; 70021, Memory and Storage &#x3D; 35125, Chipsets &#x3D; 53, Graphics Drivers &#x3D; 80939 &lt;br/&gt;&lt;br/&gt; (optional)
     * @param productId Filter products based on one or multiple product id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;123003\&quot;]&lt;br/&gt;&lt;br/&gt; (optional)
     * @param highlights Specification values which needs to be pulled from product data. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;CoreCount\&quot;, \&quot;StatusCodeText\&quot;]&lt;br/&gt;&lt;br/&gt; (optional)
     * @param sort Indicates sorting fields. Accepts array of objects in format like: [{\&quot;field\&quot;:\&quot;name\&quot;,\&quot;order\&quot;:\&quot;ASC\&quot;}].&lt;br/&gt;&lt;br/&gt;Any specification that we get from get-product-info can be used to sort result. Other generic sort field is \&quot;name\&quot;.&lt;br/&gt;&lt;br/&gt; (optional)
     * @param filters Allows to filter data.&lt;br/&gt;&lt;br/&gt;Format of filter: [{\&quot;type\&quot;:\&quot;specvalue\&quot;,\&quot;name\&quot;:\&quot;ThreadCount\&quot;,\&quot;gteq\&quot;:\&quot;4\&quot;}]&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Available operators are:&lt;/b&gt; \&quot;eq\&quot;: equal to, \&quot;neq\&quot;: not equal to, \&quot;lteq\&quot;: less than or equal to, \&quot;gteq\&quot;: greater than or equal to, \&quot;swc\&quot;: starts with characters, \&quot;nswc\&quot;: not starting with characters, \&quot;cts\&quot;: contains, \&quot;ncts\&quot;: not contains&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Conditions:&lt;/b&gt; By default all objects works on an AND condition. But inside an object we have the capability to put an \&quot;OR\&quot; or \&quot;AND\&quot; condition.&lt;br/&gt;Example conditions: [{\&quot;type\&quot;:\&quot;specvalue\&quot;,\&quot;name\&quot;:\&quot;ThreadCount\&quot;,\&quot;ncts\&quot;:\&quot;4,5\&quot;,\&quot;cond\&quot;:\&quot;AND\&quot;}]&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; (optional)
     * @param perPage Filter number of products in response to desired size. (optional)
     * @param pageNo Indicates page number for pagination of results. (optional)
     * @return ProductListingLevelInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductListingLevelInfo getProductList(String localeGeoId, String categoryId, String productId, String highlights, String sort, String filters, Integer perPage, Integer pageNo) throws ApiException {
        ApiResponse<ProductListingLevelInfo> localVarResp = getProductListWithHttpInfo(localeGeoId, categoryId, productId, highlights, sort, filters, perPage, pageNo);
        return localVarResp.getData();
    }

    /**
     * 1. Find products by product id or category id
     * Use this to get basic details of products with pagination. Can be used to generate listing page for products.
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param categoryId Filter products based on one or multiple category id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;873\&quot;]&lt;br/&gt;&lt;br/&gt;Categories Available:&lt;br/&gt; Processors &#x3D; 873, Server Products &#x3D; 1201, Mini PC&#39;s &#x3D; 98414, Wireless Networking &#x3D; 59485, Ethernet Products &#x3D; 36773, Fabric products &#x3D; 70021, Memory and Storage &#x3D; 35125, Chipsets &#x3D; 53, Graphics Drivers &#x3D; 80939 &lt;br/&gt;&lt;br/&gt; (optional)
     * @param productId Filter products based on one or multiple product id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;123003\&quot;]&lt;br/&gt;&lt;br/&gt; (optional)
     * @param highlights Specification values which needs to be pulled from product data. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;CoreCount\&quot;, \&quot;StatusCodeText\&quot;]&lt;br/&gt;&lt;br/&gt; (optional)
     * @param sort Indicates sorting fields. Accepts array of objects in format like: [{\&quot;field\&quot;:\&quot;name\&quot;,\&quot;order\&quot;:\&quot;ASC\&quot;}].&lt;br/&gt;&lt;br/&gt;Any specification that we get from get-product-info can be used to sort result. Other generic sort field is \&quot;name\&quot;.&lt;br/&gt;&lt;br/&gt; (optional)
     * @param filters Allows to filter data.&lt;br/&gt;&lt;br/&gt;Format of filter: [{\&quot;type\&quot;:\&quot;specvalue\&quot;,\&quot;name\&quot;:\&quot;ThreadCount\&quot;,\&quot;gteq\&quot;:\&quot;4\&quot;}]&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Available operators are:&lt;/b&gt; \&quot;eq\&quot;: equal to, \&quot;neq\&quot;: not equal to, \&quot;lteq\&quot;: less than or equal to, \&quot;gteq\&quot;: greater than or equal to, \&quot;swc\&quot;: starts with characters, \&quot;nswc\&quot;: not starting with characters, \&quot;cts\&quot;: contains, \&quot;ncts\&quot;: not contains&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Conditions:&lt;/b&gt; By default all objects works on an AND condition. But inside an object we have the capability to put an \&quot;OR\&quot; or \&quot;AND\&quot; condition.&lt;br/&gt;Example conditions: [{\&quot;type\&quot;:\&quot;specvalue\&quot;,\&quot;name\&quot;:\&quot;ThreadCount\&quot;,\&quot;ncts\&quot;:\&quot;4,5\&quot;,\&quot;cond\&quot;:\&quot;AND\&quot;}]&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; (optional)
     * @param perPage Filter number of products in response to desired size. (optional)
     * @param pageNo Indicates page number for pagination of results. (optional)
     * @return ApiResponse&lt;ProductListingLevelInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductListingLevelInfo> getProductListWithHttpInfo(String localeGeoId, String categoryId, String productId, String highlights, String sort, String filters, Integer perPage, Integer pageNo) throws ApiException {
        okhttp3.Call localVarCall = getProductListValidateBeforeCall(localeGeoId, categoryId, productId, highlights, sort, filters, perPage, pageNo, null);
        Type localVarReturnType = new TypeToken<ProductListingLevelInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 1. Find products by product id or category id (asynchronously)
     * Use this to get basic details of products with pagination. Can be used to generate listing page for products.
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param categoryId Filter products based on one or multiple category id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;873\&quot;]&lt;br/&gt;&lt;br/&gt;Categories Available:&lt;br/&gt; Processors &#x3D; 873, Server Products &#x3D; 1201, Mini PC&#39;s &#x3D; 98414, Wireless Networking &#x3D; 59485, Ethernet Products &#x3D; 36773, Fabric products &#x3D; 70021, Memory and Storage &#x3D; 35125, Chipsets &#x3D; 53, Graphics Drivers &#x3D; 80939 &lt;br/&gt;&lt;br/&gt; (optional)
     * @param productId Filter products based on one or multiple product id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;123003\&quot;]&lt;br/&gt;&lt;br/&gt; (optional)
     * @param highlights Specification values which needs to be pulled from product data. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;CoreCount\&quot;, \&quot;StatusCodeText\&quot;]&lt;br/&gt;&lt;br/&gt; (optional)
     * @param sort Indicates sorting fields. Accepts array of objects in format like: [{\&quot;field\&quot;:\&quot;name\&quot;,\&quot;order\&quot;:\&quot;ASC\&quot;}].&lt;br/&gt;&lt;br/&gt;Any specification that we get from get-product-info can be used to sort result. Other generic sort field is \&quot;name\&quot;.&lt;br/&gt;&lt;br/&gt; (optional)
     * @param filters Allows to filter data.&lt;br/&gt;&lt;br/&gt;Format of filter: [{\&quot;type\&quot;:\&quot;specvalue\&quot;,\&quot;name\&quot;:\&quot;ThreadCount\&quot;,\&quot;gteq\&quot;:\&quot;4\&quot;}]&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Available operators are:&lt;/b&gt; \&quot;eq\&quot;: equal to, \&quot;neq\&quot;: not equal to, \&quot;lteq\&quot;: less than or equal to, \&quot;gteq\&quot;: greater than or equal to, \&quot;swc\&quot;: starts with characters, \&quot;nswc\&quot;: not starting with characters, \&quot;cts\&quot;: contains, \&quot;ncts\&quot;: not contains&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Conditions:&lt;/b&gt; By default all objects works on an AND condition. But inside an object we have the capability to put an \&quot;OR\&quot; or \&quot;AND\&quot; condition.&lt;br/&gt;Example conditions: [{\&quot;type\&quot;:\&quot;specvalue\&quot;,\&quot;name\&quot;:\&quot;ThreadCount\&quot;,\&quot;ncts\&quot;:\&quot;4,5\&quot;,\&quot;cond\&quot;:\&quot;AND\&quot;}]&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; (optional)
     * @param perPage Filter number of products in response to desired size. (optional)
     * @param pageNo Indicates page number for pagination of results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductListAsync(String localeGeoId, String categoryId, String productId, String highlights, String sort, String filters, Integer perPage, Integer pageNo, final ApiCallback<ProductListingLevelInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductListValidateBeforeCall(localeGeoId, categoryId, productId, highlights, sort, filters, perPage, pageNo, _callback);
        Type localVarReturnType = new TypeToken<ProductListingLevelInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getorderinginfo
     * @param productId Filter ordering info details based on one or multiple product id&#39;s. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;123003\&quot;] (required)
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getorderinginfoCall(String productId, String localeGeoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/products/get-ordering-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (localeGeoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale_geo_id", localeGeoId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getorderinginfoValidateBeforeCall(String productId, String localeGeoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getorderinginfo(Async)");
        }

        // verify the required parameter 'localeGeoId' is set
        if (localeGeoId == null) {
            throw new ApiException("Missing the required parameter 'localeGeoId' when calling getorderinginfo(Async)");
        }

        return getorderinginfoCall(productId, localeGeoId, _callback);

    }

    /**
     * 3. Get ordering info for product id&#39;s requested.
     * Use this to fetch ordering info details for Intel products. No pagination supported.
     * @param productId Filter ordering info details based on one or multiple product id&#39;s. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;123003\&quot;] (required)
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @return DetailedOrderingLevelInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public DetailedOrderingLevelInfo getorderinginfo(String productId, String localeGeoId) throws ApiException {
        ApiResponse<DetailedOrderingLevelInfo> localVarResp = getorderinginfoWithHttpInfo(productId, localeGeoId);
        return localVarResp.getData();
    }

    /**
     * 3. Get ordering info for product id&#39;s requested.
     * Use this to fetch ordering info details for Intel products. No pagination supported.
     * @param productId Filter ordering info details based on one or multiple product id&#39;s. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;123003\&quot;] (required)
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @return ApiResponse&lt;DetailedOrderingLevelInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetailedOrderingLevelInfo> getorderinginfoWithHttpInfo(String productId, String localeGeoId) throws ApiException {
        okhttp3.Call localVarCall = getorderinginfoValidateBeforeCall(productId, localeGeoId, null);
        Type localVarReturnType = new TypeToken<DetailedOrderingLevelInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 3. Get ordering info for product id&#39;s requested. (asynchronously)
     * Use this to fetch ordering info details for Intel products. No pagination supported.
     * @param productId Filter ordering info details based on one or multiple product id&#39;s. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;123003\&quot;] (required)
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> unsuccessful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getorderinginfoAsync(String productId, String localeGeoId, final ApiCallback<DetailedOrderingLevelInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getorderinginfoValidateBeforeCall(productId, localeGeoId, _callback);
        Type localVarReturnType = new TypeToken<DetailedOrderingLevelInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
