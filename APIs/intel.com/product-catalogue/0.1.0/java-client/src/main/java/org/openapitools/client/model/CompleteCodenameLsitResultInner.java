/*
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompleteCodenameLsitResultInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:55.780621-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompleteCodenameLsitResultInner {
  public static final String SERIALIZED_NAME_CODE_NAME_ID = "CodeNameId";
  @SerializedName(SERIALIZED_NAME_CODE_NAME_ID)
  private String codeNameId;

  public static final String SERIALIZED_NAME_CODE_NAME_TEXT = "CodeNameText";
  @SerializedName(SERIALIZED_NAME_CODE_NAME_TEXT)
  private String codeNameText;

  public static final String SERIALIZED_NAME_CODE_NAME_TYPE = "CodeNameType";
  @SerializedName(SERIALIZED_NAME_CODE_NAME_TYPE)
  private String codeNameType;

  public static final String SERIALIZED_NAME_URL_TEXT = "UrlText";
  @SerializedName(SERIALIZED_NAME_URL_TEXT)
  private String urlText;

  public CompleteCodenameLsitResultInner() {
  }

  public CompleteCodenameLsitResultInner codeNameId(String codeNameId) {
    this.codeNameId = codeNameId;
    return this;
  }

  /**
   * Get codeNameId
   * @return codeNameId
   */
  @javax.annotation.Nullable
  public String getCodeNameId() {
    return codeNameId;
  }

  public void setCodeNameId(String codeNameId) {
    this.codeNameId = codeNameId;
  }


  public CompleteCodenameLsitResultInner codeNameText(String codeNameText) {
    this.codeNameText = codeNameText;
    return this;
  }

  /**
   * Get codeNameText
   * @return codeNameText
   */
  @javax.annotation.Nullable
  public String getCodeNameText() {
    return codeNameText;
  }

  public void setCodeNameText(String codeNameText) {
    this.codeNameText = codeNameText;
  }


  public CompleteCodenameLsitResultInner codeNameType(String codeNameType) {
    this.codeNameType = codeNameType;
    return this;
  }

  /**
   * Get codeNameType
   * @return codeNameType
   */
  @javax.annotation.Nullable
  public String getCodeNameType() {
    return codeNameType;
  }

  public void setCodeNameType(String codeNameType) {
    this.codeNameType = codeNameType;
  }


  public CompleteCodenameLsitResultInner urlText(String urlText) {
    this.urlText = urlText;
    return this;
  }

  /**
   * Get urlText
   * @return urlText
   */
  @javax.annotation.Nullable
  public String getUrlText() {
    return urlText;
  }

  public void setUrlText(String urlText) {
    this.urlText = urlText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompleteCodenameLsitResultInner completeCodenameLsitResultInner = (CompleteCodenameLsitResultInner) o;
    return Objects.equals(this.codeNameId, completeCodenameLsitResultInner.codeNameId) &&
        Objects.equals(this.codeNameText, completeCodenameLsitResultInner.codeNameText) &&
        Objects.equals(this.codeNameType, completeCodenameLsitResultInner.codeNameType) &&
        Objects.equals(this.urlText, completeCodenameLsitResultInner.urlText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeNameId, codeNameText, codeNameType, urlText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompleteCodenameLsitResultInner {\n");
    sb.append("    codeNameId: ").append(toIndentedString(codeNameId)).append("\n");
    sb.append("    codeNameText: ").append(toIndentedString(codeNameText)).append("\n");
    sb.append("    codeNameType: ").append(toIndentedString(codeNameType)).append("\n");
    sb.append("    urlText: ").append(toIndentedString(urlText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodeNameId");
    openapiFields.add("CodeNameText");
    openapiFields.add("CodeNameType");
    openapiFields.add("UrlText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompleteCodenameLsitResultInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompleteCodenameLsitResultInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompleteCodenameLsitResultInner is not found in the empty JSON string", CompleteCodenameLsitResultInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompleteCodenameLsitResultInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompleteCodenameLsitResultInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CodeNameId") != null && !jsonObj.get("CodeNameId").isJsonNull()) && !jsonObj.get("CodeNameId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodeNameId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodeNameId").toString()));
      }
      if ((jsonObj.get("CodeNameText") != null && !jsonObj.get("CodeNameText").isJsonNull()) && !jsonObj.get("CodeNameText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodeNameText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodeNameText").toString()));
      }
      if ((jsonObj.get("CodeNameType") != null && !jsonObj.get("CodeNameType").isJsonNull()) && !jsonObj.get("CodeNameType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodeNameType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodeNameType").toString()));
      }
      if ((jsonObj.get("UrlText") != null && !jsonObj.get("UrlText").isJsonNull()) && !jsonObj.get("UrlText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UrlText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UrlText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompleteCodenameLsitResultInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompleteCodenameLsitResultInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompleteCodenameLsitResultInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompleteCodenameLsitResultInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CompleteCodenameLsitResultInner>() {
           @Override
           public void write(JsonWriter out, CompleteCodenameLsitResultInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompleteCodenameLsitResultInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompleteCodenameLsitResultInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompleteCodenameLsitResultInner
   * @throws IOException if the JSON string is invalid with respect to CompleteCodenameLsitResultInner
   */
  public static CompleteCodenameLsitResultInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompleteCodenameLsitResultInner.class);
  }

  /**
   * Convert an instance of CompleteCodenameLsitResultInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

