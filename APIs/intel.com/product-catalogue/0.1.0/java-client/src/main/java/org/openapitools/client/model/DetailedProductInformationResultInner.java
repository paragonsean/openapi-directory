/*
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DetailedProductInformationResultInnerAllOfMediaAsset;
import org.openapitools.client.model.DetailedProductInformationResultInnerAllOfReferenceInner;
import org.openapitools.client.model.DetailedProductInformationResultInnerAllOfTechSpecInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DetailedProductInformationResultInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:55.780621-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetailedProductInformationResultInner {
  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_MEDIA_ASSET = "media_asset";
  @SerializedName(SERIALIZED_NAME_MEDIA_ASSET)
  private DetailedProductInformationResultInnerAllOfMediaAsset mediaAsset;

  public static final String SERIALIZED_NAME_MKTG_PRD_TYPE = "mktg_prd_type";
  @SerializedName(SERIALIZED_NAME_MKTG_PRD_TYPE)
  private String mktgPrdType;

  public static final String SERIALIZED_NAME_PRODUCT_CATEGORY = "product_category";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CATEGORY)
  private List<String> productCategory = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_DESCRIPTION = "product_description";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DESCRIPTION)
  private String productDescription;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PRODUCT_MANUFACTURER = "product_manufacturer";
  @SerializedName(SERIALIZED_NAME_PRODUCT_MANUFACTURER)
  private String productManufacturer;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "product_name";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_PRODUCT_NAME_RAW = "product_name_raw";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME_RAW)
  private String productNameRaw;

  public static final String SERIALIZED_NAME_PRODUCT_ON_MARKET_DATE = "product_on_market_date";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ON_MARKET_DATE)
  private String productOnMarketDate;

  public static final String SERIALIZED_NAME_PRODUCT_PICTURE = "product_picture";
  @SerializedName(SERIALIZED_NAME_PRODUCT_PICTURE)
  private String productPicture;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private List<DetailedProductInformationResultInnerAllOfReferenceInner> reference = new ArrayList<>();

  public static final String SERIALIZED_NAME_TECH_SPEC = "tech_spec";
  @SerializedName(SERIALIZED_NAME_TECH_SPEC)
  private List<DetailedProductInformationResultInnerAllOfTechSpecInner> techSpec = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_DATE = "updated_date";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE)
  private String updatedDate;

  public DetailedProductInformationResultInner() {
  }

  public DetailedProductInformationResultInner createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public DetailedProductInformationResultInner mediaAsset(DetailedProductInformationResultInnerAllOfMediaAsset mediaAsset) {
    this.mediaAsset = mediaAsset;
    return this;
  }

  /**
   * Get mediaAsset
   * @return mediaAsset
   */
  @javax.annotation.Nullable
  public DetailedProductInformationResultInnerAllOfMediaAsset getMediaAsset() {
    return mediaAsset;
  }

  public void setMediaAsset(DetailedProductInformationResultInnerAllOfMediaAsset mediaAsset) {
    this.mediaAsset = mediaAsset;
  }


  public DetailedProductInformationResultInner mktgPrdType(String mktgPrdType) {
    this.mktgPrdType = mktgPrdType;
    return this;
  }

  /**
   * Get mktgPrdType
   * @return mktgPrdType
   */
  @javax.annotation.Nullable
  public String getMktgPrdType() {
    return mktgPrdType;
  }

  public void setMktgPrdType(String mktgPrdType) {
    this.mktgPrdType = mktgPrdType;
  }


  public DetailedProductInformationResultInner productCategory(List<String> productCategory) {
    this.productCategory = productCategory;
    return this;
  }

  public DetailedProductInformationResultInner addProductCategoryItem(String productCategoryItem) {
    if (this.productCategory == null) {
      this.productCategory = new ArrayList<>();
    }
    this.productCategory.add(productCategoryItem);
    return this;
  }

  /**
   * Product category
   * @return productCategory
   */
  @javax.annotation.Nullable
  public List<String> getProductCategory() {
    return productCategory;
  }

  public void setProductCategory(List<String> productCategory) {
    this.productCategory = productCategory;
  }


  public DetailedProductInformationResultInner productDescription(String productDescription) {
    this.productDescription = productDescription;
    return this;
  }

  /**
   * Get productDescription
   * @return productDescription
   */
  @javax.annotation.Nullable
  public String getProductDescription() {
    return productDescription;
  }

  public void setProductDescription(String productDescription) {
    this.productDescription = productDescription;
  }


  public DetailedProductInformationResultInner productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public DetailedProductInformationResultInner productManufacturer(String productManufacturer) {
    this.productManufacturer = productManufacturer;
    return this;
  }

  /**
   * Get productManufacturer
   * @return productManufacturer
   */
  @javax.annotation.Nullable
  public String getProductManufacturer() {
    return productManufacturer;
  }

  public void setProductManufacturer(String productManufacturer) {
    this.productManufacturer = productManufacturer;
  }


  public DetailedProductInformationResultInner productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Get productName
   * @return productName
   */
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public DetailedProductInformationResultInner productNameRaw(String productNameRaw) {
    this.productNameRaw = productNameRaw;
    return this;
  }

  /**
   * Get productNameRaw
   * @return productNameRaw
   */
  @javax.annotation.Nullable
  public String getProductNameRaw() {
    return productNameRaw;
  }

  public void setProductNameRaw(String productNameRaw) {
    this.productNameRaw = productNameRaw;
  }


  public DetailedProductInformationResultInner productOnMarketDate(String productOnMarketDate) {
    this.productOnMarketDate = productOnMarketDate;
    return this;
  }

  /**
   * Get productOnMarketDate
   * @return productOnMarketDate
   */
  @javax.annotation.Nullable
  public String getProductOnMarketDate() {
    return productOnMarketDate;
  }

  public void setProductOnMarketDate(String productOnMarketDate) {
    this.productOnMarketDate = productOnMarketDate;
  }


  public DetailedProductInformationResultInner productPicture(String productPicture) {
    this.productPicture = productPicture;
    return this;
  }

  /**
   * Get productPicture
   * @return productPicture
   */
  @javax.annotation.Nullable
  public String getProductPicture() {
    return productPicture;
  }

  public void setProductPicture(String productPicture) {
    this.productPicture = productPicture;
  }


  public DetailedProductInformationResultInner reference(List<DetailedProductInformationResultInnerAllOfReferenceInner> reference) {
    this.reference = reference;
    return this;
  }

  public DetailedProductInformationResultInner addReferenceItem(DetailedProductInformationResultInnerAllOfReferenceInner referenceItem) {
    if (this.reference == null) {
      this.reference = new ArrayList<>();
    }
    this.reference.add(referenceItem);
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nullable
  public List<DetailedProductInformationResultInnerAllOfReferenceInner> getReference() {
    return reference;
  }

  public void setReference(List<DetailedProductInformationResultInnerAllOfReferenceInner> reference) {
    this.reference = reference;
  }


  public DetailedProductInformationResultInner techSpec(List<DetailedProductInformationResultInnerAllOfTechSpecInner> techSpec) {
    this.techSpec = techSpec;
    return this;
  }

  public DetailedProductInformationResultInner addTechSpecItem(DetailedProductInformationResultInnerAllOfTechSpecInner techSpecItem) {
    if (this.techSpec == null) {
      this.techSpec = new ArrayList<>();
    }
    this.techSpec.add(techSpecItem);
    return this;
  }

  /**
   * tech spec
   * @return techSpec
   */
  @javax.annotation.Nullable
  public List<DetailedProductInformationResultInnerAllOfTechSpecInner> getTechSpec() {
    return techSpec;
  }

  public void setTechSpec(List<DetailedProductInformationResultInnerAllOfTechSpecInner> techSpec) {
    this.techSpec = techSpec;
  }


  public DetailedProductInformationResultInner updatedDate(String updatedDate) {
    this.updatedDate = updatedDate;
    return this;
  }

  /**
   * Get updatedDate
   * @return updatedDate
   */
  @javax.annotation.Nullable
  public String getUpdatedDate() {
    return updatedDate;
  }

  public void setUpdatedDate(String updatedDate) {
    this.updatedDate = updatedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailedProductInformationResultInner detailedProductInformationResultInner = (DetailedProductInformationResultInner) o;
    return Objects.equals(this.createdDate, detailedProductInformationResultInner.createdDate) &&
        Objects.equals(this.mediaAsset, detailedProductInformationResultInner.mediaAsset) &&
        Objects.equals(this.mktgPrdType, detailedProductInformationResultInner.mktgPrdType) &&
        Objects.equals(this.productCategory, detailedProductInformationResultInner.productCategory) &&
        Objects.equals(this.productDescription, detailedProductInformationResultInner.productDescription) &&
        Objects.equals(this.productId, detailedProductInformationResultInner.productId) &&
        Objects.equals(this.productManufacturer, detailedProductInformationResultInner.productManufacturer) &&
        Objects.equals(this.productName, detailedProductInformationResultInner.productName) &&
        Objects.equals(this.productNameRaw, detailedProductInformationResultInner.productNameRaw) &&
        Objects.equals(this.productOnMarketDate, detailedProductInformationResultInner.productOnMarketDate) &&
        Objects.equals(this.productPicture, detailedProductInformationResultInner.productPicture) &&
        Objects.equals(this.reference, detailedProductInformationResultInner.reference) &&
        Objects.equals(this.techSpec, detailedProductInformationResultInner.techSpec) &&
        Objects.equals(this.updatedDate, detailedProductInformationResultInner.updatedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDate, mediaAsset, mktgPrdType, productCategory, productDescription, productId, productManufacturer, productName, productNameRaw, productOnMarketDate, productPicture, reference, techSpec, updatedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailedProductInformationResultInner {\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    mediaAsset: ").append(toIndentedString(mediaAsset)).append("\n");
    sb.append("    mktgPrdType: ").append(toIndentedString(mktgPrdType)).append("\n");
    sb.append("    productCategory: ").append(toIndentedString(productCategory)).append("\n");
    sb.append("    productDescription: ").append(toIndentedString(productDescription)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productManufacturer: ").append(toIndentedString(productManufacturer)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productNameRaw: ").append(toIndentedString(productNameRaw)).append("\n");
    sb.append("    productOnMarketDate: ").append(toIndentedString(productOnMarketDate)).append("\n");
    sb.append("    productPicture: ").append(toIndentedString(productPicture)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    techSpec: ").append(toIndentedString(techSpec)).append("\n");
    sb.append("    updatedDate: ").append(toIndentedString(updatedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_date");
    openapiFields.add("media_asset");
    openapiFields.add("mktg_prd_type");
    openapiFields.add("product_category");
    openapiFields.add("product_description");
    openapiFields.add("product_id");
    openapiFields.add("product_manufacturer");
    openapiFields.add("product_name");
    openapiFields.add("product_name_raw");
    openapiFields.add("product_on_market_date");
    openapiFields.add("product_picture");
    openapiFields.add("reference");
    openapiFields.add("tech_spec");
    openapiFields.add("updated_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetailedProductInformationResultInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetailedProductInformationResultInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetailedProductInformationResultInner is not found in the empty JSON string", DetailedProductInformationResultInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetailedProductInformationResultInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetailedProductInformationResultInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_date") != null && !jsonObj.get("created_date").isJsonNull()) && !jsonObj.get("created_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_date").toString()));
      }
      // validate the optional field `media_asset`
      if (jsonObj.get("media_asset") != null && !jsonObj.get("media_asset").isJsonNull()) {
        DetailedProductInformationResultInnerAllOfMediaAsset.validateJsonElement(jsonObj.get("media_asset"));
      }
      if ((jsonObj.get("mktg_prd_type") != null && !jsonObj.get("mktg_prd_type").isJsonNull()) && !jsonObj.get("mktg_prd_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mktg_prd_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mktg_prd_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("product_category") != null && !jsonObj.get("product_category").isJsonNull() && !jsonObj.get("product_category").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_category` to be an array in the JSON string but got `%s`", jsonObj.get("product_category").toString()));
      }
      if ((jsonObj.get("product_description") != null && !jsonObj.get("product_description").isJsonNull()) && !jsonObj.get("product_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_description").toString()));
      }
      if ((jsonObj.get("product_id") != null && !jsonObj.get("product_id").isJsonNull()) && !jsonObj.get("product_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_id").toString()));
      }
      if ((jsonObj.get("product_manufacturer") != null && !jsonObj.get("product_manufacturer").isJsonNull()) && !jsonObj.get("product_manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_manufacturer").toString()));
      }
      if ((jsonObj.get("product_name") != null && !jsonObj.get("product_name").isJsonNull()) && !jsonObj.get("product_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_name").toString()));
      }
      if ((jsonObj.get("product_name_raw") != null && !jsonObj.get("product_name_raw").isJsonNull()) && !jsonObj.get("product_name_raw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_name_raw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_name_raw").toString()));
      }
      if ((jsonObj.get("product_on_market_date") != null && !jsonObj.get("product_on_market_date").isJsonNull()) && !jsonObj.get("product_on_market_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_on_market_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_on_market_date").toString()));
      }
      if ((jsonObj.get("product_picture") != null && !jsonObj.get("product_picture").isJsonNull()) && !jsonObj.get("product_picture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_picture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_picture").toString()));
      }
      if (jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) {
        JsonArray jsonArrayreference = jsonObj.getAsJsonArray("reference");
        if (jsonArrayreference != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reference").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reference` to be an array in the JSON string but got `%s`", jsonObj.get("reference").toString()));
          }

          // validate the optional field `reference` (array)
          for (int i = 0; i < jsonArrayreference.size(); i++) {
            DetailedProductInformationResultInnerAllOfReferenceInner.validateJsonElement(jsonArrayreference.get(i));
          };
        }
      }
      if (jsonObj.get("tech_spec") != null && !jsonObj.get("tech_spec").isJsonNull()) {
        JsonArray jsonArraytechSpec = jsonObj.getAsJsonArray("tech_spec");
        if (jsonArraytechSpec != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tech_spec").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tech_spec` to be an array in the JSON string but got `%s`", jsonObj.get("tech_spec").toString()));
          }

          // validate the optional field `tech_spec` (array)
          for (int i = 0; i < jsonArraytechSpec.size(); i++) {
            DetailedProductInformationResultInnerAllOfTechSpecInner.validateJsonElement(jsonArraytechSpec.get(i));
          };
        }
      }
      if ((jsonObj.get("updated_date") != null && !jsonObj.get("updated_date").isJsonNull()) && !jsonObj.get("updated_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetailedProductInformationResultInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetailedProductInformationResultInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetailedProductInformationResultInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetailedProductInformationResultInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DetailedProductInformationResultInner>() {
           @Override
           public void write(JsonWriter out, DetailedProductInformationResultInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetailedProductInformationResultInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetailedProductInformationResultInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetailedProductInformationResultInner
   * @throws IOException if the JSON string is invalid with respect to DetailedProductInformationResultInner
   */
  public static DetailedProductInformationResultInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetailedProductInformationResultInner.class);
  }

  /**
   * Convert an instance of DetailedProductInformationResultInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

