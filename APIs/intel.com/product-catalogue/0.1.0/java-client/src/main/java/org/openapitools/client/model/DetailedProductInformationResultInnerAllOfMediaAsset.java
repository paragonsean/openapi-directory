/*
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * product media asset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:55.780621-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetailedProductInformationResultInnerAllOfMediaAsset {
  public static final String SERIALIZED_NAME_PICTURE1 = "picture_1";
  @SerializedName(SERIALIZED_NAME_PICTURE1)
  private String picture1;

  public static final String SERIALIZED_NAME_PICTURE2 = "picture_2";
  @SerializedName(SERIALIZED_NAME_PICTURE2)
  private String picture2;

  public static final String SERIALIZED_NAME_PICTURE3 = "picture_3";
  @SerializedName(SERIALIZED_NAME_PICTURE3)
  private String picture3;

  public static final String SERIALIZED_NAME_PICTURE4 = "picture_4";
  @SerializedName(SERIALIZED_NAME_PICTURE4)
  private String picture4;

  public static final String SERIALIZED_NAME_PICTURE5 = "picture_5";
  @SerializedName(SERIALIZED_NAME_PICTURE5)
  private String picture5;

  public DetailedProductInformationResultInnerAllOfMediaAsset() {
  }

  public DetailedProductInformationResultInnerAllOfMediaAsset picture1(String picture1) {
    this.picture1 = picture1;
    return this;
  }

  /**
   * Get picture1
   * @return picture1
   */
  @javax.annotation.Nullable
  public String getPicture1() {
    return picture1;
  }

  public void setPicture1(String picture1) {
    this.picture1 = picture1;
  }


  public DetailedProductInformationResultInnerAllOfMediaAsset picture2(String picture2) {
    this.picture2 = picture2;
    return this;
  }

  /**
   * Get picture2
   * @return picture2
   */
  @javax.annotation.Nullable
  public String getPicture2() {
    return picture2;
  }

  public void setPicture2(String picture2) {
    this.picture2 = picture2;
  }


  public DetailedProductInformationResultInnerAllOfMediaAsset picture3(String picture3) {
    this.picture3 = picture3;
    return this;
  }

  /**
   * Get picture3
   * @return picture3
   */
  @javax.annotation.Nullable
  public String getPicture3() {
    return picture3;
  }

  public void setPicture3(String picture3) {
    this.picture3 = picture3;
  }


  public DetailedProductInformationResultInnerAllOfMediaAsset picture4(String picture4) {
    this.picture4 = picture4;
    return this;
  }

  /**
   * Get picture4
   * @return picture4
   */
  @javax.annotation.Nullable
  public String getPicture4() {
    return picture4;
  }

  public void setPicture4(String picture4) {
    this.picture4 = picture4;
  }


  public DetailedProductInformationResultInnerAllOfMediaAsset picture5(String picture5) {
    this.picture5 = picture5;
    return this;
  }

  /**
   * Get picture5
   * @return picture5
   */
  @javax.annotation.Nullable
  public String getPicture5() {
    return picture5;
  }

  public void setPicture5(String picture5) {
    this.picture5 = picture5;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailedProductInformationResultInnerAllOfMediaAsset detailedProductInformationResultInnerAllOfMediaAsset = (DetailedProductInformationResultInnerAllOfMediaAsset) o;
    return Objects.equals(this.picture1, detailedProductInformationResultInnerAllOfMediaAsset.picture1) &&
        Objects.equals(this.picture2, detailedProductInformationResultInnerAllOfMediaAsset.picture2) &&
        Objects.equals(this.picture3, detailedProductInformationResultInnerAllOfMediaAsset.picture3) &&
        Objects.equals(this.picture4, detailedProductInformationResultInnerAllOfMediaAsset.picture4) &&
        Objects.equals(this.picture5, detailedProductInformationResultInnerAllOfMediaAsset.picture5);
  }

  @Override
  public int hashCode() {
    return Objects.hash(picture1, picture2, picture3, picture4, picture5);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailedProductInformationResultInnerAllOfMediaAsset {\n");
    sb.append("    picture1: ").append(toIndentedString(picture1)).append("\n");
    sb.append("    picture2: ").append(toIndentedString(picture2)).append("\n");
    sb.append("    picture3: ").append(toIndentedString(picture3)).append("\n");
    sb.append("    picture4: ").append(toIndentedString(picture4)).append("\n");
    sb.append("    picture5: ").append(toIndentedString(picture5)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("picture_1");
    openapiFields.add("picture_2");
    openapiFields.add("picture_3");
    openapiFields.add("picture_4");
    openapiFields.add("picture_5");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetailedProductInformationResultInnerAllOfMediaAsset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetailedProductInformationResultInnerAllOfMediaAsset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetailedProductInformationResultInnerAllOfMediaAsset is not found in the empty JSON string", DetailedProductInformationResultInnerAllOfMediaAsset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetailedProductInformationResultInnerAllOfMediaAsset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetailedProductInformationResultInnerAllOfMediaAsset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("picture_1") != null && !jsonObj.get("picture_1").isJsonNull()) && !jsonObj.get("picture_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picture_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture_1").toString()));
      }
      if ((jsonObj.get("picture_2") != null && !jsonObj.get("picture_2").isJsonNull()) && !jsonObj.get("picture_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picture_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture_2").toString()));
      }
      if ((jsonObj.get("picture_3") != null && !jsonObj.get("picture_3").isJsonNull()) && !jsonObj.get("picture_3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picture_3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture_3").toString()));
      }
      if ((jsonObj.get("picture_4") != null && !jsonObj.get("picture_4").isJsonNull()) && !jsonObj.get("picture_4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picture_4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture_4").toString()));
      }
      if ((jsonObj.get("picture_5") != null && !jsonObj.get("picture_5").isJsonNull()) && !jsonObj.get("picture_5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picture_5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture_5").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetailedProductInformationResultInnerAllOfMediaAsset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetailedProductInformationResultInnerAllOfMediaAsset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetailedProductInformationResultInnerAllOfMediaAsset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetailedProductInformationResultInnerAllOfMediaAsset.class));

       return (TypeAdapter<T>) new TypeAdapter<DetailedProductInformationResultInnerAllOfMediaAsset>() {
           @Override
           public void write(JsonWriter out, DetailedProductInformationResultInnerAllOfMediaAsset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetailedProductInformationResultInnerAllOfMediaAsset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetailedProductInformationResultInnerAllOfMediaAsset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetailedProductInformationResultInnerAllOfMediaAsset
   * @throws IOException if the JSON string is invalid with respect to DetailedProductInformationResultInnerAllOfMediaAsset
   */
  public static DetailedProductInformationResultInnerAllOfMediaAsset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetailedProductInformationResultInnerAllOfMediaAsset.class);
  }

  /**
   * Convert an instance of DetailedProductInformationResultInnerAllOfMediaAsset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

