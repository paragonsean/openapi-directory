/*
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DetailedProductInformationResultInnerAllOfReferenceInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:55.780621-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetailedProductInformationResultInnerAllOfReferenceInner {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private List<String> categoryId = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_REFERENCE_TYPE = "reference_type";
  @SerializedName(SERIALIZED_NAME_REFERENCE_TYPE)
  private String referenceType;

  public DetailedProductInformationResultInnerAllOfReferenceInner() {
  }

  public DetailedProductInformationResultInnerAllOfReferenceInner categoryId(List<String> categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  public DetailedProductInformationResultInnerAllOfReferenceInner addCategoryIdItem(String categoryIdItem) {
    if (this.categoryId == null) {
      this.categoryId = new ArrayList<>();
    }
    this.categoryId.add(categoryIdItem);
    return this;
  }

  /**
   * Array of category id&#39;s to which the product belong to.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public List<String> getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(List<String> categoryId) {
    this.categoryId = categoryId;
  }


  public DetailedProductInformationResultInnerAllOfReferenceInner referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public DetailedProductInformationResultInnerAllOfReferenceInner referenceType(String referenceType) {
    this.referenceType = referenceType;
    return this;
  }

  /**
   * Get referenceType
   * @return referenceType
   */
  @javax.annotation.Nullable
  public String getReferenceType() {
    return referenceType;
  }

  public void setReferenceType(String referenceType) {
    this.referenceType = referenceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailedProductInformationResultInnerAllOfReferenceInner detailedProductInformationResultInnerAllOfReferenceInner = (DetailedProductInformationResultInnerAllOfReferenceInner) o;
    return Objects.equals(this.categoryId, detailedProductInformationResultInnerAllOfReferenceInner.categoryId) &&
        Objects.equals(this.referenceId, detailedProductInformationResultInnerAllOfReferenceInner.referenceId) &&
        Objects.equals(this.referenceType, detailedProductInformationResultInnerAllOfReferenceInner.referenceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, referenceId, referenceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailedProductInformationResultInnerAllOfReferenceInner {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    referenceType: ").append(toIndentedString(referenceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category_id");
    openapiFields.add("reference_id");
    openapiFields.add("reference_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetailedProductInformationResultInnerAllOfReferenceInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetailedProductInformationResultInnerAllOfReferenceInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetailedProductInformationResultInnerAllOfReferenceInner is not found in the empty JSON string", DetailedProductInformationResultInnerAllOfReferenceInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetailedProductInformationResultInnerAllOfReferenceInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetailedProductInformationResultInnerAllOfReferenceInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("category_id") != null && !jsonObj.get("category_id").isJsonNull() && !jsonObj.get("category_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_id` to be an array in the JSON string but got `%s`", jsonObj.get("category_id").toString()));
      }
      if ((jsonObj.get("reference_id") != null && !jsonObj.get("reference_id").isJsonNull()) && !jsonObj.get("reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_id").toString()));
      }
      if ((jsonObj.get("reference_type") != null && !jsonObj.get("reference_type").isJsonNull()) && !jsonObj.get("reference_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetailedProductInformationResultInnerAllOfReferenceInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetailedProductInformationResultInnerAllOfReferenceInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetailedProductInformationResultInnerAllOfReferenceInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetailedProductInformationResultInnerAllOfReferenceInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DetailedProductInformationResultInnerAllOfReferenceInner>() {
           @Override
           public void write(JsonWriter out, DetailedProductInformationResultInnerAllOfReferenceInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetailedProductInformationResultInnerAllOfReferenceInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetailedProductInformationResultInnerAllOfReferenceInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetailedProductInformationResultInnerAllOfReferenceInner
   * @throws IOException if the JSON string is invalid with respect to DetailedProductInformationResultInnerAllOfReferenceInner
   */
  public static DetailedProductInformationResultInnerAllOfReferenceInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetailedProductInformationResultInnerAllOfReferenceInner.class);
  }

  /**
   * Convert an instance of DetailedProductInformationResultInnerAllOfReferenceInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

