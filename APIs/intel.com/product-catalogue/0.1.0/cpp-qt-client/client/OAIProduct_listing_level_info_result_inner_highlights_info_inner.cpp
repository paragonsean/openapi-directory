/**
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct_listing_level_info_result_inner_highlights_info_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct_listing_level_info_result_inner_highlights_info_inner::OAIProduct_listing_level_info_result_inner_highlights_info_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct_listing_level_info_result_inner_highlights_info_inner::OAIProduct_listing_level_info_result_inner_highlights_info_inner() {
    this->initializeModel();
}

OAIProduct_listing_level_info_result_inner_highlights_info_inner::~OAIProduct_listing_level_info_result_inner_highlights_info_inner() {}

void OAIProduct_listing_level_info_result_inner_highlights_info_inner::initializeModel() {

    m_highlight_key_isSet = false;
    m_highlight_key_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_raw_value_isSet = false;
    m_raw_value_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIProduct_listing_level_info_result_inner_highlights_info_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct_listing_level_info_result_inner_highlights_info_inner::fromJsonObject(QJsonObject json) {

    m_highlight_key_isValid = ::OpenAPI::fromJsonValue(m_highlight_key, json[QString("highlight_key")]);
    m_highlight_key_isSet = !json[QString("highlight_key")].isNull() && m_highlight_key_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_raw_value_isValid = ::OpenAPI::fromJsonValue(m_raw_value, json[QString("raw_value")]);
    m_raw_value_isSet = !json[QString("raw_value")].isNull() && m_raw_value_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIProduct_listing_level_info_result_inner_highlights_info_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct_listing_level_info_result_inner_highlights_info_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_highlight_key_isSet) {
        obj.insert(QString("highlight_key"), ::OpenAPI::toJsonValue(m_highlight_key));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_raw_value_isSet) {
        obj.insert(QString("raw_value"), ::OpenAPI::toJsonValue(m_raw_value));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIProduct_listing_level_info_result_inner_highlights_info_inner::getHighlightKey() const {
    return m_highlight_key;
}
void OAIProduct_listing_level_info_result_inner_highlights_info_inner::setHighlightKey(const QString &highlight_key) {
    m_highlight_key = highlight_key;
    m_highlight_key_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner_highlights_info_inner::is_highlight_key_Set() const{
    return m_highlight_key_isSet;
}

bool OAIProduct_listing_level_info_result_inner_highlights_info_inner::is_highlight_key_Valid() const{
    return m_highlight_key_isValid;
}

QString OAIProduct_listing_level_info_result_inner_highlights_info_inner::getLabel() const {
    return m_label;
}
void OAIProduct_listing_level_info_result_inner_highlights_info_inner::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner_highlights_info_inner::is_label_Set() const{
    return m_label_isSet;
}

bool OAIProduct_listing_level_info_result_inner_highlights_info_inner::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIProduct_listing_level_info_result_inner_highlights_info_inner::getRawValue() const {
    return m_raw_value;
}
void OAIProduct_listing_level_info_result_inner_highlights_info_inner::setRawValue(const QString &raw_value) {
    m_raw_value = raw_value;
    m_raw_value_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner_highlights_info_inner::is_raw_value_Set() const{
    return m_raw_value_isSet;
}

bool OAIProduct_listing_level_info_result_inner_highlights_info_inner::is_raw_value_Valid() const{
    return m_raw_value_isValid;
}

QString OAIProduct_listing_level_info_result_inner_highlights_info_inner::getValue() const {
    return m_value;
}
void OAIProduct_listing_level_info_result_inner_highlights_info_inner::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner_highlights_info_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIProduct_listing_level_info_result_inner_highlights_info_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIProduct_listing_level_info_result_inner_highlights_info_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_highlight_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct_listing_level_info_result_inner_highlights_info_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
