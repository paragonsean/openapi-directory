/**
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductsApi_H
#define OAI_OAIProductsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComplete_codename_lsit.h"
#include "OAIDetailed_ordering_level_info.h"
#include "OAIDetailed_product_information.h"
#include "OAIProduct_listing_level_info.h"
#include "OAIUnsuccessful_operation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductsApi : public QObject {
    Q_OBJECT

public:
    OAIProductsApi(const int timeOut = 0);
    ~OAIProductsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  locale_geo_id QString [required]
    */
    virtual void getCodeName(const QString &locale_geo_id);

    /**
    * @param[in]  locale_geo_id QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  include_reference QString [optional]
    */
    virtual void getProductInfo(const QString &locale_geo_id, const QString &product_id, const ::OpenAPI::OptionalParam<QString> &include_reference = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  locale_geo_id QString [required]
    * @param[in]  category_id QString [optional]
    * @param[in]  product_id QString [optional]
    * @param[in]  highlights QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  filters QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page_no qint32 [optional]
    */
    virtual void getProductList(const QString &locale_geo_id, const ::OpenAPI::OptionalParam<QString> &category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &highlights = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filters = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_no = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  locale_geo_id QString [required]
    */
    virtual void getorderinginfo(const QString &product_id, const QString &locale_geo_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCodeNameCallback(OAIHttpRequestWorker *worker);
    void getProductInfoCallback(OAIHttpRequestWorker *worker);
    void getProductListCallback(OAIHttpRequestWorker *worker);
    void getorderinginfoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCodeNameSignal(OAIComplete_codename_lsit summary);
    void getProductInfoSignal(OAIDetailed_product_information summary);
    void getProductListSignal(OAIProduct_listing_level_info summary);
    void getorderinginfoSignal(OAIDetailed_ordering_level_info summary);


    void getCodeNameSignalFull(OAIHttpRequestWorker *worker, OAIComplete_codename_lsit summary);
    void getProductInfoSignalFull(OAIHttpRequestWorker *worker, OAIDetailed_product_information summary);
    void getProductListSignalFull(OAIHttpRequestWorker *worker, OAIProduct_listing_level_info summary);
    void getorderinginfoSignalFull(OAIHttpRequestWorker *worker, OAIDetailed_ordering_level_info summary);

    Q_DECL_DEPRECATED_X("Use getCodeNameSignalError() instead")
    void getCodeNameSignalE(OAIComplete_codename_lsit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCodeNameSignalError(OAIComplete_codename_lsit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductInfoSignalError() instead")
    void getProductInfoSignalE(OAIDetailed_product_information summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductInfoSignalError(OAIDetailed_product_information summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductListSignalError() instead")
    void getProductListSignalE(OAIProduct_listing_level_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductListSignalError(OAIProduct_listing_level_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getorderinginfoSignalError() instead")
    void getorderinginfoSignalE(OAIDetailed_ordering_level_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getorderinginfoSignalError(OAIDetailed_ordering_level_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCodeNameSignalErrorFull() instead")
    void getCodeNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCodeNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductInfoSignalErrorFull() instead")
    void getProductInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductListSignalErrorFull() instead")
    void getProductListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getorderinginfoSignalErrorFull() instead")
    void getorderinginfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getorderinginfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
