/**
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct_listing_level_info_result_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct_listing_level_info_result_inner::OAIProduct_listing_level_info_result_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct_listing_level_info_result_inner::OAIProduct_listing_level_info_result_inner() {
    this->initializeModel();
}

OAIProduct_listing_level_info_result_inner::~OAIProduct_listing_level_info_result_inner() {}

void OAIProduct_listing_level_info_result_inner::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_highlights_info_isSet = false;
    m_highlights_info_isValid = false;

    m_mktg_prd_type_isSet = false;
    m_mktg_prd_type_isValid = false;

    m_product_category_isSet = false;
    m_product_category_isValid = false;

    m_product_description_isSet = false;
    m_product_description_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_manufacturer_isSet = false;
    m_product_manufacturer_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_product_name_raw_isSet = false;
    m_product_name_raw_isValid = false;

    m_product_on_market_date_isSet = false;
    m_product_on_market_date_isValid = false;

    m_updated_date_isSet = false;
    m_updated_date_isValid = false;
}

void OAIProduct_listing_level_info_result_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct_listing_level_info_result_inner::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("created_date")]);
    m_created_date_isSet = !json[QString("created_date")].isNull() && m_created_date_isValid;

    m_highlights_info_isValid = ::OpenAPI::fromJsonValue(m_highlights_info, json[QString("highlights_info")]);
    m_highlights_info_isSet = !json[QString("highlights_info")].isNull() && m_highlights_info_isValid;

    m_mktg_prd_type_isValid = ::OpenAPI::fromJsonValue(m_mktg_prd_type, json[QString("mktg_prd_type")]);
    m_mktg_prd_type_isSet = !json[QString("mktg_prd_type")].isNull() && m_mktg_prd_type_isValid;

    m_product_category_isValid = ::OpenAPI::fromJsonValue(m_product_category, json[QString("product_category")]);
    m_product_category_isSet = !json[QString("product_category")].isNull() && m_product_category_isValid;

    m_product_description_isValid = ::OpenAPI::fromJsonValue(m_product_description, json[QString("product_description")]);
    m_product_description_isSet = !json[QString("product_description")].isNull() && m_product_description_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_product_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_product_manufacturer, json[QString("product_manufacturer")]);
    m_product_manufacturer_isSet = !json[QString("product_manufacturer")].isNull() && m_product_manufacturer_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("product_name")]);
    m_product_name_isSet = !json[QString("product_name")].isNull() && m_product_name_isValid;

    m_product_name_raw_isValid = ::OpenAPI::fromJsonValue(m_product_name_raw, json[QString("product_name_raw")]);
    m_product_name_raw_isSet = !json[QString("product_name_raw")].isNull() && m_product_name_raw_isValid;

    m_product_on_market_date_isValid = ::OpenAPI::fromJsonValue(m_product_on_market_date, json[QString("product_on_market_date")]);
    m_product_on_market_date_isSet = !json[QString("product_on_market_date")].isNull() && m_product_on_market_date_isValid;

    m_updated_date_isValid = ::OpenAPI::fromJsonValue(m_updated_date, json[QString("updated_date")]);
    m_updated_date_isSet = !json[QString("updated_date")].isNull() && m_updated_date_isValid;
}

QString OAIProduct_listing_level_info_result_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct_listing_level_info_result_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("created_date"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_highlights_info.size() > 0) {
        obj.insert(QString("highlights_info"), ::OpenAPI::toJsonValue(m_highlights_info));
    }
    if (m_mktg_prd_type_isSet) {
        obj.insert(QString("mktg_prd_type"), ::OpenAPI::toJsonValue(m_mktg_prd_type));
    }
    if (m_product_category.size() > 0) {
        obj.insert(QString("product_category"), ::OpenAPI::toJsonValue(m_product_category));
    }
    if (m_product_description_isSet) {
        obj.insert(QString("product_description"), ::OpenAPI::toJsonValue(m_product_description));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_manufacturer_isSet) {
        obj.insert(QString("product_manufacturer"), ::OpenAPI::toJsonValue(m_product_manufacturer));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("product_name"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_product_name_raw_isSet) {
        obj.insert(QString("product_name_raw"), ::OpenAPI::toJsonValue(m_product_name_raw));
    }
    if (m_product_on_market_date_isSet) {
        obj.insert(QString("product_on_market_date"), ::OpenAPI::toJsonValue(m_product_on_market_date));
    }
    if (m_updated_date_isSet) {
        obj.insert(QString("updated_date"), ::OpenAPI::toJsonValue(m_updated_date));
    }
    return obj;
}

QString OAIProduct_listing_level_info_result_inner::getCreatedDate() const {
    return m_created_date;
}
void OAIProduct_listing_level_info_result_inner::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIProduct_listing_level_info_result_inner::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QList<OAIProduct_listing_level_info_result_inner_highlights_info_inner> OAIProduct_listing_level_info_result_inner::getHighlightsInfo() const {
    return m_highlights_info;
}
void OAIProduct_listing_level_info_result_inner::setHighlightsInfo(const QList<OAIProduct_listing_level_info_result_inner_highlights_info_inner> &highlights_info) {
    m_highlights_info = highlights_info;
    m_highlights_info_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner::is_highlights_info_Set() const{
    return m_highlights_info_isSet;
}

bool OAIProduct_listing_level_info_result_inner::is_highlights_info_Valid() const{
    return m_highlights_info_isValid;
}

QString OAIProduct_listing_level_info_result_inner::getMktgPrdType() const {
    return m_mktg_prd_type;
}
void OAIProduct_listing_level_info_result_inner::setMktgPrdType(const QString &mktg_prd_type) {
    m_mktg_prd_type = mktg_prd_type;
    m_mktg_prd_type_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner::is_mktg_prd_type_Set() const{
    return m_mktg_prd_type_isSet;
}

bool OAIProduct_listing_level_info_result_inner::is_mktg_prd_type_Valid() const{
    return m_mktg_prd_type_isValid;
}

QList<QString> OAIProduct_listing_level_info_result_inner::getProductCategory() const {
    return m_product_category;
}
void OAIProduct_listing_level_info_result_inner::setProductCategory(const QList<QString> &product_category) {
    m_product_category = product_category;
    m_product_category_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner::is_product_category_Set() const{
    return m_product_category_isSet;
}

bool OAIProduct_listing_level_info_result_inner::is_product_category_Valid() const{
    return m_product_category_isValid;
}

QString OAIProduct_listing_level_info_result_inner::getProductDescription() const {
    return m_product_description;
}
void OAIProduct_listing_level_info_result_inner::setProductDescription(const QString &product_description) {
    m_product_description = product_description;
    m_product_description_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner::is_product_description_Set() const{
    return m_product_description_isSet;
}

bool OAIProduct_listing_level_info_result_inner::is_product_description_Valid() const{
    return m_product_description_isValid;
}

QString OAIProduct_listing_level_info_result_inner::getProductId() const {
    return m_product_id;
}
void OAIProduct_listing_level_info_result_inner::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProduct_listing_level_info_result_inner::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProduct_listing_level_info_result_inner::getProductManufacturer() const {
    return m_product_manufacturer;
}
void OAIProduct_listing_level_info_result_inner::setProductManufacturer(const QString &product_manufacturer) {
    m_product_manufacturer = product_manufacturer;
    m_product_manufacturer_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner::is_product_manufacturer_Set() const{
    return m_product_manufacturer_isSet;
}

bool OAIProduct_listing_level_info_result_inner::is_product_manufacturer_Valid() const{
    return m_product_manufacturer_isValid;
}

QString OAIProduct_listing_level_info_result_inner::getProductName() const {
    return m_product_name;
}
void OAIProduct_listing_level_info_result_inner::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAIProduct_listing_level_info_result_inner::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAIProduct_listing_level_info_result_inner::getProductNameRaw() const {
    return m_product_name_raw;
}
void OAIProduct_listing_level_info_result_inner::setProductNameRaw(const QString &product_name_raw) {
    m_product_name_raw = product_name_raw;
    m_product_name_raw_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner::is_product_name_raw_Set() const{
    return m_product_name_raw_isSet;
}

bool OAIProduct_listing_level_info_result_inner::is_product_name_raw_Valid() const{
    return m_product_name_raw_isValid;
}

QString OAIProduct_listing_level_info_result_inner::getProductOnMarketDate() const {
    return m_product_on_market_date;
}
void OAIProduct_listing_level_info_result_inner::setProductOnMarketDate(const QString &product_on_market_date) {
    m_product_on_market_date = product_on_market_date;
    m_product_on_market_date_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner::is_product_on_market_date_Set() const{
    return m_product_on_market_date_isSet;
}

bool OAIProduct_listing_level_info_result_inner::is_product_on_market_date_Valid() const{
    return m_product_on_market_date_isValid;
}

QString OAIProduct_listing_level_info_result_inner::getUpdatedDate() const {
    return m_updated_date;
}
void OAIProduct_listing_level_info_result_inner::setUpdatedDate(const QString &updated_date) {
    m_updated_date = updated_date;
    m_updated_date_isSet = true;
}

bool OAIProduct_listing_level_info_result_inner::is_updated_date_Set() const{
    return m_updated_date_isSet;
}

bool OAIProduct_listing_level_info_result_inner::is_updated_date_Valid() const{
    return m_updated_date_isValid;
}

bool OAIProduct_listing_level_info_result_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlights_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mktg_prd_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_on_market_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct_listing_level_info_result_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
