/**
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetailed_product_information_result_inner_allOf_reference_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetailed_product_information_result_inner_allOf_reference_inner::OAIDetailed_product_information_result_inner_allOf_reference_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetailed_product_information_result_inner_allOf_reference_inner::OAIDetailed_product_information_result_inner_allOf_reference_inner() {
    this->initializeModel();
}

OAIDetailed_product_information_result_inner_allOf_reference_inner::~OAIDetailed_product_information_result_inner_allOf_reference_inner() {}

void OAIDetailed_product_information_result_inner_allOf_reference_inner::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_reference_type_isSet = false;
    m_reference_type_isValid = false;
}

void OAIDetailed_product_information_result_inner_allOf_reference_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetailed_product_information_result_inner_allOf_reference_inner::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_reference_type_isValid = ::OpenAPI::fromJsonValue(m_reference_type, json[QString("reference_type")]);
    m_reference_type_isSet = !json[QString("reference_type")].isNull() && m_reference_type_isValid;
}

QString OAIDetailed_product_information_result_inner_allOf_reference_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetailed_product_information_result_inner_allOf_reference_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id.size() > 0) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_reference_type_isSet) {
        obj.insert(QString("reference_type"), ::OpenAPI::toJsonValue(m_reference_type));
    }
    return obj;
}

QList<QString> OAIDetailed_product_information_result_inner_allOf_reference_inner::getCategoryId() const {
    return m_category_id;
}
void OAIDetailed_product_information_result_inner_allOf_reference_inner::setCategoryId(const QList<QString> &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIDetailed_product_information_result_inner_allOf_reference_inner::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIDetailed_product_information_result_inner_allOf_reference_inner::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIDetailed_product_information_result_inner_allOf_reference_inner::getReferenceId() const {
    return m_reference_id;
}
void OAIDetailed_product_information_result_inner_allOf_reference_inner::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIDetailed_product_information_result_inner_allOf_reference_inner::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIDetailed_product_information_result_inner_allOf_reference_inner::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAIDetailed_product_information_result_inner_allOf_reference_inner::getReferenceType() const {
    return m_reference_type;
}
void OAIDetailed_product_information_result_inner_allOf_reference_inner::setReferenceType(const QString &reference_type) {
    m_reference_type = reference_type;
    m_reference_type_isSet = true;
}

bool OAIDetailed_product_information_result_inner_allOf_reference_inner::is_reference_type_Set() const{
    return m_reference_type_isSet;
}

bool OAIDetailed_product_information_result_inner_allOf_reference_inner::is_reference_type_Valid() const{
    return m_reference_type_isValid;
}

bool OAIDetailed_product_information_result_inner_allOf_reference_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetailed_product_information_result_inner_allOf_reference_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
