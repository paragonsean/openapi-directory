/**
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetailed_ordering_level_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetailed_ordering_level_info::OAIDetailed_ordering_level_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetailed_ordering_level_info::OAIDetailed_ordering_level_info() {
    this->initializeModel();
}

OAIDetailed_ordering_level_info::~OAIDetailed_ordering_level_info() {}

void OAIDetailed_ordering_level_info::initializeModel() {

    m_result_isSet = false;
    m_result_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIDetailed_ordering_level_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetailed_ordering_level_info::fromJsonObject(QJsonObject json) {

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;
}

QString OAIDetailed_ordering_level_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetailed_ordering_level_info::asJsonObject() const {
    QJsonObject obj;
    if (m_result.size() > 0) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QList<OAIDetailed_ordering_level_info_result_inner> OAIDetailed_ordering_level_info::getResult() const {
    return m_result;
}
void OAIDetailed_ordering_level_info::setResult(const QList<OAIDetailed_ordering_level_info_result_inner> &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIDetailed_ordering_level_info::is_result_Set() const{
    return m_result_isSet;
}

bool OAIDetailed_ordering_level_info::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIDetailed_ordering_level_info::getStatus() const {
    return m_status;
}
void OAIDetailed_ordering_level_info::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDetailed_ordering_level_info::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDetailed_ordering_level_info::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIDetailed_ordering_level_info::getTotalCount() const {
    return m_total_count;
}
void OAIDetailed_ordering_level_info::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIDetailed_ordering_level_info::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIDetailed_ordering_level_info::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIDetailed_ordering_level_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetailed_ordering_level_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
