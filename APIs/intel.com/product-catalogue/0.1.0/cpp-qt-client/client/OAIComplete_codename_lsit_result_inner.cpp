/**
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplete_codename_lsit_result_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplete_codename_lsit_result_inner::OAIComplete_codename_lsit_result_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplete_codename_lsit_result_inner::OAIComplete_codename_lsit_result_inner() {
    this->initializeModel();
}

OAIComplete_codename_lsit_result_inner::~OAIComplete_codename_lsit_result_inner() {}

void OAIComplete_codename_lsit_result_inner::initializeModel() {

    m_code_name_id_isSet = false;
    m_code_name_id_isValid = false;

    m_code_name_text_isSet = false;
    m_code_name_text_isValid = false;

    m_code_name_type_isSet = false;
    m_code_name_type_isValid = false;

    m_url_text_isSet = false;
    m_url_text_isValid = false;
}

void OAIComplete_codename_lsit_result_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplete_codename_lsit_result_inner::fromJsonObject(QJsonObject json) {

    m_code_name_id_isValid = ::OpenAPI::fromJsonValue(m_code_name_id, json[QString("CodeNameId")]);
    m_code_name_id_isSet = !json[QString("CodeNameId")].isNull() && m_code_name_id_isValid;

    m_code_name_text_isValid = ::OpenAPI::fromJsonValue(m_code_name_text, json[QString("CodeNameText")]);
    m_code_name_text_isSet = !json[QString("CodeNameText")].isNull() && m_code_name_text_isValid;

    m_code_name_type_isValid = ::OpenAPI::fromJsonValue(m_code_name_type, json[QString("CodeNameType")]);
    m_code_name_type_isSet = !json[QString("CodeNameType")].isNull() && m_code_name_type_isValid;

    m_url_text_isValid = ::OpenAPI::fromJsonValue(m_url_text, json[QString("UrlText")]);
    m_url_text_isSet = !json[QString("UrlText")].isNull() && m_url_text_isValid;
}

QString OAIComplete_codename_lsit_result_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplete_codename_lsit_result_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_code_name_id_isSet) {
        obj.insert(QString("CodeNameId"), ::OpenAPI::toJsonValue(m_code_name_id));
    }
    if (m_code_name_text_isSet) {
        obj.insert(QString("CodeNameText"), ::OpenAPI::toJsonValue(m_code_name_text));
    }
    if (m_code_name_type_isSet) {
        obj.insert(QString("CodeNameType"), ::OpenAPI::toJsonValue(m_code_name_type));
    }
    if (m_url_text_isSet) {
        obj.insert(QString("UrlText"), ::OpenAPI::toJsonValue(m_url_text));
    }
    return obj;
}

QString OAIComplete_codename_lsit_result_inner::getCodeNameId() const {
    return m_code_name_id;
}
void OAIComplete_codename_lsit_result_inner::setCodeNameId(const QString &code_name_id) {
    m_code_name_id = code_name_id;
    m_code_name_id_isSet = true;
}

bool OAIComplete_codename_lsit_result_inner::is_code_name_id_Set() const{
    return m_code_name_id_isSet;
}

bool OAIComplete_codename_lsit_result_inner::is_code_name_id_Valid() const{
    return m_code_name_id_isValid;
}

QString OAIComplete_codename_lsit_result_inner::getCodeNameText() const {
    return m_code_name_text;
}
void OAIComplete_codename_lsit_result_inner::setCodeNameText(const QString &code_name_text) {
    m_code_name_text = code_name_text;
    m_code_name_text_isSet = true;
}

bool OAIComplete_codename_lsit_result_inner::is_code_name_text_Set() const{
    return m_code_name_text_isSet;
}

bool OAIComplete_codename_lsit_result_inner::is_code_name_text_Valid() const{
    return m_code_name_text_isValid;
}

QString OAIComplete_codename_lsit_result_inner::getCodeNameType() const {
    return m_code_name_type;
}
void OAIComplete_codename_lsit_result_inner::setCodeNameType(const QString &code_name_type) {
    m_code_name_type = code_name_type;
    m_code_name_type_isSet = true;
}

bool OAIComplete_codename_lsit_result_inner::is_code_name_type_Set() const{
    return m_code_name_type_isSet;
}

bool OAIComplete_codename_lsit_result_inner::is_code_name_type_Valid() const{
    return m_code_name_type_isValid;
}

QString OAIComplete_codename_lsit_result_inner::getUrlText() const {
    return m_url_text;
}
void OAIComplete_codename_lsit_result_inner::setUrlText(const QString &url_text) {
    m_url_text = url_text;
    m_url_text_isSet = true;
}

bool OAIComplete_codename_lsit_result_inner::is_url_text_Set() const{
    return m_url_text_isSet;
}

bool OAIComplete_codename_lsit_result_inner::is_url_text_Valid() const{
    return m_url_text_isValid;
}

bool OAIComplete_codename_lsit_result_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_name_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_name_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_name_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplete_codename_lsit_result_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
