/**
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductListingLevelInfoResultInner from './ProductListingLevelInfoResultInner';

/**
 * The ProductListingLevelInfo model module.
 * @module model/ProductListingLevelInfo
 * @version 0.1.0
 */
class ProductListingLevelInfo {
    /**
     * Constructs a new <code>ProductListingLevelInfo</code>.
     * @alias module:model/ProductListingLevelInfo
     * @param pageNo {String} 
     * @param perPage {Number} 
     * @param result {Array.<module:model/ProductListingLevelInfoResultInner>} Multiple objects with product data.
     * @param status {String} 
     * @param totalCount {Number} 
     */
    constructor(pageNo, perPage, result, status, totalCount) { 
        
        ProductListingLevelInfo.initialize(this, pageNo, perPage, result, status, totalCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pageNo, perPage, result, status, totalCount) { 
        obj['page_no'] = pageNo;
        obj['per_page'] = perPage;
        obj['result'] = result;
        obj['status'] = status;
        obj['total_count'] = totalCount;
    }

    /**
     * Constructs a <code>ProductListingLevelInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductListingLevelInfo} obj Optional instance to populate.
     * @return {module:model/ProductListingLevelInfo} The populated <code>ProductListingLevelInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductListingLevelInfo();

            if (data.hasOwnProperty('page_no')) {
                obj['page_no'] = ApiClient.convertToType(data['page_no'], 'String');
            }
            if (data.hasOwnProperty('per_page')) {
                obj['per_page'] = ApiClient.convertToType(data['per_page'], 'Number');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], [ProductListingLevelInfoResultInner]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('total_count')) {
                obj['total_count'] = ApiClient.convertToType(data['total_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductListingLevelInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductListingLevelInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductListingLevelInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['page_no'] && !(typeof data['page_no'] === 'string' || data['page_no'] instanceof String)) {
            throw new Error("Expected the field `page_no` to be a primitive type in the JSON string but got " + data['page_no']);
        }
        if (data['result']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['result'])) {
                throw new Error("Expected the field `result` to be an array in the JSON data but got " + data['result']);
            }
            // validate the optional field `result` (array)
            for (const item of data['result']) {
                ProductListingLevelInfoResultInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

ProductListingLevelInfo.RequiredProperties = ["page_no", "per_page", "result", "status", "total_count"];

/**
 * @member {String} page_no
 */
ProductListingLevelInfo.prototype['page_no'] = undefined;

/**
 * @member {Number} per_page
 */
ProductListingLevelInfo.prototype['per_page'] = undefined;

/**
 * Multiple objects with product data.
 * @member {Array.<module:model/ProductListingLevelInfoResultInner>} result
 */
ProductListingLevelInfo.prototype['result'] = undefined;

/**
 * @member {String} status
 */
ProductListingLevelInfo.prototype['status'] = undefined;

/**
 * @member {Number} total_count
 */
ProductListingLevelInfo.prototype['total_count'] = undefined;






export default ProductListingLevelInfo;

