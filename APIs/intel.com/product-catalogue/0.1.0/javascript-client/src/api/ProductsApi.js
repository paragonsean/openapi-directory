/**
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompleteCodenameLsit from '../model/CompleteCodenameLsit';
import DetailedOrderingLevelInfo from '../model/DetailedOrderingLevelInfo';
import DetailedProductInformation from '../model/DetailedProductInformation';
import ProductListingLevelInfo from '../model/ProductListingLevelInfo';
import UnsuccessfulOperation from '../model/UnsuccessfulOperation';

/**
* Products service.
* @module api/ProductsApi
* @version 0.1.0
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCodeName operation.
     * @callback module:api/ProductsApi~getCodeNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompleteCodenameLsit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 5. Get list of codename details for Intel products.
     * Use this to get codename details for Intel products. No pagination supported.
     * @param {module:model/String} localeGeoId Locale and Geo code used to get localised data.<br/><br/>
     * @param {module:api/ProductsApi~getCodeNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompleteCodenameLsit}
     */
    getCodeName(localeGeoId, callback) {
      let postBody = null;
      // verify the required parameter 'localeGeoId' is set
      if (localeGeoId === undefined || localeGeoId === null) {
        throw new Error("Missing the required parameter 'localeGeoId' when calling getCodeName");
      }

      let pathParams = {
      };
      let queryParams = {
        'locale_geo_id': localeGeoId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ClientId'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CompleteCodenameLsit;
      return this.apiClient.callApi(
        '/api/products/get-codename', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductInfo operation.
     * @callback module:api/ProductsApi~getProductInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetailedProductInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2. Get complete product info with product id.
     * Use this to get complete product info. No pagination supported.
     * @param {module:model/String} localeGeoId Locale and Geo code used to get localised data.<br/><br/>
     * @param {String} productId Product id's that needs to be filtered. Only max of 40 products are supported now. Values must be enclosed in [ square brackets ] and each value must be in \"double quotes\". Use comma to add multiple values.<br/><br/>Example: [\"223\",\"224\"]
     * @param {Object} opts Optional parameters
     * @param {String} [includeReference] If send \"true\", this will fetch variant/compatible info into result set. Default is false.
     * @param {module:api/ProductsApi~getProductInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetailedProductInformation}
     */
    getProductInfo(localeGeoId, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'localeGeoId' is set
      if (localeGeoId === undefined || localeGeoId === null) {
        throw new Error("Missing the required parameter 'localeGeoId' when calling getProductInfo");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'locale_geo_id': localeGeoId,
        'product_id': productId,
        'include_reference': opts['includeReference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ClientId'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = DetailedProductInformation;
      return this.apiClient.callApi(
        '/api/products/get-products-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductList operation.
     * @callback module:api/ProductsApi~getProductListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductListingLevelInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 1. Find products by product id or category id
     * Use this to get basic details of products with pagination. Can be used to generate listing page for products.
     * @param {module:model/String} localeGeoId Locale and Geo code used to get localised data.<br/><br/>
     * @param {Object} opts Optional parameters
     * @param {String} [categoryId] Filter products based on one or multiple category id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \"double quotes\". Use comma to add multiple values. <br/><br/>Example: [\"873\"]<br/><br/>Categories Available:<br/> Processors = 873, Server Products = 1201, Mini PC's = 98414, Wireless Networking = 59485, Ethernet Products = 36773, Fabric products = 70021, Memory and Storage = 35125, Chipsets = 53, Graphics Drivers = 80939 <br/><br/>
     * @param {String} [productId] Filter products based on one or multiple product id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \"double quotes\". Use comma to add multiple values. <br/><br/>Example: [\"123003\"]<br/><br/>
     * @param {String} [highlights] Specification values which needs to be pulled from product data. Values must be enclosed in [ square brackets ] and each value must be in \"double quotes\". Use comma to add multiple values. <br/><br/>Example: [\"CoreCount\", \"StatusCodeText\"]<br/><br/>
     * @param {String} [sort] Indicates sorting fields. Accepts array of objects in format like: [{\"field\":\"name\",\"order\":\"ASC\"}].<br/><br/>Any specification that we get from get-product-info can be used to sort result. Other generic sort field is \"name\".<br/><br/>
     * @param {String} [filters] Allows to filter data.<br/><br/>Format of filter: [{\"type\":\"specvalue\",\"name\":\"ThreadCount\",\"gteq\":\"4\"}]<br/><br/><b>Available operators are:</b> \"eq\": equal to, \"neq\": not equal to, \"lteq\": less than or equal to, \"gteq\": greater than or equal to, \"swc\": starts with characters, \"nswc\": not starting with characters, \"cts\": contains, \"ncts\": not contains<br/><br/><b>Conditions:</b> By default all objects works on an AND condition. But inside an object we have the capability to put an \"OR\" or \"AND\" condition.<br/>Example conditions: [{\"type\":\"specvalue\",\"name\":\"ThreadCount\",\"ncts\":\"4,5\",\"cond\":\"AND\"}]<br/><br/><br/>
     * @param {Number} [perPage] Filter number of products in response to desired size.
     * @param {Number} [pageNo] Indicates page number for pagination of results.
     * @param {module:api/ProductsApi~getProductListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductListingLevelInfo}
     */
    getProductList(localeGeoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'localeGeoId' is set
      if (localeGeoId === undefined || localeGeoId === null) {
        throw new Error("Missing the required parameter 'localeGeoId' when calling getProductList");
      }

      let pathParams = {
      };
      let queryParams = {
        'locale_geo_id': localeGeoId,
        'category_id': opts['categoryId'],
        'product_id': opts['productId'],
        'highlights': opts['highlights'],
        'sort': opts['sort'],
        'filters': opts['filters'],
        'per_page': opts['perPage'],
        'page_no': opts['pageNo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ClientId'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProductListingLevelInfo;
      return this.apiClient.callApi(
        '/api/products/get-products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getorderinginfo operation.
     * @callback module:api/ProductsApi~getorderinginfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetailedOrderingLevelInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 3. Get ordering info for product id's requested.
     * Use this to fetch ordering info details for Intel products. No pagination supported.
     * @param {String} productId Filter ordering info details based on one or multiple product id's. Values must be enclosed in [ square brackets ] and each value must be in \"double quotes\". Use comma to add multiple values. <br/><br/>Example: [\"123003\"]
     * @param {module:model/String} localeGeoId Locale and Geo code used to get localised data.<br/><br/>
     * @param {module:api/ProductsApi~getorderinginfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetailedOrderingLevelInfo}
     */
    getorderinginfo(productId, localeGeoId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getorderinginfo");
      }
      // verify the required parameter 'localeGeoId' is set
      if (localeGeoId === undefined || localeGeoId === null) {
        throw new Error("Missing the required parameter 'localeGeoId' when calling getorderinginfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'locale_geo_id': localeGeoId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ClientId'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = DetailedOrderingLevelInfo;
      return this.apiClient.callApi(
        '/api/products/get-ordering-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
