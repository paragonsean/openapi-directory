/**
 * Intel Product Catalogue Service
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IntelProductCatalogueService);
  }
}(this, function(expect, IntelProductCatalogueService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IntelProductCatalogueService.CompleteCodenameLsitResultInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CompleteCodenameLsitResultInner', function() {
    it('should create an instance of CompleteCodenameLsitResultInner', function() {
      // uncomment below and update the code to test CompleteCodenameLsitResultInner
      //var instance = new IntelProductCatalogueService.CompleteCodenameLsitResultInner();
      //expect(instance).to.be.a(IntelProductCatalogueService.CompleteCodenameLsitResultInner);
    });

    it('should have the property codeNameId (base name: "CodeNameId")', function() {
      // uncomment below and update the code to test the property codeNameId
      //var instance = new IntelProductCatalogueService.CompleteCodenameLsitResultInner();
      //expect(instance).to.be();
    });

    it('should have the property codeNameText (base name: "CodeNameText")', function() {
      // uncomment below and update the code to test the property codeNameText
      //var instance = new IntelProductCatalogueService.CompleteCodenameLsitResultInner();
      //expect(instance).to.be();
    });

    it('should have the property codeNameType (base name: "CodeNameType")', function() {
      // uncomment below and update the code to test the property codeNameType
      //var instance = new IntelProductCatalogueService.CompleteCodenameLsitResultInner();
      //expect(instance).to.be();
    });

    it('should have the property urlText (base name: "UrlText")', function() {
      // uncomment below and update the code to test the property urlText
      //var instance = new IntelProductCatalogueService.CompleteCodenameLsitResultInner();
      //expect(instance).to.be();
    });

  });

}));
