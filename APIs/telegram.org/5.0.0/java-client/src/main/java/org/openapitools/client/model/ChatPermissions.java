/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes actions that a non-administrator user is allowed to take in a chat.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChatPermissions {
  public static final String SERIALIZED_NAME_CAN_ADD_WEB_PAGE_PREVIEWS = "can_add_web_page_previews";
  @SerializedName(SERIALIZED_NAME_CAN_ADD_WEB_PAGE_PREVIEWS)
  private Boolean canAddWebPagePreviews;

  public static final String SERIALIZED_NAME_CAN_CHANGE_INFO = "can_change_info";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_INFO)
  private Boolean canChangeInfo;

  public static final String SERIALIZED_NAME_CAN_INVITE_USERS = "can_invite_users";
  @SerializedName(SERIALIZED_NAME_CAN_INVITE_USERS)
  private Boolean canInviteUsers;

  public static final String SERIALIZED_NAME_CAN_PIN_MESSAGES = "can_pin_messages";
  @SerializedName(SERIALIZED_NAME_CAN_PIN_MESSAGES)
  private Boolean canPinMessages;

  public static final String SERIALIZED_NAME_CAN_SEND_MEDIA_MESSAGES = "can_send_media_messages";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_MEDIA_MESSAGES)
  private Boolean canSendMediaMessages;

  public static final String SERIALIZED_NAME_CAN_SEND_MESSAGES = "can_send_messages";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_MESSAGES)
  private Boolean canSendMessages;

  public static final String SERIALIZED_NAME_CAN_SEND_OTHER_MESSAGES = "can_send_other_messages";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_OTHER_MESSAGES)
  private Boolean canSendOtherMessages;

  public static final String SERIALIZED_NAME_CAN_SEND_POLLS = "can_send_polls";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_POLLS)
  private Boolean canSendPolls;

  public ChatPermissions() {
  }

  public ChatPermissions canAddWebPagePreviews(Boolean canAddWebPagePreviews) {
    this.canAddWebPagePreviews = canAddWebPagePreviews;
    return this;
  }

  /**
   * *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\\_send\\_media\\_messages
   * @return canAddWebPagePreviews
   */
  @javax.annotation.Nullable
  public Boolean getCanAddWebPagePreviews() {
    return canAddWebPagePreviews;
  }

  public void setCanAddWebPagePreviews(Boolean canAddWebPagePreviews) {
    this.canAddWebPagePreviews = canAddWebPagePreviews;
  }


  public ChatPermissions canChangeInfo(Boolean canChangeInfo) {
    this.canChangeInfo = canChangeInfo;
    return this;
  }

  /**
   * *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
   * @return canChangeInfo
   */
  @javax.annotation.Nullable
  public Boolean getCanChangeInfo() {
    return canChangeInfo;
  }

  public void setCanChangeInfo(Boolean canChangeInfo) {
    this.canChangeInfo = canChangeInfo;
  }


  public ChatPermissions canInviteUsers(Boolean canInviteUsers) {
    this.canInviteUsers = canInviteUsers;
    return this;
  }

  /**
   * *Optional*. True, if the user is allowed to invite new users to the chat
   * @return canInviteUsers
   */
  @javax.annotation.Nullable
  public Boolean getCanInviteUsers() {
    return canInviteUsers;
  }

  public void setCanInviteUsers(Boolean canInviteUsers) {
    this.canInviteUsers = canInviteUsers;
  }


  public ChatPermissions canPinMessages(Boolean canPinMessages) {
    this.canPinMessages = canPinMessages;
    return this;
  }

  /**
   * *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups
   * @return canPinMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanPinMessages() {
    return canPinMessages;
  }

  public void setCanPinMessages(Boolean canPinMessages) {
    this.canPinMessages = canPinMessages;
  }


  public ChatPermissions canSendMediaMessages(Boolean canSendMediaMessages) {
    this.canSendMediaMessages = canSendMediaMessages;
    return this;
  }

  /**
   * *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\\_send\\_messages
   * @return canSendMediaMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanSendMediaMessages() {
    return canSendMediaMessages;
  }

  public void setCanSendMediaMessages(Boolean canSendMediaMessages) {
    this.canSendMediaMessages = canSendMediaMessages;
  }


  public ChatPermissions canSendMessages(Boolean canSendMessages) {
    this.canSendMessages = canSendMessages;
    return this;
  }

  /**
   * *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues
   * @return canSendMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanSendMessages() {
    return canSendMessages;
  }

  public void setCanSendMessages(Boolean canSendMessages) {
    this.canSendMessages = canSendMessages;
  }


  public ChatPermissions canSendOtherMessages(Boolean canSendOtherMessages) {
    this.canSendOtherMessages = canSendOtherMessages;
    return this;
  }

  /**
   * *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\\_send\\_media\\_messages
   * @return canSendOtherMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanSendOtherMessages() {
    return canSendOtherMessages;
  }

  public void setCanSendOtherMessages(Boolean canSendOtherMessages) {
    this.canSendOtherMessages = canSendOtherMessages;
  }


  public ChatPermissions canSendPolls(Boolean canSendPolls) {
    this.canSendPolls = canSendPolls;
    return this;
  }

  /**
   * *Optional*. True, if the user is allowed to send polls, implies can\\_send\\_messages
   * @return canSendPolls
   */
  @javax.annotation.Nullable
  public Boolean getCanSendPolls() {
    return canSendPolls;
  }

  public void setCanSendPolls(Boolean canSendPolls) {
    this.canSendPolls = canSendPolls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChatPermissions chatPermissions = (ChatPermissions) o;
    return Objects.equals(this.canAddWebPagePreviews, chatPermissions.canAddWebPagePreviews) &&
        Objects.equals(this.canChangeInfo, chatPermissions.canChangeInfo) &&
        Objects.equals(this.canInviteUsers, chatPermissions.canInviteUsers) &&
        Objects.equals(this.canPinMessages, chatPermissions.canPinMessages) &&
        Objects.equals(this.canSendMediaMessages, chatPermissions.canSendMediaMessages) &&
        Objects.equals(this.canSendMessages, chatPermissions.canSendMessages) &&
        Objects.equals(this.canSendOtherMessages, chatPermissions.canSendOtherMessages) &&
        Objects.equals(this.canSendPolls, chatPermissions.canSendPolls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canAddWebPagePreviews, canChangeInfo, canInviteUsers, canPinMessages, canSendMediaMessages, canSendMessages, canSendOtherMessages, canSendPolls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChatPermissions {\n");
    sb.append("    canAddWebPagePreviews: ").append(toIndentedString(canAddWebPagePreviews)).append("\n");
    sb.append("    canChangeInfo: ").append(toIndentedString(canChangeInfo)).append("\n");
    sb.append("    canInviteUsers: ").append(toIndentedString(canInviteUsers)).append("\n");
    sb.append("    canPinMessages: ").append(toIndentedString(canPinMessages)).append("\n");
    sb.append("    canSendMediaMessages: ").append(toIndentedString(canSendMediaMessages)).append("\n");
    sb.append("    canSendMessages: ").append(toIndentedString(canSendMessages)).append("\n");
    sb.append("    canSendOtherMessages: ").append(toIndentedString(canSendOtherMessages)).append("\n");
    sb.append("    canSendPolls: ").append(toIndentedString(canSendPolls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_add_web_page_previews");
    openapiFields.add("can_change_info");
    openapiFields.add("can_invite_users");
    openapiFields.add("can_pin_messages");
    openapiFields.add("can_send_media_messages");
    openapiFields.add("can_send_messages");
    openapiFields.add("can_send_other_messages");
    openapiFields.add("can_send_polls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChatPermissions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChatPermissions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChatPermissions is not found in the empty JSON string", ChatPermissions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChatPermissions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChatPermissions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChatPermissions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChatPermissions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChatPermissions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChatPermissions.class));

       return (TypeAdapter<T>) new TypeAdapter<ChatPermissions>() {
           @Override
           public void write(JsonWriter out, ChatPermissions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChatPermissions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChatPermissions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChatPermissions
   * @throws IOException if the JSON string is invalid with respect to ChatPermissions
   */
  public static ChatPermissions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChatPermissions.class);
  }

  /**
   * Convert an instance of ChatPermissions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

