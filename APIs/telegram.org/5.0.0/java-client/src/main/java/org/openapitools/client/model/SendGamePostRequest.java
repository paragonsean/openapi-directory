/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InlineKeyboardMarkup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendGamePostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendGamePostRequest {
  public static final String SERIALIZED_NAME_ALLOW_SENDING_WITHOUT_REPLY = "allow_sending_without_reply";
  @SerializedName(SERIALIZED_NAME_ALLOW_SENDING_WITHOUT_REPLY)
  private Boolean allowSendingWithoutReply;

  public static final String SERIALIZED_NAME_CHAT_ID = "chat_id";
  @SerializedName(SERIALIZED_NAME_CHAT_ID)
  private Integer chatId;

  public static final String SERIALIZED_NAME_DISABLE_NOTIFICATION = "disable_notification";
  @SerializedName(SERIALIZED_NAME_DISABLE_NOTIFICATION)
  private Boolean disableNotification;

  public static final String SERIALIZED_NAME_GAME_SHORT_NAME = "game_short_name";
  @SerializedName(SERIALIZED_NAME_GAME_SHORT_NAME)
  private String gameShortName;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private InlineKeyboardMarkup replyMarkup;

  public static final String SERIALIZED_NAME_REPLY_TO_MESSAGE_ID = "reply_to_message_id";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_MESSAGE_ID)
  private Integer replyToMessageId;

  public SendGamePostRequest() {
  }

  public SendGamePostRequest allowSendingWithoutReply(Boolean allowSendingWithoutReply) {
    this.allowSendingWithoutReply = allowSendingWithoutReply;
    return this;
  }

  /**
   * Pass *True*, if the message should be sent even if the specified replied-to message is not found
   * @return allowSendingWithoutReply
   */
  @javax.annotation.Nullable
  public Boolean getAllowSendingWithoutReply() {
    return allowSendingWithoutReply;
  }

  public void setAllowSendingWithoutReply(Boolean allowSendingWithoutReply) {
    this.allowSendingWithoutReply = allowSendingWithoutReply;
  }


  public SendGamePostRequest chatId(Integer chatId) {
    this.chatId = chatId;
    return this;
  }

  /**
   * Unique identifier for the target chat
   * @return chatId
   */
  @javax.annotation.Nonnull
  public Integer getChatId() {
    return chatId;
  }

  public void setChatId(Integer chatId) {
    this.chatId = chatId;
  }


  public SendGamePostRequest disableNotification(Boolean disableNotification) {
    this.disableNotification = disableNotification;
    return this;
  }

  /**
   * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
   * @return disableNotification
   */
  @javax.annotation.Nullable
  public Boolean getDisableNotification() {
    return disableNotification;
  }

  public void setDisableNotification(Boolean disableNotification) {
    this.disableNotification = disableNotification;
  }


  public SendGamePostRequest gameShortName(String gameShortName) {
    this.gameShortName = gameShortName;
    return this;
  }

  /**
   * Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
   * @return gameShortName
   */
  @javax.annotation.Nonnull
  public String getGameShortName() {
    return gameShortName;
  }

  public void setGameShortName(String gameShortName) {
    this.gameShortName = gameShortName;
  }


  public SendGamePostRequest replyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public InlineKeyboardMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public SendGamePostRequest replyToMessageId(Integer replyToMessageId) {
    this.replyToMessageId = replyToMessageId;
    return this;
  }

  /**
   * If the message is a reply, ID of the original message
   * @return replyToMessageId
   */
  @javax.annotation.Nullable
  public Integer getReplyToMessageId() {
    return replyToMessageId;
  }

  public void setReplyToMessageId(Integer replyToMessageId) {
    this.replyToMessageId = replyToMessageId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendGamePostRequest sendGamePostRequest = (SendGamePostRequest) o;
    return Objects.equals(this.allowSendingWithoutReply, sendGamePostRequest.allowSendingWithoutReply) &&
        Objects.equals(this.chatId, sendGamePostRequest.chatId) &&
        Objects.equals(this.disableNotification, sendGamePostRequest.disableNotification) &&
        Objects.equals(this.gameShortName, sendGamePostRequest.gameShortName) &&
        Objects.equals(this.replyMarkup, sendGamePostRequest.replyMarkup) &&
        Objects.equals(this.replyToMessageId, sendGamePostRequest.replyToMessageId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowSendingWithoutReply, chatId, disableNotification, gameShortName, replyMarkup, replyToMessageId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendGamePostRequest {\n");
    sb.append("    allowSendingWithoutReply: ").append(toIndentedString(allowSendingWithoutReply)).append("\n");
    sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
    sb.append("    disableNotification: ").append(toIndentedString(disableNotification)).append("\n");
    sb.append("    gameShortName: ").append(toIndentedString(gameShortName)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    replyToMessageId: ").append(toIndentedString(replyToMessageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_sending_without_reply");
    openapiFields.add("chat_id");
    openapiFields.add("disable_notification");
    openapiFields.add("game_short_name");
    openapiFields.add("reply_markup");
    openapiFields.add("reply_to_message_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chat_id");
    openapiRequiredFields.add("game_short_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendGamePostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendGamePostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendGamePostRequest is not found in the empty JSON string", SendGamePostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendGamePostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendGamePostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendGamePostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("game_short_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `game_short_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("game_short_name").toString()));
      }
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        InlineKeyboardMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendGamePostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendGamePostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendGamePostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendGamePostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendGamePostRequest>() {
           @Override
           public void write(JsonWriter out, SendGamePostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendGamePostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendGamePostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendGamePostRequest
   * @throws IOException if the JSON string is invalid with respect to SendGamePostRequest
   */
  public static SendGamePostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendGamePostRequest.class);
  }

  /**
   * Convert an instance of SendGamePostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

