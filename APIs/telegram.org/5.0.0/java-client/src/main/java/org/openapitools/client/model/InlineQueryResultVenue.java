/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.InlineKeyboardMarkup;
import org.openapitools.client.model.InputMessageContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the venue.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InlineQueryResultVenue {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_FOURSQUARE_ID = "foursquare_id";
  @SerializedName(SERIALIZED_NAME_FOURSQUARE_ID)
  private String foursquareId;

  public static final String SERIALIZED_NAME_FOURSQUARE_TYPE = "foursquare_type";
  @SerializedName(SERIALIZED_NAME_FOURSQUARE_TYPE)
  private String foursquareType;

  public static final String SERIALIZED_NAME_GOOGLE_PLACE_ID = "google_place_id";
  @SerializedName(SERIALIZED_NAME_GOOGLE_PLACE_ID)
  private String googlePlaceId;

  public static final String SERIALIZED_NAME_GOOGLE_PLACE_TYPE = "google_place_type";
  @SerializedName(SERIALIZED_NAME_GOOGLE_PLACE_TYPE)
  private String googlePlaceType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT_MESSAGE_CONTENT = "input_message_content";
  @SerializedName(SERIALIZED_NAME_INPUT_MESSAGE_CONTENT)
  private InputMessageContent inputMessageContent;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private InlineKeyboardMarkup replyMarkup;

  public static final String SERIALIZED_NAME_THUMB_HEIGHT = "thumb_height";
  @SerializedName(SERIALIZED_NAME_THUMB_HEIGHT)
  private Integer thumbHeight;

  public static final String SERIALIZED_NAME_THUMB_URL = "thumb_url";
  @SerializedName(SERIALIZED_NAME_THUMB_URL)
  private String thumbUrl;

  public static final String SERIALIZED_NAME_THUMB_WIDTH = "thumb_width";
  @SerializedName(SERIALIZED_NAME_THUMB_WIDTH)
  private Integer thumbWidth;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public InlineQueryResultVenue() {
  }

  public InlineQueryResultVenue address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Address of the venue
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public InlineQueryResultVenue foursquareId(String foursquareId) {
    this.foursquareId = foursquareId;
    return this;
  }

  /**
   * *Optional*. Foursquare identifier of the venue if known
   * @return foursquareId
   */
  @javax.annotation.Nullable
  public String getFoursquareId() {
    return foursquareId;
  }

  public void setFoursquareId(String foursquareId) {
    this.foursquareId = foursquareId;
  }


  public InlineQueryResultVenue foursquareType(String foursquareType) {
    this.foursquareType = foursquareType;
    return this;
  }

  /**
   * *Optional*. Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)
   * @return foursquareType
   */
  @javax.annotation.Nullable
  public String getFoursquareType() {
    return foursquareType;
  }

  public void setFoursquareType(String foursquareType) {
    this.foursquareType = foursquareType;
  }


  public InlineQueryResultVenue googlePlaceId(String googlePlaceId) {
    this.googlePlaceId = googlePlaceId;
    return this;
  }

  /**
   * *Optional*. Google Places identifier of the venue
   * @return googlePlaceId
   */
  @javax.annotation.Nullable
  public String getGooglePlaceId() {
    return googlePlaceId;
  }

  public void setGooglePlaceId(String googlePlaceId) {
    this.googlePlaceId = googlePlaceId;
  }


  public InlineQueryResultVenue googlePlaceType(String googlePlaceType) {
    this.googlePlaceType = googlePlaceType;
    return this;
  }

  /**
   * *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
   * @return googlePlaceType
   */
  @javax.annotation.Nullable
  public String getGooglePlaceType() {
    return googlePlaceType;
  }

  public void setGooglePlaceType(String googlePlaceType) {
    this.googlePlaceType = googlePlaceType;
  }


  public InlineQueryResultVenue id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for this result, 1-64 Bytes
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InlineQueryResultVenue inputMessageContent(InputMessageContent inputMessageContent) {
    this.inputMessageContent = inputMessageContent;
    return this;
  }

  /**
   * Get inputMessageContent
   * @return inputMessageContent
   */
  @javax.annotation.Nullable
  public InputMessageContent getInputMessageContent() {
    return inputMessageContent;
  }

  public void setInputMessageContent(InputMessageContent inputMessageContent) {
    this.inputMessageContent = inputMessageContent;
  }


  public InlineQueryResultVenue latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Latitude of the venue location in degrees
   * @return latitude
   */
  @javax.annotation.Nonnull
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public InlineQueryResultVenue longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Longitude of the venue location in degrees
   * @return longitude
   */
  @javax.annotation.Nonnull
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public InlineQueryResultVenue replyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public InlineKeyboardMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public InlineQueryResultVenue thumbHeight(Integer thumbHeight) {
    this.thumbHeight = thumbHeight;
    return this;
  }

  /**
   * *Optional*. Thumbnail height
   * @return thumbHeight
   */
  @javax.annotation.Nullable
  public Integer getThumbHeight() {
    return thumbHeight;
  }

  public void setThumbHeight(Integer thumbHeight) {
    this.thumbHeight = thumbHeight;
  }


  public InlineQueryResultVenue thumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
    return this;
  }

  /**
   * *Optional*. Url of the thumbnail for the result
   * @return thumbUrl
   */
  @javax.annotation.Nullable
  public String getThumbUrl() {
    return thumbUrl;
  }

  public void setThumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
  }


  public InlineQueryResultVenue thumbWidth(Integer thumbWidth) {
    this.thumbWidth = thumbWidth;
    return this;
  }

  /**
   * *Optional*. Thumbnail width
   * @return thumbWidth
   */
  @javax.annotation.Nullable
  public Integer getThumbWidth() {
    return thumbWidth;
  }

  public void setThumbWidth(Integer thumbWidth) {
    this.thumbWidth = thumbWidth;
  }


  public InlineQueryResultVenue title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the venue
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public InlineQueryResultVenue type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the result, must be *venue*
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineQueryResultVenue inlineQueryResultVenue = (InlineQueryResultVenue) o;
    return Objects.equals(this.address, inlineQueryResultVenue.address) &&
        Objects.equals(this.foursquareId, inlineQueryResultVenue.foursquareId) &&
        Objects.equals(this.foursquareType, inlineQueryResultVenue.foursquareType) &&
        Objects.equals(this.googlePlaceId, inlineQueryResultVenue.googlePlaceId) &&
        Objects.equals(this.googlePlaceType, inlineQueryResultVenue.googlePlaceType) &&
        Objects.equals(this.id, inlineQueryResultVenue.id) &&
        Objects.equals(this.inputMessageContent, inlineQueryResultVenue.inputMessageContent) &&
        Objects.equals(this.latitude, inlineQueryResultVenue.latitude) &&
        Objects.equals(this.longitude, inlineQueryResultVenue.longitude) &&
        Objects.equals(this.replyMarkup, inlineQueryResultVenue.replyMarkup) &&
        Objects.equals(this.thumbHeight, inlineQueryResultVenue.thumbHeight) &&
        Objects.equals(this.thumbUrl, inlineQueryResultVenue.thumbUrl) &&
        Objects.equals(this.thumbWidth, inlineQueryResultVenue.thumbWidth) &&
        Objects.equals(this.title, inlineQueryResultVenue.title) &&
        Objects.equals(this.type, inlineQueryResultVenue.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, foursquareId, foursquareType, googlePlaceId, googlePlaceType, id, inputMessageContent, latitude, longitude, replyMarkup, thumbHeight, thumbUrl, thumbWidth, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineQueryResultVenue {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    foursquareId: ").append(toIndentedString(foursquareId)).append("\n");
    sb.append("    foursquareType: ").append(toIndentedString(foursquareType)).append("\n");
    sb.append("    googlePlaceId: ").append(toIndentedString(googlePlaceId)).append("\n");
    sb.append("    googlePlaceType: ").append(toIndentedString(googlePlaceType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputMessageContent: ").append(toIndentedString(inputMessageContent)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    thumbHeight: ").append(toIndentedString(thumbHeight)).append("\n");
    sb.append("    thumbUrl: ").append(toIndentedString(thumbUrl)).append("\n");
    sb.append("    thumbWidth: ").append(toIndentedString(thumbWidth)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("foursquare_id");
    openapiFields.add("foursquare_type");
    openapiFields.add("google_place_id");
    openapiFields.add("google_place_type");
    openapiFields.add("id");
    openapiFields.add("input_message_content");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("reply_markup");
    openapiFields.add("thumb_height");
    openapiFields.add("thumb_url");
    openapiFields.add("thumb_width");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InlineQueryResultVenue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InlineQueryResultVenue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineQueryResultVenue is not found in the empty JSON string", InlineQueryResultVenue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InlineQueryResultVenue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineQueryResultVenue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InlineQueryResultVenue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("foursquare_id") != null && !jsonObj.get("foursquare_id").isJsonNull()) && !jsonObj.get("foursquare_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foursquare_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foursquare_id").toString()));
      }
      if ((jsonObj.get("foursquare_type") != null && !jsonObj.get("foursquare_type").isJsonNull()) && !jsonObj.get("foursquare_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foursquare_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foursquare_type").toString()));
      }
      if ((jsonObj.get("google_place_id") != null && !jsonObj.get("google_place_id").isJsonNull()) && !jsonObj.get("google_place_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `google_place_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("google_place_id").toString()));
      }
      if ((jsonObj.get("google_place_type") != null && !jsonObj.get("google_place_type").isJsonNull()) && !jsonObj.get("google_place_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `google_place_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("google_place_type").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `input_message_content`
      if (jsonObj.get("input_message_content") != null && !jsonObj.get("input_message_content").isJsonNull()) {
        InputMessageContent.validateJsonElement(jsonObj.get("input_message_content"));
      }
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        InlineKeyboardMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
      if ((jsonObj.get("thumb_url") != null && !jsonObj.get("thumb_url").isJsonNull()) && !jsonObj.get("thumb_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumb_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumb_url").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineQueryResultVenue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineQueryResultVenue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineQueryResultVenue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultVenue.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineQueryResultVenue>() {
           @Override
           public void write(JsonWriter out, InlineQueryResultVenue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineQueryResultVenue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InlineQueryResultVenue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InlineQueryResultVenue
   * @throws IOException if the JSON string is invalid with respect to InlineQueryResultVenue
   */
  public static InlineQueryResultVenue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineQueryResultVenue.class);
  }

  /**
   * Convert an instance of InlineQueryResultVenue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

