/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChatLocation;
import org.openapitools.client.model.ChatPermissions;
import org.openapitools.client.model.ChatPhoto;
import org.openapitools.client.model.Message;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object represents a chat.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Chat {
  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_CAN_SET_STICKER_SET = "can_set_sticker_set";
  @SerializedName(SERIALIZED_NAME_CAN_SET_STICKER_SET)
  private Boolean canSetStickerSet;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INVITE_LINK = "invite_link";
  @SerializedName(SERIALIZED_NAME_INVITE_LINK)
  private String inviteLink;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LINKED_CHAT_ID = "linked_chat_id";
  @SerializedName(SERIALIZED_NAME_LINKED_CHAT_ID)
  private Integer linkedChatId;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private ChatLocation location;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private ChatPermissions permissions;

  public static final String SERIALIZED_NAME_PHOTO = "photo";
  @SerializedName(SERIALIZED_NAME_PHOTO)
  private ChatPhoto photo;

  public static final String SERIALIZED_NAME_PINNED_MESSAGE = "pinned_message";
  @SerializedName(SERIALIZED_NAME_PINNED_MESSAGE)
  private Message pinnedMessage;

  public static final String SERIALIZED_NAME_SLOW_MODE_DELAY = "slow_mode_delay";
  @SerializedName(SERIALIZED_NAME_SLOW_MODE_DELAY)
  private Integer slowModeDelay;

  public static final String SERIALIZED_NAME_STICKER_SET_NAME = "sticker_set_name";
  @SerializedName(SERIALIZED_NAME_STICKER_SET_NAME)
  private String stickerSetName;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * Type of chat, can be either “private”, “group”, “supergroup” or “channel”
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PRIVATE("private"),
    
    GROUP("group"),
    
    SUPERGROUP("supergroup"),
    
    CHANNEL("channel");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public Chat() {
  }

  public Chat bio(String bio) {
    this.bio = bio;
    return this;
  }

  /**
   * *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
   * @return bio
   */
  @javax.annotation.Nullable
  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }


  public Chat canSetStickerSet(Boolean canSetStickerSet) {
    this.canSetStickerSet = canSetStickerSet;
    return this;
  }

  /**
   * *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
   * @return canSetStickerSet
   */
  @javax.annotation.Nullable
  public Boolean getCanSetStickerSet() {
    return canSetStickerSet;
  }

  public void setCanSetStickerSet(Boolean canSetStickerSet) {
    this.canSetStickerSet = canSetStickerSet;
  }


  public Chat description(String description) {
    this.description = description;
    return this;
  }

  /**
   * *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Chat firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * *Optional*. First name of the other party in a private chat
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Chat id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Chat inviteLink(String inviteLink) {
    this.inviteLink = inviteLink;
    return this;
  }

  /**
   * *Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
   * @return inviteLink
   */
  @javax.annotation.Nullable
  public String getInviteLink() {
    return inviteLink;
  }

  public void setInviteLink(String inviteLink) {
    this.inviteLink = inviteLink;
  }


  public Chat lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * *Optional*. Last name of the other party in a private chat
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Chat linkedChatId(Integer linkedChatId) {
    this.linkedChatId = linkedChatId;
    return this;
  }

  /**
   * *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
   * @return linkedChatId
   */
  @javax.annotation.Nullable
  public Integer getLinkedChatId() {
    return linkedChatId;
  }

  public void setLinkedChatId(Integer linkedChatId) {
    this.linkedChatId = linkedChatId;
  }


  public Chat location(ChatLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public ChatLocation getLocation() {
    return location;
  }

  public void setLocation(ChatLocation location) {
    this.location = location;
  }


  public Chat permissions(ChatPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public ChatPermissions getPermissions() {
    return permissions;
  }

  public void setPermissions(ChatPermissions permissions) {
    this.permissions = permissions;
  }


  public Chat photo(ChatPhoto photo) {
    this.photo = photo;
    return this;
  }

  /**
   * Get photo
   * @return photo
   */
  @javax.annotation.Nullable
  public ChatPhoto getPhoto() {
    return photo;
  }

  public void setPhoto(ChatPhoto photo) {
    this.photo = photo;
  }


  public Chat pinnedMessage(Message pinnedMessage) {
    this.pinnedMessage = pinnedMessage;
    return this;
  }

  /**
   * Get pinnedMessage
   * @return pinnedMessage
   */
  @javax.annotation.Nullable
  public Message getPinnedMessage() {
    return pinnedMessage;
  }

  public void setPinnedMessage(Message pinnedMessage) {
    this.pinnedMessage = pinnedMessage;
  }


  public Chat slowModeDelay(Integer slowModeDelay) {
    this.slowModeDelay = slowModeDelay;
    return this;
  }

  /**
   * *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
   * @return slowModeDelay
   */
  @javax.annotation.Nullable
  public Integer getSlowModeDelay() {
    return slowModeDelay;
  }

  public void setSlowModeDelay(Integer slowModeDelay) {
    this.slowModeDelay = slowModeDelay;
  }


  public Chat stickerSetName(String stickerSetName) {
    this.stickerSetName = stickerSetName;
    return this;
  }

  /**
   * *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
   * @return stickerSetName
   */
  @javax.annotation.Nullable
  public String getStickerSetName() {
    return stickerSetName;
  }

  public void setStickerSetName(String stickerSetName) {
    this.stickerSetName = stickerSetName;
  }


  public Chat title(String title) {
    this.title = title;
    return this;
  }

  /**
   * *Optional*. Title, for supergroups, channels and group chats
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Chat type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of chat, can be either “private”, “group”, “supergroup” or “channel”
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Chat username(String username) {
    this.username = username;
    return this;
  }

  /**
   * *Optional*. Username, for private chats, supergroups and channels if available
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Chat chat = (Chat) o;
    return Objects.equals(this.bio, chat.bio) &&
        Objects.equals(this.canSetStickerSet, chat.canSetStickerSet) &&
        Objects.equals(this.description, chat.description) &&
        Objects.equals(this.firstName, chat.firstName) &&
        Objects.equals(this.id, chat.id) &&
        Objects.equals(this.inviteLink, chat.inviteLink) &&
        Objects.equals(this.lastName, chat.lastName) &&
        Objects.equals(this.linkedChatId, chat.linkedChatId) &&
        Objects.equals(this.location, chat.location) &&
        Objects.equals(this.permissions, chat.permissions) &&
        Objects.equals(this.photo, chat.photo) &&
        Objects.equals(this.pinnedMessage, chat.pinnedMessage) &&
        Objects.equals(this.slowModeDelay, chat.slowModeDelay) &&
        Objects.equals(this.stickerSetName, chat.stickerSetName) &&
        Objects.equals(this.title, chat.title) &&
        Objects.equals(this.type, chat.type) &&
        Objects.equals(this.username, chat.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bio, canSetStickerSet, description, firstName, id, inviteLink, lastName, linkedChatId, location, permissions, photo, pinnedMessage, slowModeDelay, stickerSetName, title, type, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Chat {\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    canSetStickerSet: ").append(toIndentedString(canSetStickerSet)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inviteLink: ").append(toIndentedString(inviteLink)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    linkedChatId: ").append(toIndentedString(linkedChatId)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    photo: ").append(toIndentedString(photo)).append("\n");
    sb.append("    pinnedMessage: ").append(toIndentedString(pinnedMessage)).append("\n");
    sb.append("    slowModeDelay: ").append(toIndentedString(slowModeDelay)).append("\n");
    sb.append("    stickerSetName: ").append(toIndentedString(stickerSetName)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bio");
    openapiFields.add("can_set_sticker_set");
    openapiFields.add("description");
    openapiFields.add("first_name");
    openapiFields.add("id");
    openapiFields.add("invite_link");
    openapiFields.add("last_name");
    openapiFields.add("linked_chat_id");
    openapiFields.add("location");
    openapiFields.add("permissions");
    openapiFields.add("photo");
    openapiFields.add("pinned_message");
    openapiFields.add("slow_mode_delay");
    openapiFields.add("sticker_set_name");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Chat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Chat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Chat is not found in the empty JSON string", Chat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Chat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Chat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Chat.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("invite_link") != null && !jsonObj.get("invite_link").isJsonNull()) && !jsonObj.get("invite_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invite_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invite_link").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        ChatLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        ChatPermissions.validateJsonElement(jsonObj.get("permissions"));
      }
      // validate the optional field `photo`
      if (jsonObj.get("photo") != null && !jsonObj.get("photo").isJsonNull()) {
        ChatPhoto.validateJsonElement(jsonObj.get("photo"));
      }
      // validate the optional field `pinned_message`
      if (jsonObj.get("pinned_message") != null && !jsonObj.get("pinned_message").isJsonNull()) {
        Message.validateJsonElement(jsonObj.get("pinned_message"));
      }
      if ((jsonObj.get("sticker_set_name") != null && !jsonObj.get("sticker_set_name").isJsonNull()) && !jsonObj.get("sticker_set_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sticker_set_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sticker_set_name").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Chat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Chat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Chat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Chat.class));

       return (TypeAdapter<T>) new TypeAdapter<Chat>() {
           @Override
           public void write(JsonWriter out, Chat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Chat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Chat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Chat
   * @throws IOException if the JSON string is invalid with respect to Chat
   */
  public static Chat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Chat.class);
  }

  /**
   * Convert an instance of Chat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

