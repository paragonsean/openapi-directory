/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Animation;
import org.openapitools.client.model.Audio;
import org.openapitools.client.model.Chat;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.Dice;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.Game;
import org.openapitools.client.model.InlineKeyboardMarkup;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.MessageEntity;
import org.openapitools.client.model.PassportData;
import org.openapitools.client.model.PhotoSize;
import org.openapitools.client.model.Poll;
import org.openapitools.client.model.ProximityAlertTriggered;
import org.openapitools.client.model.Sticker;
import org.openapitools.client.model.SuccessfulPayment;
import org.openapitools.client.model.User;
import org.openapitools.client.model.Venue;
import org.openapitools.client.model.Video;
import org.openapitools.client.model.VideoNote;
import org.openapitools.client.model.Voice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object represents a message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Message {
  public static final String SERIALIZED_NAME_ANIMATION = "animation";
  @SerializedName(SERIALIZED_NAME_ANIMATION)
  private Animation animation;

  public static final String SERIALIZED_NAME_AUDIO = "audio";
  @SerializedName(SERIALIZED_NAME_AUDIO)
  private Audio audio;

  public static final String SERIALIZED_NAME_AUTHOR_SIGNATURE = "author_signature";
  @SerializedName(SERIALIZED_NAME_AUTHOR_SIGNATURE)
  private String authorSignature;

  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_CAPTION_ENTITIES = "caption_entities";
  @SerializedName(SERIALIZED_NAME_CAPTION_ENTITIES)
  private List<MessageEntity> captionEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANNEL_CHAT_CREATED = "channel_chat_created";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CHAT_CREATED)
  private Boolean channelChatCreated;

  public static final String SERIALIZED_NAME_CHAT = "chat";
  @SerializedName(SERIALIZED_NAME_CHAT)
  private Chat chat;

  public static final String SERIALIZED_NAME_CONNECTED_WEBSITE = "connected_website";
  @SerializedName(SERIALIZED_NAME_CONNECTED_WEBSITE)
  private String connectedWebsite;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private Integer date;

  public static final String SERIALIZED_NAME_DELETE_CHAT_PHOTO = "delete_chat_photo";
  @SerializedName(SERIALIZED_NAME_DELETE_CHAT_PHOTO)
  private Boolean deleteChatPhoto;

  public static final String SERIALIZED_NAME_DICE = "dice";
  @SerializedName(SERIALIZED_NAME_DICE)
  private Dice dice;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private Document document;

  public static final String SERIALIZED_NAME_EDIT_DATE = "edit_date";
  @SerializedName(SERIALIZED_NAME_EDIT_DATE)
  private Integer editDate;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<MessageEntity> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORWARD_DATE = "forward_date";
  @SerializedName(SERIALIZED_NAME_FORWARD_DATE)
  private Integer forwardDate;

  public static final String SERIALIZED_NAME_FORWARD_FROM = "forward_from";
  @SerializedName(SERIALIZED_NAME_FORWARD_FROM)
  private User forwardFrom;

  public static final String SERIALIZED_NAME_FORWARD_FROM_CHAT = "forward_from_chat";
  @SerializedName(SERIALIZED_NAME_FORWARD_FROM_CHAT)
  private Chat forwardFromChat;

  public static final String SERIALIZED_NAME_FORWARD_FROM_MESSAGE_ID = "forward_from_message_id";
  @SerializedName(SERIALIZED_NAME_FORWARD_FROM_MESSAGE_ID)
  private Integer forwardFromMessageId;

  public static final String SERIALIZED_NAME_FORWARD_SENDER_NAME = "forward_sender_name";
  @SerializedName(SERIALIZED_NAME_FORWARD_SENDER_NAME)
  private String forwardSenderName;

  public static final String SERIALIZED_NAME_FORWARD_SIGNATURE = "forward_signature";
  @SerializedName(SERIALIZED_NAME_FORWARD_SIGNATURE)
  private String forwardSignature;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private User from;

  public static final String SERIALIZED_NAME_GAME = "game";
  @SerializedName(SERIALIZED_NAME_GAME)
  private Game game;

  public static final String SERIALIZED_NAME_GROUP_CHAT_CREATED = "group_chat_created";
  @SerializedName(SERIALIZED_NAME_GROUP_CHAT_CREATED)
  private Boolean groupChatCreated;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private Invoice invoice;

  public static final String SERIALIZED_NAME_LEFT_CHAT_MEMBER = "left_chat_member";
  @SerializedName(SERIALIZED_NAME_LEFT_CHAT_MEMBER)
  private User leftChatMember;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_MEDIA_GROUP_ID = "media_group_id";
  @SerializedName(SERIALIZED_NAME_MEDIA_GROUP_ID)
  private String mediaGroupId;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "message_id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private Integer messageId;

  public static final String SERIALIZED_NAME_MIGRATE_FROM_CHAT_ID = "migrate_from_chat_id";
  @SerializedName(SERIALIZED_NAME_MIGRATE_FROM_CHAT_ID)
  private Integer migrateFromChatId;

  public static final String SERIALIZED_NAME_MIGRATE_TO_CHAT_ID = "migrate_to_chat_id";
  @SerializedName(SERIALIZED_NAME_MIGRATE_TO_CHAT_ID)
  private Integer migrateToChatId;

  public static final String SERIALIZED_NAME_NEW_CHAT_MEMBERS = "new_chat_members";
  @SerializedName(SERIALIZED_NAME_NEW_CHAT_MEMBERS)
  private List<User> newChatMembers = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEW_CHAT_PHOTO = "new_chat_photo";
  @SerializedName(SERIALIZED_NAME_NEW_CHAT_PHOTO)
  private List<PhotoSize> newChatPhoto = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEW_CHAT_TITLE = "new_chat_title";
  @SerializedName(SERIALIZED_NAME_NEW_CHAT_TITLE)
  private String newChatTitle;

  public static final String SERIALIZED_NAME_PASSPORT_DATA = "passport_data";
  @SerializedName(SERIALIZED_NAME_PASSPORT_DATA)
  private PassportData passportData;

  public static final String SERIALIZED_NAME_PHOTO = "photo";
  @SerializedName(SERIALIZED_NAME_PHOTO)
  private List<PhotoSize> photo = new ArrayList<>();

  public static final String SERIALIZED_NAME_PINNED_MESSAGE = "pinned_message";
  @SerializedName(SERIALIZED_NAME_PINNED_MESSAGE)
  private Message pinnedMessage;

  public static final String SERIALIZED_NAME_POLL = "poll";
  @SerializedName(SERIALIZED_NAME_POLL)
  private Poll poll;

  public static final String SERIALIZED_NAME_PROXIMITY_ALERT_TRIGGERED = "proximity_alert_triggered";
  @SerializedName(SERIALIZED_NAME_PROXIMITY_ALERT_TRIGGERED)
  private ProximityAlertTriggered proximityAlertTriggered;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private InlineKeyboardMarkup replyMarkup;

  public static final String SERIALIZED_NAME_REPLY_TO_MESSAGE = "reply_to_message";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_MESSAGE)
  private Message replyToMessage;

  public static final String SERIALIZED_NAME_SENDER_CHAT = "sender_chat";
  @SerializedName(SERIALIZED_NAME_SENDER_CHAT)
  private Chat senderChat;

  public static final String SERIALIZED_NAME_STICKER = "sticker";
  @SerializedName(SERIALIZED_NAME_STICKER)
  private Sticker sticker;

  public static final String SERIALIZED_NAME_SUCCESSFUL_PAYMENT = "successful_payment";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_PAYMENT)
  private SuccessfulPayment successfulPayment;

  public static final String SERIALIZED_NAME_SUPERGROUP_CHAT_CREATED = "supergroup_chat_created";
  @SerializedName(SERIALIZED_NAME_SUPERGROUP_CHAT_CREATED)
  private Boolean supergroupChatCreated;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private Venue venue;

  public static final String SERIALIZED_NAME_VIA_BOT = "via_bot";
  @SerializedName(SERIALIZED_NAME_VIA_BOT)
  private User viaBot;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private Video video;

  public static final String SERIALIZED_NAME_VIDEO_NOTE = "video_note";
  @SerializedName(SERIALIZED_NAME_VIDEO_NOTE)
  private VideoNote videoNote;

  public static final String SERIALIZED_NAME_VOICE = "voice";
  @SerializedName(SERIALIZED_NAME_VOICE)
  private Voice voice;

  public Message() {
  }

  public Message animation(Animation animation) {
    this.animation = animation;
    return this;
  }

  /**
   * Get animation
   * @return animation
   */
  @javax.annotation.Nullable
  public Animation getAnimation() {
    return animation;
  }

  public void setAnimation(Animation animation) {
    this.animation = animation;
  }


  public Message audio(Audio audio) {
    this.audio = audio;
    return this;
  }

  /**
   * Get audio
   * @return audio
   */
  @javax.annotation.Nullable
  public Audio getAudio() {
    return audio;
  }

  public void setAudio(Audio audio) {
    this.audio = audio;
  }


  public Message authorSignature(String authorSignature) {
    this.authorSignature = authorSignature;
    return this;
  }

  /**
   * *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
   * @return authorSignature
   */
  @javax.annotation.Nullable
  public String getAuthorSignature() {
    return authorSignature;
  }

  public void setAuthorSignature(String authorSignature) {
    this.authorSignature = authorSignature;
  }


  public Message caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
   * @return caption
   */
  @javax.annotation.Nullable
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public Message captionEntities(List<MessageEntity> captionEntities) {
    this.captionEntities = captionEntities;
    return this;
  }

  public Message addCaptionEntitiesItem(MessageEntity captionEntitiesItem) {
    if (this.captionEntities == null) {
      this.captionEntities = new ArrayList<>();
    }
    this.captionEntities.add(captionEntitiesItem);
    return this;
  }

  /**
   * *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
   * @return captionEntities
   */
  @javax.annotation.Nullable
  public List<MessageEntity> getCaptionEntities() {
    return captionEntities;
  }

  public void setCaptionEntities(List<MessageEntity> captionEntities) {
    this.captionEntities = captionEntities;
  }


  public Message channelChatCreated(Boolean channelChatCreated) {
    this.channelChatCreated = channelChatCreated;
    return this;
  }

  /**
   * *Optional*. Service message: the channel has been created. This field can&#39;t be received in a message coming through updates, because bot can&#39;t be a member of a channel when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a channel.
   * @return channelChatCreated
   */
  @javax.annotation.Nullable
  public Boolean getChannelChatCreated() {
    return channelChatCreated;
  }

  public void setChannelChatCreated(Boolean channelChatCreated) {
    this.channelChatCreated = channelChatCreated;
  }


  public Message chat(Chat chat) {
    this.chat = chat;
    return this;
  }

  /**
   * Get chat
   * @return chat
   */
  @javax.annotation.Nonnull
  public Chat getChat() {
    return chat;
  }

  public void setChat(Chat chat) {
    this.chat = chat;
  }


  public Message connectedWebsite(String connectedWebsite) {
    this.connectedWebsite = connectedWebsite;
    return this;
  }

  /**
   * *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)
   * @return connectedWebsite
   */
  @javax.annotation.Nullable
  public String getConnectedWebsite() {
    return connectedWebsite;
  }

  public void setConnectedWebsite(String connectedWebsite) {
    this.connectedWebsite = connectedWebsite;
  }


  public Message contact(Contact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public Contact getContact() {
    return contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }


  public Message date(Integer date) {
    this.date = date;
    return this;
  }

  /**
   * Date the message was sent in Unix time
   * @return date
   */
  @javax.annotation.Nonnull
  public Integer getDate() {
    return date;
  }

  public void setDate(Integer date) {
    this.date = date;
  }


  public Message deleteChatPhoto(Boolean deleteChatPhoto) {
    this.deleteChatPhoto = deleteChatPhoto;
    return this;
  }

  /**
   * *Optional*. Service message: the chat photo was deleted
   * @return deleteChatPhoto
   */
  @javax.annotation.Nullable
  public Boolean getDeleteChatPhoto() {
    return deleteChatPhoto;
  }

  public void setDeleteChatPhoto(Boolean deleteChatPhoto) {
    this.deleteChatPhoto = deleteChatPhoto;
  }


  public Message dice(Dice dice) {
    this.dice = dice;
    return this;
  }

  /**
   * Get dice
   * @return dice
   */
  @javax.annotation.Nullable
  public Dice getDice() {
    return dice;
  }

  public void setDice(Dice dice) {
    this.dice = dice;
  }


  public Message document(Document document) {
    this.document = document;
    return this;
  }

  /**
   * Get document
   * @return document
   */
  @javax.annotation.Nullable
  public Document getDocument() {
    return document;
  }

  public void setDocument(Document document) {
    this.document = document;
  }


  public Message editDate(Integer editDate) {
    this.editDate = editDate;
    return this;
  }

  /**
   * *Optional*. Date the message was last edited in Unix time
   * @return editDate
   */
  @javax.annotation.Nullable
  public Integer getEditDate() {
    return editDate;
  }

  public void setEditDate(Integer editDate) {
    this.editDate = editDate;
  }


  public Message entities(List<MessageEntity> entities) {
    this.entities = entities;
    return this;
  }

  public Message addEntitiesItem(MessageEntity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
   * @return entities
   */
  @javax.annotation.Nullable
  public List<MessageEntity> getEntities() {
    return entities;
  }

  public void setEntities(List<MessageEntity> entities) {
    this.entities = entities;
  }


  public Message forwardDate(Integer forwardDate) {
    this.forwardDate = forwardDate;
    return this;
  }

  /**
   * *Optional*. For forwarded messages, date the original message was sent in Unix time
   * @return forwardDate
   */
  @javax.annotation.Nullable
  public Integer getForwardDate() {
    return forwardDate;
  }

  public void setForwardDate(Integer forwardDate) {
    this.forwardDate = forwardDate;
  }


  public Message forwardFrom(User forwardFrom) {
    this.forwardFrom = forwardFrom;
    return this;
  }

  /**
   * Get forwardFrom
   * @return forwardFrom
   */
  @javax.annotation.Nullable
  public User getForwardFrom() {
    return forwardFrom;
  }

  public void setForwardFrom(User forwardFrom) {
    this.forwardFrom = forwardFrom;
  }


  public Message forwardFromChat(Chat forwardFromChat) {
    this.forwardFromChat = forwardFromChat;
    return this;
  }

  /**
   * Get forwardFromChat
   * @return forwardFromChat
   */
  @javax.annotation.Nullable
  public Chat getForwardFromChat() {
    return forwardFromChat;
  }

  public void setForwardFromChat(Chat forwardFromChat) {
    this.forwardFromChat = forwardFromChat;
  }


  public Message forwardFromMessageId(Integer forwardFromMessageId) {
    this.forwardFromMessageId = forwardFromMessageId;
    return this;
  }

  /**
   * *Optional*. For messages forwarded from channels, identifier of the original message in the channel
   * @return forwardFromMessageId
   */
  @javax.annotation.Nullable
  public Integer getForwardFromMessageId() {
    return forwardFromMessageId;
  }

  public void setForwardFromMessageId(Integer forwardFromMessageId) {
    this.forwardFromMessageId = forwardFromMessageId;
  }


  public Message forwardSenderName(String forwardSenderName) {
    this.forwardSenderName = forwardSenderName;
    return this;
  }

  /**
   * *Optional*. Sender&#39;s name for messages forwarded from users who disallow adding a link to their account in forwarded messages
   * @return forwardSenderName
   */
  @javax.annotation.Nullable
  public String getForwardSenderName() {
    return forwardSenderName;
  }

  public void setForwardSenderName(String forwardSenderName) {
    this.forwardSenderName = forwardSenderName;
  }


  public Message forwardSignature(String forwardSignature) {
    this.forwardSignature = forwardSignature;
    return this;
  }

  /**
   * *Optional*. For messages forwarded from channels, signature of the post author if present
   * @return forwardSignature
   */
  @javax.annotation.Nullable
  public String getForwardSignature() {
    return forwardSignature;
  }

  public void setForwardSignature(String forwardSignature) {
    this.forwardSignature = forwardSignature;
  }


  public Message from(User from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public User getFrom() {
    return from;
  }

  public void setFrom(User from) {
    this.from = from;
  }


  public Message game(Game game) {
    this.game = game;
    return this;
  }

  /**
   * Get game
   * @return game
   */
  @javax.annotation.Nullable
  public Game getGame() {
    return game;
  }

  public void setGame(Game game) {
    this.game = game;
  }


  public Message groupChatCreated(Boolean groupChatCreated) {
    this.groupChatCreated = groupChatCreated;
    return this;
  }

  /**
   * *Optional*. Service message: the group has been created
   * @return groupChatCreated
   */
  @javax.annotation.Nullable
  public Boolean getGroupChatCreated() {
    return groupChatCreated;
  }

  public void setGroupChatCreated(Boolean groupChatCreated) {
    this.groupChatCreated = groupChatCreated;
  }


  public Message invoice(Invoice invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Get invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public Invoice getInvoice() {
    return invoice;
  }

  public void setInvoice(Invoice invoice) {
    this.invoice = invoice;
  }


  public Message leftChatMember(User leftChatMember) {
    this.leftChatMember = leftChatMember;
    return this;
  }

  /**
   * Get leftChatMember
   * @return leftChatMember
   */
  @javax.annotation.Nullable
  public User getLeftChatMember() {
    return leftChatMember;
  }

  public void setLeftChatMember(User leftChatMember) {
    this.leftChatMember = leftChatMember;
  }


  public Message location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public Message mediaGroupId(String mediaGroupId) {
    this.mediaGroupId = mediaGroupId;
    return this;
  }

  /**
   * *Optional*. The unique identifier of a media message group this message belongs to
   * @return mediaGroupId
   */
  @javax.annotation.Nullable
  public String getMediaGroupId() {
    return mediaGroupId;
  }

  public void setMediaGroupId(String mediaGroupId) {
    this.mediaGroupId = mediaGroupId;
  }


  public Message messageId(Integer messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Unique message identifier inside this chat
   * @return messageId
   */
  @javax.annotation.Nonnull
  public Integer getMessageId() {
    return messageId;
  }

  public void setMessageId(Integer messageId) {
    this.messageId = messageId;
  }


  public Message migrateFromChatId(Integer migrateFromChatId) {
    this.migrateFromChatId = migrateFromChatId;
    return this;
  }

  /**
   * *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
   * @return migrateFromChatId
   */
  @javax.annotation.Nullable
  public Integer getMigrateFromChatId() {
    return migrateFromChatId;
  }

  public void setMigrateFromChatId(Integer migrateFromChatId) {
    this.migrateFromChatId = migrateFromChatId;
  }


  public Message migrateToChatId(Integer migrateToChatId) {
    this.migrateToChatId = migrateToChatId;
    return this;
  }

  /**
   * *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
   * @return migrateToChatId
   */
  @javax.annotation.Nullable
  public Integer getMigrateToChatId() {
    return migrateToChatId;
  }

  public void setMigrateToChatId(Integer migrateToChatId) {
    this.migrateToChatId = migrateToChatId;
  }


  public Message newChatMembers(List<User> newChatMembers) {
    this.newChatMembers = newChatMembers;
    return this;
  }

  public Message addNewChatMembersItem(User newChatMembersItem) {
    if (this.newChatMembers == null) {
      this.newChatMembers = new ArrayList<>();
    }
    this.newChatMembers.add(newChatMembersItem);
    return this;
  }

  /**
   * *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
   * @return newChatMembers
   */
  @javax.annotation.Nullable
  public List<User> getNewChatMembers() {
    return newChatMembers;
  }

  public void setNewChatMembers(List<User> newChatMembers) {
    this.newChatMembers = newChatMembers;
  }


  public Message newChatPhoto(List<PhotoSize> newChatPhoto) {
    this.newChatPhoto = newChatPhoto;
    return this;
  }

  public Message addNewChatPhotoItem(PhotoSize newChatPhotoItem) {
    if (this.newChatPhoto == null) {
      this.newChatPhoto = new ArrayList<>();
    }
    this.newChatPhoto.add(newChatPhotoItem);
    return this;
  }

  /**
   * *Optional*. A chat photo was change to this value
   * @return newChatPhoto
   */
  @javax.annotation.Nullable
  public List<PhotoSize> getNewChatPhoto() {
    return newChatPhoto;
  }

  public void setNewChatPhoto(List<PhotoSize> newChatPhoto) {
    this.newChatPhoto = newChatPhoto;
  }


  public Message newChatTitle(String newChatTitle) {
    this.newChatTitle = newChatTitle;
    return this;
  }

  /**
   * *Optional*. A chat title was changed to this value
   * @return newChatTitle
   */
  @javax.annotation.Nullable
  public String getNewChatTitle() {
    return newChatTitle;
  }

  public void setNewChatTitle(String newChatTitle) {
    this.newChatTitle = newChatTitle;
  }


  public Message passportData(PassportData passportData) {
    this.passportData = passportData;
    return this;
  }

  /**
   * Get passportData
   * @return passportData
   */
  @javax.annotation.Nullable
  public PassportData getPassportData() {
    return passportData;
  }

  public void setPassportData(PassportData passportData) {
    this.passportData = passportData;
  }


  public Message photo(List<PhotoSize> photo) {
    this.photo = photo;
    return this;
  }

  public Message addPhotoItem(PhotoSize photoItem) {
    if (this.photo == null) {
      this.photo = new ArrayList<>();
    }
    this.photo.add(photoItem);
    return this;
  }

  /**
   * *Optional*. Message is a photo, available sizes of the photo
   * @return photo
   */
  @javax.annotation.Nullable
  public List<PhotoSize> getPhoto() {
    return photo;
  }

  public void setPhoto(List<PhotoSize> photo) {
    this.photo = photo;
  }


  public Message pinnedMessage(Message pinnedMessage) {
    this.pinnedMessage = pinnedMessage;
    return this;
  }

  /**
   * Get pinnedMessage
   * @return pinnedMessage
   */
  @javax.annotation.Nullable
  public Message getPinnedMessage() {
    return pinnedMessage;
  }

  public void setPinnedMessage(Message pinnedMessage) {
    this.pinnedMessage = pinnedMessage;
  }


  public Message poll(Poll poll) {
    this.poll = poll;
    return this;
  }

  /**
   * Get poll
   * @return poll
   */
  @javax.annotation.Nullable
  public Poll getPoll() {
    return poll;
  }

  public void setPoll(Poll poll) {
    this.poll = poll;
  }


  public Message proximityAlertTriggered(ProximityAlertTriggered proximityAlertTriggered) {
    this.proximityAlertTriggered = proximityAlertTriggered;
    return this;
  }

  /**
   * Get proximityAlertTriggered
   * @return proximityAlertTriggered
   */
  @javax.annotation.Nullable
  public ProximityAlertTriggered getProximityAlertTriggered() {
    return proximityAlertTriggered;
  }

  public void setProximityAlertTriggered(ProximityAlertTriggered proximityAlertTriggered) {
    this.proximityAlertTriggered = proximityAlertTriggered;
  }


  public Message replyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public InlineKeyboardMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public Message replyToMessage(Message replyToMessage) {
    this.replyToMessage = replyToMessage;
    return this;
  }

  /**
   * Get replyToMessage
   * @return replyToMessage
   */
  @javax.annotation.Nullable
  public Message getReplyToMessage() {
    return replyToMessage;
  }

  public void setReplyToMessage(Message replyToMessage) {
    this.replyToMessage = replyToMessage;
  }


  public Message senderChat(Chat senderChat) {
    this.senderChat = senderChat;
    return this;
  }

  /**
   * Get senderChat
   * @return senderChat
   */
  @javax.annotation.Nullable
  public Chat getSenderChat() {
    return senderChat;
  }

  public void setSenderChat(Chat senderChat) {
    this.senderChat = senderChat;
  }


  public Message sticker(Sticker sticker) {
    this.sticker = sticker;
    return this;
  }

  /**
   * Get sticker
   * @return sticker
   */
  @javax.annotation.Nullable
  public Sticker getSticker() {
    return sticker;
  }

  public void setSticker(Sticker sticker) {
    this.sticker = sticker;
  }


  public Message successfulPayment(SuccessfulPayment successfulPayment) {
    this.successfulPayment = successfulPayment;
    return this;
  }

  /**
   * Get successfulPayment
   * @return successfulPayment
   */
  @javax.annotation.Nullable
  public SuccessfulPayment getSuccessfulPayment() {
    return successfulPayment;
  }

  public void setSuccessfulPayment(SuccessfulPayment successfulPayment) {
    this.successfulPayment = successfulPayment;
  }


  public Message supergroupChatCreated(Boolean supergroupChatCreated) {
    this.supergroupChatCreated = supergroupChatCreated;
    return this;
  }

  /**
   * *Optional*. Service message: the supergroup has been created. This field can&#39;t be received in a message coming through updates, because bot can&#39;t be a member of a supergroup when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a directly created supergroup.
   * @return supergroupChatCreated
   */
  @javax.annotation.Nullable
  public Boolean getSupergroupChatCreated() {
    return supergroupChatCreated;
  }

  public void setSupergroupChatCreated(Boolean supergroupChatCreated) {
    this.supergroupChatCreated = supergroupChatCreated;
  }


  public Message text(String text) {
    this.text = text;
    return this;
  }

  /**
   * *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public Message venue(Venue venue) {
    this.venue = venue;
    return this;
  }

  /**
   * Get venue
   * @return venue
   */
  @javax.annotation.Nullable
  public Venue getVenue() {
    return venue;
  }

  public void setVenue(Venue venue) {
    this.venue = venue;
  }


  public Message viaBot(User viaBot) {
    this.viaBot = viaBot;
    return this;
  }

  /**
   * Get viaBot
   * @return viaBot
   */
  @javax.annotation.Nullable
  public User getViaBot() {
    return viaBot;
  }

  public void setViaBot(User viaBot) {
    this.viaBot = viaBot;
  }


  public Message video(Video video) {
    this.video = video;
    return this;
  }

  /**
   * Get video
   * @return video
   */
  @javax.annotation.Nullable
  public Video getVideo() {
    return video;
  }

  public void setVideo(Video video) {
    this.video = video;
  }


  public Message videoNote(VideoNote videoNote) {
    this.videoNote = videoNote;
    return this;
  }

  /**
   * Get videoNote
   * @return videoNote
   */
  @javax.annotation.Nullable
  public VideoNote getVideoNote() {
    return videoNote;
  }

  public void setVideoNote(VideoNote videoNote) {
    this.videoNote = videoNote;
  }


  public Message voice(Voice voice) {
    this.voice = voice;
    return this;
  }

  /**
   * Get voice
   * @return voice
   */
  @javax.annotation.Nullable
  public Voice getVoice() {
    return voice;
  }

  public void setVoice(Voice voice) {
    this.voice = voice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.animation, message.animation) &&
        Objects.equals(this.audio, message.audio) &&
        Objects.equals(this.authorSignature, message.authorSignature) &&
        Objects.equals(this.caption, message.caption) &&
        Objects.equals(this.captionEntities, message.captionEntities) &&
        Objects.equals(this.channelChatCreated, message.channelChatCreated) &&
        Objects.equals(this.chat, message.chat) &&
        Objects.equals(this.connectedWebsite, message.connectedWebsite) &&
        Objects.equals(this.contact, message.contact) &&
        Objects.equals(this.date, message.date) &&
        Objects.equals(this.deleteChatPhoto, message.deleteChatPhoto) &&
        Objects.equals(this.dice, message.dice) &&
        Objects.equals(this.document, message.document) &&
        Objects.equals(this.editDate, message.editDate) &&
        Objects.equals(this.entities, message.entities) &&
        Objects.equals(this.forwardDate, message.forwardDate) &&
        Objects.equals(this.forwardFrom, message.forwardFrom) &&
        Objects.equals(this.forwardFromChat, message.forwardFromChat) &&
        Objects.equals(this.forwardFromMessageId, message.forwardFromMessageId) &&
        Objects.equals(this.forwardSenderName, message.forwardSenderName) &&
        Objects.equals(this.forwardSignature, message.forwardSignature) &&
        Objects.equals(this.from, message.from) &&
        Objects.equals(this.game, message.game) &&
        Objects.equals(this.groupChatCreated, message.groupChatCreated) &&
        Objects.equals(this.invoice, message.invoice) &&
        Objects.equals(this.leftChatMember, message.leftChatMember) &&
        Objects.equals(this.location, message.location) &&
        Objects.equals(this.mediaGroupId, message.mediaGroupId) &&
        Objects.equals(this.messageId, message.messageId) &&
        Objects.equals(this.migrateFromChatId, message.migrateFromChatId) &&
        Objects.equals(this.migrateToChatId, message.migrateToChatId) &&
        Objects.equals(this.newChatMembers, message.newChatMembers) &&
        Objects.equals(this.newChatPhoto, message.newChatPhoto) &&
        Objects.equals(this.newChatTitle, message.newChatTitle) &&
        Objects.equals(this.passportData, message.passportData) &&
        Objects.equals(this.photo, message.photo) &&
        Objects.equals(this.pinnedMessage, message.pinnedMessage) &&
        Objects.equals(this.poll, message.poll) &&
        Objects.equals(this.proximityAlertTriggered, message.proximityAlertTriggered) &&
        Objects.equals(this.replyMarkup, message.replyMarkup) &&
        Objects.equals(this.replyToMessage, message.replyToMessage) &&
        Objects.equals(this.senderChat, message.senderChat) &&
        Objects.equals(this.sticker, message.sticker) &&
        Objects.equals(this.successfulPayment, message.successfulPayment) &&
        Objects.equals(this.supergroupChatCreated, message.supergroupChatCreated) &&
        Objects.equals(this.text, message.text) &&
        Objects.equals(this.venue, message.venue) &&
        Objects.equals(this.viaBot, message.viaBot) &&
        Objects.equals(this.video, message.video) &&
        Objects.equals(this.videoNote, message.videoNote) &&
        Objects.equals(this.voice, message.voice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(animation, audio, authorSignature, caption, captionEntities, channelChatCreated, chat, connectedWebsite, contact, date, deleteChatPhoto, dice, document, editDate, entities, forwardDate, forwardFrom, forwardFromChat, forwardFromMessageId, forwardSenderName, forwardSignature, from, game, groupChatCreated, invoice, leftChatMember, location, mediaGroupId, messageId, migrateFromChatId, migrateToChatId, newChatMembers, newChatPhoto, newChatTitle, passportData, photo, pinnedMessage, poll, proximityAlertTriggered, replyMarkup, replyToMessage, senderChat, sticker, successfulPayment, supergroupChatCreated, text, venue, viaBot, video, videoNote, voice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    sb.append("    animation: ").append(toIndentedString(animation)).append("\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    authorSignature: ").append(toIndentedString(authorSignature)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    captionEntities: ").append(toIndentedString(captionEntities)).append("\n");
    sb.append("    channelChatCreated: ").append(toIndentedString(channelChatCreated)).append("\n");
    sb.append("    chat: ").append(toIndentedString(chat)).append("\n");
    sb.append("    connectedWebsite: ").append(toIndentedString(connectedWebsite)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    deleteChatPhoto: ").append(toIndentedString(deleteChatPhoto)).append("\n");
    sb.append("    dice: ").append(toIndentedString(dice)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    editDate: ").append(toIndentedString(editDate)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    forwardDate: ").append(toIndentedString(forwardDate)).append("\n");
    sb.append("    forwardFrom: ").append(toIndentedString(forwardFrom)).append("\n");
    sb.append("    forwardFromChat: ").append(toIndentedString(forwardFromChat)).append("\n");
    sb.append("    forwardFromMessageId: ").append(toIndentedString(forwardFromMessageId)).append("\n");
    sb.append("    forwardSenderName: ").append(toIndentedString(forwardSenderName)).append("\n");
    sb.append("    forwardSignature: ").append(toIndentedString(forwardSignature)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    game: ").append(toIndentedString(game)).append("\n");
    sb.append("    groupChatCreated: ").append(toIndentedString(groupChatCreated)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    leftChatMember: ").append(toIndentedString(leftChatMember)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    mediaGroupId: ").append(toIndentedString(mediaGroupId)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    migrateFromChatId: ").append(toIndentedString(migrateFromChatId)).append("\n");
    sb.append("    migrateToChatId: ").append(toIndentedString(migrateToChatId)).append("\n");
    sb.append("    newChatMembers: ").append(toIndentedString(newChatMembers)).append("\n");
    sb.append("    newChatPhoto: ").append(toIndentedString(newChatPhoto)).append("\n");
    sb.append("    newChatTitle: ").append(toIndentedString(newChatTitle)).append("\n");
    sb.append("    passportData: ").append(toIndentedString(passportData)).append("\n");
    sb.append("    photo: ").append(toIndentedString(photo)).append("\n");
    sb.append("    pinnedMessage: ").append(toIndentedString(pinnedMessage)).append("\n");
    sb.append("    poll: ").append(toIndentedString(poll)).append("\n");
    sb.append("    proximityAlertTriggered: ").append(toIndentedString(proximityAlertTriggered)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    replyToMessage: ").append(toIndentedString(replyToMessage)).append("\n");
    sb.append("    senderChat: ").append(toIndentedString(senderChat)).append("\n");
    sb.append("    sticker: ").append(toIndentedString(sticker)).append("\n");
    sb.append("    successfulPayment: ").append(toIndentedString(successfulPayment)).append("\n");
    sb.append("    supergroupChatCreated: ").append(toIndentedString(supergroupChatCreated)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    viaBot: ").append(toIndentedString(viaBot)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("    videoNote: ").append(toIndentedString(videoNote)).append("\n");
    sb.append("    voice: ").append(toIndentedString(voice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("animation");
    openapiFields.add("audio");
    openapiFields.add("author_signature");
    openapiFields.add("caption");
    openapiFields.add("caption_entities");
    openapiFields.add("channel_chat_created");
    openapiFields.add("chat");
    openapiFields.add("connected_website");
    openapiFields.add("contact");
    openapiFields.add("date");
    openapiFields.add("delete_chat_photo");
    openapiFields.add("dice");
    openapiFields.add("document");
    openapiFields.add("edit_date");
    openapiFields.add("entities");
    openapiFields.add("forward_date");
    openapiFields.add("forward_from");
    openapiFields.add("forward_from_chat");
    openapiFields.add("forward_from_message_id");
    openapiFields.add("forward_sender_name");
    openapiFields.add("forward_signature");
    openapiFields.add("from");
    openapiFields.add("game");
    openapiFields.add("group_chat_created");
    openapiFields.add("invoice");
    openapiFields.add("left_chat_member");
    openapiFields.add("location");
    openapiFields.add("media_group_id");
    openapiFields.add("message_id");
    openapiFields.add("migrate_from_chat_id");
    openapiFields.add("migrate_to_chat_id");
    openapiFields.add("new_chat_members");
    openapiFields.add("new_chat_photo");
    openapiFields.add("new_chat_title");
    openapiFields.add("passport_data");
    openapiFields.add("photo");
    openapiFields.add("pinned_message");
    openapiFields.add("poll");
    openapiFields.add("proximity_alert_triggered");
    openapiFields.add("reply_markup");
    openapiFields.add("reply_to_message");
    openapiFields.add("sender_chat");
    openapiFields.add("sticker");
    openapiFields.add("successful_payment");
    openapiFields.add("supergroup_chat_created");
    openapiFields.add("text");
    openapiFields.add("venue");
    openapiFields.add("via_bot");
    openapiFields.add("video");
    openapiFields.add("video_note");
    openapiFields.add("voice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chat");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("message_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Message
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Message.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Message is not found in the empty JSON string", Message.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Message` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Message.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `animation`
      if (jsonObj.get("animation") != null && !jsonObj.get("animation").isJsonNull()) {
        Animation.validateJsonElement(jsonObj.get("animation"));
      }
      // validate the optional field `audio`
      if (jsonObj.get("audio") != null && !jsonObj.get("audio").isJsonNull()) {
        Audio.validateJsonElement(jsonObj.get("audio"));
      }
      if ((jsonObj.get("author_signature") != null && !jsonObj.get("author_signature").isJsonNull()) && !jsonObj.get("author_signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_signature").toString()));
      }
      if ((jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) && !jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      if (jsonObj.get("caption_entities") != null && !jsonObj.get("caption_entities").isJsonNull()) {
        JsonArray jsonArraycaptionEntities = jsonObj.getAsJsonArray("caption_entities");
        if (jsonArraycaptionEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("caption_entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `caption_entities` to be an array in the JSON string but got `%s`", jsonObj.get("caption_entities").toString()));
          }

          // validate the optional field `caption_entities` (array)
          for (int i = 0; i < jsonArraycaptionEntities.size(); i++) {
            MessageEntity.validateJsonElement(jsonArraycaptionEntities.get(i));
          };
        }
      }
      // validate the required field `chat`
      Chat.validateJsonElement(jsonObj.get("chat"));
      if ((jsonObj.get("connected_website") != null && !jsonObj.get("connected_website").isJsonNull()) && !jsonObj.get("connected_website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connected_website").toString()));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("contact"));
      }
      // validate the optional field `dice`
      if (jsonObj.get("dice") != null && !jsonObj.get("dice").isJsonNull()) {
        Dice.validateJsonElement(jsonObj.get("dice"));
      }
      // validate the optional field `document`
      if (jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) {
        Document.validateJsonElement(jsonObj.get("document"));
      }
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            MessageEntity.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      // validate the optional field `forward_from`
      if (jsonObj.get("forward_from") != null && !jsonObj.get("forward_from").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("forward_from"));
      }
      // validate the optional field `forward_from_chat`
      if (jsonObj.get("forward_from_chat") != null && !jsonObj.get("forward_from_chat").isJsonNull()) {
        Chat.validateJsonElement(jsonObj.get("forward_from_chat"));
      }
      if ((jsonObj.get("forward_sender_name") != null && !jsonObj.get("forward_sender_name").isJsonNull()) && !jsonObj.get("forward_sender_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forward_sender_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forward_sender_name").toString()));
      }
      if ((jsonObj.get("forward_signature") != null && !jsonObj.get("forward_signature").isJsonNull()) && !jsonObj.get("forward_signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forward_signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forward_signature").toString()));
      }
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("from"));
      }
      // validate the optional field `game`
      if (jsonObj.get("game") != null && !jsonObj.get("game").isJsonNull()) {
        Game.validateJsonElement(jsonObj.get("game"));
      }
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        Invoice.validateJsonElement(jsonObj.get("invoice"));
      }
      // validate the optional field `left_chat_member`
      if (jsonObj.get("left_chat_member") != null && !jsonObj.get("left_chat_member").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("left_chat_member"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("media_group_id") != null && !jsonObj.get("media_group_id").isJsonNull()) && !jsonObj.get("media_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_group_id").toString()));
      }
      if (jsonObj.get("new_chat_members") != null && !jsonObj.get("new_chat_members").isJsonNull()) {
        JsonArray jsonArraynewChatMembers = jsonObj.getAsJsonArray("new_chat_members");
        if (jsonArraynewChatMembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("new_chat_members").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `new_chat_members` to be an array in the JSON string but got `%s`", jsonObj.get("new_chat_members").toString()));
          }

          // validate the optional field `new_chat_members` (array)
          for (int i = 0; i < jsonArraynewChatMembers.size(); i++) {
            User.validateJsonElement(jsonArraynewChatMembers.get(i));
          };
        }
      }
      if (jsonObj.get("new_chat_photo") != null && !jsonObj.get("new_chat_photo").isJsonNull()) {
        JsonArray jsonArraynewChatPhoto = jsonObj.getAsJsonArray("new_chat_photo");
        if (jsonArraynewChatPhoto != null) {
          // ensure the json data is an array
          if (!jsonObj.get("new_chat_photo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `new_chat_photo` to be an array in the JSON string but got `%s`", jsonObj.get("new_chat_photo").toString()));
          }

          // validate the optional field `new_chat_photo` (array)
          for (int i = 0; i < jsonArraynewChatPhoto.size(); i++) {
            PhotoSize.validateJsonElement(jsonArraynewChatPhoto.get(i));
          };
        }
      }
      if ((jsonObj.get("new_chat_title") != null && !jsonObj.get("new_chat_title").isJsonNull()) && !jsonObj.get("new_chat_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_chat_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_chat_title").toString()));
      }
      // validate the optional field `passport_data`
      if (jsonObj.get("passport_data") != null && !jsonObj.get("passport_data").isJsonNull()) {
        PassportData.validateJsonElement(jsonObj.get("passport_data"));
      }
      if (jsonObj.get("photo") != null && !jsonObj.get("photo").isJsonNull()) {
        JsonArray jsonArrayphoto = jsonObj.getAsJsonArray("photo");
        if (jsonArrayphoto != null) {
          // ensure the json data is an array
          if (!jsonObj.get("photo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `photo` to be an array in the JSON string but got `%s`", jsonObj.get("photo").toString()));
          }

          // validate the optional field `photo` (array)
          for (int i = 0; i < jsonArrayphoto.size(); i++) {
            PhotoSize.validateJsonElement(jsonArrayphoto.get(i));
          };
        }
      }
      // validate the optional field `pinned_message`
      if (jsonObj.get("pinned_message") != null && !jsonObj.get("pinned_message").isJsonNull()) {
        Message.validateJsonElement(jsonObj.get("pinned_message"));
      }
      // validate the optional field `poll`
      if (jsonObj.get("poll") != null && !jsonObj.get("poll").isJsonNull()) {
        Poll.validateJsonElement(jsonObj.get("poll"));
      }
      // validate the optional field `proximity_alert_triggered`
      if (jsonObj.get("proximity_alert_triggered") != null && !jsonObj.get("proximity_alert_triggered").isJsonNull()) {
        ProximityAlertTriggered.validateJsonElement(jsonObj.get("proximity_alert_triggered"));
      }
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        InlineKeyboardMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
      // validate the optional field `reply_to_message`
      if (jsonObj.get("reply_to_message") != null && !jsonObj.get("reply_to_message").isJsonNull()) {
        Message.validateJsonElement(jsonObj.get("reply_to_message"));
      }
      // validate the optional field `sender_chat`
      if (jsonObj.get("sender_chat") != null && !jsonObj.get("sender_chat").isJsonNull()) {
        Chat.validateJsonElement(jsonObj.get("sender_chat"));
      }
      // validate the optional field `sticker`
      if (jsonObj.get("sticker") != null && !jsonObj.get("sticker").isJsonNull()) {
        Sticker.validateJsonElement(jsonObj.get("sticker"));
      }
      // validate the optional field `successful_payment`
      if (jsonObj.get("successful_payment") != null && !jsonObj.get("successful_payment").isJsonNull()) {
        SuccessfulPayment.validateJsonElement(jsonObj.get("successful_payment"));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // validate the optional field `venue`
      if (jsonObj.get("venue") != null && !jsonObj.get("venue").isJsonNull()) {
        Venue.validateJsonElement(jsonObj.get("venue"));
      }
      // validate the optional field `via_bot`
      if (jsonObj.get("via_bot") != null && !jsonObj.get("via_bot").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("via_bot"));
      }
      // validate the optional field `video`
      if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
        Video.validateJsonElement(jsonObj.get("video"));
      }
      // validate the optional field `video_note`
      if (jsonObj.get("video_note") != null && !jsonObj.get("video_note").isJsonNull()) {
        VideoNote.validateJsonElement(jsonObj.get("video_note"));
      }
      // validate the optional field `voice`
      if (jsonObj.get("voice") != null && !jsonObj.get("voice").isJsonNull()) {
        Voice.validateJsonElement(jsonObj.get("voice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Message.class));

       return (TypeAdapter<T>) new TypeAdapter<Message>() {
           @Override
           public void write(JsonWriter out, Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Message read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Message given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Message
   * @throws IOException if the JSON string is invalid with respect to Message
   */
  public static Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Message.class);
  }

  /**
   * Convert an instance of Message to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

