/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PassportFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about documents or other Telegram Passport elements shared with the bot by the user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EncryptedPassportElement {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<PassportFile> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRONT_SIDE = "front_side";
  @SerializedName(SERIALIZED_NAME_FRONT_SIDE)
  private PassportFile frontSide;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_REVERSE_SIDE = "reverse_side";
  @SerializedName(SERIALIZED_NAME_REVERSE_SIDE)
  private PassportFile reverseSide;

  public static final String SERIALIZED_NAME_SELFIE = "selfie";
  @SerializedName(SERIALIZED_NAME_SELFIE)
  private PassportFile selfie;

  public static final String SERIALIZED_NAME_TRANSLATION = "translation";
  @SerializedName(SERIALIZED_NAME_TRANSLATION)
  private List<PassportFile> translation = new ArrayList<>();

  /**
   * Element type. One of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”, “phone\\_number”, “email”.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PERSONAL_DETAILS("personal_details"),
    
    PASSPORT("passport"),
    
    DRIVER_LICENSE("driver_license"),
    
    IDENTITY_CARD("identity_card"),
    
    INTERNAL_PASSPORT("internal_passport"),
    
    ADDRESS("address"),
    
    UTILITY_BILL("utility_bill"),
    
    BANK_STATEMENT("bank_statement"),
    
    RENTAL_AGREEMENT("rental_agreement"),
    
    PASSPORT_REGISTRATION("passport_registration"),
    
    TEMPORARY_REGISTRATION("temporary_registration"),
    
    PHONE_NUMBER("phone_number"),
    
    EMAIL("email");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public EncryptedPassportElement() {
  }

  public EncryptedPassportElement data(String data) {
    this.data = data;
    return this;
  }

  /**
   * *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
   * @return data
   */
  @javax.annotation.Nullable
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public EncryptedPassportElement email(String email) {
    this.email = email;
    return this;
  }

  /**
   * *Optional*. User&#39;s verified email address, available only for “email” type
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public EncryptedPassportElement files(List<PassportFile> files) {
    this.files = files;
    return this;
  }

  public EncryptedPassportElement addFilesItem(PassportFile filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * *Optional*. Array of encrypted files with documents provided by the user, available for “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
   * @return files
   */
  @javax.annotation.Nullable
  public List<PassportFile> getFiles() {
    return files;
  }

  public void setFiles(List<PassportFile> files) {
    this.files = files;
  }


  public EncryptedPassportElement frontSide(PassportFile frontSide) {
    this.frontSide = frontSide;
    return this;
  }

  /**
   * Get frontSide
   * @return frontSide
   */
  @javax.annotation.Nullable
  public PassportFile getFrontSide() {
    return frontSide;
  }

  public void setFrontSide(PassportFile frontSide) {
    this.frontSide = frontSide;
  }


  public EncryptedPassportElement hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
   * @return hash
   */
  @javax.annotation.Nonnull
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public EncryptedPassportElement phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * *Optional*. User&#39;s verified phone number, available only for “phone\\_number” type
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public EncryptedPassportElement reverseSide(PassportFile reverseSide) {
    this.reverseSide = reverseSide;
    return this;
  }

  /**
   * Get reverseSide
   * @return reverseSide
   */
  @javax.annotation.Nullable
  public PassportFile getReverseSide() {
    return reverseSide;
  }

  public void setReverseSide(PassportFile reverseSide) {
    this.reverseSide = reverseSide;
  }


  public EncryptedPassportElement selfie(PassportFile selfie) {
    this.selfie = selfie;
    return this;
  }

  /**
   * Get selfie
   * @return selfie
   */
  @javax.annotation.Nullable
  public PassportFile getSelfie() {
    return selfie;
  }

  public void setSelfie(PassportFile selfie) {
    this.selfie = selfie;
  }


  public EncryptedPassportElement translation(List<PassportFile> translation) {
    this.translation = translation;
    return this;
  }

  public EncryptedPassportElement addTranslationItem(PassportFile translationItem) {
    if (this.translation == null) {
      this.translation = new ArrayList<>();
    }
    this.translation.add(translationItem);
    return this;
  }

  /**
   * *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
   * @return translation
   */
  @javax.annotation.Nullable
  public List<PassportFile> getTranslation() {
    return translation;
  }

  public void setTranslation(List<PassportFile> translation) {
    this.translation = translation;
  }


  public EncryptedPassportElement type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Element type. One of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”, “phone\\_number”, “email”.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncryptedPassportElement encryptedPassportElement = (EncryptedPassportElement) o;
    return Objects.equals(this.data, encryptedPassportElement.data) &&
        Objects.equals(this.email, encryptedPassportElement.email) &&
        Objects.equals(this.files, encryptedPassportElement.files) &&
        Objects.equals(this.frontSide, encryptedPassportElement.frontSide) &&
        Objects.equals(this.hash, encryptedPassportElement.hash) &&
        Objects.equals(this.phoneNumber, encryptedPassportElement.phoneNumber) &&
        Objects.equals(this.reverseSide, encryptedPassportElement.reverseSide) &&
        Objects.equals(this.selfie, encryptedPassportElement.selfie) &&
        Objects.equals(this.translation, encryptedPassportElement.translation) &&
        Objects.equals(this.type, encryptedPassportElement.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, email, files, frontSide, hash, phoneNumber, reverseSide, selfie, translation, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncryptedPassportElement {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    frontSide: ").append(toIndentedString(frontSide)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    reverseSide: ").append(toIndentedString(reverseSide)).append("\n");
    sb.append("    selfie: ").append(toIndentedString(selfie)).append("\n");
    sb.append("    translation: ").append(toIndentedString(translation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("email");
    openapiFields.add("files");
    openapiFields.add("front_side");
    openapiFields.add("hash");
    openapiFields.add("phone_number");
    openapiFields.add("reverse_side");
    openapiFields.add("selfie");
    openapiFields.add("translation");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hash");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EncryptedPassportElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EncryptedPassportElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EncryptedPassportElement is not found in the empty JSON string", EncryptedPassportElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EncryptedPassportElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EncryptedPassportElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EncryptedPassportElement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            PassportFile.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      // validate the optional field `front_side`
      if (jsonObj.get("front_side") != null && !jsonObj.get("front_side").isJsonNull()) {
        PassportFile.validateJsonElement(jsonObj.get("front_side"));
      }
      if (!jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if ((jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) && !jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      // validate the optional field `reverse_side`
      if (jsonObj.get("reverse_side") != null && !jsonObj.get("reverse_side").isJsonNull()) {
        PassportFile.validateJsonElement(jsonObj.get("reverse_side"));
      }
      // validate the optional field `selfie`
      if (jsonObj.get("selfie") != null && !jsonObj.get("selfie").isJsonNull()) {
        PassportFile.validateJsonElement(jsonObj.get("selfie"));
      }
      if (jsonObj.get("translation") != null && !jsonObj.get("translation").isJsonNull()) {
        JsonArray jsonArraytranslation = jsonObj.getAsJsonArray("translation");
        if (jsonArraytranslation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("translation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `translation` to be an array in the JSON string but got `%s`", jsonObj.get("translation").toString()));
          }

          // validate the optional field `translation` (array)
          for (int i = 0; i < jsonArraytranslation.size(); i++) {
            PassportFile.validateJsonElement(jsonArraytranslation.get(i));
          };
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EncryptedPassportElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EncryptedPassportElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EncryptedPassportElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EncryptedPassportElement.class));

       return (TypeAdapter<T>) new TypeAdapter<EncryptedPassportElement>() {
           @Override
           public void write(JsonWriter out, EncryptedPassportElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EncryptedPassportElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EncryptedPassportElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EncryptedPassportElement
   * @throws IOException if the JSON string is invalid with respect to EncryptedPassportElement
   */
  public static EncryptedPassportElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EncryptedPassportElement.class);
  }

  /**
   * Convert an instance of EncryptedPassportElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

