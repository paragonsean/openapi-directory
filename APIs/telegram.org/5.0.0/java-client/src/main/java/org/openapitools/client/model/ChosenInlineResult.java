/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChosenInlineResult {
  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private User from;

  public static final String SERIALIZED_NAME_INLINE_MESSAGE_ID = "inline_message_id";
  @SerializedName(SERIALIZED_NAME_INLINE_MESSAGE_ID)
  private String inlineMessageId;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_RESULT_ID = "result_id";
  @SerializedName(SERIALIZED_NAME_RESULT_ID)
  private String resultId;

  public ChosenInlineResult() {
  }

  public ChosenInlineResult from(User from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nonnull
  public User getFrom() {
    return from;
  }

  public void setFrom(User from) {
    this.from = from;
  }


  public ChosenInlineResult inlineMessageId(String inlineMessageId) {
    this.inlineMessageId = inlineMessageId;
    return this;
  }

  /**
   * *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.
   * @return inlineMessageId
   */
  @javax.annotation.Nullable
  public String getInlineMessageId() {
    return inlineMessageId;
  }

  public void setInlineMessageId(String inlineMessageId) {
    this.inlineMessageId = inlineMessageId;
  }


  public ChosenInlineResult location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public ChosenInlineResult query(String query) {
    this.query = query;
    return this;
  }

  /**
   * The query that was used to obtain the result
   * @return query
   */
  @javax.annotation.Nonnull
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public ChosenInlineResult resultId(String resultId) {
    this.resultId = resultId;
    return this;
  }

  /**
   * The unique identifier for the result that was chosen
   * @return resultId
   */
  @javax.annotation.Nonnull
  public String getResultId() {
    return resultId;
  }

  public void setResultId(String resultId) {
    this.resultId = resultId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChosenInlineResult chosenInlineResult = (ChosenInlineResult) o;
    return Objects.equals(this.from, chosenInlineResult.from) &&
        Objects.equals(this.inlineMessageId, chosenInlineResult.inlineMessageId) &&
        Objects.equals(this.location, chosenInlineResult.location) &&
        Objects.equals(this.query, chosenInlineResult.query) &&
        Objects.equals(this.resultId, chosenInlineResult.resultId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, inlineMessageId, location, query, resultId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChosenInlineResult {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    inlineMessageId: ").append(toIndentedString(inlineMessageId)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    resultId: ").append(toIndentedString(resultId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from");
    openapiFields.add("inline_message_id");
    openapiFields.add("location");
    openapiFields.add("query");
    openapiFields.add("result_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("query");
    openapiRequiredFields.add("result_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChosenInlineResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChosenInlineResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChosenInlineResult is not found in the empty JSON string", ChosenInlineResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChosenInlineResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChosenInlineResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChosenInlineResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `from`
      User.validateJsonElement(jsonObj.get("from"));
      if ((jsonObj.get("inline_message_id") != null && !jsonObj.get("inline_message_id").isJsonNull()) && !jsonObj.get("inline_message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inline_message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inline_message_id").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      if (!jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if (!jsonObj.get("result_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChosenInlineResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChosenInlineResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChosenInlineResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChosenInlineResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ChosenInlineResult>() {
           @Override
           public void write(JsonWriter out, ChosenInlineResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChosenInlineResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChosenInlineResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChosenInlineResult
   * @throws IOException if the JSON string is invalid with respect to ChosenInlineResult
   */
  public static ChosenInlineResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChosenInlineResult.class);
  }

  /**
   * Convert an instance of ChosenInlineResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

