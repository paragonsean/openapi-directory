/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InlineKeyboardMarkup;
import org.openapitools.client.model.InputMessageContent;
import org.openapitools.client.model.MessageEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the photo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InlineQueryResultCachedPhoto {
  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_CAPTION_ENTITIES = "caption_entities";
  @SerializedName(SERIALIZED_NAME_CAPTION_ENTITIES)
  private List<MessageEntity> captionEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT_MESSAGE_CONTENT = "input_message_content";
  @SerializedName(SERIALIZED_NAME_INPUT_MESSAGE_CONTENT)
  private InputMessageContent inputMessageContent;

  public static final String SERIALIZED_NAME_PARSE_MODE = "parse_mode";
  @SerializedName(SERIALIZED_NAME_PARSE_MODE)
  private String parseMode;

  public static final String SERIALIZED_NAME_PHOTO_FILE_ID = "photo_file_id";
  @SerializedName(SERIALIZED_NAME_PHOTO_FILE_ID)
  private String photoFileId;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private InlineKeyboardMarkup replyMarkup;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public InlineQueryResultCachedPhoto() {
  }

  public InlineQueryResultCachedPhoto caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
   * @return caption
   */
  @javax.annotation.Nullable
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public InlineQueryResultCachedPhoto captionEntities(List<MessageEntity> captionEntities) {
    this.captionEntities = captionEntities;
    return this;
  }

  public InlineQueryResultCachedPhoto addCaptionEntitiesItem(MessageEntity captionEntitiesItem) {
    if (this.captionEntities == null) {
      this.captionEntities = new ArrayList<>();
    }
    this.captionEntities.add(captionEntitiesItem);
    return this;
  }

  /**
   * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
   * @return captionEntities
   */
  @javax.annotation.Nullable
  public List<MessageEntity> getCaptionEntities() {
    return captionEntities;
  }

  public void setCaptionEntities(List<MessageEntity> captionEntities) {
    this.captionEntities = captionEntities;
  }


  public InlineQueryResultCachedPhoto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * *Optional*. Short description of the result
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InlineQueryResultCachedPhoto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for this result, 1-64 bytes
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InlineQueryResultCachedPhoto inputMessageContent(InputMessageContent inputMessageContent) {
    this.inputMessageContent = inputMessageContent;
    return this;
  }

  /**
   * Get inputMessageContent
   * @return inputMessageContent
   */
  @javax.annotation.Nullable
  public InputMessageContent getInputMessageContent() {
    return inputMessageContent;
  }

  public void setInputMessageContent(InputMessageContent inputMessageContent) {
    this.inputMessageContent = inputMessageContent;
  }


  public InlineQueryResultCachedPhoto parseMode(String parseMode) {
    this.parseMode = parseMode;
    return this;
  }

  /**
   * *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
   * @return parseMode
   */
  @javax.annotation.Nullable
  public String getParseMode() {
    return parseMode;
  }

  public void setParseMode(String parseMode) {
    this.parseMode = parseMode;
  }


  public InlineQueryResultCachedPhoto photoFileId(String photoFileId) {
    this.photoFileId = photoFileId;
    return this;
  }

  /**
   * A valid file identifier of the photo
   * @return photoFileId
   */
  @javax.annotation.Nonnull
  public String getPhotoFileId() {
    return photoFileId;
  }

  public void setPhotoFileId(String photoFileId) {
    this.photoFileId = photoFileId;
  }


  public InlineQueryResultCachedPhoto replyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public InlineKeyboardMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public InlineQueryResultCachedPhoto title(String title) {
    this.title = title;
    return this;
  }

  /**
   * *Optional*. Title for the result
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public InlineQueryResultCachedPhoto type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the result, must be *photo*
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto = (InlineQueryResultCachedPhoto) o;
    return Objects.equals(this.caption, inlineQueryResultCachedPhoto.caption) &&
        Objects.equals(this.captionEntities, inlineQueryResultCachedPhoto.captionEntities) &&
        Objects.equals(this.description, inlineQueryResultCachedPhoto.description) &&
        Objects.equals(this.id, inlineQueryResultCachedPhoto.id) &&
        Objects.equals(this.inputMessageContent, inlineQueryResultCachedPhoto.inputMessageContent) &&
        Objects.equals(this.parseMode, inlineQueryResultCachedPhoto.parseMode) &&
        Objects.equals(this.photoFileId, inlineQueryResultCachedPhoto.photoFileId) &&
        Objects.equals(this.replyMarkup, inlineQueryResultCachedPhoto.replyMarkup) &&
        Objects.equals(this.title, inlineQueryResultCachedPhoto.title) &&
        Objects.equals(this.type, inlineQueryResultCachedPhoto.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caption, captionEntities, description, id, inputMessageContent, parseMode, photoFileId, replyMarkup, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineQueryResultCachedPhoto {\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    captionEntities: ").append(toIndentedString(captionEntities)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputMessageContent: ").append(toIndentedString(inputMessageContent)).append("\n");
    sb.append("    parseMode: ").append(toIndentedString(parseMode)).append("\n");
    sb.append("    photoFileId: ").append(toIndentedString(photoFileId)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caption");
    openapiFields.add("caption_entities");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("input_message_content");
    openapiFields.add("parse_mode");
    openapiFields.add("photo_file_id");
    openapiFields.add("reply_markup");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("photo_file_id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InlineQueryResultCachedPhoto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InlineQueryResultCachedPhoto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineQueryResultCachedPhoto is not found in the empty JSON string", InlineQueryResultCachedPhoto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InlineQueryResultCachedPhoto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineQueryResultCachedPhoto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InlineQueryResultCachedPhoto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) && !jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      if (jsonObj.get("caption_entities") != null && !jsonObj.get("caption_entities").isJsonNull()) {
        JsonArray jsonArraycaptionEntities = jsonObj.getAsJsonArray("caption_entities");
        if (jsonArraycaptionEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("caption_entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `caption_entities` to be an array in the JSON string but got `%s`", jsonObj.get("caption_entities").toString()));
          }

          // validate the optional field `caption_entities` (array)
          for (int i = 0; i < jsonArraycaptionEntities.size(); i++) {
            MessageEntity.validateJsonElement(jsonArraycaptionEntities.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `input_message_content`
      if (jsonObj.get("input_message_content") != null && !jsonObj.get("input_message_content").isJsonNull()) {
        InputMessageContent.validateJsonElement(jsonObj.get("input_message_content"));
      }
      if ((jsonObj.get("parse_mode") != null && !jsonObj.get("parse_mode").isJsonNull()) && !jsonObj.get("parse_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parse_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parse_mode").toString()));
      }
      if (!jsonObj.get("photo_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photo_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photo_file_id").toString()));
      }
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        InlineKeyboardMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineQueryResultCachedPhoto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineQueryResultCachedPhoto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineQueryResultCachedPhoto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultCachedPhoto.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineQueryResultCachedPhoto>() {
           @Override
           public void write(JsonWriter out, InlineQueryResultCachedPhoto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineQueryResultCachedPhoto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InlineQueryResultCachedPhoto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InlineQueryResultCachedPhoto
   * @throws IOException if the JSON string is invalid with respect to InlineQueryResultCachedPhoto
   */
  public static InlineQueryResultCachedPhoto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineQueryResultCachedPhoto.class);
  }

  /**
   * Convert an instance of InlineQueryResultCachedPhoto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

