/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\\_message\\_id* will be present. Exactly one of the fields *data* or *game\\_short\\_name* will be present.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallbackQuery {
  public static final String SERIALIZED_NAME_CHAT_INSTANCE = "chat_instance";
  @SerializedName(SERIALIZED_NAME_CHAT_INSTANCE)
  private String chatInstance;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private User from;

  public static final String SERIALIZED_NAME_GAME_SHORT_NAME = "game_short_name";
  @SerializedName(SERIALIZED_NAME_GAME_SHORT_NAME)
  private String gameShortName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INLINE_MESSAGE_ID = "inline_message_id";
  @SerializedName(SERIALIZED_NAME_INLINE_MESSAGE_ID)
  private String inlineMessageId;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private Message message;

  public CallbackQuery() {
  }

  public CallbackQuery chatInstance(String chatInstance) {
    this.chatInstance = chatInstance;
    return this;
  }

  /**
   * Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
   * @return chatInstance
   */
  @javax.annotation.Nonnull
  public String getChatInstance() {
    return chatInstance;
  }

  public void setChatInstance(String chatInstance) {
    this.chatInstance = chatInstance;
  }


  public CallbackQuery data(String data) {
    this.data = data;
    return this;
  }

  /**
   * *Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
   * @return data
   */
  @javax.annotation.Nullable
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public CallbackQuery from(User from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nonnull
  public User getFrom() {
    return from;
  }

  public void setFrom(User from) {
    this.from = from;
  }


  public CallbackQuery gameShortName(String gameShortName) {
    this.gameShortName = gameShortName;
    return this;
  }

  /**
   * *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game
   * @return gameShortName
   */
  @javax.annotation.Nullable
  public String getGameShortName() {
    return gameShortName;
  }

  public void setGameShortName(String gameShortName) {
    this.gameShortName = gameShortName;
  }


  public CallbackQuery id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for this query
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CallbackQuery inlineMessageId(String inlineMessageId) {
    this.inlineMessageId = inlineMessageId;
    return this;
  }

  /**
   * *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.
   * @return inlineMessageId
   */
  @javax.annotation.Nullable
  public String getInlineMessageId() {
    return inlineMessageId;
  }

  public void setInlineMessageId(String inlineMessageId) {
    this.inlineMessageId = inlineMessageId;
  }


  public CallbackQuery message(Message message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public Message getMessage() {
    return message;
  }

  public void setMessage(Message message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallbackQuery callbackQuery = (CallbackQuery) o;
    return Objects.equals(this.chatInstance, callbackQuery.chatInstance) &&
        Objects.equals(this.data, callbackQuery.data) &&
        Objects.equals(this.from, callbackQuery.from) &&
        Objects.equals(this.gameShortName, callbackQuery.gameShortName) &&
        Objects.equals(this.id, callbackQuery.id) &&
        Objects.equals(this.inlineMessageId, callbackQuery.inlineMessageId) &&
        Objects.equals(this.message, callbackQuery.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chatInstance, data, from, gameShortName, id, inlineMessageId, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallbackQuery {\n");
    sb.append("    chatInstance: ").append(toIndentedString(chatInstance)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    gameShortName: ").append(toIndentedString(gameShortName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inlineMessageId: ").append(toIndentedString(inlineMessageId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chat_instance");
    openapiFields.add("data");
    openapiFields.add("from");
    openapiFields.add("game_short_name");
    openapiFields.add("id");
    openapiFields.add("inline_message_id");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chat_instance");
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallbackQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallbackQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallbackQuery is not found in the empty JSON string", CallbackQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallbackQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallbackQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CallbackQuery.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("chat_instance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chat_instance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chat_instance").toString()));
      }
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      // validate the required field `from`
      User.validateJsonElement(jsonObj.get("from"));
      if ((jsonObj.get("game_short_name") != null && !jsonObj.get("game_short_name").isJsonNull()) && !jsonObj.get("game_short_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `game_short_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("game_short_name").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("inline_message_id") != null && !jsonObj.get("inline_message_id").isJsonNull()) && !jsonObj.get("inline_message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inline_message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inline_message_id").toString()));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        Message.validateJsonElement(jsonObj.get("message"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallbackQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallbackQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallbackQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallbackQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<CallbackQuery>() {
           @Override
           public void write(JsonWriter out, CallbackQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallbackQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallbackQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallbackQuery
   * @throws IOException if the JSON string is invalid with respect to CallbackQuery
   */
  public static CallbackQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallbackQuery.class);
  }

  /**
   * Convert an instance of CallbackQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

