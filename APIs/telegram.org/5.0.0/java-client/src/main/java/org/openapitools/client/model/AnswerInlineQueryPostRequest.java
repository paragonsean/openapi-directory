/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InlineQueryResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnswerInlineQueryPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnswerInlineQueryPostRequest {
  public static final String SERIALIZED_NAME_CACHE_TIME = "cache_time";
  @SerializedName(SERIALIZED_NAME_CACHE_TIME)
  private Integer cacheTime = 300;

  public static final String SERIALIZED_NAME_INLINE_QUERY_ID = "inline_query_id";
  @SerializedName(SERIALIZED_NAME_INLINE_QUERY_ID)
  private String inlineQueryId;

  public static final String SERIALIZED_NAME_IS_PERSONAL = "is_personal";
  @SerializedName(SERIALIZED_NAME_IS_PERSONAL)
  private Boolean isPersonal;

  public static final String SERIALIZED_NAME_NEXT_OFFSET = "next_offset";
  @SerializedName(SERIALIZED_NAME_NEXT_OFFSET)
  private String nextOffset;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<InlineQueryResult> results = new ArrayList<>();

  public static final String SERIALIZED_NAME_SWITCH_PM_PARAMETER = "switch_pm_parameter";
  @SerializedName(SERIALIZED_NAME_SWITCH_PM_PARAMETER)
  private String switchPmParameter;

  public static final String SERIALIZED_NAME_SWITCH_PM_TEXT = "switch_pm_text";
  @SerializedName(SERIALIZED_NAME_SWITCH_PM_TEXT)
  private String switchPmText;

  public AnswerInlineQueryPostRequest() {
  }

  public AnswerInlineQueryPostRequest cacheTime(Integer cacheTime) {
    this.cacheTime = cacheTime;
    return this;
  }

  /**
   * The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
   * @return cacheTime
   */
  @javax.annotation.Nullable
  public Integer getCacheTime() {
    return cacheTime;
  }

  public void setCacheTime(Integer cacheTime) {
    this.cacheTime = cacheTime;
  }


  public AnswerInlineQueryPostRequest inlineQueryId(String inlineQueryId) {
    this.inlineQueryId = inlineQueryId;
    return this;
  }

  /**
   * Unique identifier for the answered query
   * @return inlineQueryId
   */
  @javax.annotation.Nonnull
  public String getInlineQueryId() {
    return inlineQueryId;
  }

  public void setInlineQueryId(String inlineQueryId) {
    this.inlineQueryId = inlineQueryId;
  }


  public AnswerInlineQueryPostRequest isPersonal(Boolean isPersonal) {
    this.isPersonal = isPersonal;
    return this;
  }

  /**
   * Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
   * @return isPersonal
   */
  @javax.annotation.Nullable
  public Boolean getIsPersonal() {
    return isPersonal;
  }

  public void setIsPersonal(Boolean isPersonal) {
    this.isPersonal = isPersonal;
  }


  public AnswerInlineQueryPostRequest nextOffset(String nextOffset) {
    this.nextOffset = nextOffset;
    return this;
  }

  /**
   * Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don&#39;t support pagination. Offset length can&#39;t exceed 64 bytes.
   * @return nextOffset
   */
  @javax.annotation.Nullable
  public String getNextOffset() {
    return nextOffset;
  }

  public void setNextOffset(String nextOffset) {
    this.nextOffset = nextOffset;
  }


  public AnswerInlineQueryPostRequest results(List<InlineQueryResult> results) {
    this.results = results;
    return this;
  }

  public AnswerInlineQueryPostRequest addResultsItem(InlineQueryResult resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

  /**
   * A JSON-serialized array of results for the inline query
   * @return results
   */
  @javax.annotation.Nonnull
  public List<InlineQueryResult> getResults() {
    return results;
  }

  public void setResults(List<InlineQueryResult> results) {
    this.results = results;
  }


  public AnswerInlineQueryPostRequest switchPmParameter(String switchPmParameter) {
    this.switchPmParameter = switchPmParameter;
    return this;
  }

  /**
   * [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only &#x60;A-Z&#x60;, &#x60;a-z&#x60;, &#x60;0-9&#x60;, &#x60;_&#x60; and &#x60;-&#x60; are allowed.    *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a &#39;Connect your YouTube account&#39; button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot&#39;s inline capabilities.
   * @return switchPmParameter
   */
  @javax.annotation.Nullable
  public String getSwitchPmParameter() {
    return switchPmParameter;
  }

  public void setSwitchPmParameter(String switchPmParameter) {
    this.switchPmParameter = switchPmParameter;
  }


  public AnswerInlineQueryPostRequest switchPmText(String switchPmText) {
    this.switchPmText = switchPmText;
    return this;
  }

  /**
   * If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\\_pm\\_parameter*
   * @return switchPmText
   */
  @javax.annotation.Nullable
  public String getSwitchPmText() {
    return switchPmText;
  }

  public void setSwitchPmText(String switchPmText) {
    this.switchPmText = switchPmText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnswerInlineQueryPostRequest answerInlineQueryPostRequest = (AnswerInlineQueryPostRequest) o;
    return Objects.equals(this.cacheTime, answerInlineQueryPostRequest.cacheTime) &&
        Objects.equals(this.inlineQueryId, answerInlineQueryPostRequest.inlineQueryId) &&
        Objects.equals(this.isPersonal, answerInlineQueryPostRequest.isPersonal) &&
        Objects.equals(this.nextOffset, answerInlineQueryPostRequest.nextOffset) &&
        Objects.equals(this.results, answerInlineQueryPostRequest.results) &&
        Objects.equals(this.switchPmParameter, answerInlineQueryPostRequest.switchPmParameter) &&
        Objects.equals(this.switchPmText, answerInlineQueryPostRequest.switchPmText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheTime, inlineQueryId, isPersonal, nextOffset, results, switchPmParameter, switchPmText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnswerInlineQueryPostRequest {\n");
    sb.append("    cacheTime: ").append(toIndentedString(cacheTime)).append("\n");
    sb.append("    inlineQueryId: ").append(toIndentedString(inlineQueryId)).append("\n");
    sb.append("    isPersonal: ").append(toIndentedString(isPersonal)).append("\n");
    sb.append("    nextOffset: ").append(toIndentedString(nextOffset)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    switchPmParameter: ").append(toIndentedString(switchPmParameter)).append("\n");
    sb.append("    switchPmText: ").append(toIndentedString(switchPmText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache_time");
    openapiFields.add("inline_query_id");
    openapiFields.add("is_personal");
    openapiFields.add("next_offset");
    openapiFields.add("results");
    openapiFields.add("switch_pm_parameter");
    openapiFields.add("switch_pm_text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inline_query_id");
    openapiRequiredFields.add("results");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnswerInlineQueryPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnswerInlineQueryPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnswerInlineQueryPostRequest is not found in the empty JSON string", AnswerInlineQueryPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnswerInlineQueryPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnswerInlineQueryPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnswerInlineQueryPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("inline_query_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inline_query_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inline_query_id").toString()));
      }
      if ((jsonObj.get("next_offset") != null && !jsonObj.get("next_offset").isJsonNull()) && !jsonObj.get("next_offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_offset").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("results").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
      }

      JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
      // validate the required field `results` (array)
      for (int i = 0; i < jsonArrayresults.size(); i++) {
        InlineQueryResult.validateJsonElement(jsonArrayresults.get(i));
      };
      if ((jsonObj.get("switch_pm_parameter") != null && !jsonObj.get("switch_pm_parameter").isJsonNull()) && !jsonObj.get("switch_pm_parameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switch_pm_parameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switch_pm_parameter").toString()));
      }
      if ((jsonObj.get("switch_pm_text") != null && !jsonObj.get("switch_pm_text").isJsonNull()) && !jsonObj.get("switch_pm_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switch_pm_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switch_pm_text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnswerInlineQueryPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnswerInlineQueryPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnswerInlineQueryPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnswerInlineQueryPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AnswerInlineQueryPostRequest>() {
           @Override
           public void write(JsonWriter out, AnswerInlineQueryPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnswerInlineQueryPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnswerInlineQueryPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnswerInlineQueryPostRequest
   * @throws IOException if the JSON string is invalid with respect to AnswerInlineQueryPostRequest
   */
  public static AnswerInlineQueryPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnswerInlineQueryPostRequest.class);
  }

  /**
   * Convert an instance of AnswerInlineQueryPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

