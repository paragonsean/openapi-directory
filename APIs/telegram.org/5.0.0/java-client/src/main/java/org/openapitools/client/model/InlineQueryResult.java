/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InlineKeyboardMarkup;
import org.openapitools.client.model.InlineQueryResultArticle;
import org.openapitools.client.model.InlineQueryResultAudio;
import org.openapitools.client.model.InlineQueryResultCachedAudio;
import org.openapitools.client.model.InlineQueryResultCachedDocument;
import org.openapitools.client.model.InlineQueryResultCachedGif;
import org.openapitools.client.model.InlineQueryResultCachedMpeg4Gif;
import org.openapitools.client.model.InlineQueryResultCachedPhoto;
import org.openapitools.client.model.InlineQueryResultCachedSticker;
import org.openapitools.client.model.InlineQueryResultCachedVideo;
import org.openapitools.client.model.InlineQueryResultCachedVoice;
import org.openapitools.client.model.InlineQueryResultContact;
import org.openapitools.client.model.InlineQueryResultDocument;
import org.openapitools.client.model.InlineQueryResultGame;
import org.openapitools.client.model.InlineQueryResultGif;
import org.openapitools.client.model.InlineQueryResultLocation;
import org.openapitools.client.model.InlineQueryResultMpeg4Gif;
import org.openapitools.client.model.InlineQueryResultPhoto;
import org.openapitools.client.model.InlineQueryResultVenue;
import org.openapitools.client.model.InlineQueryResultVideo;
import org.openapitools.client.model.InlineQueryResultVoice;
import org.openapitools.client.model.InputMessageContent;
import org.openapitools.client.model.MessageEntity;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InlineQueryResult extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(InlineQueryResult.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!InlineQueryResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'InlineQueryResult' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InlineQueryResultCachedAudio> adapterInlineQueryResultCachedAudio = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultCachedAudio.class));
            final TypeAdapter<InlineQueryResultCachedDocument> adapterInlineQueryResultCachedDocument = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultCachedDocument.class));
            final TypeAdapter<InlineQueryResultCachedGif> adapterInlineQueryResultCachedGif = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultCachedGif.class));
            final TypeAdapter<InlineQueryResultCachedMpeg4Gif> adapterInlineQueryResultCachedMpeg4Gif = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultCachedMpeg4Gif.class));
            final TypeAdapter<InlineQueryResultCachedPhoto> adapterInlineQueryResultCachedPhoto = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultCachedPhoto.class));
            final TypeAdapter<InlineQueryResultCachedSticker> adapterInlineQueryResultCachedSticker = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultCachedSticker.class));
            final TypeAdapter<InlineQueryResultCachedVideo> adapterInlineQueryResultCachedVideo = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultCachedVideo.class));
            final TypeAdapter<InlineQueryResultCachedVoice> adapterInlineQueryResultCachedVoice = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultCachedVoice.class));
            final TypeAdapter<InlineQueryResultArticle> adapterInlineQueryResultArticle = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultArticle.class));
            final TypeAdapter<InlineQueryResultAudio> adapterInlineQueryResultAudio = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultAudio.class));
            final TypeAdapter<InlineQueryResultContact> adapterInlineQueryResultContact = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultContact.class));
            final TypeAdapter<InlineQueryResultGame> adapterInlineQueryResultGame = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultGame.class));
            final TypeAdapter<InlineQueryResultDocument> adapterInlineQueryResultDocument = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultDocument.class));
            final TypeAdapter<InlineQueryResultGif> adapterInlineQueryResultGif = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultGif.class));
            final TypeAdapter<InlineQueryResultLocation> adapterInlineQueryResultLocation = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultLocation.class));
            final TypeAdapter<InlineQueryResultMpeg4Gif> adapterInlineQueryResultMpeg4Gif = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultMpeg4Gif.class));
            final TypeAdapter<InlineQueryResultPhoto> adapterInlineQueryResultPhoto = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultPhoto.class));
            final TypeAdapter<InlineQueryResultVenue> adapterInlineQueryResultVenue = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultVenue.class));
            final TypeAdapter<InlineQueryResultVideo> adapterInlineQueryResultVideo = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultVideo.class));
            final TypeAdapter<InlineQueryResultVoice> adapterInlineQueryResultVoice = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultVoice.class));

            return (TypeAdapter<T>) new TypeAdapter<InlineQueryResult>() {
                @Override
                public void write(JsonWriter out, InlineQueryResult value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `InlineQueryResultCachedAudio`
                    if (value.getActualInstance() instanceof InlineQueryResultCachedAudio) {
                        JsonElement element = adapterInlineQueryResultCachedAudio.toJsonTree((InlineQueryResultCachedAudio)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultCachedDocument`
                    if (value.getActualInstance() instanceof InlineQueryResultCachedDocument) {
                        JsonElement element = adapterInlineQueryResultCachedDocument.toJsonTree((InlineQueryResultCachedDocument)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultCachedGif`
                    if (value.getActualInstance() instanceof InlineQueryResultCachedGif) {
                        JsonElement element = adapterInlineQueryResultCachedGif.toJsonTree((InlineQueryResultCachedGif)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultCachedMpeg4Gif`
                    if (value.getActualInstance() instanceof InlineQueryResultCachedMpeg4Gif) {
                        JsonElement element = adapterInlineQueryResultCachedMpeg4Gif.toJsonTree((InlineQueryResultCachedMpeg4Gif)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultCachedPhoto`
                    if (value.getActualInstance() instanceof InlineQueryResultCachedPhoto) {
                        JsonElement element = adapterInlineQueryResultCachedPhoto.toJsonTree((InlineQueryResultCachedPhoto)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultCachedSticker`
                    if (value.getActualInstance() instanceof InlineQueryResultCachedSticker) {
                        JsonElement element = adapterInlineQueryResultCachedSticker.toJsonTree((InlineQueryResultCachedSticker)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultCachedVideo`
                    if (value.getActualInstance() instanceof InlineQueryResultCachedVideo) {
                        JsonElement element = adapterInlineQueryResultCachedVideo.toJsonTree((InlineQueryResultCachedVideo)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultCachedVoice`
                    if (value.getActualInstance() instanceof InlineQueryResultCachedVoice) {
                        JsonElement element = adapterInlineQueryResultCachedVoice.toJsonTree((InlineQueryResultCachedVoice)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultArticle`
                    if (value.getActualInstance() instanceof InlineQueryResultArticle) {
                        JsonElement element = adapterInlineQueryResultArticle.toJsonTree((InlineQueryResultArticle)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultAudio`
                    if (value.getActualInstance() instanceof InlineQueryResultAudio) {
                        JsonElement element = adapterInlineQueryResultAudio.toJsonTree((InlineQueryResultAudio)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultContact`
                    if (value.getActualInstance() instanceof InlineQueryResultContact) {
                        JsonElement element = adapterInlineQueryResultContact.toJsonTree((InlineQueryResultContact)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultGame`
                    if (value.getActualInstance() instanceof InlineQueryResultGame) {
                        JsonElement element = adapterInlineQueryResultGame.toJsonTree((InlineQueryResultGame)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultDocument`
                    if (value.getActualInstance() instanceof InlineQueryResultDocument) {
                        JsonElement element = adapterInlineQueryResultDocument.toJsonTree((InlineQueryResultDocument)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultGif`
                    if (value.getActualInstance() instanceof InlineQueryResultGif) {
                        JsonElement element = adapterInlineQueryResultGif.toJsonTree((InlineQueryResultGif)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultLocation`
                    if (value.getActualInstance() instanceof InlineQueryResultLocation) {
                        JsonElement element = adapterInlineQueryResultLocation.toJsonTree((InlineQueryResultLocation)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultMpeg4Gif`
                    if (value.getActualInstance() instanceof InlineQueryResultMpeg4Gif) {
                        JsonElement element = adapterInlineQueryResultMpeg4Gif.toJsonTree((InlineQueryResultMpeg4Gif)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultPhoto`
                    if (value.getActualInstance() instanceof InlineQueryResultPhoto) {
                        JsonElement element = adapterInlineQueryResultPhoto.toJsonTree((InlineQueryResultPhoto)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultVenue`
                    if (value.getActualInstance() instanceof InlineQueryResultVenue) {
                        JsonElement element = adapterInlineQueryResultVenue.toJsonTree((InlineQueryResultVenue)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultVideo`
                    if (value.getActualInstance() instanceof InlineQueryResultVideo) {
                        JsonElement element = adapterInlineQueryResultVideo.toJsonTree((InlineQueryResultVideo)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InlineQueryResultVoice`
                    if (value.getActualInstance() instanceof InlineQueryResultVoice) {
                        JsonElement element = adapterInlineQueryResultVoice.toJsonTree((InlineQueryResultVoice)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: InlineQueryResultArticle, InlineQueryResultAudio, InlineQueryResultCachedAudio, InlineQueryResultCachedDocument, InlineQueryResultCachedGif, InlineQueryResultCachedMpeg4Gif, InlineQueryResultCachedPhoto, InlineQueryResultCachedSticker, InlineQueryResultCachedVideo, InlineQueryResultCachedVoice, InlineQueryResultContact, InlineQueryResultDocument, InlineQueryResultGame, InlineQueryResultGif, InlineQueryResultLocation, InlineQueryResultMpeg4Gif, InlineQueryResultPhoto, InlineQueryResultVenue, InlineQueryResultVideo, InlineQueryResultVoice");
                }

                @Override
                public InlineQueryResult read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize InlineQueryResultCachedAudio
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultCachedAudio.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultCachedAudio;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultCachedAudio failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultCachedAudio'", e);
                    }
                    // deserialize InlineQueryResultCachedDocument
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultCachedDocument.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultCachedDocument;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultCachedDocument failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultCachedDocument'", e);
                    }
                    // deserialize InlineQueryResultCachedGif
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultCachedGif.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultCachedGif;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultCachedGif failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultCachedGif'", e);
                    }
                    // deserialize InlineQueryResultCachedMpeg4Gif
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultCachedMpeg4Gif.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultCachedMpeg4Gif;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultCachedMpeg4Gif failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultCachedMpeg4Gif'", e);
                    }
                    // deserialize InlineQueryResultCachedPhoto
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultCachedPhoto.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultCachedPhoto;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultCachedPhoto failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultCachedPhoto'", e);
                    }
                    // deserialize InlineQueryResultCachedSticker
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultCachedSticker.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultCachedSticker;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultCachedSticker failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultCachedSticker'", e);
                    }
                    // deserialize InlineQueryResultCachedVideo
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultCachedVideo.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultCachedVideo;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultCachedVideo failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultCachedVideo'", e);
                    }
                    // deserialize InlineQueryResultCachedVoice
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultCachedVoice.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultCachedVoice;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultCachedVoice failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultCachedVoice'", e);
                    }
                    // deserialize InlineQueryResultArticle
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultArticle.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultArticle;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultArticle failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultArticle'", e);
                    }
                    // deserialize InlineQueryResultAudio
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultAudio.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultAudio;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultAudio failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultAudio'", e);
                    }
                    // deserialize InlineQueryResultContact
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultContact.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultContact;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultContact failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultContact'", e);
                    }
                    // deserialize InlineQueryResultGame
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultGame.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultGame;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultGame failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultGame'", e);
                    }
                    // deserialize InlineQueryResultDocument
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultDocument.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultDocument;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultDocument failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultDocument'", e);
                    }
                    // deserialize InlineQueryResultGif
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultGif.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultGif;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultGif failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultGif'", e);
                    }
                    // deserialize InlineQueryResultLocation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultLocation.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultLocation;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultLocation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultLocation'", e);
                    }
                    // deserialize InlineQueryResultMpeg4Gif
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultMpeg4Gif.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultMpeg4Gif;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultMpeg4Gif failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultMpeg4Gif'", e);
                    }
                    // deserialize InlineQueryResultPhoto
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultPhoto.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultPhoto;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultPhoto failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultPhoto'", e);
                    }
                    // deserialize InlineQueryResultVenue
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultVenue.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultVenue;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultVenue failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultVenue'", e);
                    }
                    // deserialize InlineQueryResultVideo
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultVideo.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultVideo;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultVideo failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultVideo'", e);
                    }
                    // deserialize InlineQueryResultVoice
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InlineQueryResultVoice.validateJsonElement(jsonElement);
                        actualAdapter = adapterInlineQueryResultVoice;
                        InlineQueryResult ret = new InlineQueryResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InlineQueryResultVoice failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InlineQueryResultVoice'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for InlineQueryResult: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public InlineQueryResult() {
        super("anyOf", Boolean.FALSE);
    }

    public InlineQueryResult(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("InlineQueryResultCachedAudio", InlineQueryResultCachedAudio.class);
        schemas.put("InlineQueryResultCachedDocument", InlineQueryResultCachedDocument.class);
        schemas.put("InlineQueryResultCachedGif", InlineQueryResultCachedGif.class);
        schemas.put("InlineQueryResultCachedMpeg4Gif", InlineQueryResultCachedMpeg4Gif.class);
        schemas.put("InlineQueryResultCachedPhoto", InlineQueryResultCachedPhoto.class);
        schemas.put("InlineQueryResultCachedSticker", InlineQueryResultCachedSticker.class);
        schemas.put("InlineQueryResultCachedVideo", InlineQueryResultCachedVideo.class);
        schemas.put("InlineQueryResultCachedVoice", InlineQueryResultCachedVoice.class);
        schemas.put("InlineQueryResultArticle", InlineQueryResultArticle.class);
        schemas.put("InlineQueryResultAudio", InlineQueryResultAudio.class);
        schemas.put("InlineQueryResultContact", InlineQueryResultContact.class);
        schemas.put("InlineQueryResultGame", InlineQueryResultGame.class);
        schemas.put("InlineQueryResultDocument", InlineQueryResultDocument.class);
        schemas.put("InlineQueryResultGif", InlineQueryResultGif.class);
        schemas.put("InlineQueryResultLocation", InlineQueryResultLocation.class);
        schemas.put("InlineQueryResultMpeg4Gif", InlineQueryResultMpeg4Gif.class);
        schemas.put("InlineQueryResultPhoto", InlineQueryResultPhoto.class);
        schemas.put("InlineQueryResultVenue", InlineQueryResultVenue.class);
        schemas.put("InlineQueryResultVideo", InlineQueryResultVideo.class);
        schemas.put("InlineQueryResultVoice", InlineQueryResultVoice.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return InlineQueryResult.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * InlineQueryResultArticle, InlineQueryResultAudio, InlineQueryResultCachedAudio, InlineQueryResultCachedDocument, InlineQueryResultCachedGif, InlineQueryResultCachedMpeg4Gif, InlineQueryResultCachedPhoto, InlineQueryResultCachedSticker, InlineQueryResultCachedVideo, InlineQueryResultCachedVoice, InlineQueryResultContact, InlineQueryResultDocument, InlineQueryResultGame, InlineQueryResultGif, InlineQueryResultLocation, InlineQueryResultMpeg4Gif, InlineQueryResultPhoto, InlineQueryResultVenue, InlineQueryResultVideo, InlineQueryResultVoice
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof InlineQueryResultCachedAudio) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultCachedDocument) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultCachedGif) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultCachedMpeg4Gif) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultCachedPhoto) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultCachedSticker) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultCachedVideo) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultCachedVoice) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultArticle) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultAudio) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultContact) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultGame) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultDocument) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultGif) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultLocation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultMpeg4Gif) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultPhoto) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultVenue) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultVideo) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InlineQueryResultVoice) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be InlineQueryResultArticle, InlineQueryResultAudio, InlineQueryResultCachedAudio, InlineQueryResultCachedDocument, InlineQueryResultCachedGif, InlineQueryResultCachedMpeg4Gif, InlineQueryResultCachedPhoto, InlineQueryResultCachedSticker, InlineQueryResultCachedVideo, InlineQueryResultCachedVoice, InlineQueryResultContact, InlineQueryResultDocument, InlineQueryResultGame, InlineQueryResultGif, InlineQueryResultLocation, InlineQueryResultMpeg4Gif, InlineQueryResultPhoto, InlineQueryResultVenue, InlineQueryResultVideo, InlineQueryResultVoice");
    }

    /**
     * Get the actual instance, which can be the following:
     * InlineQueryResultArticle, InlineQueryResultAudio, InlineQueryResultCachedAudio, InlineQueryResultCachedDocument, InlineQueryResultCachedGif, InlineQueryResultCachedMpeg4Gif, InlineQueryResultCachedPhoto, InlineQueryResultCachedSticker, InlineQueryResultCachedVideo, InlineQueryResultCachedVoice, InlineQueryResultContact, InlineQueryResultDocument, InlineQueryResultGame, InlineQueryResultGif, InlineQueryResultLocation, InlineQueryResultMpeg4Gif, InlineQueryResultPhoto, InlineQueryResultVenue, InlineQueryResultVideo, InlineQueryResultVoice
     *
     * @return The actual instance (InlineQueryResultArticle, InlineQueryResultAudio, InlineQueryResultCachedAudio, InlineQueryResultCachedDocument, InlineQueryResultCachedGif, InlineQueryResultCachedMpeg4Gif, InlineQueryResultCachedPhoto, InlineQueryResultCachedSticker, InlineQueryResultCachedVideo, InlineQueryResultCachedVoice, InlineQueryResultContact, InlineQueryResultDocument, InlineQueryResultGame, InlineQueryResultGif, InlineQueryResultLocation, InlineQueryResultMpeg4Gif, InlineQueryResultPhoto, InlineQueryResultVenue, InlineQueryResultVideo, InlineQueryResultVoice)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `InlineQueryResultCachedAudio`. If the actual instance is not `InlineQueryResultCachedAudio`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultCachedAudio`
     * @throws ClassCastException if the instance is not `InlineQueryResultCachedAudio`
     */
    public InlineQueryResultCachedAudio getInlineQueryResultCachedAudio() throws ClassCastException {
        return (InlineQueryResultCachedAudio)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultCachedDocument`. If the actual instance is not `InlineQueryResultCachedDocument`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultCachedDocument`
     * @throws ClassCastException if the instance is not `InlineQueryResultCachedDocument`
     */
    public InlineQueryResultCachedDocument getInlineQueryResultCachedDocument() throws ClassCastException {
        return (InlineQueryResultCachedDocument)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultCachedGif`. If the actual instance is not `InlineQueryResultCachedGif`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultCachedGif`
     * @throws ClassCastException if the instance is not `InlineQueryResultCachedGif`
     */
    public InlineQueryResultCachedGif getInlineQueryResultCachedGif() throws ClassCastException {
        return (InlineQueryResultCachedGif)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultCachedMpeg4Gif`. If the actual instance is not `InlineQueryResultCachedMpeg4Gif`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultCachedMpeg4Gif`
     * @throws ClassCastException if the instance is not `InlineQueryResultCachedMpeg4Gif`
     */
    public InlineQueryResultCachedMpeg4Gif getInlineQueryResultCachedMpeg4Gif() throws ClassCastException {
        return (InlineQueryResultCachedMpeg4Gif)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultCachedPhoto`. If the actual instance is not `InlineQueryResultCachedPhoto`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultCachedPhoto`
     * @throws ClassCastException if the instance is not `InlineQueryResultCachedPhoto`
     */
    public InlineQueryResultCachedPhoto getInlineQueryResultCachedPhoto() throws ClassCastException {
        return (InlineQueryResultCachedPhoto)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultCachedSticker`. If the actual instance is not `InlineQueryResultCachedSticker`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultCachedSticker`
     * @throws ClassCastException if the instance is not `InlineQueryResultCachedSticker`
     */
    public InlineQueryResultCachedSticker getInlineQueryResultCachedSticker() throws ClassCastException {
        return (InlineQueryResultCachedSticker)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultCachedVideo`. If the actual instance is not `InlineQueryResultCachedVideo`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultCachedVideo`
     * @throws ClassCastException if the instance is not `InlineQueryResultCachedVideo`
     */
    public InlineQueryResultCachedVideo getInlineQueryResultCachedVideo() throws ClassCastException {
        return (InlineQueryResultCachedVideo)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultCachedVoice`. If the actual instance is not `InlineQueryResultCachedVoice`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultCachedVoice`
     * @throws ClassCastException if the instance is not `InlineQueryResultCachedVoice`
     */
    public InlineQueryResultCachedVoice getInlineQueryResultCachedVoice() throws ClassCastException {
        return (InlineQueryResultCachedVoice)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultArticle`. If the actual instance is not `InlineQueryResultArticle`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultArticle`
     * @throws ClassCastException if the instance is not `InlineQueryResultArticle`
     */
    public InlineQueryResultArticle getInlineQueryResultArticle() throws ClassCastException {
        return (InlineQueryResultArticle)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultAudio`. If the actual instance is not `InlineQueryResultAudio`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultAudio`
     * @throws ClassCastException if the instance is not `InlineQueryResultAudio`
     */
    public InlineQueryResultAudio getInlineQueryResultAudio() throws ClassCastException {
        return (InlineQueryResultAudio)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultContact`. If the actual instance is not `InlineQueryResultContact`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultContact`
     * @throws ClassCastException if the instance is not `InlineQueryResultContact`
     */
    public InlineQueryResultContact getInlineQueryResultContact() throws ClassCastException {
        return (InlineQueryResultContact)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultGame`. If the actual instance is not `InlineQueryResultGame`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultGame`
     * @throws ClassCastException if the instance is not `InlineQueryResultGame`
     */
    public InlineQueryResultGame getInlineQueryResultGame() throws ClassCastException {
        return (InlineQueryResultGame)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultDocument`. If the actual instance is not `InlineQueryResultDocument`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultDocument`
     * @throws ClassCastException if the instance is not `InlineQueryResultDocument`
     */
    public InlineQueryResultDocument getInlineQueryResultDocument() throws ClassCastException {
        return (InlineQueryResultDocument)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultGif`. If the actual instance is not `InlineQueryResultGif`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultGif`
     * @throws ClassCastException if the instance is not `InlineQueryResultGif`
     */
    public InlineQueryResultGif getInlineQueryResultGif() throws ClassCastException {
        return (InlineQueryResultGif)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultLocation`. If the actual instance is not `InlineQueryResultLocation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultLocation`
     * @throws ClassCastException if the instance is not `InlineQueryResultLocation`
     */
    public InlineQueryResultLocation getInlineQueryResultLocation() throws ClassCastException {
        return (InlineQueryResultLocation)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultMpeg4Gif`. If the actual instance is not `InlineQueryResultMpeg4Gif`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultMpeg4Gif`
     * @throws ClassCastException if the instance is not `InlineQueryResultMpeg4Gif`
     */
    public InlineQueryResultMpeg4Gif getInlineQueryResultMpeg4Gif() throws ClassCastException {
        return (InlineQueryResultMpeg4Gif)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultPhoto`. If the actual instance is not `InlineQueryResultPhoto`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultPhoto`
     * @throws ClassCastException if the instance is not `InlineQueryResultPhoto`
     */
    public InlineQueryResultPhoto getInlineQueryResultPhoto() throws ClassCastException {
        return (InlineQueryResultPhoto)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultVenue`. If the actual instance is not `InlineQueryResultVenue`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultVenue`
     * @throws ClassCastException if the instance is not `InlineQueryResultVenue`
     */
    public InlineQueryResultVenue getInlineQueryResultVenue() throws ClassCastException {
        return (InlineQueryResultVenue)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultVideo`. If the actual instance is not `InlineQueryResultVideo`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultVideo`
     * @throws ClassCastException if the instance is not `InlineQueryResultVideo`
     */
    public InlineQueryResultVideo getInlineQueryResultVideo() throws ClassCastException {
        return (InlineQueryResultVideo)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InlineQueryResultVoice`. If the actual instance is not `InlineQueryResultVoice`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InlineQueryResultVoice`
     * @throws ClassCastException if the instance is not `InlineQueryResultVoice`
     */
    public InlineQueryResultVoice getInlineQueryResultVoice() throws ClassCastException {
        return (InlineQueryResultVoice)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to InlineQueryResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with InlineQueryResultCachedAudio
        try {
            InlineQueryResultCachedAudio.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultCachedAudio failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultCachedDocument
        try {
            InlineQueryResultCachedDocument.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultCachedDocument failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultCachedGif
        try {
            InlineQueryResultCachedGif.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultCachedGif failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultCachedMpeg4Gif
        try {
            InlineQueryResultCachedMpeg4Gif.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultCachedMpeg4Gif failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultCachedPhoto
        try {
            InlineQueryResultCachedPhoto.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultCachedPhoto failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultCachedSticker
        try {
            InlineQueryResultCachedSticker.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultCachedSticker failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultCachedVideo
        try {
            InlineQueryResultCachedVideo.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultCachedVideo failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultCachedVoice
        try {
            InlineQueryResultCachedVoice.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultCachedVoice failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultArticle
        try {
            InlineQueryResultArticle.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultArticle failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultAudio
        try {
            InlineQueryResultAudio.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultAudio failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultContact
        try {
            InlineQueryResultContact.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultContact failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultGame
        try {
            InlineQueryResultGame.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultGame failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultDocument
        try {
            InlineQueryResultDocument.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultDocument failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultGif
        try {
            InlineQueryResultGif.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultGif failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultLocation
        try {
            InlineQueryResultLocation.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultLocation failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultMpeg4Gif
        try {
            InlineQueryResultMpeg4Gif.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultMpeg4Gif failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultPhoto
        try {
            InlineQueryResultPhoto.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultPhoto failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultVenue
        try {
            InlineQueryResultVenue.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultVenue failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultVideo
        try {
            InlineQueryResultVideo.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultVideo failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InlineQueryResultVoice
        try {
            InlineQueryResultVoice.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InlineQueryResultVoice failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for InlineQueryResult with anyOf schemas: InlineQueryResultArticle, InlineQueryResultAudio, InlineQueryResultCachedAudio, InlineQueryResultCachedDocument, InlineQueryResultCachedGif, InlineQueryResultCachedMpeg4Gif, InlineQueryResultCachedPhoto, InlineQueryResultCachedSticker, InlineQueryResultCachedVideo, InlineQueryResultCachedVoice, InlineQueryResultContact, InlineQueryResultDocument, InlineQueryResultGame, InlineQueryResultGif, InlineQueryResultLocation, InlineQueryResultMpeg4Gif, InlineQueryResultPhoto, InlineQueryResultVenue, InlineQueryResultVideo, InlineQueryResultVoice. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of InlineQueryResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of InlineQueryResult
     * @throws IOException if the JSON string is invalid with respect to InlineQueryResult
     */
    public static InlineQueryResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, InlineQueryResult.class);
    }

    /**
     * Convert an instance of InlineQueryResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

