/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object contains information about one member of a chat.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChatMember {
  public static final String SERIALIZED_NAME_CAN_ADD_WEB_PAGE_PREVIEWS = "can_add_web_page_previews";
  @SerializedName(SERIALIZED_NAME_CAN_ADD_WEB_PAGE_PREVIEWS)
  private Boolean canAddWebPagePreviews;

  public static final String SERIALIZED_NAME_CAN_BE_EDITED = "can_be_edited";
  @SerializedName(SERIALIZED_NAME_CAN_BE_EDITED)
  private Boolean canBeEdited;

  public static final String SERIALIZED_NAME_CAN_CHANGE_INFO = "can_change_info";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_INFO)
  private Boolean canChangeInfo;

  public static final String SERIALIZED_NAME_CAN_DELETE_MESSAGES = "can_delete_messages";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE_MESSAGES)
  private Boolean canDeleteMessages;

  public static final String SERIALIZED_NAME_CAN_EDIT_MESSAGES = "can_edit_messages";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT_MESSAGES)
  private Boolean canEditMessages;

  public static final String SERIALIZED_NAME_CAN_INVITE_USERS = "can_invite_users";
  @SerializedName(SERIALIZED_NAME_CAN_INVITE_USERS)
  private Boolean canInviteUsers;

  public static final String SERIALIZED_NAME_CAN_PIN_MESSAGES = "can_pin_messages";
  @SerializedName(SERIALIZED_NAME_CAN_PIN_MESSAGES)
  private Boolean canPinMessages;

  public static final String SERIALIZED_NAME_CAN_POST_MESSAGES = "can_post_messages";
  @SerializedName(SERIALIZED_NAME_CAN_POST_MESSAGES)
  private Boolean canPostMessages;

  public static final String SERIALIZED_NAME_CAN_PROMOTE_MEMBERS = "can_promote_members";
  @SerializedName(SERIALIZED_NAME_CAN_PROMOTE_MEMBERS)
  private Boolean canPromoteMembers;

  public static final String SERIALIZED_NAME_CAN_RESTRICT_MEMBERS = "can_restrict_members";
  @SerializedName(SERIALIZED_NAME_CAN_RESTRICT_MEMBERS)
  private Boolean canRestrictMembers;

  public static final String SERIALIZED_NAME_CAN_SEND_MEDIA_MESSAGES = "can_send_media_messages";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_MEDIA_MESSAGES)
  private Boolean canSendMediaMessages;

  public static final String SERIALIZED_NAME_CAN_SEND_MESSAGES = "can_send_messages";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_MESSAGES)
  private Boolean canSendMessages;

  public static final String SERIALIZED_NAME_CAN_SEND_OTHER_MESSAGES = "can_send_other_messages";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_OTHER_MESSAGES)
  private Boolean canSendOtherMessages;

  public static final String SERIALIZED_NAME_CAN_SEND_POLLS = "can_send_polls";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_POLLS)
  private Boolean canSendPolls;

  public static final String SERIALIZED_NAME_CUSTOM_TITLE = "custom_title";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TITLE)
  private String customTitle;

  public static final String SERIALIZED_NAME_IS_ANONYMOUS = "is_anonymous";
  @SerializedName(SERIALIZED_NAME_IS_ANONYMOUS)
  private Boolean isAnonymous;

  public static final String SERIALIZED_NAME_IS_MEMBER = "is_member";
  @SerializedName(SERIALIZED_NAME_IS_MEMBER)
  private Boolean isMember;

  /**
   * The member&#39;s status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATOR("creator"),
    
    ADMINISTRATOR("administrator"),
    
    MEMBER("member"),
    
    RESTRICTED("restricted"),
    
    LEFT("left"),
    
    KICKED("kicked");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UNTIL_DATE = "until_date";
  @SerializedName(SERIALIZED_NAME_UNTIL_DATE)
  private Integer untilDate;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public ChatMember() {
  }

  public ChatMember canAddWebPagePreviews(Boolean canAddWebPagePreviews) {
    this.canAddWebPagePreviews = canAddWebPagePreviews;
    return this;
  }

  /**
   * *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages
   * @return canAddWebPagePreviews
   */
  @javax.annotation.Nullable
  public Boolean getCanAddWebPagePreviews() {
    return canAddWebPagePreviews;
  }

  public void setCanAddWebPagePreviews(Boolean canAddWebPagePreviews) {
    this.canAddWebPagePreviews = canAddWebPagePreviews;
  }


  public ChatMember canBeEdited(Boolean canBeEdited) {
    this.canBeEdited = canBeEdited;
    return this;
  }

  /**
   * *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
   * @return canBeEdited
   */
  @javax.annotation.Nullable
  public Boolean getCanBeEdited() {
    return canBeEdited;
  }

  public void setCanBeEdited(Boolean canBeEdited) {
    this.canBeEdited = canBeEdited;
  }


  public ChatMember canChangeInfo(Boolean canChangeInfo) {
    this.canChangeInfo = canChangeInfo;
    return this;
  }

  /**
   * *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
   * @return canChangeInfo
   */
  @javax.annotation.Nullable
  public Boolean getCanChangeInfo() {
    return canChangeInfo;
  }

  public void setCanChangeInfo(Boolean canChangeInfo) {
    this.canChangeInfo = canChangeInfo;
  }


  public ChatMember canDeleteMessages(Boolean canDeleteMessages) {
    this.canDeleteMessages = canDeleteMessages;
    return this;
  }

  /**
   * *Optional*. Administrators only. True, if the administrator can delete messages of other users
   * @return canDeleteMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanDeleteMessages() {
    return canDeleteMessages;
  }

  public void setCanDeleteMessages(Boolean canDeleteMessages) {
    this.canDeleteMessages = canDeleteMessages;
  }


  public ChatMember canEditMessages(Boolean canEditMessages) {
    this.canEditMessages = canEditMessages;
    return this;
  }

  /**
   * *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
   * @return canEditMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanEditMessages() {
    return canEditMessages;
  }

  public void setCanEditMessages(Boolean canEditMessages) {
    this.canEditMessages = canEditMessages;
  }


  public ChatMember canInviteUsers(Boolean canInviteUsers) {
    this.canInviteUsers = canInviteUsers;
    return this;
  }

  /**
   * *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
   * @return canInviteUsers
   */
  @javax.annotation.Nullable
  public Boolean getCanInviteUsers() {
    return canInviteUsers;
  }

  public void setCanInviteUsers(Boolean canInviteUsers) {
    this.canInviteUsers = canInviteUsers;
  }


  public ChatMember canPinMessages(Boolean canPinMessages) {
    this.canPinMessages = canPinMessages;
    return this;
  }

  /**
   * *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
   * @return canPinMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanPinMessages() {
    return canPinMessages;
  }

  public void setCanPinMessages(Boolean canPinMessages) {
    this.canPinMessages = canPinMessages;
  }


  public ChatMember canPostMessages(Boolean canPostMessages) {
    this.canPostMessages = canPostMessages;
    return this;
  }

  /**
   * *Optional*. Administrators only. True, if the administrator can post in the channel; channels only
   * @return canPostMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanPostMessages() {
    return canPostMessages;
  }

  public void setCanPostMessages(Boolean canPostMessages) {
    this.canPostMessages = canPostMessages;
  }


  public ChatMember canPromoteMembers(Boolean canPromoteMembers) {
    this.canPromoteMembers = canPromoteMembers;
    return this;
  }

  /**
   * *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
   * @return canPromoteMembers
   */
  @javax.annotation.Nullable
  public Boolean getCanPromoteMembers() {
    return canPromoteMembers;
  }

  public void setCanPromoteMembers(Boolean canPromoteMembers) {
    this.canPromoteMembers = canPromoteMembers;
  }


  public ChatMember canRestrictMembers(Boolean canRestrictMembers) {
    this.canRestrictMembers = canRestrictMembers;
    return this;
  }

  /**
   * *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members
   * @return canRestrictMembers
   */
  @javax.annotation.Nullable
  public Boolean getCanRestrictMembers() {
    return canRestrictMembers;
  }

  public void setCanRestrictMembers(Boolean canRestrictMembers) {
    this.canRestrictMembers = canRestrictMembers;
  }


  public ChatMember canSendMediaMessages(Boolean canSendMediaMessages) {
    this.canSendMediaMessages = canSendMediaMessages;
    return this;
  }

  /**
   * *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
   * @return canSendMediaMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanSendMediaMessages() {
    return canSendMediaMessages;
  }

  public void setCanSendMediaMessages(Boolean canSendMediaMessages) {
    this.canSendMediaMessages = canSendMediaMessages;
  }


  public ChatMember canSendMessages(Boolean canSendMessages) {
    this.canSendMessages = canSendMessages;
    return this;
  }

  /**
   * *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
   * @return canSendMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanSendMessages() {
    return canSendMessages;
  }

  public void setCanSendMessages(Boolean canSendMessages) {
    this.canSendMessages = canSendMessages;
  }


  public ChatMember canSendOtherMessages(Boolean canSendOtherMessages) {
    this.canSendOtherMessages = canSendOtherMessages;
    return this;
  }

  /**
   * *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
   * @return canSendOtherMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanSendOtherMessages() {
    return canSendOtherMessages;
  }

  public void setCanSendOtherMessages(Boolean canSendOtherMessages) {
    this.canSendOtherMessages = canSendOtherMessages;
  }


  public ChatMember canSendPolls(Boolean canSendPolls) {
    this.canSendPolls = canSendPolls;
    return this;
  }

  /**
   * *Optional*. Restricted only. True, if the user is allowed to send polls
   * @return canSendPolls
   */
  @javax.annotation.Nullable
  public Boolean getCanSendPolls() {
    return canSendPolls;
  }

  public void setCanSendPolls(Boolean canSendPolls) {
    this.canSendPolls = canSendPolls;
  }


  public ChatMember customTitle(String customTitle) {
    this.customTitle = customTitle;
    return this;
  }

  /**
   * *Optional*. Owner and administrators only. Custom title for this user
   * @return customTitle
   */
  @javax.annotation.Nullable
  public String getCustomTitle() {
    return customTitle;
  }

  public void setCustomTitle(String customTitle) {
    this.customTitle = customTitle;
  }


  public ChatMember isAnonymous(Boolean isAnonymous) {
    this.isAnonymous = isAnonymous;
    return this;
  }

  /**
   * *Optional*. Owner and administrators only. True, if the user&#39;s presence in the chat is hidden
   * @return isAnonymous
   */
  @javax.annotation.Nullable
  public Boolean getIsAnonymous() {
    return isAnonymous;
  }

  public void setIsAnonymous(Boolean isAnonymous) {
    this.isAnonymous = isAnonymous;
  }


  public ChatMember isMember(Boolean isMember) {
    this.isMember = isMember;
    return this;
  }

  /**
   * *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request
   * @return isMember
   */
  @javax.annotation.Nullable
  public Boolean getIsMember() {
    return isMember;
  }

  public void setIsMember(Boolean isMember) {
    this.isMember = isMember;
  }


  public ChatMember status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The member&#39;s status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ChatMember untilDate(Integer untilDate) {
    this.untilDate = untilDate;
    return this;
  }

  /**
   * *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
   * @return untilDate
   */
  @javax.annotation.Nullable
  public Integer getUntilDate() {
    return untilDate;
  }

  public void setUntilDate(Integer untilDate) {
    this.untilDate = untilDate;
  }


  public ChatMember user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChatMember chatMember = (ChatMember) o;
    return Objects.equals(this.canAddWebPagePreviews, chatMember.canAddWebPagePreviews) &&
        Objects.equals(this.canBeEdited, chatMember.canBeEdited) &&
        Objects.equals(this.canChangeInfo, chatMember.canChangeInfo) &&
        Objects.equals(this.canDeleteMessages, chatMember.canDeleteMessages) &&
        Objects.equals(this.canEditMessages, chatMember.canEditMessages) &&
        Objects.equals(this.canInviteUsers, chatMember.canInviteUsers) &&
        Objects.equals(this.canPinMessages, chatMember.canPinMessages) &&
        Objects.equals(this.canPostMessages, chatMember.canPostMessages) &&
        Objects.equals(this.canPromoteMembers, chatMember.canPromoteMembers) &&
        Objects.equals(this.canRestrictMembers, chatMember.canRestrictMembers) &&
        Objects.equals(this.canSendMediaMessages, chatMember.canSendMediaMessages) &&
        Objects.equals(this.canSendMessages, chatMember.canSendMessages) &&
        Objects.equals(this.canSendOtherMessages, chatMember.canSendOtherMessages) &&
        Objects.equals(this.canSendPolls, chatMember.canSendPolls) &&
        Objects.equals(this.customTitle, chatMember.customTitle) &&
        Objects.equals(this.isAnonymous, chatMember.isAnonymous) &&
        Objects.equals(this.isMember, chatMember.isMember) &&
        Objects.equals(this.status, chatMember.status) &&
        Objects.equals(this.untilDate, chatMember.untilDate) &&
        Objects.equals(this.user, chatMember.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canAddWebPagePreviews, canBeEdited, canChangeInfo, canDeleteMessages, canEditMessages, canInviteUsers, canPinMessages, canPostMessages, canPromoteMembers, canRestrictMembers, canSendMediaMessages, canSendMessages, canSendOtherMessages, canSendPolls, customTitle, isAnonymous, isMember, status, untilDate, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChatMember {\n");
    sb.append("    canAddWebPagePreviews: ").append(toIndentedString(canAddWebPagePreviews)).append("\n");
    sb.append("    canBeEdited: ").append(toIndentedString(canBeEdited)).append("\n");
    sb.append("    canChangeInfo: ").append(toIndentedString(canChangeInfo)).append("\n");
    sb.append("    canDeleteMessages: ").append(toIndentedString(canDeleteMessages)).append("\n");
    sb.append("    canEditMessages: ").append(toIndentedString(canEditMessages)).append("\n");
    sb.append("    canInviteUsers: ").append(toIndentedString(canInviteUsers)).append("\n");
    sb.append("    canPinMessages: ").append(toIndentedString(canPinMessages)).append("\n");
    sb.append("    canPostMessages: ").append(toIndentedString(canPostMessages)).append("\n");
    sb.append("    canPromoteMembers: ").append(toIndentedString(canPromoteMembers)).append("\n");
    sb.append("    canRestrictMembers: ").append(toIndentedString(canRestrictMembers)).append("\n");
    sb.append("    canSendMediaMessages: ").append(toIndentedString(canSendMediaMessages)).append("\n");
    sb.append("    canSendMessages: ").append(toIndentedString(canSendMessages)).append("\n");
    sb.append("    canSendOtherMessages: ").append(toIndentedString(canSendOtherMessages)).append("\n");
    sb.append("    canSendPolls: ").append(toIndentedString(canSendPolls)).append("\n");
    sb.append("    customTitle: ").append(toIndentedString(customTitle)).append("\n");
    sb.append("    isAnonymous: ").append(toIndentedString(isAnonymous)).append("\n");
    sb.append("    isMember: ").append(toIndentedString(isMember)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    untilDate: ").append(toIndentedString(untilDate)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_add_web_page_previews");
    openapiFields.add("can_be_edited");
    openapiFields.add("can_change_info");
    openapiFields.add("can_delete_messages");
    openapiFields.add("can_edit_messages");
    openapiFields.add("can_invite_users");
    openapiFields.add("can_pin_messages");
    openapiFields.add("can_post_messages");
    openapiFields.add("can_promote_members");
    openapiFields.add("can_restrict_members");
    openapiFields.add("can_send_media_messages");
    openapiFields.add("can_send_messages");
    openapiFields.add("can_send_other_messages");
    openapiFields.add("can_send_polls");
    openapiFields.add("custom_title");
    openapiFields.add("is_anonymous");
    openapiFields.add("is_member");
    openapiFields.add("status");
    openapiFields.add("until_date");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChatMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChatMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChatMember is not found in the empty JSON string", ChatMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChatMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChatMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChatMember.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("custom_title") != null && !jsonObj.get("custom_title").isJsonNull()) && !jsonObj.get("custom_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_title").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // validate the required field `user`
      User.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChatMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChatMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChatMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChatMember.class));

       return (TypeAdapter<T>) new TypeAdapter<ChatMember>() {
           @Override
           public void write(JsonWriter out, ChatMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChatMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChatMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChatMember
   * @throws IOException if the JSON string is invalid with respect to ChatMember
   */
  public static ChatMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChatMember.class);
  }

  /**
   * Convert an instance of ChatMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

