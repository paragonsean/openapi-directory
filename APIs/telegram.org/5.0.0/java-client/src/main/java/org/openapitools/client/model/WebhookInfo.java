/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the current status of a webhook.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookInfo {
  public static final String SERIALIZED_NAME_ALLOWED_UPDATES = "allowed_updates";
  @SerializedName(SERIALIZED_NAME_ALLOWED_UPDATES)
  private List<String> allowedUpdates = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_CUSTOM_CERTIFICATE = "has_custom_certificate";
  @SerializedName(SERIALIZED_NAME_HAS_CUSTOM_CERTIFICATE)
  private Boolean hasCustomCertificate;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LAST_ERROR_DATE = "last_error_date";
  @SerializedName(SERIALIZED_NAME_LAST_ERROR_DATE)
  private Integer lastErrorDate;

  public static final String SERIALIZED_NAME_LAST_ERROR_MESSAGE = "last_error_message";
  @SerializedName(SERIALIZED_NAME_LAST_ERROR_MESSAGE)
  private String lastErrorMessage;

  public static final String SERIALIZED_NAME_MAX_CONNECTIONS = "max_connections";
  @SerializedName(SERIALIZED_NAME_MAX_CONNECTIONS)
  private Integer maxConnections;

  public static final String SERIALIZED_NAME_PENDING_UPDATE_COUNT = "pending_update_count";
  @SerializedName(SERIALIZED_NAME_PENDING_UPDATE_COUNT)
  private Integer pendingUpdateCount;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public WebhookInfo() {
  }

  public WebhookInfo allowedUpdates(List<String> allowedUpdates) {
    this.allowedUpdates = allowedUpdates;
    return this;
  }

  public WebhookInfo addAllowedUpdatesItem(String allowedUpdatesItem) {
    if (this.allowedUpdates == null) {
      this.allowedUpdates = new ArrayList<>();
    }
    this.allowedUpdates.add(allowedUpdatesItem);
    return this;
  }

  /**
   * *Optional*. A list of update types the bot is subscribed to. Defaults to all update types
   * @return allowedUpdates
   */
  @javax.annotation.Nullable
  public List<String> getAllowedUpdates() {
    return allowedUpdates;
  }

  public void setAllowedUpdates(List<String> allowedUpdates) {
    this.allowedUpdates = allowedUpdates;
  }


  public WebhookInfo hasCustomCertificate(Boolean hasCustomCertificate) {
    this.hasCustomCertificate = hasCustomCertificate;
    return this;
  }

  /**
   * True, if a custom certificate was provided for webhook certificate checks
   * @return hasCustomCertificate
   */
  @javax.annotation.Nonnull
  public Boolean getHasCustomCertificate() {
    return hasCustomCertificate;
  }

  public void setHasCustomCertificate(Boolean hasCustomCertificate) {
    this.hasCustomCertificate = hasCustomCertificate;
  }


  public WebhookInfo ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * *Optional*. Currently used webhook IP address
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public WebhookInfo lastErrorDate(Integer lastErrorDate) {
    this.lastErrorDate = lastErrorDate;
    return this;
  }

  /**
   * *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook
   * @return lastErrorDate
   */
  @javax.annotation.Nullable
  public Integer getLastErrorDate() {
    return lastErrorDate;
  }

  public void setLastErrorDate(Integer lastErrorDate) {
    this.lastErrorDate = lastErrorDate;
  }


  public WebhookInfo lastErrorMessage(String lastErrorMessage) {
    this.lastErrorMessage = lastErrorMessage;
    return this;
  }

  /**
   * *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
   * @return lastErrorMessage
   */
  @javax.annotation.Nullable
  public String getLastErrorMessage() {
    return lastErrorMessage;
  }

  public void setLastErrorMessage(String lastErrorMessage) {
    this.lastErrorMessage = lastErrorMessage;
  }


  public WebhookInfo maxConnections(Integer maxConnections) {
    this.maxConnections = maxConnections;
    return this;
  }

  /**
   * *Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
   * @return maxConnections
   */
  @javax.annotation.Nullable
  public Integer getMaxConnections() {
    return maxConnections;
  }

  public void setMaxConnections(Integer maxConnections) {
    this.maxConnections = maxConnections;
  }


  public WebhookInfo pendingUpdateCount(Integer pendingUpdateCount) {
    this.pendingUpdateCount = pendingUpdateCount;
    return this;
  }

  /**
   * Number of updates awaiting delivery
   * @return pendingUpdateCount
   */
  @javax.annotation.Nonnull
  public Integer getPendingUpdateCount() {
    return pendingUpdateCount;
  }

  public void setPendingUpdateCount(Integer pendingUpdateCount) {
    this.pendingUpdateCount = pendingUpdateCount;
  }


  public WebhookInfo url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Webhook URL, may be empty if webhook is not set up
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookInfo webhookInfo = (WebhookInfo) o;
    return Objects.equals(this.allowedUpdates, webhookInfo.allowedUpdates) &&
        Objects.equals(this.hasCustomCertificate, webhookInfo.hasCustomCertificate) &&
        Objects.equals(this.ipAddress, webhookInfo.ipAddress) &&
        Objects.equals(this.lastErrorDate, webhookInfo.lastErrorDate) &&
        Objects.equals(this.lastErrorMessage, webhookInfo.lastErrorMessage) &&
        Objects.equals(this.maxConnections, webhookInfo.maxConnections) &&
        Objects.equals(this.pendingUpdateCount, webhookInfo.pendingUpdateCount) &&
        Objects.equals(this.url, webhookInfo.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedUpdates, hasCustomCertificate, ipAddress, lastErrorDate, lastErrorMessage, maxConnections, pendingUpdateCount, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookInfo {\n");
    sb.append("    allowedUpdates: ").append(toIndentedString(allowedUpdates)).append("\n");
    sb.append("    hasCustomCertificate: ").append(toIndentedString(hasCustomCertificate)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    lastErrorDate: ").append(toIndentedString(lastErrorDate)).append("\n");
    sb.append("    lastErrorMessage: ").append(toIndentedString(lastErrorMessage)).append("\n");
    sb.append("    maxConnections: ").append(toIndentedString(maxConnections)).append("\n");
    sb.append("    pendingUpdateCount: ").append(toIndentedString(pendingUpdateCount)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_updates");
    openapiFields.add("has_custom_certificate");
    openapiFields.add("ip_address");
    openapiFields.add("last_error_date");
    openapiFields.add("last_error_message");
    openapiFields.add("max_connections");
    openapiFields.add("pending_update_count");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("has_custom_certificate");
    openapiRequiredFields.add("pending_update_count");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookInfo is not found in the empty JSON string", WebhookInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_updates") != null && !jsonObj.get("allowed_updates").isJsonNull() && !jsonObj.get("allowed_updates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_updates` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_updates").toString()));
      }
      if ((jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonNull()) && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if ((jsonObj.get("last_error_message") != null && !jsonObj.get("last_error_message").isJsonNull()) && !jsonObj.get("last_error_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_error_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_error_message").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookInfo>() {
           @Override
           public void write(JsonWriter out, WebhookInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookInfo
   * @throws IOException if the JSON string is invalid with respect to WebhookInfo
   */
  public static WebhookInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookInfo.class);
  }

  /**
   * Convert an instance of WebhookInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

