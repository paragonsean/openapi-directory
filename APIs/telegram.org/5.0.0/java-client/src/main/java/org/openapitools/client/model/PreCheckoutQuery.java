/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrderInfo;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object contains information about an incoming pre-checkout query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PreCheckoutQuery {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private User from;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVOICE_PAYLOAD = "invoice_payload";
  @SerializedName(SERIALIZED_NAME_INVOICE_PAYLOAD)
  private String invoicePayload;

  public static final String SERIALIZED_NAME_ORDER_INFO = "order_info";
  @SerializedName(SERIALIZED_NAME_ORDER_INFO)
  private OrderInfo orderInfo;

  public static final String SERIALIZED_NAME_SHIPPING_OPTION_ID = "shipping_option_id";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTION_ID)
  private String shippingOptionId;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private Integer totalAmount;

  public PreCheckoutQuery() {
  }

  public PreCheckoutQuery currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PreCheckoutQuery from(User from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nonnull
  public User getFrom() {
    return from;
  }

  public void setFrom(User from) {
    this.from = from;
  }


  public PreCheckoutQuery id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique query identifier
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PreCheckoutQuery invoicePayload(String invoicePayload) {
    this.invoicePayload = invoicePayload;
    return this;
  }

  /**
   * Bot specified invoice payload
   * @return invoicePayload
   */
  @javax.annotation.Nonnull
  public String getInvoicePayload() {
    return invoicePayload;
  }

  public void setInvoicePayload(String invoicePayload) {
    this.invoicePayload = invoicePayload;
  }


  public PreCheckoutQuery orderInfo(OrderInfo orderInfo) {
    this.orderInfo = orderInfo;
    return this;
  }

  /**
   * Get orderInfo
   * @return orderInfo
   */
  @javax.annotation.Nullable
  public OrderInfo getOrderInfo() {
    return orderInfo;
  }

  public void setOrderInfo(OrderInfo orderInfo) {
    this.orderInfo = orderInfo;
  }


  public PreCheckoutQuery shippingOptionId(String shippingOptionId) {
    this.shippingOptionId = shippingOptionId;
    return this;
  }

  /**
   * *Optional*. Identifier of the shipping option chosen by the user
   * @return shippingOptionId
   */
  @javax.annotation.Nullable
  public String getShippingOptionId() {
    return shippingOptionId;
  }

  public void setShippingOptionId(String shippingOptionId) {
    this.shippingOptionId = shippingOptionId;
  }


  public PreCheckoutQuery totalAmount(Integer totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of &#x60;US$ 1.45&#x60; pass &#x60;amount &#x3D; 145&#x60;. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
   * @return totalAmount
   */
  @javax.annotation.Nonnull
  public Integer getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(Integer totalAmount) {
    this.totalAmount = totalAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PreCheckoutQuery preCheckoutQuery = (PreCheckoutQuery) o;
    return Objects.equals(this.currency, preCheckoutQuery.currency) &&
        Objects.equals(this.from, preCheckoutQuery.from) &&
        Objects.equals(this.id, preCheckoutQuery.id) &&
        Objects.equals(this.invoicePayload, preCheckoutQuery.invoicePayload) &&
        Objects.equals(this.orderInfo, preCheckoutQuery.orderInfo) &&
        Objects.equals(this.shippingOptionId, preCheckoutQuery.shippingOptionId) &&
        Objects.equals(this.totalAmount, preCheckoutQuery.totalAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, from, id, invoicePayload, orderInfo, shippingOptionId, totalAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PreCheckoutQuery {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoicePayload: ").append(toIndentedString(invoicePayload)).append("\n");
    sb.append("    orderInfo: ").append(toIndentedString(orderInfo)).append("\n");
    sb.append("    shippingOptionId: ").append(toIndentedString(shippingOptionId)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("from");
    openapiFields.add("id");
    openapiFields.add("invoice_payload");
    openapiFields.add("order_info");
    openapiFields.add("shipping_option_id");
    openapiFields.add("total_amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("invoice_payload");
    openapiRequiredFields.add("total_amount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PreCheckoutQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PreCheckoutQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PreCheckoutQuery is not found in the empty JSON string", PreCheckoutQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PreCheckoutQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PreCheckoutQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PreCheckoutQuery.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `from`
      User.validateJsonElement(jsonObj.get("from"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("invoice_payload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_payload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_payload").toString()));
      }
      // validate the optional field `order_info`
      if (jsonObj.get("order_info") != null && !jsonObj.get("order_info").isJsonNull()) {
        OrderInfo.validateJsonElement(jsonObj.get("order_info"));
      }
      if ((jsonObj.get("shipping_option_id") != null && !jsonObj.get("shipping_option_id").isJsonNull()) && !jsonObj.get("shipping_option_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_option_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_option_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PreCheckoutQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PreCheckoutQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PreCheckoutQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PreCheckoutQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<PreCheckoutQuery>() {
           @Override
           public void write(JsonWriter out, PreCheckoutQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PreCheckoutQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PreCheckoutQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PreCheckoutQuery
   * @throws IOException if the JSON string is invalid with respect to PreCheckoutQuery
   */
  public static PreCheckoutQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PreCheckoutQuery.class);
  }

  /**
   * Convert an instance of PreCheckoutQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

