/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EditMessageCaptionPostRequestChatId;
import org.openapitools.client.model.InlineKeyboardMarkup;
import org.openapitools.client.model.MessageEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EditMessageTextPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EditMessageTextPostRequest {
  public static final String SERIALIZED_NAME_CHAT_ID = "chat_id";
  @SerializedName(SERIALIZED_NAME_CHAT_ID)
  private EditMessageCaptionPostRequestChatId chatId;

  public static final String SERIALIZED_NAME_DISABLE_WEB_PAGE_PREVIEW = "disable_web_page_preview";
  @SerializedName(SERIALIZED_NAME_DISABLE_WEB_PAGE_PREVIEW)
  private Boolean disableWebPagePreview;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<MessageEntity> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_INLINE_MESSAGE_ID = "inline_message_id";
  @SerializedName(SERIALIZED_NAME_INLINE_MESSAGE_ID)
  private String inlineMessageId;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "message_id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private Integer messageId;

  public static final String SERIALIZED_NAME_PARSE_MODE = "parse_mode";
  @SerializedName(SERIALIZED_NAME_PARSE_MODE)
  private String parseMode;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private InlineKeyboardMarkup replyMarkup;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public EditMessageTextPostRequest() {
  }

  public EditMessageTextPostRequest chatId(EditMessageCaptionPostRequestChatId chatId) {
    this.chatId = chatId;
    return this;
  }

  /**
   * Get chatId
   * @return chatId
   */
  @javax.annotation.Nullable
  public EditMessageCaptionPostRequestChatId getChatId() {
    return chatId;
  }

  public void setChatId(EditMessageCaptionPostRequestChatId chatId) {
    this.chatId = chatId;
  }


  public EditMessageTextPostRequest disableWebPagePreview(Boolean disableWebPagePreview) {
    this.disableWebPagePreview = disableWebPagePreview;
    return this;
  }

  /**
   * Disables link previews for links in this message
   * @return disableWebPagePreview
   */
  @javax.annotation.Nullable
  public Boolean getDisableWebPagePreview() {
    return disableWebPagePreview;
  }

  public void setDisableWebPagePreview(Boolean disableWebPagePreview) {
    this.disableWebPagePreview = disableWebPagePreview;
  }


  public EditMessageTextPostRequest entities(List<MessageEntity> entities) {
    this.entities = entities;
    return this;
  }

  public EditMessageTextPostRequest addEntitiesItem(MessageEntity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * List of special entities that appear in message text, which can be specified instead of *parse\\_mode*
   * @return entities
   */
  @javax.annotation.Nullable
  public List<MessageEntity> getEntities() {
    return entities;
  }

  public void setEntities(List<MessageEntity> entities) {
    this.entities = entities;
  }


  public EditMessageTextPostRequest inlineMessageId(String inlineMessageId) {
    this.inlineMessageId = inlineMessageId;
    return this;
  }

  /**
   * Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message
   * @return inlineMessageId
   */
  @javax.annotation.Nullable
  public String getInlineMessageId() {
    return inlineMessageId;
  }

  public void setInlineMessageId(String inlineMessageId) {
    this.inlineMessageId = inlineMessageId;
  }


  public EditMessageTextPostRequest messageId(Integer messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit
   * @return messageId
   */
  @javax.annotation.Nullable
  public Integer getMessageId() {
    return messageId;
  }

  public void setMessageId(Integer messageId) {
    this.messageId = messageId;
  }


  public EditMessageTextPostRequest parseMode(String parseMode) {
    this.parseMode = parseMode;
    return this;
  }

  /**
   * Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
   * @return parseMode
   */
  @javax.annotation.Nullable
  public String getParseMode() {
    return parseMode;
  }

  public void setParseMode(String parseMode) {
    this.parseMode = parseMode;
  }


  public EditMessageTextPostRequest replyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public InlineKeyboardMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public EditMessageTextPostRequest text(String text) {
    this.text = text;
    return this;
  }

  /**
   * New text of the message, 1-4096 characters after entities parsing
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditMessageTextPostRequest editMessageTextPostRequest = (EditMessageTextPostRequest) o;
    return Objects.equals(this.chatId, editMessageTextPostRequest.chatId) &&
        Objects.equals(this.disableWebPagePreview, editMessageTextPostRequest.disableWebPagePreview) &&
        Objects.equals(this.entities, editMessageTextPostRequest.entities) &&
        Objects.equals(this.inlineMessageId, editMessageTextPostRequest.inlineMessageId) &&
        Objects.equals(this.messageId, editMessageTextPostRequest.messageId) &&
        Objects.equals(this.parseMode, editMessageTextPostRequest.parseMode) &&
        Objects.equals(this.replyMarkup, editMessageTextPostRequest.replyMarkup) &&
        Objects.equals(this.text, editMessageTextPostRequest.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chatId, disableWebPagePreview, entities, inlineMessageId, messageId, parseMode, replyMarkup, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditMessageTextPostRequest {\n");
    sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
    sb.append("    disableWebPagePreview: ").append(toIndentedString(disableWebPagePreview)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    inlineMessageId: ").append(toIndentedString(inlineMessageId)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    parseMode: ").append(toIndentedString(parseMode)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chat_id");
    openapiFields.add("disable_web_page_preview");
    openapiFields.add("entities");
    openapiFields.add("inline_message_id");
    openapiFields.add("message_id");
    openapiFields.add("parse_mode");
    openapiFields.add("reply_markup");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EditMessageTextPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EditMessageTextPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditMessageTextPostRequest is not found in the empty JSON string", EditMessageTextPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EditMessageTextPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditMessageTextPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EditMessageTextPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `chat_id`
      if (jsonObj.get("chat_id") != null && !jsonObj.get("chat_id").isJsonNull()) {
        EditMessageCaptionPostRequestChatId.validateJsonElement(jsonObj.get("chat_id"));
      }
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            MessageEntity.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      if ((jsonObj.get("inline_message_id") != null && !jsonObj.get("inline_message_id").isJsonNull()) && !jsonObj.get("inline_message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inline_message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inline_message_id").toString()));
      }
      if ((jsonObj.get("parse_mode") != null && !jsonObj.get("parse_mode").isJsonNull()) && !jsonObj.get("parse_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parse_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parse_mode").toString()));
      }
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        InlineKeyboardMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditMessageTextPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditMessageTextPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditMessageTextPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditMessageTextPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EditMessageTextPostRequest>() {
           @Override
           public void write(JsonWriter out, EditMessageTextPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EditMessageTextPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EditMessageTextPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EditMessageTextPostRequest
   * @throws IOException if the JSON string is invalid with respect to EditMessageTextPostRequest
   */
  public static EditMessageTextPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditMessageTextPostRequest.class);
  }

  /**
   * Convert an instance of EditMessageTextPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

