/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputLocationMessageContent {
  public static final String SERIALIZED_NAME_HEADING = "heading";
  @SerializedName(SERIALIZED_NAME_HEADING)
  private Integer heading;

  public static final String SERIALIZED_NAME_HORIZONTAL_ACCURACY = "horizontal_accuracy";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_ACCURACY)
  private BigDecimal horizontalAccuracy;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LIVE_PERIOD = "live_period";
  @SerializedName(SERIALIZED_NAME_LIVE_PERIOD)
  private Integer livePeriod;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_PROXIMITY_ALERT_RADIUS = "proximity_alert_radius";
  @SerializedName(SERIALIZED_NAME_PROXIMITY_ALERT_RADIUS)
  private Integer proximityAlertRadius;

  public InputLocationMessageContent() {
  }

  public InputLocationMessageContent heading(Integer heading) {
    this.heading = heading;
    return this;
  }

  /**
   * *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
   * @return heading
   */
  @javax.annotation.Nullable
  public Integer getHeading() {
    return heading;
  }

  public void setHeading(Integer heading) {
    this.heading = heading;
  }


  public InputLocationMessageContent horizontalAccuracy(BigDecimal horizontalAccuracy) {
    this.horizontalAccuracy = horizontalAccuracy;
    return this;
  }

  /**
   * *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
   * @return horizontalAccuracy
   */
  @javax.annotation.Nullable
  public BigDecimal getHorizontalAccuracy() {
    return horizontalAccuracy;
  }

  public void setHorizontalAccuracy(BigDecimal horizontalAccuracy) {
    this.horizontalAccuracy = horizontalAccuracy;
  }


  public InputLocationMessageContent latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Latitude of the location in degrees
   * @return latitude
   */
  @javax.annotation.Nonnull
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public InputLocationMessageContent livePeriod(Integer livePeriod) {
    this.livePeriod = livePeriod;
    return this;
  }

  /**
   * *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
   * @return livePeriod
   */
  @javax.annotation.Nullable
  public Integer getLivePeriod() {
    return livePeriod;
  }

  public void setLivePeriod(Integer livePeriod) {
    this.livePeriod = livePeriod;
  }


  public InputLocationMessageContent longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Longitude of the location in degrees
   * @return longitude
   */
  @javax.annotation.Nonnull
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public InputLocationMessageContent proximityAlertRadius(Integer proximityAlertRadius) {
    this.proximityAlertRadius = proximityAlertRadius;
    return this;
  }

  /**
   * *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
   * @return proximityAlertRadius
   */
  @javax.annotation.Nullable
  public Integer getProximityAlertRadius() {
    return proximityAlertRadius;
  }

  public void setProximityAlertRadius(Integer proximityAlertRadius) {
    this.proximityAlertRadius = proximityAlertRadius;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputLocationMessageContent inputLocationMessageContent = (InputLocationMessageContent) o;
    return Objects.equals(this.heading, inputLocationMessageContent.heading) &&
        Objects.equals(this.horizontalAccuracy, inputLocationMessageContent.horizontalAccuracy) &&
        Objects.equals(this.latitude, inputLocationMessageContent.latitude) &&
        Objects.equals(this.livePeriod, inputLocationMessageContent.livePeriod) &&
        Objects.equals(this.longitude, inputLocationMessageContent.longitude) &&
        Objects.equals(this.proximityAlertRadius, inputLocationMessageContent.proximityAlertRadius);
  }

  @Override
  public int hashCode() {
    return Objects.hash(heading, horizontalAccuracy, latitude, livePeriod, longitude, proximityAlertRadius);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputLocationMessageContent {\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    horizontalAccuracy: ").append(toIndentedString(horizontalAccuracy)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    livePeriod: ").append(toIndentedString(livePeriod)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    proximityAlertRadius: ").append(toIndentedString(proximityAlertRadius)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("heading");
    openapiFields.add("horizontal_accuracy");
    openapiFields.add("latitude");
    openapiFields.add("live_period");
    openapiFields.add("longitude");
    openapiFields.add("proximity_alert_radius");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputLocationMessageContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputLocationMessageContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputLocationMessageContent is not found in the empty JSON string", InputLocationMessageContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputLocationMessageContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputLocationMessageContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputLocationMessageContent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputLocationMessageContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputLocationMessageContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputLocationMessageContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputLocationMessageContent.class));

       return (TypeAdapter<T>) new TypeAdapter<InputLocationMessageContent>() {
           @Override
           public void write(JsonWriter out, InputLocationMessageContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputLocationMessageContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputLocationMessageContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputLocationMessageContent
   * @throws IOException if the JSON string is invalid with respect to InputLocationMessageContent
   */
  public static InputLocationMessageContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputLocationMessageContent.class);
  }

  /**
   * Convert an instance of InputLocationMessageContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

