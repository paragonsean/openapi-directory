/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InlineKeyboardMarkup;
import org.openapitools.client.model.InputMessageContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the contact.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InlineQueryResultContact {
  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT_MESSAGE_CONTENT = "input_message_content";
  @SerializedName(SERIALIZED_NAME_INPUT_MESSAGE_CONTENT)
  private InputMessageContent inputMessageContent;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private InlineKeyboardMarkup replyMarkup;

  public static final String SERIALIZED_NAME_THUMB_HEIGHT = "thumb_height";
  @SerializedName(SERIALIZED_NAME_THUMB_HEIGHT)
  private Integer thumbHeight;

  public static final String SERIALIZED_NAME_THUMB_URL = "thumb_url";
  @SerializedName(SERIALIZED_NAME_THUMB_URL)
  private String thumbUrl;

  public static final String SERIALIZED_NAME_THUMB_WIDTH = "thumb_width";
  @SerializedName(SERIALIZED_NAME_THUMB_WIDTH)
  private Integer thumbWidth;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VCARD = "vcard";
  @SerializedName(SERIALIZED_NAME_VCARD)
  private String vcard;

  public InlineQueryResultContact() {
  }

  public InlineQueryResultContact firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Contact&#39;s first name
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public InlineQueryResultContact id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for this result, 1-64 Bytes
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InlineQueryResultContact inputMessageContent(InputMessageContent inputMessageContent) {
    this.inputMessageContent = inputMessageContent;
    return this;
  }

  /**
   * Get inputMessageContent
   * @return inputMessageContent
   */
  @javax.annotation.Nullable
  public InputMessageContent getInputMessageContent() {
    return inputMessageContent;
  }

  public void setInputMessageContent(InputMessageContent inputMessageContent) {
    this.inputMessageContent = inputMessageContent;
  }


  public InlineQueryResultContact lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * *Optional*. Contact&#39;s last name
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public InlineQueryResultContact phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Contact&#39;s phone number
   * @return phoneNumber
   */
  @javax.annotation.Nonnull
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public InlineQueryResultContact replyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public InlineKeyboardMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public InlineQueryResultContact thumbHeight(Integer thumbHeight) {
    this.thumbHeight = thumbHeight;
    return this;
  }

  /**
   * *Optional*. Thumbnail height
   * @return thumbHeight
   */
  @javax.annotation.Nullable
  public Integer getThumbHeight() {
    return thumbHeight;
  }

  public void setThumbHeight(Integer thumbHeight) {
    this.thumbHeight = thumbHeight;
  }


  public InlineQueryResultContact thumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
    return this;
  }

  /**
   * *Optional*. Url of the thumbnail for the result
   * @return thumbUrl
   */
  @javax.annotation.Nullable
  public String getThumbUrl() {
    return thumbUrl;
  }

  public void setThumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
  }


  public InlineQueryResultContact thumbWidth(Integer thumbWidth) {
    this.thumbWidth = thumbWidth;
    return this;
  }

  /**
   * *Optional*. Thumbnail width
   * @return thumbWidth
   */
  @javax.annotation.Nullable
  public Integer getThumbWidth() {
    return thumbWidth;
  }

  public void setThumbWidth(Integer thumbWidth) {
    this.thumbWidth = thumbWidth;
  }


  public InlineQueryResultContact type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the result, must be *contact*
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public InlineQueryResultContact vcard(String vcard) {
    this.vcard = vcard;
    return this;
  }

  /**
   * *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
   * @return vcard
   */
  @javax.annotation.Nullable
  public String getVcard() {
    return vcard;
  }

  public void setVcard(String vcard) {
    this.vcard = vcard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineQueryResultContact inlineQueryResultContact = (InlineQueryResultContact) o;
    return Objects.equals(this.firstName, inlineQueryResultContact.firstName) &&
        Objects.equals(this.id, inlineQueryResultContact.id) &&
        Objects.equals(this.inputMessageContent, inlineQueryResultContact.inputMessageContent) &&
        Objects.equals(this.lastName, inlineQueryResultContact.lastName) &&
        Objects.equals(this.phoneNumber, inlineQueryResultContact.phoneNumber) &&
        Objects.equals(this.replyMarkup, inlineQueryResultContact.replyMarkup) &&
        Objects.equals(this.thumbHeight, inlineQueryResultContact.thumbHeight) &&
        Objects.equals(this.thumbUrl, inlineQueryResultContact.thumbUrl) &&
        Objects.equals(this.thumbWidth, inlineQueryResultContact.thumbWidth) &&
        Objects.equals(this.type, inlineQueryResultContact.type) &&
        Objects.equals(this.vcard, inlineQueryResultContact.vcard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, id, inputMessageContent, lastName, phoneNumber, replyMarkup, thumbHeight, thumbUrl, thumbWidth, type, vcard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineQueryResultContact {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputMessageContent: ").append(toIndentedString(inputMessageContent)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    thumbHeight: ").append(toIndentedString(thumbHeight)).append("\n");
    sb.append("    thumbUrl: ").append(toIndentedString(thumbUrl)).append("\n");
    sb.append("    thumbWidth: ").append(toIndentedString(thumbWidth)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vcard: ").append(toIndentedString(vcard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("first_name");
    openapiFields.add("id");
    openapiFields.add("input_message_content");
    openapiFields.add("last_name");
    openapiFields.add("phone_number");
    openapiFields.add("reply_markup");
    openapiFields.add("thumb_height");
    openapiFields.add("thumb_url");
    openapiFields.add("thumb_width");
    openapiFields.add("type");
    openapiFields.add("vcard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("first_name");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("phone_number");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InlineQueryResultContact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InlineQueryResultContact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineQueryResultContact is not found in the empty JSON string", InlineQueryResultContact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InlineQueryResultContact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineQueryResultContact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InlineQueryResultContact.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `input_message_content`
      if (jsonObj.get("input_message_content") != null && !jsonObj.get("input_message_content").isJsonNull()) {
        InputMessageContent.validateJsonElement(jsonObj.get("input_message_content"));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if (!jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        InlineKeyboardMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
      if ((jsonObj.get("thumb_url") != null && !jsonObj.get("thumb_url").isJsonNull()) && !jsonObj.get("thumb_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumb_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumb_url").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("vcard") != null && !jsonObj.get("vcard").isJsonNull()) && !jsonObj.get("vcard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcard").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineQueryResultContact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineQueryResultContact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineQueryResultContact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultContact.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineQueryResultContact>() {
           @Override
           public void write(JsonWriter out, InlineQueryResultContact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineQueryResultContact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InlineQueryResultContact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InlineQueryResultContact
   * @throws IOException if the JSON string is invalid with respect to InlineQueryResultContact
   */
  public static InlineQueryResultContact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineQueryResultContact.class);
  }

  /**
   * Convert an instance of InlineQueryResultContact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

