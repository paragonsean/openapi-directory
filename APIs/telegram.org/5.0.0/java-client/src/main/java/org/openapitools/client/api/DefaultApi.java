/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddStickerToSetPost200Response;
import org.openapitools.client.model.AnswerCallbackQueryPostRequest;
import org.openapitools.client.model.AnswerInlineQueryPostRequest;
import org.openapitools.client.model.AnswerPreCheckoutQueryPostRequest;
import org.openapitools.client.model.AnswerShippingQueryPostRequest;
import org.openapitools.client.model.CopyMessagePost200Response;
import org.openapitools.client.model.CopyMessagePostRequest;
import org.openapitools.client.model.CopyMessagePostRequestChatId;
import org.openapitools.client.model.CopyMessagePostRequestReplyMarkup;
import org.openapitools.client.model.DeleteChatPhotoPostRequest;
import org.openapitools.client.model.DeleteChatStickerSetPostRequest;
import org.openapitools.client.model.DeleteMessagePostRequest;
import org.openapitools.client.model.DeleteStickerFromSetPostRequest;
import org.openapitools.client.model.DeleteWebhookPostRequest;
import org.openapitools.client.model.EditMessageCaptionPost200Response;
import org.openapitools.client.model.EditMessageCaptionPostRequest;
import org.openapitools.client.model.EditMessageCaptionPostRequestChatId;
import org.openapitools.client.model.EditMessageLiveLocationPostRequest;
import org.openapitools.client.model.EditMessageReplyMarkupPostRequest;
import org.openapitools.client.model.EditMessageTextPostRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExportChatInviteLinkPost200Response;
import org.openapitools.client.model.ForwardMessagePost200Response;
import org.openapitools.client.model.ForwardMessagePostRequest;
import org.openapitools.client.model.GetChatAdministratorsPost200Response;
import org.openapitools.client.model.GetChatMemberPost200Response;
import org.openapitools.client.model.GetChatMemberPostRequest;
import org.openapitools.client.model.GetChatMembersCountPost200Response;
import org.openapitools.client.model.GetChatPost200Response;
import org.openapitools.client.model.GetChatPostRequest;
import org.openapitools.client.model.GetFilePost200Response;
import org.openapitools.client.model.GetFilePostRequest;
import org.openapitools.client.model.GetGameHighScoresPost200Response;
import org.openapitools.client.model.GetGameHighScoresPostRequest;
import org.openapitools.client.model.GetMePost200Response;
import org.openapitools.client.model.GetMyCommandsPost200Response;
import org.openapitools.client.model.GetStickerSetPost200Response;
import org.openapitools.client.model.GetStickerSetPostRequest;
import org.openapitools.client.model.GetUpdatesPost200Response;
import org.openapitools.client.model.GetUpdatesPostRequest;
import org.openapitools.client.model.GetUserProfilePhotosPost200Response;
import org.openapitools.client.model.GetUserProfilePhotosPostRequest;
import org.openapitools.client.model.GetWebhookInfoPost200Response;
import org.openapitools.client.model.InlineKeyboardMarkup;
import org.openapitools.client.model.InputMedia;
import org.openapitools.client.model.KickChatMemberPostRequest;
import org.openapitools.client.model.MaskPosition;
import org.openapitools.client.model.MessageEntity;
import org.openapitools.client.model.PinChatMessagePostRequest;
import org.openapitools.client.model.PromoteChatMemberPostRequest;
import org.openapitools.client.model.RestrictChatMemberPostRequest;
import org.openapitools.client.model.SendChatActionPostRequest;
import org.openapitools.client.model.SendContactPostRequest;
import org.openapitools.client.model.SendDicePostRequest;
import org.openapitools.client.model.SendGamePostRequest;
import org.openapitools.client.model.SendInvoicePostRequest;
import org.openapitools.client.model.SendLocationPostRequest;
import org.openapitools.client.model.SendMediaGroupPost200Response;
import org.openapitools.client.model.SendMediaGroupPostRequestMediaInner;
import org.openapitools.client.model.SendMessagePostRequest;
import org.openapitools.client.model.SendPollPostRequest;
import org.openapitools.client.model.SendVenuePostRequest;
import org.openapitools.client.model.SetChatAdministratorCustomTitlePostRequest;
import org.openapitools.client.model.SetChatDescriptionPostRequest;
import org.openapitools.client.model.SetChatPermissionsPostRequest;
import org.openapitools.client.model.SetChatStickerSetPostRequest;
import org.openapitools.client.model.SetChatTitlePostRequest;
import org.openapitools.client.model.SetGameScorePostRequest;
import org.openapitools.client.model.SetMyCommandsPostRequest;
import org.openapitools.client.model.SetPassportDataErrorsPostRequest;
import org.openapitools.client.model.SetStickerPositionInSetPostRequest;
import org.openapitools.client.model.StopMessageLiveLocationPostRequest;
import org.openapitools.client.model.StopPollPost200Response;
import org.openapitools.client.model.StopPollPostRequest;
import org.openapitools.client.model.UnbanChatMemberPostRequest;
import org.openapitools.client.model.UnpinChatMessagePostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addStickerToSetPost
     * @param emojis One or more emoji corresponding to the sticker (required)
     * @param name Sticker set name (required)
     * @param userId User identifier of sticker set owner (required)
     * @param maskPosition  (optional)
     * @param pngSticker  (optional)
     * @param tgsSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#addstickertoset"> Documentation</a>
     */
    public okhttp3.Call addStickerToSetPostCall(String emojis, String name, Integer userId, MaskPosition maskPosition, String pngSticker, Object tgsSticker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addStickerToSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emojis != null) {
            localVarFormParams.put("emojis", emojis);
        }

        if (maskPosition != null) {
            localVarFormParams.put("mask_position", maskPosition);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (pngSticker != null) {
            localVarFormParams.put("png_sticker", pngSticker);
        }

        if (tgsSticker != null) {
            localVarFormParams.put("tgs_sticker", tgsSticker);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addStickerToSetPostValidateBeforeCall(String emojis, String name, Integer userId, MaskPosition maskPosition, String pngSticker, Object tgsSticker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emojis' is set
        if (emojis == null) {
            throw new ApiException("Missing the required parameter 'emojis' when calling addStickerToSetPost(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addStickerToSetPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addStickerToSetPost(Async)");
        }

        return addStickerToSetPostCall(emojis, name, userId, maskPosition, pngSticker, tgsSticker, _callback);

    }

    /**
     * 
     * Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
     * @param emojis One or more emoji corresponding to the sticker (required)
     * @param name Sticker set name (required)
     * @param userId User identifier of sticker set owner (required)
     * @param maskPosition  (optional)
     * @param pngSticker  (optional)
     * @param tgsSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#addstickertoset"> Documentation</a>
     */
    public AddStickerToSetPost200Response addStickerToSetPost(String emojis, String name, Integer userId, MaskPosition maskPosition, String pngSticker, Object tgsSticker) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = addStickerToSetPostWithHttpInfo(emojis, name, userId, maskPosition, pngSticker, tgsSticker);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
     * @param emojis One or more emoji corresponding to the sticker (required)
     * @param name Sticker set name (required)
     * @param userId User identifier of sticker set owner (required)
     * @param maskPosition  (optional)
     * @param pngSticker  (optional)
     * @param tgsSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#addstickertoset"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> addStickerToSetPostWithHttpInfo(String emojis, String name, Integer userId, MaskPosition maskPosition, String pngSticker, Object tgsSticker) throws ApiException {
        okhttp3.Call localVarCall = addStickerToSetPostValidateBeforeCall(emojis, name, userId, maskPosition, pngSticker, tgsSticker, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
     * @param emojis One or more emoji corresponding to the sticker (required)
     * @param name Sticker set name (required)
     * @param userId User identifier of sticker set owner (required)
     * @param maskPosition  (optional)
     * @param pngSticker  (optional)
     * @param tgsSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#addstickertoset"> Documentation</a>
     */
    public okhttp3.Call addStickerToSetPostAsync(String emojis, String name, Integer userId, MaskPosition maskPosition, String pngSticker, Object tgsSticker, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addStickerToSetPostValidateBeforeCall(emojis, name, userId, maskPosition, pngSticker, tgsSticker, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for answerCallbackQueryPost
     * @param answerCallbackQueryPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answercallbackquery"> Documentation</a>
     */
    public okhttp3.Call answerCallbackQueryPostCall(AnswerCallbackQueryPostRequest answerCallbackQueryPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = answerCallbackQueryPostRequest;

        // create path and map variables
        String localVarPath = "/answerCallbackQuery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call answerCallbackQueryPostValidateBeforeCall(AnswerCallbackQueryPostRequest answerCallbackQueryPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'answerCallbackQueryPostRequest' is set
        if (answerCallbackQueryPostRequest == null) {
            throw new ApiException("Missing the required parameter 'answerCallbackQueryPostRequest' when calling answerCallbackQueryPost(Async)");
        }

        return answerCallbackQueryPostCall(answerCallbackQueryPostRequest, _callback);

    }

    /**
     * 
     * Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.  Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like &#x60;t.me/your_bot?start&#x3D;XXXX&#x60; that open your bot with a parameter.
     * @param answerCallbackQueryPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answercallbackquery"> Documentation</a>
     */
    public AddStickerToSetPost200Response answerCallbackQueryPost(AnswerCallbackQueryPostRequest answerCallbackQueryPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = answerCallbackQueryPostWithHttpInfo(answerCallbackQueryPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.  Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like &#x60;t.me/your_bot?start&#x3D;XXXX&#x60; that open your bot with a parameter.
     * @param answerCallbackQueryPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answercallbackquery"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> answerCallbackQueryPostWithHttpInfo(AnswerCallbackQueryPostRequest answerCallbackQueryPostRequest) throws ApiException {
        okhttp3.Call localVarCall = answerCallbackQueryPostValidateBeforeCall(answerCallbackQueryPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.  Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like &#x60;t.me/your_bot?start&#x3D;XXXX&#x60; that open your bot with a parameter.
     * @param answerCallbackQueryPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answercallbackquery"> Documentation</a>
     */
    public okhttp3.Call answerCallbackQueryPostAsync(AnswerCallbackQueryPostRequest answerCallbackQueryPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = answerCallbackQueryPostValidateBeforeCall(answerCallbackQueryPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for answerInlineQueryPost
     * @param answerInlineQueryPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answerinlinequery"> Documentation</a>
     */
    public okhttp3.Call answerInlineQueryPostCall(AnswerInlineQueryPostRequest answerInlineQueryPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = answerInlineQueryPostRequest;

        // create path and map variables
        String localVarPath = "/answerInlineQuery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call answerInlineQueryPostValidateBeforeCall(AnswerInlineQueryPostRequest answerInlineQueryPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'answerInlineQueryPostRequest' is set
        if (answerInlineQueryPostRequest == null) {
            throw new ApiException("Missing the required parameter 'answerInlineQueryPostRequest' when calling answerInlineQueryPost(Async)");
        }

        return answerInlineQueryPostCall(answerInlineQueryPostRequest, _callback);

    }

    /**
     * 
     * Use this method to send answers to an inline query. On success, *True* is returned.   No more than **50** results per query are allowed.
     * @param answerInlineQueryPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answerinlinequery"> Documentation</a>
     */
    public AddStickerToSetPost200Response answerInlineQueryPost(AnswerInlineQueryPostRequest answerInlineQueryPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = answerInlineQueryPostWithHttpInfo(answerInlineQueryPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send answers to an inline query. On success, *True* is returned.   No more than **50** results per query are allowed.
     * @param answerInlineQueryPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answerinlinequery"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> answerInlineQueryPostWithHttpInfo(AnswerInlineQueryPostRequest answerInlineQueryPostRequest) throws ApiException {
        okhttp3.Call localVarCall = answerInlineQueryPostValidateBeforeCall(answerInlineQueryPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send answers to an inline query. On success, *True* is returned.   No more than **50** results per query are allowed.
     * @param answerInlineQueryPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answerinlinequery"> Documentation</a>
     */
    public okhttp3.Call answerInlineQueryPostAsync(AnswerInlineQueryPostRequest answerInlineQueryPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = answerInlineQueryPostValidateBeforeCall(answerInlineQueryPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for answerPreCheckoutQueryPost
     * @param answerPreCheckoutQueryPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answerprecheckoutquery"> Documentation</a>
     */
    public okhttp3.Call answerPreCheckoutQueryPostCall(AnswerPreCheckoutQueryPostRequest answerPreCheckoutQueryPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = answerPreCheckoutQueryPostRequest;

        // create path and map variables
        String localVarPath = "/answerPreCheckoutQuery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call answerPreCheckoutQueryPostValidateBeforeCall(AnswerPreCheckoutQueryPostRequest answerPreCheckoutQueryPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'answerPreCheckoutQueryPostRequest' is set
        if (answerPreCheckoutQueryPostRequest == null) {
            throw new ApiException("Missing the required parameter 'answerPreCheckoutQueryPostRequest' when calling answerPreCheckoutQueryPost(Async)");
        }

        return answerPreCheckoutQueryPostCall(answerPreCheckoutQueryPostRequest, _callback);

    }

    /**
     * 
     * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\\_checkout\\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
     * @param answerPreCheckoutQueryPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answerprecheckoutquery"> Documentation</a>
     */
    public AddStickerToSetPost200Response answerPreCheckoutQueryPost(AnswerPreCheckoutQueryPostRequest answerPreCheckoutQueryPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = answerPreCheckoutQueryPostWithHttpInfo(answerPreCheckoutQueryPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\\_checkout\\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
     * @param answerPreCheckoutQueryPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answerprecheckoutquery"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> answerPreCheckoutQueryPostWithHttpInfo(AnswerPreCheckoutQueryPostRequest answerPreCheckoutQueryPostRequest) throws ApiException {
        okhttp3.Call localVarCall = answerPreCheckoutQueryPostValidateBeforeCall(answerPreCheckoutQueryPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\\_checkout\\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
     * @param answerPreCheckoutQueryPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answerprecheckoutquery"> Documentation</a>
     */
    public okhttp3.Call answerPreCheckoutQueryPostAsync(AnswerPreCheckoutQueryPostRequest answerPreCheckoutQueryPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = answerPreCheckoutQueryPostValidateBeforeCall(answerPreCheckoutQueryPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for answerShippingQueryPost
     * @param answerShippingQueryPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answershippingquery"> Documentation</a>
     */
    public okhttp3.Call answerShippingQueryPostCall(AnswerShippingQueryPostRequest answerShippingQueryPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = answerShippingQueryPostRequest;

        // create path and map variables
        String localVarPath = "/answerShippingQuery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call answerShippingQueryPostValidateBeforeCall(AnswerShippingQueryPostRequest answerShippingQueryPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'answerShippingQueryPostRequest' is set
        if (answerShippingQueryPostRequest == null) {
            throw new ApiException("Missing the required parameter 'answerShippingQueryPostRequest' when calling answerShippingQueryPost(Async)");
        }

        return answerShippingQueryPostCall(answerShippingQueryPostRequest, _callback);

    }

    /**
     * 
     * If you sent an invoice requesting a shipping address and the parameter *is\\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
     * @param answerShippingQueryPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answershippingquery"> Documentation</a>
     */
    public AddStickerToSetPost200Response answerShippingQueryPost(AnswerShippingQueryPostRequest answerShippingQueryPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = answerShippingQueryPostWithHttpInfo(answerShippingQueryPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * If you sent an invoice requesting a shipping address and the parameter *is\\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
     * @param answerShippingQueryPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answershippingquery"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> answerShippingQueryPostWithHttpInfo(AnswerShippingQueryPostRequest answerShippingQueryPostRequest) throws ApiException {
        okhttp3.Call localVarCall = answerShippingQueryPostValidateBeforeCall(answerShippingQueryPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * If you sent an invoice requesting a shipping address and the parameter *is\\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
     * @param answerShippingQueryPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#answershippingquery"> Documentation</a>
     */
    public okhttp3.Call answerShippingQueryPostAsync(AnswerShippingQueryPostRequest answerShippingQueryPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = answerShippingQueryPostValidateBeforeCall(answerShippingQueryPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for closePost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#close"> Documentation</a>
     */
    public okhttp3.Call closePostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/close";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closePostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return closePostCall(_callback);

    }

    /**
     * 
     * Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn&#39;t launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#close"> Documentation</a>
     */
    public AddStickerToSetPost200Response closePost() throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = closePostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn&#39;t launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#close"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> closePostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = closePostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn&#39;t launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#close"> Documentation</a>
     */
    public okhttp3.Call closePostAsync(final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = closePostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyMessagePost
     * @param copyMessagePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#copymessage"> Documentation</a>
     */
    public okhttp3.Call copyMessagePostCall(CopyMessagePostRequest copyMessagePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyMessagePostRequest;

        // create path and map variables
        String localVarPath = "/copyMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyMessagePostValidateBeforeCall(CopyMessagePostRequest copyMessagePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'copyMessagePostRequest' is set
        if (copyMessagePostRequest == null) {
            throw new ApiException("Missing the required parameter 'copyMessagePostRequest' when calling copyMessagePost(Async)");
        }

        return copyMessagePostCall(copyMessagePostRequest, _callback);

    }

    /**
     * 
     * Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn&#39;t have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
     * @param copyMessagePostRequest  (required)
     * @return CopyMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#copymessage"> Documentation</a>
     */
    public CopyMessagePost200Response copyMessagePost(CopyMessagePostRequest copyMessagePostRequest) throws ApiException {
        ApiResponse<CopyMessagePost200Response> localVarResp = copyMessagePostWithHttpInfo(copyMessagePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn&#39;t have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
     * @param copyMessagePostRequest  (required)
     * @return ApiResponse&lt;CopyMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#copymessage"> Documentation</a>
     */
    public ApiResponse<CopyMessagePost200Response> copyMessagePostWithHttpInfo(CopyMessagePostRequest copyMessagePostRequest) throws ApiException {
        okhttp3.Call localVarCall = copyMessagePostValidateBeforeCall(copyMessagePostRequest, null);
        Type localVarReturnType = new TypeToken<CopyMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn&#39;t have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
     * @param copyMessagePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#copymessage"> Documentation</a>
     */
    public okhttp3.Call copyMessagePostAsync(CopyMessagePostRequest copyMessagePostRequest, final ApiCallback<CopyMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyMessagePostValidateBeforeCall(copyMessagePostRequest, _callback);
        Type localVarReturnType = new TypeToken<CopyMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNewStickerSetPost
     * @param emojis One or more emoji corresponding to the sticker (required)
     * @param name Short name of sticker set, to be used in &#x60;t.me/addstickers/&#x60; URLs (e.g., *animals*). Can contain only english letters, digits and underscores. Must begin with a letter, can&#39;t contain consecutive underscores and must end in *“\\\\_by\\\\_&lt;bot username&gt;”*. *&lt;bot\\\\_username&gt;* is case insensitive. 1-64 characters. (required)
     * @param title Sticker set title, 1-64 characters (required)
     * @param userId User identifier of created sticker set owner (required)
     * @param containsMasks Pass *True*, if a set of mask stickers should be created (optional)
     * @param maskPosition  (optional)
     * @param pngSticker  (optional)
     * @param tgsSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#createnewstickerset"> Documentation</a>
     */
    public okhttp3.Call createNewStickerSetPostCall(String emojis, String name, String title, Integer userId, Boolean containsMasks, MaskPosition maskPosition, String pngSticker, Object tgsSticker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createNewStickerSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containsMasks != null) {
            localVarFormParams.put("contains_masks", containsMasks);
        }

        if (emojis != null) {
            localVarFormParams.put("emojis", emojis);
        }

        if (maskPosition != null) {
            localVarFormParams.put("mask_position", maskPosition);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (pngSticker != null) {
            localVarFormParams.put("png_sticker", pngSticker);
        }

        if (tgsSticker != null) {
            localVarFormParams.put("tgs_sticker", tgsSticker);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewStickerSetPostValidateBeforeCall(String emojis, String name, String title, Integer userId, Boolean containsMasks, MaskPosition maskPosition, String pngSticker, Object tgsSticker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emojis' is set
        if (emojis == null) {
            throw new ApiException("Missing the required parameter 'emojis' when calling createNewStickerSetPost(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createNewStickerSetPost(Async)");
        }

        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling createNewStickerSetPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createNewStickerSetPost(Async)");
        }

        return createNewStickerSetPostCall(emojis, name, title, userId, containsMasks, maskPosition, pngSticker, tgsSticker, _callback);

    }

    /**
     * 
     * Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Returns *True* on success.
     * @param emojis One or more emoji corresponding to the sticker (required)
     * @param name Short name of sticker set, to be used in &#x60;t.me/addstickers/&#x60; URLs (e.g., *animals*). Can contain only english letters, digits and underscores. Must begin with a letter, can&#39;t contain consecutive underscores and must end in *“\\\\_by\\\\_&lt;bot username&gt;”*. *&lt;bot\\\\_username&gt;* is case insensitive. 1-64 characters. (required)
     * @param title Sticker set title, 1-64 characters (required)
     * @param userId User identifier of created sticker set owner (required)
     * @param containsMasks Pass *True*, if a set of mask stickers should be created (optional)
     * @param maskPosition  (optional)
     * @param pngSticker  (optional)
     * @param tgsSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#createnewstickerset"> Documentation</a>
     */
    public AddStickerToSetPost200Response createNewStickerSetPost(String emojis, String name, String title, Integer userId, Boolean containsMasks, MaskPosition maskPosition, String pngSticker, Object tgsSticker) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = createNewStickerSetPostWithHttpInfo(emojis, name, title, userId, containsMasks, maskPosition, pngSticker, tgsSticker);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Returns *True* on success.
     * @param emojis One or more emoji corresponding to the sticker (required)
     * @param name Short name of sticker set, to be used in &#x60;t.me/addstickers/&#x60; URLs (e.g., *animals*). Can contain only english letters, digits and underscores. Must begin with a letter, can&#39;t contain consecutive underscores and must end in *“\\\\_by\\\\_&lt;bot username&gt;”*. *&lt;bot\\\\_username&gt;* is case insensitive. 1-64 characters. (required)
     * @param title Sticker set title, 1-64 characters (required)
     * @param userId User identifier of created sticker set owner (required)
     * @param containsMasks Pass *True*, if a set of mask stickers should be created (optional)
     * @param maskPosition  (optional)
     * @param pngSticker  (optional)
     * @param tgsSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#createnewstickerset"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> createNewStickerSetPostWithHttpInfo(String emojis, String name, String title, Integer userId, Boolean containsMasks, MaskPosition maskPosition, String pngSticker, Object tgsSticker) throws ApiException {
        okhttp3.Call localVarCall = createNewStickerSetPostValidateBeforeCall(emojis, name, title, userId, containsMasks, maskPosition, pngSticker, tgsSticker, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Returns *True* on success.
     * @param emojis One or more emoji corresponding to the sticker (required)
     * @param name Short name of sticker set, to be used in &#x60;t.me/addstickers/&#x60; URLs (e.g., *animals*). Can contain only english letters, digits and underscores. Must begin with a letter, can&#39;t contain consecutive underscores and must end in *“\\\\_by\\\\_&lt;bot username&gt;”*. *&lt;bot\\\\_username&gt;* is case insensitive. 1-64 characters. (required)
     * @param title Sticker set title, 1-64 characters (required)
     * @param userId User identifier of created sticker set owner (required)
     * @param containsMasks Pass *True*, if a set of mask stickers should be created (optional)
     * @param maskPosition  (optional)
     * @param pngSticker  (optional)
     * @param tgsSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#createnewstickerset"> Documentation</a>
     */
    public okhttp3.Call createNewStickerSetPostAsync(String emojis, String name, String title, Integer userId, Boolean containsMasks, MaskPosition maskPosition, String pngSticker, Object tgsSticker, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewStickerSetPostValidateBeforeCall(emojis, name, title, userId, containsMasks, maskPosition, pngSticker, tgsSticker, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChatPhotoPost
     * @param deleteChatPhotoPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletechatphoto"> Documentation</a>
     */
    public okhttp3.Call deleteChatPhotoPostCall(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteChatPhotoPostRequest;

        // create path and map variables
        String localVarPath = "/deleteChatPhoto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChatPhotoPostValidateBeforeCall(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteChatPhotoPostRequest' is set
        if (deleteChatPhotoPostRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteChatPhotoPostRequest' when calling deleteChatPhotoPost(Async)");
        }

        return deleteChatPhotoPostCall(deleteChatPhotoPostRequest, _callback);

    }

    /**
     * 
     * Use this method to delete a chat photo. Photos can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param deleteChatPhotoPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletechatphoto"> Documentation</a>
     */
    public AddStickerToSetPost200Response deleteChatPhotoPost(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = deleteChatPhotoPostWithHttpInfo(deleteChatPhotoPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to delete a chat photo. Photos can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param deleteChatPhotoPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletechatphoto"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> deleteChatPhotoPostWithHttpInfo(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteChatPhotoPostValidateBeforeCall(deleteChatPhotoPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to delete a chat photo. Photos can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param deleteChatPhotoPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletechatphoto"> Documentation</a>
     */
    public okhttp3.Call deleteChatPhotoPostAsync(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChatPhotoPostValidateBeforeCall(deleteChatPhotoPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChatStickerSetPost
     * @param deleteChatStickerSetPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletechatstickerset"> Documentation</a>
     */
    public okhttp3.Call deleteChatStickerSetPostCall(DeleteChatStickerSetPostRequest deleteChatStickerSetPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteChatStickerSetPostRequest;

        // create path and map variables
        String localVarPath = "/deleteChatStickerSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChatStickerSetPostValidateBeforeCall(DeleteChatStickerSetPostRequest deleteChatStickerSetPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteChatStickerSetPostRequest' is set
        if (deleteChatStickerSetPostRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteChatStickerSetPostRequest' when calling deleteChatStickerSetPost(Async)");
        }

        return deleteChatStickerSetPostCall(deleteChatStickerSetPostRequest, _callback);

    }

    /**
     * 
     * Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
     * @param deleteChatStickerSetPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletechatstickerset"> Documentation</a>
     */
    public AddStickerToSetPost200Response deleteChatStickerSetPost(DeleteChatStickerSetPostRequest deleteChatStickerSetPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = deleteChatStickerSetPostWithHttpInfo(deleteChatStickerSetPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
     * @param deleteChatStickerSetPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletechatstickerset"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> deleteChatStickerSetPostWithHttpInfo(DeleteChatStickerSetPostRequest deleteChatStickerSetPostRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteChatStickerSetPostValidateBeforeCall(deleteChatStickerSetPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
     * @param deleteChatStickerSetPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletechatstickerset"> Documentation</a>
     */
    public okhttp3.Call deleteChatStickerSetPostAsync(DeleteChatStickerSetPostRequest deleteChatStickerSetPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChatStickerSetPostValidateBeforeCall(deleteChatStickerSetPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMessagePost
     * @param deleteMessagePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletemessage"> Documentation</a>
     */
    public okhttp3.Call deleteMessagePostCall(DeleteMessagePostRequest deleteMessagePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteMessagePostRequest;

        // create path and map variables
        String localVarPath = "/deleteMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessagePostValidateBeforeCall(DeleteMessagePostRequest deleteMessagePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteMessagePostRequest' is set
        if (deleteMessagePostRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteMessagePostRequest' when calling deleteMessagePost(Async)");
        }

        return deleteMessagePostCall(deleteMessagePostRequest, _callback);

    }

    /**
     * 
     * Use this method to delete a message, including service messages, with the following limitations:   \\- A message can only be deleted if it was sent less than 48 hours ago.   \\- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.   \\- Bots can delete outgoing messages in private chats, groups, and supergroups.   \\- Bots can delete incoming messages in private chats.   \\- Bots granted *can\\_post\\_messages* permissions can delete outgoing messages in channels.   \\- If the bot is an administrator of a group, it can delete any message there.   \\- If the bot has *can\\_delete\\_messages* permission in a supergroup or a channel, it can delete any message there.   Returns *True* on success.
     * @param deleteMessagePostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletemessage"> Documentation</a>
     */
    public AddStickerToSetPost200Response deleteMessagePost(DeleteMessagePostRequest deleteMessagePostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = deleteMessagePostWithHttpInfo(deleteMessagePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to delete a message, including service messages, with the following limitations:   \\- A message can only be deleted if it was sent less than 48 hours ago.   \\- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.   \\- Bots can delete outgoing messages in private chats, groups, and supergroups.   \\- Bots can delete incoming messages in private chats.   \\- Bots granted *can\\_post\\_messages* permissions can delete outgoing messages in channels.   \\- If the bot is an administrator of a group, it can delete any message there.   \\- If the bot has *can\\_delete\\_messages* permission in a supergroup or a channel, it can delete any message there.   Returns *True* on success.
     * @param deleteMessagePostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletemessage"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> deleteMessagePostWithHttpInfo(DeleteMessagePostRequest deleteMessagePostRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteMessagePostValidateBeforeCall(deleteMessagePostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to delete a message, including service messages, with the following limitations:   \\- A message can only be deleted if it was sent less than 48 hours ago.   \\- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.   \\- Bots can delete outgoing messages in private chats, groups, and supergroups.   \\- Bots can delete incoming messages in private chats.   \\- Bots granted *can\\_post\\_messages* permissions can delete outgoing messages in channels.   \\- If the bot is an administrator of a group, it can delete any message there.   \\- If the bot has *can\\_delete\\_messages* permission in a supergroup or a channel, it can delete any message there.   Returns *True* on success.
     * @param deleteMessagePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletemessage"> Documentation</a>
     */
    public okhttp3.Call deleteMessagePostAsync(DeleteMessagePostRequest deleteMessagePostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessagePostValidateBeforeCall(deleteMessagePostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStickerFromSetPost
     * @param deleteStickerFromSetPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletestickerfromset"> Documentation</a>
     */
    public okhttp3.Call deleteStickerFromSetPostCall(DeleteStickerFromSetPostRequest deleteStickerFromSetPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteStickerFromSetPostRequest;

        // create path and map variables
        String localVarPath = "/deleteStickerFromSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStickerFromSetPostValidateBeforeCall(DeleteStickerFromSetPostRequest deleteStickerFromSetPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteStickerFromSetPostRequest' is set
        if (deleteStickerFromSetPostRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteStickerFromSetPostRequest' when calling deleteStickerFromSetPost(Async)");
        }

        return deleteStickerFromSetPostCall(deleteStickerFromSetPostRequest, _callback);

    }

    /**
     * 
     * Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
     * @param deleteStickerFromSetPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletestickerfromset"> Documentation</a>
     */
    public AddStickerToSetPost200Response deleteStickerFromSetPost(DeleteStickerFromSetPostRequest deleteStickerFromSetPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = deleteStickerFromSetPostWithHttpInfo(deleteStickerFromSetPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
     * @param deleteStickerFromSetPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletestickerfromset"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> deleteStickerFromSetPostWithHttpInfo(DeleteStickerFromSetPostRequest deleteStickerFromSetPostRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteStickerFromSetPostValidateBeforeCall(deleteStickerFromSetPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
     * @param deleteStickerFromSetPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletestickerfromset"> Documentation</a>
     */
    public okhttp3.Call deleteStickerFromSetPostAsync(DeleteStickerFromSetPostRequest deleteStickerFromSetPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStickerFromSetPostValidateBeforeCall(deleteStickerFromSetPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWebhookPost
     * @param deleteWebhookPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletewebhook"> Documentation</a>
     */
    public okhttp3.Call deleteWebhookPostCall(DeleteWebhookPostRequest deleteWebhookPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteWebhookPostRequest;

        // create path and map variables
        String localVarPath = "/deleteWebhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookPostValidateBeforeCall(DeleteWebhookPostRequest deleteWebhookPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteWebhookPostRequest' is set
        if (deleteWebhookPostRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteWebhookPostRequest' when calling deleteWebhookPost(Async)");
        }

        return deleteWebhookPostCall(deleteWebhookPostRequest, _callback);

    }

    /**
     * 
     * Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
     * @param deleteWebhookPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletewebhook"> Documentation</a>
     */
    public AddStickerToSetPost200Response deleteWebhookPost(DeleteWebhookPostRequest deleteWebhookPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = deleteWebhookPostWithHttpInfo(deleteWebhookPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
     * @param deleteWebhookPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletewebhook"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> deleteWebhookPostWithHttpInfo(DeleteWebhookPostRequest deleteWebhookPostRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookPostValidateBeforeCall(deleteWebhookPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
     * @param deleteWebhookPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#deletewebhook"> Documentation</a>
     */
    public okhttp3.Call deleteWebhookPostAsync(DeleteWebhookPostRequest deleteWebhookPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookPostValidateBeforeCall(deleteWebhookPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editMessageCaptionPost
     * @param editMessageCaptionPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagecaption"> Documentation</a>
     */
    public okhttp3.Call editMessageCaptionPostCall(EditMessageCaptionPostRequest editMessageCaptionPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editMessageCaptionPostRequest;

        // create path and map variables
        String localVarPath = "/editMessageCaption";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editMessageCaptionPostValidateBeforeCall(EditMessageCaptionPostRequest editMessageCaptionPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'editMessageCaptionPostRequest' is set
        if (editMessageCaptionPostRequest == null) {
            throw new ApiException("Missing the required parameter 'editMessageCaptionPostRequest' when calling editMessageCaptionPost(Async)");
        }

        return editMessageCaptionPostCall(editMessageCaptionPostRequest, _callback);

    }

    /**
     * 
     * Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageCaptionPostRequest  (required)
     * @return EditMessageCaptionPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagecaption"> Documentation</a>
     */
    public EditMessageCaptionPost200Response editMessageCaptionPost(EditMessageCaptionPostRequest editMessageCaptionPostRequest) throws ApiException {
        ApiResponse<EditMessageCaptionPost200Response> localVarResp = editMessageCaptionPostWithHttpInfo(editMessageCaptionPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageCaptionPostRequest  (required)
     * @return ApiResponse&lt;EditMessageCaptionPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagecaption"> Documentation</a>
     */
    public ApiResponse<EditMessageCaptionPost200Response> editMessageCaptionPostWithHttpInfo(EditMessageCaptionPostRequest editMessageCaptionPostRequest) throws ApiException {
        okhttp3.Call localVarCall = editMessageCaptionPostValidateBeforeCall(editMessageCaptionPostRequest, null);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageCaptionPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagecaption"> Documentation</a>
     */
    public okhttp3.Call editMessageCaptionPostAsync(EditMessageCaptionPostRequest editMessageCaptionPostRequest, final ApiCallback<EditMessageCaptionPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = editMessageCaptionPostValidateBeforeCall(editMessageCaptionPostRequest, _callback);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editMessageLiveLocationPost
     * @param editMessageLiveLocationPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagelivelocation"> Documentation</a>
     */
    public okhttp3.Call editMessageLiveLocationPostCall(EditMessageLiveLocationPostRequest editMessageLiveLocationPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editMessageLiveLocationPostRequest;

        // create path and map variables
        String localVarPath = "/editMessageLiveLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editMessageLiveLocationPostValidateBeforeCall(EditMessageLiveLocationPostRequest editMessageLiveLocationPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'editMessageLiveLocationPostRequest' is set
        if (editMessageLiveLocationPostRequest == null) {
            throw new ApiException("Missing the required parameter 'editMessageLiveLocationPostRequest' when calling editMessageLiveLocationPost(Async)");
        }

        return editMessageLiveLocationPostCall(editMessageLiveLocationPostRequest, _callback);

    }

    /**
     * 
     * Use this method to edit live location messages. A location can be edited until its *live\\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageLiveLocationPostRequest  (required)
     * @return EditMessageCaptionPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagelivelocation"> Documentation</a>
     */
    public EditMessageCaptionPost200Response editMessageLiveLocationPost(EditMessageLiveLocationPostRequest editMessageLiveLocationPostRequest) throws ApiException {
        ApiResponse<EditMessageCaptionPost200Response> localVarResp = editMessageLiveLocationPostWithHttpInfo(editMessageLiveLocationPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to edit live location messages. A location can be edited until its *live\\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageLiveLocationPostRequest  (required)
     * @return ApiResponse&lt;EditMessageCaptionPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagelivelocation"> Documentation</a>
     */
    public ApiResponse<EditMessageCaptionPost200Response> editMessageLiveLocationPostWithHttpInfo(EditMessageLiveLocationPostRequest editMessageLiveLocationPostRequest) throws ApiException {
        okhttp3.Call localVarCall = editMessageLiveLocationPostValidateBeforeCall(editMessageLiveLocationPostRequest, null);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to edit live location messages. A location can be edited until its *live\\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageLiveLocationPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagelivelocation"> Documentation</a>
     */
    public okhttp3.Call editMessageLiveLocationPostAsync(EditMessageLiveLocationPostRequest editMessageLiveLocationPostRequest, final ApiCallback<EditMessageCaptionPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = editMessageLiveLocationPostValidateBeforeCall(editMessageLiveLocationPostRequest, _callback);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editMessageMediaPost
     * @param media  (required)
     * @param chatId  (optional)
     * @param inlineMessageId Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message (optional)
     * @param messageId Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit (optional)
     * @param replyMarkup  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagemedia"> Documentation</a>
     */
    public okhttp3.Call editMessageMediaPostCall(InputMedia media, EditMessageCaptionPostRequestChatId chatId, String inlineMessageId, Integer messageId, InlineKeyboardMarkup replyMarkup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/editMessageMedia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (chatId != null) {
            localVarFormParams.put("chat_id", chatId);
        }

        if (inlineMessageId != null) {
            localVarFormParams.put("inline_message_id", inlineMessageId);
        }

        if (media != null) {
            localVarFormParams.put("media", media);
        }

        if (messageId != null) {
            localVarFormParams.put("message_id", messageId);
        }

        if (replyMarkup != null) {
            localVarFormParams.put("reply_markup", replyMarkup);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editMessageMediaPostValidateBeforeCall(InputMedia media, EditMessageCaptionPostRequestChatId chatId, String inlineMessageId, Integer messageId, InlineKeyboardMarkup replyMarkup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'media' is set
        if (media == null) {
            throw new ApiException("Missing the required parameter 'media' when calling editMessageMediaPost(Async)");
        }

        return editMessageMediaPostCall(media, chatId, inlineMessageId, messageId, replyMarkup, _callback);

    }

    /**
     * 
     * Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can&#39;t be uploaded. Use a previously uploaded file via its file\\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param media  (required)
     * @param chatId  (optional)
     * @param inlineMessageId Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message (optional)
     * @param messageId Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit (optional)
     * @param replyMarkup  (optional)
     * @return EditMessageCaptionPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagemedia"> Documentation</a>
     */
    public EditMessageCaptionPost200Response editMessageMediaPost(InputMedia media, EditMessageCaptionPostRequestChatId chatId, String inlineMessageId, Integer messageId, InlineKeyboardMarkup replyMarkup) throws ApiException {
        ApiResponse<EditMessageCaptionPost200Response> localVarResp = editMessageMediaPostWithHttpInfo(media, chatId, inlineMessageId, messageId, replyMarkup);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can&#39;t be uploaded. Use a previously uploaded file via its file\\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param media  (required)
     * @param chatId  (optional)
     * @param inlineMessageId Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message (optional)
     * @param messageId Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit (optional)
     * @param replyMarkup  (optional)
     * @return ApiResponse&lt;EditMessageCaptionPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagemedia"> Documentation</a>
     */
    public ApiResponse<EditMessageCaptionPost200Response> editMessageMediaPostWithHttpInfo(InputMedia media, EditMessageCaptionPostRequestChatId chatId, String inlineMessageId, Integer messageId, InlineKeyboardMarkup replyMarkup) throws ApiException {
        okhttp3.Call localVarCall = editMessageMediaPostValidateBeforeCall(media, chatId, inlineMessageId, messageId, replyMarkup, null);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can&#39;t be uploaded. Use a previously uploaded file via its file\\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param media  (required)
     * @param chatId  (optional)
     * @param inlineMessageId Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message (optional)
     * @param messageId Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit (optional)
     * @param replyMarkup  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagemedia"> Documentation</a>
     */
    public okhttp3.Call editMessageMediaPostAsync(InputMedia media, EditMessageCaptionPostRequestChatId chatId, String inlineMessageId, Integer messageId, InlineKeyboardMarkup replyMarkup, final ApiCallback<EditMessageCaptionPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = editMessageMediaPostValidateBeforeCall(media, chatId, inlineMessageId, messageId, replyMarkup, _callback);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editMessageReplyMarkupPost
     * @param editMessageReplyMarkupPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagereplymarkup"> Documentation</a>
     */
    public okhttp3.Call editMessageReplyMarkupPostCall(EditMessageReplyMarkupPostRequest editMessageReplyMarkupPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editMessageReplyMarkupPostRequest;

        // create path and map variables
        String localVarPath = "/editMessageReplyMarkup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editMessageReplyMarkupPostValidateBeforeCall(EditMessageReplyMarkupPostRequest editMessageReplyMarkupPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'editMessageReplyMarkupPostRequest' is set
        if (editMessageReplyMarkupPostRequest == null) {
            throw new ApiException("Missing the required parameter 'editMessageReplyMarkupPostRequest' when calling editMessageReplyMarkupPost(Async)");
        }

        return editMessageReplyMarkupPostCall(editMessageReplyMarkupPostRequest, _callback);

    }

    /**
     * 
     * Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageReplyMarkupPostRequest  (required)
     * @return EditMessageCaptionPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagereplymarkup"> Documentation</a>
     */
    public EditMessageCaptionPost200Response editMessageReplyMarkupPost(EditMessageReplyMarkupPostRequest editMessageReplyMarkupPostRequest) throws ApiException {
        ApiResponse<EditMessageCaptionPost200Response> localVarResp = editMessageReplyMarkupPostWithHttpInfo(editMessageReplyMarkupPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageReplyMarkupPostRequest  (required)
     * @return ApiResponse&lt;EditMessageCaptionPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagereplymarkup"> Documentation</a>
     */
    public ApiResponse<EditMessageCaptionPost200Response> editMessageReplyMarkupPostWithHttpInfo(EditMessageReplyMarkupPostRequest editMessageReplyMarkupPostRequest) throws ApiException {
        okhttp3.Call localVarCall = editMessageReplyMarkupPostValidateBeforeCall(editMessageReplyMarkupPostRequest, null);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageReplyMarkupPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagereplymarkup"> Documentation</a>
     */
    public okhttp3.Call editMessageReplyMarkupPostAsync(EditMessageReplyMarkupPostRequest editMessageReplyMarkupPostRequest, final ApiCallback<EditMessageCaptionPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = editMessageReplyMarkupPostValidateBeforeCall(editMessageReplyMarkupPostRequest, _callback);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editMessageTextPost
     * @param editMessageTextPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagetext"> Documentation</a>
     */
    public okhttp3.Call editMessageTextPostCall(EditMessageTextPostRequest editMessageTextPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editMessageTextPostRequest;

        // create path and map variables
        String localVarPath = "/editMessageText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editMessageTextPostValidateBeforeCall(EditMessageTextPostRequest editMessageTextPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'editMessageTextPostRequest' is set
        if (editMessageTextPostRequest == null) {
            throw new ApiException("Missing the required parameter 'editMessageTextPostRequest' when calling editMessageTextPost(Async)");
        }

        return editMessageTextPostCall(editMessageTextPostRequest, _callback);

    }

    /**
     * 
     * Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageTextPostRequest  (required)
     * @return EditMessageCaptionPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagetext"> Documentation</a>
     */
    public EditMessageCaptionPost200Response editMessageTextPost(EditMessageTextPostRequest editMessageTextPostRequest) throws ApiException {
        ApiResponse<EditMessageCaptionPost200Response> localVarResp = editMessageTextPostWithHttpInfo(editMessageTextPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageTextPostRequest  (required)
     * @return ApiResponse&lt;EditMessageCaptionPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagetext"> Documentation</a>
     */
    public ApiResponse<EditMessageCaptionPost200Response> editMessageTextPostWithHttpInfo(EditMessageTextPostRequest editMessageTextPostRequest) throws ApiException {
        okhttp3.Call localVarCall = editMessageTextPostValidateBeforeCall(editMessageTextPostRequest, null);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param editMessageTextPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#editmessagetext"> Documentation</a>
     */
    public okhttp3.Call editMessageTextPostAsync(EditMessageTextPostRequest editMessageTextPostRequest, final ApiCallback<EditMessageCaptionPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = editMessageTextPostValidateBeforeCall(editMessageTextPostRequest, _callback);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportChatInviteLinkPost
     * @param deleteChatPhotoPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#exportchatinvitelink"> Documentation</a>
     */
    public okhttp3.Call exportChatInviteLinkPostCall(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteChatPhotoPostRequest;

        // create path and map variables
        String localVarPath = "/exportChatInviteLink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportChatInviteLinkPostValidateBeforeCall(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteChatPhotoPostRequest' is set
        if (deleteChatPhotoPostRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteChatPhotoPostRequest' when calling exportChatInviteLinkPost(Async)");
        }

        return exportChatInviteLinkPostCall(deleteChatPhotoPostRequest, _callback);

    }

    /**
     * 
     * Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
     * @param deleteChatPhotoPostRequest  (required)
     * @return ExportChatInviteLinkPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#exportchatinvitelink"> Documentation</a>
     */
    public ExportChatInviteLinkPost200Response exportChatInviteLinkPost(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest) throws ApiException {
        ApiResponse<ExportChatInviteLinkPost200Response> localVarResp = exportChatInviteLinkPostWithHttpInfo(deleteChatPhotoPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
     * @param deleteChatPhotoPostRequest  (required)
     * @return ApiResponse&lt;ExportChatInviteLinkPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#exportchatinvitelink"> Documentation</a>
     */
    public ApiResponse<ExportChatInviteLinkPost200Response> exportChatInviteLinkPostWithHttpInfo(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest) throws ApiException {
        okhttp3.Call localVarCall = exportChatInviteLinkPostValidateBeforeCall(deleteChatPhotoPostRequest, null);
        Type localVarReturnType = new TypeToken<ExportChatInviteLinkPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
     * @param deleteChatPhotoPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#exportchatinvitelink"> Documentation</a>
     */
    public okhttp3.Call exportChatInviteLinkPostAsync(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest, final ApiCallback<ExportChatInviteLinkPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportChatInviteLinkPostValidateBeforeCall(deleteChatPhotoPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ExportChatInviteLinkPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forwardMessagePost
     * @param forwardMessagePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#forwardmessage"> Documentation</a>
     */
    public okhttp3.Call forwardMessagePostCall(ForwardMessagePostRequest forwardMessagePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forwardMessagePostRequest;

        // create path and map variables
        String localVarPath = "/forwardMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forwardMessagePostValidateBeforeCall(ForwardMessagePostRequest forwardMessagePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'forwardMessagePostRequest' is set
        if (forwardMessagePostRequest == null) {
            throw new ApiException("Missing the required parameter 'forwardMessagePostRequest' when calling forwardMessagePost(Async)");
        }

        return forwardMessagePostCall(forwardMessagePostRequest, _callback);

    }

    /**
     * 
     * Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param forwardMessagePostRequest  (required)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#forwardmessage"> Documentation</a>
     */
    public ForwardMessagePost200Response forwardMessagePost(ForwardMessagePostRequest forwardMessagePostRequest) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = forwardMessagePostWithHttpInfo(forwardMessagePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param forwardMessagePostRequest  (required)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#forwardmessage"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> forwardMessagePostWithHttpInfo(ForwardMessagePostRequest forwardMessagePostRequest) throws ApiException {
        okhttp3.Call localVarCall = forwardMessagePostValidateBeforeCall(forwardMessagePostRequest, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param forwardMessagePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#forwardmessage"> Documentation</a>
     */
    public okhttp3.Call forwardMessagePostAsync(ForwardMessagePostRequest forwardMessagePostRequest, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = forwardMessagePostValidateBeforeCall(forwardMessagePostRequest, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChatAdministratorsPost
     * @param getChatPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatadministrators"> Documentation</a>
     */
    public okhttp3.Call getChatAdministratorsPostCall(GetChatPostRequest getChatPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getChatPostRequest;

        // create path and map variables
        String localVarPath = "/getChatAdministrators";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChatAdministratorsPostValidateBeforeCall(GetChatPostRequest getChatPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getChatPostRequest' is set
        if (getChatPostRequest == null) {
            throw new ApiException("Missing the required parameter 'getChatPostRequest' when calling getChatAdministratorsPost(Async)");
        }

        return getChatAdministratorsPostCall(getChatPostRequest, _callback);

    }

    /**
     * 
     * Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
     * @param getChatPostRequest  (required)
     * @return GetChatAdministratorsPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatadministrators"> Documentation</a>
     */
    public GetChatAdministratorsPost200Response getChatAdministratorsPost(GetChatPostRequest getChatPostRequest) throws ApiException {
        ApiResponse<GetChatAdministratorsPost200Response> localVarResp = getChatAdministratorsPostWithHttpInfo(getChatPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
     * @param getChatPostRequest  (required)
     * @return ApiResponse&lt;GetChatAdministratorsPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatadministrators"> Documentation</a>
     */
    public ApiResponse<GetChatAdministratorsPost200Response> getChatAdministratorsPostWithHttpInfo(GetChatPostRequest getChatPostRequest) throws ApiException {
        okhttp3.Call localVarCall = getChatAdministratorsPostValidateBeforeCall(getChatPostRequest, null);
        Type localVarReturnType = new TypeToken<GetChatAdministratorsPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
     * @param getChatPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatadministrators"> Documentation</a>
     */
    public okhttp3.Call getChatAdministratorsPostAsync(GetChatPostRequest getChatPostRequest, final ApiCallback<GetChatAdministratorsPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChatAdministratorsPostValidateBeforeCall(getChatPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetChatAdministratorsPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChatMemberPost
     * @param getChatMemberPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatmember"> Documentation</a>
     */
    public okhttp3.Call getChatMemberPostCall(GetChatMemberPostRequest getChatMemberPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getChatMemberPostRequest;

        // create path and map variables
        String localVarPath = "/getChatMember";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChatMemberPostValidateBeforeCall(GetChatMemberPostRequest getChatMemberPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getChatMemberPostRequest' is set
        if (getChatMemberPostRequest == null) {
            throw new ApiException("Missing the required parameter 'getChatMemberPostRequest' when calling getChatMemberPost(Async)");
        }

        return getChatMemberPostCall(getChatMemberPostRequest, _callback);

    }

    /**
     * 
     * Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
     * @param getChatMemberPostRequest  (required)
     * @return GetChatMemberPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatmember"> Documentation</a>
     */
    public GetChatMemberPost200Response getChatMemberPost(GetChatMemberPostRequest getChatMemberPostRequest) throws ApiException {
        ApiResponse<GetChatMemberPost200Response> localVarResp = getChatMemberPostWithHttpInfo(getChatMemberPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
     * @param getChatMemberPostRequest  (required)
     * @return ApiResponse&lt;GetChatMemberPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatmember"> Documentation</a>
     */
    public ApiResponse<GetChatMemberPost200Response> getChatMemberPostWithHttpInfo(GetChatMemberPostRequest getChatMemberPostRequest) throws ApiException {
        okhttp3.Call localVarCall = getChatMemberPostValidateBeforeCall(getChatMemberPostRequest, null);
        Type localVarReturnType = new TypeToken<GetChatMemberPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
     * @param getChatMemberPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatmember"> Documentation</a>
     */
    public okhttp3.Call getChatMemberPostAsync(GetChatMemberPostRequest getChatMemberPostRequest, final ApiCallback<GetChatMemberPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChatMemberPostValidateBeforeCall(getChatMemberPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetChatMemberPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChatMembersCountPost
     * @param getChatPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatmemberscount"> Documentation</a>
     */
    public okhttp3.Call getChatMembersCountPostCall(GetChatPostRequest getChatPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getChatPostRequest;

        // create path and map variables
        String localVarPath = "/getChatMembersCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChatMembersCountPostValidateBeforeCall(GetChatPostRequest getChatPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getChatPostRequest' is set
        if (getChatPostRequest == null) {
            throw new ApiException("Missing the required parameter 'getChatPostRequest' when calling getChatMembersCountPost(Async)");
        }

        return getChatMembersCountPostCall(getChatPostRequest, _callback);

    }

    /**
     * 
     * Use this method to get the number of members in a chat. Returns *Int* on success.
     * @param getChatPostRequest  (required)
     * @return GetChatMembersCountPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatmemberscount"> Documentation</a>
     */
    public GetChatMembersCountPost200Response getChatMembersCountPost(GetChatPostRequest getChatPostRequest) throws ApiException {
        ApiResponse<GetChatMembersCountPost200Response> localVarResp = getChatMembersCountPostWithHttpInfo(getChatPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to get the number of members in a chat. Returns *Int* on success.
     * @param getChatPostRequest  (required)
     * @return ApiResponse&lt;GetChatMembersCountPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatmemberscount"> Documentation</a>
     */
    public ApiResponse<GetChatMembersCountPost200Response> getChatMembersCountPostWithHttpInfo(GetChatPostRequest getChatPostRequest) throws ApiException {
        okhttp3.Call localVarCall = getChatMembersCountPostValidateBeforeCall(getChatPostRequest, null);
        Type localVarReturnType = new TypeToken<GetChatMembersCountPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to get the number of members in a chat. Returns *Int* on success.
     * @param getChatPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchatmemberscount"> Documentation</a>
     */
    public okhttp3.Call getChatMembersCountPostAsync(GetChatPostRequest getChatPostRequest, final ApiCallback<GetChatMembersCountPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChatMembersCountPostValidateBeforeCall(getChatPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetChatMembersCountPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChatPost
     * @param getChatPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchat"> Documentation</a>
     */
    public okhttp3.Call getChatPostCall(GetChatPostRequest getChatPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getChatPostRequest;

        // create path and map variables
        String localVarPath = "/getChat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChatPostValidateBeforeCall(GetChatPostRequest getChatPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getChatPostRequest' is set
        if (getChatPostRequest == null) {
            throw new ApiException("Missing the required parameter 'getChatPostRequest' when calling getChatPost(Async)");
        }

        return getChatPostCall(getChatPostRequest, _callback);

    }

    /**
     * 
     * Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
     * @param getChatPostRequest  (required)
     * @return GetChatPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchat"> Documentation</a>
     */
    public GetChatPost200Response getChatPost(GetChatPostRequest getChatPostRequest) throws ApiException {
        ApiResponse<GetChatPost200Response> localVarResp = getChatPostWithHttpInfo(getChatPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
     * @param getChatPostRequest  (required)
     * @return ApiResponse&lt;GetChatPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchat"> Documentation</a>
     */
    public ApiResponse<GetChatPost200Response> getChatPostWithHttpInfo(GetChatPostRequest getChatPostRequest) throws ApiException {
        okhttp3.Call localVarCall = getChatPostValidateBeforeCall(getChatPostRequest, null);
        Type localVarReturnType = new TypeToken<GetChatPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
     * @param getChatPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getchat"> Documentation</a>
     */
    public okhttp3.Call getChatPostAsync(GetChatPostRequest getChatPostRequest, final ApiCallback<GetChatPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChatPostValidateBeforeCall(getChatPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetChatPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilePost
     * @param getFilePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getfile"> Documentation</a>
     */
    public okhttp3.Call getFilePostCall(GetFilePostRequest getFilePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFilePostRequest;

        // create path and map variables
        String localVarPath = "/getFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilePostValidateBeforeCall(GetFilePostRequest getFilePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getFilePostRequest' is set
        if (getFilePostRequest == null) {
            throw new ApiException("Missing the required parameter 'getFilePostRequest' when calling getFilePost(Async)");
        }

        return getFilePostCall(getFilePostRequest, _callback);

    }

    /**
     * 
     * Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link &#x60;https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt;&#x60;, where &#x60;&lt;file_path&gt;&#x60; is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
     * @param getFilePostRequest  (required)
     * @return GetFilePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getfile"> Documentation</a>
     */
    public GetFilePost200Response getFilePost(GetFilePostRequest getFilePostRequest) throws ApiException {
        ApiResponse<GetFilePost200Response> localVarResp = getFilePostWithHttpInfo(getFilePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link &#x60;https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt;&#x60;, where &#x60;&lt;file_path&gt;&#x60; is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
     * @param getFilePostRequest  (required)
     * @return ApiResponse&lt;GetFilePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getfile"> Documentation</a>
     */
    public ApiResponse<GetFilePost200Response> getFilePostWithHttpInfo(GetFilePostRequest getFilePostRequest) throws ApiException {
        okhttp3.Call localVarCall = getFilePostValidateBeforeCall(getFilePostRequest, null);
        Type localVarReturnType = new TypeToken<GetFilePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link &#x60;https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt;&#x60;, where &#x60;&lt;file_path&gt;&#x60; is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
     * @param getFilePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getfile"> Documentation</a>
     */
    public okhttp3.Call getFilePostAsync(GetFilePostRequest getFilePostRequest, final ApiCallback<GetFilePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilePostValidateBeforeCall(getFilePostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFilePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGameHighScoresPost
     * @param getGameHighScoresPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getgamehighscores"> Documentation</a>
     */
    public okhttp3.Call getGameHighScoresPostCall(GetGameHighScoresPostRequest getGameHighScoresPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getGameHighScoresPostRequest;

        // create path and map variables
        String localVarPath = "/getGameHighScores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGameHighScoresPostValidateBeforeCall(GetGameHighScoresPostRequest getGameHighScoresPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getGameHighScoresPostRequest' is set
        if (getGameHighScoresPostRequest == null) {
            throw new ApiException("Missing the required parameter 'getGameHighScoresPostRequest' when calling getGameHighScoresPost(Async)");
        }

        return getGameHighScoresPostCall(getGameHighScoresPostRequest, _callback);

    }

    /**
     * 
     * Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.  This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
     * @param getGameHighScoresPostRequest  (required)
     * @return GetGameHighScoresPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getgamehighscores"> Documentation</a>
     */
    public GetGameHighScoresPost200Response getGameHighScoresPost(GetGameHighScoresPostRequest getGameHighScoresPostRequest) throws ApiException {
        ApiResponse<GetGameHighScoresPost200Response> localVarResp = getGameHighScoresPostWithHttpInfo(getGameHighScoresPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.  This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
     * @param getGameHighScoresPostRequest  (required)
     * @return ApiResponse&lt;GetGameHighScoresPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getgamehighscores"> Documentation</a>
     */
    public ApiResponse<GetGameHighScoresPost200Response> getGameHighScoresPostWithHttpInfo(GetGameHighScoresPostRequest getGameHighScoresPostRequest) throws ApiException {
        okhttp3.Call localVarCall = getGameHighScoresPostValidateBeforeCall(getGameHighScoresPostRequest, null);
        Type localVarReturnType = new TypeToken<GetGameHighScoresPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.  This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
     * @param getGameHighScoresPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getgamehighscores"> Documentation</a>
     */
    public okhttp3.Call getGameHighScoresPostAsync(GetGameHighScoresPostRequest getGameHighScoresPostRequest, final ApiCallback<GetGameHighScoresPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGameHighScoresPostValidateBeforeCall(getGameHighScoresPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetGameHighScoresPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMePost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getme"> Documentation</a>
     */
    public okhttp3.Call getMePostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getMe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMePostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getMePostCall(_callback);

    }

    /**
     * 
     * A simple method for testing your bot&#39;s auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
     * @return GetMePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getme"> Documentation</a>
     */
    public GetMePost200Response getMePost() throws ApiException {
        ApiResponse<GetMePost200Response> localVarResp = getMePostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * A simple method for testing your bot&#39;s auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
     * @return ApiResponse&lt;GetMePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getme"> Documentation</a>
     */
    public ApiResponse<GetMePost200Response> getMePostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMePostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetMePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A simple method for testing your bot&#39;s auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getme"> Documentation</a>
     */
    public okhttp3.Call getMePostAsync(final ApiCallback<GetMePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMePostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetMePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMyCommandsPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getmycommands"> Documentation</a>
     */
    public okhttp3.Call getMyCommandsPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getMyCommands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyCommandsPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getMyCommandsPostCall(_callback);

    }

    /**
     * 
     * Use this method to get the current list of the bot&#39;s commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
     * @return GetMyCommandsPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getmycommands"> Documentation</a>
     */
    public GetMyCommandsPost200Response getMyCommandsPost() throws ApiException {
        ApiResponse<GetMyCommandsPost200Response> localVarResp = getMyCommandsPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to get the current list of the bot&#39;s commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
     * @return ApiResponse&lt;GetMyCommandsPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getmycommands"> Documentation</a>
     */
    public ApiResponse<GetMyCommandsPost200Response> getMyCommandsPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMyCommandsPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetMyCommandsPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to get the current list of the bot&#39;s commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getmycommands"> Documentation</a>
     */
    public okhttp3.Call getMyCommandsPostAsync(final ApiCallback<GetMyCommandsPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyCommandsPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetMyCommandsPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStickerSetPost
     * @param getStickerSetPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getstickerset"> Documentation</a>
     */
    public okhttp3.Call getStickerSetPostCall(GetStickerSetPostRequest getStickerSetPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getStickerSetPostRequest;

        // create path and map variables
        String localVarPath = "/getStickerSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStickerSetPostValidateBeforeCall(GetStickerSetPostRequest getStickerSetPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getStickerSetPostRequest' is set
        if (getStickerSetPostRequest == null) {
            throw new ApiException("Missing the required parameter 'getStickerSetPostRequest' when calling getStickerSetPost(Async)");
        }

        return getStickerSetPostCall(getStickerSetPostRequest, _callback);

    }

    /**
     * 
     * Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
     * @param getStickerSetPostRequest  (required)
     * @return GetStickerSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getstickerset"> Documentation</a>
     */
    public GetStickerSetPost200Response getStickerSetPost(GetStickerSetPostRequest getStickerSetPostRequest) throws ApiException {
        ApiResponse<GetStickerSetPost200Response> localVarResp = getStickerSetPostWithHttpInfo(getStickerSetPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
     * @param getStickerSetPostRequest  (required)
     * @return ApiResponse&lt;GetStickerSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getstickerset"> Documentation</a>
     */
    public ApiResponse<GetStickerSetPost200Response> getStickerSetPostWithHttpInfo(GetStickerSetPostRequest getStickerSetPostRequest) throws ApiException {
        okhttp3.Call localVarCall = getStickerSetPostValidateBeforeCall(getStickerSetPostRequest, null);
        Type localVarReturnType = new TypeToken<GetStickerSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
     * @param getStickerSetPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getstickerset"> Documentation</a>
     */
    public okhttp3.Call getStickerSetPostAsync(GetStickerSetPostRequest getStickerSetPostRequest, final ApiCallback<GetStickerSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStickerSetPostValidateBeforeCall(getStickerSetPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetStickerSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUpdatesPost
     * @param getUpdatesPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getupdates"> Documentation</a>
     */
    public okhttp3.Call getUpdatesPostCall(GetUpdatesPostRequest getUpdatesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUpdatesPostRequest;

        // create path and map variables
        String localVarPath = "/getUpdates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUpdatesPostValidateBeforeCall(GetUpdatesPostRequest getUpdatesPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getUpdatesPostRequest' is set
        if (getUpdatesPostRequest == null) {
            throw new ApiException("Missing the required parameter 'getUpdatesPostRequest' when calling getUpdatesPost(Async)");
        }

        return getUpdatesPostCall(getUpdatesPostRequest, _callback);

    }

    /**
     * 
     * Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
     * @param getUpdatesPostRequest  (required)
     * @return GetUpdatesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getupdates"> Documentation</a>
     */
    public GetUpdatesPost200Response getUpdatesPost(GetUpdatesPostRequest getUpdatesPostRequest) throws ApiException {
        ApiResponse<GetUpdatesPost200Response> localVarResp = getUpdatesPostWithHttpInfo(getUpdatesPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
     * @param getUpdatesPostRequest  (required)
     * @return ApiResponse&lt;GetUpdatesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getupdates"> Documentation</a>
     */
    public ApiResponse<GetUpdatesPost200Response> getUpdatesPostWithHttpInfo(GetUpdatesPostRequest getUpdatesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = getUpdatesPostValidateBeforeCall(getUpdatesPostRequest, null);
        Type localVarReturnType = new TypeToken<GetUpdatesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
     * @param getUpdatesPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getupdates"> Documentation</a>
     */
    public okhttp3.Call getUpdatesPostAsync(GetUpdatesPostRequest getUpdatesPostRequest, final ApiCallback<GetUpdatesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUpdatesPostValidateBeforeCall(getUpdatesPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetUpdatesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserProfilePhotosPost
     * @param getUserProfilePhotosPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getuserprofilephotos"> Documentation</a>
     */
    public okhttp3.Call getUserProfilePhotosPostCall(GetUserProfilePhotosPostRequest getUserProfilePhotosPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUserProfilePhotosPostRequest;

        // create path and map variables
        String localVarPath = "/getUserProfilePhotos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserProfilePhotosPostValidateBeforeCall(GetUserProfilePhotosPostRequest getUserProfilePhotosPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getUserProfilePhotosPostRequest' is set
        if (getUserProfilePhotosPostRequest == null) {
            throw new ApiException("Missing the required parameter 'getUserProfilePhotosPostRequest' when calling getUserProfilePhotosPost(Async)");
        }

        return getUserProfilePhotosPostCall(getUserProfilePhotosPostRequest, _callback);

    }

    /**
     * 
     * Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
     * @param getUserProfilePhotosPostRequest  (required)
     * @return GetUserProfilePhotosPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getuserprofilephotos"> Documentation</a>
     */
    public GetUserProfilePhotosPost200Response getUserProfilePhotosPost(GetUserProfilePhotosPostRequest getUserProfilePhotosPostRequest) throws ApiException {
        ApiResponse<GetUserProfilePhotosPost200Response> localVarResp = getUserProfilePhotosPostWithHttpInfo(getUserProfilePhotosPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
     * @param getUserProfilePhotosPostRequest  (required)
     * @return ApiResponse&lt;GetUserProfilePhotosPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getuserprofilephotos"> Documentation</a>
     */
    public ApiResponse<GetUserProfilePhotosPost200Response> getUserProfilePhotosPostWithHttpInfo(GetUserProfilePhotosPostRequest getUserProfilePhotosPostRequest) throws ApiException {
        okhttp3.Call localVarCall = getUserProfilePhotosPostValidateBeforeCall(getUserProfilePhotosPostRequest, null);
        Type localVarReturnType = new TypeToken<GetUserProfilePhotosPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
     * @param getUserProfilePhotosPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getuserprofilephotos"> Documentation</a>
     */
    public okhttp3.Call getUserProfilePhotosPostAsync(GetUserProfilePhotosPostRequest getUserProfilePhotosPostRequest, final ApiCallback<GetUserProfilePhotosPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserProfilePhotosPostValidateBeforeCall(getUserProfilePhotosPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetUserProfilePhotosPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebhookInfoPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getwebhookinfo"> Documentation</a>
     */
    public okhttp3.Call getWebhookInfoPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getWebhookInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookInfoPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getWebhookInfoPostCall(_callback);

    }

    /**
     * 
     * Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
     * @return GetWebhookInfoPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getwebhookinfo"> Documentation</a>
     */
    public GetWebhookInfoPost200Response getWebhookInfoPost() throws ApiException {
        ApiResponse<GetWebhookInfoPost200Response> localVarResp = getWebhookInfoPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
     * @return ApiResponse&lt;GetWebhookInfoPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getwebhookinfo"> Documentation</a>
     */
    public ApiResponse<GetWebhookInfoPost200Response> getWebhookInfoPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getWebhookInfoPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetWebhookInfoPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#getwebhookinfo"> Documentation</a>
     */
    public okhttp3.Call getWebhookInfoPostAsync(final ApiCallback<GetWebhookInfoPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookInfoPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetWebhookInfoPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kickChatMemberPost
     * @param kickChatMemberPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#kickchatmember"> Documentation</a>
     */
    public okhttp3.Call kickChatMemberPostCall(KickChatMemberPostRequest kickChatMemberPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kickChatMemberPostRequest;

        // create path and map variables
        String localVarPath = "/kickChatMember";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kickChatMemberPostValidateBeforeCall(KickChatMemberPostRequest kickChatMemberPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kickChatMemberPostRequest' is set
        if (kickChatMemberPostRequest == null) {
            throw new ApiException("Missing the required parameter 'kickChatMemberPostRequest' when calling kickChatMemberPost(Async)");
        }

        return kickChatMemberPostCall(kickChatMemberPostRequest, _callback);

    }

    /**
     * 
     * Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param kickChatMemberPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#kickchatmember"> Documentation</a>
     */
    public AddStickerToSetPost200Response kickChatMemberPost(KickChatMemberPostRequest kickChatMemberPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = kickChatMemberPostWithHttpInfo(kickChatMemberPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param kickChatMemberPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#kickchatmember"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> kickChatMemberPostWithHttpInfo(KickChatMemberPostRequest kickChatMemberPostRequest) throws ApiException {
        okhttp3.Call localVarCall = kickChatMemberPostValidateBeforeCall(kickChatMemberPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param kickChatMemberPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#kickchatmember"> Documentation</a>
     */
    public okhttp3.Call kickChatMemberPostAsync(KickChatMemberPostRequest kickChatMemberPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = kickChatMemberPostValidateBeforeCall(kickChatMemberPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaveChatPost
     * @param getChatPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#leavechat"> Documentation</a>
     */
    public okhttp3.Call leaveChatPostCall(GetChatPostRequest getChatPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getChatPostRequest;

        // create path and map variables
        String localVarPath = "/leaveChat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaveChatPostValidateBeforeCall(GetChatPostRequest getChatPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getChatPostRequest' is set
        if (getChatPostRequest == null) {
            throw new ApiException("Missing the required parameter 'getChatPostRequest' when calling leaveChatPost(Async)");
        }

        return leaveChatPostCall(getChatPostRequest, _callback);

    }

    /**
     * 
     * Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
     * @param getChatPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#leavechat"> Documentation</a>
     */
    public AddStickerToSetPost200Response leaveChatPost(GetChatPostRequest getChatPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = leaveChatPostWithHttpInfo(getChatPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
     * @param getChatPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#leavechat"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> leaveChatPostWithHttpInfo(GetChatPostRequest getChatPostRequest) throws ApiException {
        okhttp3.Call localVarCall = leaveChatPostValidateBeforeCall(getChatPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
     * @param getChatPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#leavechat"> Documentation</a>
     */
    public okhttp3.Call leaveChatPostAsync(GetChatPostRequest getChatPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaveChatPostValidateBeforeCall(getChatPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logOutPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#logout"> Documentation</a>
     */
    public okhttp3.Call logOutPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logOut";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logOutPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return logOutPostCall(_callback);

    }

    /**
     * 
     * Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#logout"> Documentation</a>
     */
    public AddStickerToSetPost200Response logOutPost() throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = logOutPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#logout"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> logOutPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = logOutPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#logout"> Documentation</a>
     */
    public okhttp3.Call logOutPostAsync(final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = logOutPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pinChatMessagePost
     * @param pinChatMessagePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#pinchatmessage"> Documentation</a>
     */
    public okhttp3.Call pinChatMessagePostCall(PinChatMessagePostRequest pinChatMessagePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pinChatMessagePostRequest;

        // create path and map variables
        String localVarPath = "/pinChatMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pinChatMessagePostValidateBeforeCall(PinChatMessagePostRequest pinChatMessagePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pinChatMessagePostRequest' is set
        if (pinChatMessagePostRequest == null) {
            throw new ApiException("Missing the required parameter 'pinChatMessagePostRequest' when calling pinChatMessagePost(Async)");
        }

        return pinChatMessagePostCall(pinChatMessagePostRequest, _callback);

    }

    /**
     * 
     * Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can\\_pin\\_messages&#39; admin right in a supergroup or &#39;can\\_edit\\_messages&#39; admin right in a channel. Returns *True* on success.
     * @param pinChatMessagePostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#pinchatmessage"> Documentation</a>
     */
    public AddStickerToSetPost200Response pinChatMessagePost(PinChatMessagePostRequest pinChatMessagePostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = pinChatMessagePostWithHttpInfo(pinChatMessagePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can\\_pin\\_messages&#39; admin right in a supergroup or &#39;can\\_edit\\_messages&#39; admin right in a channel. Returns *True* on success.
     * @param pinChatMessagePostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#pinchatmessage"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> pinChatMessagePostWithHttpInfo(PinChatMessagePostRequest pinChatMessagePostRequest) throws ApiException {
        okhttp3.Call localVarCall = pinChatMessagePostValidateBeforeCall(pinChatMessagePostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can\\_pin\\_messages&#39; admin right in a supergroup or &#39;can\\_edit\\_messages&#39; admin right in a channel. Returns *True* on success.
     * @param pinChatMessagePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#pinchatmessage"> Documentation</a>
     */
    public okhttp3.Call pinChatMessagePostAsync(PinChatMessagePostRequest pinChatMessagePostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = pinChatMessagePostValidateBeforeCall(pinChatMessagePostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for promoteChatMemberPost
     * @param promoteChatMemberPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#promotechatmember"> Documentation</a>
     */
    public okhttp3.Call promoteChatMemberPostCall(PromoteChatMemberPostRequest promoteChatMemberPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promoteChatMemberPostRequest;

        // create path and map variables
        String localVarPath = "/promoteChatMember";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promoteChatMemberPostValidateBeforeCall(PromoteChatMemberPostRequest promoteChatMemberPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promoteChatMemberPostRequest' is set
        if (promoteChatMemberPostRequest == null) {
            throw new ApiException("Missing the required parameter 'promoteChatMemberPostRequest' when calling promoteChatMemberPost(Async)");
        }

        return promoteChatMemberPostCall(promoteChatMemberPostRequest, _callback);

    }

    /**
     * 
     * Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
     * @param promoteChatMemberPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#promotechatmember"> Documentation</a>
     */
    public AddStickerToSetPost200Response promoteChatMemberPost(PromoteChatMemberPostRequest promoteChatMemberPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = promoteChatMemberPostWithHttpInfo(promoteChatMemberPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
     * @param promoteChatMemberPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#promotechatmember"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> promoteChatMemberPostWithHttpInfo(PromoteChatMemberPostRequest promoteChatMemberPostRequest) throws ApiException {
        okhttp3.Call localVarCall = promoteChatMemberPostValidateBeforeCall(promoteChatMemberPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
     * @param promoteChatMemberPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#promotechatmember"> Documentation</a>
     */
    public okhttp3.Call promoteChatMemberPostAsync(PromoteChatMemberPostRequest promoteChatMemberPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = promoteChatMemberPostValidateBeforeCall(promoteChatMemberPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restrictChatMemberPost
     * @param restrictChatMemberPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#restrictchatmember"> Documentation</a>
     */
    public okhttp3.Call restrictChatMemberPostCall(RestrictChatMemberPostRequest restrictChatMemberPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restrictChatMemberPostRequest;

        // create path and map variables
        String localVarPath = "/restrictChatMember";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restrictChatMemberPostValidateBeforeCall(RestrictChatMemberPostRequest restrictChatMemberPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'restrictChatMemberPostRequest' is set
        if (restrictChatMemberPostRequest == null) {
            throw new ApiException("Missing the required parameter 'restrictChatMemberPostRequest' when calling restrictChatMemberPost(Async)");
        }

        return restrictChatMemberPostCall(restrictChatMemberPostRequest, _callback);

    }

    /**
     * 
     * Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
     * @param restrictChatMemberPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#restrictchatmember"> Documentation</a>
     */
    public AddStickerToSetPost200Response restrictChatMemberPost(RestrictChatMemberPostRequest restrictChatMemberPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = restrictChatMemberPostWithHttpInfo(restrictChatMemberPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
     * @param restrictChatMemberPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#restrictchatmember"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> restrictChatMemberPostWithHttpInfo(RestrictChatMemberPostRequest restrictChatMemberPostRequest) throws ApiException {
        okhttp3.Call localVarCall = restrictChatMemberPostValidateBeforeCall(restrictChatMemberPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
     * @param restrictChatMemberPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#restrictchatmember"> Documentation</a>
     */
    public okhttp3.Call restrictChatMemberPostAsync(RestrictChatMemberPostRequest restrictChatMemberPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = restrictChatMemberPostValidateBeforeCall(restrictChatMemberPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendAnimationPost
     * @param animation  (required)
     * @param chatId  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Animation caption (may also be used when resending animation by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent animation in seconds (optional)
     * @param height Animation height (optional)
     * @param parseMode Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param width Animation width (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendanimation"> Documentation</a>
     */
    public okhttp3.Call sendAnimationPostCall(String animation, CopyMessagePostRequestChatId chatId, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, Integer height, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, Integer width, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendAnimation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowSendingWithoutReply != null) {
            localVarFormParams.put("allow_sending_without_reply", allowSendingWithoutReply);
        }

        if (animation != null) {
            localVarFormParams.put("animation", animation);
        }

        if (caption != null) {
            localVarFormParams.put("caption", caption);
        }

        if (captionEntities != null) {
            localVarFormParams.put("caption_entities", captionEntities);
        }

        if (chatId != null) {
            localVarFormParams.put("chat_id", chatId);
        }

        if (disableNotification != null) {
            localVarFormParams.put("disable_notification", disableNotification);
        }

        if (duration != null) {
            localVarFormParams.put("duration", duration);
        }

        if (height != null) {
            localVarFormParams.put("height", height);
        }

        if (parseMode != null) {
            localVarFormParams.put("parse_mode", parseMode);
        }

        if (replyMarkup != null) {
            localVarFormParams.put("reply_markup", replyMarkup);
        }

        if (replyToMessageId != null) {
            localVarFormParams.put("reply_to_message_id", replyToMessageId);
        }

        if (thumb != null) {
            localVarFormParams.put("thumb", thumb);
        }

        if (width != null) {
            localVarFormParams.put("width", width);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendAnimationPostValidateBeforeCall(String animation, CopyMessagePostRequestChatId chatId, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, Integer height, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, Integer width, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'animation' is set
        if (animation == null) {
            throw new ApiException("Missing the required parameter 'animation' when calling sendAnimationPost(Async)");
        }

        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling sendAnimationPost(Async)");
        }

        return sendAnimationPostCall(animation, chatId, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, height, parseMode, replyMarkup, replyToMessageId, thumb, width, _callback);

    }

    /**
     * 
     * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
     * @param animation  (required)
     * @param chatId  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Animation caption (may also be used when resending animation by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent animation in seconds (optional)
     * @param height Animation height (optional)
     * @param parseMode Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param width Animation width (optional)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendanimation"> Documentation</a>
     */
    public ForwardMessagePost200Response sendAnimationPost(String animation, CopyMessagePostRequestChatId chatId, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, Integer height, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, Integer width) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendAnimationPostWithHttpInfo(animation, chatId, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, height, parseMode, replyMarkup, replyToMessageId, thumb, width);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
     * @param animation  (required)
     * @param chatId  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Animation caption (may also be used when resending animation by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent animation in seconds (optional)
     * @param height Animation height (optional)
     * @param parseMode Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param width Animation width (optional)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendanimation"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendAnimationPostWithHttpInfo(String animation, CopyMessagePostRequestChatId chatId, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, Integer height, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, Integer width) throws ApiException {
        okhttp3.Call localVarCall = sendAnimationPostValidateBeforeCall(animation, chatId, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, height, parseMode, replyMarkup, replyToMessageId, thumb, width, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
     * @param animation  (required)
     * @param chatId  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Animation caption (may also be used when resending animation by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent animation in seconds (optional)
     * @param height Animation height (optional)
     * @param parseMode Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param width Animation width (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendanimation"> Documentation</a>
     */
    public okhttp3.Call sendAnimationPostAsync(String animation, CopyMessagePostRequestChatId chatId, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, Integer height, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, Integer width, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendAnimationPostValidateBeforeCall(animation, chatId, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, height, parseMode, replyMarkup, replyToMessageId, thumb, width, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendAudioPost
     * @param audio  (required)
     * @param chatId  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Audio caption, 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of the audio in seconds (optional)
     * @param parseMode Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param performer Performer (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param title Track name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendaudio"> Documentation</a>
     */
    public okhttp3.Call sendAudioPostCall(String audio, CopyMessagePostRequestChatId chatId, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, String parseMode, String performer, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, String title, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendAudio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowSendingWithoutReply != null) {
            localVarFormParams.put("allow_sending_without_reply", allowSendingWithoutReply);
        }

        if (audio != null) {
            localVarFormParams.put("audio", audio);
        }

        if (caption != null) {
            localVarFormParams.put("caption", caption);
        }

        if (captionEntities != null) {
            localVarFormParams.put("caption_entities", captionEntities);
        }

        if (chatId != null) {
            localVarFormParams.put("chat_id", chatId);
        }

        if (disableNotification != null) {
            localVarFormParams.put("disable_notification", disableNotification);
        }

        if (duration != null) {
            localVarFormParams.put("duration", duration);
        }

        if (parseMode != null) {
            localVarFormParams.put("parse_mode", parseMode);
        }

        if (performer != null) {
            localVarFormParams.put("performer", performer);
        }

        if (replyMarkup != null) {
            localVarFormParams.put("reply_markup", replyMarkup);
        }

        if (replyToMessageId != null) {
            localVarFormParams.put("reply_to_message_id", replyToMessageId);
        }

        if (thumb != null) {
            localVarFormParams.put("thumb", thumb);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendAudioPostValidateBeforeCall(String audio, CopyMessagePostRequestChatId chatId, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, String parseMode, String performer, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, String title, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audio' is set
        if (audio == null) {
            throw new ApiException("Missing the required parameter 'audio' when calling sendAudioPost(Async)");
        }

        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling sendAudioPost(Async)");
        }

        return sendAudioPostCall(audio, chatId, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, parseMode, performer, replyMarkup, replyToMessageId, thumb, title, _callback);

    }

    /**
     * 
     * Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.  For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
     * @param audio  (required)
     * @param chatId  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Audio caption, 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of the audio in seconds (optional)
     * @param parseMode Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param performer Performer (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param title Track name (optional)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendaudio"> Documentation</a>
     */
    public ForwardMessagePost200Response sendAudioPost(String audio, CopyMessagePostRequestChatId chatId, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, String parseMode, String performer, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, String title) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendAudioPostWithHttpInfo(audio, chatId, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, parseMode, performer, replyMarkup, replyToMessageId, thumb, title);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.  For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
     * @param audio  (required)
     * @param chatId  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Audio caption, 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of the audio in seconds (optional)
     * @param parseMode Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param performer Performer (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param title Track name (optional)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendaudio"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendAudioPostWithHttpInfo(String audio, CopyMessagePostRequestChatId chatId, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, String parseMode, String performer, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, String title) throws ApiException {
        okhttp3.Call localVarCall = sendAudioPostValidateBeforeCall(audio, chatId, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, parseMode, performer, replyMarkup, replyToMessageId, thumb, title, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.  For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
     * @param audio  (required)
     * @param chatId  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Audio caption, 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of the audio in seconds (optional)
     * @param parseMode Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param performer Performer (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param title Track name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendaudio"> Documentation</a>
     */
    public okhttp3.Call sendAudioPostAsync(String audio, CopyMessagePostRequestChatId chatId, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, String parseMode, String performer, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, String title, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendAudioPostValidateBeforeCall(audio, chatId, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, parseMode, performer, replyMarkup, replyToMessageId, thumb, title, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendChatActionPost
     * @param sendChatActionPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendchataction"> Documentation</a>
     */
    public okhttp3.Call sendChatActionPostCall(SendChatActionPostRequest sendChatActionPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendChatActionPostRequest;

        // create path and map variables
        String localVarPath = "/sendChatAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendChatActionPostValidateBeforeCall(SendChatActionPostRequest sendChatActionPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendChatActionPostRequest' is set
        if (sendChatActionPostRequest == null) {
            throw new ApiException("Missing the required parameter 'sendChatActionPostRequest' when calling sendChatActionPost(Async)");
        }

        return sendChatActionPostCall(sendChatActionPostRequest, _callback);

    }

    /**
     * 
     * Use this method when you need to tell the user that something is happening on the bot&#39;s side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.  Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* &#x3D; *upload\\_photo*. The user will see a “sending photo” status for the bot.  We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
     * @param sendChatActionPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendchataction"> Documentation</a>
     */
    public AddStickerToSetPost200Response sendChatActionPost(SendChatActionPostRequest sendChatActionPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = sendChatActionPostWithHttpInfo(sendChatActionPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method when you need to tell the user that something is happening on the bot&#39;s side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.  Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* &#x3D; *upload\\_photo*. The user will see a “sending photo” status for the bot.  We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
     * @param sendChatActionPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendchataction"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> sendChatActionPostWithHttpInfo(SendChatActionPostRequest sendChatActionPostRequest) throws ApiException {
        okhttp3.Call localVarCall = sendChatActionPostValidateBeforeCall(sendChatActionPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method when you need to tell the user that something is happening on the bot&#39;s side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.  Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* &#x3D; *upload\\_photo*. The user will see a “sending photo” status for the bot.  We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
     * @param sendChatActionPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendchataction"> Documentation</a>
     */
    public okhttp3.Call sendChatActionPostAsync(SendChatActionPostRequest sendChatActionPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendChatActionPostValidateBeforeCall(sendChatActionPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendContactPost
     * @param sendContactPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendcontact"> Documentation</a>
     */
    public okhttp3.Call sendContactPostCall(SendContactPostRequest sendContactPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendContactPostRequest;

        // create path and map variables
        String localVarPath = "/sendContact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendContactPostValidateBeforeCall(SendContactPostRequest sendContactPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendContactPostRequest' is set
        if (sendContactPostRequest == null) {
            throw new ApiException("Missing the required parameter 'sendContactPostRequest' when calling sendContactPost(Async)");
        }

        return sendContactPostCall(sendContactPostRequest, _callback);

    }

    /**
     * 
     * Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendContactPostRequest  (required)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendcontact"> Documentation</a>
     */
    public ForwardMessagePost200Response sendContactPost(SendContactPostRequest sendContactPostRequest) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendContactPostWithHttpInfo(sendContactPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendContactPostRequest  (required)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendcontact"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendContactPostWithHttpInfo(SendContactPostRequest sendContactPostRequest) throws ApiException {
        okhttp3.Call localVarCall = sendContactPostValidateBeforeCall(sendContactPostRequest, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendContactPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendcontact"> Documentation</a>
     */
    public okhttp3.Call sendContactPostAsync(SendContactPostRequest sendContactPostRequest, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendContactPostValidateBeforeCall(sendContactPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendDicePost
     * @param sendDicePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#senddice"> Documentation</a>
     */
    public okhttp3.Call sendDicePostCall(SendDicePostRequest sendDicePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendDicePostRequest;

        // create path and map variables
        String localVarPath = "/sendDice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendDicePostValidateBeforeCall(SendDicePostRequest sendDicePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendDicePostRequest' is set
        if (sendDicePostRequest == null) {
            throw new ApiException("Missing the required parameter 'sendDicePostRequest' when calling sendDicePost(Async)");
        }

        return sendDicePostCall(sendDicePostRequest, _callback);

    }

    /**
     * 
     * Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendDicePostRequest  (required)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#senddice"> Documentation</a>
     */
    public ForwardMessagePost200Response sendDicePost(SendDicePostRequest sendDicePostRequest) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendDicePostWithHttpInfo(sendDicePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendDicePostRequest  (required)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#senddice"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendDicePostWithHttpInfo(SendDicePostRequest sendDicePostRequest) throws ApiException {
        okhttp3.Call localVarCall = sendDicePostValidateBeforeCall(sendDicePostRequest, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendDicePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#senddice"> Documentation</a>
     */
    public okhttp3.Call sendDicePostAsync(SendDicePostRequest sendDicePostRequest, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendDicePostValidateBeforeCall(sendDicePostRequest, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendDocumentPost
     * @param chatId  (required)
     * @param document  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Document caption (may also be used when resending documents by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableContentTypeDetection Disables automatic server-side content type detection for files uploaded using multipart/form-data (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param parseMode Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#senddocument"> Documentation</a>
     */
    public okhttp3.Call sendDocumentPostCall(CopyMessagePostRequestChatId chatId, String document, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableContentTypeDetection, Boolean disableNotification, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendDocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowSendingWithoutReply != null) {
            localVarFormParams.put("allow_sending_without_reply", allowSendingWithoutReply);
        }

        if (caption != null) {
            localVarFormParams.put("caption", caption);
        }

        if (captionEntities != null) {
            localVarFormParams.put("caption_entities", captionEntities);
        }

        if (chatId != null) {
            localVarFormParams.put("chat_id", chatId);
        }

        if (disableContentTypeDetection != null) {
            localVarFormParams.put("disable_content_type_detection", disableContentTypeDetection);
        }

        if (disableNotification != null) {
            localVarFormParams.put("disable_notification", disableNotification);
        }

        if (document != null) {
            localVarFormParams.put("document", document);
        }

        if (parseMode != null) {
            localVarFormParams.put("parse_mode", parseMode);
        }

        if (replyMarkup != null) {
            localVarFormParams.put("reply_markup", replyMarkup);
        }

        if (replyToMessageId != null) {
            localVarFormParams.put("reply_to_message_id", replyToMessageId);
        }

        if (thumb != null) {
            localVarFormParams.put("thumb", thumb);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendDocumentPostValidateBeforeCall(CopyMessagePostRequestChatId chatId, String document, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableContentTypeDetection, Boolean disableNotification, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling sendDocumentPost(Async)");
        }

        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling sendDocumentPost(Async)");
        }

        return sendDocumentPostCall(chatId, document, allowSendingWithoutReply, caption, captionEntities, disableContentTypeDetection, disableNotification, parseMode, replyMarkup, replyToMessageId, thumb, _callback);

    }

    /**
     * 
     * Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
     * @param chatId  (required)
     * @param document  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Document caption (may also be used when resending documents by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableContentTypeDetection Disables automatic server-side content type detection for files uploaded using multipart/form-data (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param parseMode Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#senddocument"> Documentation</a>
     */
    public ForwardMessagePost200Response sendDocumentPost(CopyMessagePostRequestChatId chatId, String document, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableContentTypeDetection, Boolean disableNotification, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendDocumentPostWithHttpInfo(chatId, document, allowSendingWithoutReply, caption, captionEntities, disableContentTypeDetection, disableNotification, parseMode, replyMarkup, replyToMessageId, thumb);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
     * @param chatId  (required)
     * @param document  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Document caption (may also be used when resending documents by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableContentTypeDetection Disables automatic server-side content type detection for files uploaded using multipart/form-data (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param parseMode Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#senddocument"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendDocumentPostWithHttpInfo(CopyMessagePostRequestChatId chatId, String document, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableContentTypeDetection, Boolean disableNotification, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb) throws ApiException {
        okhttp3.Call localVarCall = sendDocumentPostValidateBeforeCall(chatId, document, allowSendingWithoutReply, caption, captionEntities, disableContentTypeDetection, disableNotification, parseMode, replyMarkup, replyToMessageId, thumb, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
     * @param chatId  (required)
     * @param document  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Document caption (may also be used when resending documents by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableContentTypeDetection Disables automatic server-side content type detection for files uploaded using multipart/form-data (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param parseMode Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#senddocument"> Documentation</a>
     */
    public okhttp3.Call sendDocumentPostAsync(CopyMessagePostRequestChatId chatId, String document, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableContentTypeDetection, Boolean disableNotification, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendDocumentPostValidateBeforeCall(chatId, document, allowSendingWithoutReply, caption, captionEntities, disableContentTypeDetection, disableNotification, parseMode, replyMarkup, replyToMessageId, thumb, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendGamePost
     * @param sendGamePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendgame"> Documentation</a>
     */
    public okhttp3.Call sendGamePostCall(SendGamePostRequest sendGamePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendGamePostRequest;

        // create path and map variables
        String localVarPath = "/sendGame";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendGamePostValidateBeforeCall(SendGamePostRequest sendGamePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendGamePostRequest' is set
        if (sendGamePostRequest == null) {
            throw new ApiException("Missing the required parameter 'sendGamePostRequest' when calling sendGamePost(Async)");
        }

        return sendGamePostCall(sendGamePostRequest, _callback);

    }

    /**
     * 
     * Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendGamePostRequest  (required)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendgame"> Documentation</a>
     */
    public ForwardMessagePost200Response sendGamePost(SendGamePostRequest sendGamePostRequest) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendGamePostWithHttpInfo(sendGamePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendGamePostRequest  (required)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendgame"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendGamePostWithHttpInfo(SendGamePostRequest sendGamePostRequest) throws ApiException {
        okhttp3.Call localVarCall = sendGamePostValidateBeforeCall(sendGamePostRequest, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendGamePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendgame"> Documentation</a>
     */
    public okhttp3.Call sendGamePostAsync(SendGamePostRequest sendGamePostRequest, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendGamePostValidateBeforeCall(sendGamePostRequest, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendInvoicePost
     * @param sendInvoicePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendinvoice"> Documentation</a>
     */
    public okhttp3.Call sendInvoicePostCall(SendInvoicePostRequest sendInvoicePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendInvoicePostRequest;

        // create path and map variables
        String localVarPath = "/sendInvoice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendInvoicePostValidateBeforeCall(SendInvoicePostRequest sendInvoicePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendInvoicePostRequest' is set
        if (sendInvoicePostRequest == null) {
            throw new ApiException("Missing the required parameter 'sendInvoicePostRequest' when calling sendInvoicePost(Async)");
        }

        return sendInvoicePostCall(sendInvoicePostRequest, _callback);

    }

    /**
     * 
     * Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendInvoicePostRequest  (required)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendinvoice"> Documentation</a>
     */
    public ForwardMessagePost200Response sendInvoicePost(SendInvoicePostRequest sendInvoicePostRequest) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendInvoicePostWithHttpInfo(sendInvoicePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendInvoicePostRequest  (required)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendinvoice"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendInvoicePostWithHttpInfo(SendInvoicePostRequest sendInvoicePostRequest) throws ApiException {
        okhttp3.Call localVarCall = sendInvoicePostValidateBeforeCall(sendInvoicePostRequest, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendInvoicePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendinvoice"> Documentation</a>
     */
    public okhttp3.Call sendInvoicePostAsync(SendInvoicePostRequest sendInvoicePostRequest, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendInvoicePostValidateBeforeCall(sendInvoicePostRequest, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendLocationPost
     * @param sendLocationPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendlocation"> Documentation</a>
     */
    public okhttp3.Call sendLocationPostCall(SendLocationPostRequest sendLocationPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendLocationPostRequest;

        // create path and map variables
        String localVarPath = "/sendLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendLocationPostValidateBeforeCall(SendLocationPostRequest sendLocationPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendLocationPostRequest' is set
        if (sendLocationPostRequest == null) {
            throw new ApiException("Missing the required parameter 'sendLocationPostRequest' when calling sendLocationPost(Async)");
        }

        return sendLocationPostCall(sendLocationPostRequest, _callback);

    }

    /**
     * 
     * Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendLocationPostRequest  (required)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendlocation"> Documentation</a>
     */
    public ForwardMessagePost200Response sendLocationPost(SendLocationPostRequest sendLocationPostRequest) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendLocationPostWithHttpInfo(sendLocationPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendLocationPostRequest  (required)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendlocation"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendLocationPostWithHttpInfo(SendLocationPostRequest sendLocationPostRequest) throws ApiException {
        okhttp3.Call localVarCall = sendLocationPostValidateBeforeCall(sendLocationPostRequest, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendLocationPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendlocation"> Documentation</a>
     */
    public okhttp3.Call sendLocationPostAsync(SendLocationPostRequest sendLocationPostRequest, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendLocationPostValidateBeforeCall(sendLocationPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMediaGroupPost
     * @param chatId  (required)
     * @param media A JSON-serialized array describing messages to be sent, must include 2-10 items (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param replyToMessageId If the messages are a reply, ID of the original message (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendmediagroup"> Documentation</a>
     */
    public okhttp3.Call sendMediaGroupPostCall(CopyMessagePostRequestChatId chatId, List<SendMediaGroupPostRequestMediaInner> media, Boolean allowSendingWithoutReply, Boolean disableNotification, Integer replyToMessageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendMediaGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowSendingWithoutReply != null) {
            localVarFormParams.put("allow_sending_without_reply", allowSendingWithoutReply);
        }

        if (chatId != null) {
            localVarFormParams.put("chat_id", chatId);
        }

        if (disableNotification != null) {
            localVarFormParams.put("disable_notification", disableNotification);
        }

        if (media != null) {
            localVarFormParams.put("media", media);
        }

        if (replyToMessageId != null) {
            localVarFormParams.put("reply_to_message_id", replyToMessageId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMediaGroupPostValidateBeforeCall(CopyMessagePostRequestChatId chatId, List<SendMediaGroupPostRequestMediaInner> media, Boolean allowSendingWithoutReply, Boolean disableNotification, Integer replyToMessageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling sendMediaGroupPost(Async)");
        }

        // verify the required parameter 'media' is set
        if (media == null) {
            throw new ApiException("Missing the required parameter 'media' when calling sendMediaGroupPost(Async)");
        }

        return sendMediaGroupPostCall(chatId, media, allowSendingWithoutReply, disableNotification, replyToMessageId, _callback);

    }

    /**
     * 
     * Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
     * @param chatId  (required)
     * @param media A JSON-serialized array describing messages to be sent, must include 2-10 items (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param replyToMessageId If the messages are a reply, ID of the original message (optional)
     * @return SendMediaGroupPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendmediagroup"> Documentation</a>
     */
    public SendMediaGroupPost200Response sendMediaGroupPost(CopyMessagePostRequestChatId chatId, List<SendMediaGroupPostRequestMediaInner> media, Boolean allowSendingWithoutReply, Boolean disableNotification, Integer replyToMessageId) throws ApiException {
        ApiResponse<SendMediaGroupPost200Response> localVarResp = sendMediaGroupPostWithHttpInfo(chatId, media, allowSendingWithoutReply, disableNotification, replyToMessageId);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
     * @param chatId  (required)
     * @param media A JSON-serialized array describing messages to be sent, must include 2-10 items (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param replyToMessageId If the messages are a reply, ID of the original message (optional)
     * @return ApiResponse&lt;SendMediaGroupPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendmediagroup"> Documentation</a>
     */
    public ApiResponse<SendMediaGroupPost200Response> sendMediaGroupPostWithHttpInfo(CopyMessagePostRequestChatId chatId, List<SendMediaGroupPostRequestMediaInner> media, Boolean allowSendingWithoutReply, Boolean disableNotification, Integer replyToMessageId) throws ApiException {
        okhttp3.Call localVarCall = sendMediaGroupPostValidateBeforeCall(chatId, media, allowSendingWithoutReply, disableNotification, replyToMessageId, null);
        Type localVarReturnType = new TypeToken<SendMediaGroupPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
     * @param chatId  (required)
     * @param media A JSON-serialized array describing messages to be sent, must include 2-10 items (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param replyToMessageId If the messages are a reply, ID of the original message (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendmediagroup"> Documentation</a>
     */
    public okhttp3.Call sendMediaGroupPostAsync(CopyMessagePostRequestChatId chatId, List<SendMediaGroupPostRequestMediaInner> media, Boolean allowSendingWithoutReply, Boolean disableNotification, Integer replyToMessageId, final ApiCallback<SendMediaGroupPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMediaGroupPostValidateBeforeCall(chatId, media, allowSendingWithoutReply, disableNotification, replyToMessageId, _callback);
        Type localVarReturnType = new TypeToken<SendMediaGroupPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMessagePost
     * @param sendMessagePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendmessage"> Documentation</a>
     */
    public okhttp3.Call sendMessagePostCall(SendMessagePostRequest sendMessagePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendMessagePostRequest;

        // create path and map variables
        String localVarPath = "/sendMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessagePostValidateBeforeCall(SendMessagePostRequest sendMessagePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendMessagePostRequest' is set
        if (sendMessagePostRequest == null) {
            throw new ApiException("Missing the required parameter 'sendMessagePostRequest' when calling sendMessagePost(Async)");
        }

        return sendMessagePostCall(sendMessagePostRequest, _callback);

    }

    /**
     * 
     * Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendMessagePostRequest  (required)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendmessage"> Documentation</a>
     */
    public ForwardMessagePost200Response sendMessagePost(SendMessagePostRequest sendMessagePostRequest) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendMessagePostWithHttpInfo(sendMessagePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendMessagePostRequest  (required)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendmessage"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendMessagePostWithHttpInfo(SendMessagePostRequest sendMessagePostRequest) throws ApiException {
        okhttp3.Call localVarCall = sendMessagePostValidateBeforeCall(sendMessagePostRequest, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendMessagePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendmessage"> Documentation</a>
     */
    public okhttp3.Call sendMessagePostAsync(SendMessagePostRequest sendMessagePostRequest, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessagePostValidateBeforeCall(sendMessagePostRequest, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendPhotoPost
     * @param chatId  (required)
     * @param photo  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Photo caption (may also be used when resending photos by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param parseMode Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendphoto"> Documentation</a>
     */
    public okhttp3.Call sendPhotoPostCall(CopyMessagePostRequestChatId chatId, String photo, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendPhoto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowSendingWithoutReply != null) {
            localVarFormParams.put("allow_sending_without_reply", allowSendingWithoutReply);
        }

        if (caption != null) {
            localVarFormParams.put("caption", caption);
        }

        if (captionEntities != null) {
            localVarFormParams.put("caption_entities", captionEntities);
        }

        if (chatId != null) {
            localVarFormParams.put("chat_id", chatId);
        }

        if (disableNotification != null) {
            localVarFormParams.put("disable_notification", disableNotification);
        }

        if (parseMode != null) {
            localVarFormParams.put("parse_mode", parseMode);
        }

        if (photo != null) {
            localVarFormParams.put("photo", photo);
        }

        if (replyMarkup != null) {
            localVarFormParams.put("reply_markup", replyMarkup);
        }

        if (replyToMessageId != null) {
            localVarFormParams.put("reply_to_message_id", replyToMessageId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPhotoPostValidateBeforeCall(CopyMessagePostRequestChatId chatId, String photo, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling sendPhotoPost(Async)");
        }

        // verify the required parameter 'photo' is set
        if (photo == null) {
            throw new ApiException("Missing the required parameter 'photo' when calling sendPhotoPost(Async)");
        }

        return sendPhotoPostCall(chatId, photo, allowSendingWithoutReply, caption, captionEntities, disableNotification, parseMode, replyMarkup, replyToMessageId, _callback);

    }

    /**
     * 
     * Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param chatId  (required)
     * @param photo  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Photo caption (may also be used when resending photos by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param parseMode Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendphoto"> Documentation</a>
     */
    public ForwardMessagePost200Response sendPhotoPost(CopyMessagePostRequestChatId chatId, String photo, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendPhotoPostWithHttpInfo(chatId, photo, allowSendingWithoutReply, caption, captionEntities, disableNotification, parseMode, replyMarkup, replyToMessageId);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param chatId  (required)
     * @param photo  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Photo caption (may also be used when resending photos by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param parseMode Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendphoto"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendPhotoPostWithHttpInfo(CopyMessagePostRequestChatId chatId, String photo, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId) throws ApiException {
        okhttp3.Call localVarCall = sendPhotoPostValidateBeforeCall(chatId, photo, allowSendingWithoutReply, caption, captionEntities, disableNotification, parseMode, replyMarkup, replyToMessageId, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param chatId  (required)
     * @param photo  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Photo caption (may also be used when resending photos by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param parseMode Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendphoto"> Documentation</a>
     */
    public okhttp3.Call sendPhotoPostAsync(CopyMessagePostRequestChatId chatId, String photo, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPhotoPostValidateBeforeCall(chatId, photo, allowSendingWithoutReply, caption, captionEntities, disableNotification, parseMode, replyMarkup, replyToMessageId, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendPollPost
     * @param sendPollPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendpoll"> Documentation</a>
     */
    public okhttp3.Call sendPollPostCall(SendPollPostRequest sendPollPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendPollPostRequest;

        // create path and map variables
        String localVarPath = "/sendPoll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPollPostValidateBeforeCall(SendPollPostRequest sendPollPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendPollPostRequest' is set
        if (sendPollPostRequest == null) {
            throw new ApiException("Missing the required parameter 'sendPollPostRequest' when calling sendPollPost(Async)");
        }

        return sendPollPostCall(sendPollPostRequest, _callback);

    }

    /**
     * 
     * Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendPollPostRequest  (required)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendpoll"> Documentation</a>
     */
    public ForwardMessagePost200Response sendPollPost(SendPollPostRequest sendPollPostRequest) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendPollPostWithHttpInfo(sendPollPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendPollPostRequest  (required)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendpoll"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendPollPostWithHttpInfo(SendPollPostRequest sendPollPostRequest) throws ApiException {
        okhttp3.Call localVarCall = sendPollPostValidateBeforeCall(sendPollPostRequest, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendPollPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendpoll"> Documentation</a>
     */
    public okhttp3.Call sendPollPostAsync(SendPollPostRequest sendPollPostRequest, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPollPostValidateBeforeCall(sendPollPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendStickerPost
     * @param chatId  (required)
     * @param sticker  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendsticker"> Documentation</a>
     */
    public okhttp3.Call sendStickerPostCall(CopyMessagePostRequestChatId chatId, String sticker, Boolean allowSendingWithoutReply, Boolean disableNotification, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendSticker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowSendingWithoutReply != null) {
            localVarFormParams.put("allow_sending_without_reply", allowSendingWithoutReply);
        }

        if (chatId != null) {
            localVarFormParams.put("chat_id", chatId);
        }

        if (disableNotification != null) {
            localVarFormParams.put("disable_notification", disableNotification);
        }

        if (replyMarkup != null) {
            localVarFormParams.put("reply_markup", replyMarkup);
        }

        if (replyToMessageId != null) {
            localVarFormParams.put("reply_to_message_id", replyToMessageId);
        }

        if (sticker != null) {
            localVarFormParams.put("sticker", sticker);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendStickerPostValidateBeforeCall(CopyMessagePostRequestChatId chatId, String sticker, Boolean allowSendingWithoutReply, Boolean disableNotification, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling sendStickerPost(Async)");
        }

        // verify the required parameter 'sticker' is set
        if (sticker == null) {
            throw new ApiException("Missing the required parameter 'sticker' when calling sendStickerPost(Async)");
        }

        return sendStickerPostCall(chatId, sticker, allowSendingWithoutReply, disableNotification, replyMarkup, replyToMessageId, _callback);

    }

    /**
     * 
     * Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param chatId  (required)
     * @param sticker  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendsticker"> Documentation</a>
     */
    public ForwardMessagePost200Response sendStickerPost(CopyMessagePostRequestChatId chatId, String sticker, Boolean allowSendingWithoutReply, Boolean disableNotification, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendStickerPostWithHttpInfo(chatId, sticker, allowSendingWithoutReply, disableNotification, replyMarkup, replyToMessageId);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param chatId  (required)
     * @param sticker  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendsticker"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendStickerPostWithHttpInfo(CopyMessagePostRequestChatId chatId, String sticker, Boolean allowSendingWithoutReply, Boolean disableNotification, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId) throws ApiException {
        okhttp3.Call localVarCall = sendStickerPostValidateBeforeCall(chatId, sticker, allowSendingWithoutReply, disableNotification, replyMarkup, replyToMessageId, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param chatId  (required)
     * @param sticker  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendsticker"> Documentation</a>
     */
    public okhttp3.Call sendStickerPostAsync(CopyMessagePostRequestChatId chatId, String sticker, Boolean allowSendingWithoutReply, Boolean disableNotification, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendStickerPostValidateBeforeCall(chatId, sticker, allowSendingWithoutReply, disableNotification, replyMarkup, replyToMessageId, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendVenuePost
     * @param sendVenuePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvenue"> Documentation</a>
     */
    public okhttp3.Call sendVenuePostCall(SendVenuePostRequest sendVenuePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendVenuePostRequest;

        // create path and map variables
        String localVarPath = "/sendVenue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendVenuePostValidateBeforeCall(SendVenuePostRequest sendVenuePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendVenuePostRequest' is set
        if (sendVenuePostRequest == null) {
            throw new ApiException("Missing the required parameter 'sendVenuePostRequest' when calling sendVenuePost(Async)");
        }

        return sendVenuePostCall(sendVenuePostRequest, _callback);

    }

    /**
     * 
     * Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendVenuePostRequest  (required)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvenue"> Documentation</a>
     */
    public ForwardMessagePost200Response sendVenuePost(SendVenuePostRequest sendVenuePostRequest) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendVenuePostWithHttpInfo(sendVenuePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendVenuePostRequest  (required)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvenue"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendVenuePostWithHttpInfo(SendVenuePostRequest sendVenuePostRequest) throws ApiException {
        okhttp3.Call localVarCall = sendVenuePostValidateBeforeCall(sendVenuePostRequest, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param sendVenuePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvenue"> Documentation</a>
     */
    public okhttp3.Call sendVenuePostAsync(SendVenuePostRequest sendVenuePostRequest, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendVenuePostValidateBeforeCall(sendVenuePostRequest, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendVideoNotePost
     * @param chatId  (required)
     * @param videoNote  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent video in seconds (optional)
     * @param length Video width and height, i.e. diameter of the video message (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvideonote"> Documentation</a>
     */
    public okhttp3.Call sendVideoNotePostCall(CopyMessagePostRequestChatId chatId, String videoNote, Boolean allowSendingWithoutReply, Boolean disableNotification, Integer duration, Integer length, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendVideoNote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowSendingWithoutReply != null) {
            localVarFormParams.put("allow_sending_without_reply", allowSendingWithoutReply);
        }

        if (chatId != null) {
            localVarFormParams.put("chat_id", chatId);
        }

        if (disableNotification != null) {
            localVarFormParams.put("disable_notification", disableNotification);
        }

        if (duration != null) {
            localVarFormParams.put("duration", duration);
        }

        if (length != null) {
            localVarFormParams.put("length", length);
        }

        if (replyMarkup != null) {
            localVarFormParams.put("reply_markup", replyMarkup);
        }

        if (replyToMessageId != null) {
            localVarFormParams.put("reply_to_message_id", replyToMessageId);
        }

        if (thumb != null) {
            localVarFormParams.put("thumb", thumb);
        }

        if (videoNote != null) {
            localVarFormParams.put("video_note", videoNote);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendVideoNotePostValidateBeforeCall(CopyMessagePostRequestChatId chatId, String videoNote, Boolean allowSendingWithoutReply, Boolean disableNotification, Integer duration, Integer length, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling sendVideoNotePost(Async)");
        }

        // verify the required parameter 'videoNote' is set
        if (videoNote == null) {
            throw new ApiException("Missing the required parameter 'videoNote' when calling sendVideoNotePost(Async)");
        }

        return sendVideoNotePostCall(chatId, videoNote, allowSendingWithoutReply, disableNotification, duration, length, replyMarkup, replyToMessageId, thumb, _callback);

    }

    /**
     * 
     * As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param chatId  (required)
     * @param videoNote  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent video in seconds (optional)
     * @param length Video width and height, i.e. diameter of the video message (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvideonote"> Documentation</a>
     */
    public ForwardMessagePost200Response sendVideoNotePost(CopyMessagePostRequestChatId chatId, String videoNote, Boolean allowSendingWithoutReply, Boolean disableNotification, Integer duration, Integer length, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendVideoNotePostWithHttpInfo(chatId, videoNote, allowSendingWithoutReply, disableNotification, duration, length, replyMarkup, replyToMessageId, thumb);
        return localVarResp.getData();
    }

    /**
     * 
     * As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param chatId  (required)
     * @param videoNote  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent video in seconds (optional)
     * @param length Video width and height, i.e. diameter of the video message (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvideonote"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendVideoNotePostWithHttpInfo(CopyMessagePostRequestChatId chatId, String videoNote, Boolean allowSendingWithoutReply, Boolean disableNotification, Integer duration, Integer length, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb) throws ApiException {
        okhttp3.Call localVarCall = sendVideoNotePostValidateBeforeCall(chatId, videoNote, allowSendingWithoutReply, disableNotification, duration, length, replyMarkup, replyToMessageId, thumb, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param chatId  (required)
     * @param videoNote  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent video in seconds (optional)
     * @param length Video width and height, i.e. diameter of the video message (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param thumb  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvideonote"> Documentation</a>
     */
    public okhttp3.Call sendVideoNotePostAsync(CopyMessagePostRequestChatId chatId, String videoNote, Boolean allowSendingWithoutReply, Boolean disableNotification, Integer duration, Integer length, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, String thumb, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendVideoNotePostValidateBeforeCall(chatId, videoNote, allowSendingWithoutReply, disableNotification, duration, length, replyMarkup, replyToMessageId, thumb, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendVideoPost
     * @param chatId  (required)
     * @param video  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Video caption (may also be used when resending videos by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent video in seconds (optional)
     * @param height Video height (optional)
     * @param parseMode Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param supportsStreaming Pass *True*, if the uploaded video is suitable for streaming (optional)
     * @param thumb  (optional)
     * @param width Video width (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvideo"> Documentation</a>
     */
    public okhttp3.Call sendVideoPostCall(CopyMessagePostRequestChatId chatId, String video, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, Integer height, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, Boolean supportsStreaming, String thumb, Integer width, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendVideo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowSendingWithoutReply != null) {
            localVarFormParams.put("allow_sending_without_reply", allowSendingWithoutReply);
        }

        if (caption != null) {
            localVarFormParams.put("caption", caption);
        }

        if (captionEntities != null) {
            localVarFormParams.put("caption_entities", captionEntities);
        }

        if (chatId != null) {
            localVarFormParams.put("chat_id", chatId);
        }

        if (disableNotification != null) {
            localVarFormParams.put("disable_notification", disableNotification);
        }

        if (duration != null) {
            localVarFormParams.put("duration", duration);
        }

        if (height != null) {
            localVarFormParams.put("height", height);
        }

        if (parseMode != null) {
            localVarFormParams.put("parse_mode", parseMode);
        }

        if (replyMarkup != null) {
            localVarFormParams.put("reply_markup", replyMarkup);
        }

        if (replyToMessageId != null) {
            localVarFormParams.put("reply_to_message_id", replyToMessageId);
        }

        if (supportsStreaming != null) {
            localVarFormParams.put("supports_streaming", supportsStreaming);
        }

        if (thumb != null) {
            localVarFormParams.put("thumb", thumb);
        }

        if (video != null) {
            localVarFormParams.put("video", video);
        }

        if (width != null) {
            localVarFormParams.put("width", width);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendVideoPostValidateBeforeCall(CopyMessagePostRequestChatId chatId, String video, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, Integer height, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, Boolean supportsStreaming, String thumb, Integer width, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling sendVideoPost(Async)");
        }

        // verify the required parameter 'video' is set
        if (video == null) {
            throw new ApiException("Missing the required parameter 'video' when calling sendVideoPost(Async)");
        }

        return sendVideoPostCall(chatId, video, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, height, parseMode, replyMarkup, replyToMessageId, supportsStreaming, thumb, width, _callback);

    }

    /**
     * 
     * Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
     * @param chatId  (required)
     * @param video  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Video caption (may also be used when resending videos by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent video in seconds (optional)
     * @param height Video height (optional)
     * @param parseMode Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param supportsStreaming Pass *True*, if the uploaded video is suitable for streaming (optional)
     * @param thumb  (optional)
     * @param width Video width (optional)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvideo"> Documentation</a>
     */
    public ForwardMessagePost200Response sendVideoPost(CopyMessagePostRequestChatId chatId, String video, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, Integer height, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, Boolean supportsStreaming, String thumb, Integer width) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendVideoPostWithHttpInfo(chatId, video, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, height, parseMode, replyMarkup, replyToMessageId, supportsStreaming, thumb, width);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
     * @param chatId  (required)
     * @param video  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Video caption (may also be used when resending videos by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent video in seconds (optional)
     * @param height Video height (optional)
     * @param parseMode Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param supportsStreaming Pass *True*, if the uploaded video is suitable for streaming (optional)
     * @param thumb  (optional)
     * @param width Video width (optional)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvideo"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendVideoPostWithHttpInfo(CopyMessagePostRequestChatId chatId, String video, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, Integer height, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, Boolean supportsStreaming, String thumb, Integer width) throws ApiException {
        okhttp3.Call localVarCall = sendVideoPostValidateBeforeCall(chatId, video, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, height, parseMode, replyMarkup, replyToMessageId, supportsStreaming, thumb, width, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
     * @param chatId  (required)
     * @param video  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Video caption (may also be used when resending videos by *file\\\\_id*), 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of sent video in seconds (optional)
     * @param height Video height (optional)
     * @param parseMode Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param supportsStreaming Pass *True*, if the uploaded video is suitable for streaming (optional)
     * @param thumb  (optional)
     * @param width Video width (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvideo"> Documentation</a>
     */
    public okhttp3.Call sendVideoPostAsync(CopyMessagePostRequestChatId chatId, String video, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, Integer height, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, Boolean supportsStreaming, String thumb, Integer width, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendVideoPostValidateBeforeCall(chatId, video, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, height, parseMode, replyMarkup, replyToMessageId, supportsStreaming, thumb, width, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendVoicePost
     * @param chatId  (required)
     * @param voice  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Voice message caption, 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of the voice message in seconds (optional)
     * @param parseMode Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvoice"> Documentation</a>
     */
    public okhttp3.Call sendVoicePostCall(CopyMessagePostRequestChatId chatId, String voice, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendVoice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowSendingWithoutReply != null) {
            localVarFormParams.put("allow_sending_without_reply", allowSendingWithoutReply);
        }

        if (caption != null) {
            localVarFormParams.put("caption", caption);
        }

        if (captionEntities != null) {
            localVarFormParams.put("caption_entities", captionEntities);
        }

        if (chatId != null) {
            localVarFormParams.put("chat_id", chatId);
        }

        if (disableNotification != null) {
            localVarFormParams.put("disable_notification", disableNotification);
        }

        if (duration != null) {
            localVarFormParams.put("duration", duration);
        }

        if (parseMode != null) {
            localVarFormParams.put("parse_mode", parseMode);
        }

        if (replyMarkup != null) {
            localVarFormParams.put("reply_markup", replyMarkup);
        }

        if (replyToMessageId != null) {
            localVarFormParams.put("reply_to_message_id", replyToMessageId);
        }

        if (voice != null) {
            localVarFormParams.put("voice", voice);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendVoicePostValidateBeforeCall(CopyMessagePostRequestChatId chatId, String voice, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling sendVoicePost(Async)");
        }

        // verify the required parameter 'voice' is set
        if (voice == null) {
            throw new ApiException("Missing the required parameter 'voice' when calling sendVoicePost(Async)");
        }

        return sendVoicePostCall(chatId, voice, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, parseMode, replyMarkup, replyToMessageId, _callback);

    }

    /**
     * 
     * Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
     * @param chatId  (required)
     * @param voice  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Voice message caption, 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of the voice message in seconds (optional)
     * @param parseMode Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @return ForwardMessagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvoice"> Documentation</a>
     */
    public ForwardMessagePost200Response sendVoicePost(CopyMessagePostRequestChatId chatId, String voice, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId) throws ApiException {
        ApiResponse<ForwardMessagePost200Response> localVarResp = sendVoicePostWithHttpInfo(chatId, voice, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, parseMode, replyMarkup, replyToMessageId);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
     * @param chatId  (required)
     * @param voice  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Voice message caption, 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of the voice message in seconds (optional)
     * @param parseMode Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @return ApiResponse&lt;ForwardMessagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvoice"> Documentation</a>
     */
    public ApiResponse<ForwardMessagePost200Response> sendVoicePostWithHttpInfo(CopyMessagePostRequestChatId chatId, String voice, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId) throws ApiException {
        okhttp3.Call localVarCall = sendVoicePostValidateBeforeCall(chatId, voice, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, parseMode, replyMarkup, replyToMessageId, null);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
     * @param chatId  (required)
     * @param voice  (required)
     * @param allowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found (optional)
     * @param caption Voice message caption, 0-1024 characters after entities parsing (optional)
     * @param captionEntities List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode* (optional)
     * @param disableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound. (optional)
     * @param duration Duration of the voice message in seconds (optional)
     * @param parseMode Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. (optional)
     * @param replyMarkup  (optional)
     * @param replyToMessageId If the message is a reply, ID of the original message (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#sendvoice"> Documentation</a>
     */
    public okhttp3.Call sendVoicePostAsync(CopyMessagePostRequestChatId chatId, String voice, Boolean allowSendingWithoutReply, String caption, List<MessageEntity> captionEntities, Boolean disableNotification, Integer duration, String parseMode, CopyMessagePostRequestReplyMarkup replyMarkup, Integer replyToMessageId, final ApiCallback<ForwardMessagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendVoicePostValidateBeforeCall(chatId, voice, allowSendingWithoutReply, caption, captionEntities, disableNotification, duration, parseMode, replyMarkup, replyToMessageId, _callback);
        Type localVarReturnType = new TypeToken<ForwardMessagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setChatAdministratorCustomTitlePost
     * @param setChatAdministratorCustomTitlePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatadministratorcustomtitle"> Documentation</a>
     */
    public okhttp3.Call setChatAdministratorCustomTitlePostCall(SetChatAdministratorCustomTitlePostRequest setChatAdministratorCustomTitlePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setChatAdministratorCustomTitlePostRequest;

        // create path and map variables
        String localVarPath = "/setChatAdministratorCustomTitle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setChatAdministratorCustomTitlePostValidateBeforeCall(SetChatAdministratorCustomTitlePostRequest setChatAdministratorCustomTitlePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setChatAdministratorCustomTitlePostRequest' is set
        if (setChatAdministratorCustomTitlePostRequest == null) {
            throw new ApiException("Missing the required parameter 'setChatAdministratorCustomTitlePostRequest' when calling setChatAdministratorCustomTitlePost(Async)");
        }

        return setChatAdministratorCustomTitlePostCall(setChatAdministratorCustomTitlePostRequest, _callback);

    }

    /**
     * 
     * Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
     * @param setChatAdministratorCustomTitlePostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatadministratorcustomtitle"> Documentation</a>
     */
    public AddStickerToSetPost200Response setChatAdministratorCustomTitlePost(SetChatAdministratorCustomTitlePostRequest setChatAdministratorCustomTitlePostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = setChatAdministratorCustomTitlePostWithHttpInfo(setChatAdministratorCustomTitlePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
     * @param setChatAdministratorCustomTitlePostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatadministratorcustomtitle"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> setChatAdministratorCustomTitlePostWithHttpInfo(SetChatAdministratorCustomTitlePostRequest setChatAdministratorCustomTitlePostRequest) throws ApiException {
        okhttp3.Call localVarCall = setChatAdministratorCustomTitlePostValidateBeforeCall(setChatAdministratorCustomTitlePostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
     * @param setChatAdministratorCustomTitlePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatadministratorcustomtitle"> Documentation</a>
     */
    public okhttp3.Call setChatAdministratorCustomTitlePostAsync(SetChatAdministratorCustomTitlePostRequest setChatAdministratorCustomTitlePostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setChatAdministratorCustomTitlePostValidateBeforeCall(setChatAdministratorCustomTitlePostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setChatDescriptionPost
     * @param setChatDescriptionPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatdescription"> Documentation</a>
     */
    public okhttp3.Call setChatDescriptionPostCall(SetChatDescriptionPostRequest setChatDescriptionPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setChatDescriptionPostRequest;

        // create path and map variables
        String localVarPath = "/setChatDescription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setChatDescriptionPostValidateBeforeCall(SetChatDescriptionPostRequest setChatDescriptionPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setChatDescriptionPostRequest' is set
        if (setChatDescriptionPostRequest == null) {
            throw new ApiException("Missing the required parameter 'setChatDescriptionPostRequest' when calling setChatDescriptionPost(Async)");
        }

        return setChatDescriptionPostCall(setChatDescriptionPostRequest, _callback);

    }

    /**
     * 
     * Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param setChatDescriptionPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatdescription"> Documentation</a>
     */
    public AddStickerToSetPost200Response setChatDescriptionPost(SetChatDescriptionPostRequest setChatDescriptionPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = setChatDescriptionPostWithHttpInfo(setChatDescriptionPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param setChatDescriptionPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatdescription"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> setChatDescriptionPostWithHttpInfo(SetChatDescriptionPostRequest setChatDescriptionPostRequest) throws ApiException {
        okhttp3.Call localVarCall = setChatDescriptionPostValidateBeforeCall(setChatDescriptionPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param setChatDescriptionPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatdescription"> Documentation</a>
     */
    public okhttp3.Call setChatDescriptionPostAsync(SetChatDescriptionPostRequest setChatDescriptionPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setChatDescriptionPostValidateBeforeCall(setChatDescriptionPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setChatPermissionsPost
     * @param setChatPermissionsPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatpermissions"> Documentation</a>
     */
    public okhttp3.Call setChatPermissionsPostCall(SetChatPermissionsPostRequest setChatPermissionsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setChatPermissionsPostRequest;

        // create path and map variables
        String localVarPath = "/setChatPermissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setChatPermissionsPostValidateBeforeCall(SetChatPermissionsPostRequest setChatPermissionsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setChatPermissionsPostRequest' is set
        if (setChatPermissionsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'setChatPermissionsPostRequest' when calling setChatPermissionsPost(Async)");
        }

        return setChatPermissionsPostCall(setChatPermissionsPostRequest, _callback);

    }

    /**
     * 
     * Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\\_restrict\\_members* admin rights. Returns *True* on success.
     * @param setChatPermissionsPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatpermissions"> Documentation</a>
     */
    public AddStickerToSetPost200Response setChatPermissionsPost(SetChatPermissionsPostRequest setChatPermissionsPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = setChatPermissionsPostWithHttpInfo(setChatPermissionsPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\\_restrict\\_members* admin rights. Returns *True* on success.
     * @param setChatPermissionsPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatpermissions"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> setChatPermissionsPostWithHttpInfo(SetChatPermissionsPostRequest setChatPermissionsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = setChatPermissionsPostValidateBeforeCall(setChatPermissionsPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\\_restrict\\_members* admin rights. Returns *True* on success.
     * @param setChatPermissionsPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatpermissions"> Documentation</a>
     */
    public okhttp3.Call setChatPermissionsPostAsync(SetChatPermissionsPostRequest setChatPermissionsPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setChatPermissionsPostValidateBeforeCall(setChatPermissionsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setChatPhotoPost
     * @param chatId  (required)
     * @param photo This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatphoto"> Documentation</a>
     */
    public okhttp3.Call setChatPhotoPostCall(CopyMessagePostRequestChatId chatId, Object photo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setChatPhoto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (chatId != null) {
            localVarFormParams.put("chat_id", chatId);
        }

        if (photo != null) {
            localVarFormParams.put("photo", photo);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setChatPhotoPostValidateBeforeCall(CopyMessagePostRequestChatId chatId, Object photo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling setChatPhotoPost(Async)");
        }

        // verify the required parameter 'photo' is set
        if (photo == null) {
            throw new ApiException("Missing the required parameter 'photo' when calling setChatPhotoPost(Async)");
        }

        return setChatPhotoPostCall(chatId, photo, _callback);

    }

    /**
     * 
     * Use this method to set a new profile photo for the chat. Photos can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param chatId  (required)
     * @param photo This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatphoto"> Documentation</a>
     */
    public AddStickerToSetPost200Response setChatPhotoPost(CopyMessagePostRequestChatId chatId, Object photo) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = setChatPhotoPostWithHttpInfo(chatId, photo);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to set a new profile photo for the chat. Photos can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param chatId  (required)
     * @param photo This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatphoto"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> setChatPhotoPostWithHttpInfo(CopyMessagePostRequestChatId chatId, Object photo) throws ApiException {
        okhttp3.Call localVarCall = setChatPhotoPostValidateBeforeCall(chatId, photo, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to set a new profile photo for the chat. Photos can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param chatId  (required)
     * @param photo This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatphoto"> Documentation</a>
     */
    public okhttp3.Call setChatPhotoPostAsync(CopyMessagePostRequestChatId chatId, Object photo, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setChatPhotoPostValidateBeforeCall(chatId, photo, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setChatStickerSetPost
     * @param setChatStickerSetPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatstickerset"> Documentation</a>
     */
    public okhttp3.Call setChatStickerSetPostCall(SetChatStickerSetPostRequest setChatStickerSetPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setChatStickerSetPostRequest;

        // create path and map variables
        String localVarPath = "/setChatStickerSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setChatStickerSetPostValidateBeforeCall(SetChatStickerSetPostRequest setChatStickerSetPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setChatStickerSetPostRequest' is set
        if (setChatStickerSetPostRequest == null) {
            throw new ApiException("Missing the required parameter 'setChatStickerSetPostRequest' when calling setChatStickerSetPost(Async)");
        }

        return setChatStickerSetPostCall(setChatStickerSetPostRequest, _callback);

    }

    /**
     * 
     * Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
     * @param setChatStickerSetPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatstickerset"> Documentation</a>
     */
    public AddStickerToSetPost200Response setChatStickerSetPost(SetChatStickerSetPostRequest setChatStickerSetPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = setChatStickerSetPostWithHttpInfo(setChatStickerSetPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
     * @param setChatStickerSetPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatstickerset"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> setChatStickerSetPostWithHttpInfo(SetChatStickerSetPostRequest setChatStickerSetPostRequest) throws ApiException {
        okhttp3.Call localVarCall = setChatStickerSetPostValidateBeforeCall(setChatStickerSetPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
     * @param setChatStickerSetPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchatstickerset"> Documentation</a>
     */
    public okhttp3.Call setChatStickerSetPostAsync(SetChatStickerSetPostRequest setChatStickerSetPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setChatStickerSetPostValidateBeforeCall(setChatStickerSetPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setChatTitlePost
     * @param setChatTitlePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchattitle"> Documentation</a>
     */
    public okhttp3.Call setChatTitlePostCall(SetChatTitlePostRequest setChatTitlePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setChatTitlePostRequest;

        // create path and map variables
        String localVarPath = "/setChatTitle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setChatTitlePostValidateBeforeCall(SetChatTitlePostRequest setChatTitlePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setChatTitlePostRequest' is set
        if (setChatTitlePostRequest == null) {
            throw new ApiException("Missing the required parameter 'setChatTitlePostRequest' when calling setChatTitlePost(Async)");
        }

        return setChatTitlePostCall(setChatTitlePostRequest, _callback);

    }

    /**
     * 
     * Use this method to change the title of a chat. Titles can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param setChatTitlePostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchattitle"> Documentation</a>
     */
    public AddStickerToSetPost200Response setChatTitlePost(SetChatTitlePostRequest setChatTitlePostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = setChatTitlePostWithHttpInfo(setChatTitlePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to change the title of a chat. Titles can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param setChatTitlePostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchattitle"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> setChatTitlePostWithHttpInfo(SetChatTitlePostRequest setChatTitlePostRequest) throws ApiException {
        okhttp3.Call localVarCall = setChatTitlePostValidateBeforeCall(setChatTitlePostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to change the title of a chat. Titles can&#39;t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param setChatTitlePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setchattitle"> Documentation</a>
     */
    public okhttp3.Call setChatTitlePostAsync(SetChatTitlePostRequest setChatTitlePostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setChatTitlePostValidateBeforeCall(setChatTitlePostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setGameScorePost
     * @param setGameScorePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setgamescore"> Documentation</a>
     */
    public okhttp3.Call setGameScorePostCall(SetGameScorePostRequest setGameScorePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setGameScorePostRequest;

        // create path and map variables
        String localVarPath = "/setGameScore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setGameScorePostValidateBeforeCall(SetGameScorePostRequest setGameScorePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setGameScorePostRequest' is set
        if (setGameScorePostRequest == null) {
            throw new ApiException("Missing the required parameter 'setGameScorePostRequest' when calling setGameScorePost(Async)");
        }

        return setGameScorePostCall(setGameScorePostRequest, _callback);

    }

    /**
     * 
     * Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user&#39;s current score in the chat and *force* is *False*.
     * @param setGameScorePostRequest  (required)
     * @return EditMessageCaptionPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setgamescore"> Documentation</a>
     */
    public EditMessageCaptionPost200Response setGameScorePost(SetGameScorePostRequest setGameScorePostRequest) throws ApiException {
        ApiResponse<EditMessageCaptionPost200Response> localVarResp = setGameScorePostWithHttpInfo(setGameScorePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user&#39;s current score in the chat and *force* is *False*.
     * @param setGameScorePostRequest  (required)
     * @return ApiResponse&lt;EditMessageCaptionPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setgamescore"> Documentation</a>
     */
    public ApiResponse<EditMessageCaptionPost200Response> setGameScorePostWithHttpInfo(SetGameScorePostRequest setGameScorePostRequest) throws ApiException {
        okhttp3.Call localVarCall = setGameScorePostValidateBeforeCall(setGameScorePostRequest, null);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user&#39;s current score in the chat and *force* is *False*.
     * @param setGameScorePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setgamescore"> Documentation</a>
     */
    public okhttp3.Call setGameScorePostAsync(SetGameScorePostRequest setGameScorePostRequest, final ApiCallback<EditMessageCaptionPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setGameScorePostValidateBeforeCall(setGameScorePostRequest, _callback);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setMyCommandsPost
     * @param setMyCommandsPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setmycommands"> Documentation</a>
     */
    public okhttp3.Call setMyCommandsPostCall(SetMyCommandsPostRequest setMyCommandsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setMyCommandsPostRequest;

        // create path and map variables
        String localVarPath = "/setMyCommands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setMyCommandsPostValidateBeforeCall(SetMyCommandsPostRequest setMyCommandsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setMyCommandsPostRequest' is set
        if (setMyCommandsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'setMyCommandsPostRequest' when calling setMyCommandsPost(Async)");
        }

        return setMyCommandsPostCall(setMyCommandsPostRequest, _callback);

    }

    /**
     * 
     * Use this method to change the list of the bot&#39;s commands. Returns *True* on success.
     * @param setMyCommandsPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setmycommands"> Documentation</a>
     */
    public AddStickerToSetPost200Response setMyCommandsPost(SetMyCommandsPostRequest setMyCommandsPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = setMyCommandsPostWithHttpInfo(setMyCommandsPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to change the list of the bot&#39;s commands. Returns *True* on success.
     * @param setMyCommandsPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setmycommands"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> setMyCommandsPostWithHttpInfo(SetMyCommandsPostRequest setMyCommandsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = setMyCommandsPostValidateBeforeCall(setMyCommandsPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to change the list of the bot&#39;s commands. Returns *True* on success.
     * @param setMyCommandsPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setmycommands"> Documentation</a>
     */
    public okhttp3.Call setMyCommandsPostAsync(SetMyCommandsPostRequest setMyCommandsPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setMyCommandsPostValidateBeforeCall(setMyCommandsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPassportDataErrorsPost
     * @param setPassportDataErrorsPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setpassportdataerrors"> Documentation</a>
     */
    public okhttp3.Call setPassportDataErrorsPostCall(SetPassportDataErrorsPostRequest setPassportDataErrorsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setPassportDataErrorsPostRequest;

        // create path and map variables
        String localVarPath = "/setPassportDataErrors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPassportDataErrorsPostValidateBeforeCall(SetPassportDataErrorsPostRequest setPassportDataErrorsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setPassportDataErrorsPostRequest' is set
        if (setPassportDataErrorsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'setPassportDataErrorsPostRequest' when calling setPassportDataErrorsPost(Async)");
        }

        return setPassportDataErrorsPostCall(setPassportDataErrorsPostRequest, _callback);

    }

    /**
     * 
     * Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.  Use this if the data submitted by the user doesn&#39;t satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
     * @param setPassportDataErrorsPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setpassportdataerrors"> Documentation</a>
     */
    public AddStickerToSetPost200Response setPassportDataErrorsPost(SetPassportDataErrorsPostRequest setPassportDataErrorsPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = setPassportDataErrorsPostWithHttpInfo(setPassportDataErrorsPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.  Use this if the data submitted by the user doesn&#39;t satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
     * @param setPassportDataErrorsPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setpassportdataerrors"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> setPassportDataErrorsPostWithHttpInfo(SetPassportDataErrorsPostRequest setPassportDataErrorsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = setPassportDataErrorsPostValidateBeforeCall(setPassportDataErrorsPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.  Use this if the data submitted by the user doesn&#39;t satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
     * @param setPassportDataErrorsPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setpassportdataerrors"> Documentation</a>
     */
    public okhttp3.Call setPassportDataErrorsPostAsync(SetPassportDataErrorsPostRequest setPassportDataErrorsPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPassportDataErrorsPostValidateBeforeCall(setPassportDataErrorsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setStickerPositionInSetPost
     * @param setStickerPositionInSetPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setstickerpositioninset"> Documentation</a>
     */
    public okhttp3.Call setStickerPositionInSetPostCall(SetStickerPositionInSetPostRequest setStickerPositionInSetPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setStickerPositionInSetPostRequest;

        // create path and map variables
        String localVarPath = "/setStickerPositionInSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setStickerPositionInSetPostValidateBeforeCall(SetStickerPositionInSetPostRequest setStickerPositionInSetPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setStickerPositionInSetPostRequest' is set
        if (setStickerPositionInSetPostRequest == null) {
            throw new ApiException("Missing the required parameter 'setStickerPositionInSetPostRequest' when calling setStickerPositionInSetPost(Async)");
        }

        return setStickerPositionInSetPostCall(setStickerPositionInSetPostRequest, _callback);

    }

    /**
     * 
     * Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
     * @param setStickerPositionInSetPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setstickerpositioninset"> Documentation</a>
     */
    public AddStickerToSetPost200Response setStickerPositionInSetPost(SetStickerPositionInSetPostRequest setStickerPositionInSetPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = setStickerPositionInSetPostWithHttpInfo(setStickerPositionInSetPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
     * @param setStickerPositionInSetPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setstickerpositioninset"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> setStickerPositionInSetPostWithHttpInfo(SetStickerPositionInSetPostRequest setStickerPositionInSetPostRequest) throws ApiException {
        okhttp3.Call localVarCall = setStickerPositionInSetPostValidateBeforeCall(setStickerPositionInSetPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
     * @param setStickerPositionInSetPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setstickerpositioninset"> Documentation</a>
     */
    public okhttp3.Call setStickerPositionInSetPostAsync(SetStickerPositionInSetPostRequest setStickerPositionInSetPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setStickerPositionInSetPostValidateBeforeCall(setStickerPositionInSetPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setStickerSetThumbPost
     * @param name Sticker set name (required)
     * @param userId User identifier of the sticker set owner (required)
     * @param thumb  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setstickersetthumb"> Documentation</a>
     */
    public okhttp3.Call setStickerSetThumbPostCall(String name, Integer userId, String thumb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setStickerSetThumb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (thumb != null) {
            localVarFormParams.put("thumb", thumb);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setStickerSetThumbPostValidateBeforeCall(String name, Integer userId, String thumb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setStickerSetThumbPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setStickerSetThumbPost(Async)");
        }

        return setStickerSetThumbPostCall(name, userId, thumb, _callback);

    }

    /**
     * 
     * Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
     * @param name Sticker set name (required)
     * @param userId User identifier of the sticker set owner (required)
     * @param thumb  (optional)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setstickersetthumb"> Documentation</a>
     */
    public AddStickerToSetPost200Response setStickerSetThumbPost(String name, Integer userId, String thumb) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = setStickerSetThumbPostWithHttpInfo(name, userId, thumb);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
     * @param name Sticker set name (required)
     * @param userId User identifier of the sticker set owner (required)
     * @param thumb  (optional)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setstickersetthumb"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> setStickerSetThumbPostWithHttpInfo(String name, Integer userId, String thumb) throws ApiException {
        okhttp3.Call localVarCall = setStickerSetThumbPostValidateBeforeCall(name, userId, thumb, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
     * @param name Sticker set name (required)
     * @param userId User identifier of the sticker set owner (required)
     * @param thumb  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setstickersetthumb"> Documentation</a>
     */
    public okhttp3.Call setStickerSetThumbPostAsync(String name, Integer userId, String thumb, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setStickerSetThumbPostValidateBeforeCall(name, userId, thumb, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setWebhookPost
     * @param url HTTPS url to send updates to. Use an empty string to remove webhook integration (required)
     * @param allowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\\\_channel\\\\_post”, “callback\\\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.   Please note that this parameter doesn&#39;t affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time. (optional)
     * @param certificate This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @param dropPendingUpdates Pass *True* to drop all pending updates (optional)
     * @param ipAddress The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS (optional)
     * @param maxConnections Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot&#39;s server, and higher values to increase your bot&#39;s throughput. (optional, default to 40)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setwebhook"> Documentation</a>
     */
    public okhttp3.Call setWebhookPostCall(String url, List<String> allowedUpdates, Object certificate, Boolean dropPendingUpdates, String ipAddress, Integer maxConnections, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setWebhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowedUpdates != null) {
            localVarFormParams.put("allowed_updates", allowedUpdates);
        }

        if (certificate != null) {
            localVarFormParams.put("certificate", certificate);
        }

        if (dropPendingUpdates != null) {
            localVarFormParams.put("drop_pending_updates", dropPendingUpdates);
        }

        if (ipAddress != null) {
            localVarFormParams.put("ip_address", ipAddress);
        }

        if (maxConnections != null) {
            localVarFormParams.put("max_connections", maxConnections);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setWebhookPostValidateBeforeCall(String url, List<String> allowedUpdates, Object certificate, Boolean dropPendingUpdates, String ipAddress, Integer maxConnections, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling setWebhookPost(Async)");
        }

        return setWebhookPostCall(url, allowedUpdates, certificate, dropPendingUpdates, ipAddress, maxConnections, _callback);

    }

    /**
     * 
     * Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.  If you&#39;d like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. &#x60;https://www.example.com/&lt;token&gt;&#x60;. Since nobody else knows your bot&#39;s token, you can be pretty sure it&#39;s us.
     * @param url HTTPS url to send updates to. Use an empty string to remove webhook integration (required)
     * @param allowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\\\_channel\\\\_post”, “callback\\\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.   Please note that this parameter doesn&#39;t affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time. (optional)
     * @param certificate This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @param dropPendingUpdates Pass *True* to drop all pending updates (optional)
     * @param ipAddress The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS (optional)
     * @param maxConnections Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot&#39;s server, and higher values to increase your bot&#39;s throughput. (optional, default to 40)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setwebhook"> Documentation</a>
     */
    public AddStickerToSetPost200Response setWebhookPost(String url, List<String> allowedUpdates, Object certificate, Boolean dropPendingUpdates, String ipAddress, Integer maxConnections) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = setWebhookPostWithHttpInfo(url, allowedUpdates, certificate, dropPendingUpdates, ipAddress, maxConnections);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.  If you&#39;d like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. &#x60;https://www.example.com/&lt;token&gt;&#x60;. Since nobody else knows your bot&#39;s token, you can be pretty sure it&#39;s us.
     * @param url HTTPS url to send updates to. Use an empty string to remove webhook integration (required)
     * @param allowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\\\_channel\\\\_post”, “callback\\\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.   Please note that this parameter doesn&#39;t affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time. (optional)
     * @param certificate This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @param dropPendingUpdates Pass *True* to drop all pending updates (optional)
     * @param ipAddress The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS (optional)
     * @param maxConnections Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot&#39;s server, and higher values to increase your bot&#39;s throughput. (optional, default to 40)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setwebhook"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> setWebhookPostWithHttpInfo(String url, List<String> allowedUpdates, Object certificate, Boolean dropPendingUpdates, String ipAddress, Integer maxConnections) throws ApiException {
        okhttp3.Call localVarCall = setWebhookPostValidateBeforeCall(url, allowedUpdates, certificate, dropPendingUpdates, ipAddress, maxConnections, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.  If you&#39;d like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. &#x60;https://www.example.com/&lt;token&gt;&#x60;. Since nobody else knows your bot&#39;s token, you can be pretty sure it&#39;s us.
     * @param url HTTPS url to send updates to. Use an empty string to remove webhook integration (required)
     * @param allowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\\\_channel\\\\_post”, “callback\\\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.   Please note that this parameter doesn&#39;t affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time. (optional)
     * @param certificate This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (optional)
     * @param dropPendingUpdates Pass *True* to drop all pending updates (optional)
     * @param ipAddress The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS (optional)
     * @param maxConnections Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot&#39;s server, and higher values to increase your bot&#39;s throughput. (optional, default to 40)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#setwebhook"> Documentation</a>
     */
    public okhttp3.Call setWebhookPostAsync(String url, List<String> allowedUpdates, Object certificate, Boolean dropPendingUpdates, String ipAddress, Integer maxConnections, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setWebhookPostValidateBeforeCall(url, allowedUpdates, certificate, dropPendingUpdates, ipAddress, maxConnections, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopMessageLiveLocationPost
     * @param stopMessageLiveLocationPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#stopmessagelivelocation"> Documentation</a>
     */
    public okhttp3.Call stopMessageLiveLocationPostCall(StopMessageLiveLocationPostRequest stopMessageLiveLocationPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopMessageLiveLocationPostRequest;

        // create path and map variables
        String localVarPath = "/stopMessageLiveLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopMessageLiveLocationPostValidateBeforeCall(StopMessageLiveLocationPostRequest stopMessageLiveLocationPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopMessageLiveLocationPostRequest' is set
        if (stopMessageLiveLocationPostRequest == null) {
            throw new ApiException("Missing the required parameter 'stopMessageLiveLocationPostRequest' when calling stopMessageLiveLocationPost(Async)");
        }

        return stopMessageLiveLocationPostCall(stopMessageLiveLocationPostRequest, _callback);

    }

    /**
     * 
     * Use this method to stop updating a live location message before *live\\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param stopMessageLiveLocationPostRequest  (required)
     * @return EditMessageCaptionPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#stopmessagelivelocation"> Documentation</a>
     */
    public EditMessageCaptionPost200Response stopMessageLiveLocationPost(StopMessageLiveLocationPostRequest stopMessageLiveLocationPostRequest) throws ApiException {
        ApiResponse<EditMessageCaptionPost200Response> localVarResp = stopMessageLiveLocationPostWithHttpInfo(stopMessageLiveLocationPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to stop updating a live location message before *live\\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param stopMessageLiveLocationPostRequest  (required)
     * @return ApiResponse&lt;EditMessageCaptionPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#stopmessagelivelocation"> Documentation</a>
     */
    public ApiResponse<EditMessageCaptionPost200Response> stopMessageLiveLocationPostWithHttpInfo(StopMessageLiveLocationPostRequest stopMessageLiveLocationPostRequest) throws ApiException {
        okhttp3.Call localVarCall = stopMessageLiveLocationPostValidateBeforeCall(stopMessageLiveLocationPostRequest, null);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to stop updating a live location message before *live\\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param stopMessageLiveLocationPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#stopmessagelivelocation"> Documentation</a>
     */
    public okhttp3.Call stopMessageLiveLocationPostAsync(StopMessageLiveLocationPostRequest stopMessageLiveLocationPostRequest, final ApiCallback<EditMessageCaptionPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopMessageLiveLocationPostValidateBeforeCall(stopMessageLiveLocationPostRequest, _callback);
        Type localVarReturnType = new TypeToken<EditMessageCaptionPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopPollPost
     * @param stopPollPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#stoppoll"> Documentation</a>
     */
    public okhttp3.Call stopPollPostCall(StopPollPostRequest stopPollPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopPollPostRequest;

        // create path and map variables
        String localVarPath = "/stopPoll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopPollPostValidateBeforeCall(StopPollPostRequest stopPollPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopPollPostRequest' is set
        if (stopPollPostRequest == null) {
            throw new ApiException("Missing the required parameter 'stopPollPostRequest' when calling stopPollPost(Async)");
        }

        return stopPollPostCall(stopPollPostRequest, _callback);

    }

    /**
     * 
     * Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
     * @param stopPollPostRequest  (required)
     * @return StopPollPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#stoppoll"> Documentation</a>
     */
    public StopPollPost200Response stopPollPost(StopPollPostRequest stopPollPostRequest) throws ApiException {
        ApiResponse<StopPollPost200Response> localVarResp = stopPollPostWithHttpInfo(stopPollPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
     * @param stopPollPostRequest  (required)
     * @return ApiResponse&lt;StopPollPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#stoppoll"> Documentation</a>
     */
    public ApiResponse<StopPollPost200Response> stopPollPostWithHttpInfo(StopPollPostRequest stopPollPostRequest) throws ApiException {
        okhttp3.Call localVarCall = stopPollPostValidateBeforeCall(stopPollPostRequest, null);
        Type localVarReturnType = new TypeToken<StopPollPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
     * @param stopPollPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#stoppoll"> Documentation</a>
     */
    public okhttp3.Call stopPollPostAsync(StopPollPostRequest stopPollPostRequest, final ApiCallback<StopPollPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopPollPostValidateBeforeCall(stopPollPostRequest, _callback);
        Type localVarReturnType = new TypeToken<StopPollPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unbanChatMemberPost
     * @param unbanChatMemberPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unbanchatmember"> Documentation</a>
     */
    public okhttp3.Call unbanChatMemberPostCall(UnbanChatMemberPostRequest unbanChatMemberPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unbanChatMemberPostRequest;

        // create path and map variables
        String localVarPath = "/unbanChatMember";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unbanChatMemberPostValidateBeforeCall(UnbanChatMemberPostRequest unbanChatMemberPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'unbanChatMemberPostRequest' is set
        if (unbanChatMemberPostRequest == null) {
            throw new ApiException("Missing the required parameter 'unbanChatMemberPostRequest' when calling unbanChatMemberPost(Async)");
        }

        return unbanChatMemberPostCall(unbanChatMemberPostRequest, _callback);

    }

    /**
     * 
     * Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don&#39;t want this, use the parameter *only\\_if\\_banned*. Returns *True* on success.
     * @param unbanChatMemberPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unbanchatmember"> Documentation</a>
     */
    public AddStickerToSetPost200Response unbanChatMemberPost(UnbanChatMemberPostRequest unbanChatMemberPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = unbanChatMemberPostWithHttpInfo(unbanChatMemberPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don&#39;t want this, use the parameter *only\\_if\\_banned*. Returns *True* on success.
     * @param unbanChatMemberPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unbanchatmember"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> unbanChatMemberPostWithHttpInfo(UnbanChatMemberPostRequest unbanChatMemberPostRequest) throws ApiException {
        okhttp3.Call localVarCall = unbanChatMemberPostValidateBeforeCall(unbanChatMemberPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don&#39;t want this, use the parameter *only\\_if\\_banned*. Returns *True* on success.
     * @param unbanChatMemberPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unbanchatmember"> Documentation</a>
     */
    public okhttp3.Call unbanChatMemberPostAsync(UnbanChatMemberPostRequest unbanChatMemberPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unbanChatMemberPostValidateBeforeCall(unbanChatMemberPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpinAllChatMessagesPost
     * @param deleteChatPhotoPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unpinallchatmessages"> Documentation</a>
     */
    public okhttp3.Call unpinAllChatMessagesPostCall(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteChatPhotoPostRequest;

        // create path and map variables
        String localVarPath = "/unpinAllChatMessages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpinAllChatMessagesPostValidateBeforeCall(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteChatPhotoPostRequest' is set
        if (deleteChatPhotoPostRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteChatPhotoPostRequest' when calling unpinAllChatMessagesPost(Async)");
        }

        return unpinAllChatMessagesPostCall(deleteChatPhotoPostRequest, _callback);

    }

    /**
     * 
     * Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can\\_pin\\_messages&#39; admin right in a supergroup or &#39;can\\_edit\\_messages&#39; admin right in a channel. Returns *True* on success.
     * @param deleteChatPhotoPostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unpinallchatmessages"> Documentation</a>
     */
    public AddStickerToSetPost200Response unpinAllChatMessagesPost(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = unpinAllChatMessagesPostWithHttpInfo(deleteChatPhotoPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can\\_pin\\_messages&#39; admin right in a supergroup or &#39;can\\_edit\\_messages&#39; admin right in a channel. Returns *True* on success.
     * @param deleteChatPhotoPostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unpinallchatmessages"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> unpinAllChatMessagesPostWithHttpInfo(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest) throws ApiException {
        okhttp3.Call localVarCall = unpinAllChatMessagesPostValidateBeforeCall(deleteChatPhotoPostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can\\_pin\\_messages&#39; admin right in a supergroup or &#39;can\\_edit\\_messages&#39; admin right in a channel. Returns *True* on success.
     * @param deleteChatPhotoPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unpinallchatmessages"> Documentation</a>
     */
    public okhttp3.Call unpinAllChatMessagesPostAsync(DeleteChatPhotoPostRequest deleteChatPhotoPostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpinAllChatMessagesPostValidateBeforeCall(deleteChatPhotoPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpinChatMessagePost
     * @param unpinChatMessagePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unpinchatmessage"> Documentation</a>
     */
    public okhttp3.Call unpinChatMessagePostCall(UnpinChatMessagePostRequest unpinChatMessagePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unpinChatMessagePostRequest;

        // create path and map variables
        String localVarPath = "/unpinChatMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpinChatMessagePostValidateBeforeCall(UnpinChatMessagePostRequest unpinChatMessagePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'unpinChatMessagePostRequest' is set
        if (unpinChatMessagePostRequest == null) {
            throw new ApiException("Missing the required parameter 'unpinChatMessagePostRequest' when calling unpinChatMessagePost(Async)");
        }

        return unpinChatMessagePostCall(unpinChatMessagePostRequest, _callback);

    }

    /**
     * 
     * Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can\\_pin\\_messages&#39; admin right in a supergroup or &#39;can\\_edit\\_messages&#39; admin right in a channel. Returns *True* on success.
     * @param unpinChatMessagePostRequest  (required)
     * @return AddStickerToSetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unpinchatmessage"> Documentation</a>
     */
    public AddStickerToSetPost200Response unpinChatMessagePost(UnpinChatMessagePostRequest unpinChatMessagePostRequest) throws ApiException {
        ApiResponse<AddStickerToSetPost200Response> localVarResp = unpinChatMessagePostWithHttpInfo(unpinChatMessagePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can\\_pin\\_messages&#39; admin right in a supergroup or &#39;can\\_edit\\_messages&#39; admin right in a channel. Returns *True* on success.
     * @param unpinChatMessagePostRequest  (required)
     * @return ApiResponse&lt;AddStickerToSetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unpinchatmessage"> Documentation</a>
     */
    public ApiResponse<AddStickerToSetPost200Response> unpinChatMessagePostWithHttpInfo(UnpinChatMessagePostRequest unpinChatMessagePostRequest) throws ApiException {
        okhttp3.Call localVarCall = unpinChatMessagePostValidateBeforeCall(unpinChatMessagePostRequest, null);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the &#39;can\\_pin\\_messages&#39; admin right in a supergroup or &#39;can\\_edit\\_messages&#39; admin right in a channel. Returns *True* on success.
     * @param unpinChatMessagePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#unpinchatmessage"> Documentation</a>
     */
    public okhttp3.Call unpinChatMessagePostAsync(UnpinChatMessagePostRequest unpinChatMessagePostRequest, final ApiCallback<AddStickerToSetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpinChatMessagePostValidateBeforeCall(unpinChatMessagePostRequest, _callback);
        Type localVarReturnType = new TypeToken<AddStickerToSetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadStickerFilePost
     * @param pngSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (required)
     * @param userId User identifier of sticker file owner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#uploadstickerfile"> Documentation</a>
     */
    public okhttp3.Call uploadStickerFilePostCall(Object pngSticker, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploadStickerFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pngSticker != null) {
            localVarFormParams.put("png_sticker", pngSticker);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadStickerFilePostValidateBeforeCall(Object pngSticker, Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pngSticker' is set
        if (pngSticker == null) {
            throw new ApiException("Missing the required parameter 'pngSticker' when calling uploadStickerFilePost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling uploadStickerFilePost(Async)");
        }

        return uploadStickerFilePostCall(pngSticker, userId, _callback);

    }

    /**
     * 
     * Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
     * @param pngSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (required)
     * @param userId User identifier of sticker file owner (required)
     * @return GetFilePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#uploadstickerfile"> Documentation</a>
     */
    public GetFilePost200Response uploadStickerFilePost(Object pngSticker, Integer userId) throws ApiException {
        ApiResponse<GetFilePost200Response> localVarResp = uploadStickerFilePostWithHttpInfo(pngSticker, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
     * @param pngSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (required)
     * @param userId User identifier of sticker file owner (required)
     * @return ApiResponse&lt;GetFilePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#uploadstickerfile"> Documentation</a>
     */
    public ApiResponse<GetFilePost200Response> uploadStickerFilePostWithHttpInfo(Object pngSticker, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = uploadStickerFilePostValidateBeforeCall(pngSticker, userId, null);
        Type localVarReturnType = new TypeToken<GetFilePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
     * @param pngSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. (required)
     * @param userId User identifier of sticker file owner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://core.telegram.org/bots/api/#uploadstickerfile"> Documentation</a>
     */
    public okhttp3.Call uploadStickerFilePostAsync(Object pngSticker, Integer userId, final ApiCallback<GetFilePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadStickerFilePostValidateBeforeCall(pngSticker, userId, _callback);
        Type localVarReturnType = new TypeToken<GetFilePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
