/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PassportElementErrorDataField;
import org.openapitools.client.model.PassportElementErrorFile;
import org.openapitools.client.model.PassportElementErrorFiles;
import org.openapitools.client.model.PassportElementErrorFrontSide;
import org.openapitools.client.model.PassportElementErrorReverseSide;
import org.openapitools.client.model.PassportElementErrorSelfie;
import org.openapitools.client.model.PassportElementErrorTranslationFile;
import org.openapitools.client.model.PassportElementErrorTranslationFiles;
import org.openapitools.client.model.PassportElementErrorUnspecified;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PassportElementError extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(PassportElementError.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PassportElementError.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PassportElementError' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PassportElementErrorDataField> adapterPassportElementErrorDataField = gson.getDelegateAdapter(this, TypeToken.get(PassportElementErrorDataField.class));
            final TypeAdapter<PassportElementErrorFrontSide> adapterPassportElementErrorFrontSide = gson.getDelegateAdapter(this, TypeToken.get(PassportElementErrorFrontSide.class));
            final TypeAdapter<PassportElementErrorReverseSide> adapterPassportElementErrorReverseSide = gson.getDelegateAdapter(this, TypeToken.get(PassportElementErrorReverseSide.class));
            final TypeAdapter<PassportElementErrorSelfie> adapterPassportElementErrorSelfie = gson.getDelegateAdapter(this, TypeToken.get(PassportElementErrorSelfie.class));
            final TypeAdapter<PassportElementErrorFile> adapterPassportElementErrorFile = gson.getDelegateAdapter(this, TypeToken.get(PassportElementErrorFile.class));
            final TypeAdapter<PassportElementErrorFiles> adapterPassportElementErrorFiles = gson.getDelegateAdapter(this, TypeToken.get(PassportElementErrorFiles.class));
            final TypeAdapter<PassportElementErrorTranslationFile> adapterPassportElementErrorTranslationFile = gson.getDelegateAdapter(this, TypeToken.get(PassportElementErrorTranslationFile.class));
            final TypeAdapter<PassportElementErrorTranslationFiles> adapterPassportElementErrorTranslationFiles = gson.getDelegateAdapter(this, TypeToken.get(PassportElementErrorTranslationFiles.class));
            final TypeAdapter<PassportElementErrorUnspecified> adapterPassportElementErrorUnspecified = gson.getDelegateAdapter(this, TypeToken.get(PassportElementErrorUnspecified.class));

            return (TypeAdapter<T>) new TypeAdapter<PassportElementError>() {
                @Override
                public void write(JsonWriter out, PassportElementError value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `PassportElementErrorDataField`
                    if (value.getActualInstance() instanceof PassportElementErrorDataField) {
                        JsonElement element = adapterPassportElementErrorDataField.toJsonTree((PassportElementErrorDataField)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PassportElementErrorFrontSide`
                    if (value.getActualInstance() instanceof PassportElementErrorFrontSide) {
                        JsonElement element = adapterPassportElementErrorFrontSide.toJsonTree((PassportElementErrorFrontSide)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PassportElementErrorReverseSide`
                    if (value.getActualInstance() instanceof PassportElementErrorReverseSide) {
                        JsonElement element = adapterPassportElementErrorReverseSide.toJsonTree((PassportElementErrorReverseSide)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PassportElementErrorSelfie`
                    if (value.getActualInstance() instanceof PassportElementErrorSelfie) {
                        JsonElement element = adapterPassportElementErrorSelfie.toJsonTree((PassportElementErrorSelfie)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PassportElementErrorFile`
                    if (value.getActualInstance() instanceof PassportElementErrorFile) {
                        JsonElement element = adapterPassportElementErrorFile.toJsonTree((PassportElementErrorFile)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PassportElementErrorFiles`
                    if (value.getActualInstance() instanceof PassportElementErrorFiles) {
                        JsonElement element = adapterPassportElementErrorFiles.toJsonTree((PassportElementErrorFiles)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PassportElementErrorTranslationFile`
                    if (value.getActualInstance() instanceof PassportElementErrorTranslationFile) {
                        JsonElement element = adapterPassportElementErrorTranslationFile.toJsonTree((PassportElementErrorTranslationFile)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PassportElementErrorTranslationFiles`
                    if (value.getActualInstance() instanceof PassportElementErrorTranslationFiles) {
                        JsonElement element = adapterPassportElementErrorTranslationFiles.toJsonTree((PassportElementErrorTranslationFiles)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PassportElementErrorUnspecified`
                    if (value.getActualInstance() instanceof PassportElementErrorUnspecified) {
                        JsonElement element = adapterPassportElementErrorUnspecified.toJsonTree((PassportElementErrorUnspecified)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: PassportElementErrorDataField, PassportElementErrorFile, PassportElementErrorFiles, PassportElementErrorFrontSide, PassportElementErrorReverseSide, PassportElementErrorSelfie, PassportElementErrorTranslationFile, PassportElementErrorTranslationFiles, PassportElementErrorUnspecified");
                }

                @Override
                public PassportElementError read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize PassportElementErrorDataField
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PassportElementErrorDataField.validateJsonElement(jsonElement);
                        actualAdapter = adapterPassportElementErrorDataField;
                        PassportElementError ret = new PassportElementError();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PassportElementErrorDataField failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PassportElementErrorDataField'", e);
                    }
                    // deserialize PassportElementErrorFrontSide
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PassportElementErrorFrontSide.validateJsonElement(jsonElement);
                        actualAdapter = adapterPassportElementErrorFrontSide;
                        PassportElementError ret = new PassportElementError();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PassportElementErrorFrontSide failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PassportElementErrorFrontSide'", e);
                    }
                    // deserialize PassportElementErrorReverseSide
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PassportElementErrorReverseSide.validateJsonElement(jsonElement);
                        actualAdapter = adapterPassportElementErrorReverseSide;
                        PassportElementError ret = new PassportElementError();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PassportElementErrorReverseSide failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PassportElementErrorReverseSide'", e);
                    }
                    // deserialize PassportElementErrorSelfie
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PassportElementErrorSelfie.validateJsonElement(jsonElement);
                        actualAdapter = adapterPassportElementErrorSelfie;
                        PassportElementError ret = new PassportElementError();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PassportElementErrorSelfie failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PassportElementErrorSelfie'", e);
                    }
                    // deserialize PassportElementErrorFile
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PassportElementErrorFile.validateJsonElement(jsonElement);
                        actualAdapter = adapterPassportElementErrorFile;
                        PassportElementError ret = new PassportElementError();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PassportElementErrorFile failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PassportElementErrorFile'", e);
                    }
                    // deserialize PassportElementErrorFiles
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PassportElementErrorFiles.validateJsonElement(jsonElement);
                        actualAdapter = adapterPassportElementErrorFiles;
                        PassportElementError ret = new PassportElementError();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PassportElementErrorFiles failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PassportElementErrorFiles'", e);
                    }
                    // deserialize PassportElementErrorTranslationFile
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PassportElementErrorTranslationFile.validateJsonElement(jsonElement);
                        actualAdapter = adapterPassportElementErrorTranslationFile;
                        PassportElementError ret = new PassportElementError();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PassportElementErrorTranslationFile failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PassportElementErrorTranslationFile'", e);
                    }
                    // deserialize PassportElementErrorTranslationFiles
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PassportElementErrorTranslationFiles.validateJsonElement(jsonElement);
                        actualAdapter = adapterPassportElementErrorTranslationFiles;
                        PassportElementError ret = new PassportElementError();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PassportElementErrorTranslationFiles failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PassportElementErrorTranslationFiles'", e);
                    }
                    // deserialize PassportElementErrorUnspecified
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PassportElementErrorUnspecified.validateJsonElement(jsonElement);
                        actualAdapter = adapterPassportElementErrorUnspecified;
                        PassportElementError ret = new PassportElementError();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PassportElementErrorUnspecified failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PassportElementErrorUnspecified'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for PassportElementError: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public PassportElementError() {
        super("anyOf", Boolean.FALSE);
    }

    public PassportElementError(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PassportElementErrorDataField", PassportElementErrorDataField.class);
        schemas.put("PassportElementErrorFrontSide", PassportElementErrorFrontSide.class);
        schemas.put("PassportElementErrorReverseSide", PassportElementErrorReverseSide.class);
        schemas.put("PassportElementErrorSelfie", PassportElementErrorSelfie.class);
        schemas.put("PassportElementErrorFile", PassportElementErrorFile.class);
        schemas.put("PassportElementErrorFiles", PassportElementErrorFiles.class);
        schemas.put("PassportElementErrorTranslationFile", PassportElementErrorTranslationFile.class);
        schemas.put("PassportElementErrorTranslationFiles", PassportElementErrorTranslationFiles.class);
        schemas.put("PassportElementErrorUnspecified", PassportElementErrorUnspecified.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return PassportElementError.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * PassportElementErrorDataField, PassportElementErrorFile, PassportElementErrorFiles, PassportElementErrorFrontSide, PassportElementErrorReverseSide, PassportElementErrorSelfie, PassportElementErrorTranslationFile, PassportElementErrorTranslationFiles, PassportElementErrorUnspecified
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PassportElementErrorDataField) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PassportElementErrorFrontSide) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PassportElementErrorReverseSide) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PassportElementErrorSelfie) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PassportElementErrorFile) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PassportElementErrorFiles) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PassportElementErrorTranslationFile) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PassportElementErrorTranslationFiles) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PassportElementErrorUnspecified) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PassportElementErrorDataField, PassportElementErrorFile, PassportElementErrorFiles, PassportElementErrorFrontSide, PassportElementErrorReverseSide, PassportElementErrorSelfie, PassportElementErrorTranslationFile, PassportElementErrorTranslationFiles, PassportElementErrorUnspecified");
    }

    /**
     * Get the actual instance, which can be the following:
     * PassportElementErrorDataField, PassportElementErrorFile, PassportElementErrorFiles, PassportElementErrorFrontSide, PassportElementErrorReverseSide, PassportElementErrorSelfie, PassportElementErrorTranslationFile, PassportElementErrorTranslationFiles, PassportElementErrorUnspecified
     *
     * @return The actual instance (PassportElementErrorDataField, PassportElementErrorFile, PassportElementErrorFiles, PassportElementErrorFrontSide, PassportElementErrorReverseSide, PassportElementErrorSelfie, PassportElementErrorTranslationFile, PassportElementErrorTranslationFiles, PassportElementErrorUnspecified)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PassportElementErrorDataField`. If the actual instance is not `PassportElementErrorDataField`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PassportElementErrorDataField`
     * @throws ClassCastException if the instance is not `PassportElementErrorDataField`
     */
    public PassportElementErrorDataField getPassportElementErrorDataField() throws ClassCastException {
        return (PassportElementErrorDataField)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PassportElementErrorFrontSide`. If the actual instance is not `PassportElementErrorFrontSide`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PassportElementErrorFrontSide`
     * @throws ClassCastException if the instance is not `PassportElementErrorFrontSide`
     */
    public PassportElementErrorFrontSide getPassportElementErrorFrontSide() throws ClassCastException {
        return (PassportElementErrorFrontSide)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PassportElementErrorReverseSide`. If the actual instance is not `PassportElementErrorReverseSide`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PassportElementErrorReverseSide`
     * @throws ClassCastException if the instance is not `PassportElementErrorReverseSide`
     */
    public PassportElementErrorReverseSide getPassportElementErrorReverseSide() throws ClassCastException {
        return (PassportElementErrorReverseSide)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PassportElementErrorSelfie`. If the actual instance is not `PassportElementErrorSelfie`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PassportElementErrorSelfie`
     * @throws ClassCastException if the instance is not `PassportElementErrorSelfie`
     */
    public PassportElementErrorSelfie getPassportElementErrorSelfie() throws ClassCastException {
        return (PassportElementErrorSelfie)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PassportElementErrorFile`. If the actual instance is not `PassportElementErrorFile`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PassportElementErrorFile`
     * @throws ClassCastException if the instance is not `PassportElementErrorFile`
     */
    public PassportElementErrorFile getPassportElementErrorFile() throws ClassCastException {
        return (PassportElementErrorFile)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PassportElementErrorFiles`. If the actual instance is not `PassportElementErrorFiles`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PassportElementErrorFiles`
     * @throws ClassCastException if the instance is not `PassportElementErrorFiles`
     */
    public PassportElementErrorFiles getPassportElementErrorFiles() throws ClassCastException {
        return (PassportElementErrorFiles)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PassportElementErrorTranslationFile`. If the actual instance is not `PassportElementErrorTranslationFile`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PassportElementErrorTranslationFile`
     * @throws ClassCastException if the instance is not `PassportElementErrorTranslationFile`
     */
    public PassportElementErrorTranslationFile getPassportElementErrorTranslationFile() throws ClassCastException {
        return (PassportElementErrorTranslationFile)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PassportElementErrorTranslationFiles`. If the actual instance is not `PassportElementErrorTranslationFiles`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PassportElementErrorTranslationFiles`
     * @throws ClassCastException if the instance is not `PassportElementErrorTranslationFiles`
     */
    public PassportElementErrorTranslationFiles getPassportElementErrorTranslationFiles() throws ClassCastException {
        return (PassportElementErrorTranslationFiles)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PassportElementErrorUnspecified`. If the actual instance is not `PassportElementErrorUnspecified`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PassportElementErrorUnspecified`
     * @throws ClassCastException if the instance is not `PassportElementErrorUnspecified`
     */
    public PassportElementErrorUnspecified getPassportElementErrorUnspecified() throws ClassCastException {
        return (PassportElementErrorUnspecified)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PassportElementError
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PassportElementErrorDataField
        try {
            PassportElementErrorDataField.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PassportElementErrorDataField failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PassportElementErrorFrontSide
        try {
            PassportElementErrorFrontSide.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PassportElementErrorFrontSide failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PassportElementErrorReverseSide
        try {
            PassportElementErrorReverseSide.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PassportElementErrorReverseSide failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PassportElementErrorSelfie
        try {
            PassportElementErrorSelfie.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PassportElementErrorSelfie failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PassportElementErrorFile
        try {
            PassportElementErrorFile.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PassportElementErrorFile failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PassportElementErrorFiles
        try {
            PassportElementErrorFiles.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PassportElementErrorFiles failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PassportElementErrorTranslationFile
        try {
            PassportElementErrorTranslationFile.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PassportElementErrorTranslationFile failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PassportElementErrorTranslationFiles
        try {
            PassportElementErrorTranslationFiles.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PassportElementErrorTranslationFiles failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PassportElementErrorUnspecified
        try {
            PassportElementErrorUnspecified.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PassportElementErrorUnspecified failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for PassportElementError with anyOf schemas: PassportElementErrorDataField, PassportElementErrorFile, PassportElementErrorFiles, PassportElementErrorFrontSide, PassportElementErrorReverseSide, PassportElementErrorSelfie, PassportElementErrorTranslationFile, PassportElementErrorTranslationFiles, PassportElementErrorUnspecified. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of PassportElementError given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PassportElementError
     * @throws IOException if the JSON string is invalid with respect to PassportElementError
     */
    public static PassportElementError fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PassportElementError.class);
    }

    /**
     * Convert an instance of PassportElementError to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

