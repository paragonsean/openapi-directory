/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.CopyMessagePostRequestChatId;
import org.openapitools.client.model.CopyMessagePostRequestReplyMarkup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendLocationPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendLocationPostRequest {
  public static final String SERIALIZED_NAME_ALLOW_SENDING_WITHOUT_REPLY = "allow_sending_without_reply";
  @SerializedName(SERIALIZED_NAME_ALLOW_SENDING_WITHOUT_REPLY)
  private Boolean allowSendingWithoutReply;

  public static final String SERIALIZED_NAME_CHAT_ID = "chat_id";
  @SerializedName(SERIALIZED_NAME_CHAT_ID)
  private CopyMessagePostRequestChatId chatId;

  public static final String SERIALIZED_NAME_DISABLE_NOTIFICATION = "disable_notification";
  @SerializedName(SERIALIZED_NAME_DISABLE_NOTIFICATION)
  private Boolean disableNotification;

  public static final String SERIALIZED_NAME_HEADING = "heading";
  @SerializedName(SERIALIZED_NAME_HEADING)
  private Integer heading;

  public static final String SERIALIZED_NAME_HORIZONTAL_ACCURACY = "horizontal_accuracy";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_ACCURACY)
  private BigDecimal horizontalAccuracy;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LIVE_PERIOD = "live_period";
  @SerializedName(SERIALIZED_NAME_LIVE_PERIOD)
  private Integer livePeriod;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_PROXIMITY_ALERT_RADIUS = "proximity_alert_radius";
  @SerializedName(SERIALIZED_NAME_PROXIMITY_ALERT_RADIUS)
  private Integer proximityAlertRadius;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private CopyMessagePostRequestReplyMarkup replyMarkup;

  public static final String SERIALIZED_NAME_REPLY_TO_MESSAGE_ID = "reply_to_message_id";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_MESSAGE_ID)
  private Integer replyToMessageId;

  public SendLocationPostRequest() {
  }

  public SendLocationPostRequest allowSendingWithoutReply(Boolean allowSendingWithoutReply) {
    this.allowSendingWithoutReply = allowSendingWithoutReply;
    return this;
  }

  /**
   * Pass *True*, if the message should be sent even if the specified replied-to message is not found
   * @return allowSendingWithoutReply
   */
  @javax.annotation.Nullable
  public Boolean getAllowSendingWithoutReply() {
    return allowSendingWithoutReply;
  }

  public void setAllowSendingWithoutReply(Boolean allowSendingWithoutReply) {
    this.allowSendingWithoutReply = allowSendingWithoutReply;
  }


  public SendLocationPostRequest chatId(CopyMessagePostRequestChatId chatId) {
    this.chatId = chatId;
    return this;
  }

  /**
   * Get chatId
   * @return chatId
   */
  @javax.annotation.Nonnull
  public CopyMessagePostRequestChatId getChatId() {
    return chatId;
  }

  public void setChatId(CopyMessagePostRequestChatId chatId) {
    this.chatId = chatId;
  }


  public SendLocationPostRequest disableNotification(Boolean disableNotification) {
    this.disableNotification = disableNotification;
    return this;
  }

  /**
   * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
   * @return disableNotification
   */
  @javax.annotation.Nullable
  public Boolean getDisableNotification() {
    return disableNotification;
  }

  public void setDisableNotification(Boolean disableNotification) {
    this.disableNotification = disableNotification;
  }


  public SendLocationPostRequest heading(Integer heading) {
    this.heading = heading;
    return this;
  }

  /**
   * For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
   * @return heading
   */
  @javax.annotation.Nullable
  public Integer getHeading() {
    return heading;
  }

  public void setHeading(Integer heading) {
    this.heading = heading;
  }


  public SendLocationPostRequest horizontalAccuracy(BigDecimal horizontalAccuracy) {
    this.horizontalAccuracy = horizontalAccuracy;
    return this;
  }

  /**
   * The radius of uncertainty for the location, measured in meters; 0-1500
   * @return horizontalAccuracy
   */
  @javax.annotation.Nullable
  public BigDecimal getHorizontalAccuracy() {
    return horizontalAccuracy;
  }

  public void setHorizontalAccuracy(BigDecimal horizontalAccuracy) {
    this.horizontalAccuracy = horizontalAccuracy;
  }


  public SendLocationPostRequest latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Latitude of the location
   * @return latitude
   */
  @javax.annotation.Nonnull
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public SendLocationPostRequest livePeriod(Integer livePeriod) {
    this.livePeriod = livePeriod;
    return this;
  }

  /**
   * Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
   * @return livePeriod
   */
  @javax.annotation.Nullable
  public Integer getLivePeriod() {
    return livePeriod;
  }

  public void setLivePeriod(Integer livePeriod) {
    this.livePeriod = livePeriod;
  }


  public SendLocationPostRequest longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Longitude of the location
   * @return longitude
   */
  @javax.annotation.Nonnull
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public SendLocationPostRequest proximityAlertRadius(Integer proximityAlertRadius) {
    this.proximityAlertRadius = proximityAlertRadius;
    return this;
  }

  /**
   * For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
   * @return proximityAlertRadius
   */
  @javax.annotation.Nullable
  public Integer getProximityAlertRadius() {
    return proximityAlertRadius;
  }

  public void setProximityAlertRadius(Integer proximityAlertRadius) {
    this.proximityAlertRadius = proximityAlertRadius;
  }


  public SendLocationPostRequest replyMarkup(CopyMessagePostRequestReplyMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public CopyMessagePostRequestReplyMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(CopyMessagePostRequestReplyMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public SendLocationPostRequest replyToMessageId(Integer replyToMessageId) {
    this.replyToMessageId = replyToMessageId;
    return this;
  }

  /**
   * If the message is a reply, ID of the original message
   * @return replyToMessageId
   */
  @javax.annotation.Nullable
  public Integer getReplyToMessageId() {
    return replyToMessageId;
  }

  public void setReplyToMessageId(Integer replyToMessageId) {
    this.replyToMessageId = replyToMessageId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendLocationPostRequest sendLocationPostRequest = (SendLocationPostRequest) o;
    return Objects.equals(this.allowSendingWithoutReply, sendLocationPostRequest.allowSendingWithoutReply) &&
        Objects.equals(this.chatId, sendLocationPostRequest.chatId) &&
        Objects.equals(this.disableNotification, sendLocationPostRequest.disableNotification) &&
        Objects.equals(this.heading, sendLocationPostRequest.heading) &&
        Objects.equals(this.horizontalAccuracy, sendLocationPostRequest.horizontalAccuracy) &&
        Objects.equals(this.latitude, sendLocationPostRequest.latitude) &&
        Objects.equals(this.livePeriod, sendLocationPostRequest.livePeriod) &&
        Objects.equals(this.longitude, sendLocationPostRequest.longitude) &&
        Objects.equals(this.proximityAlertRadius, sendLocationPostRequest.proximityAlertRadius) &&
        Objects.equals(this.replyMarkup, sendLocationPostRequest.replyMarkup) &&
        Objects.equals(this.replyToMessageId, sendLocationPostRequest.replyToMessageId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowSendingWithoutReply, chatId, disableNotification, heading, horizontalAccuracy, latitude, livePeriod, longitude, proximityAlertRadius, replyMarkup, replyToMessageId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendLocationPostRequest {\n");
    sb.append("    allowSendingWithoutReply: ").append(toIndentedString(allowSendingWithoutReply)).append("\n");
    sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
    sb.append("    disableNotification: ").append(toIndentedString(disableNotification)).append("\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    horizontalAccuracy: ").append(toIndentedString(horizontalAccuracy)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    livePeriod: ").append(toIndentedString(livePeriod)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    proximityAlertRadius: ").append(toIndentedString(proximityAlertRadius)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    replyToMessageId: ").append(toIndentedString(replyToMessageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_sending_without_reply");
    openapiFields.add("chat_id");
    openapiFields.add("disable_notification");
    openapiFields.add("heading");
    openapiFields.add("horizontal_accuracy");
    openapiFields.add("latitude");
    openapiFields.add("live_period");
    openapiFields.add("longitude");
    openapiFields.add("proximity_alert_radius");
    openapiFields.add("reply_markup");
    openapiFields.add("reply_to_message_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chat_id");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendLocationPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendLocationPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendLocationPostRequest is not found in the empty JSON string", SendLocationPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendLocationPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendLocationPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendLocationPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `chat_id`
      CopyMessagePostRequestChatId.validateJsonElement(jsonObj.get("chat_id"));
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        CopyMessagePostRequestReplyMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendLocationPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendLocationPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendLocationPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendLocationPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendLocationPostRequest>() {
           @Override
           public void write(JsonWriter out, SendLocationPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendLocationPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendLocationPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendLocationPostRequest
   * @throws IOException if the JSON string is invalid with respect to SendLocationPostRequest
   */
  public static SendLocationPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendLocationPostRequest.class);
  }

  /**
   * Convert an instance of SendLocationPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

