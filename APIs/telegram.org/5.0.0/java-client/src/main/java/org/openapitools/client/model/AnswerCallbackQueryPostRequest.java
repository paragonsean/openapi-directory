/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnswerCallbackQueryPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnswerCallbackQueryPostRequest {
  public static final String SERIALIZED_NAME_CACHE_TIME = "cache_time";
  @SerializedName(SERIALIZED_NAME_CACHE_TIME)
  private Integer cacheTime = 0;

  public static final String SERIALIZED_NAME_CALLBACK_QUERY_ID = "callback_query_id";
  @SerializedName(SERIALIZED_NAME_CALLBACK_QUERY_ID)
  private String callbackQueryId;

  public static final String SERIALIZED_NAME_SHOW_ALERT = "show_alert";
  @SerializedName(SERIALIZED_NAME_SHOW_ALERT)
  private Boolean showAlert = false;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public AnswerCallbackQueryPostRequest() {
  }

  public AnswerCallbackQueryPostRequest cacheTime(Integer cacheTime) {
    this.cacheTime = cacheTime;
    return this;
  }

  /**
   * The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
   * @return cacheTime
   */
  @javax.annotation.Nullable
  public Integer getCacheTime() {
    return cacheTime;
  }

  public void setCacheTime(Integer cacheTime) {
    this.cacheTime = cacheTime;
  }


  public AnswerCallbackQueryPostRequest callbackQueryId(String callbackQueryId) {
    this.callbackQueryId = callbackQueryId;
    return this;
  }

  /**
   * Unique identifier for the query to be answered
   * @return callbackQueryId
   */
  @javax.annotation.Nonnull
  public String getCallbackQueryId() {
    return callbackQueryId;
  }

  public void setCallbackQueryId(String callbackQueryId) {
    this.callbackQueryId = callbackQueryId;
  }


  public AnswerCallbackQueryPostRequest showAlert(Boolean showAlert) {
    this.showAlert = showAlert;
    return this;
  }

  /**
   * If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
   * @return showAlert
   */
  @javax.annotation.Nullable
  public Boolean getShowAlert() {
    return showAlert;
  }

  public void setShowAlert(Boolean showAlert) {
    this.showAlert = showAlert;
  }


  public AnswerCallbackQueryPostRequest text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public AnswerCallbackQueryPostRequest url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL that will be opened by the user&#39;s client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game â€” note that this will only work if the query comes from a [*callback\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.    Otherwise, you may use links like &#x60;t.me/your_bot?start&#x3D;XXXX&#x60; that open your bot with a parameter.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnswerCallbackQueryPostRequest answerCallbackQueryPostRequest = (AnswerCallbackQueryPostRequest) o;
    return Objects.equals(this.cacheTime, answerCallbackQueryPostRequest.cacheTime) &&
        Objects.equals(this.callbackQueryId, answerCallbackQueryPostRequest.callbackQueryId) &&
        Objects.equals(this.showAlert, answerCallbackQueryPostRequest.showAlert) &&
        Objects.equals(this.text, answerCallbackQueryPostRequest.text) &&
        Objects.equals(this.url, answerCallbackQueryPostRequest.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheTime, callbackQueryId, showAlert, text, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnswerCallbackQueryPostRequest {\n");
    sb.append("    cacheTime: ").append(toIndentedString(cacheTime)).append("\n");
    sb.append("    callbackQueryId: ").append(toIndentedString(callbackQueryId)).append("\n");
    sb.append("    showAlert: ").append(toIndentedString(showAlert)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache_time");
    openapiFields.add("callback_query_id");
    openapiFields.add("show_alert");
    openapiFields.add("text");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("callback_query_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnswerCallbackQueryPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnswerCallbackQueryPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnswerCallbackQueryPostRequest is not found in the empty JSON string", AnswerCallbackQueryPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnswerCallbackQueryPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnswerCallbackQueryPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnswerCallbackQueryPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("callback_query_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_query_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_query_id").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnswerCallbackQueryPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnswerCallbackQueryPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnswerCallbackQueryPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnswerCallbackQueryPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AnswerCallbackQueryPostRequest>() {
           @Override
           public void write(JsonWriter out, AnswerCallbackQueryPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnswerCallbackQueryPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnswerCallbackQueryPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnswerCallbackQueryPostRequest
   * @throws IOException if the JSON string is invalid with respect to AnswerCallbackQueryPostRequest
   */
  public static AnswerCallbackQueryPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnswerCallbackQueryPostRequest.class);
  }

  /**
   * Convert an instance of AnswerCallbackQueryPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

