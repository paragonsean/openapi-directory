/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InlineKeyboardMarkup;
import org.openapitools.client.model.InputMessageContent;
import org.openapitools.client.model.MessageEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InlineQueryResultDocument {
  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_CAPTION_ENTITIES = "caption_entities";
  @SerializedName(SERIALIZED_NAME_CAPTION_ENTITIES)
  private List<MessageEntity> captionEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENT_URL = "document_url";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_URL)
  private String documentUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT_MESSAGE_CONTENT = "input_message_content";
  @SerializedName(SERIALIZED_NAME_INPUT_MESSAGE_CONTENT)
  private InputMessageContent inputMessageContent;

  /**
   * Mime type of the content of the file, either “application/pdf” or “application/zip”
   */
  @JsonAdapter(MimeTypeEnum.Adapter.class)
  public enum MimeTypeEnum {
    PDF("application/pdf"),
    
    ZIP("application/zip");

    private String value;

    MimeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MimeTypeEnum fromValue(String value) {
      for (MimeTypeEnum b : MimeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MimeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MimeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MimeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MimeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MimeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private MimeTypeEnum mimeType;

  public static final String SERIALIZED_NAME_PARSE_MODE = "parse_mode";
  @SerializedName(SERIALIZED_NAME_PARSE_MODE)
  private String parseMode;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private InlineKeyboardMarkup replyMarkup;

  public static final String SERIALIZED_NAME_THUMB_HEIGHT = "thumb_height";
  @SerializedName(SERIALIZED_NAME_THUMB_HEIGHT)
  private Integer thumbHeight;

  public static final String SERIALIZED_NAME_THUMB_URL = "thumb_url";
  @SerializedName(SERIALIZED_NAME_THUMB_URL)
  private String thumbUrl;

  public static final String SERIALIZED_NAME_THUMB_WIDTH = "thumb_width";
  @SerializedName(SERIALIZED_NAME_THUMB_WIDTH)
  private Integer thumbWidth;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public InlineQueryResultDocument() {
  }

  public InlineQueryResultDocument caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
   * @return caption
   */
  @javax.annotation.Nullable
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public InlineQueryResultDocument captionEntities(List<MessageEntity> captionEntities) {
    this.captionEntities = captionEntities;
    return this;
  }

  public InlineQueryResultDocument addCaptionEntitiesItem(MessageEntity captionEntitiesItem) {
    if (this.captionEntities == null) {
      this.captionEntities = new ArrayList<>();
    }
    this.captionEntities.add(captionEntitiesItem);
    return this;
  }

  /**
   * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
   * @return captionEntities
   */
  @javax.annotation.Nullable
  public List<MessageEntity> getCaptionEntities() {
    return captionEntities;
  }

  public void setCaptionEntities(List<MessageEntity> captionEntities) {
    this.captionEntities = captionEntities;
  }


  public InlineQueryResultDocument description(String description) {
    this.description = description;
    return this;
  }

  /**
   * *Optional*. Short description of the result
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InlineQueryResultDocument documentUrl(String documentUrl) {
    this.documentUrl = documentUrl;
    return this;
  }

  /**
   * A valid URL for the file
   * @return documentUrl
   */
  @javax.annotation.Nonnull
  public String getDocumentUrl() {
    return documentUrl;
  }

  public void setDocumentUrl(String documentUrl) {
    this.documentUrl = documentUrl;
  }


  public InlineQueryResultDocument id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for this result, 1-64 bytes
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InlineQueryResultDocument inputMessageContent(InputMessageContent inputMessageContent) {
    this.inputMessageContent = inputMessageContent;
    return this;
  }

  /**
   * Get inputMessageContent
   * @return inputMessageContent
   */
  @javax.annotation.Nullable
  public InputMessageContent getInputMessageContent() {
    return inputMessageContent;
  }

  public void setInputMessageContent(InputMessageContent inputMessageContent) {
    this.inputMessageContent = inputMessageContent;
  }


  public InlineQueryResultDocument mimeType(MimeTypeEnum mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Mime type of the content of the file, either “application/pdf” or “application/zip”
   * @return mimeType
   */
  @javax.annotation.Nonnull
  public MimeTypeEnum getMimeType() {
    return mimeType;
  }

  public void setMimeType(MimeTypeEnum mimeType) {
    this.mimeType = mimeType;
  }


  public InlineQueryResultDocument parseMode(String parseMode) {
    this.parseMode = parseMode;
    return this;
  }

  /**
   * *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
   * @return parseMode
   */
  @javax.annotation.Nullable
  public String getParseMode() {
    return parseMode;
  }

  public void setParseMode(String parseMode) {
    this.parseMode = parseMode;
  }


  public InlineQueryResultDocument replyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public InlineKeyboardMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public InlineQueryResultDocument thumbHeight(Integer thumbHeight) {
    this.thumbHeight = thumbHeight;
    return this;
  }

  /**
   * *Optional*. Thumbnail height
   * @return thumbHeight
   */
  @javax.annotation.Nullable
  public Integer getThumbHeight() {
    return thumbHeight;
  }

  public void setThumbHeight(Integer thumbHeight) {
    this.thumbHeight = thumbHeight;
  }


  public InlineQueryResultDocument thumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
    return this;
  }

  /**
   * *Optional*. URL of the thumbnail (jpeg only) for the file
   * @return thumbUrl
   */
  @javax.annotation.Nullable
  public String getThumbUrl() {
    return thumbUrl;
  }

  public void setThumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
  }


  public InlineQueryResultDocument thumbWidth(Integer thumbWidth) {
    this.thumbWidth = thumbWidth;
    return this;
  }

  /**
   * *Optional*. Thumbnail width
   * @return thumbWidth
   */
  @javax.annotation.Nullable
  public Integer getThumbWidth() {
    return thumbWidth;
  }

  public void setThumbWidth(Integer thumbWidth) {
    this.thumbWidth = thumbWidth;
  }


  public InlineQueryResultDocument title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title for the result
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public InlineQueryResultDocument type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the result, must be *document*
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineQueryResultDocument inlineQueryResultDocument = (InlineQueryResultDocument) o;
    return Objects.equals(this.caption, inlineQueryResultDocument.caption) &&
        Objects.equals(this.captionEntities, inlineQueryResultDocument.captionEntities) &&
        Objects.equals(this.description, inlineQueryResultDocument.description) &&
        Objects.equals(this.documentUrl, inlineQueryResultDocument.documentUrl) &&
        Objects.equals(this.id, inlineQueryResultDocument.id) &&
        Objects.equals(this.inputMessageContent, inlineQueryResultDocument.inputMessageContent) &&
        Objects.equals(this.mimeType, inlineQueryResultDocument.mimeType) &&
        Objects.equals(this.parseMode, inlineQueryResultDocument.parseMode) &&
        Objects.equals(this.replyMarkup, inlineQueryResultDocument.replyMarkup) &&
        Objects.equals(this.thumbHeight, inlineQueryResultDocument.thumbHeight) &&
        Objects.equals(this.thumbUrl, inlineQueryResultDocument.thumbUrl) &&
        Objects.equals(this.thumbWidth, inlineQueryResultDocument.thumbWidth) &&
        Objects.equals(this.title, inlineQueryResultDocument.title) &&
        Objects.equals(this.type, inlineQueryResultDocument.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caption, captionEntities, description, documentUrl, id, inputMessageContent, mimeType, parseMode, replyMarkup, thumbHeight, thumbUrl, thumbWidth, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineQueryResultDocument {\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    captionEntities: ").append(toIndentedString(captionEntities)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentUrl: ").append(toIndentedString(documentUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputMessageContent: ").append(toIndentedString(inputMessageContent)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    parseMode: ").append(toIndentedString(parseMode)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    thumbHeight: ").append(toIndentedString(thumbHeight)).append("\n");
    sb.append("    thumbUrl: ").append(toIndentedString(thumbUrl)).append("\n");
    sb.append("    thumbWidth: ").append(toIndentedString(thumbWidth)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caption");
    openapiFields.add("caption_entities");
    openapiFields.add("description");
    openapiFields.add("document_url");
    openapiFields.add("id");
    openapiFields.add("input_message_content");
    openapiFields.add("mime_type");
    openapiFields.add("parse_mode");
    openapiFields.add("reply_markup");
    openapiFields.add("thumb_height");
    openapiFields.add("thumb_url");
    openapiFields.add("thumb_width");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("document_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("mime_type");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InlineQueryResultDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InlineQueryResultDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineQueryResultDocument is not found in the empty JSON string", InlineQueryResultDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InlineQueryResultDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineQueryResultDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InlineQueryResultDocument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) && !jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      if (jsonObj.get("caption_entities") != null && !jsonObj.get("caption_entities").isJsonNull()) {
        JsonArray jsonArraycaptionEntities = jsonObj.getAsJsonArray("caption_entities");
        if (jsonArraycaptionEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("caption_entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `caption_entities` to be an array in the JSON string but got `%s`", jsonObj.get("caption_entities").toString()));
          }

          // validate the optional field `caption_entities` (array)
          for (int i = 0; i < jsonArraycaptionEntities.size(); i++) {
            MessageEntity.validateJsonElement(jsonArraycaptionEntities.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("document_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_url").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `input_message_content`
      if (jsonObj.get("input_message_content") != null && !jsonObj.get("input_message_content").isJsonNull()) {
        InputMessageContent.validateJsonElement(jsonObj.get("input_message_content"));
      }
      if (!jsonObj.get("mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type").toString()));
      }
      // validate the required field `mime_type`
      MimeTypeEnum.validateJsonElement(jsonObj.get("mime_type"));
      if ((jsonObj.get("parse_mode") != null && !jsonObj.get("parse_mode").isJsonNull()) && !jsonObj.get("parse_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parse_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parse_mode").toString()));
      }
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        InlineKeyboardMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
      if ((jsonObj.get("thumb_url") != null && !jsonObj.get("thumb_url").isJsonNull()) && !jsonObj.get("thumb_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumb_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumb_url").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineQueryResultDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineQueryResultDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineQueryResultDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineQueryResultDocument>() {
           @Override
           public void write(JsonWriter out, InlineQueryResultDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineQueryResultDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InlineQueryResultDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InlineQueryResultDocument
   * @throws IOException if the JSON string is invalid with respect to InlineQueryResultDocument
   */
  public static InlineQueryResultDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineQueryResultDocument.class);
  }

  /**
   * Convert an instance of InlineQueryResultDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

