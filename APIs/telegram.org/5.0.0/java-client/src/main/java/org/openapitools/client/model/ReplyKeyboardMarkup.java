/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeyboardButton;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplyKeyboardMarkup {
  public static final String SERIALIZED_NAME_KEYBOARD = "keyboard";
  @SerializedName(SERIALIZED_NAME_KEYBOARD)
  private List<List<KeyboardButton>> keyboard = new ArrayList<>();

  public static final String SERIALIZED_NAME_ONE_TIME_KEYBOARD = "one_time_keyboard";
  @SerializedName(SERIALIZED_NAME_ONE_TIME_KEYBOARD)
  private Boolean oneTimeKeyboard = false;

  public static final String SERIALIZED_NAME_RESIZE_KEYBOARD = "resize_keyboard";
  @SerializedName(SERIALIZED_NAME_RESIZE_KEYBOARD)
  private Boolean resizeKeyboard = false;

  public static final String SERIALIZED_NAME_SELECTIVE = "selective";
  @SerializedName(SERIALIZED_NAME_SELECTIVE)
  private Boolean selective;

  public ReplyKeyboardMarkup() {
  }

  public ReplyKeyboardMarkup keyboard(List<List<KeyboardButton>> keyboard) {
    this.keyboard = keyboard;
    return this;
  }

  public ReplyKeyboardMarkup addKeyboardItem(List<KeyboardButton> keyboardItem) {
    if (this.keyboard == null) {
      this.keyboard = new ArrayList<>();
    }
    this.keyboard.add(keyboardItem);
    return this;
  }

  /**
   * Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
   * @return keyboard
   */
  @javax.annotation.Nonnull
  public List<List<KeyboardButton>> getKeyboard() {
    return keyboard;
  }

  public void setKeyboard(List<List<KeyboardButton>> keyboard) {
    this.keyboard = keyboard;
  }


  public ReplyKeyboardMarkup oneTimeKeyboard(Boolean oneTimeKeyboard) {
    this.oneTimeKeyboard = oneTimeKeyboard;
    return this;
  }

  /**
   * *Optional*. Requests clients to hide the keyboard as soon as it&#39;s been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat â€“ the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
   * @return oneTimeKeyboard
   */
  @javax.annotation.Nullable
  public Boolean getOneTimeKeyboard() {
    return oneTimeKeyboard;
  }

  public void setOneTimeKeyboard(Boolean oneTimeKeyboard) {
    this.oneTimeKeyboard = oneTimeKeyboard;
  }


  public ReplyKeyboardMarkup resizeKeyboard(Boolean resizeKeyboard) {
    this.resizeKeyboard = resizeKeyboard;
    return this;
  }

  /**
   * *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app&#39;s standard keyboard.
   * @return resizeKeyboard
   */
  @javax.annotation.Nullable
  public Boolean getResizeKeyboard() {
    return resizeKeyboard;
  }

  public void setResizeKeyboard(Boolean resizeKeyboard) {
    this.resizeKeyboard = resizeKeyboard;
  }


  public ReplyKeyboardMarkup selective(Boolean selective) {
    this.selective = selective;
    return this;
  }

  /**
   * *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot&#39;s message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.    *Example:* A user requests to change the bot&#39;s language, bot replies to the request with a keyboard to select the new language. Other users in the group don&#39;t see the keyboard.
   * @return selective
   */
  @javax.annotation.Nullable
  public Boolean getSelective() {
    return selective;
  }

  public void setSelective(Boolean selective) {
    this.selective = selective;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplyKeyboardMarkup replyKeyboardMarkup = (ReplyKeyboardMarkup) o;
    return Objects.equals(this.keyboard, replyKeyboardMarkup.keyboard) &&
        Objects.equals(this.oneTimeKeyboard, replyKeyboardMarkup.oneTimeKeyboard) &&
        Objects.equals(this.resizeKeyboard, replyKeyboardMarkup.resizeKeyboard) &&
        Objects.equals(this.selective, replyKeyboardMarkup.selective);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyboard, oneTimeKeyboard, resizeKeyboard, selective);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplyKeyboardMarkup {\n");
    sb.append("    keyboard: ").append(toIndentedString(keyboard)).append("\n");
    sb.append("    oneTimeKeyboard: ").append(toIndentedString(oneTimeKeyboard)).append("\n");
    sb.append("    resizeKeyboard: ").append(toIndentedString(resizeKeyboard)).append("\n");
    sb.append("    selective: ").append(toIndentedString(selective)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyboard");
    openapiFields.add("one_time_keyboard");
    openapiFields.add("resize_keyboard");
    openapiFields.add("selective");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keyboard");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplyKeyboardMarkup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplyKeyboardMarkup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplyKeyboardMarkup is not found in the empty JSON string", ReplyKeyboardMarkup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplyKeyboardMarkup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplyKeyboardMarkup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplyKeyboardMarkup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("keyboard") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("keyboard").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyboard` to be an array in the JSON string but got `%s`", jsonObj.get("keyboard").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplyKeyboardMarkup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplyKeyboardMarkup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplyKeyboardMarkup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplyKeyboardMarkup.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplyKeyboardMarkup>() {
           @Override
           public void write(JsonWriter out, ReplyKeyboardMarkup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplyKeyboardMarkup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplyKeyboardMarkup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplyKeyboardMarkup
   * @throws IOException if the JSON string is invalid with respect to ReplyKeyboardMarkup
   */
  public static ReplyKeyboardMarkup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplyKeyboardMarkup.class);
  }

  /**
   * Convert an instance of ReplyKeyboardMarkup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

