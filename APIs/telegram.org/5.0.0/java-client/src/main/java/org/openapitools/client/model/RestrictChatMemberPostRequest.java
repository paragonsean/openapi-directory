/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChatPermissions;
import org.openapitools.client.model.DeleteChatStickerSetPostRequestChatId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RestrictChatMemberPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RestrictChatMemberPostRequest {
  public static final String SERIALIZED_NAME_CHAT_ID = "chat_id";
  @SerializedName(SERIALIZED_NAME_CHAT_ID)
  private DeleteChatStickerSetPostRequestChatId chatId;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private ChatPermissions permissions;

  public static final String SERIALIZED_NAME_UNTIL_DATE = "until_date";
  @SerializedName(SERIALIZED_NAME_UNTIL_DATE)
  private Integer untilDate;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public RestrictChatMemberPostRequest() {
  }

  public RestrictChatMemberPostRequest chatId(DeleteChatStickerSetPostRequestChatId chatId) {
    this.chatId = chatId;
    return this;
  }

  /**
   * Get chatId
   * @return chatId
   */
  @javax.annotation.Nonnull
  public DeleteChatStickerSetPostRequestChatId getChatId() {
    return chatId;
  }

  public void setChatId(DeleteChatStickerSetPostRequestChatId chatId) {
    this.chatId = chatId;
  }


  public RestrictChatMemberPostRequest permissions(ChatPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nonnull
  public ChatPermissions getPermissions() {
    return permissions;
  }

  public void setPermissions(ChatPermissions permissions) {
    this.permissions = permissions;
  }


  public RestrictChatMemberPostRequest untilDate(Integer untilDate) {
    this.untilDate = untilDate;
    return this;
  }

  /**
   * Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
   * @return untilDate
   */
  @javax.annotation.Nullable
  public Integer getUntilDate() {
    return untilDate;
  }

  public void setUntilDate(Integer untilDate) {
    this.untilDate = untilDate;
  }


  public RestrictChatMemberPostRequest userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Unique identifier of the target user
   * @return userId
   */
  @javax.annotation.Nonnull
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestrictChatMemberPostRequest restrictChatMemberPostRequest = (RestrictChatMemberPostRequest) o;
    return Objects.equals(this.chatId, restrictChatMemberPostRequest.chatId) &&
        Objects.equals(this.permissions, restrictChatMemberPostRequest.permissions) &&
        Objects.equals(this.untilDate, restrictChatMemberPostRequest.untilDate) &&
        Objects.equals(this.userId, restrictChatMemberPostRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chatId, permissions, untilDate, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestrictChatMemberPostRequest {\n");
    sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    untilDate: ").append(toIndentedString(untilDate)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chat_id");
    openapiFields.add("permissions");
    openapiFields.add("until_date");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chat_id");
    openapiRequiredFields.add("permissions");
    openapiRequiredFields.add("user_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestrictChatMemberPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestrictChatMemberPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestrictChatMemberPostRequest is not found in the empty JSON string", RestrictChatMemberPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestrictChatMemberPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestrictChatMemberPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RestrictChatMemberPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `chat_id`
      DeleteChatStickerSetPostRequestChatId.validateJsonElement(jsonObj.get("chat_id"));
      // validate the required field `permissions`
      ChatPermissions.validateJsonElement(jsonObj.get("permissions"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestrictChatMemberPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestrictChatMemberPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestrictChatMemberPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestrictChatMemberPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RestrictChatMemberPostRequest>() {
           @Override
           public void write(JsonWriter out, RestrictChatMemberPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestrictChatMemberPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestrictChatMemberPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestrictChatMemberPostRequest
   * @throws IOException if the JSON string is invalid with respect to RestrictChatMemberPostRequest
   */
  public static RestrictChatMemberPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestrictChatMemberPostRequest.class);
  }

  /**
   * Convert an instance of RestrictChatMemberPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

