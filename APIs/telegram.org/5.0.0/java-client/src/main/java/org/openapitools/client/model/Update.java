/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CallbackQuery;
import org.openapitools.client.model.ChosenInlineResult;
import org.openapitools.client.model.InlineQuery;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Poll;
import org.openapitools.client.model.PollAnswer;
import org.openapitools.client.model.PreCheckoutQuery;
import org.openapitools.client.model.ShippingQuery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.   At most **one** of the optional parameters can be present in any given update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Update {
  public static final String SERIALIZED_NAME_CALLBACK_QUERY = "callback_query";
  @SerializedName(SERIALIZED_NAME_CALLBACK_QUERY)
  private CallbackQuery callbackQuery;

  public static final String SERIALIZED_NAME_CHANNEL_POST = "channel_post";
  @SerializedName(SERIALIZED_NAME_CHANNEL_POST)
  private Message channelPost;

  public static final String SERIALIZED_NAME_CHOSEN_INLINE_RESULT = "chosen_inline_result";
  @SerializedName(SERIALIZED_NAME_CHOSEN_INLINE_RESULT)
  private ChosenInlineResult chosenInlineResult;

  public static final String SERIALIZED_NAME_EDITED_CHANNEL_POST = "edited_channel_post";
  @SerializedName(SERIALIZED_NAME_EDITED_CHANNEL_POST)
  private Message editedChannelPost;

  public static final String SERIALIZED_NAME_EDITED_MESSAGE = "edited_message";
  @SerializedName(SERIALIZED_NAME_EDITED_MESSAGE)
  private Message editedMessage;

  public static final String SERIALIZED_NAME_INLINE_QUERY = "inline_query";
  @SerializedName(SERIALIZED_NAME_INLINE_QUERY)
  private InlineQuery inlineQuery;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private Message message;

  public static final String SERIALIZED_NAME_POLL = "poll";
  @SerializedName(SERIALIZED_NAME_POLL)
  private Poll poll;

  public static final String SERIALIZED_NAME_POLL_ANSWER = "poll_answer";
  @SerializedName(SERIALIZED_NAME_POLL_ANSWER)
  private PollAnswer pollAnswer;

  public static final String SERIALIZED_NAME_PRE_CHECKOUT_QUERY = "pre_checkout_query";
  @SerializedName(SERIALIZED_NAME_PRE_CHECKOUT_QUERY)
  private PreCheckoutQuery preCheckoutQuery;

  public static final String SERIALIZED_NAME_SHIPPING_QUERY = "shipping_query";
  @SerializedName(SERIALIZED_NAME_SHIPPING_QUERY)
  private ShippingQuery shippingQuery;

  public static final String SERIALIZED_NAME_UPDATE_ID = "update_id";
  @SerializedName(SERIALIZED_NAME_UPDATE_ID)
  private Integer updateId;

  public Update() {
  }

  public Update callbackQuery(CallbackQuery callbackQuery) {
    this.callbackQuery = callbackQuery;
    return this;
  }

  /**
   * Get callbackQuery
   * @return callbackQuery
   */
  @javax.annotation.Nullable
  public CallbackQuery getCallbackQuery() {
    return callbackQuery;
  }

  public void setCallbackQuery(CallbackQuery callbackQuery) {
    this.callbackQuery = callbackQuery;
  }


  public Update channelPost(Message channelPost) {
    this.channelPost = channelPost;
    return this;
  }

  /**
   * Get channelPost
   * @return channelPost
   */
  @javax.annotation.Nullable
  public Message getChannelPost() {
    return channelPost;
  }

  public void setChannelPost(Message channelPost) {
    this.channelPost = channelPost;
  }


  public Update chosenInlineResult(ChosenInlineResult chosenInlineResult) {
    this.chosenInlineResult = chosenInlineResult;
    return this;
  }

  /**
   * Get chosenInlineResult
   * @return chosenInlineResult
   */
  @javax.annotation.Nullable
  public ChosenInlineResult getChosenInlineResult() {
    return chosenInlineResult;
  }

  public void setChosenInlineResult(ChosenInlineResult chosenInlineResult) {
    this.chosenInlineResult = chosenInlineResult;
  }


  public Update editedChannelPost(Message editedChannelPost) {
    this.editedChannelPost = editedChannelPost;
    return this;
  }

  /**
   * Get editedChannelPost
   * @return editedChannelPost
   */
  @javax.annotation.Nullable
  public Message getEditedChannelPost() {
    return editedChannelPost;
  }

  public void setEditedChannelPost(Message editedChannelPost) {
    this.editedChannelPost = editedChannelPost;
  }


  public Update editedMessage(Message editedMessage) {
    this.editedMessage = editedMessage;
    return this;
  }

  /**
   * Get editedMessage
   * @return editedMessage
   */
  @javax.annotation.Nullable
  public Message getEditedMessage() {
    return editedMessage;
  }

  public void setEditedMessage(Message editedMessage) {
    this.editedMessage = editedMessage;
  }


  public Update inlineQuery(InlineQuery inlineQuery) {
    this.inlineQuery = inlineQuery;
    return this;
  }

  /**
   * Get inlineQuery
   * @return inlineQuery
   */
  @javax.annotation.Nullable
  public InlineQuery getInlineQuery() {
    return inlineQuery;
  }

  public void setInlineQuery(InlineQuery inlineQuery) {
    this.inlineQuery = inlineQuery;
  }


  public Update message(Message message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public Message getMessage() {
    return message;
  }

  public void setMessage(Message message) {
    this.message = message;
  }


  public Update poll(Poll poll) {
    this.poll = poll;
    return this;
  }

  /**
   * Get poll
   * @return poll
   */
  @javax.annotation.Nullable
  public Poll getPoll() {
    return poll;
  }

  public void setPoll(Poll poll) {
    this.poll = poll;
  }


  public Update pollAnswer(PollAnswer pollAnswer) {
    this.pollAnswer = pollAnswer;
    return this;
  }

  /**
   * Get pollAnswer
   * @return pollAnswer
   */
  @javax.annotation.Nullable
  public PollAnswer getPollAnswer() {
    return pollAnswer;
  }

  public void setPollAnswer(PollAnswer pollAnswer) {
    this.pollAnswer = pollAnswer;
  }


  public Update preCheckoutQuery(PreCheckoutQuery preCheckoutQuery) {
    this.preCheckoutQuery = preCheckoutQuery;
    return this;
  }

  /**
   * Get preCheckoutQuery
   * @return preCheckoutQuery
   */
  @javax.annotation.Nullable
  public PreCheckoutQuery getPreCheckoutQuery() {
    return preCheckoutQuery;
  }

  public void setPreCheckoutQuery(PreCheckoutQuery preCheckoutQuery) {
    this.preCheckoutQuery = preCheckoutQuery;
  }


  public Update shippingQuery(ShippingQuery shippingQuery) {
    this.shippingQuery = shippingQuery;
    return this;
  }

  /**
   * Get shippingQuery
   * @return shippingQuery
   */
  @javax.annotation.Nullable
  public ShippingQuery getShippingQuery() {
    return shippingQuery;
  }

  public void setShippingQuery(ShippingQuery shippingQuery) {
    this.shippingQuery = shippingQuery;
  }


  public Update updateId(Integer updateId) {
    this.updateId = updateId;
    return this;
  }

  /**
   * The update&#39;s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you&#39;re using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
   * @return updateId
   */
  @javax.annotation.Nonnull
  public Integer getUpdateId() {
    return updateId;
  }

  public void setUpdateId(Integer updateId) {
    this.updateId = updateId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Update update = (Update) o;
    return Objects.equals(this.callbackQuery, update.callbackQuery) &&
        Objects.equals(this.channelPost, update.channelPost) &&
        Objects.equals(this.chosenInlineResult, update.chosenInlineResult) &&
        Objects.equals(this.editedChannelPost, update.editedChannelPost) &&
        Objects.equals(this.editedMessage, update.editedMessage) &&
        Objects.equals(this.inlineQuery, update.inlineQuery) &&
        Objects.equals(this.message, update.message) &&
        Objects.equals(this.poll, update.poll) &&
        Objects.equals(this.pollAnswer, update.pollAnswer) &&
        Objects.equals(this.preCheckoutQuery, update.preCheckoutQuery) &&
        Objects.equals(this.shippingQuery, update.shippingQuery) &&
        Objects.equals(this.updateId, update.updateId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackQuery, channelPost, chosenInlineResult, editedChannelPost, editedMessage, inlineQuery, message, poll, pollAnswer, preCheckoutQuery, shippingQuery, updateId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Update {\n");
    sb.append("    callbackQuery: ").append(toIndentedString(callbackQuery)).append("\n");
    sb.append("    channelPost: ").append(toIndentedString(channelPost)).append("\n");
    sb.append("    chosenInlineResult: ").append(toIndentedString(chosenInlineResult)).append("\n");
    sb.append("    editedChannelPost: ").append(toIndentedString(editedChannelPost)).append("\n");
    sb.append("    editedMessage: ").append(toIndentedString(editedMessage)).append("\n");
    sb.append("    inlineQuery: ").append(toIndentedString(inlineQuery)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    poll: ").append(toIndentedString(poll)).append("\n");
    sb.append("    pollAnswer: ").append(toIndentedString(pollAnswer)).append("\n");
    sb.append("    preCheckoutQuery: ").append(toIndentedString(preCheckoutQuery)).append("\n");
    sb.append("    shippingQuery: ").append(toIndentedString(shippingQuery)).append("\n");
    sb.append("    updateId: ").append(toIndentedString(updateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callback_query");
    openapiFields.add("channel_post");
    openapiFields.add("chosen_inline_result");
    openapiFields.add("edited_channel_post");
    openapiFields.add("edited_message");
    openapiFields.add("inline_query");
    openapiFields.add("message");
    openapiFields.add("poll");
    openapiFields.add("poll_answer");
    openapiFields.add("pre_checkout_query");
    openapiFields.add("shipping_query");
    openapiFields.add("update_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("update_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Update
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Update.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Update is not found in the empty JSON string", Update.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Update.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Update` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Update.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `callback_query`
      if (jsonObj.get("callback_query") != null && !jsonObj.get("callback_query").isJsonNull()) {
        CallbackQuery.validateJsonElement(jsonObj.get("callback_query"));
      }
      // validate the optional field `channel_post`
      if (jsonObj.get("channel_post") != null && !jsonObj.get("channel_post").isJsonNull()) {
        Message.validateJsonElement(jsonObj.get("channel_post"));
      }
      // validate the optional field `chosen_inline_result`
      if (jsonObj.get("chosen_inline_result") != null && !jsonObj.get("chosen_inline_result").isJsonNull()) {
        ChosenInlineResult.validateJsonElement(jsonObj.get("chosen_inline_result"));
      }
      // validate the optional field `edited_channel_post`
      if (jsonObj.get("edited_channel_post") != null && !jsonObj.get("edited_channel_post").isJsonNull()) {
        Message.validateJsonElement(jsonObj.get("edited_channel_post"));
      }
      // validate the optional field `edited_message`
      if (jsonObj.get("edited_message") != null && !jsonObj.get("edited_message").isJsonNull()) {
        Message.validateJsonElement(jsonObj.get("edited_message"));
      }
      // validate the optional field `inline_query`
      if (jsonObj.get("inline_query") != null && !jsonObj.get("inline_query").isJsonNull()) {
        InlineQuery.validateJsonElement(jsonObj.get("inline_query"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        Message.validateJsonElement(jsonObj.get("message"));
      }
      // validate the optional field `poll`
      if (jsonObj.get("poll") != null && !jsonObj.get("poll").isJsonNull()) {
        Poll.validateJsonElement(jsonObj.get("poll"));
      }
      // validate the optional field `poll_answer`
      if (jsonObj.get("poll_answer") != null && !jsonObj.get("poll_answer").isJsonNull()) {
        PollAnswer.validateJsonElement(jsonObj.get("poll_answer"));
      }
      // validate the optional field `pre_checkout_query`
      if (jsonObj.get("pre_checkout_query") != null && !jsonObj.get("pre_checkout_query").isJsonNull()) {
        PreCheckoutQuery.validateJsonElement(jsonObj.get("pre_checkout_query"));
      }
      // validate the optional field `shipping_query`
      if (jsonObj.get("shipping_query") != null && !jsonObj.get("shipping_query").isJsonNull()) {
        ShippingQuery.validateJsonElement(jsonObj.get("shipping_query"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Update.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Update' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Update> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Update.class));

       return (TypeAdapter<T>) new TypeAdapter<Update>() {
           @Override
           public void write(JsonWriter out, Update value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Update read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Update given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Update
   * @throws IOException if the JSON string is invalid with respect to Update
   */
  public static Update fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Update.class);
  }

  /**
   * Convert an instance of Update to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

