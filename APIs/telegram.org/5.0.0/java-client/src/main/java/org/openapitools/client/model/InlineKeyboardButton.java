/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LoginUrl;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InlineKeyboardButton {
  public static final String SERIALIZED_NAME_CALLBACK_DATA = "callback_data";
  @SerializedName(SERIALIZED_NAME_CALLBACK_DATA)
  private String callbackData;

  public static final String SERIALIZED_NAME_CALLBACK_GAME = "callback_game";
  @SerializedName(SERIALIZED_NAME_CALLBACK_GAME)
  private Object callbackGame = null;

  public static final String SERIALIZED_NAME_LOGIN_URL = "login_url";
  @SerializedName(SERIALIZED_NAME_LOGIN_URL)
  private LoginUrl loginUrl;

  public static final String SERIALIZED_NAME_PAY = "pay";
  @SerializedName(SERIALIZED_NAME_PAY)
  private Boolean pay;

  public static final String SERIALIZED_NAME_SWITCH_INLINE_QUERY = "switch_inline_query";
  @SerializedName(SERIALIZED_NAME_SWITCH_INLINE_QUERY)
  private String switchInlineQuery;

  public static final String SERIALIZED_NAME_SWITCH_INLINE_QUERY_CURRENT_CHAT = "switch_inline_query_current_chat";
  @SerializedName(SERIALIZED_NAME_SWITCH_INLINE_QUERY_CURRENT_CHAT)
  private String switchInlineQueryCurrentChat;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public InlineKeyboardButton() {
  }

  public InlineKeyboardButton callbackData(String callbackData) {
    this.callbackData = callbackData;
    return this;
  }

  /**
   * *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes
   * @return callbackData
   */
  @javax.annotation.Nullable
  public String getCallbackData() {
    return callbackData;
  }

  public void setCallbackData(String callbackData) {
    this.callbackData = callbackData;
  }


  public InlineKeyboardButton callbackGame(Object callbackGame) {
    this.callbackGame = callbackGame;
    return this;
  }

  /**
   * A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.
   * @return callbackGame
   */
  @javax.annotation.Nullable
  public Object getCallbackGame() {
    return callbackGame;
  }

  public void setCallbackGame(Object callbackGame) {
    this.callbackGame = callbackGame;
  }


  public InlineKeyboardButton loginUrl(LoginUrl loginUrl) {
    this.loginUrl = loginUrl;
    return this;
  }

  /**
   * Get loginUrl
   * @return loginUrl
   */
  @javax.annotation.Nullable
  public LoginUrl getLoginUrl() {
    return loginUrl;
  }

  public void setLoginUrl(LoginUrl loginUrl) {
    this.loginUrl = loginUrl;
  }


  public InlineKeyboardButton pay(Boolean pay) {
    this.pay = pay;
    return this;
  }

  /**
   * *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).    **NOTE:** This type of button **must** always be the first button in the first row.
   * @return pay
   */
  @javax.annotation.Nullable
  public Boolean getPay() {
    return pay;
  }

  public void setPay(Boolean pay) {
    this.pay = pay;
  }


  public InlineKeyboardButton switchInlineQuery(String switchInlineQuery) {
    this.switchInlineQuery = switchInlineQuery;
    return this;
  }

  /**
   * *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot&#39;s username and the specified inline query in the input field. Can be empty, in which case just the bot&#39;s username will be inserted.    **Note:** This offers an easy way for users to start using your bot in [inline mode](/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\\_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
   * @return switchInlineQuery
   */
  @javax.annotation.Nullable
  public String getSwitchInlineQuery() {
    return switchInlineQuery;
  }

  public void setSwitchInlineQuery(String switchInlineQuery) {
    this.switchInlineQuery = switchInlineQuery;
  }


  public InlineKeyboardButton switchInlineQueryCurrentChat(String switchInlineQueryCurrentChat) {
    this.switchInlineQueryCurrentChat = switchInlineQueryCurrentChat;
    return this;
  }

  /**
   * *Optional*. If set, pressing the button will insert the bot&#39;s username and the specified inline query in the current chat&#39;s input field. Can be empty, in which case only the bot&#39;s username will be inserted.    This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.
   * @return switchInlineQueryCurrentChat
   */
  @javax.annotation.Nullable
  public String getSwitchInlineQueryCurrentChat() {
    return switchInlineQueryCurrentChat;
  }

  public void setSwitchInlineQueryCurrentChat(String switchInlineQueryCurrentChat) {
    this.switchInlineQueryCurrentChat = switchInlineQueryCurrentChat;
  }


  public InlineKeyboardButton text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Label text on the button
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public InlineKeyboardButton url(String url) {
    this.url = url;
    return this;
  }

  /**
   * *Optional*. HTTP or tg:// url to be opened when button is pressed
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineKeyboardButton inlineKeyboardButton = (InlineKeyboardButton) o;
    return Objects.equals(this.callbackData, inlineKeyboardButton.callbackData) &&
        Objects.equals(this.callbackGame, inlineKeyboardButton.callbackGame) &&
        Objects.equals(this.loginUrl, inlineKeyboardButton.loginUrl) &&
        Objects.equals(this.pay, inlineKeyboardButton.pay) &&
        Objects.equals(this.switchInlineQuery, inlineKeyboardButton.switchInlineQuery) &&
        Objects.equals(this.switchInlineQueryCurrentChat, inlineKeyboardButton.switchInlineQueryCurrentChat) &&
        Objects.equals(this.text, inlineKeyboardButton.text) &&
        Objects.equals(this.url, inlineKeyboardButton.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackData, callbackGame, loginUrl, pay, switchInlineQuery, switchInlineQueryCurrentChat, text, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineKeyboardButton {\n");
    sb.append("    callbackData: ").append(toIndentedString(callbackData)).append("\n");
    sb.append("    callbackGame: ").append(toIndentedString(callbackGame)).append("\n");
    sb.append("    loginUrl: ").append(toIndentedString(loginUrl)).append("\n");
    sb.append("    pay: ").append(toIndentedString(pay)).append("\n");
    sb.append("    switchInlineQuery: ").append(toIndentedString(switchInlineQuery)).append("\n");
    sb.append("    switchInlineQueryCurrentChat: ").append(toIndentedString(switchInlineQueryCurrentChat)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callback_data");
    openapiFields.add("callback_game");
    openapiFields.add("login_url");
    openapiFields.add("pay");
    openapiFields.add("switch_inline_query");
    openapiFields.add("switch_inline_query_current_chat");
    openapiFields.add("text");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InlineKeyboardButton
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InlineKeyboardButton.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineKeyboardButton is not found in the empty JSON string", InlineKeyboardButton.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InlineKeyboardButton.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineKeyboardButton` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InlineKeyboardButton.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callback_data") != null && !jsonObj.get("callback_data").isJsonNull()) && !jsonObj.get("callback_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_data").toString()));
      }
      // validate the optional field `login_url`
      if (jsonObj.get("login_url") != null && !jsonObj.get("login_url").isJsonNull()) {
        LoginUrl.validateJsonElement(jsonObj.get("login_url"));
      }
      if ((jsonObj.get("switch_inline_query") != null && !jsonObj.get("switch_inline_query").isJsonNull()) && !jsonObj.get("switch_inline_query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switch_inline_query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switch_inline_query").toString()));
      }
      if ((jsonObj.get("switch_inline_query_current_chat") != null && !jsonObj.get("switch_inline_query_current_chat").isJsonNull()) && !jsonObj.get("switch_inline_query_current_chat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switch_inline_query_current_chat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switch_inline_query_current_chat").toString()));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineKeyboardButton.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineKeyboardButton' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineKeyboardButton> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineKeyboardButton.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineKeyboardButton>() {
           @Override
           public void write(JsonWriter out, InlineKeyboardButton value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineKeyboardButton read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InlineKeyboardButton given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InlineKeyboardButton
   * @throws IOException if the JSON string is invalid with respect to InlineKeyboardButton
   */
  public static InlineKeyboardButton fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineKeyboardButton.class);
  }

  /**
   * Convert an instance of InlineKeyboardButton to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

