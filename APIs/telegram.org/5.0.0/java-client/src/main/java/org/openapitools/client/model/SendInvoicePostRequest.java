/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InlineKeyboardMarkup;
import org.openapitools.client.model.LabeledPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendInvoicePostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendInvoicePostRequest {
  public static final String SERIALIZED_NAME_ALLOW_SENDING_WITHOUT_REPLY = "allow_sending_without_reply";
  @SerializedName(SERIALIZED_NAME_ALLOW_SENDING_WITHOUT_REPLY)
  private Boolean allowSendingWithoutReply;

  public static final String SERIALIZED_NAME_CHAT_ID = "chat_id";
  @SerializedName(SERIALIZED_NAME_CHAT_ID)
  private Integer chatId;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLE_NOTIFICATION = "disable_notification";
  @SerializedName(SERIALIZED_NAME_DISABLE_NOTIFICATION)
  private Boolean disableNotification;

  public static final String SERIALIZED_NAME_IS_FLEXIBLE = "is_flexible";
  @SerializedName(SERIALIZED_NAME_IS_FLEXIBLE)
  private Boolean isFlexible;

  public static final String SERIALIZED_NAME_NEED_EMAIL = "need_email";
  @SerializedName(SERIALIZED_NAME_NEED_EMAIL)
  private Boolean needEmail;

  public static final String SERIALIZED_NAME_NEED_NAME = "need_name";
  @SerializedName(SERIALIZED_NAME_NEED_NAME)
  private Boolean needName;

  public static final String SERIALIZED_NAME_NEED_PHONE_NUMBER = "need_phone_number";
  @SerializedName(SERIALIZED_NAME_NEED_PHONE_NUMBER)
  private Boolean needPhoneNumber;

  public static final String SERIALIZED_NAME_NEED_SHIPPING_ADDRESS = "need_shipping_address";
  @SerializedName(SERIALIZED_NAME_NEED_SHIPPING_ADDRESS)
  private Boolean needShippingAddress;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private String payload;

  public static final String SERIALIZED_NAME_PHOTO_HEIGHT = "photo_height";
  @SerializedName(SERIALIZED_NAME_PHOTO_HEIGHT)
  private Integer photoHeight;

  public static final String SERIALIZED_NAME_PHOTO_SIZE = "photo_size";
  @SerializedName(SERIALIZED_NAME_PHOTO_SIZE)
  private Integer photoSize;

  public static final String SERIALIZED_NAME_PHOTO_URL = "photo_url";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_PHOTO_WIDTH = "photo_width";
  @SerializedName(SERIALIZED_NAME_PHOTO_WIDTH)
  private Integer photoWidth;

  public static final String SERIALIZED_NAME_PRICES = "prices";
  @SerializedName(SERIALIZED_NAME_PRICES)
  private List<LabeledPrice> prices = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER_DATA = "provider_data";
  @SerializedName(SERIALIZED_NAME_PROVIDER_DATA)
  private String providerData;

  public static final String SERIALIZED_NAME_PROVIDER_TOKEN = "provider_token";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TOKEN)
  private String providerToken;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private InlineKeyboardMarkup replyMarkup;

  public static final String SERIALIZED_NAME_REPLY_TO_MESSAGE_ID = "reply_to_message_id";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_MESSAGE_ID)
  private Integer replyToMessageId;

  public static final String SERIALIZED_NAME_SEND_EMAIL_TO_PROVIDER = "send_email_to_provider";
  @SerializedName(SERIALIZED_NAME_SEND_EMAIL_TO_PROVIDER)
  private Boolean sendEmailToProvider;

  public static final String SERIALIZED_NAME_SEND_PHONE_NUMBER_TO_PROVIDER = "send_phone_number_to_provider";
  @SerializedName(SERIALIZED_NAME_SEND_PHONE_NUMBER_TO_PROVIDER)
  private Boolean sendPhoneNumberToProvider;

  public static final String SERIALIZED_NAME_START_PARAMETER = "start_parameter";
  @SerializedName(SERIALIZED_NAME_START_PARAMETER)
  private String startParameter;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public SendInvoicePostRequest() {
  }

  public SendInvoicePostRequest allowSendingWithoutReply(Boolean allowSendingWithoutReply) {
    this.allowSendingWithoutReply = allowSendingWithoutReply;
    return this;
  }

  /**
   * Pass *True*, if the message should be sent even if the specified replied-to message is not found
   * @return allowSendingWithoutReply
   */
  @javax.annotation.Nullable
  public Boolean getAllowSendingWithoutReply() {
    return allowSendingWithoutReply;
  }

  public void setAllowSendingWithoutReply(Boolean allowSendingWithoutReply) {
    this.allowSendingWithoutReply = allowSendingWithoutReply;
  }


  public SendInvoicePostRequest chatId(Integer chatId) {
    this.chatId = chatId;
    return this;
  }

  /**
   * Unique identifier for the target private chat
   * @return chatId
   */
  @javax.annotation.Nonnull
  public Integer getChatId() {
    return chatId;
  }

  public void setChatId(Integer chatId) {
    this.chatId = chatId;
  }


  public SendInvoicePostRequest currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public SendInvoicePostRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Product description, 1-255 characters
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SendInvoicePostRequest disableNotification(Boolean disableNotification) {
    this.disableNotification = disableNotification;
    return this;
  }

  /**
   * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
   * @return disableNotification
   */
  @javax.annotation.Nullable
  public Boolean getDisableNotification() {
    return disableNotification;
  }

  public void setDisableNotification(Boolean disableNotification) {
    this.disableNotification = disableNotification;
  }


  public SendInvoicePostRequest isFlexible(Boolean isFlexible) {
    this.isFlexible = isFlexible;
    return this;
  }

  /**
   * Pass *True*, if the final price depends on the shipping method
   * @return isFlexible
   */
  @javax.annotation.Nullable
  public Boolean getIsFlexible() {
    return isFlexible;
  }

  public void setIsFlexible(Boolean isFlexible) {
    this.isFlexible = isFlexible;
  }


  public SendInvoicePostRequest needEmail(Boolean needEmail) {
    this.needEmail = needEmail;
    return this;
  }

  /**
   * Pass *True*, if you require the user&#39;s email address to complete the order
   * @return needEmail
   */
  @javax.annotation.Nullable
  public Boolean getNeedEmail() {
    return needEmail;
  }

  public void setNeedEmail(Boolean needEmail) {
    this.needEmail = needEmail;
  }


  public SendInvoicePostRequest needName(Boolean needName) {
    this.needName = needName;
    return this;
  }

  /**
   * Pass *True*, if you require the user&#39;s full name to complete the order
   * @return needName
   */
  @javax.annotation.Nullable
  public Boolean getNeedName() {
    return needName;
  }

  public void setNeedName(Boolean needName) {
    this.needName = needName;
  }


  public SendInvoicePostRequest needPhoneNumber(Boolean needPhoneNumber) {
    this.needPhoneNumber = needPhoneNumber;
    return this;
  }

  /**
   * Pass *True*, if you require the user&#39;s phone number to complete the order
   * @return needPhoneNumber
   */
  @javax.annotation.Nullable
  public Boolean getNeedPhoneNumber() {
    return needPhoneNumber;
  }

  public void setNeedPhoneNumber(Boolean needPhoneNumber) {
    this.needPhoneNumber = needPhoneNumber;
  }


  public SendInvoicePostRequest needShippingAddress(Boolean needShippingAddress) {
    this.needShippingAddress = needShippingAddress;
    return this;
  }

  /**
   * Pass *True*, if you require the user&#39;s shipping address to complete the order
   * @return needShippingAddress
   */
  @javax.annotation.Nullable
  public Boolean getNeedShippingAddress() {
    return needShippingAddress;
  }

  public void setNeedShippingAddress(Boolean needShippingAddress) {
    this.needShippingAddress = needShippingAddress;
  }


  public SendInvoicePostRequest payload(String payload) {
    this.payload = payload;
    return this;
  }

  /**
   * Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
   * @return payload
   */
  @javax.annotation.Nonnull
  public String getPayload() {
    return payload;
  }

  public void setPayload(String payload) {
    this.payload = payload;
  }


  public SendInvoicePostRequest photoHeight(Integer photoHeight) {
    this.photoHeight = photoHeight;
    return this;
  }

  /**
   * Photo height
   * @return photoHeight
   */
  @javax.annotation.Nullable
  public Integer getPhotoHeight() {
    return photoHeight;
  }

  public void setPhotoHeight(Integer photoHeight) {
    this.photoHeight = photoHeight;
  }


  public SendInvoicePostRequest photoSize(Integer photoSize) {
    this.photoSize = photoSize;
    return this;
  }

  /**
   * Photo size
   * @return photoSize
   */
  @javax.annotation.Nullable
  public Integer getPhotoSize() {
    return photoSize;
  }

  public void setPhotoSize(Integer photoSize) {
    this.photoSize = photoSize;
  }


  public SendInvoicePostRequest photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public SendInvoicePostRequest photoWidth(Integer photoWidth) {
    this.photoWidth = photoWidth;
    return this;
  }

  /**
   * Photo width
   * @return photoWidth
   */
  @javax.annotation.Nullable
  public Integer getPhotoWidth() {
    return photoWidth;
  }

  public void setPhotoWidth(Integer photoWidth) {
    this.photoWidth = photoWidth;
  }


  public SendInvoicePostRequest prices(List<LabeledPrice> prices) {
    this.prices = prices;
    return this;
  }

  public SendInvoicePostRequest addPricesItem(LabeledPrice pricesItem) {
    if (this.prices == null) {
      this.prices = new ArrayList<>();
    }
    this.prices.add(pricesItem);
    return this;
  }

  /**
   * Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
   * @return prices
   */
  @javax.annotation.Nonnull
  public List<LabeledPrice> getPrices() {
    return prices;
  }

  public void setPrices(List<LabeledPrice> prices) {
    this.prices = prices;
  }


  public SendInvoicePostRequest providerData(String providerData) {
    this.providerData = providerData;
    return this;
  }

  /**
   * A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
   * @return providerData
   */
  @javax.annotation.Nullable
  public String getProviderData() {
    return providerData;
  }

  public void setProviderData(String providerData) {
    this.providerData = providerData;
  }


  public SendInvoicePostRequest providerToken(String providerToken) {
    this.providerToken = providerToken;
    return this;
  }

  /**
   * Payments provider token, obtained via [Botfather](https://t.me/botfather)
   * @return providerToken
   */
  @javax.annotation.Nonnull
  public String getProviderToken() {
    return providerToken;
  }

  public void setProviderToken(String providerToken) {
    this.providerToken = providerToken;
  }


  public SendInvoicePostRequest replyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public InlineKeyboardMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public SendInvoicePostRequest replyToMessageId(Integer replyToMessageId) {
    this.replyToMessageId = replyToMessageId;
    return this;
  }

  /**
   * If the message is a reply, ID of the original message
   * @return replyToMessageId
   */
  @javax.annotation.Nullable
  public Integer getReplyToMessageId() {
    return replyToMessageId;
  }

  public void setReplyToMessageId(Integer replyToMessageId) {
    this.replyToMessageId = replyToMessageId;
  }


  public SendInvoicePostRequest sendEmailToProvider(Boolean sendEmailToProvider) {
    this.sendEmailToProvider = sendEmailToProvider;
    return this;
  }

  /**
   * Pass *True*, if user&#39;s email address should be sent to provider
   * @return sendEmailToProvider
   */
  @javax.annotation.Nullable
  public Boolean getSendEmailToProvider() {
    return sendEmailToProvider;
  }

  public void setSendEmailToProvider(Boolean sendEmailToProvider) {
    this.sendEmailToProvider = sendEmailToProvider;
  }


  public SendInvoicePostRequest sendPhoneNumberToProvider(Boolean sendPhoneNumberToProvider) {
    this.sendPhoneNumberToProvider = sendPhoneNumberToProvider;
    return this;
  }

  /**
   * Pass *True*, if user&#39;s phone number should be sent to provider
   * @return sendPhoneNumberToProvider
   */
  @javax.annotation.Nullable
  public Boolean getSendPhoneNumberToProvider() {
    return sendPhoneNumberToProvider;
  }

  public void setSendPhoneNumberToProvider(Boolean sendPhoneNumberToProvider) {
    this.sendPhoneNumberToProvider = sendPhoneNumberToProvider;
  }


  public SendInvoicePostRequest startParameter(String startParameter) {
    this.startParameter = startParameter;
    return this;
  }

  /**
   * Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
   * @return startParameter
   */
  @javax.annotation.Nonnull
  public String getStartParameter() {
    return startParameter;
  }

  public void setStartParameter(String startParameter) {
    this.startParameter = startParameter;
  }


  public SendInvoicePostRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Product name, 1-32 characters
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendInvoicePostRequest sendInvoicePostRequest = (SendInvoicePostRequest) o;
    return Objects.equals(this.allowSendingWithoutReply, sendInvoicePostRequest.allowSendingWithoutReply) &&
        Objects.equals(this.chatId, sendInvoicePostRequest.chatId) &&
        Objects.equals(this.currency, sendInvoicePostRequest.currency) &&
        Objects.equals(this.description, sendInvoicePostRequest.description) &&
        Objects.equals(this.disableNotification, sendInvoicePostRequest.disableNotification) &&
        Objects.equals(this.isFlexible, sendInvoicePostRequest.isFlexible) &&
        Objects.equals(this.needEmail, sendInvoicePostRequest.needEmail) &&
        Objects.equals(this.needName, sendInvoicePostRequest.needName) &&
        Objects.equals(this.needPhoneNumber, sendInvoicePostRequest.needPhoneNumber) &&
        Objects.equals(this.needShippingAddress, sendInvoicePostRequest.needShippingAddress) &&
        Objects.equals(this.payload, sendInvoicePostRequest.payload) &&
        Objects.equals(this.photoHeight, sendInvoicePostRequest.photoHeight) &&
        Objects.equals(this.photoSize, sendInvoicePostRequest.photoSize) &&
        Objects.equals(this.photoUrl, sendInvoicePostRequest.photoUrl) &&
        Objects.equals(this.photoWidth, sendInvoicePostRequest.photoWidth) &&
        Objects.equals(this.prices, sendInvoicePostRequest.prices) &&
        Objects.equals(this.providerData, sendInvoicePostRequest.providerData) &&
        Objects.equals(this.providerToken, sendInvoicePostRequest.providerToken) &&
        Objects.equals(this.replyMarkup, sendInvoicePostRequest.replyMarkup) &&
        Objects.equals(this.replyToMessageId, sendInvoicePostRequest.replyToMessageId) &&
        Objects.equals(this.sendEmailToProvider, sendInvoicePostRequest.sendEmailToProvider) &&
        Objects.equals(this.sendPhoneNumberToProvider, sendInvoicePostRequest.sendPhoneNumberToProvider) &&
        Objects.equals(this.startParameter, sendInvoicePostRequest.startParameter) &&
        Objects.equals(this.title, sendInvoicePostRequest.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowSendingWithoutReply, chatId, currency, description, disableNotification, isFlexible, needEmail, needName, needPhoneNumber, needShippingAddress, payload, photoHeight, photoSize, photoUrl, photoWidth, prices, providerData, providerToken, replyMarkup, replyToMessageId, sendEmailToProvider, sendPhoneNumberToProvider, startParameter, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendInvoicePostRequest {\n");
    sb.append("    allowSendingWithoutReply: ").append(toIndentedString(allowSendingWithoutReply)).append("\n");
    sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disableNotification: ").append(toIndentedString(disableNotification)).append("\n");
    sb.append("    isFlexible: ").append(toIndentedString(isFlexible)).append("\n");
    sb.append("    needEmail: ").append(toIndentedString(needEmail)).append("\n");
    sb.append("    needName: ").append(toIndentedString(needName)).append("\n");
    sb.append("    needPhoneNumber: ").append(toIndentedString(needPhoneNumber)).append("\n");
    sb.append("    needShippingAddress: ").append(toIndentedString(needShippingAddress)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    photoHeight: ").append(toIndentedString(photoHeight)).append("\n");
    sb.append("    photoSize: ").append(toIndentedString(photoSize)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    photoWidth: ").append(toIndentedString(photoWidth)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("    providerData: ").append(toIndentedString(providerData)).append("\n");
    sb.append("    providerToken: ").append(toIndentedString(providerToken)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    replyToMessageId: ").append(toIndentedString(replyToMessageId)).append("\n");
    sb.append("    sendEmailToProvider: ").append(toIndentedString(sendEmailToProvider)).append("\n");
    sb.append("    sendPhoneNumberToProvider: ").append(toIndentedString(sendPhoneNumberToProvider)).append("\n");
    sb.append("    startParameter: ").append(toIndentedString(startParameter)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_sending_without_reply");
    openapiFields.add("chat_id");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("disable_notification");
    openapiFields.add("is_flexible");
    openapiFields.add("need_email");
    openapiFields.add("need_name");
    openapiFields.add("need_phone_number");
    openapiFields.add("need_shipping_address");
    openapiFields.add("payload");
    openapiFields.add("photo_height");
    openapiFields.add("photo_size");
    openapiFields.add("photo_url");
    openapiFields.add("photo_width");
    openapiFields.add("prices");
    openapiFields.add("provider_data");
    openapiFields.add("provider_token");
    openapiFields.add("reply_markup");
    openapiFields.add("reply_to_message_id");
    openapiFields.add("send_email_to_provider");
    openapiFields.add("send_phone_number_to_provider");
    openapiFields.add("start_parameter");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chat_id");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("payload");
    openapiRequiredFields.add("prices");
    openapiRequiredFields.add("provider_token");
    openapiRequiredFields.add("start_parameter");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendInvoicePostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendInvoicePostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendInvoicePostRequest is not found in the empty JSON string", SendInvoicePostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendInvoicePostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendInvoicePostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendInvoicePostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("payload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload").toString()));
      }
      if ((jsonObj.get("photo_url") != null && !jsonObj.get("photo_url").isJsonNull()) && !jsonObj.get("photo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photo_url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("prices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prices` to be an array in the JSON string but got `%s`", jsonObj.get("prices").toString()));
      }

      JsonArray jsonArrayprices = jsonObj.getAsJsonArray("prices");
      // validate the required field `prices` (array)
      for (int i = 0; i < jsonArrayprices.size(); i++) {
        LabeledPrice.validateJsonElement(jsonArrayprices.get(i));
      };
      if ((jsonObj.get("provider_data") != null && !jsonObj.get("provider_data").isJsonNull()) && !jsonObj.get("provider_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_data").toString()));
      }
      if (!jsonObj.get("provider_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_token").toString()));
      }
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        InlineKeyboardMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
      if (!jsonObj.get("start_parameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_parameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_parameter").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendInvoicePostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendInvoicePostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendInvoicePostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendInvoicePostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendInvoicePostRequest>() {
           @Override
           public void write(JsonWriter out, SendInvoicePostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendInvoicePostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendInvoicePostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendInvoicePostRequest
   * @throws IOException if the JSON string is invalid with respect to SendInvoicePostRequest
   */
  public static SendInvoicePostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendInvoicePostRequest.class);
  }

  /**
   * Convert an instance of SendInvoicePostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

