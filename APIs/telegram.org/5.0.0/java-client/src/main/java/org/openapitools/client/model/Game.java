/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Animation;
import org.openapitools.client.model.MessageEntity;
import org.openapitools.client.model.PhotoSize;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Game {
  public static final String SERIALIZED_NAME_ANIMATION = "animation";
  @SerializedName(SERIALIZED_NAME_ANIMATION)
  private Animation animation;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PHOTO = "photo";
  @SerializedName(SERIALIZED_NAME_PHOTO)
  private List<PhotoSize> photo = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TEXT_ENTITIES = "text_entities";
  @SerializedName(SERIALIZED_NAME_TEXT_ENTITIES)
  private List<MessageEntity> textEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Game() {
  }

  public Game animation(Animation animation) {
    this.animation = animation;
    return this;
  }

  /**
   * Get animation
   * @return animation
   */
  @javax.annotation.Nullable
  public Animation getAnimation() {
    return animation;
  }

  public void setAnimation(Animation animation) {
    this.animation = animation;
  }


  public Game description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the game
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Game photo(List<PhotoSize> photo) {
    this.photo = photo;
    return this;
  }

  public Game addPhotoItem(PhotoSize photoItem) {
    if (this.photo == null) {
      this.photo = new ArrayList<>();
    }
    this.photo.add(photoItem);
    return this;
  }

  /**
   * Photo that will be displayed in the game message in chats.
   * @return photo
   */
  @javax.annotation.Nonnull
  public List<PhotoSize> getPhoto() {
    return photo;
  }

  public void setPhoto(List<PhotoSize> photo) {
    this.photo = photo;
  }


  public Game text(String text) {
    this.text = text;
    return this;
  }

  /**
   * *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public Game textEntities(List<MessageEntity> textEntities) {
    this.textEntities = textEntities;
    return this;
  }

  public Game addTextEntitiesItem(MessageEntity textEntitiesItem) {
    if (this.textEntities == null) {
      this.textEntities = new ArrayList<>();
    }
    this.textEntities.add(textEntitiesItem);
    return this;
  }

  /**
   * *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.
   * @return textEntities
   */
  @javax.annotation.Nullable
  public List<MessageEntity> getTextEntities() {
    return textEntities;
  }

  public void setTextEntities(List<MessageEntity> textEntities) {
    this.textEntities = textEntities;
  }


  public Game title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the game
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Game game = (Game) o;
    return Objects.equals(this.animation, game.animation) &&
        Objects.equals(this.description, game.description) &&
        Objects.equals(this.photo, game.photo) &&
        Objects.equals(this.text, game.text) &&
        Objects.equals(this.textEntities, game.textEntities) &&
        Objects.equals(this.title, game.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(animation, description, photo, text, textEntities, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Game {\n");
    sb.append("    animation: ").append(toIndentedString(animation)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    photo: ").append(toIndentedString(photo)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textEntities: ").append(toIndentedString(textEntities)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("animation");
    openapiFields.add("description");
    openapiFields.add("photo");
    openapiFields.add("text");
    openapiFields.add("text_entities");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("photo");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Game
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Game.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Game is not found in the empty JSON string", Game.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Game.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Game` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Game.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `animation`
      if (jsonObj.get("animation") != null && !jsonObj.get("animation").isJsonNull()) {
        Animation.validateJsonElement(jsonObj.get("animation"));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("photo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `photo` to be an array in the JSON string but got `%s`", jsonObj.get("photo").toString()));
      }

      JsonArray jsonArrayphoto = jsonObj.getAsJsonArray("photo");
      // validate the required field `photo` (array)
      for (int i = 0; i < jsonArrayphoto.size(); i++) {
        PhotoSize.validateJsonElement(jsonArrayphoto.get(i));
      };
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (jsonObj.get("text_entities") != null && !jsonObj.get("text_entities").isJsonNull()) {
        JsonArray jsonArraytextEntities = jsonObj.getAsJsonArray("text_entities");
        if (jsonArraytextEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("text_entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `text_entities` to be an array in the JSON string but got `%s`", jsonObj.get("text_entities").toString()));
          }

          // validate the optional field `text_entities` (array)
          for (int i = 0; i < jsonArraytextEntities.size(); i++) {
            MessageEntity.validateJsonElement(jsonArraytextEntities.get(i));
          };
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Game.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Game' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Game> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Game.class));

       return (TypeAdapter<T>) new TypeAdapter<Game>() {
           @Override
           public void write(JsonWriter out, Game value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Game read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Game given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Game
   * @throws IOException if the JSON string is invalid with respect to Game
   */
  public static Game fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Game.class);
  }

  /**
   * Convert an instance of Game to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

