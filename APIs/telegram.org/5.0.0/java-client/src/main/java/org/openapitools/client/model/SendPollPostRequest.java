/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CopyMessagePostRequestChatId;
import org.openapitools.client.model.CopyMessagePostRequestReplyMarkup;
import org.openapitools.client.model.MessageEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendPollPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendPollPostRequest {
  public static final String SERIALIZED_NAME_ALLOW_SENDING_WITHOUT_REPLY = "allow_sending_without_reply";
  @SerializedName(SERIALIZED_NAME_ALLOW_SENDING_WITHOUT_REPLY)
  private Boolean allowSendingWithoutReply;

  public static final String SERIALIZED_NAME_ALLOWS_MULTIPLE_ANSWERS = "allows_multiple_answers";
  @SerializedName(SERIALIZED_NAME_ALLOWS_MULTIPLE_ANSWERS)
  private Boolean allowsMultipleAnswers;

  public static final String SERIALIZED_NAME_CHAT_ID = "chat_id";
  @SerializedName(SERIALIZED_NAME_CHAT_ID)
  private CopyMessagePostRequestChatId chatId;

  public static final String SERIALIZED_NAME_CLOSE_DATE = "close_date";
  @SerializedName(SERIALIZED_NAME_CLOSE_DATE)
  private Integer closeDate;

  public static final String SERIALIZED_NAME_CORRECT_OPTION_ID = "correct_option_id";
  @SerializedName(SERIALIZED_NAME_CORRECT_OPTION_ID)
  private Integer correctOptionId;

  public static final String SERIALIZED_NAME_DISABLE_NOTIFICATION = "disable_notification";
  @SerializedName(SERIALIZED_NAME_DISABLE_NOTIFICATION)
  private Boolean disableNotification;

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_EXPLANATION_ENTITIES = "explanation_entities";
  @SerializedName(SERIALIZED_NAME_EXPLANATION_ENTITIES)
  private List<MessageEntity> explanationEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPLANATION_PARSE_MODE = "explanation_parse_mode";
  @SerializedName(SERIALIZED_NAME_EXPLANATION_PARSE_MODE)
  private String explanationParseMode;

  public static final String SERIALIZED_NAME_IS_ANONYMOUS = "is_anonymous";
  @SerializedName(SERIALIZED_NAME_IS_ANONYMOUS)
  private Boolean isAnonymous;

  public static final String SERIALIZED_NAME_IS_CLOSED = "is_closed";
  @SerializedName(SERIALIZED_NAME_IS_CLOSED)
  private Boolean isClosed;

  public static final String SERIALIZED_NAME_OPEN_PERIOD = "open_period";
  @SerializedName(SERIALIZED_NAME_OPEN_PERIOD)
  private Integer openPeriod;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<String> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUESTION = "question";
  @SerializedName(SERIALIZED_NAME_QUESTION)
  private String question;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private CopyMessagePostRequestReplyMarkup replyMarkup;

  public static final String SERIALIZED_NAME_REPLY_TO_MESSAGE_ID = "reply_to_message_id";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_MESSAGE_ID)
  private Integer replyToMessageId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SendPollPostRequest() {
  }

  public SendPollPostRequest allowSendingWithoutReply(Boolean allowSendingWithoutReply) {
    this.allowSendingWithoutReply = allowSendingWithoutReply;
    return this;
  }

  /**
   * Pass *True*, if the message should be sent even if the specified replied-to message is not found
   * @return allowSendingWithoutReply
   */
  @javax.annotation.Nullable
  public Boolean getAllowSendingWithoutReply() {
    return allowSendingWithoutReply;
  }

  public void setAllowSendingWithoutReply(Boolean allowSendingWithoutReply) {
    this.allowSendingWithoutReply = allowSendingWithoutReply;
  }


  public SendPollPostRequest allowsMultipleAnswers(Boolean allowsMultipleAnswers) {
    this.allowsMultipleAnswers = allowsMultipleAnswers;
    return this;
  }

  /**
   * True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
   * @return allowsMultipleAnswers
   */
  @javax.annotation.Nullable
  public Boolean getAllowsMultipleAnswers() {
    return allowsMultipleAnswers;
  }

  public void setAllowsMultipleAnswers(Boolean allowsMultipleAnswers) {
    this.allowsMultipleAnswers = allowsMultipleAnswers;
  }


  public SendPollPostRequest chatId(CopyMessagePostRequestChatId chatId) {
    this.chatId = chatId;
    return this;
  }

  /**
   * Get chatId
   * @return chatId
   */
  @javax.annotation.Nonnull
  public CopyMessagePostRequestChatId getChatId() {
    return chatId;
  }

  public void setChatId(CopyMessagePostRequestChatId chatId) {
    this.chatId = chatId;
  }


  public SendPollPostRequest closeDate(Integer closeDate) {
    this.closeDate = closeDate;
    return this;
  }

  /**
   * Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can&#39;t be used together with *open\\_period*.
   * @return closeDate
   */
  @javax.annotation.Nullable
  public Integer getCloseDate() {
    return closeDate;
  }

  public void setCloseDate(Integer closeDate) {
    this.closeDate = closeDate;
  }


  public SendPollPostRequest correctOptionId(Integer correctOptionId) {
    this.correctOptionId = correctOptionId;
    return this;
  }

  /**
   * 0-based identifier of the correct answer option, required for polls in quiz mode
   * @return correctOptionId
   */
  @javax.annotation.Nullable
  public Integer getCorrectOptionId() {
    return correctOptionId;
  }

  public void setCorrectOptionId(Integer correctOptionId) {
    this.correctOptionId = correctOptionId;
  }


  public SendPollPostRequest disableNotification(Boolean disableNotification) {
    this.disableNotification = disableNotification;
    return this;
  }

  /**
   * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
   * @return disableNotification
   */
  @javax.annotation.Nullable
  public Boolean getDisableNotification() {
    return disableNotification;
  }

  public void setDisableNotification(Boolean disableNotification) {
    this.disableNotification = disableNotification;
  }


  public SendPollPostRequest explanation(String explanation) {
    this.explanation = explanation;
    return this;
  }

  /**
   * Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
   * @return explanation
   */
  @javax.annotation.Nullable
  public String getExplanation() {
    return explanation;
  }

  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }


  public SendPollPostRequest explanationEntities(List<MessageEntity> explanationEntities) {
    this.explanationEntities = explanationEntities;
    return this;
  }

  public SendPollPostRequest addExplanationEntitiesItem(MessageEntity explanationEntitiesItem) {
    if (this.explanationEntities == null) {
      this.explanationEntities = new ArrayList<>();
    }
    this.explanationEntities.add(explanationEntitiesItem);
    return this;
  }

  /**
   * List of special entities that appear in the poll explanation, which can be specified instead of *parse\\_mode*
   * @return explanationEntities
   */
  @javax.annotation.Nullable
  public List<MessageEntity> getExplanationEntities() {
    return explanationEntities;
  }

  public void setExplanationEntities(List<MessageEntity> explanationEntities) {
    this.explanationEntities = explanationEntities;
  }


  public SendPollPostRequest explanationParseMode(String explanationParseMode) {
    this.explanationParseMode = explanationParseMode;
    return this;
  }

  /**
   * Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
   * @return explanationParseMode
   */
  @javax.annotation.Nullable
  public String getExplanationParseMode() {
    return explanationParseMode;
  }

  public void setExplanationParseMode(String explanationParseMode) {
    this.explanationParseMode = explanationParseMode;
  }


  public SendPollPostRequest isAnonymous(Boolean isAnonymous) {
    this.isAnonymous = isAnonymous;
    return this;
  }

  /**
   * True, if the poll needs to be anonymous, defaults to *True*
   * @return isAnonymous
   */
  @javax.annotation.Nullable
  public Boolean getIsAnonymous() {
    return isAnonymous;
  }

  public void setIsAnonymous(Boolean isAnonymous) {
    this.isAnonymous = isAnonymous;
  }


  public SendPollPostRequest isClosed(Boolean isClosed) {
    this.isClosed = isClosed;
    return this;
  }

  /**
   * Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
   * @return isClosed
   */
  @javax.annotation.Nullable
  public Boolean getIsClosed() {
    return isClosed;
  }

  public void setIsClosed(Boolean isClosed) {
    this.isClosed = isClosed;
  }


  public SendPollPostRequest openPeriod(Integer openPeriod) {
    this.openPeriod = openPeriod;
    return this;
  }

  /**
   * Amount of time in seconds the poll will be active after creation, 5-600. Can&#39;t be used together with *close\\_date*.
   * @return openPeriod
   */
  @javax.annotation.Nullable
  public Integer getOpenPeriod() {
    return openPeriod;
  }

  public void setOpenPeriod(Integer openPeriod) {
    this.openPeriod = openPeriod;
  }


  public SendPollPostRequest options(List<String> options) {
    this.options = options;
    return this;
  }

  public SendPollPostRequest addOptionsItem(String optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
   * @return options
   */
  @javax.annotation.Nonnull
  public List<String> getOptions() {
    return options;
  }

  public void setOptions(List<String> options) {
    this.options = options;
  }


  public SendPollPostRequest question(String question) {
    this.question = question;
    return this;
  }

  /**
   * Poll question, 1-300 characters
   * @return question
   */
  @javax.annotation.Nonnull
  public String getQuestion() {
    return question;
  }

  public void setQuestion(String question) {
    this.question = question;
  }


  public SendPollPostRequest replyMarkup(CopyMessagePostRequestReplyMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public CopyMessagePostRequestReplyMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(CopyMessagePostRequestReplyMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public SendPollPostRequest replyToMessageId(Integer replyToMessageId) {
    this.replyToMessageId = replyToMessageId;
    return this;
  }

  /**
   * If the message is a reply, ID of the original message
   * @return replyToMessageId
   */
  @javax.annotation.Nullable
  public Integer getReplyToMessageId() {
    return replyToMessageId;
  }

  public void setReplyToMessageId(Integer replyToMessageId) {
    this.replyToMessageId = replyToMessageId;
  }


  public SendPollPostRequest type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Poll type, “quiz” or “regular”, defaults to “regular”
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendPollPostRequest sendPollPostRequest = (SendPollPostRequest) o;
    return Objects.equals(this.allowSendingWithoutReply, sendPollPostRequest.allowSendingWithoutReply) &&
        Objects.equals(this.allowsMultipleAnswers, sendPollPostRequest.allowsMultipleAnswers) &&
        Objects.equals(this.chatId, sendPollPostRequest.chatId) &&
        Objects.equals(this.closeDate, sendPollPostRequest.closeDate) &&
        Objects.equals(this.correctOptionId, sendPollPostRequest.correctOptionId) &&
        Objects.equals(this.disableNotification, sendPollPostRequest.disableNotification) &&
        Objects.equals(this.explanation, sendPollPostRequest.explanation) &&
        Objects.equals(this.explanationEntities, sendPollPostRequest.explanationEntities) &&
        Objects.equals(this.explanationParseMode, sendPollPostRequest.explanationParseMode) &&
        Objects.equals(this.isAnonymous, sendPollPostRequest.isAnonymous) &&
        Objects.equals(this.isClosed, sendPollPostRequest.isClosed) &&
        Objects.equals(this.openPeriod, sendPollPostRequest.openPeriod) &&
        Objects.equals(this.options, sendPollPostRequest.options) &&
        Objects.equals(this.question, sendPollPostRequest.question) &&
        Objects.equals(this.replyMarkup, sendPollPostRequest.replyMarkup) &&
        Objects.equals(this.replyToMessageId, sendPollPostRequest.replyToMessageId) &&
        Objects.equals(this.type, sendPollPostRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowSendingWithoutReply, allowsMultipleAnswers, chatId, closeDate, correctOptionId, disableNotification, explanation, explanationEntities, explanationParseMode, isAnonymous, isClosed, openPeriod, options, question, replyMarkup, replyToMessageId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendPollPostRequest {\n");
    sb.append("    allowSendingWithoutReply: ").append(toIndentedString(allowSendingWithoutReply)).append("\n");
    sb.append("    allowsMultipleAnswers: ").append(toIndentedString(allowsMultipleAnswers)).append("\n");
    sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
    sb.append("    closeDate: ").append(toIndentedString(closeDate)).append("\n");
    sb.append("    correctOptionId: ").append(toIndentedString(correctOptionId)).append("\n");
    sb.append("    disableNotification: ").append(toIndentedString(disableNotification)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    explanationEntities: ").append(toIndentedString(explanationEntities)).append("\n");
    sb.append("    explanationParseMode: ").append(toIndentedString(explanationParseMode)).append("\n");
    sb.append("    isAnonymous: ").append(toIndentedString(isAnonymous)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    openPeriod: ").append(toIndentedString(openPeriod)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    replyToMessageId: ").append(toIndentedString(replyToMessageId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_sending_without_reply");
    openapiFields.add("allows_multiple_answers");
    openapiFields.add("chat_id");
    openapiFields.add("close_date");
    openapiFields.add("correct_option_id");
    openapiFields.add("disable_notification");
    openapiFields.add("explanation");
    openapiFields.add("explanation_entities");
    openapiFields.add("explanation_parse_mode");
    openapiFields.add("is_anonymous");
    openapiFields.add("is_closed");
    openapiFields.add("open_period");
    openapiFields.add("options");
    openapiFields.add("question");
    openapiFields.add("reply_markup");
    openapiFields.add("reply_to_message_id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chat_id");
    openapiRequiredFields.add("options");
    openapiRequiredFields.add("question");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendPollPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendPollPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendPollPostRequest is not found in the empty JSON string", SendPollPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendPollPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendPollPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendPollPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `chat_id`
      CopyMessagePostRequestChatId.validateJsonElement(jsonObj.get("chat_id"));
      if ((jsonObj.get("explanation") != null && !jsonObj.get("explanation").isJsonNull()) && !jsonObj.get("explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanation").toString()));
      }
      if (jsonObj.get("explanation_entities") != null && !jsonObj.get("explanation_entities").isJsonNull()) {
        JsonArray jsonArrayexplanationEntities = jsonObj.getAsJsonArray("explanation_entities");
        if (jsonArrayexplanationEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("explanation_entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `explanation_entities` to be an array in the JSON string but got `%s`", jsonObj.get("explanation_entities").toString()));
          }

          // validate the optional field `explanation_entities` (array)
          for (int i = 0; i < jsonArrayexplanationEntities.size(); i++) {
            MessageEntity.validateJsonElement(jsonArrayexplanationEntities.get(i));
          };
        }
      }
      if ((jsonObj.get("explanation_parse_mode") != null && !jsonObj.get("explanation_parse_mode").isJsonNull()) && !jsonObj.get("explanation_parse_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanation_parse_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanation_parse_mode").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("options") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      if (!jsonObj.get("question").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `question` to be a primitive type in the JSON string but got `%s`", jsonObj.get("question").toString()));
      }
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        CopyMessagePostRequestReplyMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendPollPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendPollPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendPollPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendPollPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendPollPostRequest>() {
           @Override
           public void write(JsonWriter out, SendPollPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendPollPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendPollPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendPollPostRequest
   * @throws IOException if the JSON string is invalid with respect to SendPollPostRequest
   */
  public static SendPollPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendPollPostRequest.class);
  }

  /**
   * Convert an instance of SendPollPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

