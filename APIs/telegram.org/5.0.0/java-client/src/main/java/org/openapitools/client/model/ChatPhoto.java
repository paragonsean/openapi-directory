/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object represents a chat photo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChatPhoto {
  public static final String SERIALIZED_NAME_BIG_FILE_ID = "big_file_id";
  @SerializedName(SERIALIZED_NAME_BIG_FILE_ID)
  private String bigFileId;

  public static final String SERIALIZED_NAME_BIG_FILE_UNIQUE_ID = "big_file_unique_id";
  @SerializedName(SERIALIZED_NAME_BIG_FILE_UNIQUE_ID)
  private String bigFileUniqueId;

  public static final String SERIALIZED_NAME_SMALL_FILE_ID = "small_file_id";
  @SerializedName(SERIALIZED_NAME_SMALL_FILE_ID)
  private String smallFileId;

  public static final String SERIALIZED_NAME_SMALL_FILE_UNIQUE_ID = "small_file_unique_id";
  @SerializedName(SERIALIZED_NAME_SMALL_FILE_UNIQUE_ID)
  private String smallFileUniqueId;

  public ChatPhoto() {
  }

  public ChatPhoto bigFileId(String bigFileId) {
    this.bigFileId = bigFileId;
    return this;
  }

  /**
   * File identifier of big (640x640) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.
   * @return bigFileId
   */
  @javax.annotation.Nonnull
  public String getBigFileId() {
    return bigFileId;
  }

  public void setBigFileId(String bigFileId) {
    this.bigFileId = bigFileId;
  }


  public ChatPhoto bigFileUniqueId(String bigFileUniqueId) {
    this.bigFileUniqueId = bigFileUniqueId;
    return this;
  }

  /**
   * Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can&#39;t be used to download or reuse the file.
   * @return bigFileUniqueId
   */
  @javax.annotation.Nonnull
  public String getBigFileUniqueId() {
    return bigFileUniqueId;
  }

  public void setBigFileUniqueId(String bigFileUniqueId) {
    this.bigFileUniqueId = bigFileUniqueId;
  }


  public ChatPhoto smallFileId(String smallFileId) {
    this.smallFileId = smallFileId;
    return this;
  }

  /**
   * File identifier of small (160x160) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.
   * @return smallFileId
   */
  @javax.annotation.Nonnull
  public String getSmallFileId() {
    return smallFileId;
  }

  public void setSmallFileId(String smallFileId) {
    this.smallFileId = smallFileId;
  }


  public ChatPhoto smallFileUniqueId(String smallFileUniqueId) {
    this.smallFileUniqueId = smallFileUniqueId;
    return this;
  }

  /**
   * Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can&#39;t be used to download or reuse the file.
   * @return smallFileUniqueId
   */
  @javax.annotation.Nonnull
  public String getSmallFileUniqueId() {
    return smallFileUniqueId;
  }

  public void setSmallFileUniqueId(String smallFileUniqueId) {
    this.smallFileUniqueId = smallFileUniqueId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChatPhoto chatPhoto = (ChatPhoto) o;
    return Objects.equals(this.bigFileId, chatPhoto.bigFileId) &&
        Objects.equals(this.bigFileUniqueId, chatPhoto.bigFileUniqueId) &&
        Objects.equals(this.smallFileId, chatPhoto.smallFileId) &&
        Objects.equals(this.smallFileUniqueId, chatPhoto.smallFileUniqueId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigFileId, bigFileUniqueId, smallFileId, smallFileUniqueId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChatPhoto {\n");
    sb.append("    bigFileId: ").append(toIndentedString(bigFileId)).append("\n");
    sb.append("    bigFileUniqueId: ").append(toIndentedString(bigFileUniqueId)).append("\n");
    sb.append("    smallFileId: ").append(toIndentedString(smallFileId)).append("\n");
    sb.append("    smallFileUniqueId: ").append(toIndentedString(smallFileUniqueId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("big_file_id");
    openapiFields.add("big_file_unique_id");
    openapiFields.add("small_file_id");
    openapiFields.add("small_file_unique_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("big_file_id");
    openapiRequiredFields.add("big_file_unique_id");
    openapiRequiredFields.add("small_file_id");
    openapiRequiredFields.add("small_file_unique_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChatPhoto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChatPhoto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChatPhoto is not found in the empty JSON string", ChatPhoto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChatPhoto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChatPhoto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChatPhoto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("big_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `big_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("big_file_id").toString()));
      }
      if (!jsonObj.get("big_file_unique_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `big_file_unique_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("big_file_unique_id").toString()));
      }
      if (!jsonObj.get("small_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `small_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("small_file_id").toString()));
      }
      if (!jsonObj.get("small_file_unique_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `small_file_unique_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("small_file_unique_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChatPhoto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChatPhoto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChatPhoto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChatPhoto.class));

       return (TypeAdapter<T>) new TypeAdapter<ChatPhoto>() {
           @Override
           public void write(JsonWriter out, ChatPhoto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChatPhoto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChatPhoto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChatPhoto
   * @throws IOException if the JSON string is invalid with respect to ChatPhoto
   */
  public static ChatPhoto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChatPhoto.class);
  }

  /**
   * Convert an instance of ChatPhoto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

