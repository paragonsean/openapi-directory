/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CopyMessagePostRequestChatId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PromoteChatMemberPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PromoteChatMemberPostRequest {
  public static final String SERIALIZED_NAME_CAN_CHANGE_INFO = "can_change_info";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_INFO)
  private Boolean canChangeInfo;

  public static final String SERIALIZED_NAME_CAN_DELETE_MESSAGES = "can_delete_messages";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE_MESSAGES)
  private Boolean canDeleteMessages;

  public static final String SERIALIZED_NAME_CAN_EDIT_MESSAGES = "can_edit_messages";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT_MESSAGES)
  private Boolean canEditMessages;

  public static final String SERIALIZED_NAME_CAN_INVITE_USERS = "can_invite_users";
  @SerializedName(SERIALIZED_NAME_CAN_INVITE_USERS)
  private Boolean canInviteUsers;

  public static final String SERIALIZED_NAME_CAN_PIN_MESSAGES = "can_pin_messages";
  @SerializedName(SERIALIZED_NAME_CAN_PIN_MESSAGES)
  private Boolean canPinMessages;

  public static final String SERIALIZED_NAME_CAN_POST_MESSAGES = "can_post_messages";
  @SerializedName(SERIALIZED_NAME_CAN_POST_MESSAGES)
  private Boolean canPostMessages;

  public static final String SERIALIZED_NAME_CAN_PROMOTE_MEMBERS = "can_promote_members";
  @SerializedName(SERIALIZED_NAME_CAN_PROMOTE_MEMBERS)
  private Boolean canPromoteMembers;

  public static final String SERIALIZED_NAME_CAN_RESTRICT_MEMBERS = "can_restrict_members";
  @SerializedName(SERIALIZED_NAME_CAN_RESTRICT_MEMBERS)
  private Boolean canRestrictMembers;

  public static final String SERIALIZED_NAME_CHAT_ID = "chat_id";
  @SerializedName(SERIALIZED_NAME_CHAT_ID)
  private CopyMessagePostRequestChatId chatId;

  public static final String SERIALIZED_NAME_IS_ANONYMOUS = "is_anonymous";
  @SerializedName(SERIALIZED_NAME_IS_ANONYMOUS)
  private Boolean isAnonymous;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public PromoteChatMemberPostRequest() {
  }

  public PromoteChatMemberPostRequest canChangeInfo(Boolean canChangeInfo) {
    this.canChangeInfo = canChangeInfo;
    return this;
  }

  /**
   * Pass True, if the administrator can change chat title, photo and other settings
   * @return canChangeInfo
   */
  @javax.annotation.Nullable
  public Boolean getCanChangeInfo() {
    return canChangeInfo;
  }

  public void setCanChangeInfo(Boolean canChangeInfo) {
    this.canChangeInfo = canChangeInfo;
  }


  public PromoteChatMemberPostRequest canDeleteMessages(Boolean canDeleteMessages) {
    this.canDeleteMessages = canDeleteMessages;
    return this;
  }

  /**
   * Pass True, if the administrator can delete messages of other users
   * @return canDeleteMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanDeleteMessages() {
    return canDeleteMessages;
  }

  public void setCanDeleteMessages(Boolean canDeleteMessages) {
    this.canDeleteMessages = canDeleteMessages;
  }


  public PromoteChatMemberPostRequest canEditMessages(Boolean canEditMessages) {
    this.canEditMessages = canEditMessages;
    return this;
  }

  /**
   * Pass True, if the administrator can edit messages of other users and can pin messages, channels only
   * @return canEditMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanEditMessages() {
    return canEditMessages;
  }

  public void setCanEditMessages(Boolean canEditMessages) {
    this.canEditMessages = canEditMessages;
  }


  public PromoteChatMemberPostRequest canInviteUsers(Boolean canInviteUsers) {
    this.canInviteUsers = canInviteUsers;
    return this;
  }

  /**
   * Pass True, if the administrator can invite new users to the chat
   * @return canInviteUsers
   */
  @javax.annotation.Nullable
  public Boolean getCanInviteUsers() {
    return canInviteUsers;
  }

  public void setCanInviteUsers(Boolean canInviteUsers) {
    this.canInviteUsers = canInviteUsers;
  }


  public PromoteChatMemberPostRequest canPinMessages(Boolean canPinMessages) {
    this.canPinMessages = canPinMessages;
    return this;
  }

  /**
   * Pass True, if the administrator can pin messages, supergroups only
   * @return canPinMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanPinMessages() {
    return canPinMessages;
  }

  public void setCanPinMessages(Boolean canPinMessages) {
    this.canPinMessages = canPinMessages;
  }


  public PromoteChatMemberPostRequest canPostMessages(Boolean canPostMessages) {
    this.canPostMessages = canPostMessages;
    return this;
  }

  /**
   * Pass True, if the administrator can create channel posts, channels only
   * @return canPostMessages
   */
  @javax.annotation.Nullable
  public Boolean getCanPostMessages() {
    return canPostMessages;
  }

  public void setCanPostMessages(Boolean canPostMessages) {
    this.canPostMessages = canPostMessages;
  }


  public PromoteChatMemberPostRequest canPromoteMembers(Boolean canPromoteMembers) {
    this.canPromoteMembers = canPromoteMembers;
    return this;
  }

  /**
   * Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
   * @return canPromoteMembers
   */
  @javax.annotation.Nullable
  public Boolean getCanPromoteMembers() {
    return canPromoteMembers;
  }

  public void setCanPromoteMembers(Boolean canPromoteMembers) {
    this.canPromoteMembers = canPromoteMembers;
  }


  public PromoteChatMemberPostRequest canRestrictMembers(Boolean canRestrictMembers) {
    this.canRestrictMembers = canRestrictMembers;
    return this;
  }

  /**
   * Pass True, if the administrator can restrict, ban or unban chat members
   * @return canRestrictMembers
   */
  @javax.annotation.Nullable
  public Boolean getCanRestrictMembers() {
    return canRestrictMembers;
  }

  public void setCanRestrictMembers(Boolean canRestrictMembers) {
    this.canRestrictMembers = canRestrictMembers;
  }


  public PromoteChatMemberPostRequest chatId(CopyMessagePostRequestChatId chatId) {
    this.chatId = chatId;
    return this;
  }

  /**
   * Get chatId
   * @return chatId
   */
  @javax.annotation.Nonnull
  public CopyMessagePostRequestChatId getChatId() {
    return chatId;
  }

  public void setChatId(CopyMessagePostRequestChatId chatId) {
    this.chatId = chatId;
  }


  public PromoteChatMemberPostRequest isAnonymous(Boolean isAnonymous) {
    this.isAnonymous = isAnonymous;
    return this;
  }

  /**
   * Pass *True*, if the administrator&#39;s presence in the chat is hidden
   * @return isAnonymous
   */
  @javax.annotation.Nullable
  public Boolean getIsAnonymous() {
    return isAnonymous;
  }

  public void setIsAnonymous(Boolean isAnonymous) {
    this.isAnonymous = isAnonymous;
  }


  public PromoteChatMemberPostRequest userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Unique identifier of the target user
   * @return userId
   */
  @javax.annotation.Nonnull
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromoteChatMemberPostRequest promoteChatMemberPostRequest = (PromoteChatMemberPostRequest) o;
    return Objects.equals(this.canChangeInfo, promoteChatMemberPostRequest.canChangeInfo) &&
        Objects.equals(this.canDeleteMessages, promoteChatMemberPostRequest.canDeleteMessages) &&
        Objects.equals(this.canEditMessages, promoteChatMemberPostRequest.canEditMessages) &&
        Objects.equals(this.canInviteUsers, promoteChatMemberPostRequest.canInviteUsers) &&
        Objects.equals(this.canPinMessages, promoteChatMemberPostRequest.canPinMessages) &&
        Objects.equals(this.canPostMessages, promoteChatMemberPostRequest.canPostMessages) &&
        Objects.equals(this.canPromoteMembers, promoteChatMemberPostRequest.canPromoteMembers) &&
        Objects.equals(this.canRestrictMembers, promoteChatMemberPostRequest.canRestrictMembers) &&
        Objects.equals(this.chatId, promoteChatMemberPostRequest.chatId) &&
        Objects.equals(this.isAnonymous, promoteChatMemberPostRequest.isAnonymous) &&
        Objects.equals(this.userId, promoteChatMemberPostRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canChangeInfo, canDeleteMessages, canEditMessages, canInviteUsers, canPinMessages, canPostMessages, canPromoteMembers, canRestrictMembers, chatId, isAnonymous, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PromoteChatMemberPostRequest {\n");
    sb.append("    canChangeInfo: ").append(toIndentedString(canChangeInfo)).append("\n");
    sb.append("    canDeleteMessages: ").append(toIndentedString(canDeleteMessages)).append("\n");
    sb.append("    canEditMessages: ").append(toIndentedString(canEditMessages)).append("\n");
    sb.append("    canInviteUsers: ").append(toIndentedString(canInviteUsers)).append("\n");
    sb.append("    canPinMessages: ").append(toIndentedString(canPinMessages)).append("\n");
    sb.append("    canPostMessages: ").append(toIndentedString(canPostMessages)).append("\n");
    sb.append("    canPromoteMembers: ").append(toIndentedString(canPromoteMembers)).append("\n");
    sb.append("    canRestrictMembers: ").append(toIndentedString(canRestrictMembers)).append("\n");
    sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
    sb.append("    isAnonymous: ").append(toIndentedString(isAnonymous)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_change_info");
    openapiFields.add("can_delete_messages");
    openapiFields.add("can_edit_messages");
    openapiFields.add("can_invite_users");
    openapiFields.add("can_pin_messages");
    openapiFields.add("can_post_messages");
    openapiFields.add("can_promote_members");
    openapiFields.add("can_restrict_members");
    openapiFields.add("chat_id");
    openapiFields.add("is_anonymous");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chat_id");
    openapiRequiredFields.add("user_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PromoteChatMemberPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PromoteChatMemberPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PromoteChatMemberPostRequest is not found in the empty JSON string", PromoteChatMemberPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PromoteChatMemberPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PromoteChatMemberPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PromoteChatMemberPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `chat_id`
      CopyMessagePostRequestChatId.validateJsonElement(jsonObj.get("chat_id"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PromoteChatMemberPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PromoteChatMemberPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PromoteChatMemberPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PromoteChatMemberPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PromoteChatMemberPostRequest>() {
           @Override
           public void write(JsonWriter out, PromoteChatMemberPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PromoteChatMemberPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PromoteChatMemberPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PromoteChatMemberPostRequest
   * @throws IOException if the JSON string is invalid with respect to PromoteChatMemberPostRequest
   */
  public static PromoteChatMemberPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PromoteChatMemberPostRequest.class);
  }

  /**
   * Convert an instance of PromoteChatMemberPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

