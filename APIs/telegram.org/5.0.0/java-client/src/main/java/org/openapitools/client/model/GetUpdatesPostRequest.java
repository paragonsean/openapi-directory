/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetUpdatesPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetUpdatesPostRequest {
  public static final String SERIALIZED_NAME_ALLOWED_UPDATES = "allowed_updates";
  @SerializedName(SERIALIZED_NAME_ALLOWED_UPDATES)
  private List<String> allowedUpdates = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit = 100;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout = 0;

  public GetUpdatesPostRequest() {
  }

  public GetUpdatesPostRequest allowedUpdates(List<String> allowedUpdates) {
    this.allowedUpdates = allowedUpdates;
    return this;
  }

  public GetUpdatesPostRequest addAllowedUpdatesItem(String allowedUpdatesItem) {
    if (this.allowedUpdates == null) {
      this.allowedUpdates = new ArrayList<>();
    }
    this.allowedUpdates.add(allowedUpdatesItem);
    return this;
  }

  /**
   * A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\_channel\\_post”, “callback\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.    Please note that this parameter doesn&#39;t affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
   * @return allowedUpdates
   */
  @javax.annotation.Nullable
  public List<String> getAllowedUpdates() {
    return allowedUpdates;
  }

  public void setAllowedUpdates(List<String> allowedUpdates) {
    this.allowedUpdates = allowedUpdates;
  }


  public GetUpdatesPostRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
   * minimum: 1
   * maximum: 100
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public GetUpdatesPostRequest offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public GetUpdatesPostRequest timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUpdatesPostRequest getUpdatesPostRequest = (GetUpdatesPostRequest) o;
    return Objects.equals(this.allowedUpdates, getUpdatesPostRequest.allowedUpdates) &&
        Objects.equals(this.limit, getUpdatesPostRequest.limit) &&
        Objects.equals(this.offset, getUpdatesPostRequest.offset) &&
        Objects.equals(this.timeout, getUpdatesPostRequest.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedUpdates, limit, offset, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUpdatesPostRequest {\n");
    sb.append("    allowedUpdates: ").append(toIndentedString(allowedUpdates)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_updates");
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetUpdatesPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUpdatesPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUpdatesPostRequest is not found in the empty JSON string", GetUpdatesPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUpdatesPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUpdatesPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_updates") != null && !jsonObj.get("allowed_updates").isJsonNull() && !jsonObj.get("allowed_updates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_updates` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_updates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUpdatesPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUpdatesPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUpdatesPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUpdatesPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUpdatesPostRequest>() {
           @Override
           public void write(JsonWriter out, GetUpdatesPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUpdatesPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUpdatesPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUpdatesPostRequest
   * @throws IOException if the JSON string is invalid with respect to GetUpdatesPostRequest
   */
  public static GetUpdatesPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUpdatesPostRequest.class);
  }

  /**
   * Convert an instance of GetUpdatesPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

