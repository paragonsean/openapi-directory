/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PhotoSize;
import org.openapitools.client.model.Sticker;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object represents a sticker set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StickerSet {
  public static final String SERIALIZED_NAME_CONTAINS_MASKS = "contains_masks";
  @SerializedName(SERIALIZED_NAME_CONTAINS_MASKS)
  private Boolean containsMasks;

  public static final String SERIALIZED_NAME_IS_ANIMATED = "is_animated";
  @SerializedName(SERIALIZED_NAME_IS_ANIMATED)
  private Boolean isAnimated;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STICKERS = "stickers";
  @SerializedName(SERIALIZED_NAME_STICKERS)
  private List<Sticker> stickers = new ArrayList<>();

  public static final String SERIALIZED_NAME_THUMB = "thumb";
  @SerializedName(SERIALIZED_NAME_THUMB)
  private PhotoSize thumb;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public StickerSet() {
  }

  public StickerSet containsMasks(Boolean containsMasks) {
    this.containsMasks = containsMasks;
    return this;
  }

  /**
   * *True*, if the sticker set contains masks
   * @return containsMasks
   */
  @javax.annotation.Nonnull
  public Boolean getContainsMasks() {
    return containsMasks;
  }

  public void setContainsMasks(Boolean containsMasks) {
    this.containsMasks = containsMasks;
  }


  public StickerSet isAnimated(Boolean isAnimated) {
    this.isAnimated = isAnimated;
    return this;
  }

  /**
   * *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)
   * @return isAnimated
   */
  @javax.annotation.Nonnull
  public Boolean getIsAnimated() {
    return isAnimated;
  }

  public void setIsAnimated(Boolean isAnimated) {
    this.isAnimated = isAnimated;
  }


  public StickerSet name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Sticker set name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StickerSet stickers(List<Sticker> stickers) {
    this.stickers = stickers;
    return this;
  }

  public StickerSet addStickersItem(Sticker stickersItem) {
    if (this.stickers == null) {
      this.stickers = new ArrayList<>();
    }
    this.stickers.add(stickersItem);
    return this;
  }

  /**
   * List of all set stickers
   * @return stickers
   */
  @javax.annotation.Nonnull
  public List<Sticker> getStickers() {
    return stickers;
  }

  public void setStickers(List<Sticker> stickers) {
    this.stickers = stickers;
  }


  public StickerSet thumb(PhotoSize thumb) {
    this.thumb = thumb;
    return this;
  }

  /**
   * Get thumb
   * @return thumb
   */
  @javax.annotation.Nullable
  public PhotoSize getThumb() {
    return thumb;
  }

  public void setThumb(PhotoSize thumb) {
    this.thumb = thumb;
  }


  public StickerSet title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Sticker set title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StickerSet stickerSet = (StickerSet) o;
    return Objects.equals(this.containsMasks, stickerSet.containsMasks) &&
        Objects.equals(this.isAnimated, stickerSet.isAnimated) &&
        Objects.equals(this.name, stickerSet.name) &&
        Objects.equals(this.stickers, stickerSet.stickers) &&
        Objects.equals(this.thumb, stickerSet.thumb) &&
        Objects.equals(this.title, stickerSet.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containsMasks, isAnimated, name, stickers, thumb, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StickerSet {\n");
    sb.append("    containsMasks: ").append(toIndentedString(containsMasks)).append("\n");
    sb.append("    isAnimated: ").append(toIndentedString(isAnimated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    stickers: ").append(toIndentedString(stickers)).append("\n");
    sb.append("    thumb: ").append(toIndentedString(thumb)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contains_masks");
    openapiFields.add("is_animated");
    openapiFields.add("name");
    openapiFields.add("stickers");
    openapiFields.add("thumb");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contains_masks");
    openapiRequiredFields.add("is_animated");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("stickers");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StickerSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StickerSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StickerSet is not found in the empty JSON string", StickerSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StickerSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StickerSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StickerSet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("stickers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stickers` to be an array in the JSON string but got `%s`", jsonObj.get("stickers").toString()));
      }

      JsonArray jsonArraystickers = jsonObj.getAsJsonArray("stickers");
      // validate the required field `stickers` (array)
      for (int i = 0; i < jsonArraystickers.size(); i++) {
        Sticker.validateJsonElement(jsonArraystickers.get(i));
      };
      // validate the optional field `thumb`
      if (jsonObj.get("thumb") != null && !jsonObj.get("thumb").isJsonNull()) {
        PhotoSize.validateJsonElement(jsonObj.get("thumb"));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StickerSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StickerSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StickerSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StickerSet.class));

       return (TypeAdapter<T>) new TypeAdapter<StickerSet>() {
           @Override
           public void write(JsonWriter out, StickerSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StickerSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StickerSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StickerSet
   * @throws IOException if the JSON string is invalid with respect to StickerSet
   */
  public static StickerSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StickerSet.class);
  }

  /**
   * Convert an instance of StickerSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

