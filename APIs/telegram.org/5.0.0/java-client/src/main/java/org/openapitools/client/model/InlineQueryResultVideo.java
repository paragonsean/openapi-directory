/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InlineKeyboardMarkup;
import org.openapitools.client.model.InputMessageContent;
import org.openapitools.client.model.MessageEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the video.  If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you **must** replace its content using *input\\_message\\_content*.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InlineQueryResultVideo {
  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_CAPTION_ENTITIES = "caption_entities";
  @SerializedName(SERIALIZED_NAME_CAPTION_ENTITIES)
  private List<MessageEntity> captionEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT_MESSAGE_CONTENT = "input_message_content";
  @SerializedName(SERIALIZED_NAME_INPUT_MESSAGE_CONTENT)
  private InputMessageContent inputMessageContent;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_PARSE_MODE = "parse_mode";
  @SerializedName(SERIALIZED_NAME_PARSE_MODE)
  private String parseMode;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private InlineKeyboardMarkup replyMarkup;

  public static final String SERIALIZED_NAME_THUMB_URL = "thumb_url";
  @SerializedName(SERIALIZED_NAME_THUMB_URL)
  private String thumbUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VIDEO_DURATION = "video_duration";
  @SerializedName(SERIALIZED_NAME_VIDEO_DURATION)
  private Integer videoDuration;

  public static final String SERIALIZED_NAME_VIDEO_HEIGHT = "video_height";
  @SerializedName(SERIALIZED_NAME_VIDEO_HEIGHT)
  private Integer videoHeight;

  public static final String SERIALIZED_NAME_VIDEO_URL = "video_url";
  @SerializedName(SERIALIZED_NAME_VIDEO_URL)
  private String videoUrl;

  public static final String SERIALIZED_NAME_VIDEO_WIDTH = "video_width";
  @SerializedName(SERIALIZED_NAME_VIDEO_WIDTH)
  private Integer videoWidth;

  public InlineQueryResultVideo() {
  }

  public InlineQueryResultVideo caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
   * @return caption
   */
  @javax.annotation.Nullable
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public InlineQueryResultVideo captionEntities(List<MessageEntity> captionEntities) {
    this.captionEntities = captionEntities;
    return this;
  }

  public InlineQueryResultVideo addCaptionEntitiesItem(MessageEntity captionEntitiesItem) {
    if (this.captionEntities == null) {
      this.captionEntities = new ArrayList<>();
    }
    this.captionEntities.add(captionEntitiesItem);
    return this;
  }

  /**
   * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
   * @return captionEntities
   */
  @javax.annotation.Nullable
  public List<MessageEntity> getCaptionEntities() {
    return captionEntities;
  }

  public void setCaptionEntities(List<MessageEntity> captionEntities) {
    this.captionEntities = captionEntities;
  }


  public InlineQueryResultVideo description(String description) {
    this.description = description;
    return this;
  }

  /**
   * *Optional*. Short description of the result
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InlineQueryResultVideo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for this result, 1-64 bytes
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InlineQueryResultVideo inputMessageContent(InputMessageContent inputMessageContent) {
    this.inputMessageContent = inputMessageContent;
    return this;
  }

  /**
   * Get inputMessageContent
   * @return inputMessageContent
   */
  @javax.annotation.Nullable
  public InputMessageContent getInputMessageContent() {
    return inputMessageContent;
  }

  public void setInputMessageContent(InputMessageContent inputMessageContent) {
    this.inputMessageContent = inputMessageContent;
  }


  public InlineQueryResultVideo mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Mime type of the content of video url, “text/html” or “video/mp4”
   * @return mimeType
   */
  @javax.annotation.Nonnull
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public InlineQueryResultVideo parseMode(String parseMode) {
    this.parseMode = parseMode;
    return this;
  }

  /**
   * *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
   * @return parseMode
   */
  @javax.annotation.Nullable
  public String getParseMode() {
    return parseMode;
  }

  public void setParseMode(String parseMode) {
    this.parseMode = parseMode;
  }


  public InlineQueryResultVideo replyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public InlineKeyboardMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(InlineKeyboardMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public InlineQueryResultVideo thumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
    return this;
  }

  /**
   * URL of the thumbnail (jpeg only) for the video
   * @return thumbUrl
   */
  @javax.annotation.Nonnull
  public String getThumbUrl() {
    return thumbUrl;
  }

  public void setThumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
  }


  public InlineQueryResultVideo title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title for the result
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public InlineQueryResultVideo type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the result, must be *video*
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public InlineQueryResultVideo videoDuration(Integer videoDuration) {
    this.videoDuration = videoDuration;
    return this;
  }

  /**
   * *Optional*. Video duration in seconds
   * @return videoDuration
   */
  @javax.annotation.Nullable
  public Integer getVideoDuration() {
    return videoDuration;
  }

  public void setVideoDuration(Integer videoDuration) {
    this.videoDuration = videoDuration;
  }


  public InlineQueryResultVideo videoHeight(Integer videoHeight) {
    this.videoHeight = videoHeight;
    return this;
  }

  /**
   * *Optional*. Video height
   * @return videoHeight
   */
  @javax.annotation.Nullable
  public Integer getVideoHeight() {
    return videoHeight;
  }

  public void setVideoHeight(Integer videoHeight) {
    this.videoHeight = videoHeight;
  }


  public InlineQueryResultVideo videoUrl(String videoUrl) {
    this.videoUrl = videoUrl;
    return this;
  }

  /**
   * A valid URL for the embedded video player or video file
   * @return videoUrl
   */
  @javax.annotation.Nonnull
  public String getVideoUrl() {
    return videoUrl;
  }

  public void setVideoUrl(String videoUrl) {
    this.videoUrl = videoUrl;
  }


  public InlineQueryResultVideo videoWidth(Integer videoWidth) {
    this.videoWidth = videoWidth;
    return this;
  }

  /**
   * *Optional*. Video width
   * @return videoWidth
   */
  @javax.annotation.Nullable
  public Integer getVideoWidth() {
    return videoWidth;
  }

  public void setVideoWidth(Integer videoWidth) {
    this.videoWidth = videoWidth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineQueryResultVideo inlineQueryResultVideo = (InlineQueryResultVideo) o;
    return Objects.equals(this.caption, inlineQueryResultVideo.caption) &&
        Objects.equals(this.captionEntities, inlineQueryResultVideo.captionEntities) &&
        Objects.equals(this.description, inlineQueryResultVideo.description) &&
        Objects.equals(this.id, inlineQueryResultVideo.id) &&
        Objects.equals(this.inputMessageContent, inlineQueryResultVideo.inputMessageContent) &&
        Objects.equals(this.mimeType, inlineQueryResultVideo.mimeType) &&
        Objects.equals(this.parseMode, inlineQueryResultVideo.parseMode) &&
        Objects.equals(this.replyMarkup, inlineQueryResultVideo.replyMarkup) &&
        Objects.equals(this.thumbUrl, inlineQueryResultVideo.thumbUrl) &&
        Objects.equals(this.title, inlineQueryResultVideo.title) &&
        Objects.equals(this.type, inlineQueryResultVideo.type) &&
        Objects.equals(this.videoDuration, inlineQueryResultVideo.videoDuration) &&
        Objects.equals(this.videoHeight, inlineQueryResultVideo.videoHeight) &&
        Objects.equals(this.videoUrl, inlineQueryResultVideo.videoUrl) &&
        Objects.equals(this.videoWidth, inlineQueryResultVideo.videoWidth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caption, captionEntities, description, id, inputMessageContent, mimeType, parseMode, replyMarkup, thumbUrl, title, type, videoDuration, videoHeight, videoUrl, videoWidth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineQueryResultVideo {\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    captionEntities: ").append(toIndentedString(captionEntities)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputMessageContent: ").append(toIndentedString(inputMessageContent)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    parseMode: ").append(toIndentedString(parseMode)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    thumbUrl: ").append(toIndentedString(thumbUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    videoDuration: ").append(toIndentedString(videoDuration)).append("\n");
    sb.append("    videoHeight: ").append(toIndentedString(videoHeight)).append("\n");
    sb.append("    videoUrl: ").append(toIndentedString(videoUrl)).append("\n");
    sb.append("    videoWidth: ").append(toIndentedString(videoWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caption");
    openapiFields.add("caption_entities");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("input_message_content");
    openapiFields.add("mime_type");
    openapiFields.add("parse_mode");
    openapiFields.add("reply_markup");
    openapiFields.add("thumb_url");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("video_duration");
    openapiFields.add("video_height");
    openapiFields.add("video_url");
    openapiFields.add("video_width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("mime_type");
    openapiRequiredFields.add("thumb_url");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("video_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InlineQueryResultVideo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InlineQueryResultVideo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineQueryResultVideo is not found in the empty JSON string", InlineQueryResultVideo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InlineQueryResultVideo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineQueryResultVideo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InlineQueryResultVideo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) && !jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      if (jsonObj.get("caption_entities") != null && !jsonObj.get("caption_entities").isJsonNull()) {
        JsonArray jsonArraycaptionEntities = jsonObj.getAsJsonArray("caption_entities");
        if (jsonArraycaptionEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("caption_entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `caption_entities` to be an array in the JSON string but got `%s`", jsonObj.get("caption_entities").toString()));
          }

          // validate the optional field `caption_entities` (array)
          for (int i = 0; i < jsonArraycaptionEntities.size(); i++) {
            MessageEntity.validateJsonElement(jsonArraycaptionEntities.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `input_message_content`
      if (jsonObj.get("input_message_content") != null && !jsonObj.get("input_message_content").isJsonNull()) {
        InputMessageContent.validateJsonElement(jsonObj.get("input_message_content"));
      }
      if (!jsonObj.get("mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type").toString()));
      }
      if ((jsonObj.get("parse_mode") != null && !jsonObj.get("parse_mode").isJsonNull()) && !jsonObj.get("parse_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parse_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parse_mode").toString()));
      }
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        InlineKeyboardMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
      if (!jsonObj.get("thumb_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumb_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumb_url").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("video_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineQueryResultVideo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineQueryResultVideo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineQueryResultVideo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineQueryResultVideo.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineQueryResultVideo>() {
           @Override
           public void write(JsonWriter out, InlineQueryResultVideo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineQueryResultVideo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InlineQueryResultVideo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InlineQueryResultVideo
   * @throws IOException if the JSON string is invalid with respect to InlineQueryResultVideo
   */
  public static InlineQueryResultVideo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineQueryResultVideo.class);
  }

  /**
   * Convert an instance of InlineQueryResultVideo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

