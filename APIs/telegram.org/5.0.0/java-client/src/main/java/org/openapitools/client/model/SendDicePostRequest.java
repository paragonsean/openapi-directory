/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CopyMessagePostRequestChatId;
import org.openapitools.client.model.CopyMessagePostRequestReplyMarkup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendDicePostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendDicePostRequest {
  public static final String SERIALIZED_NAME_ALLOW_SENDING_WITHOUT_REPLY = "allow_sending_without_reply";
  @SerializedName(SERIALIZED_NAME_ALLOW_SENDING_WITHOUT_REPLY)
  private Boolean allowSendingWithoutReply;

  public static final String SERIALIZED_NAME_CHAT_ID = "chat_id";
  @SerializedName(SERIALIZED_NAME_CHAT_ID)
  private CopyMessagePostRequestChatId chatId;

  public static final String SERIALIZED_NAME_DISABLE_NOTIFICATION = "disable_notification";
  @SerializedName(SERIALIZED_NAME_DISABLE_NOTIFICATION)
  private Boolean disableNotification;

  /**
   * Emoji on which the dice throw animation is based. Currently, must be one of ‚Äú&lt;img alt&#x3D;\&quot;üé≤\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EB2.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, ‚Äú&lt;img alt&#x3D;\&quot;üéØ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EAF.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, ‚Äú&lt;img alt&#x3D;\&quot;üèÄ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8F80.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, ‚Äú&lt;img alt&#x3D;\&quot;‚öΩ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/E29ABD.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, or ‚Äú&lt;img alt&#x3D;\&quot;üé∞\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EB0.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù. Dice can have values 1-6 for ‚Äú&lt;img alt&#x3D;\&quot;üé≤\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EB2.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù and ‚Äú&lt;img alt&#x3D;\&quot;üéØ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EAF.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, values 1-5 for ‚Äú&lt;img alt&#x3D;\&quot;üèÄ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8F80.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù and ‚Äú&lt;img alt&#x3D;\&quot;‚öΩ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/E29ABD.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, and values 1-64 for ‚Äú&lt;img alt&#x3D;\&quot;üé∞\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EB0.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù. Defaults to ‚Äú&lt;img alt&#x3D;\&quot;üé≤\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EB2.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù
   */
  @JsonAdapter(EmojiEnum.Adapter.class)
  public enum EmojiEnum {
    u("üé≤"),
    
    u2("üéØ"),
    
    u3("üèÄ"),
    
    u4("‚öΩ"),
    
    u5("üé∞");

    private String value;

    EmojiEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmojiEnum fromValue(String value) {
      for (EmojiEnum b : EmojiEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmojiEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmojiEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmojiEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmojiEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EmojiEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EMOJI = "emoji";
  @SerializedName(SERIALIZED_NAME_EMOJI)
  private EmojiEnum emoji = EmojiEnum.u;

  public static final String SERIALIZED_NAME_REPLY_MARKUP = "reply_markup";
  @SerializedName(SERIALIZED_NAME_REPLY_MARKUP)
  private CopyMessagePostRequestReplyMarkup replyMarkup;

  public static final String SERIALIZED_NAME_REPLY_TO_MESSAGE_ID = "reply_to_message_id";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_MESSAGE_ID)
  private Integer replyToMessageId;

  public SendDicePostRequest() {
  }

  public SendDicePostRequest allowSendingWithoutReply(Boolean allowSendingWithoutReply) {
    this.allowSendingWithoutReply = allowSendingWithoutReply;
    return this;
  }

  /**
   * Pass *True*, if the message should be sent even if the specified replied-to message is not found
   * @return allowSendingWithoutReply
   */
  @javax.annotation.Nullable
  public Boolean getAllowSendingWithoutReply() {
    return allowSendingWithoutReply;
  }

  public void setAllowSendingWithoutReply(Boolean allowSendingWithoutReply) {
    this.allowSendingWithoutReply = allowSendingWithoutReply;
  }


  public SendDicePostRequest chatId(CopyMessagePostRequestChatId chatId) {
    this.chatId = chatId;
    return this;
  }

  /**
   * Get chatId
   * @return chatId
   */
  @javax.annotation.Nonnull
  public CopyMessagePostRequestChatId getChatId() {
    return chatId;
  }

  public void setChatId(CopyMessagePostRequestChatId chatId) {
    this.chatId = chatId;
  }


  public SendDicePostRequest disableNotification(Boolean disableNotification) {
    this.disableNotification = disableNotification;
    return this;
  }

  /**
   * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
   * @return disableNotification
   */
  @javax.annotation.Nullable
  public Boolean getDisableNotification() {
    return disableNotification;
  }

  public void setDisableNotification(Boolean disableNotification) {
    this.disableNotification = disableNotification;
  }


  public SendDicePostRequest emoji(EmojiEnum emoji) {
    this.emoji = emoji;
    return this;
  }

  /**
   * Emoji on which the dice throw animation is based. Currently, must be one of ‚Äú&lt;img alt&#x3D;\&quot;üé≤\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EB2.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, ‚Äú&lt;img alt&#x3D;\&quot;üéØ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EAF.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, ‚Äú&lt;img alt&#x3D;\&quot;üèÄ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8F80.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, ‚Äú&lt;img alt&#x3D;\&quot;‚öΩ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/E29ABD.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, or ‚Äú&lt;img alt&#x3D;\&quot;üé∞\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EB0.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù. Dice can have values 1-6 for ‚Äú&lt;img alt&#x3D;\&quot;üé≤\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EB2.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù and ‚Äú&lt;img alt&#x3D;\&quot;üéØ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EAF.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, values 1-5 for ‚Äú&lt;img alt&#x3D;\&quot;üèÄ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8F80.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù and ‚Äú&lt;img alt&#x3D;\&quot;‚öΩ\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/E29ABD.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù, and values 1-64 for ‚Äú&lt;img alt&#x3D;\&quot;üé∞\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EB0.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù. Defaults to ‚Äú&lt;img alt&#x3D;\&quot;üé≤\&quot; src&#x3D;\&quot;//telegram.org/img/emoji/40/F09F8EB2.png\&quot; height&#x3D;\&quot;20\&quot; width&#x3D;\&quot;20\&quot; /&gt;‚Äù
   * @return emoji
   */
  @javax.annotation.Nullable
  public EmojiEnum getEmoji() {
    return emoji;
  }

  public void setEmoji(EmojiEnum emoji) {
    this.emoji = emoji;
  }


  public SendDicePostRequest replyMarkup(CopyMessagePostRequestReplyMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
    return this;
  }

  /**
   * Get replyMarkup
   * @return replyMarkup
   */
  @javax.annotation.Nullable
  public CopyMessagePostRequestReplyMarkup getReplyMarkup() {
    return replyMarkup;
  }

  public void setReplyMarkup(CopyMessagePostRequestReplyMarkup replyMarkup) {
    this.replyMarkup = replyMarkup;
  }


  public SendDicePostRequest replyToMessageId(Integer replyToMessageId) {
    this.replyToMessageId = replyToMessageId;
    return this;
  }

  /**
   * If the message is a reply, ID of the original message
   * @return replyToMessageId
   */
  @javax.annotation.Nullable
  public Integer getReplyToMessageId() {
    return replyToMessageId;
  }

  public void setReplyToMessageId(Integer replyToMessageId) {
    this.replyToMessageId = replyToMessageId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendDicePostRequest sendDicePostRequest = (SendDicePostRequest) o;
    return Objects.equals(this.allowSendingWithoutReply, sendDicePostRequest.allowSendingWithoutReply) &&
        Objects.equals(this.chatId, sendDicePostRequest.chatId) &&
        Objects.equals(this.disableNotification, sendDicePostRequest.disableNotification) &&
        Objects.equals(this.emoji, sendDicePostRequest.emoji) &&
        Objects.equals(this.replyMarkup, sendDicePostRequest.replyMarkup) &&
        Objects.equals(this.replyToMessageId, sendDicePostRequest.replyToMessageId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowSendingWithoutReply, chatId, disableNotification, emoji, replyMarkup, replyToMessageId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendDicePostRequest {\n");
    sb.append("    allowSendingWithoutReply: ").append(toIndentedString(allowSendingWithoutReply)).append("\n");
    sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
    sb.append("    disableNotification: ").append(toIndentedString(disableNotification)).append("\n");
    sb.append("    emoji: ").append(toIndentedString(emoji)).append("\n");
    sb.append("    replyMarkup: ").append(toIndentedString(replyMarkup)).append("\n");
    sb.append("    replyToMessageId: ").append(toIndentedString(replyToMessageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_sending_without_reply");
    openapiFields.add("chat_id");
    openapiFields.add("disable_notification");
    openapiFields.add("emoji");
    openapiFields.add("reply_markup");
    openapiFields.add("reply_to_message_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chat_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendDicePostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendDicePostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendDicePostRequest is not found in the empty JSON string", SendDicePostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendDicePostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendDicePostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendDicePostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `chat_id`
      CopyMessagePostRequestChatId.validateJsonElement(jsonObj.get("chat_id"));
      if ((jsonObj.get("emoji") != null && !jsonObj.get("emoji").isJsonNull()) && !jsonObj.get("emoji").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emoji` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emoji").toString()));
      }
      // validate the optional field `emoji`
      if (jsonObj.get("emoji") != null && !jsonObj.get("emoji").isJsonNull()) {
        EmojiEnum.validateJsonElement(jsonObj.get("emoji"));
      }
      // validate the optional field `reply_markup`
      if (jsonObj.get("reply_markup") != null && !jsonObj.get("reply_markup").isJsonNull()) {
        CopyMessagePostRequestReplyMarkup.validateJsonElement(jsonObj.get("reply_markup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendDicePostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendDicePostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendDicePostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendDicePostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendDicePostRequest>() {
           @Override
           public void write(JsonWriter out, SendDicePostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendDicePostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendDicePostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendDicePostRequest
   * @throws IOException if the JSON string is invalid with respect to SendDicePostRequest
   */
  public static SendDicePostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendDicePostRequest.class);
  }

  /**
   * Convert an instance of SendDicePostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

