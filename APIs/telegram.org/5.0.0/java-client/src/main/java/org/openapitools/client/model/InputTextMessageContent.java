/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MessageEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputTextMessageContent {
  public static final String SERIALIZED_NAME_DISABLE_WEB_PAGE_PREVIEW = "disable_web_page_preview";
  @SerializedName(SERIALIZED_NAME_DISABLE_WEB_PAGE_PREVIEW)
  private Boolean disableWebPagePreview;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<MessageEntity> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_TEXT = "message_text";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TEXT)
  private String messageText;

  public static final String SERIALIZED_NAME_PARSE_MODE = "parse_mode";
  @SerializedName(SERIALIZED_NAME_PARSE_MODE)
  private String parseMode;

  public InputTextMessageContent() {
  }

  public InputTextMessageContent disableWebPagePreview(Boolean disableWebPagePreview) {
    this.disableWebPagePreview = disableWebPagePreview;
    return this;
  }

  /**
   * *Optional*. Disables link previews for links in the sent message
   * @return disableWebPagePreview
   */
  @javax.annotation.Nullable
  public Boolean getDisableWebPagePreview() {
    return disableWebPagePreview;
  }

  public void setDisableWebPagePreview(Boolean disableWebPagePreview) {
    this.disableWebPagePreview = disableWebPagePreview;
  }


  public InputTextMessageContent entities(List<MessageEntity> entities) {
    this.entities = entities;
    return this;
  }

  public InputTextMessageContent addEntitiesItem(MessageEntity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\\_mode*
   * @return entities
   */
  @javax.annotation.Nullable
  public List<MessageEntity> getEntities() {
    return entities;
  }

  public void setEntities(List<MessageEntity> entities) {
    this.entities = entities;
  }


  public InputTextMessageContent messageText(String messageText) {
    this.messageText = messageText;
    return this;
  }

  /**
   * Text of the message to be sent, 1-4096 characters
   * @return messageText
   */
  @javax.annotation.Nonnull
  public String getMessageText() {
    return messageText;
  }

  public void setMessageText(String messageText) {
    this.messageText = messageText;
  }


  public InputTextMessageContent parseMode(String parseMode) {
    this.parseMode = parseMode;
    return this;
  }

  /**
   * *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
   * @return parseMode
   */
  @javax.annotation.Nullable
  public String getParseMode() {
    return parseMode;
  }

  public void setParseMode(String parseMode) {
    this.parseMode = parseMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputTextMessageContent inputTextMessageContent = (InputTextMessageContent) o;
    return Objects.equals(this.disableWebPagePreview, inputTextMessageContent.disableWebPagePreview) &&
        Objects.equals(this.entities, inputTextMessageContent.entities) &&
        Objects.equals(this.messageText, inputTextMessageContent.messageText) &&
        Objects.equals(this.parseMode, inputTextMessageContent.parseMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disableWebPagePreview, entities, messageText, parseMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputTextMessageContent {\n");
    sb.append("    disableWebPagePreview: ").append(toIndentedString(disableWebPagePreview)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    messageText: ").append(toIndentedString(messageText)).append("\n");
    sb.append("    parseMode: ").append(toIndentedString(parseMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disable_web_page_preview");
    openapiFields.add("entities");
    openapiFields.add("message_text");
    openapiFields.add("parse_mode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("message_text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputTextMessageContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputTextMessageContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputTextMessageContent is not found in the empty JSON string", InputTextMessageContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputTextMessageContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputTextMessageContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputTextMessageContent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            MessageEntity.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      if (!jsonObj.get("message_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_text").toString()));
      }
      if ((jsonObj.get("parse_mode") != null && !jsonObj.get("parse_mode").isJsonNull()) && !jsonObj.get("parse_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parse_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parse_mode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputTextMessageContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputTextMessageContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputTextMessageContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputTextMessageContent.class));

       return (TypeAdapter<T>) new TypeAdapter<InputTextMessageContent>() {
           @Override
           public void write(JsonWriter out, InputTextMessageContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputTextMessageContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputTextMessageContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputTextMessageContent
   * @throws IOException if the JSON string is invalid with respect to InputTextMessageContent
   */
  public static InputTextMessageContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputTextMessageContent.class);
  }

  /**
   * Convert an instance of InputTextMessageContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

