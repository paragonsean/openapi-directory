/*
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object describes the position on faces where a mask should be placed by default.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:27.961160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MaskPosition {
  /**
   * The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
   */
  @JsonAdapter(PointEnum.Adapter.class)
  public enum PointEnum {
    FOREHEAD("forehead"),
    
    EYES("eyes"),
    
    MOUTH("mouth"),
    
    CHIN("chin");

    private String value;

    PointEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PointEnum fromValue(String value) {
      for (PointEnum b : PointEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PointEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PointEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PointEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PointEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PointEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POINT = "point";
  @SerializedName(SERIALIZED_NAME_POINT)
  private PointEnum point;

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private BigDecimal scale;

  public static final String SERIALIZED_NAME_X_SHIFT = "x_shift";
  @SerializedName(SERIALIZED_NAME_X_SHIFT)
  private BigDecimal xShift;

  public static final String SERIALIZED_NAME_Y_SHIFT = "y_shift";
  @SerializedName(SERIALIZED_NAME_Y_SHIFT)
  private BigDecimal yShift;

  public MaskPosition() {
  }

  public MaskPosition point(PointEnum point) {
    this.point = point;
    return this;
  }

  /**
   * The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
   * @return point
   */
  @javax.annotation.Nonnull
  public PointEnum getPoint() {
    return point;
  }

  public void setPoint(PointEnum point) {
    this.point = point;
  }


  public MaskPosition scale(BigDecimal scale) {
    this.scale = scale;
    return this;
  }

  /**
   * Mask scaling coefficient. For example, 2.0 means double size.
   * @return scale
   */
  @javax.annotation.Nonnull
  public BigDecimal getScale() {
    return scale;
  }

  public void setScale(BigDecimal scale) {
    this.scale = scale;
  }


  public MaskPosition xShift(BigDecimal xShift) {
    this.xShift = xShift;
    return this;
  }

  /**
   * Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
   * @return xShift
   */
  @javax.annotation.Nonnull
  public BigDecimal getxShift() {
    return xShift;
  }

  public void setxShift(BigDecimal xShift) {
    this.xShift = xShift;
  }


  public MaskPosition yShift(BigDecimal yShift) {
    this.yShift = yShift;
    return this;
  }

  /**
   * Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
   * @return yShift
   */
  @javax.annotation.Nonnull
  public BigDecimal getyShift() {
    return yShift;
  }

  public void setyShift(BigDecimal yShift) {
    this.yShift = yShift;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaskPosition maskPosition = (MaskPosition) o;
    return Objects.equals(this.point, maskPosition.point) &&
        Objects.equals(this.scale, maskPosition.scale) &&
        Objects.equals(this.xShift, maskPosition.xShift) &&
        Objects.equals(this.yShift, maskPosition.yShift);
  }

  @Override
  public int hashCode() {
    return Objects.hash(point, scale, xShift, yShift);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaskPosition {\n");
    sb.append("    point: ").append(toIndentedString(point)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    xShift: ").append(toIndentedString(xShift)).append("\n");
    sb.append("    yShift: ").append(toIndentedString(yShift)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("point");
    openapiFields.add("scale");
    openapiFields.add("x_shift");
    openapiFields.add("y_shift");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("point");
    openapiRequiredFields.add("scale");
    openapiRequiredFields.add("x_shift");
    openapiRequiredFields.add("y_shift");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MaskPosition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MaskPosition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaskPosition is not found in the empty JSON string", MaskPosition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MaskPosition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MaskPosition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MaskPosition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("point").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `point` to be a primitive type in the JSON string but got `%s`", jsonObj.get("point").toString()));
      }
      // validate the required field `point`
      PointEnum.validateJsonElement(jsonObj.get("point"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaskPosition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaskPosition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaskPosition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaskPosition.class));

       return (TypeAdapter<T>) new TypeAdapter<MaskPosition>() {
           @Override
           public void write(JsonWriter out, MaskPosition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MaskPosition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MaskPosition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MaskPosition
   * @throws IOException if the JSON string is invalid with respect to MaskPosition
   */
  public static MaskPosition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaskPosition.class);
  }

  /**
   * Convert an instance of MaskPosition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

