/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChatPermissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChatPermissions::OAIChatPermissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChatPermissions::OAIChatPermissions() {
    this->initializeModel();
}

OAIChatPermissions::~OAIChatPermissions() {}

void OAIChatPermissions::initializeModel() {

    m_can_add_web_page_previews_isSet = false;
    m_can_add_web_page_previews_isValid = false;

    m_can_change_info_isSet = false;
    m_can_change_info_isValid = false;

    m_can_invite_users_isSet = false;
    m_can_invite_users_isValid = false;

    m_can_pin_messages_isSet = false;
    m_can_pin_messages_isValid = false;

    m_can_send_media_messages_isSet = false;
    m_can_send_media_messages_isValid = false;

    m_can_send_messages_isSet = false;
    m_can_send_messages_isValid = false;

    m_can_send_other_messages_isSet = false;
    m_can_send_other_messages_isValid = false;

    m_can_send_polls_isSet = false;
    m_can_send_polls_isValid = false;
}

void OAIChatPermissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChatPermissions::fromJsonObject(QJsonObject json) {

    m_can_add_web_page_previews_isValid = ::OpenAPI::fromJsonValue(m_can_add_web_page_previews, json[QString("can_add_web_page_previews")]);
    m_can_add_web_page_previews_isSet = !json[QString("can_add_web_page_previews")].isNull() && m_can_add_web_page_previews_isValid;

    m_can_change_info_isValid = ::OpenAPI::fromJsonValue(m_can_change_info, json[QString("can_change_info")]);
    m_can_change_info_isSet = !json[QString("can_change_info")].isNull() && m_can_change_info_isValid;

    m_can_invite_users_isValid = ::OpenAPI::fromJsonValue(m_can_invite_users, json[QString("can_invite_users")]);
    m_can_invite_users_isSet = !json[QString("can_invite_users")].isNull() && m_can_invite_users_isValid;

    m_can_pin_messages_isValid = ::OpenAPI::fromJsonValue(m_can_pin_messages, json[QString("can_pin_messages")]);
    m_can_pin_messages_isSet = !json[QString("can_pin_messages")].isNull() && m_can_pin_messages_isValid;

    m_can_send_media_messages_isValid = ::OpenAPI::fromJsonValue(m_can_send_media_messages, json[QString("can_send_media_messages")]);
    m_can_send_media_messages_isSet = !json[QString("can_send_media_messages")].isNull() && m_can_send_media_messages_isValid;

    m_can_send_messages_isValid = ::OpenAPI::fromJsonValue(m_can_send_messages, json[QString("can_send_messages")]);
    m_can_send_messages_isSet = !json[QString("can_send_messages")].isNull() && m_can_send_messages_isValid;

    m_can_send_other_messages_isValid = ::OpenAPI::fromJsonValue(m_can_send_other_messages, json[QString("can_send_other_messages")]);
    m_can_send_other_messages_isSet = !json[QString("can_send_other_messages")].isNull() && m_can_send_other_messages_isValid;

    m_can_send_polls_isValid = ::OpenAPI::fromJsonValue(m_can_send_polls, json[QString("can_send_polls")]);
    m_can_send_polls_isSet = !json[QString("can_send_polls")].isNull() && m_can_send_polls_isValid;
}

QString OAIChatPermissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChatPermissions::asJsonObject() const {
    QJsonObject obj;
    if (m_can_add_web_page_previews_isSet) {
        obj.insert(QString("can_add_web_page_previews"), ::OpenAPI::toJsonValue(m_can_add_web_page_previews));
    }
    if (m_can_change_info_isSet) {
        obj.insert(QString("can_change_info"), ::OpenAPI::toJsonValue(m_can_change_info));
    }
    if (m_can_invite_users_isSet) {
        obj.insert(QString("can_invite_users"), ::OpenAPI::toJsonValue(m_can_invite_users));
    }
    if (m_can_pin_messages_isSet) {
        obj.insert(QString("can_pin_messages"), ::OpenAPI::toJsonValue(m_can_pin_messages));
    }
    if (m_can_send_media_messages_isSet) {
        obj.insert(QString("can_send_media_messages"), ::OpenAPI::toJsonValue(m_can_send_media_messages));
    }
    if (m_can_send_messages_isSet) {
        obj.insert(QString("can_send_messages"), ::OpenAPI::toJsonValue(m_can_send_messages));
    }
    if (m_can_send_other_messages_isSet) {
        obj.insert(QString("can_send_other_messages"), ::OpenAPI::toJsonValue(m_can_send_other_messages));
    }
    if (m_can_send_polls_isSet) {
        obj.insert(QString("can_send_polls"), ::OpenAPI::toJsonValue(m_can_send_polls));
    }
    return obj;
}

bool OAIChatPermissions::isCanAddWebPagePreviews() const {
    return m_can_add_web_page_previews;
}
void OAIChatPermissions::setCanAddWebPagePreviews(const bool &can_add_web_page_previews) {
    m_can_add_web_page_previews = can_add_web_page_previews;
    m_can_add_web_page_previews_isSet = true;
}

bool OAIChatPermissions::is_can_add_web_page_previews_Set() const{
    return m_can_add_web_page_previews_isSet;
}

bool OAIChatPermissions::is_can_add_web_page_previews_Valid() const{
    return m_can_add_web_page_previews_isValid;
}

bool OAIChatPermissions::isCanChangeInfo() const {
    return m_can_change_info;
}
void OAIChatPermissions::setCanChangeInfo(const bool &can_change_info) {
    m_can_change_info = can_change_info;
    m_can_change_info_isSet = true;
}

bool OAIChatPermissions::is_can_change_info_Set() const{
    return m_can_change_info_isSet;
}

bool OAIChatPermissions::is_can_change_info_Valid() const{
    return m_can_change_info_isValid;
}

bool OAIChatPermissions::isCanInviteUsers() const {
    return m_can_invite_users;
}
void OAIChatPermissions::setCanInviteUsers(const bool &can_invite_users) {
    m_can_invite_users = can_invite_users;
    m_can_invite_users_isSet = true;
}

bool OAIChatPermissions::is_can_invite_users_Set() const{
    return m_can_invite_users_isSet;
}

bool OAIChatPermissions::is_can_invite_users_Valid() const{
    return m_can_invite_users_isValid;
}

bool OAIChatPermissions::isCanPinMessages() const {
    return m_can_pin_messages;
}
void OAIChatPermissions::setCanPinMessages(const bool &can_pin_messages) {
    m_can_pin_messages = can_pin_messages;
    m_can_pin_messages_isSet = true;
}

bool OAIChatPermissions::is_can_pin_messages_Set() const{
    return m_can_pin_messages_isSet;
}

bool OAIChatPermissions::is_can_pin_messages_Valid() const{
    return m_can_pin_messages_isValid;
}

bool OAIChatPermissions::isCanSendMediaMessages() const {
    return m_can_send_media_messages;
}
void OAIChatPermissions::setCanSendMediaMessages(const bool &can_send_media_messages) {
    m_can_send_media_messages = can_send_media_messages;
    m_can_send_media_messages_isSet = true;
}

bool OAIChatPermissions::is_can_send_media_messages_Set() const{
    return m_can_send_media_messages_isSet;
}

bool OAIChatPermissions::is_can_send_media_messages_Valid() const{
    return m_can_send_media_messages_isValid;
}

bool OAIChatPermissions::isCanSendMessages() const {
    return m_can_send_messages;
}
void OAIChatPermissions::setCanSendMessages(const bool &can_send_messages) {
    m_can_send_messages = can_send_messages;
    m_can_send_messages_isSet = true;
}

bool OAIChatPermissions::is_can_send_messages_Set() const{
    return m_can_send_messages_isSet;
}

bool OAIChatPermissions::is_can_send_messages_Valid() const{
    return m_can_send_messages_isValid;
}

bool OAIChatPermissions::isCanSendOtherMessages() const {
    return m_can_send_other_messages;
}
void OAIChatPermissions::setCanSendOtherMessages(const bool &can_send_other_messages) {
    m_can_send_other_messages = can_send_other_messages;
    m_can_send_other_messages_isSet = true;
}

bool OAIChatPermissions::is_can_send_other_messages_Set() const{
    return m_can_send_other_messages_isSet;
}

bool OAIChatPermissions::is_can_send_other_messages_Valid() const{
    return m_can_send_other_messages_isValid;
}

bool OAIChatPermissions::isCanSendPolls() const {
    return m_can_send_polls;
}
void OAIChatPermissions::setCanSendPolls(const bool &can_send_polls) {
    m_can_send_polls = can_send_polls;
    m_can_send_polls_isSet = true;
}

bool OAIChatPermissions::is_can_send_polls_Set() const{
    return m_can_send_polls_isSet;
}

bool OAIChatPermissions::is_can_send_polls_Valid() const{
    return m_can_send_polls_isValid;
}

bool OAIChatPermissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_add_web_page_previews_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_invite_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_pin_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_send_media_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_send_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_send_other_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_send_polls_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChatPermissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
