/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStickerSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStickerSet::OAIStickerSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStickerSet::OAIStickerSet() {
    this->initializeModel();
}

OAIStickerSet::~OAIStickerSet() {}

void OAIStickerSet::initializeModel() {

    m_contains_masks_isSet = false;
    m_contains_masks_isValid = false;

    m_is_animated_isSet = false;
    m_is_animated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_stickers_isSet = false;
    m_stickers_isValid = false;

    m_thumb_isSet = false;
    m_thumb_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIStickerSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStickerSet::fromJsonObject(QJsonObject json) {

    m_contains_masks_isValid = ::OpenAPI::fromJsonValue(m_contains_masks, json[QString("contains_masks")]);
    m_contains_masks_isSet = !json[QString("contains_masks")].isNull() && m_contains_masks_isValid;

    m_is_animated_isValid = ::OpenAPI::fromJsonValue(m_is_animated, json[QString("is_animated")]);
    m_is_animated_isSet = !json[QString("is_animated")].isNull() && m_is_animated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_stickers_isValid = ::OpenAPI::fromJsonValue(m_stickers, json[QString("stickers")]);
    m_stickers_isSet = !json[QString("stickers")].isNull() && m_stickers_isValid;

    m_thumb_isValid = ::OpenAPI::fromJsonValue(m_thumb, json[QString("thumb")]);
    m_thumb_isSet = !json[QString("thumb")].isNull() && m_thumb_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIStickerSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStickerSet::asJsonObject() const {
    QJsonObject obj;
    if (m_contains_masks_isSet) {
        obj.insert(QString("contains_masks"), ::OpenAPI::toJsonValue(m_contains_masks));
    }
    if (m_is_animated_isSet) {
        obj.insert(QString("is_animated"), ::OpenAPI::toJsonValue(m_is_animated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_stickers.size() > 0) {
        obj.insert(QString("stickers"), ::OpenAPI::toJsonValue(m_stickers));
    }
    if (m_thumb.isSet()) {
        obj.insert(QString("thumb"), ::OpenAPI::toJsonValue(m_thumb));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

bool OAIStickerSet::isContainsMasks() const {
    return m_contains_masks;
}
void OAIStickerSet::setContainsMasks(const bool &contains_masks) {
    m_contains_masks = contains_masks;
    m_contains_masks_isSet = true;
}

bool OAIStickerSet::is_contains_masks_Set() const{
    return m_contains_masks_isSet;
}

bool OAIStickerSet::is_contains_masks_Valid() const{
    return m_contains_masks_isValid;
}

bool OAIStickerSet::isIsAnimated() const {
    return m_is_animated;
}
void OAIStickerSet::setIsAnimated(const bool &is_animated) {
    m_is_animated = is_animated;
    m_is_animated_isSet = true;
}

bool OAIStickerSet::is_is_animated_Set() const{
    return m_is_animated_isSet;
}

bool OAIStickerSet::is_is_animated_Valid() const{
    return m_is_animated_isValid;
}

QString OAIStickerSet::getName() const {
    return m_name;
}
void OAIStickerSet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStickerSet::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStickerSet::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISticker> OAIStickerSet::getStickers() const {
    return m_stickers;
}
void OAIStickerSet::setStickers(const QList<OAISticker> &stickers) {
    m_stickers = stickers;
    m_stickers_isSet = true;
}

bool OAIStickerSet::is_stickers_Set() const{
    return m_stickers_isSet;
}

bool OAIStickerSet::is_stickers_Valid() const{
    return m_stickers_isValid;
}

OAIPhotoSize OAIStickerSet::getThumb() const {
    return m_thumb;
}
void OAIStickerSet::setThumb(const OAIPhotoSize &thumb) {
    m_thumb = thumb;
    m_thumb_isSet = true;
}

bool OAIStickerSet::is_thumb_Set() const{
    return m_thumb_isSet;
}

bool OAIStickerSet::is_thumb_Valid() const{
    return m_thumb_isValid;
}

QString OAIStickerSet::getTitle() const {
    return m_title;
}
void OAIStickerSet::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIStickerSet::is_title_Set() const{
    return m_title_isSet;
}

bool OAIStickerSet::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIStickerSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contains_masks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_animated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stickers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStickerSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contains_masks_isValid && m_is_animated_isValid && m_name_isValid && m_stickers_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
