/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_answerCallbackQuery_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_answerCallbackQuery_post_request::OAI_answerCallbackQuery_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_answerCallbackQuery_post_request::OAI_answerCallbackQuery_post_request() {
    this->initializeModel();
}

OAI_answerCallbackQuery_post_request::~OAI_answerCallbackQuery_post_request() {}

void OAI_answerCallbackQuery_post_request::initializeModel() {

    m_cache_time_isSet = false;
    m_cache_time_isValid = false;

    m_callback_query_id_isSet = false;
    m_callback_query_id_isValid = false;

    m_show_alert_isSet = false;
    m_show_alert_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAI_answerCallbackQuery_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_answerCallbackQuery_post_request::fromJsonObject(QJsonObject json) {

    m_cache_time_isValid = ::OpenAPI::fromJsonValue(m_cache_time, json[QString("cache_time")]);
    m_cache_time_isSet = !json[QString("cache_time")].isNull() && m_cache_time_isValid;

    m_callback_query_id_isValid = ::OpenAPI::fromJsonValue(m_callback_query_id, json[QString("callback_query_id")]);
    m_callback_query_id_isSet = !json[QString("callback_query_id")].isNull() && m_callback_query_id_isValid;

    m_show_alert_isValid = ::OpenAPI::fromJsonValue(m_show_alert, json[QString("show_alert")]);
    m_show_alert_isSet = !json[QString("show_alert")].isNull() && m_show_alert_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAI_answerCallbackQuery_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_answerCallbackQuery_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_time_isSet) {
        obj.insert(QString("cache_time"), ::OpenAPI::toJsonValue(m_cache_time));
    }
    if (m_callback_query_id_isSet) {
        obj.insert(QString("callback_query_id"), ::OpenAPI::toJsonValue(m_callback_query_id));
    }
    if (m_show_alert_isSet) {
        obj.insert(QString("show_alert"), ::OpenAPI::toJsonValue(m_show_alert));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAI_answerCallbackQuery_post_request::getCacheTime() const {
    return m_cache_time;
}
void OAI_answerCallbackQuery_post_request::setCacheTime(const qint32 &cache_time) {
    m_cache_time = cache_time;
    m_cache_time_isSet = true;
}

bool OAI_answerCallbackQuery_post_request::is_cache_time_Set() const{
    return m_cache_time_isSet;
}

bool OAI_answerCallbackQuery_post_request::is_cache_time_Valid() const{
    return m_cache_time_isValid;
}

QString OAI_answerCallbackQuery_post_request::getCallbackQueryId() const {
    return m_callback_query_id;
}
void OAI_answerCallbackQuery_post_request::setCallbackQueryId(const QString &callback_query_id) {
    m_callback_query_id = callback_query_id;
    m_callback_query_id_isSet = true;
}

bool OAI_answerCallbackQuery_post_request::is_callback_query_id_Set() const{
    return m_callback_query_id_isSet;
}

bool OAI_answerCallbackQuery_post_request::is_callback_query_id_Valid() const{
    return m_callback_query_id_isValid;
}

bool OAI_answerCallbackQuery_post_request::isShowAlert() const {
    return m_show_alert;
}
void OAI_answerCallbackQuery_post_request::setShowAlert(const bool &show_alert) {
    m_show_alert = show_alert;
    m_show_alert_isSet = true;
}

bool OAI_answerCallbackQuery_post_request::is_show_alert_Set() const{
    return m_show_alert_isSet;
}

bool OAI_answerCallbackQuery_post_request::is_show_alert_Valid() const{
    return m_show_alert_isValid;
}

QString OAI_answerCallbackQuery_post_request::getText() const {
    return m_text;
}
void OAI_answerCallbackQuery_post_request::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAI_answerCallbackQuery_post_request::is_text_Set() const{
    return m_text_isSet;
}

bool OAI_answerCallbackQuery_post_request::is_text_Valid() const{
    return m_text_isValid;
}

QString OAI_answerCallbackQuery_post_request::getUrl() const {
    return m_url;
}
void OAI_answerCallbackQuery_post_request::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAI_answerCallbackQuery_post_request::is_url_Set() const{
    return m_url_isSet;
}

bool OAI_answerCallbackQuery_post_request::is_url_Valid() const{
    return m_url_isValid;
}

bool OAI_answerCallbackQuery_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_alert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_answerCallbackQuery_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_callback_query_id_isValid && true;
}

} // namespace OpenAPI
