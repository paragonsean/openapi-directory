/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_copyMessage_post_request_reply_markup.h
 *
 * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
 */

#ifndef OAI_copyMessage_post_request_reply_markup_H
#define OAI_copyMessage_post_request_reply_markup_H

#include <QJsonObject>

#include "OAIForceReply.h"
#include "OAIInlineKeyboardButton.h"
#include "OAIInlineKeyboardMarkup.h"
#include "OAIKeyboardButton.h"
#include "OAIReplyKeyboardMarkup.h"
#include "OAIReplyKeyboardRemove.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInlineKeyboardButton;
class OAIKeyboardButton;

class OAI_copyMessage_post_request_reply_markup : public OAIObject {
public:
    OAI_copyMessage_post_request_reply_markup();
    OAI_copyMessage_post_request_reply_markup(QString json);
    ~OAI_copyMessage_post_request_reply_markup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QList<OAIInlineKeyboardButton>> getInlineKeyboard() const;
    void setInlineKeyboard(const QList<QList<OAIInlineKeyboardButton>> &inline_keyboard);
    bool is_inline_keyboard_Set() const;
    bool is_inline_keyboard_Valid() const;

    QList<QList<OAIKeyboardButton>> getKeyboard() const;
    void setKeyboard(const QList<QList<OAIKeyboardButton>> &keyboard);
    bool is_keyboard_Set() const;
    bool is_keyboard_Valid() const;

    bool isOneTimeKeyboard() const;
    void setOneTimeKeyboard(const bool &one_time_keyboard);
    bool is_one_time_keyboard_Set() const;
    bool is_one_time_keyboard_Valid() const;

    bool isResizeKeyboard() const;
    void setResizeKeyboard(const bool &resize_keyboard);
    bool is_resize_keyboard_Set() const;
    bool is_resize_keyboard_Valid() const;

    bool isSelective() const;
    void setSelective(const bool &selective);
    bool is_selective_Set() const;
    bool is_selective_Valid() const;

    bool isRemoveKeyboard() const;
    void setRemoveKeyboard(const bool &remove_keyboard);
    bool is_remove_keyboard_Set() const;
    bool is_remove_keyboard_Valid() const;

    bool isForceReply() const;
    void setForceReply(const bool &force_reply);
    bool is_force_reply_Set() const;
    bool is_force_reply_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QList<OAIInlineKeyboardButton>> m_inline_keyboard;
    bool m_inline_keyboard_isSet;
    bool m_inline_keyboard_isValid;

    QList<QList<OAIKeyboardButton>> m_keyboard;
    bool m_keyboard_isSet;
    bool m_keyboard_isValid;

    bool m_one_time_keyboard;
    bool m_one_time_keyboard_isSet;
    bool m_one_time_keyboard_isValid;

    bool m_resize_keyboard;
    bool m_resize_keyboard_isSet;
    bool m_resize_keyboard_isValid;

    bool m_selective;
    bool m_selective_isSet;
    bool m_selective_isValid;

    bool m_remove_keyboard;
    bool m_remove_keyboard_isSet;
    bool m_remove_keyboard_isValid;

    bool m_force_reply;
    bool m_force_reply_isSet;
    bool m_force_reply_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_copyMessage_post_request_reply_markup)

#endif // OAI_copyMessage_post_request_reply_markup_H
