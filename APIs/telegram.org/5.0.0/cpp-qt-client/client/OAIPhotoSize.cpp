/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhotoSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhotoSize::OAIPhotoSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhotoSize::OAIPhotoSize() {
    this->initializeModel();
}

OAIPhotoSize::~OAIPhotoSize() {}

void OAIPhotoSize::initializeModel() {

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_file_unique_id_isSet = false;
    m_file_unique_id_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIPhotoSize::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhotoSize::fromJsonObject(QJsonObject json) {

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("file_id")]);
    m_file_id_isSet = !json[QString("file_id")].isNull() && m_file_id_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("file_size")]);
    m_file_size_isSet = !json[QString("file_size")].isNull() && m_file_size_isValid;

    m_file_unique_id_isValid = ::OpenAPI::fromJsonValue(m_file_unique_id, json[QString("file_unique_id")]);
    m_file_unique_id_isSet = !json[QString("file_unique_id")].isNull() && m_file_unique_id_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIPhotoSize::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhotoSize::asJsonObject() const {
    QJsonObject obj;
    if (m_file_id_isSet) {
        obj.insert(QString("file_id"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("file_size"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_file_unique_id_isSet) {
        obj.insert(QString("file_unique_id"), ::OpenAPI::toJsonValue(m_file_unique_id));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIPhotoSize::getFileId() const {
    return m_file_id;
}
void OAIPhotoSize::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIPhotoSize::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIPhotoSize::is_file_id_Valid() const{
    return m_file_id_isValid;
}

qint32 OAIPhotoSize::getFileSize() const {
    return m_file_size;
}
void OAIPhotoSize::setFileSize(const qint32 &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIPhotoSize::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIPhotoSize::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAIPhotoSize::getFileUniqueId() const {
    return m_file_unique_id;
}
void OAIPhotoSize::setFileUniqueId(const QString &file_unique_id) {
    m_file_unique_id = file_unique_id;
    m_file_unique_id_isSet = true;
}

bool OAIPhotoSize::is_file_unique_id_Set() const{
    return m_file_unique_id_isSet;
}

bool OAIPhotoSize::is_file_unique_id_Valid() const{
    return m_file_unique_id_isValid;
}

qint32 OAIPhotoSize::getHeight() const {
    return m_height;
}
void OAIPhotoSize::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPhotoSize::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPhotoSize::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIPhotoSize::getWidth() const {
    return m_width;
}
void OAIPhotoSize::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIPhotoSize::is_width_Set() const{
    return m_width_isSet;
}

bool OAIPhotoSize::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIPhotoSize::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhotoSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_id_isValid && m_file_unique_id_isValid && m_height_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
