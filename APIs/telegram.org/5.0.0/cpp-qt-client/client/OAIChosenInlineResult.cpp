/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChosenInlineResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChosenInlineResult::OAIChosenInlineResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChosenInlineResult::OAIChosenInlineResult() {
    this->initializeModel();
}

OAIChosenInlineResult::~OAIChosenInlineResult() {}

void OAIChosenInlineResult::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_inline_message_id_isSet = false;
    m_inline_message_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_result_id_isSet = false;
    m_result_id_isValid = false;
}

void OAIChosenInlineResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChosenInlineResult::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_inline_message_id_isValid = ::OpenAPI::fromJsonValue(m_inline_message_id, json[QString("inline_message_id")]);
    m_inline_message_id_isSet = !json[QString("inline_message_id")].isNull() && m_inline_message_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_result_id_isValid = ::OpenAPI::fromJsonValue(m_result_id, json[QString("result_id")]);
    m_result_id_isSet = !json[QString("result_id")].isNull() && m_result_id_isValid;
}

QString OAIChosenInlineResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChosenInlineResult::asJsonObject() const {
    QJsonObject obj;
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_inline_message_id_isSet) {
        obj.insert(QString("inline_message_id"), ::OpenAPI::toJsonValue(m_inline_message_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_result_id_isSet) {
        obj.insert(QString("result_id"), ::OpenAPI::toJsonValue(m_result_id));
    }
    return obj;
}

OAIUser OAIChosenInlineResult::getFrom() const {
    return m_from;
}
void OAIChosenInlineResult::setFrom(const OAIUser &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIChosenInlineResult::is_from_Set() const{
    return m_from_isSet;
}

bool OAIChosenInlineResult::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIChosenInlineResult::getInlineMessageId() const {
    return m_inline_message_id;
}
void OAIChosenInlineResult::setInlineMessageId(const QString &inline_message_id) {
    m_inline_message_id = inline_message_id;
    m_inline_message_id_isSet = true;
}

bool OAIChosenInlineResult::is_inline_message_id_Set() const{
    return m_inline_message_id_isSet;
}

bool OAIChosenInlineResult::is_inline_message_id_Valid() const{
    return m_inline_message_id_isValid;
}

OAILocation OAIChosenInlineResult::getLocation() const {
    return m_location;
}
void OAIChosenInlineResult::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIChosenInlineResult::is_location_Set() const{
    return m_location_isSet;
}

bool OAIChosenInlineResult::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIChosenInlineResult::getQuery() const {
    return m_query;
}
void OAIChosenInlineResult::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIChosenInlineResult::is_query_Set() const{
    return m_query_isSet;
}

bool OAIChosenInlineResult::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIChosenInlineResult::getResultId() const {
    return m_result_id;
}
void OAIChosenInlineResult::setResultId(const QString &result_id) {
    m_result_id = result_id;
    m_result_id_isSet = true;
}

bool OAIChosenInlineResult::is_result_id_Set() const{
    return m_result_id_isSet;
}

bool OAIChosenInlineResult::is_result_id_Valid() const{
    return m_result_id_isValid;
}

bool OAIChosenInlineResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChosenInlineResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_query_isValid && m_result_id_isValid && true;
}

} // namespace OpenAPI
