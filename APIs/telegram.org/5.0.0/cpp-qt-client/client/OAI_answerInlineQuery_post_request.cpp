/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_answerInlineQuery_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_answerInlineQuery_post_request::OAI_answerInlineQuery_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_answerInlineQuery_post_request::OAI_answerInlineQuery_post_request() {
    this->initializeModel();
}

OAI_answerInlineQuery_post_request::~OAI_answerInlineQuery_post_request() {}

void OAI_answerInlineQuery_post_request::initializeModel() {

    m_cache_time_isSet = false;
    m_cache_time_isValid = false;

    m_inline_query_id_isSet = false;
    m_inline_query_id_isValid = false;

    m_is_personal_isSet = false;
    m_is_personal_isValid = false;

    m_next_offset_isSet = false;
    m_next_offset_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_switch_pm_parameter_isSet = false;
    m_switch_pm_parameter_isValid = false;

    m_switch_pm_text_isSet = false;
    m_switch_pm_text_isValid = false;
}

void OAI_answerInlineQuery_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_answerInlineQuery_post_request::fromJsonObject(QJsonObject json) {

    m_cache_time_isValid = ::OpenAPI::fromJsonValue(m_cache_time, json[QString("cache_time")]);
    m_cache_time_isSet = !json[QString("cache_time")].isNull() && m_cache_time_isValid;

    m_inline_query_id_isValid = ::OpenAPI::fromJsonValue(m_inline_query_id, json[QString("inline_query_id")]);
    m_inline_query_id_isSet = !json[QString("inline_query_id")].isNull() && m_inline_query_id_isValid;

    m_is_personal_isValid = ::OpenAPI::fromJsonValue(m_is_personal, json[QString("is_personal")]);
    m_is_personal_isSet = !json[QString("is_personal")].isNull() && m_is_personal_isValid;

    m_next_offset_isValid = ::OpenAPI::fromJsonValue(m_next_offset, json[QString("next_offset")]);
    m_next_offset_isSet = !json[QString("next_offset")].isNull() && m_next_offset_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_switch_pm_parameter_isValid = ::OpenAPI::fromJsonValue(m_switch_pm_parameter, json[QString("switch_pm_parameter")]);
    m_switch_pm_parameter_isSet = !json[QString("switch_pm_parameter")].isNull() && m_switch_pm_parameter_isValid;

    m_switch_pm_text_isValid = ::OpenAPI::fromJsonValue(m_switch_pm_text, json[QString("switch_pm_text")]);
    m_switch_pm_text_isSet = !json[QString("switch_pm_text")].isNull() && m_switch_pm_text_isValid;
}

QString OAI_answerInlineQuery_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_answerInlineQuery_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_time_isSet) {
        obj.insert(QString("cache_time"), ::OpenAPI::toJsonValue(m_cache_time));
    }
    if (m_inline_query_id_isSet) {
        obj.insert(QString("inline_query_id"), ::OpenAPI::toJsonValue(m_inline_query_id));
    }
    if (m_is_personal_isSet) {
        obj.insert(QString("is_personal"), ::OpenAPI::toJsonValue(m_is_personal));
    }
    if (m_next_offset_isSet) {
        obj.insert(QString("next_offset"), ::OpenAPI::toJsonValue(m_next_offset));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_switch_pm_parameter_isSet) {
        obj.insert(QString("switch_pm_parameter"), ::OpenAPI::toJsonValue(m_switch_pm_parameter));
    }
    if (m_switch_pm_text_isSet) {
        obj.insert(QString("switch_pm_text"), ::OpenAPI::toJsonValue(m_switch_pm_text));
    }
    return obj;
}

qint32 OAI_answerInlineQuery_post_request::getCacheTime() const {
    return m_cache_time;
}
void OAI_answerInlineQuery_post_request::setCacheTime(const qint32 &cache_time) {
    m_cache_time = cache_time;
    m_cache_time_isSet = true;
}

bool OAI_answerInlineQuery_post_request::is_cache_time_Set() const{
    return m_cache_time_isSet;
}

bool OAI_answerInlineQuery_post_request::is_cache_time_Valid() const{
    return m_cache_time_isValid;
}

QString OAI_answerInlineQuery_post_request::getInlineQueryId() const {
    return m_inline_query_id;
}
void OAI_answerInlineQuery_post_request::setInlineQueryId(const QString &inline_query_id) {
    m_inline_query_id = inline_query_id;
    m_inline_query_id_isSet = true;
}

bool OAI_answerInlineQuery_post_request::is_inline_query_id_Set() const{
    return m_inline_query_id_isSet;
}

bool OAI_answerInlineQuery_post_request::is_inline_query_id_Valid() const{
    return m_inline_query_id_isValid;
}

bool OAI_answerInlineQuery_post_request::isIsPersonal() const {
    return m_is_personal;
}
void OAI_answerInlineQuery_post_request::setIsPersonal(const bool &is_personal) {
    m_is_personal = is_personal;
    m_is_personal_isSet = true;
}

bool OAI_answerInlineQuery_post_request::is_is_personal_Set() const{
    return m_is_personal_isSet;
}

bool OAI_answerInlineQuery_post_request::is_is_personal_Valid() const{
    return m_is_personal_isValid;
}

QString OAI_answerInlineQuery_post_request::getNextOffset() const {
    return m_next_offset;
}
void OAI_answerInlineQuery_post_request::setNextOffset(const QString &next_offset) {
    m_next_offset = next_offset;
    m_next_offset_isSet = true;
}

bool OAI_answerInlineQuery_post_request::is_next_offset_Set() const{
    return m_next_offset_isSet;
}

bool OAI_answerInlineQuery_post_request::is_next_offset_Valid() const{
    return m_next_offset_isValid;
}

QList<OAIInlineQueryResult> OAI_answerInlineQuery_post_request::getResults() const {
    return m_results;
}
void OAI_answerInlineQuery_post_request::setResults(const QList<OAIInlineQueryResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAI_answerInlineQuery_post_request::is_results_Set() const{
    return m_results_isSet;
}

bool OAI_answerInlineQuery_post_request::is_results_Valid() const{
    return m_results_isValid;
}

QString OAI_answerInlineQuery_post_request::getSwitchPmParameter() const {
    return m_switch_pm_parameter;
}
void OAI_answerInlineQuery_post_request::setSwitchPmParameter(const QString &switch_pm_parameter) {
    m_switch_pm_parameter = switch_pm_parameter;
    m_switch_pm_parameter_isSet = true;
}

bool OAI_answerInlineQuery_post_request::is_switch_pm_parameter_Set() const{
    return m_switch_pm_parameter_isSet;
}

bool OAI_answerInlineQuery_post_request::is_switch_pm_parameter_Valid() const{
    return m_switch_pm_parameter_isValid;
}

QString OAI_answerInlineQuery_post_request::getSwitchPmText() const {
    return m_switch_pm_text;
}
void OAI_answerInlineQuery_post_request::setSwitchPmText(const QString &switch_pm_text) {
    m_switch_pm_text = switch_pm_text;
    m_switch_pm_text_isSet = true;
}

bool OAI_answerInlineQuery_post_request::is_switch_pm_text_Set() const{
    return m_switch_pm_text_isSet;
}

bool OAI_answerInlineQuery_post_request::is_switch_pm_text_Valid() const{
    return m_switch_pm_text_isValid;
}

bool OAI_answerInlineQuery_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_personal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_pm_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_pm_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_answerInlineQuery_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inline_query_id_isValid && m_results_isValid && true;
}

} // namespace OpenAPI
