/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_sendPoll_post_request.h
 *
 * 
 */

#ifndef OAI_sendPoll_post_request_H
#define OAI_sendPoll_post_request_H

#include <QJsonObject>

#include "OAIMessageEntity.h"
#include "OAI_copyMessage_post_request_chat_id.h"
#include "OAI_copyMessage_post_request_reply_markup.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMessageEntity;
class OAI_copyMessage_post_request_reply_markup;

class OAI_sendPoll_post_request : public OAIObject {
public:
    OAI_sendPoll_post_request();
    OAI_sendPoll_post_request(QString json);
    ~OAI_sendPoll_post_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowSendingWithoutReply() const;
    void setAllowSendingWithoutReply(const bool &allow_sending_without_reply);
    bool is_allow_sending_without_reply_Set() const;
    bool is_allow_sending_without_reply_Valid() const;

    bool isAllowsMultipleAnswers() const;
    void setAllowsMultipleAnswers(const bool &allows_multiple_answers);
    bool is_allows_multiple_answers_Set() const;
    bool is_allows_multiple_answers_Valid() const;

    OAI_copyMessage_post_request_chat_id getChatId() const;
    void setChatId(const OAI_copyMessage_post_request_chat_id &chat_id);
    bool is_chat_id_Set() const;
    bool is_chat_id_Valid() const;

    qint32 getCloseDate() const;
    void setCloseDate(const qint32 &close_date);
    bool is_close_date_Set() const;
    bool is_close_date_Valid() const;

    qint32 getCorrectOptionId() const;
    void setCorrectOptionId(const qint32 &correct_option_id);
    bool is_correct_option_id_Set() const;
    bool is_correct_option_id_Valid() const;

    bool isDisableNotification() const;
    void setDisableNotification(const bool &disable_notification);
    bool is_disable_notification_Set() const;
    bool is_disable_notification_Valid() const;

    QString getExplanation() const;
    void setExplanation(const QString &explanation);
    bool is_explanation_Set() const;
    bool is_explanation_Valid() const;

    QList<OAIMessageEntity> getExplanationEntities() const;
    void setExplanationEntities(const QList<OAIMessageEntity> &explanation_entities);
    bool is_explanation_entities_Set() const;
    bool is_explanation_entities_Valid() const;

    QString getExplanationParseMode() const;
    void setExplanationParseMode(const QString &explanation_parse_mode);
    bool is_explanation_parse_mode_Set() const;
    bool is_explanation_parse_mode_Valid() const;

    bool isIsAnonymous() const;
    void setIsAnonymous(const bool &is_anonymous);
    bool is_is_anonymous_Set() const;
    bool is_is_anonymous_Valid() const;

    bool isIsClosed() const;
    void setIsClosed(const bool &is_closed);
    bool is_is_closed_Set() const;
    bool is_is_closed_Valid() const;

    qint32 getOpenPeriod() const;
    void setOpenPeriod(const qint32 &open_period);
    bool is_open_period_Set() const;
    bool is_open_period_Valid() const;

    QList<QString> getOptions() const;
    void setOptions(const QList<QString> &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    QString getQuestion() const;
    void setQuestion(const QString &question);
    bool is_question_Set() const;
    bool is_question_Valid() const;

    OAI_copyMessage_post_request_reply_markup getReplyMarkup() const;
    void setReplyMarkup(const OAI_copyMessage_post_request_reply_markup &reply_markup);
    bool is_reply_markup_Set() const;
    bool is_reply_markup_Valid() const;

    qint32 getReplyToMessageId() const;
    void setReplyToMessageId(const qint32 &reply_to_message_id);
    bool is_reply_to_message_id_Set() const;
    bool is_reply_to_message_id_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_sending_without_reply;
    bool m_allow_sending_without_reply_isSet;
    bool m_allow_sending_without_reply_isValid;

    bool m_allows_multiple_answers;
    bool m_allows_multiple_answers_isSet;
    bool m_allows_multiple_answers_isValid;

    OAI_copyMessage_post_request_chat_id m_chat_id;
    bool m_chat_id_isSet;
    bool m_chat_id_isValid;

    qint32 m_close_date;
    bool m_close_date_isSet;
    bool m_close_date_isValid;

    qint32 m_correct_option_id;
    bool m_correct_option_id_isSet;
    bool m_correct_option_id_isValid;

    bool m_disable_notification;
    bool m_disable_notification_isSet;
    bool m_disable_notification_isValid;

    QString m_explanation;
    bool m_explanation_isSet;
    bool m_explanation_isValid;

    QList<OAIMessageEntity> m_explanation_entities;
    bool m_explanation_entities_isSet;
    bool m_explanation_entities_isValid;

    QString m_explanation_parse_mode;
    bool m_explanation_parse_mode_isSet;
    bool m_explanation_parse_mode_isValid;

    bool m_is_anonymous;
    bool m_is_anonymous_isSet;
    bool m_is_anonymous_isValid;

    bool m_is_closed;
    bool m_is_closed_isSet;
    bool m_is_closed_isValid;

    qint32 m_open_period;
    bool m_open_period_isSet;
    bool m_open_period_isValid;

    QList<QString> m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    QString m_question;
    bool m_question_isSet;
    bool m_question_isValid;

    OAI_copyMessage_post_request_reply_markup m_reply_markup;
    bool m_reply_markup_isSet;
    bool m_reply_markup_isValid;

    qint32 m_reply_to_message_id;
    bool m_reply_to_message_id_isSet;
    bool m_reply_to_message_id_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_sendPoll_post_request)

#endif // OAI_sendPoll_post_request_H
