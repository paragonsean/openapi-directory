/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChatPhoto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChatPhoto::OAIChatPhoto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChatPhoto::OAIChatPhoto() {
    this->initializeModel();
}

OAIChatPhoto::~OAIChatPhoto() {}

void OAIChatPhoto::initializeModel() {

    m_big_file_id_isSet = false;
    m_big_file_id_isValid = false;

    m_big_file_unique_id_isSet = false;
    m_big_file_unique_id_isValid = false;

    m_small_file_id_isSet = false;
    m_small_file_id_isValid = false;

    m_small_file_unique_id_isSet = false;
    m_small_file_unique_id_isValid = false;
}

void OAIChatPhoto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChatPhoto::fromJsonObject(QJsonObject json) {

    m_big_file_id_isValid = ::OpenAPI::fromJsonValue(m_big_file_id, json[QString("big_file_id")]);
    m_big_file_id_isSet = !json[QString("big_file_id")].isNull() && m_big_file_id_isValid;

    m_big_file_unique_id_isValid = ::OpenAPI::fromJsonValue(m_big_file_unique_id, json[QString("big_file_unique_id")]);
    m_big_file_unique_id_isSet = !json[QString("big_file_unique_id")].isNull() && m_big_file_unique_id_isValid;

    m_small_file_id_isValid = ::OpenAPI::fromJsonValue(m_small_file_id, json[QString("small_file_id")]);
    m_small_file_id_isSet = !json[QString("small_file_id")].isNull() && m_small_file_id_isValid;

    m_small_file_unique_id_isValid = ::OpenAPI::fromJsonValue(m_small_file_unique_id, json[QString("small_file_unique_id")]);
    m_small_file_unique_id_isSet = !json[QString("small_file_unique_id")].isNull() && m_small_file_unique_id_isValid;
}

QString OAIChatPhoto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChatPhoto::asJsonObject() const {
    QJsonObject obj;
    if (m_big_file_id_isSet) {
        obj.insert(QString("big_file_id"), ::OpenAPI::toJsonValue(m_big_file_id));
    }
    if (m_big_file_unique_id_isSet) {
        obj.insert(QString("big_file_unique_id"), ::OpenAPI::toJsonValue(m_big_file_unique_id));
    }
    if (m_small_file_id_isSet) {
        obj.insert(QString("small_file_id"), ::OpenAPI::toJsonValue(m_small_file_id));
    }
    if (m_small_file_unique_id_isSet) {
        obj.insert(QString("small_file_unique_id"), ::OpenAPI::toJsonValue(m_small_file_unique_id));
    }
    return obj;
}

QString OAIChatPhoto::getBigFileId() const {
    return m_big_file_id;
}
void OAIChatPhoto::setBigFileId(const QString &big_file_id) {
    m_big_file_id = big_file_id;
    m_big_file_id_isSet = true;
}

bool OAIChatPhoto::is_big_file_id_Set() const{
    return m_big_file_id_isSet;
}

bool OAIChatPhoto::is_big_file_id_Valid() const{
    return m_big_file_id_isValid;
}

QString OAIChatPhoto::getBigFileUniqueId() const {
    return m_big_file_unique_id;
}
void OAIChatPhoto::setBigFileUniqueId(const QString &big_file_unique_id) {
    m_big_file_unique_id = big_file_unique_id;
    m_big_file_unique_id_isSet = true;
}

bool OAIChatPhoto::is_big_file_unique_id_Set() const{
    return m_big_file_unique_id_isSet;
}

bool OAIChatPhoto::is_big_file_unique_id_Valid() const{
    return m_big_file_unique_id_isValid;
}

QString OAIChatPhoto::getSmallFileId() const {
    return m_small_file_id;
}
void OAIChatPhoto::setSmallFileId(const QString &small_file_id) {
    m_small_file_id = small_file_id;
    m_small_file_id_isSet = true;
}

bool OAIChatPhoto::is_small_file_id_Set() const{
    return m_small_file_id_isSet;
}

bool OAIChatPhoto::is_small_file_id_Valid() const{
    return m_small_file_id_isValid;
}

QString OAIChatPhoto::getSmallFileUniqueId() const {
    return m_small_file_unique_id;
}
void OAIChatPhoto::setSmallFileUniqueId(const QString &small_file_unique_id) {
    m_small_file_unique_id = small_file_unique_id;
    m_small_file_unique_id_isSet = true;
}

bool OAIChatPhoto::is_small_file_unique_id_Set() const{
    return m_small_file_unique_id_isSet;
}

bool OAIChatPhoto::is_small_file_unique_id_Valid() const{
    return m_small_file_unique_id_isValid;
}

bool OAIChatPhoto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_big_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_big_file_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_file_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChatPhoto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_big_file_id_isValid && m_big_file_unique_id_isValid && m_small_file_id_isValid && m_small_file_unique_id_isValid && true;
}

} // namespace OpenAPI
