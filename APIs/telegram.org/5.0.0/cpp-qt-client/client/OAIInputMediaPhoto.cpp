/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputMediaPhoto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputMediaPhoto::OAIInputMediaPhoto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputMediaPhoto::OAIInputMediaPhoto() {
    this->initializeModel();
}

OAIInputMediaPhoto::~OAIInputMediaPhoto() {}

void OAIInputMediaPhoto::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_caption_entities_isSet = false;
    m_caption_entities_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_parse_mode_isSet = false;
    m_parse_mode_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIInputMediaPhoto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputMediaPhoto::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_caption_entities_isValid = ::OpenAPI::fromJsonValue(m_caption_entities, json[QString("caption_entities")]);
    m_caption_entities_isSet = !json[QString("caption_entities")].isNull() && m_caption_entities_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_parse_mode_isValid = ::OpenAPI::fromJsonValue(m_parse_mode, json[QString("parse_mode")]);
    m_parse_mode_isSet = !json[QString("parse_mode")].isNull() && m_parse_mode_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIInputMediaPhoto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputMediaPhoto::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_caption_entities.size() > 0) {
        obj.insert(QString("caption_entities"), ::OpenAPI::toJsonValue(m_caption_entities));
    }
    if (m_media_isSet) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_parse_mode_isSet) {
        obj.insert(QString("parse_mode"), ::OpenAPI::toJsonValue(m_parse_mode));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIInputMediaPhoto::getCaption() const {
    return m_caption;
}
void OAIInputMediaPhoto::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIInputMediaPhoto::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIInputMediaPhoto::is_caption_Valid() const{
    return m_caption_isValid;
}

QList<OAIMessageEntity> OAIInputMediaPhoto::getCaptionEntities() const {
    return m_caption_entities;
}
void OAIInputMediaPhoto::setCaptionEntities(const QList<OAIMessageEntity> &caption_entities) {
    m_caption_entities = caption_entities;
    m_caption_entities_isSet = true;
}

bool OAIInputMediaPhoto::is_caption_entities_Set() const{
    return m_caption_entities_isSet;
}

bool OAIInputMediaPhoto::is_caption_entities_Valid() const{
    return m_caption_entities_isValid;
}

QString OAIInputMediaPhoto::getMedia() const {
    return m_media;
}
void OAIInputMediaPhoto::setMedia(const QString &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIInputMediaPhoto::is_media_Set() const{
    return m_media_isSet;
}

bool OAIInputMediaPhoto::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIInputMediaPhoto::getParseMode() const {
    return m_parse_mode;
}
void OAIInputMediaPhoto::setParseMode(const QString &parse_mode) {
    m_parse_mode = parse_mode;
    m_parse_mode_isSet = true;
}

bool OAIInputMediaPhoto::is_parse_mode_Set() const{
    return m_parse_mode_isSet;
}

bool OAIInputMediaPhoto::is_parse_mode_Valid() const{
    return m_parse_mode_isValid;
}

QString OAIInputMediaPhoto::getType() const {
    return m_type;
}
void OAIInputMediaPhoto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInputMediaPhoto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInputMediaPhoto::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIInputMediaPhoto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parse_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputMediaPhoto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_media_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
