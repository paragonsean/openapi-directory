/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaskPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaskPosition::OAIMaskPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaskPosition::OAIMaskPosition() {
    this->initializeModel();
}

OAIMaskPosition::~OAIMaskPosition() {}

void OAIMaskPosition::initializeModel() {

    m_point_isSet = false;
    m_point_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_x_shift_isSet = false;
    m_x_shift_isValid = false;

    m_y_shift_isSet = false;
    m_y_shift_isValid = false;
}

void OAIMaskPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaskPosition::fromJsonObject(QJsonObject json) {

    m_point_isValid = ::OpenAPI::fromJsonValue(m_point, json[QString("point")]);
    m_point_isSet = !json[QString("point")].isNull() && m_point_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;

    m_x_shift_isValid = ::OpenAPI::fromJsonValue(m_x_shift, json[QString("x_shift")]);
    m_x_shift_isSet = !json[QString("x_shift")].isNull() && m_x_shift_isValid;

    m_y_shift_isValid = ::OpenAPI::fromJsonValue(m_y_shift, json[QString("y_shift")]);
    m_y_shift_isSet = !json[QString("y_shift")].isNull() && m_y_shift_isValid;
}

QString OAIMaskPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaskPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_point_isSet) {
        obj.insert(QString("point"), ::OpenAPI::toJsonValue(m_point));
    }
    if (m_scale_isSet) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_x_shift_isSet) {
        obj.insert(QString("x_shift"), ::OpenAPI::toJsonValue(m_x_shift));
    }
    if (m_y_shift_isSet) {
        obj.insert(QString("y_shift"), ::OpenAPI::toJsonValue(m_y_shift));
    }
    return obj;
}

QString OAIMaskPosition::getPoint() const {
    return m_point;
}
void OAIMaskPosition::setPoint(const QString &point) {
    m_point = point;
    m_point_isSet = true;
}

bool OAIMaskPosition::is_point_Set() const{
    return m_point_isSet;
}

bool OAIMaskPosition::is_point_Valid() const{
    return m_point_isValid;
}

double OAIMaskPosition::getScale() const {
    return m_scale;
}
void OAIMaskPosition::setScale(const double &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAIMaskPosition::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAIMaskPosition::is_scale_Valid() const{
    return m_scale_isValid;
}

double OAIMaskPosition::getXShift() const {
    return m_x_shift;
}
void OAIMaskPosition::setXShift(const double &x_shift) {
    m_x_shift = x_shift;
    m_x_shift_isSet = true;
}

bool OAIMaskPosition::is_x_shift_Set() const{
    return m_x_shift_isSet;
}

bool OAIMaskPosition::is_x_shift_Valid() const{
    return m_x_shift_isValid;
}

double OAIMaskPosition::getYShift() const {
    return m_y_shift;
}
void OAIMaskPosition::setYShift(const double &y_shift) {
    m_y_shift = y_shift;
    m_y_shift_isSet = true;
}

bool OAIMaskPosition::is_y_shift_Set() const{
    return m_y_shift_isSet;
}

bool OAIMaskPosition::is_y_shift_Valid() const{
    return m_y_shift_isValid;
}

bool OAIMaskPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_shift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_shift_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaskPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_point_isValid && m_scale_isValid && m_x_shift_isValid && m_y_shift_isValid && true;
}

} // namespace OpenAPI
