/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInlineQuery.h
 *
 * This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
 */

#ifndef OAIInlineQuery_H
#define OAIInlineQuery_H

#include <QJsonObject>

#include "OAILocation.h"
#include "OAIUser.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser;
class OAILocation;

class OAIInlineQuery : public OAIObject {
public:
    OAIInlineQuery();
    OAIInlineQuery(QString json);
    ~OAIInlineQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUser getFrom() const;
    void setFrom(const OAIUser &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAILocation getLocation() const;
    void setLocation(const OAILocation &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getOffset() const;
    void setOffset(const QString &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QString getQuery() const;
    void setQuery(const QString &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUser m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAILocation m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QString m_query;
    bool m_query_isSet;
    bool m_query_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInlineQuery)

#endif // OAIInlineQuery_H
