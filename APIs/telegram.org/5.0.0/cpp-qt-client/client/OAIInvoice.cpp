/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoice::OAIInvoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoice::OAIInvoice() {
    this->initializeModel();
}

OAIInvoice::~OAIInvoice() {}

void OAIInvoice::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_start_parameter_isSet = false;
    m_start_parameter_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;
}

void OAIInvoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoice::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_start_parameter_isValid = ::OpenAPI::fromJsonValue(m_start_parameter, json[QString("start_parameter")]);
    m_start_parameter_isSet = !json[QString("start_parameter")].isNull() && m_start_parameter_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("total_amount")]);
    m_total_amount_isSet = !json[QString("total_amount")].isNull() && m_total_amount_isValid;
}

QString OAIInvoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoice::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_start_parameter_isSet) {
        obj.insert(QString("start_parameter"), ::OpenAPI::toJsonValue(m_start_parameter));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("total_amount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    return obj;
}

QString OAIInvoice::getCurrency() const {
    return m_currency;
}
void OAIInvoice::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIInvoice::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIInvoice::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIInvoice::getDescription() const {
    return m_description;
}
void OAIInvoice::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInvoice::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInvoice::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIInvoice::getStartParameter() const {
    return m_start_parameter;
}
void OAIInvoice::setStartParameter(const QString &start_parameter) {
    m_start_parameter = start_parameter;
    m_start_parameter_isSet = true;
}

bool OAIInvoice::is_start_parameter_Set() const{
    return m_start_parameter_isSet;
}

bool OAIInvoice::is_start_parameter_Valid() const{
    return m_start_parameter_isValid;
}

QString OAIInvoice::getTitle() const {
    return m_title;
}
void OAIInvoice::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIInvoice::is_title_Set() const{
    return m_title_isSet;
}

bool OAIInvoice::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIInvoice::getTotalAmount() const {
    return m_total_amount;
}
void OAIInvoice::setTotalAmount(const qint32 &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIInvoice::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIInvoice::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

bool OAIInvoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_description_isValid && m_start_parameter_isValid && m_title_isValid && m_total_amount_isValid && true;
}

} // namespace OpenAPI
