/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreCheckoutQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreCheckoutQuery::OAIPreCheckoutQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreCheckoutQuery::OAIPreCheckoutQuery() {
    this->initializeModel();
}

OAIPreCheckoutQuery::~OAIPreCheckoutQuery() {}

void OAIPreCheckoutQuery::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_payload_isSet = false;
    m_invoice_payload_isValid = false;

    m_order_info_isSet = false;
    m_order_info_isValid = false;

    m_shipping_option_id_isSet = false;
    m_shipping_option_id_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;
}

void OAIPreCheckoutQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreCheckoutQuery::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invoice_payload_isValid = ::OpenAPI::fromJsonValue(m_invoice_payload, json[QString("invoice_payload")]);
    m_invoice_payload_isSet = !json[QString("invoice_payload")].isNull() && m_invoice_payload_isValid;

    m_order_info_isValid = ::OpenAPI::fromJsonValue(m_order_info, json[QString("order_info")]);
    m_order_info_isSet = !json[QString("order_info")].isNull() && m_order_info_isValid;

    m_shipping_option_id_isValid = ::OpenAPI::fromJsonValue(m_shipping_option_id, json[QString("shipping_option_id")]);
    m_shipping_option_id_isSet = !json[QString("shipping_option_id")].isNull() && m_shipping_option_id_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("total_amount")]);
    m_total_amount_isSet = !json[QString("total_amount")].isNull() && m_total_amount_isValid;
}

QString OAIPreCheckoutQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreCheckoutQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice_payload_isSet) {
        obj.insert(QString("invoice_payload"), ::OpenAPI::toJsonValue(m_invoice_payload));
    }
    if (m_order_info.isSet()) {
        obj.insert(QString("order_info"), ::OpenAPI::toJsonValue(m_order_info));
    }
    if (m_shipping_option_id_isSet) {
        obj.insert(QString("shipping_option_id"), ::OpenAPI::toJsonValue(m_shipping_option_id));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("total_amount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    return obj;
}

QString OAIPreCheckoutQuery::getCurrency() const {
    return m_currency;
}
void OAIPreCheckoutQuery::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPreCheckoutQuery::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPreCheckoutQuery::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIUser OAIPreCheckoutQuery::getFrom() const {
    return m_from;
}
void OAIPreCheckoutQuery::setFrom(const OAIUser &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIPreCheckoutQuery::is_from_Set() const{
    return m_from_isSet;
}

bool OAIPreCheckoutQuery::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIPreCheckoutQuery::getId() const {
    return m_id;
}
void OAIPreCheckoutQuery::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPreCheckoutQuery::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPreCheckoutQuery::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPreCheckoutQuery::getInvoicePayload() const {
    return m_invoice_payload;
}
void OAIPreCheckoutQuery::setInvoicePayload(const QString &invoice_payload) {
    m_invoice_payload = invoice_payload;
    m_invoice_payload_isSet = true;
}

bool OAIPreCheckoutQuery::is_invoice_payload_Set() const{
    return m_invoice_payload_isSet;
}

bool OAIPreCheckoutQuery::is_invoice_payload_Valid() const{
    return m_invoice_payload_isValid;
}

OAIOrderInfo OAIPreCheckoutQuery::getOrderInfo() const {
    return m_order_info;
}
void OAIPreCheckoutQuery::setOrderInfo(const OAIOrderInfo &order_info) {
    m_order_info = order_info;
    m_order_info_isSet = true;
}

bool OAIPreCheckoutQuery::is_order_info_Set() const{
    return m_order_info_isSet;
}

bool OAIPreCheckoutQuery::is_order_info_Valid() const{
    return m_order_info_isValid;
}

QString OAIPreCheckoutQuery::getShippingOptionId() const {
    return m_shipping_option_id;
}
void OAIPreCheckoutQuery::setShippingOptionId(const QString &shipping_option_id) {
    m_shipping_option_id = shipping_option_id;
    m_shipping_option_id_isSet = true;
}

bool OAIPreCheckoutQuery::is_shipping_option_id_Set() const{
    return m_shipping_option_id_isSet;
}

bool OAIPreCheckoutQuery::is_shipping_option_id_Valid() const{
    return m_shipping_option_id_isValid;
}

qint32 OAIPreCheckoutQuery::getTotalAmount() const {
    return m_total_amount;
}
void OAIPreCheckoutQuery::setTotalAmount(const qint32 &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIPreCheckoutQuery::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIPreCheckoutQuery::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

bool OAIPreCheckoutQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreCheckoutQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_from_isValid && m_id_isValid && m_invoice_payload_isValid && m_total_amount_isValid && true;
}

} // namespace OpenAPI
