/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputMessageContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputMessageContent::OAIInputMessageContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputMessageContent::OAIInputMessageContent() {
    this->initializeModel();
}

OAIInputMessageContent::~OAIInputMessageContent() {}

void OAIInputMessageContent::initializeModel() {

    m_disable_web_page_preview_isSet = false;
    m_disable_web_page_preview_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_message_text_isSet = false;
    m_message_text_isValid = false;

    m_parse_mode_isSet = false;
    m_parse_mode_isValid = false;

    m_heading_isSet = false;
    m_heading_isValid = false;

    m_horizontal_accuracy_isSet = false;
    m_horizontal_accuracy_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_live_period_isSet = false;
    m_live_period_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_proximity_alert_radius_isSet = false;
    m_proximity_alert_radius_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_foursquare_id_isSet = false;
    m_foursquare_id_isValid = false;

    m_foursquare_type_isSet = false;
    m_foursquare_type_isValid = false;

    m_google_place_id_isSet = false;
    m_google_place_id_isValid = false;

    m_google_place_type_isSet = false;
    m_google_place_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_vcard_isSet = false;
    m_vcard_isValid = false;
}

void OAIInputMessageContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputMessageContent::fromJsonObject(QJsonObject json) {

    m_disable_web_page_preview_isValid = ::OpenAPI::fromJsonValue(m_disable_web_page_preview, json[QString("disable_web_page_preview")]);
    m_disable_web_page_preview_isSet = !json[QString("disable_web_page_preview")].isNull() && m_disable_web_page_preview_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_message_text_isValid = ::OpenAPI::fromJsonValue(m_message_text, json[QString("message_text")]);
    m_message_text_isSet = !json[QString("message_text")].isNull() && m_message_text_isValid;

    m_parse_mode_isValid = ::OpenAPI::fromJsonValue(m_parse_mode, json[QString("parse_mode")]);
    m_parse_mode_isSet = !json[QString("parse_mode")].isNull() && m_parse_mode_isValid;

    m_heading_isValid = ::OpenAPI::fromJsonValue(m_heading, json[QString("heading")]);
    m_heading_isSet = !json[QString("heading")].isNull() && m_heading_isValid;

    m_horizontal_accuracy_isValid = ::OpenAPI::fromJsonValue(m_horizontal_accuracy, json[QString("horizontal_accuracy")]);
    m_horizontal_accuracy_isSet = !json[QString("horizontal_accuracy")].isNull() && m_horizontal_accuracy_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_live_period_isValid = ::OpenAPI::fromJsonValue(m_live_period, json[QString("live_period")]);
    m_live_period_isSet = !json[QString("live_period")].isNull() && m_live_period_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_proximity_alert_radius_isValid = ::OpenAPI::fromJsonValue(m_proximity_alert_radius, json[QString("proximity_alert_radius")]);
    m_proximity_alert_radius_isSet = !json[QString("proximity_alert_radius")].isNull() && m_proximity_alert_radius_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_foursquare_id_isValid = ::OpenAPI::fromJsonValue(m_foursquare_id, json[QString("foursquare_id")]);
    m_foursquare_id_isSet = !json[QString("foursquare_id")].isNull() && m_foursquare_id_isValid;

    m_foursquare_type_isValid = ::OpenAPI::fromJsonValue(m_foursquare_type, json[QString("foursquare_type")]);
    m_foursquare_type_isSet = !json[QString("foursquare_type")].isNull() && m_foursquare_type_isValid;

    m_google_place_id_isValid = ::OpenAPI::fromJsonValue(m_google_place_id, json[QString("google_place_id")]);
    m_google_place_id_isSet = !json[QString("google_place_id")].isNull() && m_google_place_id_isValid;

    m_google_place_type_isValid = ::OpenAPI::fromJsonValue(m_google_place_type, json[QString("google_place_type")]);
    m_google_place_type_isSet = !json[QString("google_place_type")].isNull() && m_google_place_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_vcard_isValid = ::OpenAPI::fromJsonValue(m_vcard, json[QString("vcard")]);
    m_vcard_isSet = !json[QString("vcard")].isNull() && m_vcard_isValid;
}

QString OAIInputMessageContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputMessageContent::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_web_page_preview_isSet) {
        obj.insert(QString("disable_web_page_preview"), ::OpenAPI::toJsonValue(m_disable_web_page_preview));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_message_text_isSet) {
        obj.insert(QString("message_text"), ::OpenAPI::toJsonValue(m_message_text));
    }
    if (m_parse_mode_isSet) {
        obj.insert(QString("parse_mode"), ::OpenAPI::toJsonValue(m_parse_mode));
    }
    if (m_heading_isSet) {
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(m_heading));
    }
    if (m_horizontal_accuracy_isSet) {
        obj.insert(QString("horizontal_accuracy"), ::OpenAPI::toJsonValue(m_horizontal_accuracy));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_live_period_isSet) {
        obj.insert(QString("live_period"), ::OpenAPI::toJsonValue(m_live_period));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_proximity_alert_radius_isSet) {
        obj.insert(QString("proximity_alert_radius"), ::OpenAPI::toJsonValue(m_proximity_alert_radius));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_foursquare_id_isSet) {
        obj.insert(QString("foursquare_id"), ::OpenAPI::toJsonValue(m_foursquare_id));
    }
    if (m_foursquare_type_isSet) {
        obj.insert(QString("foursquare_type"), ::OpenAPI::toJsonValue(m_foursquare_type));
    }
    if (m_google_place_id_isSet) {
        obj.insert(QString("google_place_id"), ::OpenAPI::toJsonValue(m_google_place_id));
    }
    if (m_google_place_type_isSet) {
        obj.insert(QString("google_place_type"), ::OpenAPI::toJsonValue(m_google_place_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_vcard_isSet) {
        obj.insert(QString("vcard"), ::OpenAPI::toJsonValue(m_vcard));
    }
    return obj;
}

bool OAIInputMessageContent::isDisableWebPagePreview() const {
    return m_disable_web_page_preview;
}
void OAIInputMessageContent::setDisableWebPagePreview(const bool &disable_web_page_preview) {
    m_disable_web_page_preview = disable_web_page_preview;
    m_disable_web_page_preview_isSet = true;
}

bool OAIInputMessageContent::is_disable_web_page_preview_Set() const{
    return m_disable_web_page_preview_isSet;
}

bool OAIInputMessageContent::is_disable_web_page_preview_Valid() const{
    return m_disable_web_page_preview_isValid;
}

QList<OAIMessageEntity> OAIInputMessageContent::getEntities() const {
    return m_entities;
}
void OAIInputMessageContent::setEntities(const QList<OAIMessageEntity> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIInputMessageContent::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIInputMessageContent::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAIInputMessageContent::getMessageText() const {
    return m_message_text;
}
void OAIInputMessageContent::setMessageText(const QString &message_text) {
    m_message_text = message_text;
    m_message_text_isSet = true;
}

bool OAIInputMessageContent::is_message_text_Set() const{
    return m_message_text_isSet;
}

bool OAIInputMessageContent::is_message_text_Valid() const{
    return m_message_text_isValid;
}

QString OAIInputMessageContent::getParseMode() const {
    return m_parse_mode;
}
void OAIInputMessageContent::setParseMode(const QString &parse_mode) {
    m_parse_mode = parse_mode;
    m_parse_mode_isSet = true;
}

bool OAIInputMessageContent::is_parse_mode_Set() const{
    return m_parse_mode_isSet;
}

bool OAIInputMessageContent::is_parse_mode_Valid() const{
    return m_parse_mode_isValid;
}

qint32 OAIInputMessageContent::getHeading() const {
    return m_heading;
}
void OAIInputMessageContent::setHeading(const qint32 &heading) {
    m_heading = heading;
    m_heading_isSet = true;
}

bool OAIInputMessageContent::is_heading_Set() const{
    return m_heading_isSet;
}

bool OAIInputMessageContent::is_heading_Valid() const{
    return m_heading_isValid;
}

double OAIInputMessageContent::getHorizontalAccuracy() const {
    return m_horizontal_accuracy;
}
void OAIInputMessageContent::setHorizontalAccuracy(const double &horizontal_accuracy) {
    m_horizontal_accuracy = horizontal_accuracy;
    m_horizontal_accuracy_isSet = true;
}

bool OAIInputMessageContent::is_horizontal_accuracy_Set() const{
    return m_horizontal_accuracy_isSet;
}

bool OAIInputMessageContent::is_horizontal_accuracy_Valid() const{
    return m_horizontal_accuracy_isValid;
}

double OAIInputMessageContent::getLatitude() const {
    return m_latitude;
}
void OAIInputMessageContent::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIInputMessageContent::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIInputMessageContent::is_latitude_Valid() const{
    return m_latitude_isValid;
}

qint32 OAIInputMessageContent::getLivePeriod() const {
    return m_live_period;
}
void OAIInputMessageContent::setLivePeriod(const qint32 &live_period) {
    m_live_period = live_period;
    m_live_period_isSet = true;
}

bool OAIInputMessageContent::is_live_period_Set() const{
    return m_live_period_isSet;
}

bool OAIInputMessageContent::is_live_period_Valid() const{
    return m_live_period_isValid;
}

double OAIInputMessageContent::getLongitude() const {
    return m_longitude;
}
void OAIInputMessageContent::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIInputMessageContent::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIInputMessageContent::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint32 OAIInputMessageContent::getProximityAlertRadius() const {
    return m_proximity_alert_radius;
}
void OAIInputMessageContent::setProximityAlertRadius(const qint32 &proximity_alert_radius) {
    m_proximity_alert_radius = proximity_alert_radius;
    m_proximity_alert_radius_isSet = true;
}

bool OAIInputMessageContent::is_proximity_alert_radius_Set() const{
    return m_proximity_alert_radius_isSet;
}

bool OAIInputMessageContent::is_proximity_alert_radius_Valid() const{
    return m_proximity_alert_radius_isValid;
}

QString OAIInputMessageContent::getAddress() const {
    return m_address;
}
void OAIInputMessageContent::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIInputMessageContent::is_address_Set() const{
    return m_address_isSet;
}

bool OAIInputMessageContent::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIInputMessageContent::getFoursquareId() const {
    return m_foursquare_id;
}
void OAIInputMessageContent::setFoursquareId(const QString &foursquare_id) {
    m_foursquare_id = foursquare_id;
    m_foursquare_id_isSet = true;
}

bool OAIInputMessageContent::is_foursquare_id_Set() const{
    return m_foursquare_id_isSet;
}

bool OAIInputMessageContent::is_foursquare_id_Valid() const{
    return m_foursquare_id_isValid;
}

QString OAIInputMessageContent::getFoursquareType() const {
    return m_foursquare_type;
}
void OAIInputMessageContent::setFoursquareType(const QString &foursquare_type) {
    m_foursquare_type = foursquare_type;
    m_foursquare_type_isSet = true;
}

bool OAIInputMessageContent::is_foursquare_type_Set() const{
    return m_foursquare_type_isSet;
}

bool OAIInputMessageContent::is_foursquare_type_Valid() const{
    return m_foursquare_type_isValid;
}

QString OAIInputMessageContent::getGooglePlaceId() const {
    return m_google_place_id;
}
void OAIInputMessageContent::setGooglePlaceId(const QString &google_place_id) {
    m_google_place_id = google_place_id;
    m_google_place_id_isSet = true;
}

bool OAIInputMessageContent::is_google_place_id_Set() const{
    return m_google_place_id_isSet;
}

bool OAIInputMessageContent::is_google_place_id_Valid() const{
    return m_google_place_id_isValid;
}

QString OAIInputMessageContent::getGooglePlaceType() const {
    return m_google_place_type;
}
void OAIInputMessageContent::setGooglePlaceType(const QString &google_place_type) {
    m_google_place_type = google_place_type;
    m_google_place_type_isSet = true;
}

bool OAIInputMessageContent::is_google_place_type_Set() const{
    return m_google_place_type_isSet;
}

bool OAIInputMessageContent::is_google_place_type_Valid() const{
    return m_google_place_type_isValid;
}

QString OAIInputMessageContent::getTitle() const {
    return m_title;
}
void OAIInputMessageContent::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIInputMessageContent::is_title_Set() const{
    return m_title_isSet;
}

bool OAIInputMessageContent::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIInputMessageContent::getFirstName() const {
    return m_first_name;
}
void OAIInputMessageContent::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIInputMessageContent::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIInputMessageContent::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIInputMessageContent::getLastName() const {
    return m_last_name;
}
void OAIInputMessageContent::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIInputMessageContent::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIInputMessageContent::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIInputMessageContent::getPhoneNumber() const {
    return m_phone_number;
}
void OAIInputMessageContent::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIInputMessageContent::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIInputMessageContent::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIInputMessageContent::getVcard() const {
    return m_vcard;
}
void OAIInputMessageContent::setVcard(const QString &vcard) {
    m_vcard = vcard;
    m_vcard_isSet = true;
}

bool OAIInputMessageContent::is_vcard_Set() const{
    return m_vcard_isSet;
}

bool OAIInputMessageContent::is_vcard_Valid() const{
    return m_vcard_isValid;
}

bool OAIInputMessageContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_web_page_preview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parse_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proximity_alert_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foursquare_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foursquare_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_place_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcard_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputMessageContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_text_isValid && m_latitude_isValid && m_longitude_isValid && m_address_isValid && m_title_isValid && m_first_name_isValid && m_phone_number_isValid && true;
}

} // namespace OpenAPI
