/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameHighScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameHighScore::OAIGameHighScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameHighScore::OAIGameHighScore() {
    this->initializeModel();
}

OAIGameHighScore::~OAIGameHighScore() {}

void OAIGameHighScore::initializeModel() {

    m_position_isSet = false;
    m_position_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIGameHighScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameHighScore::fromJsonObject(QJsonObject json) {

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIGameHighScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameHighScore::asJsonObject() const {
    QJsonObject obj;
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

qint32 OAIGameHighScore::getPosition() const {
    return m_position;
}
void OAIGameHighScore::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIGameHighScore::is_position_Set() const{
    return m_position_isSet;
}

bool OAIGameHighScore::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIGameHighScore::getScore() const {
    return m_score;
}
void OAIGameHighScore::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIGameHighScore::is_score_Set() const{
    return m_score_isSet;
}

bool OAIGameHighScore::is_score_Valid() const{
    return m_score_isValid;
}

OAIUser OAIGameHighScore::getUser() const {
    return m_user;
}
void OAIGameHighScore::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGameHighScore::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGameHighScore::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIGameHighScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameHighScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_position_isValid && m_score_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
