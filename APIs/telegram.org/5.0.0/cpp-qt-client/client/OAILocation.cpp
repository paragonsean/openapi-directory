/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_heading_isSet = false;
    m_heading_isValid = false;

    m_horizontal_accuracy_isSet = false;
    m_horizontal_accuracy_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_live_period_isSet = false;
    m_live_period_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_proximity_alert_radius_isSet = false;
    m_proximity_alert_radius_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_heading_isValid = ::OpenAPI::fromJsonValue(m_heading, json[QString("heading")]);
    m_heading_isSet = !json[QString("heading")].isNull() && m_heading_isValid;

    m_horizontal_accuracy_isValid = ::OpenAPI::fromJsonValue(m_horizontal_accuracy, json[QString("horizontal_accuracy")]);
    m_horizontal_accuracy_isSet = !json[QString("horizontal_accuracy")].isNull() && m_horizontal_accuracy_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_live_period_isValid = ::OpenAPI::fromJsonValue(m_live_period, json[QString("live_period")]);
    m_live_period_isSet = !json[QString("live_period")].isNull() && m_live_period_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_proximity_alert_radius_isValid = ::OpenAPI::fromJsonValue(m_proximity_alert_radius, json[QString("proximity_alert_radius")]);
    m_proximity_alert_radius_isSet = !json[QString("proximity_alert_radius")].isNull() && m_proximity_alert_radius_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_heading_isSet) {
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(m_heading));
    }
    if (m_horizontal_accuracy_isSet) {
        obj.insert(QString("horizontal_accuracy"), ::OpenAPI::toJsonValue(m_horizontal_accuracy));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_live_period_isSet) {
        obj.insert(QString("live_period"), ::OpenAPI::toJsonValue(m_live_period));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_proximity_alert_radius_isSet) {
        obj.insert(QString("proximity_alert_radius"), ::OpenAPI::toJsonValue(m_proximity_alert_radius));
    }
    return obj;
}

qint32 OAILocation::getHeading() const {
    return m_heading;
}
void OAILocation::setHeading(const qint32 &heading) {
    m_heading = heading;
    m_heading_isSet = true;
}

bool OAILocation::is_heading_Set() const{
    return m_heading_isSet;
}

bool OAILocation::is_heading_Valid() const{
    return m_heading_isValid;
}

double OAILocation::getHorizontalAccuracy() const {
    return m_horizontal_accuracy;
}
void OAILocation::setHorizontalAccuracy(const double &horizontal_accuracy) {
    m_horizontal_accuracy = horizontal_accuracy;
    m_horizontal_accuracy_isSet = true;
}

bool OAILocation::is_horizontal_accuracy_Set() const{
    return m_horizontal_accuracy_isSet;
}

bool OAILocation::is_horizontal_accuracy_Valid() const{
    return m_horizontal_accuracy_isValid;
}

double OAILocation::getLatitude() const {
    return m_latitude;
}
void OAILocation::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAILocation::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAILocation::is_latitude_Valid() const{
    return m_latitude_isValid;
}

qint32 OAILocation::getLivePeriod() const {
    return m_live_period;
}
void OAILocation::setLivePeriod(const qint32 &live_period) {
    m_live_period = live_period;
    m_live_period_isSet = true;
}

bool OAILocation::is_live_period_Set() const{
    return m_live_period_isSet;
}

bool OAILocation::is_live_period_Valid() const{
    return m_live_period_isValid;
}

double OAILocation::getLongitude() const {
    return m_longitude;
}
void OAILocation::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAILocation::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAILocation::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint32 OAILocation::getProximityAlertRadius() const {
    return m_proximity_alert_radius;
}
void OAILocation::setProximityAlertRadius(const qint32 &proximity_alert_radius) {
    m_proximity_alert_radius = proximity_alert_radius;
    m_proximity_alert_radius_isSet = true;
}

bool OAILocation::is_proximity_alert_radius_Set() const{
    return m_proximity_alert_radius_isSet;
}

bool OAILocation::is_proximity_alert_radius_Valid() const{
    return m_proximity_alert_radius_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proximity_alert_radius_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_latitude_isValid && m_longitude_isValid && true;
}

} // namespace OpenAPI
