/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPassportElementErrorFiles.h
 *
 * Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
 */

#ifndef OAIPassportElementErrorFiles_H
#define OAIPassportElementErrorFiles_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPassportElementErrorFiles : public OAIObject {
public:
    OAIPassportElementErrorFiles();
    OAIPassportElementErrorFiles(QString json);
    ~OAIPassportElementErrorFiles() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getFileHashes() const;
    void setFileHashes(const QList<QString> &file_hashes);
    bool is_file_hashes_Set() const;
    bool is_file_hashes_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_file_hashes;
    bool m_file_hashes_isSet;
    bool m_file_hashes_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPassportElementErrorFiles)

#endif // OAIPassportElementErrorFiles_H
