/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProximityAlertTriggered.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProximityAlertTriggered::OAIProximityAlertTriggered(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProximityAlertTriggered::OAIProximityAlertTriggered() {
    this->initializeModel();
}

OAIProximityAlertTriggered::~OAIProximityAlertTriggered() {}

void OAIProximityAlertTriggered::initializeModel() {

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_traveler_isSet = false;
    m_traveler_isValid = false;

    m_watcher_isSet = false;
    m_watcher_isValid = false;
}

void OAIProximityAlertTriggered::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProximityAlertTriggered::fromJsonObject(QJsonObject json) {

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_traveler_isValid = ::OpenAPI::fromJsonValue(m_traveler, json[QString("traveler")]);
    m_traveler_isSet = !json[QString("traveler")].isNull() && m_traveler_isValid;

    m_watcher_isValid = ::OpenAPI::fromJsonValue(m_watcher, json[QString("watcher")]);
    m_watcher_isSet = !json[QString("watcher")].isNull() && m_watcher_isValid;
}

QString OAIProximityAlertTriggered::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProximityAlertTriggered::asJsonObject() const {
    QJsonObject obj;
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_traveler.isSet()) {
        obj.insert(QString("traveler"), ::OpenAPI::toJsonValue(m_traveler));
    }
    if (m_watcher.isSet()) {
        obj.insert(QString("watcher"), ::OpenAPI::toJsonValue(m_watcher));
    }
    return obj;
}

qint32 OAIProximityAlertTriggered::getDistance() const {
    return m_distance;
}
void OAIProximityAlertTriggered::setDistance(const qint32 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIProximityAlertTriggered::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIProximityAlertTriggered::is_distance_Valid() const{
    return m_distance_isValid;
}

OAIUser OAIProximityAlertTriggered::getTraveler() const {
    return m_traveler;
}
void OAIProximityAlertTriggered::setTraveler(const OAIUser &traveler) {
    m_traveler = traveler;
    m_traveler_isSet = true;
}

bool OAIProximityAlertTriggered::is_traveler_Set() const{
    return m_traveler_isSet;
}

bool OAIProximityAlertTriggered::is_traveler_Valid() const{
    return m_traveler_isValid;
}

OAIUser OAIProximityAlertTriggered::getWatcher() const {
    return m_watcher;
}
void OAIProximityAlertTriggered::setWatcher(const OAIUser &watcher) {
    m_watcher = watcher;
    m_watcher_isSet = true;
}

bool OAIProximityAlertTriggered::is_watcher_Set() const{
    return m_watcher_isSet;
}

bool OAIProximityAlertTriggered::is_watcher_Valid() const{
    return m_watcher_isValid;
}

bool OAIProximityAlertTriggered::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traveler.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watcher.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProximityAlertTriggered::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_distance_isValid && m_traveler_isValid && m_watcher_isValid && true;
}

} // namespace OpenAPI
