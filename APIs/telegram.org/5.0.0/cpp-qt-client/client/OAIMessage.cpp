/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_animation_isSet = false;
    m_animation_isValid = false;

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_author_signature_isSet = false;
    m_author_signature_isValid = false;

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_caption_entities_isSet = false;
    m_caption_entities_isValid = false;

    m_channel_chat_created_isSet = false;
    m_channel_chat_created_isValid = false;

    m_chat_isSet = false;
    m_chat_isValid = false;

    m_connected_website_isSet = false;
    m_connected_website_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_delete_chat_photo_isSet = false;
    m_delete_chat_photo_isValid = false;

    m_dice_isSet = false;
    m_dice_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_edit_date_isSet = false;
    m_edit_date_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_forward_date_isSet = false;
    m_forward_date_isValid = false;

    m_forward_from_isSet = false;
    m_forward_from_isValid = false;

    m_forward_from_chat_isSet = false;
    m_forward_from_chat_isValid = false;

    m_forward_from_message_id_isSet = false;
    m_forward_from_message_id_isValid = false;

    m_forward_sender_name_isSet = false;
    m_forward_sender_name_isValid = false;

    m_forward_signature_isSet = false;
    m_forward_signature_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_game_isSet = false;
    m_game_isValid = false;

    m_group_chat_created_isSet = false;
    m_group_chat_created_isValid = false;

    m_invoice_isSet = false;
    m_invoice_isValid = false;

    m_left_chat_member_isSet = false;
    m_left_chat_member_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_media_group_id_isSet = false;
    m_media_group_id_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_migrate_from_chat_id_isSet = false;
    m_migrate_from_chat_id_isValid = false;

    m_migrate_to_chat_id_isSet = false;
    m_migrate_to_chat_id_isValid = false;

    m_new_chat_members_isSet = false;
    m_new_chat_members_isValid = false;

    m_new_chat_photo_isSet = false;
    m_new_chat_photo_isValid = false;

    m_new_chat_title_isSet = false;
    m_new_chat_title_isValid = false;

    m_passport_data_isSet = false;
    m_passport_data_isValid = false;

    m_photo_isSet = false;
    m_photo_isValid = false;

    m_pinned_message_isSet = false;
    m_pinned_message_isValid = false;

    m_poll_isSet = false;
    m_poll_isValid = false;

    m_proximity_alert_triggered_isSet = false;
    m_proximity_alert_triggered_isValid = false;

    m_reply_markup_isSet = false;
    m_reply_markup_isValid = false;

    m_reply_to_message_isSet = false;
    m_reply_to_message_isValid = false;

    m_sender_chat_isSet = false;
    m_sender_chat_isValid = false;

    m_sticker_isSet = false;
    m_sticker_isValid = false;

    m_successful_payment_isSet = false;
    m_successful_payment_isValid = false;

    m_supergroup_chat_created_isSet = false;
    m_supergroup_chat_created_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_via_bot_isSet = false;
    m_via_bot_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;

    m_video_note_isSet = false;
    m_video_note_isValid = false;

    m_voice_isSet = false;
    m_voice_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_animation_isValid = ::OpenAPI::fromJsonValue(m_animation, json[QString("animation")]);
    m_animation_isSet = !json[QString("animation")].isNull() && m_animation_isValid;

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("audio")]);
    m_audio_isSet = !json[QString("audio")].isNull() && m_audio_isValid;

    m_author_signature_isValid = ::OpenAPI::fromJsonValue(m_author_signature, json[QString("author_signature")]);
    m_author_signature_isSet = !json[QString("author_signature")].isNull() && m_author_signature_isValid;

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_caption_entities_isValid = ::OpenAPI::fromJsonValue(m_caption_entities, json[QString("caption_entities")]);
    m_caption_entities_isSet = !json[QString("caption_entities")].isNull() && m_caption_entities_isValid;

    m_channel_chat_created_isValid = ::OpenAPI::fromJsonValue(m_channel_chat_created, json[QString("channel_chat_created")]);
    m_channel_chat_created_isSet = !json[QString("channel_chat_created")].isNull() && m_channel_chat_created_isValid;

    m_chat_isValid = ::OpenAPI::fromJsonValue(m_chat, json[QString("chat")]);
    m_chat_isSet = !json[QString("chat")].isNull() && m_chat_isValid;

    m_connected_website_isValid = ::OpenAPI::fromJsonValue(m_connected_website, json[QString("connected_website")]);
    m_connected_website_isSet = !json[QString("connected_website")].isNull() && m_connected_website_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_delete_chat_photo_isValid = ::OpenAPI::fromJsonValue(m_delete_chat_photo, json[QString("delete_chat_photo")]);
    m_delete_chat_photo_isSet = !json[QString("delete_chat_photo")].isNull() && m_delete_chat_photo_isValid;

    m_dice_isValid = ::OpenAPI::fromJsonValue(m_dice, json[QString("dice")]);
    m_dice_isSet = !json[QString("dice")].isNull() && m_dice_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_edit_date_isValid = ::OpenAPI::fromJsonValue(m_edit_date, json[QString("edit_date")]);
    m_edit_date_isSet = !json[QString("edit_date")].isNull() && m_edit_date_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_forward_date_isValid = ::OpenAPI::fromJsonValue(m_forward_date, json[QString("forward_date")]);
    m_forward_date_isSet = !json[QString("forward_date")].isNull() && m_forward_date_isValid;

    m_forward_from_isValid = ::OpenAPI::fromJsonValue(m_forward_from, json[QString("forward_from")]);
    m_forward_from_isSet = !json[QString("forward_from")].isNull() && m_forward_from_isValid;

    m_forward_from_chat_isValid = ::OpenAPI::fromJsonValue(m_forward_from_chat, json[QString("forward_from_chat")]);
    m_forward_from_chat_isSet = !json[QString("forward_from_chat")].isNull() && m_forward_from_chat_isValid;

    m_forward_from_message_id_isValid = ::OpenAPI::fromJsonValue(m_forward_from_message_id, json[QString("forward_from_message_id")]);
    m_forward_from_message_id_isSet = !json[QString("forward_from_message_id")].isNull() && m_forward_from_message_id_isValid;

    m_forward_sender_name_isValid = ::OpenAPI::fromJsonValue(m_forward_sender_name, json[QString("forward_sender_name")]);
    m_forward_sender_name_isSet = !json[QString("forward_sender_name")].isNull() && m_forward_sender_name_isValid;

    m_forward_signature_isValid = ::OpenAPI::fromJsonValue(m_forward_signature, json[QString("forward_signature")]);
    m_forward_signature_isSet = !json[QString("forward_signature")].isNull() && m_forward_signature_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_game_isValid = ::OpenAPI::fromJsonValue(m_game, json[QString("game")]);
    m_game_isSet = !json[QString("game")].isNull() && m_game_isValid;

    m_group_chat_created_isValid = ::OpenAPI::fromJsonValue(m_group_chat_created, json[QString("group_chat_created")]);
    m_group_chat_created_isSet = !json[QString("group_chat_created")].isNull() && m_group_chat_created_isValid;

    m_invoice_isValid = ::OpenAPI::fromJsonValue(m_invoice, json[QString("invoice")]);
    m_invoice_isSet = !json[QString("invoice")].isNull() && m_invoice_isValid;

    m_left_chat_member_isValid = ::OpenAPI::fromJsonValue(m_left_chat_member, json[QString("left_chat_member")]);
    m_left_chat_member_isSet = !json[QString("left_chat_member")].isNull() && m_left_chat_member_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_media_group_id_isValid = ::OpenAPI::fromJsonValue(m_media_group_id, json[QString("media_group_id")]);
    m_media_group_id_isSet = !json[QString("media_group_id")].isNull() && m_media_group_id_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_migrate_from_chat_id_isValid = ::OpenAPI::fromJsonValue(m_migrate_from_chat_id, json[QString("migrate_from_chat_id")]);
    m_migrate_from_chat_id_isSet = !json[QString("migrate_from_chat_id")].isNull() && m_migrate_from_chat_id_isValid;

    m_migrate_to_chat_id_isValid = ::OpenAPI::fromJsonValue(m_migrate_to_chat_id, json[QString("migrate_to_chat_id")]);
    m_migrate_to_chat_id_isSet = !json[QString("migrate_to_chat_id")].isNull() && m_migrate_to_chat_id_isValid;

    m_new_chat_members_isValid = ::OpenAPI::fromJsonValue(m_new_chat_members, json[QString("new_chat_members")]);
    m_new_chat_members_isSet = !json[QString("new_chat_members")].isNull() && m_new_chat_members_isValid;

    m_new_chat_photo_isValid = ::OpenAPI::fromJsonValue(m_new_chat_photo, json[QString("new_chat_photo")]);
    m_new_chat_photo_isSet = !json[QString("new_chat_photo")].isNull() && m_new_chat_photo_isValid;

    m_new_chat_title_isValid = ::OpenAPI::fromJsonValue(m_new_chat_title, json[QString("new_chat_title")]);
    m_new_chat_title_isSet = !json[QString("new_chat_title")].isNull() && m_new_chat_title_isValid;

    m_passport_data_isValid = ::OpenAPI::fromJsonValue(m_passport_data, json[QString("passport_data")]);
    m_passport_data_isSet = !json[QString("passport_data")].isNull() && m_passport_data_isValid;

    m_photo_isValid = ::OpenAPI::fromJsonValue(m_photo, json[QString("photo")]);
    m_photo_isSet = !json[QString("photo")].isNull() && m_photo_isValid;

    m_pinned_message_isValid = ::OpenAPI::fromJsonValue(m_pinned_message, json[QString("pinned_message")]);
    m_pinned_message_isSet = !json[QString("pinned_message")].isNull() && m_pinned_message_isValid;

    m_poll_isValid = ::OpenAPI::fromJsonValue(m_poll, json[QString("poll")]);
    m_poll_isSet = !json[QString("poll")].isNull() && m_poll_isValid;

    m_proximity_alert_triggered_isValid = ::OpenAPI::fromJsonValue(m_proximity_alert_triggered, json[QString("proximity_alert_triggered")]);
    m_proximity_alert_triggered_isSet = !json[QString("proximity_alert_triggered")].isNull() && m_proximity_alert_triggered_isValid;

    m_reply_markup_isValid = ::OpenAPI::fromJsonValue(m_reply_markup, json[QString("reply_markup")]);
    m_reply_markup_isSet = !json[QString("reply_markup")].isNull() && m_reply_markup_isValid;

    m_reply_to_message_isValid = ::OpenAPI::fromJsonValue(m_reply_to_message, json[QString("reply_to_message")]);
    m_reply_to_message_isSet = !json[QString("reply_to_message")].isNull() && m_reply_to_message_isValid;

    m_sender_chat_isValid = ::OpenAPI::fromJsonValue(m_sender_chat, json[QString("sender_chat")]);
    m_sender_chat_isSet = !json[QString("sender_chat")].isNull() && m_sender_chat_isValid;

    m_sticker_isValid = ::OpenAPI::fromJsonValue(m_sticker, json[QString("sticker")]);
    m_sticker_isSet = !json[QString("sticker")].isNull() && m_sticker_isValid;

    m_successful_payment_isValid = ::OpenAPI::fromJsonValue(m_successful_payment, json[QString("successful_payment")]);
    m_successful_payment_isSet = !json[QString("successful_payment")].isNull() && m_successful_payment_isValid;

    m_supergroup_chat_created_isValid = ::OpenAPI::fromJsonValue(m_supergroup_chat_created, json[QString("supergroup_chat_created")]);
    m_supergroup_chat_created_isSet = !json[QString("supergroup_chat_created")].isNull() && m_supergroup_chat_created_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;

    m_via_bot_isValid = ::OpenAPI::fromJsonValue(m_via_bot, json[QString("via_bot")]);
    m_via_bot_isSet = !json[QString("via_bot")].isNull() && m_via_bot_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;

    m_video_note_isValid = ::OpenAPI::fromJsonValue(m_video_note, json[QString("video_note")]);
    m_video_note_isSet = !json[QString("video_note")].isNull() && m_video_note_isValid;

    m_voice_isValid = ::OpenAPI::fromJsonValue(m_voice, json[QString("voice")]);
    m_voice_isSet = !json[QString("voice")].isNull() && m_voice_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_animation.isSet()) {
        obj.insert(QString("animation"), ::OpenAPI::toJsonValue(m_animation));
    }
    if (m_audio.isSet()) {
        obj.insert(QString("audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_author_signature_isSet) {
        obj.insert(QString("author_signature"), ::OpenAPI::toJsonValue(m_author_signature));
    }
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_caption_entities.size() > 0) {
        obj.insert(QString("caption_entities"), ::OpenAPI::toJsonValue(m_caption_entities));
    }
    if (m_channel_chat_created_isSet) {
        obj.insert(QString("channel_chat_created"), ::OpenAPI::toJsonValue(m_channel_chat_created));
    }
    if (m_chat.isSet()) {
        obj.insert(QString("chat"), ::OpenAPI::toJsonValue(m_chat));
    }
    if (m_connected_website_isSet) {
        obj.insert(QString("connected_website"), ::OpenAPI::toJsonValue(m_connected_website));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_delete_chat_photo_isSet) {
        obj.insert(QString("delete_chat_photo"), ::OpenAPI::toJsonValue(m_delete_chat_photo));
    }
    if (m_dice.isSet()) {
        obj.insert(QString("dice"), ::OpenAPI::toJsonValue(m_dice));
    }
    if (m_document.isSet()) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_edit_date_isSet) {
        obj.insert(QString("edit_date"), ::OpenAPI::toJsonValue(m_edit_date));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_forward_date_isSet) {
        obj.insert(QString("forward_date"), ::OpenAPI::toJsonValue(m_forward_date));
    }
    if (m_forward_from.isSet()) {
        obj.insert(QString("forward_from"), ::OpenAPI::toJsonValue(m_forward_from));
    }
    if (m_forward_from_chat.isSet()) {
        obj.insert(QString("forward_from_chat"), ::OpenAPI::toJsonValue(m_forward_from_chat));
    }
    if (m_forward_from_message_id_isSet) {
        obj.insert(QString("forward_from_message_id"), ::OpenAPI::toJsonValue(m_forward_from_message_id));
    }
    if (m_forward_sender_name_isSet) {
        obj.insert(QString("forward_sender_name"), ::OpenAPI::toJsonValue(m_forward_sender_name));
    }
    if (m_forward_signature_isSet) {
        obj.insert(QString("forward_signature"), ::OpenAPI::toJsonValue(m_forward_signature));
    }
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_game.isSet()) {
        obj.insert(QString("game"), ::OpenAPI::toJsonValue(m_game));
    }
    if (m_group_chat_created_isSet) {
        obj.insert(QString("group_chat_created"), ::OpenAPI::toJsonValue(m_group_chat_created));
    }
    if (m_invoice.isSet()) {
        obj.insert(QString("invoice"), ::OpenAPI::toJsonValue(m_invoice));
    }
    if (m_left_chat_member.isSet()) {
        obj.insert(QString("left_chat_member"), ::OpenAPI::toJsonValue(m_left_chat_member));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_media_group_id_isSet) {
        obj.insert(QString("media_group_id"), ::OpenAPI::toJsonValue(m_media_group_id));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_migrate_from_chat_id_isSet) {
        obj.insert(QString("migrate_from_chat_id"), ::OpenAPI::toJsonValue(m_migrate_from_chat_id));
    }
    if (m_migrate_to_chat_id_isSet) {
        obj.insert(QString("migrate_to_chat_id"), ::OpenAPI::toJsonValue(m_migrate_to_chat_id));
    }
    if (m_new_chat_members.size() > 0) {
        obj.insert(QString("new_chat_members"), ::OpenAPI::toJsonValue(m_new_chat_members));
    }
    if (m_new_chat_photo.size() > 0) {
        obj.insert(QString("new_chat_photo"), ::OpenAPI::toJsonValue(m_new_chat_photo));
    }
    if (m_new_chat_title_isSet) {
        obj.insert(QString("new_chat_title"), ::OpenAPI::toJsonValue(m_new_chat_title));
    }
    if (m_passport_data.isSet()) {
        obj.insert(QString("passport_data"), ::OpenAPI::toJsonValue(m_passport_data));
    }
    if (m_photo.size() > 0) {
        obj.insert(QString("photo"), ::OpenAPI::toJsonValue(m_photo));
    }
    if (m_pinned_message.isSet()) {
        obj.insert(QString("pinned_message"), ::OpenAPI::toJsonValue(m_pinned_message));
    }
    if (m_poll.isSet()) {
        obj.insert(QString("poll"), ::OpenAPI::toJsonValue(m_poll));
    }
    if (m_proximity_alert_triggered.isSet()) {
        obj.insert(QString("proximity_alert_triggered"), ::OpenAPI::toJsonValue(m_proximity_alert_triggered));
    }
    if (m_reply_markup.isSet()) {
        obj.insert(QString("reply_markup"), ::OpenAPI::toJsonValue(m_reply_markup));
    }
    if (m_reply_to_message.isSet()) {
        obj.insert(QString("reply_to_message"), ::OpenAPI::toJsonValue(m_reply_to_message));
    }
    if (m_sender_chat.isSet()) {
        obj.insert(QString("sender_chat"), ::OpenAPI::toJsonValue(m_sender_chat));
    }
    if (m_sticker.isSet()) {
        obj.insert(QString("sticker"), ::OpenAPI::toJsonValue(m_sticker));
    }
    if (m_successful_payment.isSet()) {
        obj.insert(QString("successful_payment"), ::OpenAPI::toJsonValue(m_successful_payment));
    }
    if (m_supergroup_chat_created_isSet) {
        obj.insert(QString("supergroup_chat_created"), ::OpenAPI::toJsonValue(m_supergroup_chat_created));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_venue.isSet()) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_via_bot.isSet()) {
        obj.insert(QString("via_bot"), ::OpenAPI::toJsonValue(m_via_bot));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    if (m_video_note.isSet()) {
        obj.insert(QString("video_note"), ::OpenAPI::toJsonValue(m_video_note));
    }
    if (m_voice.isSet()) {
        obj.insert(QString("voice"), ::OpenAPI::toJsonValue(m_voice));
    }
    return obj;
}

OAIAnimation OAIMessage::getAnimation() const {
    return m_animation;
}
void OAIMessage::setAnimation(const OAIAnimation &animation) {
    m_animation = animation;
    m_animation_isSet = true;
}

bool OAIMessage::is_animation_Set() const{
    return m_animation_isSet;
}

bool OAIMessage::is_animation_Valid() const{
    return m_animation_isValid;
}

OAIAudio OAIMessage::getAudio() const {
    return m_audio;
}
void OAIMessage::setAudio(const OAIAudio &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAIMessage::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAIMessage::is_audio_Valid() const{
    return m_audio_isValid;
}

QString OAIMessage::getAuthorSignature() const {
    return m_author_signature;
}
void OAIMessage::setAuthorSignature(const QString &author_signature) {
    m_author_signature = author_signature;
    m_author_signature_isSet = true;
}

bool OAIMessage::is_author_signature_Set() const{
    return m_author_signature_isSet;
}

bool OAIMessage::is_author_signature_Valid() const{
    return m_author_signature_isValid;
}

QString OAIMessage::getCaption() const {
    return m_caption;
}
void OAIMessage::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIMessage::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIMessage::is_caption_Valid() const{
    return m_caption_isValid;
}

QList<OAIMessageEntity> OAIMessage::getCaptionEntities() const {
    return m_caption_entities;
}
void OAIMessage::setCaptionEntities(const QList<OAIMessageEntity> &caption_entities) {
    m_caption_entities = caption_entities;
    m_caption_entities_isSet = true;
}

bool OAIMessage::is_caption_entities_Set() const{
    return m_caption_entities_isSet;
}

bool OAIMessage::is_caption_entities_Valid() const{
    return m_caption_entities_isValid;
}

bool OAIMessage::isChannelChatCreated() const {
    return m_channel_chat_created;
}
void OAIMessage::setChannelChatCreated(const bool &channel_chat_created) {
    m_channel_chat_created = channel_chat_created;
    m_channel_chat_created_isSet = true;
}

bool OAIMessage::is_channel_chat_created_Set() const{
    return m_channel_chat_created_isSet;
}

bool OAIMessage::is_channel_chat_created_Valid() const{
    return m_channel_chat_created_isValid;
}

OAIChat OAIMessage::getChat() const {
    return m_chat;
}
void OAIMessage::setChat(const OAIChat &chat) {
    m_chat = chat;
    m_chat_isSet = true;
}

bool OAIMessage::is_chat_Set() const{
    return m_chat_isSet;
}

bool OAIMessage::is_chat_Valid() const{
    return m_chat_isValid;
}

QString OAIMessage::getConnectedWebsite() const {
    return m_connected_website;
}
void OAIMessage::setConnectedWebsite(const QString &connected_website) {
    m_connected_website = connected_website;
    m_connected_website_isSet = true;
}

bool OAIMessage::is_connected_website_Set() const{
    return m_connected_website_isSet;
}

bool OAIMessage::is_connected_website_Valid() const{
    return m_connected_website_isValid;
}

OAIContact OAIMessage::getContact() const {
    return m_contact;
}
void OAIMessage::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIMessage::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIMessage::is_contact_Valid() const{
    return m_contact_isValid;
}

qint32 OAIMessage::getDate() const {
    return m_date;
}
void OAIMessage::setDate(const qint32 &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIMessage::is_date_Set() const{
    return m_date_isSet;
}

bool OAIMessage::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIMessage::isDeleteChatPhoto() const {
    return m_delete_chat_photo;
}
void OAIMessage::setDeleteChatPhoto(const bool &delete_chat_photo) {
    m_delete_chat_photo = delete_chat_photo;
    m_delete_chat_photo_isSet = true;
}

bool OAIMessage::is_delete_chat_photo_Set() const{
    return m_delete_chat_photo_isSet;
}

bool OAIMessage::is_delete_chat_photo_Valid() const{
    return m_delete_chat_photo_isValid;
}

OAIDice OAIMessage::getDice() const {
    return m_dice;
}
void OAIMessage::setDice(const OAIDice &dice) {
    m_dice = dice;
    m_dice_isSet = true;
}

bool OAIMessage::is_dice_Set() const{
    return m_dice_isSet;
}

bool OAIMessage::is_dice_Valid() const{
    return m_dice_isValid;
}

OAIDocument OAIMessage::getDocument() const {
    return m_document;
}
void OAIMessage::setDocument(const OAIDocument &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIMessage::is_document_Set() const{
    return m_document_isSet;
}

bool OAIMessage::is_document_Valid() const{
    return m_document_isValid;
}

qint32 OAIMessage::getEditDate() const {
    return m_edit_date;
}
void OAIMessage::setEditDate(const qint32 &edit_date) {
    m_edit_date = edit_date;
    m_edit_date_isSet = true;
}

bool OAIMessage::is_edit_date_Set() const{
    return m_edit_date_isSet;
}

bool OAIMessage::is_edit_date_Valid() const{
    return m_edit_date_isValid;
}

QList<OAIMessageEntity> OAIMessage::getEntities() const {
    return m_entities;
}
void OAIMessage::setEntities(const QList<OAIMessageEntity> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIMessage::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIMessage::is_entities_Valid() const{
    return m_entities_isValid;
}

qint32 OAIMessage::getForwardDate() const {
    return m_forward_date;
}
void OAIMessage::setForwardDate(const qint32 &forward_date) {
    m_forward_date = forward_date;
    m_forward_date_isSet = true;
}

bool OAIMessage::is_forward_date_Set() const{
    return m_forward_date_isSet;
}

bool OAIMessage::is_forward_date_Valid() const{
    return m_forward_date_isValid;
}

OAIUser OAIMessage::getForwardFrom() const {
    return m_forward_from;
}
void OAIMessage::setForwardFrom(const OAIUser &forward_from) {
    m_forward_from = forward_from;
    m_forward_from_isSet = true;
}

bool OAIMessage::is_forward_from_Set() const{
    return m_forward_from_isSet;
}

bool OAIMessage::is_forward_from_Valid() const{
    return m_forward_from_isValid;
}

OAIChat OAIMessage::getForwardFromChat() const {
    return m_forward_from_chat;
}
void OAIMessage::setForwardFromChat(const OAIChat &forward_from_chat) {
    m_forward_from_chat = forward_from_chat;
    m_forward_from_chat_isSet = true;
}

bool OAIMessage::is_forward_from_chat_Set() const{
    return m_forward_from_chat_isSet;
}

bool OAIMessage::is_forward_from_chat_Valid() const{
    return m_forward_from_chat_isValid;
}

qint32 OAIMessage::getForwardFromMessageId() const {
    return m_forward_from_message_id;
}
void OAIMessage::setForwardFromMessageId(const qint32 &forward_from_message_id) {
    m_forward_from_message_id = forward_from_message_id;
    m_forward_from_message_id_isSet = true;
}

bool OAIMessage::is_forward_from_message_id_Set() const{
    return m_forward_from_message_id_isSet;
}

bool OAIMessage::is_forward_from_message_id_Valid() const{
    return m_forward_from_message_id_isValid;
}

QString OAIMessage::getForwardSenderName() const {
    return m_forward_sender_name;
}
void OAIMessage::setForwardSenderName(const QString &forward_sender_name) {
    m_forward_sender_name = forward_sender_name;
    m_forward_sender_name_isSet = true;
}

bool OAIMessage::is_forward_sender_name_Set() const{
    return m_forward_sender_name_isSet;
}

bool OAIMessage::is_forward_sender_name_Valid() const{
    return m_forward_sender_name_isValid;
}

QString OAIMessage::getForwardSignature() const {
    return m_forward_signature;
}
void OAIMessage::setForwardSignature(const QString &forward_signature) {
    m_forward_signature = forward_signature;
    m_forward_signature_isSet = true;
}

bool OAIMessage::is_forward_signature_Set() const{
    return m_forward_signature_isSet;
}

bool OAIMessage::is_forward_signature_Valid() const{
    return m_forward_signature_isValid;
}

OAIUser OAIMessage::getFrom() const {
    return m_from;
}
void OAIMessage::setFrom(const OAIUser &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIMessage::is_from_Set() const{
    return m_from_isSet;
}

bool OAIMessage::is_from_Valid() const{
    return m_from_isValid;
}

OAIGame OAIMessage::getGame() const {
    return m_game;
}
void OAIMessage::setGame(const OAIGame &game) {
    m_game = game;
    m_game_isSet = true;
}

bool OAIMessage::is_game_Set() const{
    return m_game_isSet;
}

bool OAIMessage::is_game_Valid() const{
    return m_game_isValid;
}

bool OAIMessage::isGroupChatCreated() const {
    return m_group_chat_created;
}
void OAIMessage::setGroupChatCreated(const bool &group_chat_created) {
    m_group_chat_created = group_chat_created;
    m_group_chat_created_isSet = true;
}

bool OAIMessage::is_group_chat_created_Set() const{
    return m_group_chat_created_isSet;
}

bool OAIMessage::is_group_chat_created_Valid() const{
    return m_group_chat_created_isValid;
}

OAIInvoice OAIMessage::getInvoice() const {
    return m_invoice;
}
void OAIMessage::setInvoice(const OAIInvoice &invoice) {
    m_invoice = invoice;
    m_invoice_isSet = true;
}

bool OAIMessage::is_invoice_Set() const{
    return m_invoice_isSet;
}

bool OAIMessage::is_invoice_Valid() const{
    return m_invoice_isValid;
}

OAIUser OAIMessage::getLeftChatMember() const {
    return m_left_chat_member;
}
void OAIMessage::setLeftChatMember(const OAIUser &left_chat_member) {
    m_left_chat_member = left_chat_member;
    m_left_chat_member_isSet = true;
}

bool OAIMessage::is_left_chat_member_Set() const{
    return m_left_chat_member_isSet;
}

bool OAIMessage::is_left_chat_member_Valid() const{
    return m_left_chat_member_isValid;
}

OAILocation OAIMessage::getLocation() const {
    return m_location;
}
void OAIMessage::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMessage::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMessage::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIMessage::getMediaGroupId() const {
    return m_media_group_id;
}
void OAIMessage::setMediaGroupId(const QString &media_group_id) {
    m_media_group_id = media_group_id;
    m_media_group_id_isSet = true;
}

bool OAIMessage::is_media_group_id_Set() const{
    return m_media_group_id_isSet;
}

bool OAIMessage::is_media_group_id_Valid() const{
    return m_media_group_id_isValid;
}

qint32 OAIMessage::getMessageId() const {
    return m_message_id;
}
void OAIMessage::setMessageId(const qint32 &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIMessage::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIMessage::is_message_id_Valid() const{
    return m_message_id_isValid;
}

qint32 OAIMessage::getMigrateFromChatId() const {
    return m_migrate_from_chat_id;
}
void OAIMessage::setMigrateFromChatId(const qint32 &migrate_from_chat_id) {
    m_migrate_from_chat_id = migrate_from_chat_id;
    m_migrate_from_chat_id_isSet = true;
}

bool OAIMessage::is_migrate_from_chat_id_Set() const{
    return m_migrate_from_chat_id_isSet;
}

bool OAIMessage::is_migrate_from_chat_id_Valid() const{
    return m_migrate_from_chat_id_isValid;
}

qint32 OAIMessage::getMigrateToChatId() const {
    return m_migrate_to_chat_id;
}
void OAIMessage::setMigrateToChatId(const qint32 &migrate_to_chat_id) {
    m_migrate_to_chat_id = migrate_to_chat_id;
    m_migrate_to_chat_id_isSet = true;
}

bool OAIMessage::is_migrate_to_chat_id_Set() const{
    return m_migrate_to_chat_id_isSet;
}

bool OAIMessage::is_migrate_to_chat_id_Valid() const{
    return m_migrate_to_chat_id_isValid;
}

QList<OAIUser> OAIMessage::getNewChatMembers() const {
    return m_new_chat_members;
}
void OAIMessage::setNewChatMembers(const QList<OAIUser> &new_chat_members) {
    m_new_chat_members = new_chat_members;
    m_new_chat_members_isSet = true;
}

bool OAIMessage::is_new_chat_members_Set() const{
    return m_new_chat_members_isSet;
}

bool OAIMessage::is_new_chat_members_Valid() const{
    return m_new_chat_members_isValid;
}

QList<OAIPhotoSize> OAIMessage::getNewChatPhoto() const {
    return m_new_chat_photo;
}
void OAIMessage::setNewChatPhoto(const QList<OAIPhotoSize> &new_chat_photo) {
    m_new_chat_photo = new_chat_photo;
    m_new_chat_photo_isSet = true;
}

bool OAIMessage::is_new_chat_photo_Set() const{
    return m_new_chat_photo_isSet;
}

bool OAIMessage::is_new_chat_photo_Valid() const{
    return m_new_chat_photo_isValid;
}

QString OAIMessage::getNewChatTitle() const {
    return m_new_chat_title;
}
void OAIMessage::setNewChatTitle(const QString &new_chat_title) {
    m_new_chat_title = new_chat_title;
    m_new_chat_title_isSet = true;
}

bool OAIMessage::is_new_chat_title_Set() const{
    return m_new_chat_title_isSet;
}

bool OAIMessage::is_new_chat_title_Valid() const{
    return m_new_chat_title_isValid;
}

OAIPassportData OAIMessage::getPassportData() const {
    return m_passport_data;
}
void OAIMessage::setPassportData(const OAIPassportData &passport_data) {
    m_passport_data = passport_data;
    m_passport_data_isSet = true;
}

bool OAIMessage::is_passport_data_Set() const{
    return m_passport_data_isSet;
}

bool OAIMessage::is_passport_data_Valid() const{
    return m_passport_data_isValid;
}

QList<OAIPhotoSize> OAIMessage::getPhoto() const {
    return m_photo;
}
void OAIMessage::setPhoto(const QList<OAIPhotoSize> &photo) {
    m_photo = photo;
    m_photo_isSet = true;
}

bool OAIMessage::is_photo_Set() const{
    return m_photo_isSet;
}

bool OAIMessage::is_photo_Valid() const{
    return m_photo_isValid;
}

OAIMessage OAIMessage::getPinnedMessage() const {
    return m_pinned_message;
}
void OAIMessage::setPinnedMessage(const OAIMessage &pinned_message) {
    m_pinned_message = pinned_message;
    m_pinned_message_isSet = true;
}

bool OAIMessage::is_pinned_message_Set() const{
    return m_pinned_message_isSet;
}

bool OAIMessage::is_pinned_message_Valid() const{
    return m_pinned_message_isValid;
}

OAIPoll OAIMessage::getPoll() const {
    return m_poll;
}
void OAIMessage::setPoll(const OAIPoll &poll) {
    m_poll = poll;
    m_poll_isSet = true;
}

bool OAIMessage::is_poll_Set() const{
    return m_poll_isSet;
}

bool OAIMessage::is_poll_Valid() const{
    return m_poll_isValid;
}

OAIProximityAlertTriggered OAIMessage::getProximityAlertTriggered() const {
    return m_proximity_alert_triggered;
}
void OAIMessage::setProximityAlertTriggered(const OAIProximityAlertTriggered &proximity_alert_triggered) {
    m_proximity_alert_triggered = proximity_alert_triggered;
    m_proximity_alert_triggered_isSet = true;
}

bool OAIMessage::is_proximity_alert_triggered_Set() const{
    return m_proximity_alert_triggered_isSet;
}

bool OAIMessage::is_proximity_alert_triggered_Valid() const{
    return m_proximity_alert_triggered_isValid;
}

OAIInlineKeyboardMarkup OAIMessage::getReplyMarkup() const {
    return m_reply_markup;
}
void OAIMessage::setReplyMarkup(const OAIInlineKeyboardMarkup &reply_markup) {
    m_reply_markup = reply_markup;
    m_reply_markup_isSet = true;
}

bool OAIMessage::is_reply_markup_Set() const{
    return m_reply_markup_isSet;
}

bool OAIMessage::is_reply_markup_Valid() const{
    return m_reply_markup_isValid;
}

OAIMessage OAIMessage::getReplyToMessage() const {
    return m_reply_to_message;
}
void OAIMessage::setReplyToMessage(const OAIMessage &reply_to_message) {
    m_reply_to_message = reply_to_message;
    m_reply_to_message_isSet = true;
}

bool OAIMessage::is_reply_to_message_Set() const{
    return m_reply_to_message_isSet;
}

bool OAIMessage::is_reply_to_message_Valid() const{
    return m_reply_to_message_isValid;
}

OAIChat OAIMessage::getSenderChat() const {
    return m_sender_chat;
}
void OAIMessage::setSenderChat(const OAIChat &sender_chat) {
    m_sender_chat = sender_chat;
    m_sender_chat_isSet = true;
}

bool OAIMessage::is_sender_chat_Set() const{
    return m_sender_chat_isSet;
}

bool OAIMessage::is_sender_chat_Valid() const{
    return m_sender_chat_isValid;
}

OAISticker OAIMessage::getSticker() const {
    return m_sticker;
}
void OAIMessage::setSticker(const OAISticker &sticker) {
    m_sticker = sticker;
    m_sticker_isSet = true;
}

bool OAIMessage::is_sticker_Set() const{
    return m_sticker_isSet;
}

bool OAIMessage::is_sticker_Valid() const{
    return m_sticker_isValid;
}

OAISuccessfulPayment OAIMessage::getSuccessfulPayment() const {
    return m_successful_payment;
}
void OAIMessage::setSuccessfulPayment(const OAISuccessfulPayment &successful_payment) {
    m_successful_payment = successful_payment;
    m_successful_payment_isSet = true;
}

bool OAIMessage::is_successful_payment_Set() const{
    return m_successful_payment_isSet;
}

bool OAIMessage::is_successful_payment_Valid() const{
    return m_successful_payment_isValid;
}

bool OAIMessage::isSupergroupChatCreated() const {
    return m_supergroup_chat_created;
}
void OAIMessage::setSupergroupChatCreated(const bool &supergroup_chat_created) {
    m_supergroup_chat_created = supergroup_chat_created;
    m_supergroup_chat_created_isSet = true;
}

bool OAIMessage::is_supergroup_chat_created_Set() const{
    return m_supergroup_chat_created_isSet;
}

bool OAIMessage::is_supergroup_chat_created_Valid() const{
    return m_supergroup_chat_created_isValid;
}

QString OAIMessage::getText() const {
    return m_text;
}
void OAIMessage::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMessage::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMessage::is_text_Valid() const{
    return m_text_isValid;
}

OAIVenue OAIMessage::getVenue() const {
    return m_venue;
}
void OAIMessage::setVenue(const OAIVenue &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIMessage::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIMessage::is_venue_Valid() const{
    return m_venue_isValid;
}

OAIUser OAIMessage::getViaBot() const {
    return m_via_bot;
}
void OAIMessage::setViaBot(const OAIUser &via_bot) {
    m_via_bot = via_bot;
    m_via_bot_isSet = true;
}

bool OAIMessage::is_via_bot_Set() const{
    return m_via_bot_isSet;
}

bool OAIMessage::is_via_bot_Valid() const{
    return m_via_bot_isValid;
}

OAIVideo OAIMessage::getVideo() const {
    return m_video;
}
void OAIMessage::setVideo(const OAIVideo &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIMessage::is_video_Set() const{
    return m_video_isSet;
}

bool OAIMessage::is_video_Valid() const{
    return m_video_isValid;
}

OAIVideoNote OAIMessage::getVideoNote() const {
    return m_video_note;
}
void OAIMessage::setVideoNote(const OAIVideoNote &video_note) {
    m_video_note = video_note;
    m_video_note_isSet = true;
}

bool OAIMessage::is_video_note_Set() const{
    return m_video_note_isSet;
}

bool OAIMessage::is_video_note_Valid() const{
    return m_video_note_isValid;
}

OAIVoice OAIMessage::getVoice() const {
    return m_voice;
}
void OAIMessage::setVoice(const OAIVoice &voice) {
    m_voice = voice;
    m_voice_isSet = true;
}

bool OAIMessage::is_voice_Set() const{
    return m_voice_isSet;
}

bool OAIMessage::is_voice_Valid() const{
    return m_voice_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_animation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_chat_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_chat_photo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_from_chat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_from_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_sender_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_chat_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_chat_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrate_from_chat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrate_to_chat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_chat_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_chat_photo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_chat_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passport_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proximity_alert_triggered.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_markup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_chat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supergroup_chat_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_via_bot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_chat_isValid && m_date_isValid && m_message_id_isValid && true;
}

} // namespace OpenAPI
