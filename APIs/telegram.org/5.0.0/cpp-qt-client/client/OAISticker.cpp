/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISticker.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISticker::OAISticker(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISticker::OAISticker() {
    this->initializeModel();
}

OAISticker::~OAISticker() {}

void OAISticker::initializeModel() {

    m_emoji_isSet = false;
    m_emoji_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_file_unique_id_isSet = false;
    m_file_unique_id_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_is_animated_isSet = false;
    m_is_animated_isValid = false;

    m_mask_position_isSet = false;
    m_mask_position_isValid = false;

    m_set_name_isSet = false;
    m_set_name_isValid = false;

    m_thumb_isSet = false;
    m_thumb_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAISticker::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISticker::fromJsonObject(QJsonObject json) {

    m_emoji_isValid = ::OpenAPI::fromJsonValue(m_emoji, json[QString("emoji")]);
    m_emoji_isSet = !json[QString("emoji")].isNull() && m_emoji_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("file_id")]);
    m_file_id_isSet = !json[QString("file_id")].isNull() && m_file_id_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("file_size")]);
    m_file_size_isSet = !json[QString("file_size")].isNull() && m_file_size_isValid;

    m_file_unique_id_isValid = ::OpenAPI::fromJsonValue(m_file_unique_id, json[QString("file_unique_id")]);
    m_file_unique_id_isSet = !json[QString("file_unique_id")].isNull() && m_file_unique_id_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_is_animated_isValid = ::OpenAPI::fromJsonValue(m_is_animated, json[QString("is_animated")]);
    m_is_animated_isSet = !json[QString("is_animated")].isNull() && m_is_animated_isValid;

    m_mask_position_isValid = ::OpenAPI::fromJsonValue(m_mask_position, json[QString("mask_position")]);
    m_mask_position_isSet = !json[QString("mask_position")].isNull() && m_mask_position_isValid;

    m_set_name_isValid = ::OpenAPI::fromJsonValue(m_set_name, json[QString("set_name")]);
    m_set_name_isSet = !json[QString("set_name")].isNull() && m_set_name_isValid;

    m_thumb_isValid = ::OpenAPI::fromJsonValue(m_thumb, json[QString("thumb")]);
    m_thumb_isSet = !json[QString("thumb")].isNull() && m_thumb_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAISticker::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISticker::asJsonObject() const {
    QJsonObject obj;
    if (m_emoji_isSet) {
        obj.insert(QString("emoji"), ::OpenAPI::toJsonValue(m_emoji));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("file_id"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("file_size"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_file_unique_id_isSet) {
        obj.insert(QString("file_unique_id"), ::OpenAPI::toJsonValue(m_file_unique_id));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_is_animated_isSet) {
        obj.insert(QString("is_animated"), ::OpenAPI::toJsonValue(m_is_animated));
    }
    if (m_mask_position.isSet()) {
        obj.insert(QString("mask_position"), ::OpenAPI::toJsonValue(m_mask_position));
    }
    if (m_set_name_isSet) {
        obj.insert(QString("set_name"), ::OpenAPI::toJsonValue(m_set_name));
    }
    if (m_thumb.isSet()) {
        obj.insert(QString("thumb"), ::OpenAPI::toJsonValue(m_thumb));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAISticker::getEmoji() const {
    return m_emoji;
}
void OAISticker::setEmoji(const QString &emoji) {
    m_emoji = emoji;
    m_emoji_isSet = true;
}

bool OAISticker::is_emoji_Set() const{
    return m_emoji_isSet;
}

bool OAISticker::is_emoji_Valid() const{
    return m_emoji_isValid;
}

QString OAISticker::getFileId() const {
    return m_file_id;
}
void OAISticker::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAISticker::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAISticker::is_file_id_Valid() const{
    return m_file_id_isValid;
}

qint32 OAISticker::getFileSize() const {
    return m_file_size;
}
void OAISticker::setFileSize(const qint32 &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAISticker::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAISticker::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAISticker::getFileUniqueId() const {
    return m_file_unique_id;
}
void OAISticker::setFileUniqueId(const QString &file_unique_id) {
    m_file_unique_id = file_unique_id;
    m_file_unique_id_isSet = true;
}

bool OAISticker::is_file_unique_id_Set() const{
    return m_file_unique_id_isSet;
}

bool OAISticker::is_file_unique_id_Valid() const{
    return m_file_unique_id_isValid;
}

qint32 OAISticker::getHeight() const {
    return m_height;
}
void OAISticker::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAISticker::is_height_Set() const{
    return m_height_isSet;
}

bool OAISticker::is_height_Valid() const{
    return m_height_isValid;
}

bool OAISticker::isIsAnimated() const {
    return m_is_animated;
}
void OAISticker::setIsAnimated(const bool &is_animated) {
    m_is_animated = is_animated;
    m_is_animated_isSet = true;
}

bool OAISticker::is_is_animated_Set() const{
    return m_is_animated_isSet;
}

bool OAISticker::is_is_animated_Valid() const{
    return m_is_animated_isValid;
}

OAIMaskPosition OAISticker::getMaskPosition() const {
    return m_mask_position;
}
void OAISticker::setMaskPosition(const OAIMaskPosition &mask_position) {
    m_mask_position = mask_position;
    m_mask_position_isSet = true;
}

bool OAISticker::is_mask_position_Set() const{
    return m_mask_position_isSet;
}

bool OAISticker::is_mask_position_Valid() const{
    return m_mask_position_isValid;
}

QString OAISticker::getSetName() const {
    return m_set_name;
}
void OAISticker::setSetName(const QString &set_name) {
    m_set_name = set_name;
    m_set_name_isSet = true;
}

bool OAISticker::is_set_name_Set() const{
    return m_set_name_isSet;
}

bool OAISticker::is_set_name_Valid() const{
    return m_set_name_isValid;
}

OAIPhotoSize OAISticker::getThumb() const {
    return m_thumb;
}
void OAISticker::setThumb(const OAIPhotoSize &thumb) {
    m_thumb = thumb;
    m_thumb_isSet = true;
}

bool OAISticker::is_thumb_Set() const{
    return m_thumb_isSet;
}

bool OAISticker::is_thumb_Valid() const{
    return m_thumb_isValid;
}

qint32 OAISticker::getWidth() const {
    return m_width;
}
void OAISticker::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAISticker::is_width_Set() const{
    return m_width_isSet;
}

bool OAISticker::is_width_Valid() const{
    return m_width_isValid;
}

bool OAISticker::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emoji_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_animated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISticker::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_id_isValid && m_file_unique_id_isValid && m_height_isValid && m_is_animated_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
