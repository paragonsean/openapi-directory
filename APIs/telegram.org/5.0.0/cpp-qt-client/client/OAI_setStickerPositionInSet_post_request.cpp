/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_setStickerPositionInSet_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_setStickerPositionInSet_post_request::OAI_setStickerPositionInSet_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_setStickerPositionInSet_post_request::OAI_setStickerPositionInSet_post_request() {
    this->initializeModel();
}

OAI_setStickerPositionInSet_post_request::~OAI_setStickerPositionInSet_post_request() {}

void OAI_setStickerPositionInSet_post_request::initializeModel() {

    m_position_isSet = false;
    m_position_isValid = false;

    m_sticker_isSet = false;
    m_sticker_isValid = false;
}

void OAI_setStickerPositionInSet_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_setStickerPositionInSet_post_request::fromJsonObject(QJsonObject json) {

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_sticker_isValid = ::OpenAPI::fromJsonValue(m_sticker, json[QString("sticker")]);
    m_sticker_isSet = !json[QString("sticker")].isNull() && m_sticker_isValid;
}

QString OAI_setStickerPositionInSet_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_setStickerPositionInSet_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_sticker_isSet) {
        obj.insert(QString("sticker"), ::OpenAPI::toJsonValue(m_sticker));
    }
    return obj;
}

qint32 OAI_setStickerPositionInSet_post_request::getPosition() const {
    return m_position;
}
void OAI_setStickerPositionInSet_post_request::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAI_setStickerPositionInSet_post_request::is_position_Set() const{
    return m_position_isSet;
}

bool OAI_setStickerPositionInSet_post_request::is_position_Valid() const{
    return m_position_isValid;
}

QString OAI_setStickerPositionInSet_post_request::getSticker() const {
    return m_sticker;
}
void OAI_setStickerPositionInSet_post_request::setSticker(const QString &sticker) {
    m_sticker = sticker;
    m_sticker_isSet = true;
}

bool OAI_setStickerPositionInSet_post_request::is_sticker_Set() const{
    return m_sticker_isSet;
}

bool OAI_setStickerPositionInSet_post_request::is_sticker_Valid() const{
    return m_sticker_isValid;
}

bool OAI_setStickerPositionInSet_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_setStickerPositionInSet_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_position_isValid && m_sticker_isValid && true;
}

} // namespace OpenAPI
