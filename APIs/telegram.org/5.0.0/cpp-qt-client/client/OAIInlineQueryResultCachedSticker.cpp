/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInlineQueryResultCachedSticker.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInlineQueryResultCachedSticker::OAIInlineQueryResultCachedSticker(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInlineQueryResultCachedSticker::OAIInlineQueryResultCachedSticker() {
    this->initializeModel();
}

OAIInlineQueryResultCachedSticker::~OAIInlineQueryResultCachedSticker() {}

void OAIInlineQueryResultCachedSticker::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_input_message_content_isSet = false;
    m_input_message_content_isValid = false;

    m_reply_markup_isSet = false;
    m_reply_markup_isValid = false;

    m_sticker_file_id_isSet = false;
    m_sticker_file_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIInlineQueryResultCachedSticker::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInlineQueryResultCachedSticker::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_input_message_content_isValid = ::OpenAPI::fromJsonValue(m_input_message_content, json[QString("input_message_content")]);
    m_input_message_content_isSet = !json[QString("input_message_content")].isNull() && m_input_message_content_isValid;

    m_reply_markup_isValid = ::OpenAPI::fromJsonValue(m_reply_markup, json[QString("reply_markup")]);
    m_reply_markup_isSet = !json[QString("reply_markup")].isNull() && m_reply_markup_isValid;

    m_sticker_file_id_isValid = ::OpenAPI::fromJsonValue(m_sticker_file_id, json[QString("sticker_file_id")]);
    m_sticker_file_id_isSet = !json[QString("sticker_file_id")].isNull() && m_sticker_file_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIInlineQueryResultCachedSticker::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInlineQueryResultCachedSticker::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_input_message_content.isSet()) {
        obj.insert(QString("input_message_content"), ::OpenAPI::toJsonValue(m_input_message_content));
    }
    if (m_reply_markup.isSet()) {
        obj.insert(QString("reply_markup"), ::OpenAPI::toJsonValue(m_reply_markup));
    }
    if (m_sticker_file_id_isSet) {
        obj.insert(QString("sticker_file_id"), ::OpenAPI::toJsonValue(m_sticker_file_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIInlineQueryResultCachedSticker::getId() const {
    return m_id;
}
void OAIInlineQueryResultCachedSticker::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInlineQueryResultCachedSticker::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInlineQueryResultCachedSticker::is_id_Valid() const{
    return m_id_isValid;
}

OAIInputMessageContent OAIInlineQueryResultCachedSticker::getInputMessageContent() const {
    return m_input_message_content;
}
void OAIInlineQueryResultCachedSticker::setInputMessageContent(const OAIInputMessageContent &input_message_content) {
    m_input_message_content = input_message_content;
    m_input_message_content_isSet = true;
}

bool OAIInlineQueryResultCachedSticker::is_input_message_content_Set() const{
    return m_input_message_content_isSet;
}

bool OAIInlineQueryResultCachedSticker::is_input_message_content_Valid() const{
    return m_input_message_content_isValid;
}

OAIInlineKeyboardMarkup OAIInlineQueryResultCachedSticker::getReplyMarkup() const {
    return m_reply_markup;
}
void OAIInlineQueryResultCachedSticker::setReplyMarkup(const OAIInlineKeyboardMarkup &reply_markup) {
    m_reply_markup = reply_markup;
    m_reply_markup_isSet = true;
}

bool OAIInlineQueryResultCachedSticker::is_reply_markup_Set() const{
    return m_reply_markup_isSet;
}

bool OAIInlineQueryResultCachedSticker::is_reply_markup_Valid() const{
    return m_reply_markup_isValid;
}

QString OAIInlineQueryResultCachedSticker::getStickerFileId() const {
    return m_sticker_file_id;
}
void OAIInlineQueryResultCachedSticker::setStickerFileId(const QString &sticker_file_id) {
    m_sticker_file_id = sticker_file_id;
    m_sticker_file_id_isSet = true;
}

bool OAIInlineQueryResultCachedSticker::is_sticker_file_id_Set() const{
    return m_sticker_file_id_isSet;
}

bool OAIInlineQueryResultCachedSticker::is_sticker_file_id_Valid() const{
    return m_sticker_file_id_isValid;
}

QString OAIInlineQueryResultCachedSticker::getType() const {
    return m_type;
}
void OAIInlineQueryResultCachedSticker::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInlineQueryResultCachedSticker::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInlineQueryResultCachedSticker::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIInlineQueryResultCachedSticker::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_message_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_markup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticker_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInlineQueryResultCachedSticker::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_sticker_file_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
