/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPassportElementErrorDataField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPassportElementErrorDataField::OAIPassportElementErrorDataField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPassportElementErrorDataField::OAIPassportElementErrorDataField() {
    this->initializeModel();
}

OAIPassportElementErrorDataField::~OAIPassportElementErrorDataField() {}

void OAIPassportElementErrorDataField::initializeModel() {

    m_data_hash_isSet = false;
    m_data_hash_isValid = false;

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPassportElementErrorDataField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPassportElementErrorDataField::fromJsonObject(QJsonObject json) {

    m_data_hash_isValid = ::OpenAPI::fromJsonValue(m_data_hash, json[QString("data_hash")]);
    m_data_hash_isSet = !json[QString("data_hash")].isNull() && m_data_hash_isValid;

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("field_name")]);
    m_field_name_isSet = !json[QString("field_name")].isNull() && m_field_name_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPassportElementErrorDataField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPassportElementErrorDataField::asJsonObject() const {
    QJsonObject obj;
    if (m_data_hash_isSet) {
        obj.insert(QString("data_hash"), ::OpenAPI::toJsonValue(m_data_hash));
    }
    if (m_field_name_isSet) {
        obj.insert(QString("field_name"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPassportElementErrorDataField::getDataHash() const {
    return m_data_hash;
}
void OAIPassportElementErrorDataField::setDataHash(const QString &data_hash) {
    m_data_hash = data_hash;
    m_data_hash_isSet = true;
}

bool OAIPassportElementErrorDataField::is_data_hash_Set() const{
    return m_data_hash_isSet;
}

bool OAIPassportElementErrorDataField::is_data_hash_Valid() const{
    return m_data_hash_isValid;
}

QString OAIPassportElementErrorDataField::getFieldName() const {
    return m_field_name;
}
void OAIPassportElementErrorDataField::setFieldName(const QString &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAIPassportElementErrorDataField::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAIPassportElementErrorDataField::is_field_name_Valid() const{
    return m_field_name_isValid;
}

QString OAIPassportElementErrorDataField::getMessage() const {
    return m_message;
}
void OAIPassportElementErrorDataField::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPassportElementErrorDataField::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPassportElementErrorDataField::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIPassportElementErrorDataField::getSource() const {
    return m_source;
}
void OAIPassportElementErrorDataField::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPassportElementErrorDataField::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPassportElementErrorDataField::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIPassportElementErrorDataField::getType() const {
    return m_type;
}
void OAIPassportElementErrorDataField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPassportElementErrorDataField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPassportElementErrorDataField::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPassportElementErrorDataField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPassportElementErrorDataField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_hash_isValid && m_field_name_isValid && m_message_isValid && m_source_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
