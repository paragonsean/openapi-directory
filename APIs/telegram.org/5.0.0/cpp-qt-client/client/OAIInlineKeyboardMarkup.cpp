/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInlineKeyboardMarkup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInlineKeyboardMarkup::OAIInlineKeyboardMarkup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInlineKeyboardMarkup::OAIInlineKeyboardMarkup() {
    this->initializeModel();
}

OAIInlineKeyboardMarkup::~OAIInlineKeyboardMarkup() {}

void OAIInlineKeyboardMarkup::initializeModel() {

    m_inline_keyboard_isSet = false;
    m_inline_keyboard_isValid = false;
}

void OAIInlineKeyboardMarkup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInlineKeyboardMarkup::fromJsonObject(QJsonObject json) {

    if(json["inline_keyboard"].isArray()){
        auto arr = json["inline_keyboard"].toArray();
        m_inline_keyboard_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIInlineKeyboardButton> item;
                m_inline_keyboard_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_inline_keyboard_isSet = !jval.isNull() && m_inline_keyboard_isValid;
                m_inline_keyboard.push_back(item);
            }
        }
    }
}

QString OAIInlineKeyboardMarkup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInlineKeyboardMarkup::asJsonObject() const {
    QJsonObject obj;
    if (m_inline_keyboard.size() > 0) {
        
        obj.insert(QString("inline_keyboard"), toJsonValue(m_inline_keyboard));
    }
    return obj;
}

QList<QList<OAIInlineKeyboardButton>> OAIInlineKeyboardMarkup::getInlineKeyboard() const {
    return m_inline_keyboard;
}
void OAIInlineKeyboardMarkup::setInlineKeyboard(const QList<QList<OAIInlineKeyboardButton>> &inline_keyboard) {
    m_inline_keyboard = inline_keyboard;
    m_inline_keyboard_isSet = true;
}

bool OAIInlineKeyboardMarkup::is_inline_keyboard_Set() const{
    return m_inline_keyboard_isSet;
}

bool OAIInlineKeyboardMarkup::is_inline_keyboard_Valid() const{
    return m_inline_keyboard_isValid;
}

bool OAIInlineKeyboardMarkup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inline_keyboard.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInlineKeyboardMarkup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inline_keyboard_isValid && true;
}

} // namespace OpenAPI
