/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInlineKeyboardButton.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInlineKeyboardButton::OAIInlineKeyboardButton(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInlineKeyboardButton::OAIInlineKeyboardButton() {
    this->initializeModel();
}

OAIInlineKeyboardButton::~OAIInlineKeyboardButton() {}

void OAIInlineKeyboardButton::initializeModel() {

    m_callback_data_isSet = false;
    m_callback_data_isValid = false;

    m_callback_game_isSet = false;
    m_callback_game_isValid = false;

    m_login_url_isSet = false;
    m_login_url_isValid = false;

    m_pay_isSet = false;
    m_pay_isValid = false;

    m_switch_inline_query_isSet = false;
    m_switch_inline_query_isValid = false;

    m_switch_inline_query_current_chat_isSet = false;
    m_switch_inline_query_current_chat_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIInlineKeyboardButton::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInlineKeyboardButton::fromJsonObject(QJsonObject json) {

    m_callback_data_isValid = ::OpenAPI::fromJsonValue(m_callback_data, json[QString("callback_data")]);
    m_callback_data_isSet = !json[QString("callback_data")].isNull() && m_callback_data_isValid;

    m_callback_game_isValid = ::OpenAPI::fromJsonValue(m_callback_game, json[QString("callback_game")]);
    m_callback_game_isSet = !json[QString("callback_game")].isNull() && m_callback_game_isValid;

    m_login_url_isValid = ::OpenAPI::fromJsonValue(m_login_url, json[QString("login_url")]);
    m_login_url_isSet = !json[QString("login_url")].isNull() && m_login_url_isValid;

    m_pay_isValid = ::OpenAPI::fromJsonValue(m_pay, json[QString("pay")]);
    m_pay_isSet = !json[QString("pay")].isNull() && m_pay_isValid;

    m_switch_inline_query_isValid = ::OpenAPI::fromJsonValue(m_switch_inline_query, json[QString("switch_inline_query")]);
    m_switch_inline_query_isSet = !json[QString("switch_inline_query")].isNull() && m_switch_inline_query_isValid;

    m_switch_inline_query_current_chat_isValid = ::OpenAPI::fromJsonValue(m_switch_inline_query_current_chat, json[QString("switch_inline_query_current_chat")]);
    m_switch_inline_query_current_chat_isSet = !json[QString("switch_inline_query_current_chat")].isNull() && m_switch_inline_query_current_chat_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIInlineKeyboardButton::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInlineKeyboardButton::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_data_isSet) {
        obj.insert(QString("callback_data"), ::OpenAPI::toJsonValue(m_callback_data));
    }
    if (m_callback_game_isSet) {
        obj.insert(QString("callback_game"), ::OpenAPI::toJsonValue(m_callback_game));
    }
    if (m_login_url.isSet()) {
        obj.insert(QString("login_url"), ::OpenAPI::toJsonValue(m_login_url));
    }
    if (m_pay_isSet) {
        obj.insert(QString("pay"), ::OpenAPI::toJsonValue(m_pay));
    }
    if (m_switch_inline_query_isSet) {
        obj.insert(QString("switch_inline_query"), ::OpenAPI::toJsonValue(m_switch_inline_query));
    }
    if (m_switch_inline_query_current_chat_isSet) {
        obj.insert(QString("switch_inline_query_current_chat"), ::OpenAPI::toJsonValue(m_switch_inline_query_current_chat));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIInlineKeyboardButton::getCallbackData() const {
    return m_callback_data;
}
void OAIInlineKeyboardButton::setCallbackData(const QString &callback_data) {
    m_callback_data = callback_data;
    m_callback_data_isSet = true;
}

bool OAIInlineKeyboardButton::is_callback_data_Set() const{
    return m_callback_data_isSet;
}

bool OAIInlineKeyboardButton::is_callback_data_Valid() const{
    return m_callback_data_isValid;
}

QJsonValue OAIInlineKeyboardButton::getCallbackGame() const {
    return m_callback_game;
}
void OAIInlineKeyboardButton::setCallbackGame(const QJsonValue &callback_game) {
    m_callback_game = callback_game;
    m_callback_game_isSet = true;
}

bool OAIInlineKeyboardButton::is_callback_game_Set() const{
    return m_callback_game_isSet;
}

bool OAIInlineKeyboardButton::is_callback_game_Valid() const{
    return m_callback_game_isValid;
}

OAILoginUrl OAIInlineKeyboardButton::getLoginUrl() const {
    return m_login_url;
}
void OAIInlineKeyboardButton::setLoginUrl(const OAILoginUrl &login_url) {
    m_login_url = login_url;
    m_login_url_isSet = true;
}

bool OAIInlineKeyboardButton::is_login_url_Set() const{
    return m_login_url_isSet;
}

bool OAIInlineKeyboardButton::is_login_url_Valid() const{
    return m_login_url_isValid;
}

bool OAIInlineKeyboardButton::isPay() const {
    return m_pay;
}
void OAIInlineKeyboardButton::setPay(const bool &pay) {
    m_pay = pay;
    m_pay_isSet = true;
}

bool OAIInlineKeyboardButton::is_pay_Set() const{
    return m_pay_isSet;
}

bool OAIInlineKeyboardButton::is_pay_Valid() const{
    return m_pay_isValid;
}

QString OAIInlineKeyboardButton::getSwitchInlineQuery() const {
    return m_switch_inline_query;
}
void OAIInlineKeyboardButton::setSwitchInlineQuery(const QString &switch_inline_query) {
    m_switch_inline_query = switch_inline_query;
    m_switch_inline_query_isSet = true;
}

bool OAIInlineKeyboardButton::is_switch_inline_query_Set() const{
    return m_switch_inline_query_isSet;
}

bool OAIInlineKeyboardButton::is_switch_inline_query_Valid() const{
    return m_switch_inline_query_isValid;
}

QString OAIInlineKeyboardButton::getSwitchInlineQueryCurrentChat() const {
    return m_switch_inline_query_current_chat;
}
void OAIInlineKeyboardButton::setSwitchInlineQueryCurrentChat(const QString &switch_inline_query_current_chat) {
    m_switch_inline_query_current_chat = switch_inline_query_current_chat;
    m_switch_inline_query_current_chat_isSet = true;
}

bool OAIInlineKeyboardButton::is_switch_inline_query_current_chat_Set() const{
    return m_switch_inline_query_current_chat_isSet;
}

bool OAIInlineKeyboardButton::is_switch_inline_query_current_chat_Valid() const{
    return m_switch_inline_query_current_chat_isValid;
}

QString OAIInlineKeyboardButton::getText() const {
    return m_text;
}
void OAIInlineKeyboardButton::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIInlineKeyboardButton::is_text_Set() const{
    return m_text_isSet;
}

bool OAIInlineKeyboardButton::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIInlineKeyboardButton::getUrl() const {
    return m_url;
}
void OAIInlineKeyboardButton::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIInlineKeyboardButton::is_url_Set() const{
    return m_url_isSet;
}

bool OAIInlineKeyboardButton::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIInlineKeyboardButton::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_game_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_inline_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_inline_query_current_chat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInlineKeyboardButton::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && true;
}

} // namespace OpenAPI
