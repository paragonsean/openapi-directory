/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputTextMessageContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputTextMessageContent::OAIInputTextMessageContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputTextMessageContent::OAIInputTextMessageContent() {
    this->initializeModel();
}

OAIInputTextMessageContent::~OAIInputTextMessageContent() {}

void OAIInputTextMessageContent::initializeModel() {

    m_disable_web_page_preview_isSet = false;
    m_disable_web_page_preview_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_message_text_isSet = false;
    m_message_text_isValid = false;

    m_parse_mode_isSet = false;
    m_parse_mode_isValid = false;
}

void OAIInputTextMessageContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputTextMessageContent::fromJsonObject(QJsonObject json) {

    m_disable_web_page_preview_isValid = ::OpenAPI::fromJsonValue(m_disable_web_page_preview, json[QString("disable_web_page_preview")]);
    m_disable_web_page_preview_isSet = !json[QString("disable_web_page_preview")].isNull() && m_disable_web_page_preview_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_message_text_isValid = ::OpenAPI::fromJsonValue(m_message_text, json[QString("message_text")]);
    m_message_text_isSet = !json[QString("message_text")].isNull() && m_message_text_isValid;

    m_parse_mode_isValid = ::OpenAPI::fromJsonValue(m_parse_mode, json[QString("parse_mode")]);
    m_parse_mode_isSet = !json[QString("parse_mode")].isNull() && m_parse_mode_isValid;
}

QString OAIInputTextMessageContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputTextMessageContent::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_web_page_preview_isSet) {
        obj.insert(QString("disable_web_page_preview"), ::OpenAPI::toJsonValue(m_disable_web_page_preview));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_message_text_isSet) {
        obj.insert(QString("message_text"), ::OpenAPI::toJsonValue(m_message_text));
    }
    if (m_parse_mode_isSet) {
        obj.insert(QString("parse_mode"), ::OpenAPI::toJsonValue(m_parse_mode));
    }
    return obj;
}

bool OAIInputTextMessageContent::isDisableWebPagePreview() const {
    return m_disable_web_page_preview;
}
void OAIInputTextMessageContent::setDisableWebPagePreview(const bool &disable_web_page_preview) {
    m_disable_web_page_preview = disable_web_page_preview;
    m_disable_web_page_preview_isSet = true;
}

bool OAIInputTextMessageContent::is_disable_web_page_preview_Set() const{
    return m_disable_web_page_preview_isSet;
}

bool OAIInputTextMessageContent::is_disable_web_page_preview_Valid() const{
    return m_disable_web_page_preview_isValid;
}

QList<OAIMessageEntity> OAIInputTextMessageContent::getEntities() const {
    return m_entities;
}
void OAIInputTextMessageContent::setEntities(const QList<OAIMessageEntity> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIInputTextMessageContent::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIInputTextMessageContent::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAIInputTextMessageContent::getMessageText() const {
    return m_message_text;
}
void OAIInputTextMessageContent::setMessageText(const QString &message_text) {
    m_message_text = message_text;
    m_message_text_isSet = true;
}

bool OAIInputTextMessageContent::is_message_text_Set() const{
    return m_message_text_isSet;
}

bool OAIInputTextMessageContent::is_message_text_Valid() const{
    return m_message_text_isValid;
}

QString OAIInputTextMessageContent::getParseMode() const {
    return m_parse_mode;
}
void OAIInputTextMessageContent::setParseMode(const QString &parse_mode) {
    m_parse_mode = parse_mode;
    m_parse_mode_isSet = true;
}

bool OAIInputTextMessageContent::is_parse_mode_Set() const{
    return m_parse_mode_isSet;
}

bool OAIInputTextMessageContent::is_parse_mode_Valid() const{
    return m_parse_mode_isValid;
}

bool OAIInputTextMessageContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_web_page_preview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parse_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputTextMessageContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_text_isValid && true;
}

} // namespace OpenAPI
