/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPassportElementErrorSelfie.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPassportElementErrorSelfie::OAIPassportElementErrorSelfie(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPassportElementErrorSelfie::OAIPassportElementErrorSelfie() {
    this->initializeModel();
}

OAIPassportElementErrorSelfie::~OAIPassportElementErrorSelfie() {}

void OAIPassportElementErrorSelfie::initializeModel() {

    m_file_hash_isSet = false;
    m_file_hash_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPassportElementErrorSelfie::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPassportElementErrorSelfie::fromJsonObject(QJsonObject json) {

    m_file_hash_isValid = ::OpenAPI::fromJsonValue(m_file_hash, json[QString("file_hash")]);
    m_file_hash_isSet = !json[QString("file_hash")].isNull() && m_file_hash_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPassportElementErrorSelfie::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPassportElementErrorSelfie::asJsonObject() const {
    QJsonObject obj;
    if (m_file_hash_isSet) {
        obj.insert(QString("file_hash"), ::OpenAPI::toJsonValue(m_file_hash));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPassportElementErrorSelfie::getFileHash() const {
    return m_file_hash;
}
void OAIPassportElementErrorSelfie::setFileHash(const QString &file_hash) {
    m_file_hash = file_hash;
    m_file_hash_isSet = true;
}

bool OAIPassportElementErrorSelfie::is_file_hash_Set() const{
    return m_file_hash_isSet;
}

bool OAIPassportElementErrorSelfie::is_file_hash_Valid() const{
    return m_file_hash_isValid;
}

QString OAIPassportElementErrorSelfie::getMessage() const {
    return m_message;
}
void OAIPassportElementErrorSelfie::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPassportElementErrorSelfie::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPassportElementErrorSelfie::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIPassportElementErrorSelfie::getSource() const {
    return m_source;
}
void OAIPassportElementErrorSelfie::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPassportElementErrorSelfie::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPassportElementErrorSelfie::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIPassportElementErrorSelfie::getType() const {
    return m_type;
}
void OAIPassportElementErrorSelfie::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPassportElementErrorSelfie::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPassportElementErrorSelfie::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPassportElementErrorSelfie::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPassportElementErrorSelfie::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_hash_isValid && m_message_isValid && m_source_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
