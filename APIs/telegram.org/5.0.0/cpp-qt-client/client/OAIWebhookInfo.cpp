/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookInfo::OAIWebhookInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookInfo::OAIWebhookInfo() {
    this->initializeModel();
}

OAIWebhookInfo::~OAIWebhookInfo() {}

void OAIWebhookInfo::initializeModel() {

    m_allowed_updates_isSet = false;
    m_allowed_updates_isValid = false;

    m_has_custom_certificate_isSet = false;
    m_has_custom_certificate_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_last_error_date_isSet = false;
    m_last_error_date_isValid = false;

    m_last_error_message_isSet = false;
    m_last_error_message_isValid = false;

    m_max_connections_isSet = false;
    m_max_connections_isValid = false;

    m_pending_update_count_isSet = false;
    m_pending_update_count_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWebhookInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookInfo::fromJsonObject(QJsonObject json) {

    m_allowed_updates_isValid = ::OpenAPI::fromJsonValue(m_allowed_updates, json[QString("allowed_updates")]);
    m_allowed_updates_isSet = !json[QString("allowed_updates")].isNull() && m_allowed_updates_isValid;

    m_has_custom_certificate_isValid = ::OpenAPI::fromJsonValue(m_has_custom_certificate, json[QString("has_custom_certificate")]);
    m_has_custom_certificate_isSet = !json[QString("has_custom_certificate")].isNull() && m_has_custom_certificate_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ip_address")]);
    m_ip_address_isSet = !json[QString("ip_address")].isNull() && m_ip_address_isValid;

    m_last_error_date_isValid = ::OpenAPI::fromJsonValue(m_last_error_date, json[QString("last_error_date")]);
    m_last_error_date_isSet = !json[QString("last_error_date")].isNull() && m_last_error_date_isValid;

    m_last_error_message_isValid = ::OpenAPI::fromJsonValue(m_last_error_message, json[QString("last_error_message")]);
    m_last_error_message_isSet = !json[QString("last_error_message")].isNull() && m_last_error_message_isValid;

    m_max_connections_isValid = ::OpenAPI::fromJsonValue(m_max_connections, json[QString("max_connections")]);
    m_max_connections_isSet = !json[QString("max_connections")].isNull() && m_max_connections_isValid;

    m_pending_update_count_isValid = ::OpenAPI::fromJsonValue(m_pending_update_count, json[QString("pending_update_count")]);
    m_pending_update_count_isSet = !json[QString("pending_update_count")].isNull() && m_pending_update_count_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWebhookInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_updates.size() > 0) {
        obj.insert(QString("allowed_updates"), ::OpenAPI::toJsonValue(m_allowed_updates));
    }
    if (m_has_custom_certificate_isSet) {
        obj.insert(QString("has_custom_certificate"), ::OpenAPI::toJsonValue(m_has_custom_certificate));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ip_address"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_last_error_date_isSet) {
        obj.insert(QString("last_error_date"), ::OpenAPI::toJsonValue(m_last_error_date));
    }
    if (m_last_error_message_isSet) {
        obj.insert(QString("last_error_message"), ::OpenAPI::toJsonValue(m_last_error_message));
    }
    if (m_max_connections_isSet) {
        obj.insert(QString("max_connections"), ::OpenAPI::toJsonValue(m_max_connections));
    }
    if (m_pending_update_count_isSet) {
        obj.insert(QString("pending_update_count"), ::OpenAPI::toJsonValue(m_pending_update_count));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<QString> OAIWebhookInfo::getAllowedUpdates() const {
    return m_allowed_updates;
}
void OAIWebhookInfo::setAllowedUpdates(const QList<QString> &allowed_updates) {
    m_allowed_updates = allowed_updates;
    m_allowed_updates_isSet = true;
}

bool OAIWebhookInfo::is_allowed_updates_Set() const{
    return m_allowed_updates_isSet;
}

bool OAIWebhookInfo::is_allowed_updates_Valid() const{
    return m_allowed_updates_isValid;
}

bool OAIWebhookInfo::isHasCustomCertificate() const {
    return m_has_custom_certificate;
}
void OAIWebhookInfo::setHasCustomCertificate(const bool &has_custom_certificate) {
    m_has_custom_certificate = has_custom_certificate;
    m_has_custom_certificate_isSet = true;
}

bool OAIWebhookInfo::is_has_custom_certificate_Set() const{
    return m_has_custom_certificate_isSet;
}

bool OAIWebhookInfo::is_has_custom_certificate_Valid() const{
    return m_has_custom_certificate_isValid;
}

QString OAIWebhookInfo::getIpAddress() const {
    return m_ip_address;
}
void OAIWebhookInfo::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIWebhookInfo::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIWebhookInfo::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

qint32 OAIWebhookInfo::getLastErrorDate() const {
    return m_last_error_date;
}
void OAIWebhookInfo::setLastErrorDate(const qint32 &last_error_date) {
    m_last_error_date = last_error_date;
    m_last_error_date_isSet = true;
}

bool OAIWebhookInfo::is_last_error_date_Set() const{
    return m_last_error_date_isSet;
}

bool OAIWebhookInfo::is_last_error_date_Valid() const{
    return m_last_error_date_isValid;
}

QString OAIWebhookInfo::getLastErrorMessage() const {
    return m_last_error_message;
}
void OAIWebhookInfo::setLastErrorMessage(const QString &last_error_message) {
    m_last_error_message = last_error_message;
    m_last_error_message_isSet = true;
}

bool OAIWebhookInfo::is_last_error_message_Set() const{
    return m_last_error_message_isSet;
}

bool OAIWebhookInfo::is_last_error_message_Valid() const{
    return m_last_error_message_isValid;
}

qint32 OAIWebhookInfo::getMaxConnections() const {
    return m_max_connections;
}
void OAIWebhookInfo::setMaxConnections(const qint32 &max_connections) {
    m_max_connections = max_connections;
    m_max_connections_isSet = true;
}

bool OAIWebhookInfo::is_max_connections_Set() const{
    return m_max_connections_isSet;
}

bool OAIWebhookInfo::is_max_connections_Valid() const{
    return m_max_connections_isValid;
}

qint32 OAIWebhookInfo::getPendingUpdateCount() const {
    return m_pending_update_count;
}
void OAIWebhookInfo::setPendingUpdateCount(const qint32 &pending_update_count) {
    m_pending_update_count = pending_update_count;
    m_pending_update_count_isSet = true;
}

bool OAIWebhookInfo::is_pending_update_count_Set() const{
    return m_pending_update_count_isSet;
}

bool OAIWebhookInfo::is_pending_update_count_Valid() const{
    return m_pending_update_count_isValid;
}

QString OAIWebhookInfo::getUrl() const {
    return m_url;
}
void OAIWebhookInfo::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhookInfo::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhookInfo::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWebhookInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_updates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_custom_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_error_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_connections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_update_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_has_custom_certificate_isValid && m_pending_update_count_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
