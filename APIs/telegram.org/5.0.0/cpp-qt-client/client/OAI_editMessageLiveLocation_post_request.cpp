/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_editMessageLiveLocation_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_editMessageLiveLocation_post_request::OAI_editMessageLiveLocation_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_editMessageLiveLocation_post_request::OAI_editMessageLiveLocation_post_request() {
    this->initializeModel();
}

OAI_editMessageLiveLocation_post_request::~OAI_editMessageLiveLocation_post_request() {}

void OAI_editMessageLiveLocation_post_request::initializeModel() {

    m_chat_id_isSet = false;
    m_chat_id_isValid = false;

    m_heading_isSet = false;
    m_heading_isValid = false;

    m_horizontal_accuracy_isSet = false;
    m_horizontal_accuracy_isValid = false;

    m_inline_message_id_isSet = false;
    m_inline_message_id_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_proximity_alert_radius_isSet = false;
    m_proximity_alert_radius_isValid = false;

    m_reply_markup_isSet = false;
    m_reply_markup_isValid = false;
}

void OAI_editMessageLiveLocation_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_editMessageLiveLocation_post_request::fromJsonObject(QJsonObject json) {

    m_chat_id_isValid = ::OpenAPI::fromJsonValue(m_chat_id, json[QString("chat_id")]);
    m_chat_id_isSet = !json[QString("chat_id")].isNull() && m_chat_id_isValid;

    m_heading_isValid = ::OpenAPI::fromJsonValue(m_heading, json[QString("heading")]);
    m_heading_isSet = !json[QString("heading")].isNull() && m_heading_isValid;

    m_horizontal_accuracy_isValid = ::OpenAPI::fromJsonValue(m_horizontal_accuracy, json[QString("horizontal_accuracy")]);
    m_horizontal_accuracy_isSet = !json[QString("horizontal_accuracy")].isNull() && m_horizontal_accuracy_isValid;

    m_inline_message_id_isValid = ::OpenAPI::fromJsonValue(m_inline_message_id, json[QString("inline_message_id")]);
    m_inline_message_id_isSet = !json[QString("inline_message_id")].isNull() && m_inline_message_id_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_proximity_alert_radius_isValid = ::OpenAPI::fromJsonValue(m_proximity_alert_radius, json[QString("proximity_alert_radius")]);
    m_proximity_alert_radius_isSet = !json[QString("proximity_alert_radius")].isNull() && m_proximity_alert_radius_isValid;

    m_reply_markup_isValid = ::OpenAPI::fromJsonValue(m_reply_markup, json[QString("reply_markup")]);
    m_reply_markup_isSet = !json[QString("reply_markup")].isNull() && m_reply_markup_isValid;
}

QString OAI_editMessageLiveLocation_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_editMessageLiveLocation_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_chat_id.isSet()) {
        obj.insert(QString("chat_id"), ::OpenAPI::toJsonValue(m_chat_id));
    }
    if (m_heading_isSet) {
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(m_heading));
    }
    if (m_horizontal_accuracy_isSet) {
        obj.insert(QString("horizontal_accuracy"), ::OpenAPI::toJsonValue(m_horizontal_accuracy));
    }
    if (m_inline_message_id_isSet) {
        obj.insert(QString("inline_message_id"), ::OpenAPI::toJsonValue(m_inline_message_id));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_proximity_alert_radius_isSet) {
        obj.insert(QString("proximity_alert_radius"), ::OpenAPI::toJsonValue(m_proximity_alert_radius));
    }
    if (m_reply_markup.isSet()) {
        obj.insert(QString("reply_markup"), ::OpenAPI::toJsonValue(m_reply_markup));
    }
    return obj;
}

OAI_editMessageCaption_post_request_chat_id OAI_editMessageLiveLocation_post_request::getChatId() const {
    return m_chat_id;
}
void OAI_editMessageLiveLocation_post_request::setChatId(const OAI_editMessageCaption_post_request_chat_id &chat_id) {
    m_chat_id = chat_id;
    m_chat_id_isSet = true;
}

bool OAI_editMessageLiveLocation_post_request::is_chat_id_Set() const{
    return m_chat_id_isSet;
}

bool OAI_editMessageLiveLocation_post_request::is_chat_id_Valid() const{
    return m_chat_id_isValid;
}

qint32 OAI_editMessageLiveLocation_post_request::getHeading() const {
    return m_heading;
}
void OAI_editMessageLiveLocation_post_request::setHeading(const qint32 &heading) {
    m_heading = heading;
    m_heading_isSet = true;
}

bool OAI_editMessageLiveLocation_post_request::is_heading_Set() const{
    return m_heading_isSet;
}

bool OAI_editMessageLiveLocation_post_request::is_heading_Valid() const{
    return m_heading_isValid;
}

double OAI_editMessageLiveLocation_post_request::getHorizontalAccuracy() const {
    return m_horizontal_accuracy;
}
void OAI_editMessageLiveLocation_post_request::setHorizontalAccuracy(const double &horizontal_accuracy) {
    m_horizontal_accuracy = horizontal_accuracy;
    m_horizontal_accuracy_isSet = true;
}

bool OAI_editMessageLiveLocation_post_request::is_horizontal_accuracy_Set() const{
    return m_horizontal_accuracy_isSet;
}

bool OAI_editMessageLiveLocation_post_request::is_horizontal_accuracy_Valid() const{
    return m_horizontal_accuracy_isValid;
}

QString OAI_editMessageLiveLocation_post_request::getInlineMessageId() const {
    return m_inline_message_id;
}
void OAI_editMessageLiveLocation_post_request::setInlineMessageId(const QString &inline_message_id) {
    m_inline_message_id = inline_message_id;
    m_inline_message_id_isSet = true;
}

bool OAI_editMessageLiveLocation_post_request::is_inline_message_id_Set() const{
    return m_inline_message_id_isSet;
}

bool OAI_editMessageLiveLocation_post_request::is_inline_message_id_Valid() const{
    return m_inline_message_id_isValid;
}

double OAI_editMessageLiveLocation_post_request::getLatitude() const {
    return m_latitude;
}
void OAI_editMessageLiveLocation_post_request::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAI_editMessageLiveLocation_post_request::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAI_editMessageLiveLocation_post_request::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAI_editMessageLiveLocation_post_request::getLongitude() const {
    return m_longitude;
}
void OAI_editMessageLiveLocation_post_request::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAI_editMessageLiveLocation_post_request::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAI_editMessageLiveLocation_post_request::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint32 OAI_editMessageLiveLocation_post_request::getMessageId() const {
    return m_message_id;
}
void OAI_editMessageLiveLocation_post_request::setMessageId(const qint32 &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAI_editMessageLiveLocation_post_request::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAI_editMessageLiveLocation_post_request::is_message_id_Valid() const{
    return m_message_id_isValid;
}

qint32 OAI_editMessageLiveLocation_post_request::getProximityAlertRadius() const {
    return m_proximity_alert_radius;
}
void OAI_editMessageLiveLocation_post_request::setProximityAlertRadius(const qint32 &proximity_alert_radius) {
    m_proximity_alert_radius = proximity_alert_radius;
    m_proximity_alert_radius_isSet = true;
}

bool OAI_editMessageLiveLocation_post_request::is_proximity_alert_radius_Set() const{
    return m_proximity_alert_radius_isSet;
}

bool OAI_editMessageLiveLocation_post_request::is_proximity_alert_radius_Valid() const{
    return m_proximity_alert_radius_isValid;
}

OAIInlineKeyboardMarkup OAI_editMessageLiveLocation_post_request::getReplyMarkup() const {
    return m_reply_markup;
}
void OAI_editMessageLiveLocation_post_request::setReplyMarkup(const OAIInlineKeyboardMarkup &reply_markup) {
    m_reply_markup = reply_markup;
    m_reply_markup_isSet = true;
}

bool OAI_editMessageLiveLocation_post_request::is_reply_markup_Set() const{
    return m_reply_markup_isSet;
}

bool OAI_editMessageLiveLocation_post_request::is_reply_markup_Valid() const{
    return m_reply_markup_isValid;
}

bool OAI_editMessageLiveLocation_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chat_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proximity_alert_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_markup.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_editMessageLiveLocation_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_latitude_isValid && m_longitude_isValid && true;
}

} // namespace OpenAPI
