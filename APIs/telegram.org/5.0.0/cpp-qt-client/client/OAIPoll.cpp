/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoll.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoll::OAIPoll(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoll::OAIPoll() {
    this->initializeModel();
}

OAIPoll::~OAIPoll() {}

void OAIPoll::initializeModel() {

    m_allows_multiple_answers_isSet = false;
    m_allows_multiple_answers_isValid = false;

    m_close_date_isSet = false;
    m_close_date_isValid = false;

    m_correct_option_id_isSet = false;
    m_correct_option_id_isValid = false;

    m_explanation_isSet = false;
    m_explanation_isValid = false;

    m_explanation_entities_isSet = false;
    m_explanation_entities_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_anonymous_isSet = false;
    m_is_anonymous_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_open_period_isSet = false;
    m_open_period_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_question_isSet = false;
    m_question_isValid = false;

    m_total_voter_count_isSet = false;
    m_total_voter_count_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPoll::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoll::fromJsonObject(QJsonObject json) {

    m_allows_multiple_answers_isValid = ::OpenAPI::fromJsonValue(m_allows_multiple_answers, json[QString("allows_multiple_answers")]);
    m_allows_multiple_answers_isSet = !json[QString("allows_multiple_answers")].isNull() && m_allows_multiple_answers_isValid;

    m_close_date_isValid = ::OpenAPI::fromJsonValue(m_close_date, json[QString("close_date")]);
    m_close_date_isSet = !json[QString("close_date")].isNull() && m_close_date_isValid;

    m_correct_option_id_isValid = ::OpenAPI::fromJsonValue(m_correct_option_id, json[QString("correct_option_id")]);
    m_correct_option_id_isSet = !json[QString("correct_option_id")].isNull() && m_correct_option_id_isValid;

    m_explanation_isValid = ::OpenAPI::fromJsonValue(m_explanation, json[QString("explanation")]);
    m_explanation_isSet = !json[QString("explanation")].isNull() && m_explanation_isValid;

    m_explanation_entities_isValid = ::OpenAPI::fromJsonValue(m_explanation_entities, json[QString("explanation_entities")]);
    m_explanation_entities_isSet = !json[QString("explanation_entities")].isNull() && m_explanation_entities_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_anonymous_isValid = ::OpenAPI::fromJsonValue(m_is_anonymous, json[QString("is_anonymous")]);
    m_is_anonymous_isSet = !json[QString("is_anonymous")].isNull() && m_is_anonymous_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("is_closed")]);
    m_is_closed_isSet = !json[QString("is_closed")].isNull() && m_is_closed_isValid;

    m_open_period_isValid = ::OpenAPI::fromJsonValue(m_open_period, json[QString("open_period")]);
    m_open_period_isSet = !json[QString("open_period")].isNull() && m_open_period_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_question_isValid = ::OpenAPI::fromJsonValue(m_question, json[QString("question")]);
    m_question_isSet = !json[QString("question")].isNull() && m_question_isValid;

    m_total_voter_count_isValid = ::OpenAPI::fromJsonValue(m_total_voter_count, json[QString("total_voter_count")]);
    m_total_voter_count_isSet = !json[QString("total_voter_count")].isNull() && m_total_voter_count_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPoll::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoll::asJsonObject() const {
    QJsonObject obj;
    if (m_allows_multiple_answers_isSet) {
        obj.insert(QString("allows_multiple_answers"), ::OpenAPI::toJsonValue(m_allows_multiple_answers));
    }
    if (m_close_date_isSet) {
        obj.insert(QString("close_date"), ::OpenAPI::toJsonValue(m_close_date));
    }
    if (m_correct_option_id_isSet) {
        obj.insert(QString("correct_option_id"), ::OpenAPI::toJsonValue(m_correct_option_id));
    }
    if (m_explanation_isSet) {
        obj.insert(QString("explanation"), ::OpenAPI::toJsonValue(m_explanation));
    }
    if (m_explanation_entities.size() > 0) {
        obj.insert(QString("explanation_entities"), ::OpenAPI::toJsonValue(m_explanation_entities));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_anonymous_isSet) {
        obj.insert(QString("is_anonymous"), ::OpenAPI::toJsonValue(m_is_anonymous));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("is_closed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_open_period_isSet) {
        obj.insert(QString("open_period"), ::OpenAPI::toJsonValue(m_open_period));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_question_isSet) {
        obj.insert(QString("question"), ::OpenAPI::toJsonValue(m_question));
    }
    if (m_total_voter_count_isSet) {
        obj.insert(QString("total_voter_count"), ::OpenAPI::toJsonValue(m_total_voter_count));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIPoll::isAllowsMultipleAnswers() const {
    return m_allows_multiple_answers;
}
void OAIPoll::setAllowsMultipleAnswers(const bool &allows_multiple_answers) {
    m_allows_multiple_answers = allows_multiple_answers;
    m_allows_multiple_answers_isSet = true;
}

bool OAIPoll::is_allows_multiple_answers_Set() const{
    return m_allows_multiple_answers_isSet;
}

bool OAIPoll::is_allows_multiple_answers_Valid() const{
    return m_allows_multiple_answers_isValid;
}

qint32 OAIPoll::getCloseDate() const {
    return m_close_date;
}
void OAIPoll::setCloseDate(const qint32 &close_date) {
    m_close_date = close_date;
    m_close_date_isSet = true;
}

bool OAIPoll::is_close_date_Set() const{
    return m_close_date_isSet;
}

bool OAIPoll::is_close_date_Valid() const{
    return m_close_date_isValid;
}

qint32 OAIPoll::getCorrectOptionId() const {
    return m_correct_option_id;
}
void OAIPoll::setCorrectOptionId(const qint32 &correct_option_id) {
    m_correct_option_id = correct_option_id;
    m_correct_option_id_isSet = true;
}

bool OAIPoll::is_correct_option_id_Set() const{
    return m_correct_option_id_isSet;
}

bool OAIPoll::is_correct_option_id_Valid() const{
    return m_correct_option_id_isValid;
}

QString OAIPoll::getExplanation() const {
    return m_explanation;
}
void OAIPoll::setExplanation(const QString &explanation) {
    m_explanation = explanation;
    m_explanation_isSet = true;
}

bool OAIPoll::is_explanation_Set() const{
    return m_explanation_isSet;
}

bool OAIPoll::is_explanation_Valid() const{
    return m_explanation_isValid;
}

QList<OAIMessageEntity> OAIPoll::getExplanationEntities() const {
    return m_explanation_entities;
}
void OAIPoll::setExplanationEntities(const QList<OAIMessageEntity> &explanation_entities) {
    m_explanation_entities = explanation_entities;
    m_explanation_entities_isSet = true;
}

bool OAIPoll::is_explanation_entities_Set() const{
    return m_explanation_entities_isSet;
}

bool OAIPoll::is_explanation_entities_Valid() const{
    return m_explanation_entities_isValid;
}

QString OAIPoll::getId() const {
    return m_id;
}
void OAIPoll::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPoll::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPoll::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPoll::isIsAnonymous() const {
    return m_is_anonymous;
}
void OAIPoll::setIsAnonymous(const bool &is_anonymous) {
    m_is_anonymous = is_anonymous;
    m_is_anonymous_isSet = true;
}

bool OAIPoll::is_is_anonymous_Set() const{
    return m_is_anonymous_isSet;
}

bool OAIPoll::is_is_anonymous_Valid() const{
    return m_is_anonymous_isValid;
}

bool OAIPoll::isIsClosed() const {
    return m_is_closed;
}
void OAIPoll::setIsClosed(const bool &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAIPoll::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAIPoll::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

qint32 OAIPoll::getOpenPeriod() const {
    return m_open_period;
}
void OAIPoll::setOpenPeriod(const qint32 &open_period) {
    m_open_period = open_period;
    m_open_period_isSet = true;
}

bool OAIPoll::is_open_period_Set() const{
    return m_open_period_isSet;
}

bool OAIPoll::is_open_period_Valid() const{
    return m_open_period_isValid;
}

QList<OAIPollOption> OAIPoll::getOptions() const {
    return m_options;
}
void OAIPoll::setOptions(const QList<OAIPollOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIPoll::is_options_Set() const{
    return m_options_isSet;
}

bool OAIPoll::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIPoll::getQuestion() const {
    return m_question;
}
void OAIPoll::setQuestion(const QString &question) {
    m_question = question;
    m_question_isSet = true;
}

bool OAIPoll::is_question_Set() const{
    return m_question_isSet;
}

bool OAIPoll::is_question_Valid() const{
    return m_question_isValid;
}

qint32 OAIPoll::getTotalVoterCount() const {
    return m_total_voter_count;
}
void OAIPoll::setTotalVoterCount(const qint32 &total_voter_count) {
    m_total_voter_count = total_voter_count;
    m_total_voter_count_isSet = true;
}

bool OAIPoll::is_total_voter_count_Set() const{
    return m_total_voter_count_isSet;
}

bool OAIPoll::is_total_voter_count_Valid() const{
    return m_total_voter_count_isValid;
}

QString OAIPoll::getType() const {
    return m_type;
}
void OAIPoll::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPoll::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPoll::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPoll::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allows_multiple_answers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correct_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanation_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_anonymous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_voter_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoll::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allows_multiple_answers_isValid && m_id_isValid && m_is_anonymous_isValid && m_is_closed_isValid && m_options_isValid && m_question_isValid && m_total_voter_count_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
