/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInlineQueryResultArticle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInlineQueryResultArticle::OAIInlineQueryResultArticle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInlineQueryResultArticle::OAIInlineQueryResultArticle() {
    this->initializeModel();
}

OAIInlineQueryResultArticle::~OAIInlineQueryResultArticle() {}

void OAIInlineQueryResultArticle::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_hide_url_isSet = false;
    m_hide_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_input_message_content_isSet = false;
    m_input_message_content_isValid = false;

    m_reply_markup_isSet = false;
    m_reply_markup_isValid = false;

    m_thumb_height_isSet = false;
    m_thumb_height_isValid = false;

    m_thumb_url_isSet = false;
    m_thumb_url_isValid = false;

    m_thumb_width_isSet = false;
    m_thumb_width_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIInlineQueryResultArticle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInlineQueryResultArticle::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_hide_url_isValid = ::OpenAPI::fromJsonValue(m_hide_url, json[QString("hide_url")]);
    m_hide_url_isSet = !json[QString("hide_url")].isNull() && m_hide_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_input_message_content_isValid = ::OpenAPI::fromJsonValue(m_input_message_content, json[QString("input_message_content")]);
    m_input_message_content_isSet = !json[QString("input_message_content")].isNull() && m_input_message_content_isValid;

    m_reply_markup_isValid = ::OpenAPI::fromJsonValue(m_reply_markup, json[QString("reply_markup")]);
    m_reply_markup_isSet = !json[QString("reply_markup")].isNull() && m_reply_markup_isValid;

    m_thumb_height_isValid = ::OpenAPI::fromJsonValue(m_thumb_height, json[QString("thumb_height")]);
    m_thumb_height_isSet = !json[QString("thumb_height")].isNull() && m_thumb_height_isValid;

    m_thumb_url_isValid = ::OpenAPI::fromJsonValue(m_thumb_url, json[QString("thumb_url")]);
    m_thumb_url_isSet = !json[QString("thumb_url")].isNull() && m_thumb_url_isValid;

    m_thumb_width_isValid = ::OpenAPI::fromJsonValue(m_thumb_width, json[QString("thumb_width")]);
    m_thumb_width_isSet = !json[QString("thumb_width")].isNull() && m_thumb_width_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIInlineQueryResultArticle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInlineQueryResultArticle::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_hide_url_isSet) {
        obj.insert(QString("hide_url"), ::OpenAPI::toJsonValue(m_hide_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_input_message_content.isSet()) {
        obj.insert(QString("input_message_content"), ::OpenAPI::toJsonValue(m_input_message_content));
    }
    if (m_reply_markup.isSet()) {
        obj.insert(QString("reply_markup"), ::OpenAPI::toJsonValue(m_reply_markup));
    }
    if (m_thumb_height_isSet) {
        obj.insert(QString("thumb_height"), ::OpenAPI::toJsonValue(m_thumb_height));
    }
    if (m_thumb_url_isSet) {
        obj.insert(QString("thumb_url"), ::OpenAPI::toJsonValue(m_thumb_url));
    }
    if (m_thumb_width_isSet) {
        obj.insert(QString("thumb_width"), ::OpenAPI::toJsonValue(m_thumb_width));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIInlineQueryResultArticle::getDescription() const {
    return m_description;
}
void OAIInlineQueryResultArticle::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInlineQueryResultArticle::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInlineQueryResultArticle::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIInlineQueryResultArticle::isHideUrl() const {
    return m_hide_url;
}
void OAIInlineQueryResultArticle::setHideUrl(const bool &hide_url) {
    m_hide_url = hide_url;
    m_hide_url_isSet = true;
}

bool OAIInlineQueryResultArticle::is_hide_url_Set() const{
    return m_hide_url_isSet;
}

bool OAIInlineQueryResultArticle::is_hide_url_Valid() const{
    return m_hide_url_isValid;
}

QString OAIInlineQueryResultArticle::getId() const {
    return m_id;
}
void OAIInlineQueryResultArticle::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInlineQueryResultArticle::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInlineQueryResultArticle::is_id_Valid() const{
    return m_id_isValid;
}

OAIInputMessageContent OAIInlineQueryResultArticle::getInputMessageContent() const {
    return m_input_message_content;
}
void OAIInlineQueryResultArticle::setInputMessageContent(const OAIInputMessageContent &input_message_content) {
    m_input_message_content = input_message_content;
    m_input_message_content_isSet = true;
}

bool OAIInlineQueryResultArticle::is_input_message_content_Set() const{
    return m_input_message_content_isSet;
}

bool OAIInlineQueryResultArticle::is_input_message_content_Valid() const{
    return m_input_message_content_isValid;
}

OAIInlineKeyboardMarkup OAIInlineQueryResultArticle::getReplyMarkup() const {
    return m_reply_markup;
}
void OAIInlineQueryResultArticle::setReplyMarkup(const OAIInlineKeyboardMarkup &reply_markup) {
    m_reply_markup = reply_markup;
    m_reply_markup_isSet = true;
}

bool OAIInlineQueryResultArticle::is_reply_markup_Set() const{
    return m_reply_markup_isSet;
}

bool OAIInlineQueryResultArticle::is_reply_markup_Valid() const{
    return m_reply_markup_isValid;
}

qint32 OAIInlineQueryResultArticle::getThumbHeight() const {
    return m_thumb_height;
}
void OAIInlineQueryResultArticle::setThumbHeight(const qint32 &thumb_height) {
    m_thumb_height = thumb_height;
    m_thumb_height_isSet = true;
}

bool OAIInlineQueryResultArticle::is_thumb_height_Set() const{
    return m_thumb_height_isSet;
}

bool OAIInlineQueryResultArticle::is_thumb_height_Valid() const{
    return m_thumb_height_isValid;
}

QString OAIInlineQueryResultArticle::getThumbUrl() const {
    return m_thumb_url;
}
void OAIInlineQueryResultArticle::setThumbUrl(const QString &thumb_url) {
    m_thumb_url = thumb_url;
    m_thumb_url_isSet = true;
}

bool OAIInlineQueryResultArticle::is_thumb_url_Set() const{
    return m_thumb_url_isSet;
}

bool OAIInlineQueryResultArticle::is_thumb_url_Valid() const{
    return m_thumb_url_isValid;
}

qint32 OAIInlineQueryResultArticle::getThumbWidth() const {
    return m_thumb_width;
}
void OAIInlineQueryResultArticle::setThumbWidth(const qint32 &thumb_width) {
    m_thumb_width = thumb_width;
    m_thumb_width_isSet = true;
}

bool OAIInlineQueryResultArticle::is_thumb_width_Set() const{
    return m_thumb_width_isSet;
}

bool OAIInlineQueryResultArticle::is_thumb_width_Valid() const{
    return m_thumb_width_isValid;
}

QString OAIInlineQueryResultArticle::getTitle() const {
    return m_title;
}
void OAIInlineQueryResultArticle::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIInlineQueryResultArticle::is_title_Set() const{
    return m_title_isSet;
}

bool OAIInlineQueryResultArticle::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIInlineQueryResultArticle::getType() const {
    return m_type;
}
void OAIInlineQueryResultArticle::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInlineQueryResultArticle::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInlineQueryResultArticle::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIInlineQueryResultArticle::getUrl() const {
    return m_url;
}
void OAIInlineQueryResultArticle::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIInlineQueryResultArticle::is_url_Set() const{
    return m_url_isSet;
}

bool OAIInlineQueryResultArticle::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIInlineQueryResultArticle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_message_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_markup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInlineQueryResultArticle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_input_message_content_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
