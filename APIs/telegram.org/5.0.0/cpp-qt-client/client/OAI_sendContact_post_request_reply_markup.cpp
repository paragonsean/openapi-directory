/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_sendContact_post_request_reply_markup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_sendContact_post_request_reply_markup::OAI_sendContact_post_request_reply_markup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_sendContact_post_request_reply_markup::OAI_sendContact_post_request_reply_markup() {
    this->initializeModel();
}

OAI_sendContact_post_request_reply_markup::~OAI_sendContact_post_request_reply_markup() {}

void OAI_sendContact_post_request_reply_markup::initializeModel() {

    m_inline_keyboard_isSet = false;
    m_inline_keyboard_isValid = false;

    m_keyboard_isSet = false;
    m_keyboard_isValid = false;

    m_one_time_keyboard_isSet = false;
    m_one_time_keyboard_isValid = false;

    m_resize_keyboard_isSet = false;
    m_resize_keyboard_isValid = false;

    m_selective_isSet = false;
    m_selective_isValid = false;

    m_remove_keyboard_isSet = false;
    m_remove_keyboard_isValid = false;

    m_force_reply_isSet = false;
    m_force_reply_isValid = false;
}

void OAI_sendContact_post_request_reply_markup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_sendContact_post_request_reply_markup::fromJsonObject(QJsonObject json) {

    if(json["inline_keyboard"].isArray()){
        auto arr = json["inline_keyboard"].toArray();
        m_inline_keyboard_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIInlineKeyboardButton> item;
                m_inline_keyboard_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_inline_keyboard_isSet = !jval.isNull() && m_inline_keyboard_isValid;
                m_inline_keyboard.push_back(item);
            }
        }
    }

    if(json["keyboard"].isArray()){
        auto arr = json["keyboard"].toArray();
        m_keyboard_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIKeyboardButton> item;
                m_keyboard_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_keyboard_isSet = !jval.isNull() && m_keyboard_isValid;
                m_keyboard.push_back(item);
            }
        }
    }

    m_one_time_keyboard_isValid = ::OpenAPI::fromJsonValue(m_one_time_keyboard, json[QString("one_time_keyboard")]);
    m_one_time_keyboard_isSet = !json[QString("one_time_keyboard")].isNull() && m_one_time_keyboard_isValid;

    m_resize_keyboard_isValid = ::OpenAPI::fromJsonValue(m_resize_keyboard, json[QString("resize_keyboard")]);
    m_resize_keyboard_isSet = !json[QString("resize_keyboard")].isNull() && m_resize_keyboard_isValid;

    m_selective_isValid = ::OpenAPI::fromJsonValue(m_selective, json[QString("selective")]);
    m_selective_isSet = !json[QString("selective")].isNull() && m_selective_isValid;

    m_remove_keyboard_isValid = ::OpenAPI::fromJsonValue(m_remove_keyboard, json[QString("remove_keyboard")]);
    m_remove_keyboard_isSet = !json[QString("remove_keyboard")].isNull() && m_remove_keyboard_isValid;

    m_force_reply_isValid = ::OpenAPI::fromJsonValue(m_force_reply, json[QString("force_reply")]);
    m_force_reply_isSet = !json[QString("force_reply")].isNull() && m_force_reply_isValid;
}

QString OAI_sendContact_post_request_reply_markup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_sendContact_post_request_reply_markup::asJsonObject() const {
    QJsonObject obj;
    if (m_inline_keyboard.size() > 0) {
        
        obj.insert(QString("inline_keyboard"), toJsonValue(m_inline_keyboard));
    }
    if (m_keyboard.size() > 0) {
        
        obj.insert(QString("keyboard"), toJsonValue(m_keyboard));
    }
    if (m_one_time_keyboard_isSet) {
        obj.insert(QString("one_time_keyboard"), ::OpenAPI::toJsonValue(m_one_time_keyboard));
    }
    if (m_resize_keyboard_isSet) {
        obj.insert(QString("resize_keyboard"), ::OpenAPI::toJsonValue(m_resize_keyboard));
    }
    if (m_selective_isSet) {
        obj.insert(QString("selective"), ::OpenAPI::toJsonValue(m_selective));
    }
    if (m_remove_keyboard_isSet) {
        obj.insert(QString("remove_keyboard"), ::OpenAPI::toJsonValue(m_remove_keyboard));
    }
    if (m_force_reply_isSet) {
        obj.insert(QString("force_reply"), ::OpenAPI::toJsonValue(m_force_reply));
    }
    return obj;
}

QList<QList<OAIInlineKeyboardButton>> OAI_sendContact_post_request_reply_markup::getInlineKeyboard() const {
    return m_inline_keyboard;
}
void OAI_sendContact_post_request_reply_markup::setInlineKeyboard(const QList<QList<OAIInlineKeyboardButton>> &inline_keyboard) {
    m_inline_keyboard = inline_keyboard;
    m_inline_keyboard_isSet = true;
}

bool OAI_sendContact_post_request_reply_markup::is_inline_keyboard_Set() const{
    return m_inline_keyboard_isSet;
}

bool OAI_sendContact_post_request_reply_markup::is_inline_keyboard_Valid() const{
    return m_inline_keyboard_isValid;
}

QList<QList<OAIKeyboardButton>> OAI_sendContact_post_request_reply_markup::getKeyboard() const {
    return m_keyboard;
}
void OAI_sendContact_post_request_reply_markup::setKeyboard(const QList<QList<OAIKeyboardButton>> &keyboard) {
    m_keyboard = keyboard;
    m_keyboard_isSet = true;
}

bool OAI_sendContact_post_request_reply_markup::is_keyboard_Set() const{
    return m_keyboard_isSet;
}

bool OAI_sendContact_post_request_reply_markup::is_keyboard_Valid() const{
    return m_keyboard_isValid;
}

bool OAI_sendContact_post_request_reply_markup::isOneTimeKeyboard() const {
    return m_one_time_keyboard;
}
void OAI_sendContact_post_request_reply_markup::setOneTimeKeyboard(const bool &one_time_keyboard) {
    m_one_time_keyboard = one_time_keyboard;
    m_one_time_keyboard_isSet = true;
}

bool OAI_sendContact_post_request_reply_markup::is_one_time_keyboard_Set() const{
    return m_one_time_keyboard_isSet;
}

bool OAI_sendContact_post_request_reply_markup::is_one_time_keyboard_Valid() const{
    return m_one_time_keyboard_isValid;
}

bool OAI_sendContact_post_request_reply_markup::isResizeKeyboard() const {
    return m_resize_keyboard;
}
void OAI_sendContact_post_request_reply_markup::setResizeKeyboard(const bool &resize_keyboard) {
    m_resize_keyboard = resize_keyboard;
    m_resize_keyboard_isSet = true;
}

bool OAI_sendContact_post_request_reply_markup::is_resize_keyboard_Set() const{
    return m_resize_keyboard_isSet;
}

bool OAI_sendContact_post_request_reply_markup::is_resize_keyboard_Valid() const{
    return m_resize_keyboard_isValid;
}

bool OAI_sendContact_post_request_reply_markup::isSelective() const {
    return m_selective;
}
void OAI_sendContact_post_request_reply_markup::setSelective(const bool &selective) {
    m_selective = selective;
    m_selective_isSet = true;
}

bool OAI_sendContact_post_request_reply_markup::is_selective_Set() const{
    return m_selective_isSet;
}

bool OAI_sendContact_post_request_reply_markup::is_selective_Valid() const{
    return m_selective_isValid;
}

bool OAI_sendContact_post_request_reply_markup::isRemoveKeyboard() const {
    return m_remove_keyboard;
}
void OAI_sendContact_post_request_reply_markup::setRemoveKeyboard(const bool &remove_keyboard) {
    m_remove_keyboard = remove_keyboard;
    m_remove_keyboard_isSet = true;
}

bool OAI_sendContact_post_request_reply_markup::is_remove_keyboard_Set() const{
    return m_remove_keyboard_isSet;
}

bool OAI_sendContact_post_request_reply_markup::is_remove_keyboard_Valid() const{
    return m_remove_keyboard_isValid;
}

bool OAI_sendContact_post_request_reply_markup::isForceReply() const {
    return m_force_reply;
}
void OAI_sendContact_post_request_reply_markup::setForceReply(const bool &force_reply) {
    m_force_reply = force_reply;
    m_force_reply_isSet = true;
}

bool OAI_sendContact_post_request_reply_markup::is_force_reply_Set() const{
    return m_force_reply_isSet;
}

bool OAI_sendContact_post_request_reply_markup::is_force_reply_Valid() const{
    return m_force_reply_isValid;
}

bool OAI_sendContact_post_request_reply_markup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inline_keyboard.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyboard.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_time_keyboard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resize_keyboard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_keyboard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_reply_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_sendContact_post_request_reply_markup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inline_keyboard_isValid && m_keyboard_isValid && m_remove_keyboard_isValid && m_force_reply_isValid && true;
}

} // namespace OpenAPI
