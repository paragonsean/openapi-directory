/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseParameters::OAIResponseParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseParameters::OAIResponseParameters() {
    this->initializeModel();
}

OAIResponseParameters::~OAIResponseParameters() {}

void OAIResponseParameters::initializeModel() {

    m_migrate_to_chat_id_isSet = false;
    m_migrate_to_chat_id_isValid = false;

    m_retry_after_isSet = false;
    m_retry_after_isValid = false;
}

void OAIResponseParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseParameters::fromJsonObject(QJsonObject json) {

    m_migrate_to_chat_id_isValid = ::OpenAPI::fromJsonValue(m_migrate_to_chat_id, json[QString("migrate_to_chat_id")]);
    m_migrate_to_chat_id_isSet = !json[QString("migrate_to_chat_id")].isNull() && m_migrate_to_chat_id_isValid;

    m_retry_after_isValid = ::OpenAPI::fromJsonValue(m_retry_after, json[QString("retry_after")]);
    m_retry_after_isSet = !json[QString("retry_after")].isNull() && m_retry_after_isValid;
}

QString OAIResponseParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_migrate_to_chat_id_isSet) {
        obj.insert(QString("migrate_to_chat_id"), ::OpenAPI::toJsonValue(m_migrate_to_chat_id));
    }
    if (m_retry_after_isSet) {
        obj.insert(QString("retry_after"), ::OpenAPI::toJsonValue(m_retry_after));
    }
    return obj;
}

qint32 OAIResponseParameters::getMigrateToChatId() const {
    return m_migrate_to_chat_id;
}
void OAIResponseParameters::setMigrateToChatId(const qint32 &migrate_to_chat_id) {
    m_migrate_to_chat_id = migrate_to_chat_id;
    m_migrate_to_chat_id_isSet = true;
}

bool OAIResponseParameters::is_migrate_to_chat_id_Set() const{
    return m_migrate_to_chat_id_isSet;
}

bool OAIResponseParameters::is_migrate_to_chat_id_Valid() const{
    return m_migrate_to_chat_id_isValid;
}

qint32 OAIResponseParameters::getRetryAfter() const {
    return m_retry_after;
}
void OAIResponseParameters::setRetryAfter(const qint32 &retry_after) {
    m_retry_after = retry_after;
    m_retry_after_isSet = true;
}

bool OAIResponseParameters::is_retry_after_Set() const{
    return m_retry_after_isSet;
}

bool OAIResponseParameters::is_retry_after_Valid() const{
    return m_retry_after_isValid;
}

bool OAIResponseParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_migrate_to_chat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_after_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
