/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForceReply.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForceReply::OAIForceReply(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForceReply::OAIForceReply() {
    this->initializeModel();
}

OAIForceReply::~OAIForceReply() {}

void OAIForceReply::initializeModel() {

    m_force_reply_isSet = false;
    m_force_reply_isValid = false;

    m_selective_isSet = false;
    m_selective_isValid = false;
}

void OAIForceReply::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForceReply::fromJsonObject(QJsonObject json) {

    m_force_reply_isValid = ::OpenAPI::fromJsonValue(m_force_reply, json[QString("force_reply")]);
    m_force_reply_isSet = !json[QString("force_reply")].isNull() && m_force_reply_isValid;

    m_selective_isValid = ::OpenAPI::fromJsonValue(m_selective, json[QString("selective")]);
    m_selective_isSet = !json[QString("selective")].isNull() && m_selective_isValid;
}

QString OAIForceReply::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForceReply::asJsonObject() const {
    QJsonObject obj;
    if (m_force_reply_isSet) {
        obj.insert(QString("force_reply"), ::OpenAPI::toJsonValue(m_force_reply));
    }
    if (m_selective_isSet) {
        obj.insert(QString("selective"), ::OpenAPI::toJsonValue(m_selective));
    }
    return obj;
}

bool OAIForceReply::isForceReply() const {
    return m_force_reply;
}
void OAIForceReply::setForceReply(const bool &force_reply) {
    m_force_reply = force_reply;
    m_force_reply_isSet = true;
}

bool OAIForceReply::is_force_reply_Set() const{
    return m_force_reply_isSet;
}

bool OAIForceReply::is_force_reply_Valid() const{
    return m_force_reply_isValid;
}

bool OAIForceReply::isSelective() const {
    return m_selective;
}
void OAIForceReply::setSelective(const bool &selective) {
    m_selective = selective;
    m_selective_isSet = true;
}

bool OAIForceReply::is_selective_Set() const{
    return m_selective_isSet;
}

bool OAIForceReply::is_selective_Valid() const{
    return m_selective_isValid;
}

bool OAIForceReply::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_force_reply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selective_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForceReply::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_force_reply_isValid && true;
}

} // namespace OpenAPI
