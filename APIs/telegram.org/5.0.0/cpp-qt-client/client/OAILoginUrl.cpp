/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoginUrl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoginUrl::OAILoginUrl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoginUrl::OAILoginUrl() {
    this->initializeModel();
}

OAILoginUrl::~OAILoginUrl() {}

void OAILoginUrl::initializeModel() {

    m_bot_username_isSet = false;
    m_bot_username_isValid = false;

    m_forward_text_isSet = false;
    m_forward_text_isValid = false;

    m_request_write_access_isSet = false;
    m_request_write_access_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAILoginUrl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoginUrl::fromJsonObject(QJsonObject json) {

    m_bot_username_isValid = ::OpenAPI::fromJsonValue(m_bot_username, json[QString("bot_username")]);
    m_bot_username_isSet = !json[QString("bot_username")].isNull() && m_bot_username_isValid;

    m_forward_text_isValid = ::OpenAPI::fromJsonValue(m_forward_text, json[QString("forward_text")]);
    m_forward_text_isSet = !json[QString("forward_text")].isNull() && m_forward_text_isValid;

    m_request_write_access_isValid = ::OpenAPI::fromJsonValue(m_request_write_access, json[QString("request_write_access")]);
    m_request_write_access_isSet = !json[QString("request_write_access")].isNull() && m_request_write_access_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAILoginUrl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoginUrl::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_username_isSet) {
        obj.insert(QString("bot_username"), ::OpenAPI::toJsonValue(m_bot_username));
    }
    if (m_forward_text_isSet) {
        obj.insert(QString("forward_text"), ::OpenAPI::toJsonValue(m_forward_text));
    }
    if (m_request_write_access_isSet) {
        obj.insert(QString("request_write_access"), ::OpenAPI::toJsonValue(m_request_write_access));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAILoginUrl::getBotUsername() const {
    return m_bot_username;
}
void OAILoginUrl::setBotUsername(const QString &bot_username) {
    m_bot_username = bot_username;
    m_bot_username_isSet = true;
}

bool OAILoginUrl::is_bot_username_Set() const{
    return m_bot_username_isSet;
}

bool OAILoginUrl::is_bot_username_Valid() const{
    return m_bot_username_isValid;
}

QString OAILoginUrl::getForwardText() const {
    return m_forward_text;
}
void OAILoginUrl::setForwardText(const QString &forward_text) {
    m_forward_text = forward_text;
    m_forward_text_isSet = true;
}

bool OAILoginUrl::is_forward_text_Set() const{
    return m_forward_text_isSet;
}

bool OAILoginUrl::is_forward_text_Valid() const{
    return m_forward_text_isValid;
}

bool OAILoginUrl::isRequestWriteAccess() const {
    return m_request_write_access;
}
void OAILoginUrl::setRequestWriteAccess(const bool &request_write_access) {
    m_request_write_access = request_write_access;
    m_request_write_access_isSet = true;
}

bool OAILoginUrl::is_request_write_access_Set() const{
    return m_request_write_access_isSet;
}

bool OAILoginUrl::is_request_write_access_Valid() const{
    return m_request_write_access_isValid;
}

QString OAILoginUrl::getUrl() const {
    return m_url;
}
void OAILoginUrl::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILoginUrl::is_url_Set() const{
    return m_url_isSet;
}

bool OAILoginUrl::is_url_Valid() const{
    return m_url_isValid;
}

bool OAILoginUrl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_write_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoginUrl::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
