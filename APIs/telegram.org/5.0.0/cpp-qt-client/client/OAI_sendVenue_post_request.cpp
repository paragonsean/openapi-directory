/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_sendVenue_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_sendVenue_post_request::OAI_sendVenue_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_sendVenue_post_request::OAI_sendVenue_post_request() {
    this->initializeModel();
}

OAI_sendVenue_post_request::~OAI_sendVenue_post_request() {}

void OAI_sendVenue_post_request::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_allow_sending_without_reply_isSet = false;
    m_allow_sending_without_reply_isValid = false;

    m_chat_id_isSet = false;
    m_chat_id_isValid = false;

    m_disable_notification_isSet = false;
    m_disable_notification_isValid = false;

    m_foursquare_id_isSet = false;
    m_foursquare_id_isValid = false;

    m_foursquare_type_isSet = false;
    m_foursquare_type_isValid = false;

    m_google_place_id_isSet = false;
    m_google_place_id_isValid = false;

    m_google_place_type_isSet = false;
    m_google_place_type_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_reply_markup_isSet = false;
    m_reply_markup_isValid = false;

    m_reply_to_message_id_isSet = false;
    m_reply_to_message_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAI_sendVenue_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_sendVenue_post_request::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_allow_sending_without_reply_isValid = ::OpenAPI::fromJsonValue(m_allow_sending_without_reply, json[QString("allow_sending_without_reply")]);
    m_allow_sending_without_reply_isSet = !json[QString("allow_sending_without_reply")].isNull() && m_allow_sending_without_reply_isValid;

    m_chat_id_isValid = ::OpenAPI::fromJsonValue(m_chat_id, json[QString("chat_id")]);
    m_chat_id_isSet = !json[QString("chat_id")].isNull() && m_chat_id_isValid;

    m_disable_notification_isValid = ::OpenAPI::fromJsonValue(m_disable_notification, json[QString("disable_notification")]);
    m_disable_notification_isSet = !json[QString("disable_notification")].isNull() && m_disable_notification_isValid;

    m_foursquare_id_isValid = ::OpenAPI::fromJsonValue(m_foursquare_id, json[QString("foursquare_id")]);
    m_foursquare_id_isSet = !json[QString("foursquare_id")].isNull() && m_foursquare_id_isValid;

    m_foursquare_type_isValid = ::OpenAPI::fromJsonValue(m_foursquare_type, json[QString("foursquare_type")]);
    m_foursquare_type_isSet = !json[QString("foursquare_type")].isNull() && m_foursquare_type_isValid;

    m_google_place_id_isValid = ::OpenAPI::fromJsonValue(m_google_place_id, json[QString("google_place_id")]);
    m_google_place_id_isSet = !json[QString("google_place_id")].isNull() && m_google_place_id_isValid;

    m_google_place_type_isValid = ::OpenAPI::fromJsonValue(m_google_place_type, json[QString("google_place_type")]);
    m_google_place_type_isSet = !json[QString("google_place_type")].isNull() && m_google_place_type_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_reply_markup_isValid = ::OpenAPI::fromJsonValue(m_reply_markup, json[QString("reply_markup")]);
    m_reply_markup_isSet = !json[QString("reply_markup")].isNull() && m_reply_markup_isValid;

    m_reply_to_message_id_isValid = ::OpenAPI::fromJsonValue(m_reply_to_message_id, json[QString("reply_to_message_id")]);
    m_reply_to_message_id_isSet = !json[QString("reply_to_message_id")].isNull() && m_reply_to_message_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAI_sendVenue_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_sendVenue_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_allow_sending_without_reply_isSet) {
        obj.insert(QString("allow_sending_without_reply"), ::OpenAPI::toJsonValue(m_allow_sending_without_reply));
    }
    if (m_chat_id.isSet()) {
        obj.insert(QString("chat_id"), ::OpenAPI::toJsonValue(m_chat_id));
    }
    if (m_disable_notification_isSet) {
        obj.insert(QString("disable_notification"), ::OpenAPI::toJsonValue(m_disable_notification));
    }
    if (m_foursquare_id_isSet) {
        obj.insert(QString("foursquare_id"), ::OpenAPI::toJsonValue(m_foursquare_id));
    }
    if (m_foursquare_type_isSet) {
        obj.insert(QString("foursquare_type"), ::OpenAPI::toJsonValue(m_foursquare_type));
    }
    if (m_google_place_id_isSet) {
        obj.insert(QString("google_place_id"), ::OpenAPI::toJsonValue(m_google_place_id));
    }
    if (m_google_place_type_isSet) {
        obj.insert(QString("google_place_type"), ::OpenAPI::toJsonValue(m_google_place_type));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_reply_markup.isSet()) {
        obj.insert(QString("reply_markup"), ::OpenAPI::toJsonValue(m_reply_markup));
    }
    if (m_reply_to_message_id_isSet) {
        obj.insert(QString("reply_to_message_id"), ::OpenAPI::toJsonValue(m_reply_to_message_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAI_sendVenue_post_request::getAddress() const {
    return m_address;
}
void OAI_sendVenue_post_request::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAI_sendVenue_post_request::is_address_Set() const{
    return m_address_isSet;
}

bool OAI_sendVenue_post_request::is_address_Valid() const{
    return m_address_isValid;
}

bool OAI_sendVenue_post_request::isAllowSendingWithoutReply() const {
    return m_allow_sending_without_reply;
}
void OAI_sendVenue_post_request::setAllowSendingWithoutReply(const bool &allow_sending_without_reply) {
    m_allow_sending_without_reply = allow_sending_without_reply;
    m_allow_sending_without_reply_isSet = true;
}

bool OAI_sendVenue_post_request::is_allow_sending_without_reply_Set() const{
    return m_allow_sending_without_reply_isSet;
}

bool OAI_sendVenue_post_request::is_allow_sending_without_reply_Valid() const{
    return m_allow_sending_without_reply_isValid;
}

OAI_copyMessage_post_request_chat_id OAI_sendVenue_post_request::getChatId() const {
    return m_chat_id;
}
void OAI_sendVenue_post_request::setChatId(const OAI_copyMessage_post_request_chat_id &chat_id) {
    m_chat_id = chat_id;
    m_chat_id_isSet = true;
}

bool OAI_sendVenue_post_request::is_chat_id_Set() const{
    return m_chat_id_isSet;
}

bool OAI_sendVenue_post_request::is_chat_id_Valid() const{
    return m_chat_id_isValid;
}

bool OAI_sendVenue_post_request::isDisableNotification() const {
    return m_disable_notification;
}
void OAI_sendVenue_post_request::setDisableNotification(const bool &disable_notification) {
    m_disable_notification = disable_notification;
    m_disable_notification_isSet = true;
}

bool OAI_sendVenue_post_request::is_disable_notification_Set() const{
    return m_disable_notification_isSet;
}

bool OAI_sendVenue_post_request::is_disable_notification_Valid() const{
    return m_disable_notification_isValid;
}

QString OAI_sendVenue_post_request::getFoursquareId() const {
    return m_foursquare_id;
}
void OAI_sendVenue_post_request::setFoursquareId(const QString &foursquare_id) {
    m_foursquare_id = foursquare_id;
    m_foursquare_id_isSet = true;
}

bool OAI_sendVenue_post_request::is_foursquare_id_Set() const{
    return m_foursquare_id_isSet;
}

bool OAI_sendVenue_post_request::is_foursquare_id_Valid() const{
    return m_foursquare_id_isValid;
}

QString OAI_sendVenue_post_request::getFoursquareType() const {
    return m_foursquare_type;
}
void OAI_sendVenue_post_request::setFoursquareType(const QString &foursquare_type) {
    m_foursquare_type = foursquare_type;
    m_foursquare_type_isSet = true;
}

bool OAI_sendVenue_post_request::is_foursquare_type_Set() const{
    return m_foursquare_type_isSet;
}

bool OAI_sendVenue_post_request::is_foursquare_type_Valid() const{
    return m_foursquare_type_isValid;
}

QString OAI_sendVenue_post_request::getGooglePlaceId() const {
    return m_google_place_id;
}
void OAI_sendVenue_post_request::setGooglePlaceId(const QString &google_place_id) {
    m_google_place_id = google_place_id;
    m_google_place_id_isSet = true;
}

bool OAI_sendVenue_post_request::is_google_place_id_Set() const{
    return m_google_place_id_isSet;
}

bool OAI_sendVenue_post_request::is_google_place_id_Valid() const{
    return m_google_place_id_isValid;
}

QString OAI_sendVenue_post_request::getGooglePlaceType() const {
    return m_google_place_type;
}
void OAI_sendVenue_post_request::setGooglePlaceType(const QString &google_place_type) {
    m_google_place_type = google_place_type;
    m_google_place_type_isSet = true;
}

bool OAI_sendVenue_post_request::is_google_place_type_Set() const{
    return m_google_place_type_isSet;
}

bool OAI_sendVenue_post_request::is_google_place_type_Valid() const{
    return m_google_place_type_isValid;
}

double OAI_sendVenue_post_request::getLatitude() const {
    return m_latitude;
}
void OAI_sendVenue_post_request::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAI_sendVenue_post_request::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAI_sendVenue_post_request::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAI_sendVenue_post_request::getLongitude() const {
    return m_longitude;
}
void OAI_sendVenue_post_request::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAI_sendVenue_post_request::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAI_sendVenue_post_request::is_longitude_Valid() const{
    return m_longitude_isValid;
}

OAI_copyMessage_post_request_reply_markup OAI_sendVenue_post_request::getReplyMarkup() const {
    return m_reply_markup;
}
void OAI_sendVenue_post_request::setReplyMarkup(const OAI_copyMessage_post_request_reply_markup &reply_markup) {
    m_reply_markup = reply_markup;
    m_reply_markup_isSet = true;
}

bool OAI_sendVenue_post_request::is_reply_markup_Set() const{
    return m_reply_markup_isSet;
}

bool OAI_sendVenue_post_request::is_reply_markup_Valid() const{
    return m_reply_markup_isValid;
}

qint32 OAI_sendVenue_post_request::getReplyToMessageId() const {
    return m_reply_to_message_id;
}
void OAI_sendVenue_post_request::setReplyToMessageId(const qint32 &reply_to_message_id) {
    m_reply_to_message_id = reply_to_message_id;
    m_reply_to_message_id_isSet = true;
}

bool OAI_sendVenue_post_request::is_reply_to_message_id_Set() const{
    return m_reply_to_message_id_isSet;
}

bool OAI_sendVenue_post_request::is_reply_to_message_id_Valid() const{
    return m_reply_to_message_id_isValid;
}

QString OAI_sendVenue_post_request::getTitle() const {
    return m_title;
}
void OAI_sendVenue_post_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAI_sendVenue_post_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAI_sendVenue_post_request::is_title_Valid() const{
    return m_title_isValid;
}

bool OAI_sendVenue_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_sending_without_reply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foursquare_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foursquare_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_place_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_markup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_sendVenue_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_chat_id_isValid && m_latitude_isValid && m_longitude_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
