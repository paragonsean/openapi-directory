/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInlineQueryResultGif.h
 *
 * Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the animation.
 */

#ifndef OAIInlineQueryResultGif_H
#define OAIInlineQueryResultGif_H

#include <QJsonObject>

#include "OAIInlineKeyboardMarkup.h"
#include "OAIInputMessageContent.h"
#include "OAIMessageEntity.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMessageEntity;
class OAIInputMessageContent;
class OAIInlineKeyboardMarkup;

class OAIInlineQueryResultGif : public OAIObject {
public:
    OAIInlineQueryResultGif();
    OAIInlineQueryResultGif(QString json);
    ~OAIInlineQueryResultGif() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCaption() const;
    void setCaption(const QString &caption);
    bool is_caption_Set() const;
    bool is_caption_Valid() const;

    QList<OAIMessageEntity> getCaptionEntities() const;
    void setCaptionEntities(const QList<OAIMessageEntity> &caption_entities);
    bool is_caption_entities_Set() const;
    bool is_caption_entities_Valid() const;

    qint32 getGifDuration() const;
    void setGifDuration(const qint32 &gif_duration);
    bool is_gif_duration_Set() const;
    bool is_gif_duration_Valid() const;

    qint32 getGifHeight() const;
    void setGifHeight(const qint32 &gif_height);
    bool is_gif_height_Set() const;
    bool is_gif_height_Valid() const;

    QString getGifUrl() const;
    void setGifUrl(const QString &gif_url);
    bool is_gif_url_Set() const;
    bool is_gif_url_Valid() const;

    qint32 getGifWidth() const;
    void setGifWidth(const qint32 &gif_width);
    bool is_gif_width_Set() const;
    bool is_gif_width_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIInputMessageContent getInputMessageContent() const;
    void setInputMessageContent(const OAIInputMessageContent &input_message_content);
    bool is_input_message_content_Set() const;
    bool is_input_message_content_Valid() const;

    QString getParseMode() const;
    void setParseMode(const QString &parse_mode);
    bool is_parse_mode_Set() const;
    bool is_parse_mode_Valid() const;

    OAIInlineKeyboardMarkup getReplyMarkup() const;
    void setReplyMarkup(const OAIInlineKeyboardMarkup &reply_markup);
    bool is_reply_markup_Set() const;
    bool is_reply_markup_Valid() const;

    QString getThumbMimeType() const;
    void setThumbMimeType(const QString &thumb_mime_type);
    bool is_thumb_mime_type_Set() const;
    bool is_thumb_mime_type_Valid() const;

    QString getThumbUrl() const;
    void setThumbUrl(const QString &thumb_url);
    bool is_thumb_url_Set() const;
    bool is_thumb_url_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_caption;
    bool m_caption_isSet;
    bool m_caption_isValid;

    QList<OAIMessageEntity> m_caption_entities;
    bool m_caption_entities_isSet;
    bool m_caption_entities_isValid;

    qint32 m_gif_duration;
    bool m_gif_duration_isSet;
    bool m_gif_duration_isValid;

    qint32 m_gif_height;
    bool m_gif_height_isSet;
    bool m_gif_height_isValid;

    QString m_gif_url;
    bool m_gif_url_isSet;
    bool m_gif_url_isValid;

    qint32 m_gif_width;
    bool m_gif_width_isSet;
    bool m_gif_width_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIInputMessageContent m_input_message_content;
    bool m_input_message_content_isSet;
    bool m_input_message_content_isValid;

    QString m_parse_mode;
    bool m_parse_mode_isSet;
    bool m_parse_mode_isValid;

    OAIInlineKeyboardMarkup m_reply_markup;
    bool m_reply_markup_isSet;
    bool m_reply_markup_isValid;

    QString m_thumb_mime_type;
    bool m_thumb_mime_type_isSet;
    bool m_thumb_mime_type_isValid;

    QString m_thumb_url;
    bool m_thumb_url_isSet;
    bool m_thumb_url_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInlineQueryResultGif)

#endif // OAIInlineQueryResultGif_H
