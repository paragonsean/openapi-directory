/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_sendMediaGroup_post_request_media_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_sendMediaGroup_post_request_media_inner::OAI_sendMediaGroup_post_request_media_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_sendMediaGroup_post_request_media_inner::OAI_sendMediaGroup_post_request_media_inner() {
    this->initializeModel();
}

OAI_sendMediaGroup_post_request_media_inner::~OAI_sendMediaGroup_post_request_media_inner() {}

void OAI_sendMediaGroup_post_request_media_inner::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_caption_entities_isSet = false;
    m_caption_entities_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_parse_mode_isSet = false;
    m_parse_mode_isValid = false;

    m_performer_isSet = false;
    m_performer_isValid = false;

    m_thumb_isSet = false;
    m_thumb_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_disable_content_type_detection_isSet = false;
    m_disable_content_type_detection_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_supports_streaming_isSet = false;
    m_supports_streaming_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAI_sendMediaGroup_post_request_media_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_sendMediaGroup_post_request_media_inner::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_caption_entities_isValid = ::OpenAPI::fromJsonValue(m_caption_entities, json[QString("caption_entities")]);
    m_caption_entities_isSet = !json[QString("caption_entities")].isNull() && m_caption_entities_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_parse_mode_isValid = ::OpenAPI::fromJsonValue(m_parse_mode, json[QString("parse_mode")]);
    m_parse_mode_isSet = !json[QString("parse_mode")].isNull() && m_parse_mode_isValid;

    m_performer_isValid = ::OpenAPI::fromJsonValue(m_performer, json[QString("performer")]);
    m_performer_isSet = !json[QString("performer")].isNull() && m_performer_isValid;

    m_thumb_isValid = ::OpenAPI::fromJsonValue(m_thumb, json[QString("thumb")]);
    m_thumb_isSet = !json[QString("thumb")].isNull() && m_thumb_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_disable_content_type_detection_isValid = ::OpenAPI::fromJsonValue(m_disable_content_type_detection, json[QString("disable_content_type_detection")]);
    m_disable_content_type_detection_isSet = !json[QString("disable_content_type_detection")].isNull() && m_disable_content_type_detection_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_supports_streaming_isValid = ::OpenAPI::fromJsonValue(m_supports_streaming, json[QString("supports_streaming")]);
    m_supports_streaming_isSet = !json[QString("supports_streaming")].isNull() && m_supports_streaming_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAI_sendMediaGroup_post_request_media_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_sendMediaGroup_post_request_media_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_caption_entities.size() > 0) {
        obj.insert(QString("caption_entities"), ::OpenAPI::toJsonValue(m_caption_entities));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_media_isSet) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_parse_mode_isSet) {
        obj.insert(QString("parse_mode"), ::OpenAPI::toJsonValue(m_parse_mode));
    }
    if (m_performer_isSet) {
        obj.insert(QString("performer"), ::OpenAPI::toJsonValue(m_performer));
    }
    if (m_thumb_isSet) {
        obj.insert(QString("thumb"), ::OpenAPI::toJsonValue(m_thumb));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_disable_content_type_detection_isSet) {
        obj.insert(QString("disable_content_type_detection"), ::OpenAPI::toJsonValue(m_disable_content_type_detection));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_supports_streaming_isSet) {
        obj.insert(QString("supports_streaming"), ::OpenAPI::toJsonValue(m_supports_streaming));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAI_sendMediaGroup_post_request_media_inner::getCaption() const {
    return m_caption;
}
void OAI_sendMediaGroup_post_request_media_inner::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_caption_Valid() const{
    return m_caption_isValid;
}

QList<OAIMessageEntity> OAI_sendMediaGroup_post_request_media_inner::getCaptionEntities() const {
    return m_caption_entities;
}
void OAI_sendMediaGroup_post_request_media_inner::setCaptionEntities(const QList<OAIMessageEntity> &caption_entities) {
    m_caption_entities = caption_entities;
    m_caption_entities_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_caption_entities_Set() const{
    return m_caption_entities_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_caption_entities_Valid() const{
    return m_caption_entities_isValid;
}

qint32 OAI_sendMediaGroup_post_request_media_inner::getDuration() const {
    return m_duration;
}
void OAI_sendMediaGroup_post_request_media_inner::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAI_sendMediaGroup_post_request_media_inner::getMedia() const {
    return m_media;
}
void OAI_sendMediaGroup_post_request_media_inner::setMedia(const QString &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_media_Set() const{
    return m_media_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_media_Valid() const{
    return m_media_isValid;
}

QString OAI_sendMediaGroup_post_request_media_inner::getParseMode() const {
    return m_parse_mode;
}
void OAI_sendMediaGroup_post_request_media_inner::setParseMode(const QString &parse_mode) {
    m_parse_mode = parse_mode;
    m_parse_mode_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_parse_mode_Set() const{
    return m_parse_mode_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_parse_mode_Valid() const{
    return m_parse_mode_isValid;
}

QString OAI_sendMediaGroup_post_request_media_inner::getPerformer() const {
    return m_performer;
}
void OAI_sendMediaGroup_post_request_media_inner::setPerformer(const QString &performer) {
    m_performer = performer;
    m_performer_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_performer_Set() const{
    return m_performer_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_performer_Valid() const{
    return m_performer_isValid;
}

QString OAI_sendMediaGroup_post_request_media_inner::getThumb() const {
    return m_thumb;
}
void OAI_sendMediaGroup_post_request_media_inner::setThumb(const QString &thumb) {
    m_thumb = thumb;
    m_thumb_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_thumb_Set() const{
    return m_thumb_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_thumb_Valid() const{
    return m_thumb_isValid;
}

QString OAI_sendMediaGroup_post_request_media_inner::getTitle() const {
    return m_title;
}
void OAI_sendMediaGroup_post_request_media_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAI_sendMediaGroup_post_request_media_inner::getType() const {
    return m_type;
}
void OAI_sendMediaGroup_post_request_media_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAI_sendMediaGroup_post_request_media_inner::isDisableContentTypeDetection() const {
    return m_disable_content_type_detection;
}
void OAI_sendMediaGroup_post_request_media_inner::setDisableContentTypeDetection(const bool &disable_content_type_detection) {
    m_disable_content_type_detection = disable_content_type_detection;
    m_disable_content_type_detection_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_disable_content_type_detection_Set() const{
    return m_disable_content_type_detection_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_disable_content_type_detection_Valid() const{
    return m_disable_content_type_detection_isValid;
}

qint32 OAI_sendMediaGroup_post_request_media_inner::getHeight() const {
    return m_height;
}
void OAI_sendMediaGroup_post_request_media_inner::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_height_Set() const{
    return m_height_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_height_Valid() const{
    return m_height_isValid;
}

bool OAI_sendMediaGroup_post_request_media_inner::isSupportsStreaming() const {
    return m_supports_streaming;
}
void OAI_sendMediaGroup_post_request_media_inner::setSupportsStreaming(const bool &supports_streaming) {
    m_supports_streaming = supports_streaming;
    m_supports_streaming_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_supports_streaming_Set() const{
    return m_supports_streaming_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_supports_streaming_Valid() const{
    return m_supports_streaming_isValid;
}

qint32 OAI_sendMediaGroup_post_request_media_inner::getWidth() const {
    return m_width;
}
void OAI_sendMediaGroup_post_request_media_inner::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_width_Set() const{
    return m_width_isSet;
}

bool OAI_sendMediaGroup_post_request_media_inner::is_width_Valid() const{
    return m_width_isValid;
}

bool OAI_sendMediaGroup_post_request_media_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parse_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_content_type_detection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_streaming_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_sendMediaGroup_post_request_media_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_media_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
