/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInlineQueryResultContact.h
 *
 * Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the contact.
 */

#ifndef OAIInlineQueryResultContact_H
#define OAIInlineQueryResultContact_H

#include <QJsonObject>

#include "OAIInlineKeyboardMarkup.h"
#include "OAIInputMessageContent.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInputMessageContent;
class OAIInlineKeyboardMarkup;

class OAIInlineQueryResultContact : public OAIObject {
public:
    OAIInlineQueryResultContact();
    OAIInlineQueryResultContact(QString json);
    ~OAIInlineQueryResultContact() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFirstName() const;
    void setFirstName(const QString &first_name);
    bool is_first_name_Set() const;
    bool is_first_name_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIInputMessageContent getInputMessageContent() const;
    void setInputMessageContent(const OAIInputMessageContent &input_message_content);
    bool is_input_message_content_Set() const;
    bool is_input_message_content_Valid() const;

    QString getLastName() const;
    void setLastName(const QString &last_name);
    bool is_last_name_Set() const;
    bool is_last_name_Valid() const;

    QString getPhoneNumber() const;
    void setPhoneNumber(const QString &phone_number);
    bool is_phone_number_Set() const;
    bool is_phone_number_Valid() const;

    OAIInlineKeyboardMarkup getReplyMarkup() const;
    void setReplyMarkup(const OAIInlineKeyboardMarkup &reply_markup);
    bool is_reply_markup_Set() const;
    bool is_reply_markup_Valid() const;

    qint32 getThumbHeight() const;
    void setThumbHeight(const qint32 &thumb_height);
    bool is_thumb_height_Set() const;
    bool is_thumb_height_Valid() const;

    QString getThumbUrl() const;
    void setThumbUrl(const QString &thumb_url);
    bool is_thumb_url_Set() const;
    bool is_thumb_url_Valid() const;

    qint32 getThumbWidth() const;
    void setThumbWidth(const qint32 &thumb_width);
    bool is_thumb_width_Set() const;
    bool is_thumb_width_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getVcard() const;
    void setVcard(const QString &vcard);
    bool is_vcard_Set() const;
    bool is_vcard_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_first_name;
    bool m_first_name_isSet;
    bool m_first_name_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIInputMessageContent m_input_message_content;
    bool m_input_message_content_isSet;
    bool m_input_message_content_isValid;

    QString m_last_name;
    bool m_last_name_isSet;
    bool m_last_name_isValid;

    QString m_phone_number;
    bool m_phone_number_isSet;
    bool m_phone_number_isValid;

    OAIInlineKeyboardMarkup m_reply_markup;
    bool m_reply_markup_isSet;
    bool m_reply_markup_isValid;

    qint32 m_thumb_height;
    bool m_thumb_height_isSet;
    bool m_thumb_height_isValid;

    QString m_thumb_url;
    bool m_thumb_url_isSet;
    bool m_thumb_url_isValid;

    qint32 m_thumb_width;
    bool m_thumb_width_isSet;
    bool m_thumb_width_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_vcard;
    bool m_vcard_isSet;
    bool m_vcard_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInlineQueryResultContact)

#endif // OAIInlineQueryResultContact_H
