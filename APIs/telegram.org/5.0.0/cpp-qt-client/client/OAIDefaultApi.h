/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIInlineKeyboardMarkup.h"
#include "OAIInputMedia.h"
#include "OAIMaskPosition.h"
#include "OAIMessageEntity.h"
#include "OAI_addStickerToSet_post_200_response.h"
#include "OAI_answerCallbackQuery_post_request.h"
#include "OAI_answerInlineQuery_post_request.h"
#include "OAI_answerPreCheckoutQuery_post_request.h"
#include "OAI_answerShippingQuery_post_request.h"
#include "OAI_copyMessage_post_200_response.h"
#include "OAI_copyMessage_post_request.h"
#include "OAI_copyMessage_post_request_chat_id.h"
#include "OAI_copyMessage_post_request_reply_markup.h"
#include "OAI_deleteChatPhoto_post_request.h"
#include "OAI_deleteChatStickerSet_post_request.h"
#include "OAI_deleteMessage_post_request.h"
#include "OAI_deleteStickerFromSet_post_request.h"
#include "OAI_deleteWebhook_post_request.h"
#include "OAI_editMessageCaption_post_200_response.h"
#include "OAI_editMessageCaption_post_request.h"
#include "OAI_editMessageCaption_post_request_chat_id.h"
#include "OAI_editMessageLiveLocation_post_request.h"
#include "OAI_editMessageReplyMarkup_post_request.h"
#include "OAI_editMessageText_post_request.h"
#include "OAI_exportChatInviteLink_post_200_response.h"
#include "OAI_forwardMessage_post_200_response.h"
#include "OAI_forwardMessage_post_request.h"
#include "OAI_getChatAdministrators_post_200_response.h"
#include "OAI_getChatMember_post_200_response.h"
#include "OAI_getChatMember_post_request.h"
#include "OAI_getChatMembersCount_post_200_response.h"
#include "OAI_getChat_post_200_response.h"
#include "OAI_getChat_post_request.h"
#include "OAI_getFile_post_200_response.h"
#include "OAI_getFile_post_request.h"
#include "OAI_getGameHighScores_post_200_response.h"
#include "OAI_getGameHighScores_post_request.h"
#include "OAI_getMe_post_200_response.h"
#include "OAI_getMyCommands_post_200_response.h"
#include "OAI_getStickerSet_post_200_response.h"
#include "OAI_getStickerSet_post_request.h"
#include "OAI_getUpdates_post_200_response.h"
#include "OAI_getUpdates_post_request.h"
#include "OAI_getUserProfilePhotos_post_200_response.h"
#include "OAI_getUserProfilePhotos_post_request.h"
#include "OAI_getWebhookInfo_post_200_response.h"
#include "OAI_kickChatMember_post_request.h"
#include "OAI_pinChatMessage_post_request.h"
#include "OAI_promoteChatMember_post_request.h"
#include "OAI_restrictChatMember_post_request.h"
#include "OAI_sendChatAction_post_request.h"
#include "OAI_sendContact_post_request.h"
#include "OAI_sendDice_post_request.h"
#include "OAI_sendGame_post_request.h"
#include "OAI_sendInvoice_post_request.h"
#include "OAI_sendLocation_post_request.h"
#include "OAI_sendMediaGroup_post_200_response.h"
#include "OAI_sendMediaGroup_post_request_media_inner.h"
#include "OAI_sendMessage_post_request.h"
#include "OAI_sendPoll_post_request.h"
#include "OAI_sendVenue_post_request.h"
#include "OAI_setChatAdministratorCustomTitle_post_request.h"
#include "OAI_setChatDescription_post_request.h"
#include "OAI_setChatPermissions_post_request.h"
#include "OAI_setChatStickerSet_post_request.h"
#include "OAI_setChatTitle_post_request.h"
#include "OAI_setGameScore_post_request.h"
#include "OAI_setMyCommands_post_request.h"
#include "OAI_setPassportDataErrors_post_request.h"
#include "OAI_setStickerPositionInSet_post_request.h"
#include "OAI_stopMessageLiveLocation_post_request.h"
#include "OAI_stopPoll_post_200_response.h"
#include "OAI_stopPoll_post_request.h"
#include "OAI_unbanChatMember_post_request.h"
#include "OAI_unpinChatMessage_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  emojis QString [required]
    * @param[in]  name QString [required]
    * @param[in]  user_id qint32 [required]
    * @param[in]  mask_position OAIMaskPosition [optional]
    * @param[in]  png_sticker QString [optional]
    * @param[in]  tgs_sticker QJsonValue [optional]
    */
    virtual void addStickerToSetPost(const QString &emojis, const QString &name, const qint32 &user_id, const ::OpenAPI::OptionalParam<OAIMaskPosition> &mask_position = ::OpenAPI::OptionalParam<OAIMaskPosition>(), const ::OpenAPI::OptionalParam<QString> &png_sticker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QJsonValue> &tgs_sticker = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  oai_answer_callback_query_post_request OAI_answerCallbackQuery_post_request [required]
    */
    virtual void answerCallbackQueryPost(const OAI_answerCallbackQuery_post_request &oai_answer_callback_query_post_request);

    /**
    * @param[in]  oai_answer_inline_query_post_request OAI_answerInlineQuery_post_request [required]
    */
    virtual void answerInlineQueryPost(const OAI_answerInlineQuery_post_request &oai_answer_inline_query_post_request);

    /**
    * @param[in]  oai_answer_pre_checkout_query_post_request OAI_answerPreCheckoutQuery_post_request [required]
    */
    virtual void answerPreCheckoutQueryPost(const OAI_answerPreCheckoutQuery_post_request &oai_answer_pre_checkout_query_post_request);

    /**
    * @param[in]  oai_answer_shipping_query_post_request OAI_answerShippingQuery_post_request [required]
    */
    virtual void answerShippingQueryPost(const OAI_answerShippingQuery_post_request &oai_answer_shipping_query_post_request);


    virtual void closePost();

    /**
    * @param[in]  oai_copy_message_post_request OAI_copyMessage_post_request [required]
    */
    virtual void copyMessagePost(const OAI_copyMessage_post_request &oai_copy_message_post_request);

    /**
    * @param[in]  emojis QString [required]
    * @param[in]  name QString [required]
    * @param[in]  title QString [required]
    * @param[in]  user_id qint32 [required]
    * @param[in]  contains_masks bool [optional]
    * @param[in]  mask_position OAIMaskPosition [optional]
    * @param[in]  png_sticker QString [optional]
    * @param[in]  tgs_sticker QJsonValue [optional]
    */
    virtual void createNewStickerSetPost(const QString &emojis, const QString &name, const QString &title, const qint32 &user_id, const ::OpenAPI::OptionalParam<bool> &contains_masks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIMaskPosition> &mask_position = ::OpenAPI::OptionalParam<OAIMaskPosition>(), const ::OpenAPI::OptionalParam<QString> &png_sticker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QJsonValue> &tgs_sticker = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  oai_delete_chat_photo_post_request OAI_deleteChatPhoto_post_request [required]
    */
    virtual void deleteChatPhotoPost(const OAI_deleteChatPhoto_post_request &oai_delete_chat_photo_post_request);

    /**
    * @param[in]  oai_delete_chat_sticker_set_post_request OAI_deleteChatStickerSet_post_request [required]
    */
    virtual void deleteChatStickerSetPost(const OAI_deleteChatStickerSet_post_request &oai_delete_chat_sticker_set_post_request);

    /**
    * @param[in]  oai_delete_message_post_request OAI_deleteMessage_post_request [required]
    */
    virtual void deleteMessagePost(const OAI_deleteMessage_post_request &oai_delete_message_post_request);

    /**
    * @param[in]  oai_delete_sticker_from_set_post_request OAI_deleteStickerFromSet_post_request [required]
    */
    virtual void deleteStickerFromSetPost(const OAI_deleteStickerFromSet_post_request &oai_delete_sticker_from_set_post_request);

    /**
    * @param[in]  oai_delete_webhook_post_request OAI_deleteWebhook_post_request [required]
    */
    virtual void deleteWebhookPost(const OAI_deleteWebhook_post_request &oai_delete_webhook_post_request);

    /**
    * @param[in]  oai_edit_message_caption_post_request OAI_editMessageCaption_post_request [required]
    */
    virtual void editMessageCaptionPost(const OAI_editMessageCaption_post_request &oai_edit_message_caption_post_request);

    /**
    * @param[in]  oai_edit_message_live_location_post_request OAI_editMessageLiveLocation_post_request [required]
    */
    virtual void editMessageLiveLocationPost(const OAI_editMessageLiveLocation_post_request &oai_edit_message_live_location_post_request);

    /**
    * @param[in]  media OAIInputMedia [required]
    * @param[in]  chat_id OAI_editMessageCaption_post_request_chat_id [optional]
    * @param[in]  inline_message_id QString [optional]
    * @param[in]  message_id qint32 [optional]
    * @param[in]  reply_markup OAIInlineKeyboardMarkup [optional]
    */
    virtual void editMessageMediaPost(const OAIInputMedia &media, const ::OpenAPI::OptionalParam<OAI_editMessageCaption_post_request_chat_id> &chat_id = ::OpenAPI::OptionalParam<OAI_editMessageCaption_post_request_chat_id>(), const ::OpenAPI::OptionalParam<QString> &inline_message_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &message_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIInlineKeyboardMarkup> &reply_markup = ::OpenAPI::OptionalParam<OAIInlineKeyboardMarkup>());

    /**
    * @param[in]  oai_edit_message_reply_markup_post_request OAI_editMessageReplyMarkup_post_request [required]
    */
    virtual void editMessageReplyMarkupPost(const OAI_editMessageReplyMarkup_post_request &oai_edit_message_reply_markup_post_request);

    /**
    * @param[in]  oai_edit_message_text_post_request OAI_editMessageText_post_request [required]
    */
    virtual void editMessageTextPost(const OAI_editMessageText_post_request &oai_edit_message_text_post_request);

    /**
    * @param[in]  oai_delete_chat_photo_post_request OAI_deleteChatPhoto_post_request [required]
    */
    virtual void exportChatInviteLinkPost(const OAI_deleteChatPhoto_post_request &oai_delete_chat_photo_post_request);

    /**
    * @param[in]  oai_forward_message_post_request OAI_forwardMessage_post_request [required]
    */
    virtual void forwardMessagePost(const OAI_forwardMessage_post_request &oai_forward_message_post_request);

    /**
    * @param[in]  oai_get_chat_post_request OAI_getChat_post_request [required]
    */
    virtual void getChatAdministratorsPost(const OAI_getChat_post_request &oai_get_chat_post_request);

    /**
    * @param[in]  oai_get_chat_member_post_request OAI_getChatMember_post_request [required]
    */
    virtual void getChatMemberPost(const OAI_getChatMember_post_request &oai_get_chat_member_post_request);

    /**
    * @param[in]  oai_get_chat_post_request OAI_getChat_post_request [required]
    */
    virtual void getChatMembersCountPost(const OAI_getChat_post_request &oai_get_chat_post_request);

    /**
    * @param[in]  oai_get_chat_post_request OAI_getChat_post_request [required]
    */
    virtual void getChatPost(const OAI_getChat_post_request &oai_get_chat_post_request);

    /**
    * @param[in]  oai_get_file_post_request OAI_getFile_post_request [required]
    */
    virtual void getFilePost(const OAI_getFile_post_request &oai_get_file_post_request);

    /**
    * @param[in]  oai_get_game_high_scores_post_request OAI_getGameHighScores_post_request [required]
    */
    virtual void getGameHighScoresPost(const OAI_getGameHighScores_post_request &oai_get_game_high_scores_post_request);


    virtual void getMePost();


    virtual void getMyCommandsPost();

    /**
    * @param[in]  oai_get_sticker_set_post_request OAI_getStickerSet_post_request [required]
    */
    virtual void getStickerSetPost(const OAI_getStickerSet_post_request &oai_get_sticker_set_post_request);

    /**
    * @param[in]  oai_get_updates_post_request OAI_getUpdates_post_request [required]
    */
    virtual void getUpdatesPost(const OAI_getUpdates_post_request &oai_get_updates_post_request);

    /**
    * @param[in]  oai_get_user_profile_photos_post_request OAI_getUserProfilePhotos_post_request [required]
    */
    virtual void getUserProfilePhotosPost(const OAI_getUserProfilePhotos_post_request &oai_get_user_profile_photos_post_request);


    virtual void getWebhookInfoPost();

    /**
    * @param[in]  oai_kick_chat_member_post_request OAI_kickChatMember_post_request [required]
    */
    virtual void kickChatMemberPost(const OAI_kickChatMember_post_request &oai_kick_chat_member_post_request);

    /**
    * @param[in]  oai_get_chat_post_request OAI_getChat_post_request [required]
    */
    virtual void leaveChatPost(const OAI_getChat_post_request &oai_get_chat_post_request);


    virtual void logOutPost();

    /**
    * @param[in]  oai_pin_chat_message_post_request OAI_pinChatMessage_post_request [required]
    */
    virtual void pinChatMessagePost(const OAI_pinChatMessage_post_request &oai_pin_chat_message_post_request);

    /**
    * @param[in]  oai_promote_chat_member_post_request OAI_promoteChatMember_post_request [required]
    */
    virtual void promoteChatMemberPost(const OAI_promoteChatMember_post_request &oai_promote_chat_member_post_request);

    /**
    * @param[in]  oai_restrict_chat_member_post_request OAI_restrictChatMember_post_request [required]
    */
    virtual void restrictChatMemberPost(const OAI_restrictChatMember_post_request &oai_restrict_chat_member_post_request);

    /**
    * @param[in]  animation QString [required]
    * @param[in]  chat_id OAI_copyMessage_post_request_chat_id [required]
    * @param[in]  allow_sending_without_reply bool [optional]
    * @param[in]  caption QString [optional]
    * @param[in]  caption_entities QList<OAIMessageEntity> [optional]
    * @param[in]  disable_notification bool [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  parse_mode QString [optional]
    * @param[in]  reply_markup OAI_copyMessage_post_request_reply_markup [optional]
    * @param[in]  reply_to_message_id qint32 [optional]
    * @param[in]  thumb QString [optional]
    * @param[in]  width qint32 [optional]
    */
    virtual void sendAnimationPost(const QString &animation, const OAI_copyMessage_post_request_chat_id &chat_id, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &caption = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities = ::OpenAPI::OptionalParam<QList<OAIMessageEntity>>(), const ::OpenAPI::OptionalParam<bool> &disable_notification = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &parse_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup = ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup>(), const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &thumb = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  audio QString [required]
    * @param[in]  chat_id OAI_copyMessage_post_request_chat_id [required]
    * @param[in]  allow_sending_without_reply bool [optional]
    * @param[in]  caption QString [optional]
    * @param[in]  caption_entities QList<OAIMessageEntity> [optional]
    * @param[in]  disable_notification bool [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  parse_mode QString [optional]
    * @param[in]  performer QString [optional]
    * @param[in]  reply_markup OAI_copyMessage_post_request_reply_markup [optional]
    * @param[in]  reply_to_message_id qint32 [optional]
    * @param[in]  thumb QString [optional]
    * @param[in]  title QString [optional]
    */
    virtual void sendAudioPost(const QString &audio, const OAI_copyMessage_post_request_chat_id &chat_id, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &caption = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities = ::OpenAPI::OptionalParam<QList<OAIMessageEntity>>(), const ::OpenAPI::OptionalParam<bool> &disable_notification = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &parse_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &performer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup = ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup>(), const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &thumb = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_send_chat_action_post_request OAI_sendChatAction_post_request [required]
    */
    virtual void sendChatActionPost(const OAI_sendChatAction_post_request &oai_send_chat_action_post_request);

    /**
    * @param[in]  oai_send_contact_post_request OAI_sendContact_post_request [required]
    */
    virtual void sendContactPost(const OAI_sendContact_post_request &oai_send_contact_post_request);

    /**
    * @param[in]  oai_send_dice_post_request OAI_sendDice_post_request [required]
    */
    virtual void sendDicePost(const OAI_sendDice_post_request &oai_send_dice_post_request);

    /**
    * @param[in]  chat_id OAI_copyMessage_post_request_chat_id [required]
    * @param[in]  document QString [required]
    * @param[in]  allow_sending_without_reply bool [optional]
    * @param[in]  caption QString [optional]
    * @param[in]  caption_entities QList<OAIMessageEntity> [optional]
    * @param[in]  disable_content_type_detection bool [optional]
    * @param[in]  disable_notification bool [optional]
    * @param[in]  parse_mode QString [optional]
    * @param[in]  reply_markup OAI_copyMessage_post_request_reply_markup [optional]
    * @param[in]  reply_to_message_id qint32 [optional]
    * @param[in]  thumb QString [optional]
    */
    virtual void sendDocumentPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &document, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &caption = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities = ::OpenAPI::OptionalParam<QList<OAIMessageEntity>>(), const ::OpenAPI::OptionalParam<bool> &disable_content_type_detection = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &disable_notification = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &parse_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup = ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup>(), const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &thumb = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_send_game_post_request OAI_sendGame_post_request [required]
    */
    virtual void sendGamePost(const OAI_sendGame_post_request &oai_send_game_post_request);

    /**
    * @param[in]  oai_send_invoice_post_request OAI_sendInvoice_post_request [required]
    */
    virtual void sendInvoicePost(const OAI_sendInvoice_post_request &oai_send_invoice_post_request);

    /**
    * @param[in]  oai_send_location_post_request OAI_sendLocation_post_request [required]
    */
    virtual void sendLocationPost(const OAI_sendLocation_post_request &oai_send_location_post_request);

    /**
    * @param[in]  chat_id OAI_copyMessage_post_request_chat_id [required]
    * @param[in]  media QList<OAI_sendMediaGroup_post_request_media_inner> [required]
    * @param[in]  allow_sending_without_reply bool [optional]
    * @param[in]  disable_notification bool [optional]
    * @param[in]  reply_to_message_id qint32 [optional]
    */
    virtual void sendMediaGroupPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QList<OAI_sendMediaGroup_post_request_media_inner> &media, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &disable_notification = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_send_message_post_request OAI_sendMessage_post_request [required]
    */
    virtual void sendMessagePost(const OAI_sendMessage_post_request &oai_send_message_post_request);

    /**
    * @param[in]  chat_id OAI_copyMessage_post_request_chat_id [required]
    * @param[in]  photo QString [required]
    * @param[in]  allow_sending_without_reply bool [optional]
    * @param[in]  caption QString [optional]
    * @param[in]  caption_entities QList<OAIMessageEntity> [optional]
    * @param[in]  disable_notification bool [optional]
    * @param[in]  parse_mode QString [optional]
    * @param[in]  reply_markup OAI_copyMessage_post_request_reply_markup [optional]
    * @param[in]  reply_to_message_id qint32 [optional]
    */
    virtual void sendPhotoPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &photo, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &caption = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities = ::OpenAPI::OptionalParam<QList<OAIMessageEntity>>(), const ::OpenAPI::OptionalParam<bool> &disable_notification = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &parse_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup = ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup>(), const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_send_poll_post_request OAI_sendPoll_post_request [required]
    */
    virtual void sendPollPost(const OAI_sendPoll_post_request &oai_send_poll_post_request);

    /**
    * @param[in]  chat_id OAI_copyMessage_post_request_chat_id [required]
    * @param[in]  sticker QString [required]
    * @param[in]  allow_sending_without_reply bool [optional]
    * @param[in]  disable_notification bool [optional]
    * @param[in]  reply_markup OAI_copyMessage_post_request_reply_markup [optional]
    * @param[in]  reply_to_message_id qint32 [optional]
    */
    virtual void sendStickerPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &sticker, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &disable_notification = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup = ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup>(), const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_send_venue_post_request OAI_sendVenue_post_request [required]
    */
    virtual void sendVenuePost(const OAI_sendVenue_post_request &oai_send_venue_post_request);

    /**
    * @param[in]  chat_id OAI_copyMessage_post_request_chat_id [required]
    * @param[in]  video_note QString [required]
    * @param[in]  allow_sending_without_reply bool [optional]
    * @param[in]  disable_notification bool [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  length qint32 [optional]
    * @param[in]  reply_markup OAI_copyMessage_post_request_reply_markup [optional]
    * @param[in]  reply_to_message_id qint32 [optional]
    * @param[in]  thumb QString [optional]
    */
    virtual void sendVideoNotePost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &video_note, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &disable_notification = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup = ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup>(), const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &thumb = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_id OAI_copyMessage_post_request_chat_id [required]
    * @param[in]  video QString [required]
    * @param[in]  allow_sending_without_reply bool [optional]
    * @param[in]  caption QString [optional]
    * @param[in]  caption_entities QList<OAIMessageEntity> [optional]
    * @param[in]  disable_notification bool [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  parse_mode QString [optional]
    * @param[in]  reply_markup OAI_copyMessage_post_request_reply_markup [optional]
    * @param[in]  reply_to_message_id qint32 [optional]
    * @param[in]  supports_streaming bool [optional]
    * @param[in]  thumb QString [optional]
    * @param[in]  width qint32 [optional]
    */
    virtual void sendVideoPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &video, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &caption = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities = ::OpenAPI::OptionalParam<QList<OAIMessageEntity>>(), const ::OpenAPI::OptionalParam<bool> &disable_notification = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &parse_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup = ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup>(), const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &supports_streaming = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &thumb = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  chat_id OAI_copyMessage_post_request_chat_id [required]
    * @param[in]  voice QString [required]
    * @param[in]  allow_sending_without_reply bool [optional]
    * @param[in]  caption QString [optional]
    * @param[in]  caption_entities QList<OAIMessageEntity> [optional]
    * @param[in]  disable_notification bool [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  parse_mode QString [optional]
    * @param[in]  reply_markup OAI_copyMessage_post_request_reply_markup [optional]
    * @param[in]  reply_to_message_id qint32 [optional]
    */
    virtual void sendVoicePost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &voice, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &caption = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities = ::OpenAPI::OptionalParam<QList<OAIMessageEntity>>(), const ::OpenAPI::OptionalParam<bool> &disable_notification = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &parse_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup = ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup>(), const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_set_chat_administrator_custom_title_post_request OAI_setChatAdministratorCustomTitle_post_request [required]
    */
    virtual void setChatAdministratorCustomTitlePost(const OAI_setChatAdministratorCustomTitle_post_request &oai_set_chat_administrator_custom_title_post_request);

    /**
    * @param[in]  oai_set_chat_description_post_request OAI_setChatDescription_post_request [required]
    */
    virtual void setChatDescriptionPost(const OAI_setChatDescription_post_request &oai_set_chat_description_post_request);

    /**
    * @param[in]  oai_set_chat_permissions_post_request OAI_setChatPermissions_post_request [required]
    */
    virtual void setChatPermissionsPost(const OAI_setChatPermissions_post_request &oai_set_chat_permissions_post_request);

    /**
    * @param[in]  chat_id OAI_copyMessage_post_request_chat_id [required]
    * @param[in]  photo QJsonValue [required]
    */
    virtual void setChatPhotoPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QJsonValue &photo);

    /**
    * @param[in]  oai_set_chat_sticker_set_post_request OAI_setChatStickerSet_post_request [required]
    */
    virtual void setChatStickerSetPost(const OAI_setChatStickerSet_post_request &oai_set_chat_sticker_set_post_request);

    /**
    * @param[in]  oai_set_chat_title_post_request OAI_setChatTitle_post_request [required]
    */
    virtual void setChatTitlePost(const OAI_setChatTitle_post_request &oai_set_chat_title_post_request);

    /**
    * @param[in]  oai_set_game_score_post_request OAI_setGameScore_post_request [required]
    */
    virtual void setGameScorePost(const OAI_setGameScore_post_request &oai_set_game_score_post_request);

    /**
    * @param[in]  oai_set_my_commands_post_request OAI_setMyCommands_post_request [required]
    */
    virtual void setMyCommandsPost(const OAI_setMyCommands_post_request &oai_set_my_commands_post_request);

    /**
    * @param[in]  oai_set_passport_data_errors_post_request OAI_setPassportDataErrors_post_request [required]
    */
    virtual void setPassportDataErrorsPost(const OAI_setPassportDataErrors_post_request &oai_set_passport_data_errors_post_request);

    /**
    * @param[in]  oai_set_sticker_position_in_set_post_request OAI_setStickerPositionInSet_post_request [required]
    */
    virtual void setStickerPositionInSetPost(const OAI_setStickerPositionInSet_post_request &oai_set_sticker_position_in_set_post_request);

    /**
    * @param[in]  name QString [required]
    * @param[in]  user_id qint32 [required]
    * @param[in]  thumb QString [optional]
    */
    virtual void setStickerSetThumbPost(const QString &name, const qint32 &user_id, const ::OpenAPI::OptionalParam<QString> &thumb = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  allowed_updates QList<QString> [optional]
    * @param[in]  certificate QJsonValue [optional]
    * @param[in]  drop_pending_updates bool [optional]
    * @param[in]  ip_address QString [optional]
    * @param[in]  max_connections qint32 [optional]
    */
    virtual void setWebhookPost(const QString &url, const ::OpenAPI::OptionalParam<QList<QString>> &allowed_updates = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QJsonValue> &certificate = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<bool> &drop_pending_updates = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_connections = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_stop_message_live_location_post_request OAI_stopMessageLiveLocation_post_request [required]
    */
    virtual void stopMessageLiveLocationPost(const OAI_stopMessageLiveLocation_post_request &oai_stop_message_live_location_post_request);

    /**
    * @param[in]  oai_stop_poll_post_request OAI_stopPoll_post_request [required]
    */
    virtual void stopPollPost(const OAI_stopPoll_post_request &oai_stop_poll_post_request);

    /**
    * @param[in]  oai_unban_chat_member_post_request OAI_unbanChatMember_post_request [required]
    */
    virtual void unbanChatMemberPost(const OAI_unbanChatMember_post_request &oai_unban_chat_member_post_request);

    /**
    * @param[in]  oai_delete_chat_photo_post_request OAI_deleteChatPhoto_post_request [required]
    */
    virtual void unpinAllChatMessagesPost(const OAI_deleteChatPhoto_post_request &oai_delete_chat_photo_post_request);

    /**
    * @param[in]  oai_unpin_chat_message_post_request OAI_unpinChatMessage_post_request [required]
    */
    virtual void unpinChatMessagePost(const OAI_unpinChatMessage_post_request &oai_unpin_chat_message_post_request);

    /**
    * @param[in]  png_sticker QJsonValue [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void uploadStickerFilePost(const QJsonValue &png_sticker, const qint32 &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addStickerToSetPostCallback(OAIHttpRequestWorker *worker);
    void answerCallbackQueryPostCallback(OAIHttpRequestWorker *worker);
    void answerInlineQueryPostCallback(OAIHttpRequestWorker *worker);
    void answerPreCheckoutQueryPostCallback(OAIHttpRequestWorker *worker);
    void answerShippingQueryPostCallback(OAIHttpRequestWorker *worker);
    void closePostCallback(OAIHttpRequestWorker *worker);
    void copyMessagePostCallback(OAIHttpRequestWorker *worker);
    void createNewStickerSetPostCallback(OAIHttpRequestWorker *worker);
    void deleteChatPhotoPostCallback(OAIHttpRequestWorker *worker);
    void deleteChatStickerSetPostCallback(OAIHttpRequestWorker *worker);
    void deleteMessagePostCallback(OAIHttpRequestWorker *worker);
    void deleteStickerFromSetPostCallback(OAIHttpRequestWorker *worker);
    void deleteWebhookPostCallback(OAIHttpRequestWorker *worker);
    void editMessageCaptionPostCallback(OAIHttpRequestWorker *worker);
    void editMessageLiveLocationPostCallback(OAIHttpRequestWorker *worker);
    void editMessageMediaPostCallback(OAIHttpRequestWorker *worker);
    void editMessageReplyMarkupPostCallback(OAIHttpRequestWorker *worker);
    void editMessageTextPostCallback(OAIHttpRequestWorker *worker);
    void exportChatInviteLinkPostCallback(OAIHttpRequestWorker *worker);
    void forwardMessagePostCallback(OAIHttpRequestWorker *worker);
    void getChatAdministratorsPostCallback(OAIHttpRequestWorker *worker);
    void getChatMemberPostCallback(OAIHttpRequestWorker *worker);
    void getChatMembersCountPostCallback(OAIHttpRequestWorker *worker);
    void getChatPostCallback(OAIHttpRequestWorker *worker);
    void getFilePostCallback(OAIHttpRequestWorker *worker);
    void getGameHighScoresPostCallback(OAIHttpRequestWorker *worker);
    void getMePostCallback(OAIHttpRequestWorker *worker);
    void getMyCommandsPostCallback(OAIHttpRequestWorker *worker);
    void getStickerSetPostCallback(OAIHttpRequestWorker *worker);
    void getUpdatesPostCallback(OAIHttpRequestWorker *worker);
    void getUserProfilePhotosPostCallback(OAIHttpRequestWorker *worker);
    void getWebhookInfoPostCallback(OAIHttpRequestWorker *worker);
    void kickChatMemberPostCallback(OAIHttpRequestWorker *worker);
    void leaveChatPostCallback(OAIHttpRequestWorker *worker);
    void logOutPostCallback(OAIHttpRequestWorker *worker);
    void pinChatMessagePostCallback(OAIHttpRequestWorker *worker);
    void promoteChatMemberPostCallback(OAIHttpRequestWorker *worker);
    void restrictChatMemberPostCallback(OAIHttpRequestWorker *worker);
    void sendAnimationPostCallback(OAIHttpRequestWorker *worker);
    void sendAudioPostCallback(OAIHttpRequestWorker *worker);
    void sendChatActionPostCallback(OAIHttpRequestWorker *worker);
    void sendContactPostCallback(OAIHttpRequestWorker *worker);
    void sendDicePostCallback(OAIHttpRequestWorker *worker);
    void sendDocumentPostCallback(OAIHttpRequestWorker *worker);
    void sendGamePostCallback(OAIHttpRequestWorker *worker);
    void sendInvoicePostCallback(OAIHttpRequestWorker *worker);
    void sendLocationPostCallback(OAIHttpRequestWorker *worker);
    void sendMediaGroupPostCallback(OAIHttpRequestWorker *worker);
    void sendMessagePostCallback(OAIHttpRequestWorker *worker);
    void sendPhotoPostCallback(OAIHttpRequestWorker *worker);
    void sendPollPostCallback(OAIHttpRequestWorker *worker);
    void sendStickerPostCallback(OAIHttpRequestWorker *worker);
    void sendVenuePostCallback(OAIHttpRequestWorker *worker);
    void sendVideoNotePostCallback(OAIHttpRequestWorker *worker);
    void sendVideoPostCallback(OAIHttpRequestWorker *worker);
    void sendVoicePostCallback(OAIHttpRequestWorker *worker);
    void setChatAdministratorCustomTitlePostCallback(OAIHttpRequestWorker *worker);
    void setChatDescriptionPostCallback(OAIHttpRequestWorker *worker);
    void setChatPermissionsPostCallback(OAIHttpRequestWorker *worker);
    void setChatPhotoPostCallback(OAIHttpRequestWorker *worker);
    void setChatStickerSetPostCallback(OAIHttpRequestWorker *worker);
    void setChatTitlePostCallback(OAIHttpRequestWorker *worker);
    void setGameScorePostCallback(OAIHttpRequestWorker *worker);
    void setMyCommandsPostCallback(OAIHttpRequestWorker *worker);
    void setPassportDataErrorsPostCallback(OAIHttpRequestWorker *worker);
    void setStickerPositionInSetPostCallback(OAIHttpRequestWorker *worker);
    void setStickerSetThumbPostCallback(OAIHttpRequestWorker *worker);
    void setWebhookPostCallback(OAIHttpRequestWorker *worker);
    void stopMessageLiveLocationPostCallback(OAIHttpRequestWorker *worker);
    void stopPollPostCallback(OAIHttpRequestWorker *worker);
    void unbanChatMemberPostCallback(OAIHttpRequestWorker *worker);
    void unpinAllChatMessagesPostCallback(OAIHttpRequestWorker *worker);
    void unpinChatMessagePostCallback(OAIHttpRequestWorker *worker);
    void uploadStickerFilePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addStickerToSetPostSignal(OAI_addStickerToSet_post_200_response summary);
    void answerCallbackQueryPostSignal(OAI_addStickerToSet_post_200_response summary);
    void answerInlineQueryPostSignal(OAI_addStickerToSet_post_200_response summary);
    void answerPreCheckoutQueryPostSignal(OAI_addStickerToSet_post_200_response summary);
    void answerShippingQueryPostSignal(OAI_addStickerToSet_post_200_response summary);
    void closePostSignal(OAI_addStickerToSet_post_200_response summary);
    void copyMessagePostSignal(OAI_copyMessage_post_200_response summary);
    void createNewStickerSetPostSignal(OAI_addStickerToSet_post_200_response summary);
    void deleteChatPhotoPostSignal(OAI_addStickerToSet_post_200_response summary);
    void deleteChatStickerSetPostSignal(OAI_addStickerToSet_post_200_response summary);
    void deleteMessagePostSignal(OAI_addStickerToSet_post_200_response summary);
    void deleteStickerFromSetPostSignal(OAI_addStickerToSet_post_200_response summary);
    void deleteWebhookPostSignal(OAI_addStickerToSet_post_200_response summary);
    void editMessageCaptionPostSignal(OAI_editMessageCaption_post_200_response summary);
    void editMessageLiveLocationPostSignal(OAI_editMessageCaption_post_200_response summary);
    void editMessageMediaPostSignal(OAI_editMessageCaption_post_200_response summary);
    void editMessageReplyMarkupPostSignal(OAI_editMessageCaption_post_200_response summary);
    void editMessageTextPostSignal(OAI_editMessageCaption_post_200_response summary);
    void exportChatInviteLinkPostSignal(OAI_exportChatInviteLink_post_200_response summary);
    void forwardMessagePostSignal(OAI_forwardMessage_post_200_response summary);
    void getChatAdministratorsPostSignal(OAI_getChatAdministrators_post_200_response summary);
    void getChatMemberPostSignal(OAI_getChatMember_post_200_response summary);
    void getChatMembersCountPostSignal(OAI_getChatMembersCount_post_200_response summary);
    void getChatPostSignal(OAI_getChat_post_200_response summary);
    void getFilePostSignal(OAI_getFile_post_200_response summary);
    void getGameHighScoresPostSignal(OAI_getGameHighScores_post_200_response summary);
    void getMePostSignal(OAI_getMe_post_200_response summary);
    void getMyCommandsPostSignal(OAI_getMyCommands_post_200_response summary);
    void getStickerSetPostSignal(OAI_getStickerSet_post_200_response summary);
    void getUpdatesPostSignal(OAI_getUpdates_post_200_response summary);
    void getUserProfilePhotosPostSignal(OAI_getUserProfilePhotos_post_200_response summary);
    void getWebhookInfoPostSignal(OAI_getWebhookInfo_post_200_response summary);
    void kickChatMemberPostSignal(OAI_addStickerToSet_post_200_response summary);
    void leaveChatPostSignal(OAI_addStickerToSet_post_200_response summary);
    void logOutPostSignal(OAI_addStickerToSet_post_200_response summary);
    void pinChatMessagePostSignal(OAI_addStickerToSet_post_200_response summary);
    void promoteChatMemberPostSignal(OAI_addStickerToSet_post_200_response summary);
    void restrictChatMemberPostSignal(OAI_addStickerToSet_post_200_response summary);
    void sendAnimationPostSignal(OAI_forwardMessage_post_200_response summary);
    void sendAudioPostSignal(OAI_forwardMessage_post_200_response summary);
    void sendChatActionPostSignal(OAI_addStickerToSet_post_200_response summary);
    void sendContactPostSignal(OAI_forwardMessage_post_200_response summary);
    void sendDicePostSignal(OAI_forwardMessage_post_200_response summary);
    void sendDocumentPostSignal(OAI_forwardMessage_post_200_response summary);
    void sendGamePostSignal(OAI_forwardMessage_post_200_response summary);
    void sendInvoicePostSignal(OAI_forwardMessage_post_200_response summary);
    void sendLocationPostSignal(OAI_forwardMessage_post_200_response summary);
    void sendMediaGroupPostSignal(OAI_sendMediaGroup_post_200_response summary);
    void sendMessagePostSignal(OAI_forwardMessage_post_200_response summary);
    void sendPhotoPostSignal(OAI_forwardMessage_post_200_response summary);
    void sendPollPostSignal(OAI_forwardMessage_post_200_response summary);
    void sendStickerPostSignal(OAI_forwardMessage_post_200_response summary);
    void sendVenuePostSignal(OAI_forwardMessage_post_200_response summary);
    void sendVideoNotePostSignal(OAI_forwardMessage_post_200_response summary);
    void sendVideoPostSignal(OAI_forwardMessage_post_200_response summary);
    void sendVoicePostSignal(OAI_forwardMessage_post_200_response summary);
    void setChatAdministratorCustomTitlePostSignal(OAI_addStickerToSet_post_200_response summary);
    void setChatDescriptionPostSignal(OAI_addStickerToSet_post_200_response summary);
    void setChatPermissionsPostSignal(OAI_addStickerToSet_post_200_response summary);
    void setChatPhotoPostSignal(OAI_addStickerToSet_post_200_response summary);
    void setChatStickerSetPostSignal(OAI_addStickerToSet_post_200_response summary);
    void setChatTitlePostSignal(OAI_addStickerToSet_post_200_response summary);
    void setGameScorePostSignal(OAI_editMessageCaption_post_200_response summary);
    void setMyCommandsPostSignal(OAI_addStickerToSet_post_200_response summary);
    void setPassportDataErrorsPostSignal(OAI_addStickerToSet_post_200_response summary);
    void setStickerPositionInSetPostSignal(OAI_addStickerToSet_post_200_response summary);
    void setStickerSetThumbPostSignal(OAI_addStickerToSet_post_200_response summary);
    void setWebhookPostSignal(OAI_addStickerToSet_post_200_response summary);
    void stopMessageLiveLocationPostSignal(OAI_editMessageCaption_post_200_response summary);
    void stopPollPostSignal(OAI_stopPoll_post_200_response summary);
    void unbanChatMemberPostSignal(OAI_addStickerToSet_post_200_response summary);
    void unpinAllChatMessagesPostSignal(OAI_addStickerToSet_post_200_response summary);
    void unpinChatMessagePostSignal(OAI_addStickerToSet_post_200_response summary);
    void uploadStickerFilePostSignal(OAI_getFile_post_200_response summary);


    void addStickerToSetPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void answerCallbackQueryPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void answerInlineQueryPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void answerPreCheckoutQueryPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void answerShippingQueryPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void closePostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void copyMessagePostSignalFull(OAIHttpRequestWorker *worker, OAI_copyMessage_post_200_response summary);
    void createNewStickerSetPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void deleteChatPhotoPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void deleteChatStickerSetPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void deleteMessagePostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void deleteStickerFromSetPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void deleteWebhookPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void editMessageCaptionPostSignalFull(OAIHttpRequestWorker *worker, OAI_editMessageCaption_post_200_response summary);
    void editMessageLiveLocationPostSignalFull(OAIHttpRequestWorker *worker, OAI_editMessageCaption_post_200_response summary);
    void editMessageMediaPostSignalFull(OAIHttpRequestWorker *worker, OAI_editMessageCaption_post_200_response summary);
    void editMessageReplyMarkupPostSignalFull(OAIHttpRequestWorker *worker, OAI_editMessageCaption_post_200_response summary);
    void editMessageTextPostSignalFull(OAIHttpRequestWorker *worker, OAI_editMessageCaption_post_200_response summary);
    void exportChatInviteLinkPostSignalFull(OAIHttpRequestWorker *worker, OAI_exportChatInviteLink_post_200_response summary);
    void forwardMessagePostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void getChatAdministratorsPostSignalFull(OAIHttpRequestWorker *worker, OAI_getChatAdministrators_post_200_response summary);
    void getChatMemberPostSignalFull(OAIHttpRequestWorker *worker, OAI_getChatMember_post_200_response summary);
    void getChatMembersCountPostSignalFull(OAIHttpRequestWorker *worker, OAI_getChatMembersCount_post_200_response summary);
    void getChatPostSignalFull(OAIHttpRequestWorker *worker, OAI_getChat_post_200_response summary);
    void getFilePostSignalFull(OAIHttpRequestWorker *worker, OAI_getFile_post_200_response summary);
    void getGameHighScoresPostSignalFull(OAIHttpRequestWorker *worker, OAI_getGameHighScores_post_200_response summary);
    void getMePostSignalFull(OAIHttpRequestWorker *worker, OAI_getMe_post_200_response summary);
    void getMyCommandsPostSignalFull(OAIHttpRequestWorker *worker, OAI_getMyCommands_post_200_response summary);
    void getStickerSetPostSignalFull(OAIHttpRequestWorker *worker, OAI_getStickerSet_post_200_response summary);
    void getUpdatesPostSignalFull(OAIHttpRequestWorker *worker, OAI_getUpdates_post_200_response summary);
    void getUserProfilePhotosPostSignalFull(OAIHttpRequestWorker *worker, OAI_getUserProfilePhotos_post_200_response summary);
    void getWebhookInfoPostSignalFull(OAIHttpRequestWorker *worker, OAI_getWebhookInfo_post_200_response summary);
    void kickChatMemberPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void leaveChatPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void logOutPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void pinChatMessagePostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void promoteChatMemberPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void restrictChatMemberPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void sendAnimationPostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendAudioPostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendChatActionPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void sendContactPostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendDicePostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendDocumentPostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendGamePostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendInvoicePostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendLocationPostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendMediaGroupPostSignalFull(OAIHttpRequestWorker *worker, OAI_sendMediaGroup_post_200_response summary);
    void sendMessagePostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendPhotoPostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendPollPostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendStickerPostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendVenuePostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendVideoNotePostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendVideoPostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void sendVoicePostSignalFull(OAIHttpRequestWorker *worker, OAI_forwardMessage_post_200_response summary);
    void setChatAdministratorCustomTitlePostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void setChatDescriptionPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void setChatPermissionsPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void setChatPhotoPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void setChatStickerSetPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void setChatTitlePostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void setGameScorePostSignalFull(OAIHttpRequestWorker *worker, OAI_editMessageCaption_post_200_response summary);
    void setMyCommandsPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void setPassportDataErrorsPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void setStickerPositionInSetPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void setStickerSetThumbPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void setWebhookPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void stopMessageLiveLocationPostSignalFull(OAIHttpRequestWorker *worker, OAI_editMessageCaption_post_200_response summary);
    void stopPollPostSignalFull(OAIHttpRequestWorker *worker, OAI_stopPoll_post_200_response summary);
    void unbanChatMemberPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void unpinAllChatMessagesPostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void unpinChatMessagePostSignalFull(OAIHttpRequestWorker *worker, OAI_addStickerToSet_post_200_response summary);
    void uploadStickerFilePostSignalFull(OAIHttpRequestWorker *worker, OAI_getFile_post_200_response summary);

    Q_DECL_DEPRECATED_X("Use addStickerToSetPostSignalError() instead")
    void addStickerToSetPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addStickerToSetPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answerCallbackQueryPostSignalError() instead")
    void answerCallbackQueryPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void answerCallbackQueryPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answerInlineQueryPostSignalError() instead")
    void answerInlineQueryPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void answerInlineQueryPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answerPreCheckoutQueryPostSignalError() instead")
    void answerPreCheckoutQueryPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void answerPreCheckoutQueryPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answerShippingQueryPostSignalError() instead")
    void answerShippingQueryPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void answerShippingQueryPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use closePostSignalError() instead")
    void closePostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void closePostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyMessagePostSignalError() instead")
    void copyMessagePostSignalE(OAI_copyMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copyMessagePostSignalError(OAI_copyMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNewStickerSetPostSignalError() instead")
    void createNewStickerSetPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNewStickerSetPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChatPhotoPostSignalError() instead")
    void deleteChatPhotoPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChatPhotoPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChatStickerSetPostSignalError() instead")
    void deleteChatStickerSetPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChatStickerSetPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMessagePostSignalError() instead")
    void deleteMessagePostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessagePostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStickerFromSetPostSignalError() instead")
    void deleteStickerFromSetPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStickerFromSetPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhookPostSignalError() instead")
    void deleteWebhookPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editMessageCaptionPostSignalError() instead")
    void editMessageCaptionPostSignalE(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editMessageCaptionPostSignalError(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editMessageLiveLocationPostSignalError() instead")
    void editMessageLiveLocationPostSignalE(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editMessageLiveLocationPostSignalError(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editMessageMediaPostSignalError() instead")
    void editMessageMediaPostSignalE(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editMessageMediaPostSignalError(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editMessageReplyMarkupPostSignalError() instead")
    void editMessageReplyMarkupPostSignalE(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editMessageReplyMarkupPostSignalError(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editMessageTextPostSignalError() instead")
    void editMessageTextPostSignalE(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editMessageTextPostSignalError(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportChatInviteLinkPostSignalError() instead")
    void exportChatInviteLinkPostSignalE(OAI_exportChatInviteLink_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportChatInviteLinkPostSignalError(OAI_exportChatInviteLink_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forwardMessagePostSignalError() instead")
    void forwardMessagePostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forwardMessagePostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatAdministratorsPostSignalError() instead")
    void getChatAdministratorsPostSignalE(OAI_getChatAdministrators_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatAdministratorsPostSignalError(OAI_getChatAdministrators_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatMemberPostSignalError() instead")
    void getChatMemberPostSignalE(OAI_getChatMember_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatMemberPostSignalError(OAI_getChatMember_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatMembersCountPostSignalError() instead")
    void getChatMembersCountPostSignalE(OAI_getChatMembersCount_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatMembersCountPostSignalError(OAI_getChatMembersCount_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatPostSignalError() instead")
    void getChatPostSignalE(OAI_getChat_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatPostSignalError(OAI_getChat_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilePostSignalError() instead")
    void getFilePostSignalE(OAI_getFile_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilePostSignalError(OAI_getFile_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGameHighScoresPostSignalError() instead")
    void getGameHighScoresPostSignalE(OAI_getGameHighScores_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGameHighScoresPostSignalError(OAI_getGameHighScores_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMePostSignalError() instead")
    void getMePostSignalE(OAI_getMe_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMePostSignalError(OAI_getMe_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyCommandsPostSignalError() instead")
    void getMyCommandsPostSignalE(OAI_getMyCommands_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyCommandsPostSignalError(OAI_getMyCommands_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStickerSetPostSignalError() instead")
    void getStickerSetPostSignalE(OAI_getStickerSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStickerSetPostSignalError(OAI_getStickerSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpdatesPostSignalError() instead")
    void getUpdatesPostSignalE(OAI_getUpdates_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdatesPostSignalError(OAI_getUpdates_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserProfilePhotosPostSignalError() instead")
    void getUserProfilePhotosPostSignalE(OAI_getUserProfilePhotos_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserProfilePhotosPostSignalError(OAI_getUserProfilePhotos_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhookInfoPostSignalError() instead")
    void getWebhookInfoPostSignalE(OAI_getWebhookInfo_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookInfoPostSignalError(OAI_getWebhookInfo_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kickChatMemberPostSignalError() instead")
    void kickChatMemberPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kickChatMemberPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaveChatPostSignalError() instead")
    void leaveChatPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void leaveChatPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logOutPostSignalError() instead")
    void logOutPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logOutPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pinChatMessagePostSignalError() instead")
    void pinChatMessagePostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pinChatMessagePostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use promoteChatMemberPostSignalError() instead")
    void promoteChatMemberPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void promoteChatMemberPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restrictChatMemberPostSignalError() instead")
    void restrictChatMemberPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restrictChatMemberPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendAnimationPostSignalError() instead")
    void sendAnimationPostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendAnimationPostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendAudioPostSignalError() instead")
    void sendAudioPostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendAudioPostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendChatActionPostSignalError() instead")
    void sendChatActionPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendChatActionPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendContactPostSignalError() instead")
    void sendContactPostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendContactPostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendDicePostSignalError() instead")
    void sendDicePostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendDicePostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendDocumentPostSignalError() instead")
    void sendDocumentPostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendDocumentPostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendGamePostSignalError() instead")
    void sendGamePostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendGamePostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendInvoicePostSignalError() instead")
    void sendInvoicePostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendInvoicePostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendLocationPostSignalError() instead")
    void sendLocationPostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendLocationPostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMediaGroupPostSignalError() instead")
    void sendMediaGroupPostSignalE(OAI_sendMediaGroup_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMediaGroupPostSignalError(OAI_sendMediaGroup_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessagePostSignalError() instead")
    void sendMessagePostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessagePostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPhotoPostSignalError() instead")
    void sendPhotoPostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendPhotoPostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPollPostSignalError() instead")
    void sendPollPostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendPollPostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendStickerPostSignalError() instead")
    void sendStickerPostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendStickerPostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendVenuePostSignalError() instead")
    void sendVenuePostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendVenuePostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendVideoNotePostSignalError() instead")
    void sendVideoNotePostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendVideoNotePostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendVideoPostSignalError() instead")
    void sendVideoPostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendVideoPostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendVoicePostSignalError() instead")
    void sendVoicePostSignalE(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendVoicePostSignalError(OAI_forwardMessage_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatAdministratorCustomTitlePostSignalError() instead")
    void setChatAdministratorCustomTitlePostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatAdministratorCustomTitlePostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatDescriptionPostSignalError() instead")
    void setChatDescriptionPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatDescriptionPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatPermissionsPostSignalError() instead")
    void setChatPermissionsPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatPermissionsPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatPhotoPostSignalError() instead")
    void setChatPhotoPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatPhotoPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatStickerSetPostSignalError() instead")
    void setChatStickerSetPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatStickerSetPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatTitlePostSignalError() instead")
    void setChatTitlePostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatTitlePostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setGameScorePostSignalError() instead")
    void setGameScorePostSignalE(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setGameScorePostSignalError(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setMyCommandsPostSignalError() instead")
    void setMyCommandsPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setMyCommandsPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPassportDataErrorsPostSignalError() instead")
    void setPassportDataErrorsPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setPassportDataErrorsPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStickerPositionInSetPostSignalError() instead")
    void setStickerPositionInSetPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setStickerPositionInSetPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStickerSetThumbPostSignalError() instead")
    void setStickerSetThumbPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setStickerSetThumbPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setWebhookPostSignalError() instead")
    void setWebhookPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setWebhookPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopMessageLiveLocationPostSignalError() instead")
    void stopMessageLiveLocationPostSignalE(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopMessageLiveLocationPostSignalError(OAI_editMessageCaption_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPollPostSignalError() instead")
    void stopPollPostSignalE(OAI_stopPoll_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPollPostSignalError(OAI_stopPoll_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unbanChatMemberPostSignalError() instead")
    void unbanChatMemberPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unbanChatMemberPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpinAllChatMessagesPostSignalError() instead")
    void unpinAllChatMessagesPostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unpinAllChatMessagesPostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpinChatMessagePostSignalError() instead")
    void unpinChatMessagePostSignalE(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unpinChatMessagePostSignalError(OAI_addStickerToSet_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadStickerFilePostSignalError() instead")
    void uploadStickerFilePostSignalE(OAI_getFile_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadStickerFilePostSignalError(OAI_getFile_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addStickerToSetPostSignalErrorFull() instead")
    void addStickerToSetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addStickerToSetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answerCallbackQueryPostSignalErrorFull() instead")
    void answerCallbackQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void answerCallbackQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answerInlineQueryPostSignalErrorFull() instead")
    void answerInlineQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void answerInlineQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answerPreCheckoutQueryPostSignalErrorFull() instead")
    void answerPreCheckoutQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void answerPreCheckoutQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answerShippingQueryPostSignalErrorFull() instead")
    void answerShippingQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void answerShippingQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use closePostSignalErrorFull() instead")
    void closePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void closePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyMessagePostSignalErrorFull() instead")
    void copyMessagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyMessagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNewStickerSetPostSignalErrorFull() instead")
    void createNewStickerSetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNewStickerSetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChatPhotoPostSignalErrorFull() instead")
    void deleteChatPhotoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChatPhotoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChatStickerSetPostSignalErrorFull() instead")
    void deleteChatStickerSetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChatStickerSetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMessagePostSignalErrorFull() instead")
    void deleteMessagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStickerFromSetPostSignalErrorFull() instead")
    void deleteStickerFromSetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStickerFromSetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhookPostSignalErrorFull() instead")
    void deleteWebhookPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editMessageCaptionPostSignalErrorFull() instead")
    void editMessageCaptionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editMessageCaptionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editMessageLiveLocationPostSignalErrorFull() instead")
    void editMessageLiveLocationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editMessageLiveLocationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editMessageMediaPostSignalErrorFull() instead")
    void editMessageMediaPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editMessageMediaPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editMessageReplyMarkupPostSignalErrorFull() instead")
    void editMessageReplyMarkupPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editMessageReplyMarkupPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editMessageTextPostSignalErrorFull() instead")
    void editMessageTextPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editMessageTextPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportChatInviteLinkPostSignalErrorFull() instead")
    void exportChatInviteLinkPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportChatInviteLinkPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forwardMessagePostSignalErrorFull() instead")
    void forwardMessagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forwardMessagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatAdministratorsPostSignalErrorFull() instead")
    void getChatAdministratorsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatAdministratorsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatMemberPostSignalErrorFull() instead")
    void getChatMemberPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatMemberPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatMembersCountPostSignalErrorFull() instead")
    void getChatMembersCountPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatMembersCountPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatPostSignalErrorFull() instead")
    void getChatPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilePostSignalErrorFull() instead")
    void getFilePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGameHighScoresPostSignalErrorFull() instead")
    void getGameHighScoresPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGameHighScoresPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMePostSignalErrorFull() instead")
    void getMePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyCommandsPostSignalErrorFull() instead")
    void getMyCommandsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyCommandsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStickerSetPostSignalErrorFull() instead")
    void getStickerSetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStickerSetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpdatesPostSignalErrorFull() instead")
    void getUpdatesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdatesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserProfilePhotosPostSignalErrorFull() instead")
    void getUserProfilePhotosPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserProfilePhotosPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhookInfoPostSignalErrorFull() instead")
    void getWebhookInfoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookInfoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kickChatMemberPostSignalErrorFull() instead")
    void kickChatMemberPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kickChatMemberPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaveChatPostSignalErrorFull() instead")
    void leaveChatPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaveChatPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logOutPostSignalErrorFull() instead")
    void logOutPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logOutPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pinChatMessagePostSignalErrorFull() instead")
    void pinChatMessagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pinChatMessagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use promoteChatMemberPostSignalErrorFull() instead")
    void promoteChatMemberPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void promoteChatMemberPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restrictChatMemberPostSignalErrorFull() instead")
    void restrictChatMemberPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restrictChatMemberPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendAnimationPostSignalErrorFull() instead")
    void sendAnimationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendAnimationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendAudioPostSignalErrorFull() instead")
    void sendAudioPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendAudioPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendChatActionPostSignalErrorFull() instead")
    void sendChatActionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendChatActionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendContactPostSignalErrorFull() instead")
    void sendContactPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendContactPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendDicePostSignalErrorFull() instead")
    void sendDicePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendDicePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendDocumentPostSignalErrorFull() instead")
    void sendDocumentPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendDocumentPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendGamePostSignalErrorFull() instead")
    void sendGamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendGamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendInvoicePostSignalErrorFull() instead")
    void sendInvoicePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendInvoicePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendLocationPostSignalErrorFull() instead")
    void sendLocationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendLocationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMediaGroupPostSignalErrorFull() instead")
    void sendMediaGroupPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMediaGroupPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessagePostSignalErrorFull() instead")
    void sendMessagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPhotoPostSignalErrorFull() instead")
    void sendPhotoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendPhotoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPollPostSignalErrorFull() instead")
    void sendPollPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendPollPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendStickerPostSignalErrorFull() instead")
    void sendStickerPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendStickerPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendVenuePostSignalErrorFull() instead")
    void sendVenuePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendVenuePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendVideoNotePostSignalErrorFull() instead")
    void sendVideoNotePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendVideoNotePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendVideoPostSignalErrorFull() instead")
    void sendVideoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendVideoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendVoicePostSignalErrorFull() instead")
    void sendVoicePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendVoicePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatAdministratorCustomTitlePostSignalErrorFull() instead")
    void setChatAdministratorCustomTitlePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatAdministratorCustomTitlePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatDescriptionPostSignalErrorFull() instead")
    void setChatDescriptionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatDescriptionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatPermissionsPostSignalErrorFull() instead")
    void setChatPermissionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatPermissionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatPhotoPostSignalErrorFull() instead")
    void setChatPhotoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatPhotoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatStickerSetPostSignalErrorFull() instead")
    void setChatStickerSetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatStickerSetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChatTitlePostSignalErrorFull() instead")
    void setChatTitlePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setChatTitlePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setGameScorePostSignalErrorFull() instead")
    void setGameScorePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setGameScorePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setMyCommandsPostSignalErrorFull() instead")
    void setMyCommandsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setMyCommandsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPassportDataErrorsPostSignalErrorFull() instead")
    void setPassportDataErrorsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPassportDataErrorsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStickerPositionInSetPostSignalErrorFull() instead")
    void setStickerPositionInSetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setStickerPositionInSetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStickerSetThumbPostSignalErrorFull() instead")
    void setStickerSetThumbPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setStickerSetThumbPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setWebhookPostSignalErrorFull() instead")
    void setWebhookPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setWebhookPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopMessageLiveLocationPostSignalErrorFull() instead")
    void stopMessageLiveLocationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopMessageLiveLocationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPollPostSignalErrorFull() instead")
    void stopPollPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPollPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unbanChatMemberPostSignalErrorFull() instead")
    void unbanChatMemberPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unbanChatMemberPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpinAllChatMessagesPostSignalErrorFull() instead")
    void unpinAllChatMessagesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unpinAllChatMessagesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpinChatMessagePostSignalErrorFull() instead")
    void unpinChatMessagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unpinChatMessagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadStickerFilePostSignalErrorFull() instead")
    void uploadStickerFilePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadStickerFilePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
