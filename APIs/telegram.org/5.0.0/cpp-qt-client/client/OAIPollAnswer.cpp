/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPollAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPollAnswer::OAIPollAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPollAnswer::OAIPollAnswer() {
    this->initializeModel();
}

OAIPollAnswer::~OAIPollAnswer() {}

void OAIPollAnswer::initializeModel() {

    m_option_ids_isSet = false;
    m_option_ids_isValid = false;

    m_poll_id_isSet = false;
    m_poll_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIPollAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPollAnswer::fromJsonObject(QJsonObject json) {

    m_option_ids_isValid = ::OpenAPI::fromJsonValue(m_option_ids, json[QString("option_ids")]);
    m_option_ids_isSet = !json[QString("option_ids")].isNull() && m_option_ids_isValid;

    m_poll_id_isValid = ::OpenAPI::fromJsonValue(m_poll_id, json[QString("poll_id")]);
    m_poll_id_isSet = !json[QString("poll_id")].isNull() && m_poll_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIPollAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPollAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_option_ids.size() > 0) {
        obj.insert(QString("option_ids"), ::OpenAPI::toJsonValue(m_option_ids));
    }
    if (m_poll_id_isSet) {
        obj.insert(QString("poll_id"), ::OpenAPI::toJsonValue(m_poll_id));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<qint32> OAIPollAnswer::getOptionIds() const {
    return m_option_ids;
}
void OAIPollAnswer::setOptionIds(const QList<qint32> &option_ids) {
    m_option_ids = option_ids;
    m_option_ids_isSet = true;
}

bool OAIPollAnswer::is_option_ids_Set() const{
    return m_option_ids_isSet;
}

bool OAIPollAnswer::is_option_ids_Valid() const{
    return m_option_ids_isValid;
}

QString OAIPollAnswer::getPollId() const {
    return m_poll_id;
}
void OAIPollAnswer::setPollId(const QString &poll_id) {
    m_poll_id = poll_id;
    m_poll_id_isSet = true;
}

bool OAIPollAnswer::is_poll_id_Set() const{
    return m_poll_id_isSet;
}

bool OAIPollAnswer::is_poll_id_Valid() const{
    return m_poll_id_isValid;
}

OAIUser OAIPollAnswer::getUser() const {
    return m_user;
}
void OAIPollAnswer::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPollAnswer::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPollAnswer::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIPollAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_option_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPollAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_option_ids_isValid && m_poll_id_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
