/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDefaultApi::OAIDefaultApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDefaultApi::~OAIDefaultApi() {
}

void OAIDefaultApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.telegram.org/bot{token}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"token", OAIServerVariable("Each bot is given a unique authentication token when it is created.","123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11",
    QSet<QString>{ {"123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"} })}, }));
    
    _serverConfigs.insert("addStickerToSetPost", defaultConf);
    _serverIndices.insert("addStickerToSetPost", 0);
    _serverConfigs.insert("answerCallbackQueryPost", defaultConf);
    _serverIndices.insert("answerCallbackQueryPost", 0);
    _serverConfigs.insert("answerInlineQueryPost", defaultConf);
    _serverIndices.insert("answerInlineQueryPost", 0);
    _serverConfigs.insert("answerPreCheckoutQueryPost", defaultConf);
    _serverIndices.insert("answerPreCheckoutQueryPost", 0);
    _serverConfigs.insert("answerShippingQueryPost", defaultConf);
    _serverIndices.insert("answerShippingQueryPost", 0);
    _serverConfigs.insert("closePost", defaultConf);
    _serverIndices.insert("closePost", 0);
    _serverConfigs.insert("copyMessagePost", defaultConf);
    _serverIndices.insert("copyMessagePost", 0);
    _serverConfigs.insert("createNewStickerSetPost", defaultConf);
    _serverIndices.insert("createNewStickerSetPost", 0);
    _serverConfigs.insert("deleteChatPhotoPost", defaultConf);
    _serverIndices.insert("deleteChatPhotoPost", 0);
    _serverConfigs.insert("deleteChatStickerSetPost", defaultConf);
    _serverIndices.insert("deleteChatStickerSetPost", 0);
    _serverConfigs.insert("deleteMessagePost", defaultConf);
    _serverIndices.insert("deleteMessagePost", 0);
    _serverConfigs.insert("deleteStickerFromSetPost", defaultConf);
    _serverIndices.insert("deleteStickerFromSetPost", 0);
    _serverConfigs.insert("deleteWebhookPost", defaultConf);
    _serverIndices.insert("deleteWebhookPost", 0);
    _serverConfigs.insert("editMessageCaptionPost", defaultConf);
    _serverIndices.insert("editMessageCaptionPost", 0);
    _serverConfigs.insert("editMessageLiveLocationPost", defaultConf);
    _serverIndices.insert("editMessageLiveLocationPost", 0);
    _serverConfigs.insert("editMessageMediaPost", defaultConf);
    _serverIndices.insert("editMessageMediaPost", 0);
    _serverConfigs.insert("editMessageReplyMarkupPost", defaultConf);
    _serverIndices.insert("editMessageReplyMarkupPost", 0);
    _serverConfigs.insert("editMessageTextPost", defaultConf);
    _serverIndices.insert("editMessageTextPost", 0);
    _serverConfigs.insert("exportChatInviteLinkPost", defaultConf);
    _serverIndices.insert("exportChatInviteLinkPost", 0);
    _serverConfigs.insert("forwardMessagePost", defaultConf);
    _serverIndices.insert("forwardMessagePost", 0);
    _serverConfigs.insert("getChatAdministratorsPost", defaultConf);
    _serverIndices.insert("getChatAdministratorsPost", 0);
    _serverConfigs.insert("getChatMemberPost", defaultConf);
    _serverIndices.insert("getChatMemberPost", 0);
    _serverConfigs.insert("getChatMembersCountPost", defaultConf);
    _serverIndices.insert("getChatMembersCountPost", 0);
    _serverConfigs.insert("getChatPost", defaultConf);
    _serverIndices.insert("getChatPost", 0);
    _serverConfigs.insert("getFilePost", defaultConf);
    _serverIndices.insert("getFilePost", 0);
    _serverConfigs.insert("getGameHighScoresPost", defaultConf);
    _serverIndices.insert("getGameHighScoresPost", 0);
    _serverConfigs.insert("getMePost", defaultConf);
    _serverIndices.insert("getMePost", 0);
    _serverConfigs.insert("getMyCommandsPost", defaultConf);
    _serverIndices.insert("getMyCommandsPost", 0);
    _serverConfigs.insert("getStickerSetPost", defaultConf);
    _serverIndices.insert("getStickerSetPost", 0);
    _serverConfigs.insert("getUpdatesPost", defaultConf);
    _serverIndices.insert("getUpdatesPost", 0);
    _serverConfigs.insert("getUserProfilePhotosPost", defaultConf);
    _serverIndices.insert("getUserProfilePhotosPost", 0);
    _serverConfigs.insert("getWebhookInfoPost", defaultConf);
    _serverIndices.insert("getWebhookInfoPost", 0);
    _serverConfigs.insert("kickChatMemberPost", defaultConf);
    _serverIndices.insert("kickChatMemberPost", 0);
    _serverConfigs.insert("leaveChatPost", defaultConf);
    _serverIndices.insert("leaveChatPost", 0);
    _serverConfigs.insert("logOutPost", defaultConf);
    _serverIndices.insert("logOutPost", 0);
    _serverConfigs.insert("pinChatMessagePost", defaultConf);
    _serverIndices.insert("pinChatMessagePost", 0);
    _serverConfigs.insert("promoteChatMemberPost", defaultConf);
    _serverIndices.insert("promoteChatMemberPost", 0);
    _serverConfigs.insert("restrictChatMemberPost", defaultConf);
    _serverIndices.insert("restrictChatMemberPost", 0);
    _serverConfigs.insert("sendAnimationPost", defaultConf);
    _serverIndices.insert("sendAnimationPost", 0);
    _serverConfigs.insert("sendAudioPost", defaultConf);
    _serverIndices.insert("sendAudioPost", 0);
    _serverConfigs.insert("sendChatActionPost", defaultConf);
    _serverIndices.insert("sendChatActionPost", 0);
    _serverConfigs.insert("sendContactPost", defaultConf);
    _serverIndices.insert("sendContactPost", 0);
    _serverConfigs.insert("sendDicePost", defaultConf);
    _serverIndices.insert("sendDicePost", 0);
    _serverConfigs.insert("sendDocumentPost", defaultConf);
    _serverIndices.insert("sendDocumentPost", 0);
    _serverConfigs.insert("sendGamePost", defaultConf);
    _serverIndices.insert("sendGamePost", 0);
    _serverConfigs.insert("sendInvoicePost", defaultConf);
    _serverIndices.insert("sendInvoicePost", 0);
    _serverConfigs.insert("sendLocationPost", defaultConf);
    _serverIndices.insert("sendLocationPost", 0);
    _serverConfigs.insert("sendMediaGroupPost", defaultConf);
    _serverIndices.insert("sendMediaGroupPost", 0);
    _serverConfigs.insert("sendMessagePost", defaultConf);
    _serverIndices.insert("sendMessagePost", 0);
    _serverConfigs.insert("sendPhotoPost", defaultConf);
    _serverIndices.insert("sendPhotoPost", 0);
    _serverConfigs.insert("sendPollPost", defaultConf);
    _serverIndices.insert("sendPollPost", 0);
    _serverConfigs.insert("sendStickerPost", defaultConf);
    _serverIndices.insert("sendStickerPost", 0);
    _serverConfigs.insert("sendVenuePost", defaultConf);
    _serverIndices.insert("sendVenuePost", 0);
    _serverConfigs.insert("sendVideoNotePost", defaultConf);
    _serverIndices.insert("sendVideoNotePost", 0);
    _serverConfigs.insert("sendVideoPost", defaultConf);
    _serverIndices.insert("sendVideoPost", 0);
    _serverConfigs.insert("sendVoicePost", defaultConf);
    _serverIndices.insert("sendVoicePost", 0);
    _serverConfigs.insert("setChatAdministratorCustomTitlePost", defaultConf);
    _serverIndices.insert("setChatAdministratorCustomTitlePost", 0);
    _serverConfigs.insert("setChatDescriptionPost", defaultConf);
    _serverIndices.insert("setChatDescriptionPost", 0);
    _serverConfigs.insert("setChatPermissionsPost", defaultConf);
    _serverIndices.insert("setChatPermissionsPost", 0);
    _serverConfigs.insert("setChatPhotoPost", defaultConf);
    _serverIndices.insert("setChatPhotoPost", 0);
    _serverConfigs.insert("setChatStickerSetPost", defaultConf);
    _serverIndices.insert("setChatStickerSetPost", 0);
    _serverConfigs.insert("setChatTitlePost", defaultConf);
    _serverIndices.insert("setChatTitlePost", 0);
    _serverConfigs.insert("setGameScorePost", defaultConf);
    _serverIndices.insert("setGameScorePost", 0);
    _serverConfigs.insert("setMyCommandsPost", defaultConf);
    _serverIndices.insert("setMyCommandsPost", 0);
    _serverConfigs.insert("setPassportDataErrorsPost", defaultConf);
    _serverIndices.insert("setPassportDataErrorsPost", 0);
    _serverConfigs.insert("setStickerPositionInSetPost", defaultConf);
    _serverIndices.insert("setStickerPositionInSetPost", 0);
    _serverConfigs.insert("setStickerSetThumbPost", defaultConf);
    _serverIndices.insert("setStickerSetThumbPost", 0);
    _serverConfigs.insert("setWebhookPost", defaultConf);
    _serverIndices.insert("setWebhookPost", 0);
    _serverConfigs.insert("stopMessageLiveLocationPost", defaultConf);
    _serverIndices.insert("stopMessageLiveLocationPost", 0);
    _serverConfigs.insert("stopPollPost", defaultConf);
    _serverIndices.insert("stopPollPost", 0);
    _serverConfigs.insert("unbanChatMemberPost", defaultConf);
    _serverIndices.insert("unbanChatMemberPost", 0);
    _serverConfigs.insert("unpinAllChatMessagesPost", defaultConf);
    _serverIndices.insert("unpinAllChatMessagesPost", 0);
    _serverConfigs.insert("unpinChatMessagePost", defaultConf);
    _serverIndices.insert("unpinChatMessagePost", 0);
    _serverConfigs.insert("uploadStickerFilePost", defaultConf);
    _serverIndices.insert("uploadStickerFilePost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDefaultApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDefaultApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDefaultApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDefaultApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDefaultApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDefaultApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDefaultApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDefaultApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDefaultApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDefaultApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDefaultApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDefaultApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDefaultApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDefaultApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDefaultApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDefaultApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDefaultApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDefaultApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDefaultApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDefaultApi::addStickerToSetPost(const QString &emojis, const QString &name, const qint32 &user_id, const ::OpenAPI::OptionalParam<OAIMaskPosition> &mask_position, const ::OpenAPI::OptionalParam<QString> &png_sticker, const ::OpenAPI::OptionalParam<QJsonValue> &tgs_sticker) {
    QString fullPath = QString(_serverConfigs["addStickerToSetPost"][_serverIndices.value("addStickerToSetPost")].URL()+"/addStickerToSet");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("emojis", ::OpenAPI::toStringValue(emojis));
    }
    if (mask_position.hasValue())
    {
        input.add_var("mask_position", ::OpenAPI::toStringValue(mask_position.value()));
    }
    
    {
        input.add_var("name", ::OpenAPI::toStringValue(name));
    }
    if (png_sticker.hasValue())
    {
        input.add_var("png_sticker", ::OpenAPI::toStringValue(png_sticker.value()));
    }
    if (tgs_sticker.hasValue())
    {
        input.add_var("tgs_sticker", ::OpenAPI::toStringValue(tgs_sticker.value()));
    }
    
    {
        input.add_var("user_id", ::OpenAPI::toStringValue(user_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::addStickerToSetPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::addStickerToSetPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT addStickerToSetPostSignal(output);
        Q_EMIT addStickerToSetPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT addStickerToSetPostSignalE(output, error_type, error_str);
        Q_EMIT addStickerToSetPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT addStickerToSetPostSignalError(output, error_type, error_str);
        Q_EMIT addStickerToSetPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::answerCallbackQueryPost(const OAI_answerCallbackQuery_post_request &oai_answer_callback_query_post_request) {
    QString fullPath = QString(_serverConfigs["answerCallbackQueryPost"][_serverIndices.value("answerCallbackQueryPost")].URL()+"/answerCallbackQuery");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_answer_callback_query_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::answerCallbackQueryPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::answerCallbackQueryPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT answerCallbackQueryPostSignal(output);
        Q_EMIT answerCallbackQueryPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT answerCallbackQueryPostSignalE(output, error_type, error_str);
        Q_EMIT answerCallbackQueryPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT answerCallbackQueryPostSignalError(output, error_type, error_str);
        Q_EMIT answerCallbackQueryPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::answerInlineQueryPost(const OAI_answerInlineQuery_post_request &oai_answer_inline_query_post_request) {
    QString fullPath = QString(_serverConfigs["answerInlineQueryPost"][_serverIndices.value("answerInlineQueryPost")].URL()+"/answerInlineQuery");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_answer_inline_query_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::answerInlineQueryPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::answerInlineQueryPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT answerInlineQueryPostSignal(output);
        Q_EMIT answerInlineQueryPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT answerInlineQueryPostSignalE(output, error_type, error_str);
        Q_EMIT answerInlineQueryPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT answerInlineQueryPostSignalError(output, error_type, error_str);
        Q_EMIT answerInlineQueryPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::answerPreCheckoutQueryPost(const OAI_answerPreCheckoutQuery_post_request &oai_answer_pre_checkout_query_post_request) {
    QString fullPath = QString(_serverConfigs["answerPreCheckoutQueryPost"][_serverIndices.value("answerPreCheckoutQueryPost")].URL()+"/answerPreCheckoutQuery");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_answer_pre_checkout_query_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::answerPreCheckoutQueryPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::answerPreCheckoutQueryPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT answerPreCheckoutQueryPostSignal(output);
        Q_EMIT answerPreCheckoutQueryPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT answerPreCheckoutQueryPostSignalE(output, error_type, error_str);
        Q_EMIT answerPreCheckoutQueryPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT answerPreCheckoutQueryPostSignalError(output, error_type, error_str);
        Q_EMIT answerPreCheckoutQueryPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::answerShippingQueryPost(const OAI_answerShippingQuery_post_request &oai_answer_shipping_query_post_request) {
    QString fullPath = QString(_serverConfigs["answerShippingQueryPost"][_serverIndices.value("answerShippingQueryPost")].URL()+"/answerShippingQuery");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_answer_shipping_query_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::answerShippingQueryPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::answerShippingQueryPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT answerShippingQueryPostSignal(output);
        Q_EMIT answerShippingQueryPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT answerShippingQueryPostSignalE(output, error_type, error_str);
        Q_EMIT answerShippingQueryPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT answerShippingQueryPostSignalError(output, error_type, error_str);
        Q_EMIT answerShippingQueryPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::closePost() {
    QString fullPath = QString(_serverConfigs["closePost"][_serverIndices.value("closePost")].URL()+"/close");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::closePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::closePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT closePostSignal(output);
        Q_EMIT closePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT closePostSignalE(output, error_type, error_str);
        Q_EMIT closePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT closePostSignalError(output, error_type, error_str);
        Q_EMIT closePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::copyMessagePost(const OAI_copyMessage_post_request &oai_copy_message_post_request) {
    QString fullPath = QString(_serverConfigs["copyMessagePost"][_serverIndices.value("copyMessagePost")].URL()+"/copyMessage");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_copy_message_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::copyMessagePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::copyMessagePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_copyMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT copyMessagePostSignal(output);
        Q_EMIT copyMessagePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT copyMessagePostSignalE(output, error_type, error_str);
        Q_EMIT copyMessagePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT copyMessagePostSignalError(output, error_type, error_str);
        Q_EMIT copyMessagePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::createNewStickerSetPost(const QString &emojis, const QString &name, const QString &title, const qint32 &user_id, const ::OpenAPI::OptionalParam<bool> &contains_masks, const ::OpenAPI::OptionalParam<OAIMaskPosition> &mask_position, const ::OpenAPI::OptionalParam<QString> &png_sticker, const ::OpenAPI::OptionalParam<QJsonValue> &tgs_sticker) {
    QString fullPath = QString(_serverConfigs["createNewStickerSetPost"][_serverIndices.value("createNewStickerSetPost")].URL()+"/createNewStickerSet");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (contains_masks.hasValue())
    {
        input.add_var("contains_masks", ::OpenAPI::toStringValue(contains_masks.value()));
    }
    
    {
        input.add_var("emojis", ::OpenAPI::toStringValue(emojis));
    }
    if (mask_position.hasValue())
    {
        input.add_var("mask_position", ::OpenAPI::toStringValue(mask_position.value()));
    }
    
    {
        input.add_var("name", ::OpenAPI::toStringValue(name));
    }
    if (png_sticker.hasValue())
    {
        input.add_var("png_sticker", ::OpenAPI::toStringValue(png_sticker.value()));
    }
    if (tgs_sticker.hasValue())
    {
        input.add_var("tgs_sticker", ::OpenAPI::toStringValue(tgs_sticker.value()));
    }
    
    {
        input.add_var("title", ::OpenAPI::toStringValue(title));
    }
    
    {
        input.add_var("user_id", ::OpenAPI::toStringValue(user_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::createNewStickerSetPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::createNewStickerSetPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createNewStickerSetPostSignal(output);
        Q_EMIT createNewStickerSetPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createNewStickerSetPostSignalE(output, error_type, error_str);
        Q_EMIT createNewStickerSetPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createNewStickerSetPostSignalError(output, error_type, error_str);
        Q_EMIT createNewStickerSetPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::deleteChatPhotoPost(const OAI_deleteChatPhoto_post_request &oai_delete_chat_photo_post_request) {
    QString fullPath = QString(_serverConfigs["deleteChatPhotoPost"][_serverIndices.value("deleteChatPhotoPost")].URL()+"/deleteChatPhoto");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_delete_chat_photo_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::deleteChatPhotoPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::deleteChatPhotoPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteChatPhotoPostSignal(output);
        Q_EMIT deleteChatPhotoPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteChatPhotoPostSignalE(output, error_type, error_str);
        Q_EMIT deleteChatPhotoPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteChatPhotoPostSignalError(output, error_type, error_str);
        Q_EMIT deleteChatPhotoPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::deleteChatStickerSetPost(const OAI_deleteChatStickerSet_post_request &oai_delete_chat_sticker_set_post_request) {
    QString fullPath = QString(_serverConfigs["deleteChatStickerSetPost"][_serverIndices.value("deleteChatStickerSetPost")].URL()+"/deleteChatStickerSet");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_delete_chat_sticker_set_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::deleteChatStickerSetPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::deleteChatStickerSetPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteChatStickerSetPostSignal(output);
        Q_EMIT deleteChatStickerSetPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteChatStickerSetPostSignalE(output, error_type, error_str);
        Q_EMIT deleteChatStickerSetPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteChatStickerSetPostSignalError(output, error_type, error_str);
        Q_EMIT deleteChatStickerSetPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::deleteMessagePost(const OAI_deleteMessage_post_request &oai_delete_message_post_request) {
    QString fullPath = QString(_serverConfigs["deleteMessagePost"][_serverIndices.value("deleteMessagePost")].URL()+"/deleteMessage");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_delete_message_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::deleteMessagePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::deleteMessagePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteMessagePostSignal(output);
        Q_EMIT deleteMessagePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteMessagePostSignalE(output, error_type, error_str);
        Q_EMIT deleteMessagePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteMessagePostSignalError(output, error_type, error_str);
        Q_EMIT deleteMessagePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::deleteStickerFromSetPost(const OAI_deleteStickerFromSet_post_request &oai_delete_sticker_from_set_post_request) {
    QString fullPath = QString(_serverConfigs["deleteStickerFromSetPost"][_serverIndices.value("deleteStickerFromSetPost")].URL()+"/deleteStickerFromSet");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_delete_sticker_from_set_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::deleteStickerFromSetPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::deleteStickerFromSetPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteStickerFromSetPostSignal(output);
        Q_EMIT deleteStickerFromSetPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteStickerFromSetPostSignalE(output, error_type, error_str);
        Q_EMIT deleteStickerFromSetPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteStickerFromSetPostSignalError(output, error_type, error_str);
        Q_EMIT deleteStickerFromSetPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::deleteWebhookPost(const OAI_deleteWebhook_post_request &oai_delete_webhook_post_request) {
    QString fullPath = QString(_serverConfigs["deleteWebhookPost"][_serverIndices.value("deleteWebhookPost")].URL()+"/deleteWebhook");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_delete_webhook_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::deleteWebhookPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::deleteWebhookPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteWebhookPostSignal(output);
        Q_EMIT deleteWebhookPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteWebhookPostSignalE(output, error_type, error_str);
        Q_EMIT deleteWebhookPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteWebhookPostSignalError(output, error_type, error_str);
        Q_EMIT deleteWebhookPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::editMessageCaptionPost(const OAI_editMessageCaption_post_request &oai_edit_message_caption_post_request) {
    QString fullPath = QString(_serverConfigs["editMessageCaptionPost"][_serverIndices.value("editMessageCaptionPost")].URL()+"/editMessageCaption");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_edit_message_caption_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::editMessageCaptionPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::editMessageCaptionPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_editMessageCaption_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT editMessageCaptionPostSignal(output);
        Q_EMIT editMessageCaptionPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT editMessageCaptionPostSignalE(output, error_type, error_str);
        Q_EMIT editMessageCaptionPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT editMessageCaptionPostSignalError(output, error_type, error_str);
        Q_EMIT editMessageCaptionPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::editMessageLiveLocationPost(const OAI_editMessageLiveLocation_post_request &oai_edit_message_live_location_post_request) {
    QString fullPath = QString(_serverConfigs["editMessageLiveLocationPost"][_serverIndices.value("editMessageLiveLocationPost")].URL()+"/editMessageLiveLocation");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_edit_message_live_location_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::editMessageLiveLocationPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::editMessageLiveLocationPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_editMessageCaption_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT editMessageLiveLocationPostSignal(output);
        Q_EMIT editMessageLiveLocationPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT editMessageLiveLocationPostSignalE(output, error_type, error_str);
        Q_EMIT editMessageLiveLocationPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT editMessageLiveLocationPostSignalError(output, error_type, error_str);
        Q_EMIT editMessageLiveLocationPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::editMessageMediaPost(const OAIInputMedia &media, const ::OpenAPI::OptionalParam<OAI_editMessageCaption_post_request_chat_id> &chat_id, const ::OpenAPI::OptionalParam<QString> &inline_message_id, const ::OpenAPI::OptionalParam<qint32> &message_id, const ::OpenAPI::OptionalParam<OAIInlineKeyboardMarkup> &reply_markup) {
    QString fullPath = QString(_serverConfigs["editMessageMediaPost"][_serverIndices.value("editMessageMediaPost")].URL()+"/editMessageMedia");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (chat_id.hasValue())
    {
        input.add_var("chat_id", ::OpenAPI::toStringValue(chat_id.value()));
    }
    if (inline_message_id.hasValue())
    {
        input.add_var("inline_message_id", ::OpenAPI::toStringValue(inline_message_id.value()));
    }
    
    {
        input.add_var("media", ::OpenAPI::toStringValue(media));
    }
    if (message_id.hasValue())
    {
        input.add_var("message_id", ::OpenAPI::toStringValue(message_id.value()));
    }
    if (reply_markup.hasValue())
    {
        input.add_var("reply_markup", ::OpenAPI::toStringValue(reply_markup.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::editMessageMediaPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::editMessageMediaPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_editMessageCaption_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT editMessageMediaPostSignal(output);
        Q_EMIT editMessageMediaPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT editMessageMediaPostSignalE(output, error_type, error_str);
        Q_EMIT editMessageMediaPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT editMessageMediaPostSignalError(output, error_type, error_str);
        Q_EMIT editMessageMediaPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::editMessageReplyMarkupPost(const OAI_editMessageReplyMarkup_post_request &oai_edit_message_reply_markup_post_request) {
    QString fullPath = QString(_serverConfigs["editMessageReplyMarkupPost"][_serverIndices.value("editMessageReplyMarkupPost")].URL()+"/editMessageReplyMarkup");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_edit_message_reply_markup_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::editMessageReplyMarkupPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::editMessageReplyMarkupPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_editMessageCaption_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT editMessageReplyMarkupPostSignal(output);
        Q_EMIT editMessageReplyMarkupPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT editMessageReplyMarkupPostSignalE(output, error_type, error_str);
        Q_EMIT editMessageReplyMarkupPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT editMessageReplyMarkupPostSignalError(output, error_type, error_str);
        Q_EMIT editMessageReplyMarkupPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::editMessageTextPost(const OAI_editMessageText_post_request &oai_edit_message_text_post_request) {
    QString fullPath = QString(_serverConfigs["editMessageTextPost"][_serverIndices.value("editMessageTextPost")].URL()+"/editMessageText");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_edit_message_text_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::editMessageTextPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::editMessageTextPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_editMessageCaption_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT editMessageTextPostSignal(output);
        Q_EMIT editMessageTextPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT editMessageTextPostSignalE(output, error_type, error_str);
        Q_EMIT editMessageTextPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT editMessageTextPostSignalError(output, error_type, error_str);
        Q_EMIT editMessageTextPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::exportChatInviteLinkPost(const OAI_deleteChatPhoto_post_request &oai_delete_chat_photo_post_request) {
    QString fullPath = QString(_serverConfigs["exportChatInviteLinkPost"][_serverIndices.value("exportChatInviteLinkPost")].URL()+"/exportChatInviteLink");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_delete_chat_photo_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::exportChatInviteLinkPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::exportChatInviteLinkPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_exportChatInviteLink_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT exportChatInviteLinkPostSignal(output);
        Q_EMIT exportChatInviteLinkPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT exportChatInviteLinkPostSignalE(output, error_type, error_str);
        Q_EMIT exportChatInviteLinkPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT exportChatInviteLinkPostSignalError(output, error_type, error_str);
        Q_EMIT exportChatInviteLinkPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::forwardMessagePost(const OAI_forwardMessage_post_request &oai_forward_message_post_request) {
    QString fullPath = QString(_serverConfigs["forwardMessagePost"][_serverIndices.value("forwardMessagePost")].URL()+"/forwardMessage");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_forward_message_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::forwardMessagePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::forwardMessagePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forwardMessagePostSignal(output);
        Q_EMIT forwardMessagePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forwardMessagePostSignalE(output, error_type, error_str);
        Q_EMIT forwardMessagePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forwardMessagePostSignalError(output, error_type, error_str);
        Q_EMIT forwardMessagePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getChatAdministratorsPost(const OAI_getChat_post_request &oai_get_chat_post_request) {
    QString fullPath = QString(_serverConfigs["getChatAdministratorsPost"][_serverIndices.value("getChatAdministratorsPost")].URL()+"/getChatAdministrators");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_chat_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getChatAdministratorsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getChatAdministratorsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getChatAdministrators_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getChatAdministratorsPostSignal(output);
        Q_EMIT getChatAdministratorsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getChatAdministratorsPostSignalE(output, error_type, error_str);
        Q_EMIT getChatAdministratorsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getChatAdministratorsPostSignalError(output, error_type, error_str);
        Q_EMIT getChatAdministratorsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getChatMemberPost(const OAI_getChatMember_post_request &oai_get_chat_member_post_request) {
    QString fullPath = QString(_serverConfigs["getChatMemberPost"][_serverIndices.value("getChatMemberPost")].URL()+"/getChatMember");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_chat_member_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getChatMemberPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getChatMemberPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getChatMember_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getChatMemberPostSignal(output);
        Q_EMIT getChatMemberPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getChatMemberPostSignalE(output, error_type, error_str);
        Q_EMIT getChatMemberPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getChatMemberPostSignalError(output, error_type, error_str);
        Q_EMIT getChatMemberPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getChatMembersCountPost(const OAI_getChat_post_request &oai_get_chat_post_request) {
    QString fullPath = QString(_serverConfigs["getChatMembersCountPost"][_serverIndices.value("getChatMembersCountPost")].URL()+"/getChatMembersCount");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_chat_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getChatMembersCountPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getChatMembersCountPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getChatMembersCount_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getChatMembersCountPostSignal(output);
        Q_EMIT getChatMembersCountPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getChatMembersCountPostSignalE(output, error_type, error_str);
        Q_EMIT getChatMembersCountPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getChatMembersCountPostSignalError(output, error_type, error_str);
        Q_EMIT getChatMembersCountPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getChatPost(const OAI_getChat_post_request &oai_get_chat_post_request) {
    QString fullPath = QString(_serverConfigs["getChatPost"][_serverIndices.value("getChatPost")].URL()+"/getChat");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_chat_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getChatPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getChatPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getChat_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getChatPostSignal(output);
        Q_EMIT getChatPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getChatPostSignalE(output, error_type, error_str);
        Q_EMIT getChatPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getChatPostSignalError(output, error_type, error_str);
        Q_EMIT getChatPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getFilePost(const OAI_getFile_post_request &oai_get_file_post_request) {
    QString fullPath = QString(_serverConfigs["getFilePost"][_serverIndices.value("getFilePost")].URL()+"/getFile");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_file_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getFilePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getFilePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getFile_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getFilePostSignal(output);
        Q_EMIT getFilePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getFilePostSignalE(output, error_type, error_str);
        Q_EMIT getFilePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getFilePostSignalError(output, error_type, error_str);
        Q_EMIT getFilePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getGameHighScoresPost(const OAI_getGameHighScores_post_request &oai_get_game_high_scores_post_request) {
    QString fullPath = QString(_serverConfigs["getGameHighScoresPost"][_serverIndices.value("getGameHighScoresPost")].URL()+"/getGameHighScores");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_game_high_scores_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getGameHighScoresPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getGameHighScoresPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getGameHighScores_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGameHighScoresPostSignal(output);
        Q_EMIT getGameHighScoresPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGameHighScoresPostSignalE(output, error_type, error_str);
        Q_EMIT getGameHighScoresPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGameHighScoresPostSignalError(output, error_type, error_str);
        Q_EMIT getGameHighScoresPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getMePost() {
    QString fullPath = QString(_serverConfigs["getMePost"][_serverIndices.value("getMePost")].URL()+"/getMe");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getMePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getMePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getMe_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMePostSignal(output);
        Q_EMIT getMePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMePostSignalE(output, error_type, error_str);
        Q_EMIT getMePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMePostSignalError(output, error_type, error_str);
        Q_EMIT getMePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getMyCommandsPost() {
    QString fullPath = QString(_serverConfigs["getMyCommandsPost"][_serverIndices.value("getMyCommandsPost")].URL()+"/getMyCommands");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getMyCommandsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getMyCommandsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getMyCommands_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMyCommandsPostSignal(output);
        Q_EMIT getMyCommandsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMyCommandsPostSignalE(output, error_type, error_str);
        Q_EMIT getMyCommandsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMyCommandsPostSignalError(output, error_type, error_str);
        Q_EMIT getMyCommandsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getStickerSetPost(const OAI_getStickerSet_post_request &oai_get_sticker_set_post_request) {
    QString fullPath = QString(_serverConfigs["getStickerSetPost"][_serverIndices.value("getStickerSetPost")].URL()+"/getStickerSet");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_sticker_set_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getStickerSetPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getStickerSetPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getStickerSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getStickerSetPostSignal(output);
        Q_EMIT getStickerSetPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getStickerSetPostSignalE(output, error_type, error_str);
        Q_EMIT getStickerSetPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getStickerSetPostSignalError(output, error_type, error_str);
        Q_EMIT getStickerSetPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getUpdatesPost(const OAI_getUpdates_post_request &oai_get_updates_post_request) {
    QString fullPath = QString(_serverConfigs["getUpdatesPost"][_serverIndices.value("getUpdatesPost")].URL()+"/getUpdates");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_updates_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getUpdatesPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getUpdatesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getUpdates_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getUpdatesPostSignal(output);
        Q_EMIT getUpdatesPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getUpdatesPostSignalE(output, error_type, error_str);
        Q_EMIT getUpdatesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getUpdatesPostSignalError(output, error_type, error_str);
        Q_EMIT getUpdatesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getUserProfilePhotosPost(const OAI_getUserProfilePhotos_post_request &oai_get_user_profile_photos_post_request) {
    QString fullPath = QString(_serverConfigs["getUserProfilePhotosPost"][_serverIndices.value("getUserProfilePhotosPost")].URL()+"/getUserProfilePhotos");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_user_profile_photos_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getUserProfilePhotosPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getUserProfilePhotosPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getUserProfilePhotos_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getUserProfilePhotosPostSignal(output);
        Q_EMIT getUserProfilePhotosPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getUserProfilePhotosPostSignalE(output, error_type, error_str);
        Q_EMIT getUserProfilePhotosPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getUserProfilePhotosPostSignalError(output, error_type, error_str);
        Q_EMIT getUserProfilePhotosPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::getWebhookInfoPost() {
    QString fullPath = QString(_serverConfigs["getWebhookInfoPost"][_serverIndices.value("getWebhookInfoPost")].URL()+"/getWebhookInfo");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::getWebhookInfoPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::getWebhookInfoPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getWebhookInfo_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getWebhookInfoPostSignal(output);
        Q_EMIT getWebhookInfoPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getWebhookInfoPostSignalE(output, error_type, error_str);
        Q_EMIT getWebhookInfoPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getWebhookInfoPostSignalError(output, error_type, error_str);
        Q_EMIT getWebhookInfoPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::kickChatMemberPost(const OAI_kickChatMember_post_request &oai_kick_chat_member_post_request) {
    QString fullPath = QString(_serverConfigs["kickChatMemberPost"][_serverIndices.value("kickChatMemberPost")].URL()+"/kickChatMember");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_kick_chat_member_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::kickChatMemberPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::kickChatMemberPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT kickChatMemberPostSignal(output);
        Q_EMIT kickChatMemberPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT kickChatMemberPostSignalE(output, error_type, error_str);
        Q_EMIT kickChatMemberPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT kickChatMemberPostSignalError(output, error_type, error_str);
        Q_EMIT kickChatMemberPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::leaveChatPost(const OAI_getChat_post_request &oai_get_chat_post_request) {
    QString fullPath = QString(_serverConfigs["leaveChatPost"][_serverIndices.value("leaveChatPost")].URL()+"/leaveChat");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_chat_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::leaveChatPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::leaveChatPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT leaveChatPostSignal(output);
        Q_EMIT leaveChatPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT leaveChatPostSignalE(output, error_type, error_str);
        Q_EMIT leaveChatPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT leaveChatPostSignalError(output, error_type, error_str);
        Q_EMIT leaveChatPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::logOutPost() {
    QString fullPath = QString(_serverConfigs["logOutPost"][_serverIndices.value("logOutPost")].URL()+"/logOut");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::logOutPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::logOutPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT logOutPostSignal(output);
        Q_EMIT logOutPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT logOutPostSignalE(output, error_type, error_str);
        Q_EMIT logOutPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT logOutPostSignalError(output, error_type, error_str);
        Q_EMIT logOutPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::pinChatMessagePost(const OAI_pinChatMessage_post_request &oai_pin_chat_message_post_request) {
    QString fullPath = QString(_serverConfigs["pinChatMessagePost"][_serverIndices.value("pinChatMessagePost")].URL()+"/pinChatMessage");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_pin_chat_message_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::pinChatMessagePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::pinChatMessagePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT pinChatMessagePostSignal(output);
        Q_EMIT pinChatMessagePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT pinChatMessagePostSignalE(output, error_type, error_str);
        Q_EMIT pinChatMessagePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT pinChatMessagePostSignalError(output, error_type, error_str);
        Q_EMIT pinChatMessagePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::promoteChatMemberPost(const OAI_promoteChatMember_post_request &oai_promote_chat_member_post_request) {
    QString fullPath = QString(_serverConfigs["promoteChatMemberPost"][_serverIndices.value("promoteChatMemberPost")].URL()+"/promoteChatMember");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_promote_chat_member_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::promoteChatMemberPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::promoteChatMemberPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT promoteChatMemberPostSignal(output);
        Q_EMIT promoteChatMemberPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT promoteChatMemberPostSignalE(output, error_type, error_str);
        Q_EMIT promoteChatMemberPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT promoteChatMemberPostSignalError(output, error_type, error_str);
        Q_EMIT promoteChatMemberPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::restrictChatMemberPost(const OAI_restrictChatMember_post_request &oai_restrict_chat_member_post_request) {
    QString fullPath = QString(_serverConfigs["restrictChatMemberPost"][_serverIndices.value("restrictChatMemberPost")].URL()+"/restrictChatMember");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_restrict_chat_member_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::restrictChatMemberPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::restrictChatMemberPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT restrictChatMemberPostSignal(output);
        Q_EMIT restrictChatMemberPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT restrictChatMemberPostSignalE(output, error_type, error_str);
        Q_EMIT restrictChatMemberPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT restrictChatMemberPostSignalError(output, error_type, error_str);
        Q_EMIT restrictChatMemberPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendAnimationPost(const QString &animation, const OAI_copyMessage_post_request_chat_id &chat_id, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply, const ::OpenAPI::OptionalParam<QString> &caption, const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities, const ::OpenAPI::OptionalParam<bool> &disable_notification, const ::OpenAPI::OptionalParam<qint32> &duration, const ::OpenAPI::OptionalParam<qint32> &height, const ::OpenAPI::OptionalParam<QString> &parse_mode, const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup, const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id, const ::OpenAPI::OptionalParam<QString> &thumb, const ::OpenAPI::OptionalParam<qint32> &width) {
    QString fullPath = QString(_serverConfigs["sendAnimationPost"][_serverIndices.value("sendAnimationPost")].URL()+"/sendAnimation");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (allow_sending_without_reply.hasValue())
    {
        input.add_var("allow_sending_without_reply", ::OpenAPI::toStringValue(allow_sending_without_reply.value()));
    }
    
    {
        input.add_var("animation", ::OpenAPI::toStringValue(animation));
    }
    if (caption.hasValue())
    {
        input.add_var("caption", ::OpenAPI::toStringValue(caption.value()));
    }
    if (caption_entities.hasValue())
    {
        input.add_var("caption_entities", ::OpenAPI::toStringValue(caption_entities.value()));
    }
    
    {
        input.add_var("chat_id", ::OpenAPI::toStringValue(chat_id));
    }
    if (disable_notification.hasValue())
    {
        input.add_var("disable_notification", ::OpenAPI::toStringValue(disable_notification.value()));
    }
    if (duration.hasValue())
    {
        input.add_var("duration", ::OpenAPI::toStringValue(duration.value()));
    }
    if (height.hasValue())
    {
        input.add_var("height", ::OpenAPI::toStringValue(height.value()));
    }
    if (parse_mode.hasValue())
    {
        input.add_var("parse_mode", ::OpenAPI::toStringValue(parse_mode.value()));
    }
    if (reply_markup.hasValue())
    {
        input.add_var("reply_markup", ::OpenAPI::toStringValue(reply_markup.value()));
    }
    if (reply_to_message_id.hasValue())
    {
        input.add_var("reply_to_message_id", ::OpenAPI::toStringValue(reply_to_message_id.value()));
    }
    if (thumb.hasValue())
    {
        input.add_var("thumb", ::OpenAPI::toStringValue(thumb.value()));
    }
    if (width.hasValue())
    {
        input.add_var("width", ::OpenAPI::toStringValue(width.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendAnimationPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendAnimationPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendAnimationPostSignal(output);
        Q_EMIT sendAnimationPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendAnimationPostSignalE(output, error_type, error_str);
        Q_EMIT sendAnimationPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendAnimationPostSignalError(output, error_type, error_str);
        Q_EMIT sendAnimationPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendAudioPost(const QString &audio, const OAI_copyMessage_post_request_chat_id &chat_id, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply, const ::OpenAPI::OptionalParam<QString> &caption, const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities, const ::OpenAPI::OptionalParam<bool> &disable_notification, const ::OpenAPI::OptionalParam<qint32> &duration, const ::OpenAPI::OptionalParam<QString> &parse_mode, const ::OpenAPI::OptionalParam<QString> &performer, const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup, const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id, const ::OpenAPI::OptionalParam<QString> &thumb, const ::OpenAPI::OptionalParam<QString> &title) {
    QString fullPath = QString(_serverConfigs["sendAudioPost"][_serverIndices.value("sendAudioPost")].URL()+"/sendAudio");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (allow_sending_without_reply.hasValue())
    {
        input.add_var("allow_sending_without_reply", ::OpenAPI::toStringValue(allow_sending_without_reply.value()));
    }
    
    {
        input.add_var("audio", ::OpenAPI::toStringValue(audio));
    }
    if (caption.hasValue())
    {
        input.add_var("caption", ::OpenAPI::toStringValue(caption.value()));
    }
    if (caption_entities.hasValue())
    {
        input.add_var("caption_entities", ::OpenAPI::toStringValue(caption_entities.value()));
    }
    
    {
        input.add_var("chat_id", ::OpenAPI::toStringValue(chat_id));
    }
    if (disable_notification.hasValue())
    {
        input.add_var("disable_notification", ::OpenAPI::toStringValue(disable_notification.value()));
    }
    if (duration.hasValue())
    {
        input.add_var("duration", ::OpenAPI::toStringValue(duration.value()));
    }
    if (parse_mode.hasValue())
    {
        input.add_var("parse_mode", ::OpenAPI::toStringValue(parse_mode.value()));
    }
    if (performer.hasValue())
    {
        input.add_var("performer", ::OpenAPI::toStringValue(performer.value()));
    }
    if (reply_markup.hasValue())
    {
        input.add_var("reply_markup", ::OpenAPI::toStringValue(reply_markup.value()));
    }
    if (reply_to_message_id.hasValue())
    {
        input.add_var("reply_to_message_id", ::OpenAPI::toStringValue(reply_to_message_id.value()));
    }
    if (thumb.hasValue())
    {
        input.add_var("thumb", ::OpenAPI::toStringValue(thumb.value()));
    }
    if (title.hasValue())
    {
        input.add_var("title", ::OpenAPI::toStringValue(title.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendAudioPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendAudioPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendAudioPostSignal(output);
        Q_EMIT sendAudioPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendAudioPostSignalE(output, error_type, error_str);
        Q_EMIT sendAudioPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendAudioPostSignalError(output, error_type, error_str);
        Q_EMIT sendAudioPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendChatActionPost(const OAI_sendChatAction_post_request &oai_send_chat_action_post_request) {
    QString fullPath = QString(_serverConfigs["sendChatActionPost"][_serverIndices.value("sendChatActionPost")].URL()+"/sendChatAction");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_chat_action_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendChatActionPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendChatActionPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendChatActionPostSignal(output);
        Q_EMIT sendChatActionPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendChatActionPostSignalE(output, error_type, error_str);
        Q_EMIT sendChatActionPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendChatActionPostSignalError(output, error_type, error_str);
        Q_EMIT sendChatActionPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendContactPost(const OAI_sendContact_post_request &oai_send_contact_post_request) {
    QString fullPath = QString(_serverConfigs["sendContactPost"][_serverIndices.value("sendContactPost")].URL()+"/sendContact");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_contact_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendContactPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendContactPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendContactPostSignal(output);
        Q_EMIT sendContactPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendContactPostSignalE(output, error_type, error_str);
        Q_EMIT sendContactPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendContactPostSignalError(output, error_type, error_str);
        Q_EMIT sendContactPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendDicePost(const OAI_sendDice_post_request &oai_send_dice_post_request) {
    QString fullPath = QString(_serverConfigs["sendDicePost"][_serverIndices.value("sendDicePost")].URL()+"/sendDice");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_dice_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendDicePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendDicePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendDicePostSignal(output);
        Q_EMIT sendDicePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendDicePostSignalE(output, error_type, error_str);
        Q_EMIT sendDicePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendDicePostSignalError(output, error_type, error_str);
        Q_EMIT sendDicePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendDocumentPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &document, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply, const ::OpenAPI::OptionalParam<QString> &caption, const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities, const ::OpenAPI::OptionalParam<bool> &disable_content_type_detection, const ::OpenAPI::OptionalParam<bool> &disable_notification, const ::OpenAPI::OptionalParam<QString> &parse_mode, const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup, const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id, const ::OpenAPI::OptionalParam<QString> &thumb) {
    QString fullPath = QString(_serverConfigs["sendDocumentPost"][_serverIndices.value("sendDocumentPost")].URL()+"/sendDocument");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (allow_sending_without_reply.hasValue())
    {
        input.add_var("allow_sending_without_reply", ::OpenAPI::toStringValue(allow_sending_without_reply.value()));
    }
    if (caption.hasValue())
    {
        input.add_var("caption", ::OpenAPI::toStringValue(caption.value()));
    }
    if (caption_entities.hasValue())
    {
        input.add_var("caption_entities", ::OpenAPI::toStringValue(caption_entities.value()));
    }
    
    {
        input.add_var("chat_id", ::OpenAPI::toStringValue(chat_id));
    }
    if (disable_content_type_detection.hasValue())
    {
        input.add_var("disable_content_type_detection", ::OpenAPI::toStringValue(disable_content_type_detection.value()));
    }
    if (disable_notification.hasValue())
    {
        input.add_var("disable_notification", ::OpenAPI::toStringValue(disable_notification.value()));
    }
    
    {
        input.add_var("document", ::OpenAPI::toStringValue(document));
    }
    if (parse_mode.hasValue())
    {
        input.add_var("parse_mode", ::OpenAPI::toStringValue(parse_mode.value()));
    }
    if (reply_markup.hasValue())
    {
        input.add_var("reply_markup", ::OpenAPI::toStringValue(reply_markup.value()));
    }
    if (reply_to_message_id.hasValue())
    {
        input.add_var("reply_to_message_id", ::OpenAPI::toStringValue(reply_to_message_id.value()));
    }
    if (thumb.hasValue())
    {
        input.add_var("thumb", ::OpenAPI::toStringValue(thumb.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendDocumentPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendDocumentPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendDocumentPostSignal(output);
        Q_EMIT sendDocumentPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendDocumentPostSignalE(output, error_type, error_str);
        Q_EMIT sendDocumentPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendDocumentPostSignalError(output, error_type, error_str);
        Q_EMIT sendDocumentPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendGamePost(const OAI_sendGame_post_request &oai_send_game_post_request) {
    QString fullPath = QString(_serverConfigs["sendGamePost"][_serverIndices.value("sendGamePost")].URL()+"/sendGame");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_game_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendGamePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendGamePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendGamePostSignal(output);
        Q_EMIT sendGamePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendGamePostSignalE(output, error_type, error_str);
        Q_EMIT sendGamePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendGamePostSignalError(output, error_type, error_str);
        Q_EMIT sendGamePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendInvoicePost(const OAI_sendInvoice_post_request &oai_send_invoice_post_request) {
    QString fullPath = QString(_serverConfigs["sendInvoicePost"][_serverIndices.value("sendInvoicePost")].URL()+"/sendInvoice");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_invoice_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendInvoicePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendInvoicePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendInvoicePostSignal(output);
        Q_EMIT sendInvoicePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendInvoicePostSignalE(output, error_type, error_str);
        Q_EMIT sendInvoicePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendInvoicePostSignalError(output, error_type, error_str);
        Q_EMIT sendInvoicePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendLocationPost(const OAI_sendLocation_post_request &oai_send_location_post_request) {
    QString fullPath = QString(_serverConfigs["sendLocationPost"][_serverIndices.value("sendLocationPost")].URL()+"/sendLocation");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_location_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendLocationPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendLocationPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendLocationPostSignal(output);
        Q_EMIT sendLocationPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendLocationPostSignalE(output, error_type, error_str);
        Q_EMIT sendLocationPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendLocationPostSignalError(output, error_type, error_str);
        Q_EMIT sendLocationPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendMediaGroupPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QList<OAI_sendMediaGroup_post_request_media_inner> &media, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply, const ::OpenAPI::OptionalParam<bool> &disable_notification, const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id) {
    QString fullPath = QString(_serverConfigs["sendMediaGroupPost"][_serverIndices.value("sendMediaGroupPost")].URL()+"/sendMediaGroup");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (allow_sending_without_reply.hasValue())
    {
        input.add_var("allow_sending_without_reply", ::OpenAPI::toStringValue(allow_sending_without_reply.value()));
    }
    
    {
        input.add_var("chat_id", ::OpenAPI::toStringValue(chat_id));
    }
    if (disable_notification.hasValue())
    {
        input.add_var("disable_notification", ::OpenAPI::toStringValue(disable_notification.value()));
    }
    
    {
        input.add_var("media", ::OpenAPI::toStringValue(media));
    }
    if (reply_to_message_id.hasValue())
    {
        input.add_var("reply_to_message_id", ::OpenAPI::toStringValue(reply_to_message_id.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendMediaGroupPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendMediaGroupPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_sendMediaGroup_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendMediaGroupPostSignal(output);
        Q_EMIT sendMediaGroupPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendMediaGroupPostSignalE(output, error_type, error_str);
        Q_EMIT sendMediaGroupPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendMediaGroupPostSignalError(output, error_type, error_str);
        Q_EMIT sendMediaGroupPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendMessagePost(const OAI_sendMessage_post_request &oai_send_message_post_request) {
    QString fullPath = QString(_serverConfigs["sendMessagePost"][_serverIndices.value("sendMessagePost")].URL()+"/sendMessage");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_message_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendMessagePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendMessagePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendMessagePostSignal(output);
        Q_EMIT sendMessagePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendMessagePostSignalE(output, error_type, error_str);
        Q_EMIT sendMessagePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendMessagePostSignalError(output, error_type, error_str);
        Q_EMIT sendMessagePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendPhotoPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &photo, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply, const ::OpenAPI::OptionalParam<QString> &caption, const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities, const ::OpenAPI::OptionalParam<bool> &disable_notification, const ::OpenAPI::OptionalParam<QString> &parse_mode, const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup, const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id) {
    QString fullPath = QString(_serverConfigs["sendPhotoPost"][_serverIndices.value("sendPhotoPost")].URL()+"/sendPhoto");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (allow_sending_without_reply.hasValue())
    {
        input.add_var("allow_sending_without_reply", ::OpenAPI::toStringValue(allow_sending_without_reply.value()));
    }
    if (caption.hasValue())
    {
        input.add_var("caption", ::OpenAPI::toStringValue(caption.value()));
    }
    if (caption_entities.hasValue())
    {
        input.add_var("caption_entities", ::OpenAPI::toStringValue(caption_entities.value()));
    }
    
    {
        input.add_var("chat_id", ::OpenAPI::toStringValue(chat_id));
    }
    if (disable_notification.hasValue())
    {
        input.add_var("disable_notification", ::OpenAPI::toStringValue(disable_notification.value()));
    }
    if (parse_mode.hasValue())
    {
        input.add_var("parse_mode", ::OpenAPI::toStringValue(parse_mode.value()));
    }
    
    {
        input.add_var("photo", ::OpenAPI::toStringValue(photo));
    }
    if (reply_markup.hasValue())
    {
        input.add_var("reply_markup", ::OpenAPI::toStringValue(reply_markup.value()));
    }
    if (reply_to_message_id.hasValue())
    {
        input.add_var("reply_to_message_id", ::OpenAPI::toStringValue(reply_to_message_id.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendPhotoPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendPhotoPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendPhotoPostSignal(output);
        Q_EMIT sendPhotoPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendPhotoPostSignalE(output, error_type, error_str);
        Q_EMIT sendPhotoPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendPhotoPostSignalError(output, error_type, error_str);
        Q_EMIT sendPhotoPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendPollPost(const OAI_sendPoll_post_request &oai_send_poll_post_request) {
    QString fullPath = QString(_serverConfigs["sendPollPost"][_serverIndices.value("sendPollPost")].URL()+"/sendPoll");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_poll_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendPollPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendPollPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendPollPostSignal(output);
        Q_EMIT sendPollPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendPollPostSignalE(output, error_type, error_str);
        Q_EMIT sendPollPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendPollPostSignalError(output, error_type, error_str);
        Q_EMIT sendPollPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendStickerPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &sticker, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply, const ::OpenAPI::OptionalParam<bool> &disable_notification, const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup, const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id) {
    QString fullPath = QString(_serverConfigs["sendStickerPost"][_serverIndices.value("sendStickerPost")].URL()+"/sendSticker");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (allow_sending_without_reply.hasValue())
    {
        input.add_var("allow_sending_without_reply", ::OpenAPI::toStringValue(allow_sending_without_reply.value()));
    }
    
    {
        input.add_var("chat_id", ::OpenAPI::toStringValue(chat_id));
    }
    if (disable_notification.hasValue())
    {
        input.add_var("disable_notification", ::OpenAPI::toStringValue(disable_notification.value()));
    }
    if (reply_markup.hasValue())
    {
        input.add_var("reply_markup", ::OpenAPI::toStringValue(reply_markup.value()));
    }
    if (reply_to_message_id.hasValue())
    {
        input.add_var("reply_to_message_id", ::OpenAPI::toStringValue(reply_to_message_id.value()));
    }
    
    {
        input.add_var("sticker", ::OpenAPI::toStringValue(sticker));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendStickerPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendStickerPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendStickerPostSignal(output);
        Q_EMIT sendStickerPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendStickerPostSignalE(output, error_type, error_str);
        Q_EMIT sendStickerPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendStickerPostSignalError(output, error_type, error_str);
        Q_EMIT sendStickerPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendVenuePost(const OAI_sendVenue_post_request &oai_send_venue_post_request) {
    QString fullPath = QString(_serverConfigs["sendVenuePost"][_serverIndices.value("sendVenuePost")].URL()+"/sendVenue");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_venue_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendVenuePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendVenuePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendVenuePostSignal(output);
        Q_EMIT sendVenuePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendVenuePostSignalE(output, error_type, error_str);
        Q_EMIT sendVenuePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendVenuePostSignalError(output, error_type, error_str);
        Q_EMIT sendVenuePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendVideoNotePost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &video_note, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply, const ::OpenAPI::OptionalParam<bool> &disable_notification, const ::OpenAPI::OptionalParam<qint32> &duration, const ::OpenAPI::OptionalParam<qint32> &length, const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup, const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id, const ::OpenAPI::OptionalParam<QString> &thumb) {
    QString fullPath = QString(_serverConfigs["sendVideoNotePost"][_serverIndices.value("sendVideoNotePost")].URL()+"/sendVideoNote");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (allow_sending_without_reply.hasValue())
    {
        input.add_var("allow_sending_without_reply", ::OpenAPI::toStringValue(allow_sending_without_reply.value()));
    }
    
    {
        input.add_var("chat_id", ::OpenAPI::toStringValue(chat_id));
    }
    if (disable_notification.hasValue())
    {
        input.add_var("disable_notification", ::OpenAPI::toStringValue(disable_notification.value()));
    }
    if (duration.hasValue())
    {
        input.add_var("duration", ::OpenAPI::toStringValue(duration.value()));
    }
    if (length.hasValue())
    {
        input.add_var("length", ::OpenAPI::toStringValue(length.value()));
    }
    if (reply_markup.hasValue())
    {
        input.add_var("reply_markup", ::OpenAPI::toStringValue(reply_markup.value()));
    }
    if (reply_to_message_id.hasValue())
    {
        input.add_var("reply_to_message_id", ::OpenAPI::toStringValue(reply_to_message_id.value()));
    }
    if (thumb.hasValue())
    {
        input.add_var("thumb", ::OpenAPI::toStringValue(thumb.value()));
    }
    
    {
        input.add_var("video_note", ::OpenAPI::toStringValue(video_note));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendVideoNotePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendVideoNotePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendVideoNotePostSignal(output);
        Q_EMIT sendVideoNotePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendVideoNotePostSignalE(output, error_type, error_str);
        Q_EMIT sendVideoNotePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendVideoNotePostSignalError(output, error_type, error_str);
        Q_EMIT sendVideoNotePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendVideoPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &video, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply, const ::OpenAPI::OptionalParam<QString> &caption, const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities, const ::OpenAPI::OptionalParam<bool> &disable_notification, const ::OpenAPI::OptionalParam<qint32> &duration, const ::OpenAPI::OptionalParam<qint32> &height, const ::OpenAPI::OptionalParam<QString> &parse_mode, const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup, const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id, const ::OpenAPI::OptionalParam<bool> &supports_streaming, const ::OpenAPI::OptionalParam<QString> &thumb, const ::OpenAPI::OptionalParam<qint32> &width) {
    QString fullPath = QString(_serverConfigs["sendVideoPost"][_serverIndices.value("sendVideoPost")].URL()+"/sendVideo");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (allow_sending_without_reply.hasValue())
    {
        input.add_var("allow_sending_without_reply", ::OpenAPI::toStringValue(allow_sending_without_reply.value()));
    }
    if (caption.hasValue())
    {
        input.add_var("caption", ::OpenAPI::toStringValue(caption.value()));
    }
    if (caption_entities.hasValue())
    {
        input.add_var("caption_entities", ::OpenAPI::toStringValue(caption_entities.value()));
    }
    
    {
        input.add_var("chat_id", ::OpenAPI::toStringValue(chat_id));
    }
    if (disable_notification.hasValue())
    {
        input.add_var("disable_notification", ::OpenAPI::toStringValue(disable_notification.value()));
    }
    if (duration.hasValue())
    {
        input.add_var("duration", ::OpenAPI::toStringValue(duration.value()));
    }
    if (height.hasValue())
    {
        input.add_var("height", ::OpenAPI::toStringValue(height.value()));
    }
    if (parse_mode.hasValue())
    {
        input.add_var("parse_mode", ::OpenAPI::toStringValue(parse_mode.value()));
    }
    if (reply_markup.hasValue())
    {
        input.add_var("reply_markup", ::OpenAPI::toStringValue(reply_markup.value()));
    }
    if (reply_to_message_id.hasValue())
    {
        input.add_var("reply_to_message_id", ::OpenAPI::toStringValue(reply_to_message_id.value()));
    }
    if (supports_streaming.hasValue())
    {
        input.add_var("supports_streaming", ::OpenAPI::toStringValue(supports_streaming.value()));
    }
    if (thumb.hasValue())
    {
        input.add_var("thumb", ::OpenAPI::toStringValue(thumb.value()));
    }
    
    {
        input.add_var("video", ::OpenAPI::toStringValue(video));
    }
    if (width.hasValue())
    {
        input.add_var("width", ::OpenAPI::toStringValue(width.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendVideoPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendVideoPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendVideoPostSignal(output);
        Q_EMIT sendVideoPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendVideoPostSignalE(output, error_type, error_str);
        Q_EMIT sendVideoPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendVideoPostSignalError(output, error_type, error_str);
        Q_EMIT sendVideoPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sendVoicePost(const OAI_copyMessage_post_request_chat_id &chat_id, const QString &voice, const ::OpenAPI::OptionalParam<bool> &allow_sending_without_reply, const ::OpenAPI::OptionalParam<QString> &caption, const ::OpenAPI::OptionalParam<QList<OAIMessageEntity>> &caption_entities, const ::OpenAPI::OptionalParam<bool> &disable_notification, const ::OpenAPI::OptionalParam<qint32> &duration, const ::OpenAPI::OptionalParam<QString> &parse_mode, const ::OpenAPI::OptionalParam<OAI_copyMessage_post_request_reply_markup> &reply_markup, const ::OpenAPI::OptionalParam<qint32> &reply_to_message_id) {
    QString fullPath = QString(_serverConfigs["sendVoicePost"][_serverIndices.value("sendVoicePost")].URL()+"/sendVoice");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (allow_sending_without_reply.hasValue())
    {
        input.add_var("allow_sending_without_reply", ::OpenAPI::toStringValue(allow_sending_without_reply.value()));
    }
    if (caption.hasValue())
    {
        input.add_var("caption", ::OpenAPI::toStringValue(caption.value()));
    }
    if (caption_entities.hasValue())
    {
        input.add_var("caption_entities", ::OpenAPI::toStringValue(caption_entities.value()));
    }
    
    {
        input.add_var("chat_id", ::OpenAPI::toStringValue(chat_id));
    }
    if (disable_notification.hasValue())
    {
        input.add_var("disable_notification", ::OpenAPI::toStringValue(disable_notification.value()));
    }
    if (duration.hasValue())
    {
        input.add_var("duration", ::OpenAPI::toStringValue(duration.value()));
    }
    if (parse_mode.hasValue())
    {
        input.add_var("parse_mode", ::OpenAPI::toStringValue(parse_mode.value()));
    }
    if (reply_markup.hasValue())
    {
        input.add_var("reply_markup", ::OpenAPI::toStringValue(reply_markup.value()));
    }
    if (reply_to_message_id.hasValue())
    {
        input.add_var("reply_to_message_id", ::OpenAPI::toStringValue(reply_to_message_id.value()));
    }
    
    {
        input.add_var("voice", ::OpenAPI::toStringValue(voice));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sendVoicePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sendVoicePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_forwardMessage_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendVoicePostSignal(output);
        Q_EMIT sendVoicePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendVoicePostSignalE(output, error_type, error_str);
        Q_EMIT sendVoicePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendVoicePostSignalError(output, error_type, error_str);
        Q_EMIT sendVoicePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setChatAdministratorCustomTitlePost(const OAI_setChatAdministratorCustomTitle_post_request &oai_set_chat_administrator_custom_title_post_request) {
    QString fullPath = QString(_serverConfigs["setChatAdministratorCustomTitlePost"][_serverIndices.value("setChatAdministratorCustomTitlePost")].URL()+"/setChatAdministratorCustomTitle");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_set_chat_administrator_custom_title_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setChatAdministratorCustomTitlePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setChatAdministratorCustomTitlePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setChatAdministratorCustomTitlePostSignal(output);
        Q_EMIT setChatAdministratorCustomTitlePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setChatAdministratorCustomTitlePostSignalE(output, error_type, error_str);
        Q_EMIT setChatAdministratorCustomTitlePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setChatAdministratorCustomTitlePostSignalError(output, error_type, error_str);
        Q_EMIT setChatAdministratorCustomTitlePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setChatDescriptionPost(const OAI_setChatDescription_post_request &oai_set_chat_description_post_request) {
    QString fullPath = QString(_serverConfigs["setChatDescriptionPost"][_serverIndices.value("setChatDescriptionPost")].URL()+"/setChatDescription");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_set_chat_description_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setChatDescriptionPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setChatDescriptionPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setChatDescriptionPostSignal(output);
        Q_EMIT setChatDescriptionPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setChatDescriptionPostSignalE(output, error_type, error_str);
        Q_EMIT setChatDescriptionPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setChatDescriptionPostSignalError(output, error_type, error_str);
        Q_EMIT setChatDescriptionPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setChatPermissionsPost(const OAI_setChatPermissions_post_request &oai_set_chat_permissions_post_request) {
    QString fullPath = QString(_serverConfigs["setChatPermissionsPost"][_serverIndices.value("setChatPermissionsPost")].URL()+"/setChatPermissions");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_set_chat_permissions_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setChatPermissionsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setChatPermissionsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setChatPermissionsPostSignal(output);
        Q_EMIT setChatPermissionsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setChatPermissionsPostSignalE(output, error_type, error_str);
        Q_EMIT setChatPermissionsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setChatPermissionsPostSignalError(output, error_type, error_str);
        Q_EMIT setChatPermissionsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setChatPhotoPost(const OAI_copyMessage_post_request_chat_id &chat_id, const QJsonValue &photo) {
    QString fullPath = QString(_serverConfigs["setChatPhotoPost"][_serverIndices.value("setChatPhotoPost")].URL()+"/setChatPhoto");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("chat_id", ::OpenAPI::toStringValue(chat_id));
    }
    
    {
        input.add_var("photo", ::OpenAPI::toStringValue(photo));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setChatPhotoPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setChatPhotoPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setChatPhotoPostSignal(output);
        Q_EMIT setChatPhotoPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setChatPhotoPostSignalE(output, error_type, error_str);
        Q_EMIT setChatPhotoPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setChatPhotoPostSignalError(output, error_type, error_str);
        Q_EMIT setChatPhotoPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setChatStickerSetPost(const OAI_setChatStickerSet_post_request &oai_set_chat_sticker_set_post_request) {
    QString fullPath = QString(_serverConfigs["setChatStickerSetPost"][_serverIndices.value("setChatStickerSetPost")].URL()+"/setChatStickerSet");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_set_chat_sticker_set_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setChatStickerSetPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setChatStickerSetPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setChatStickerSetPostSignal(output);
        Q_EMIT setChatStickerSetPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setChatStickerSetPostSignalE(output, error_type, error_str);
        Q_EMIT setChatStickerSetPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setChatStickerSetPostSignalError(output, error_type, error_str);
        Q_EMIT setChatStickerSetPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setChatTitlePost(const OAI_setChatTitle_post_request &oai_set_chat_title_post_request) {
    QString fullPath = QString(_serverConfigs["setChatTitlePost"][_serverIndices.value("setChatTitlePost")].URL()+"/setChatTitle");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_set_chat_title_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setChatTitlePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setChatTitlePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setChatTitlePostSignal(output);
        Q_EMIT setChatTitlePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setChatTitlePostSignalE(output, error_type, error_str);
        Q_EMIT setChatTitlePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setChatTitlePostSignalError(output, error_type, error_str);
        Q_EMIT setChatTitlePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setGameScorePost(const OAI_setGameScore_post_request &oai_set_game_score_post_request) {
    QString fullPath = QString(_serverConfigs["setGameScorePost"][_serverIndices.value("setGameScorePost")].URL()+"/setGameScore");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_set_game_score_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setGameScorePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setGameScorePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_editMessageCaption_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setGameScorePostSignal(output);
        Q_EMIT setGameScorePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setGameScorePostSignalE(output, error_type, error_str);
        Q_EMIT setGameScorePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setGameScorePostSignalError(output, error_type, error_str);
        Q_EMIT setGameScorePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setMyCommandsPost(const OAI_setMyCommands_post_request &oai_set_my_commands_post_request) {
    QString fullPath = QString(_serverConfigs["setMyCommandsPost"][_serverIndices.value("setMyCommandsPost")].URL()+"/setMyCommands");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_set_my_commands_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setMyCommandsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setMyCommandsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setMyCommandsPostSignal(output);
        Q_EMIT setMyCommandsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setMyCommandsPostSignalE(output, error_type, error_str);
        Q_EMIT setMyCommandsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setMyCommandsPostSignalError(output, error_type, error_str);
        Q_EMIT setMyCommandsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setPassportDataErrorsPost(const OAI_setPassportDataErrors_post_request &oai_set_passport_data_errors_post_request) {
    QString fullPath = QString(_serverConfigs["setPassportDataErrorsPost"][_serverIndices.value("setPassportDataErrorsPost")].URL()+"/setPassportDataErrors");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_set_passport_data_errors_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setPassportDataErrorsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setPassportDataErrorsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setPassportDataErrorsPostSignal(output);
        Q_EMIT setPassportDataErrorsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setPassportDataErrorsPostSignalE(output, error_type, error_str);
        Q_EMIT setPassportDataErrorsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setPassportDataErrorsPostSignalError(output, error_type, error_str);
        Q_EMIT setPassportDataErrorsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setStickerPositionInSetPost(const OAI_setStickerPositionInSet_post_request &oai_set_sticker_position_in_set_post_request) {
    QString fullPath = QString(_serverConfigs["setStickerPositionInSetPost"][_serverIndices.value("setStickerPositionInSetPost")].URL()+"/setStickerPositionInSet");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_set_sticker_position_in_set_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setStickerPositionInSetPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setStickerPositionInSetPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setStickerPositionInSetPostSignal(output);
        Q_EMIT setStickerPositionInSetPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setStickerPositionInSetPostSignalE(output, error_type, error_str);
        Q_EMIT setStickerPositionInSetPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setStickerPositionInSetPostSignalError(output, error_type, error_str);
        Q_EMIT setStickerPositionInSetPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setStickerSetThumbPost(const QString &name, const qint32 &user_id, const ::OpenAPI::OptionalParam<QString> &thumb) {
    QString fullPath = QString(_serverConfigs["setStickerSetThumbPost"][_serverIndices.value("setStickerSetThumbPost")].URL()+"/setStickerSetThumb");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("name", ::OpenAPI::toStringValue(name));
    }
    if (thumb.hasValue())
    {
        input.add_var("thumb", ::OpenAPI::toStringValue(thumb.value()));
    }
    
    {
        input.add_var("user_id", ::OpenAPI::toStringValue(user_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setStickerSetThumbPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setStickerSetThumbPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setStickerSetThumbPostSignal(output);
        Q_EMIT setStickerSetThumbPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setStickerSetThumbPostSignalE(output, error_type, error_str);
        Q_EMIT setStickerSetThumbPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setStickerSetThumbPostSignalError(output, error_type, error_str);
        Q_EMIT setStickerSetThumbPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::setWebhookPost(const QString &url, const ::OpenAPI::OptionalParam<QList<QString>> &allowed_updates, const ::OpenAPI::OptionalParam<QJsonValue> &certificate, const ::OpenAPI::OptionalParam<bool> &drop_pending_updates, const ::OpenAPI::OptionalParam<QString> &ip_address, const ::OpenAPI::OptionalParam<qint32> &max_connections) {
    QString fullPath = QString(_serverConfigs["setWebhookPost"][_serverIndices.value("setWebhookPost")].URL()+"/setWebhook");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (allowed_updates.hasValue())
    {
        input.add_var("allowed_updates", ::OpenAPI::toStringValue(allowed_updates.value()));
    }
    if (certificate.hasValue())
    {
        input.add_var("certificate", ::OpenAPI::toStringValue(certificate.value()));
    }
    if (drop_pending_updates.hasValue())
    {
        input.add_var("drop_pending_updates", ::OpenAPI::toStringValue(drop_pending_updates.value()));
    }
    if (ip_address.hasValue())
    {
        input.add_var("ip_address", ::OpenAPI::toStringValue(ip_address.value()));
    }
    if (max_connections.hasValue())
    {
        input.add_var("max_connections", ::OpenAPI::toStringValue(max_connections.value()));
    }
    
    {
        input.add_var("url", ::OpenAPI::toStringValue(url));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::setWebhookPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::setWebhookPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setWebhookPostSignal(output);
        Q_EMIT setWebhookPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setWebhookPostSignalE(output, error_type, error_str);
        Q_EMIT setWebhookPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setWebhookPostSignalError(output, error_type, error_str);
        Q_EMIT setWebhookPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::stopMessageLiveLocationPost(const OAI_stopMessageLiveLocation_post_request &oai_stop_message_live_location_post_request) {
    QString fullPath = QString(_serverConfigs["stopMessageLiveLocationPost"][_serverIndices.value("stopMessageLiveLocationPost")].URL()+"/stopMessageLiveLocation");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_stop_message_live_location_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::stopMessageLiveLocationPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::stopMessageLiveLocationPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_editMessageCaption_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stopMessageLiveLocationPostSignal(output);
        Q_EMIT stopMessageLiveLocationPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stopMessageLiveLocationPostSignalE(output, error_type, error_str);
        Q_EMIT stopMessageLiveLocationPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stopMessageLiveLocationPostSignalError(output, error_type, error_str);
        Q_EMIT stopMessageLiveLocationPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::stopPollPost(const OAI_stopPoll_post_request &oai_stop_poll_post_request) {
    QString fullPath = QString(_serverConfigs["stopPollPost"][_serverIndices.value("stopPollPost")].URL()+"/stopPoll");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_stop_poll_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::stopPollPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::stopPollPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_stopPoll_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stopPollPostSignal(output);
        Q_EMIT stopPollPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stopPollPostSignalE(output, error_type, error_str);
        Q_EMIT stopPollPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stopPollPostSignalError(output, error_type, error_str);
        Q_EMIT stopPollPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::unbanChatMemberPost(const OAI_unbanChatMember_post_request &oai_unban_chat_member_post_request) {
    QString fullPath = QString(_serverConfigs["unbanChatMemberPost"][_serverIndices.value("unbanChatMemberPost")].URL()+"/unbanChatMember");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_unban_chat_member_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::unbanChatMemberPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::unbanChatMemberPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT unbanChatMemberPostSignal(output);
        Q_EMIT unbanChatMemberPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT unbanChatMemberPostSignalE(output, error_type, error_str);
        Q_EMIT unbanChatMemberPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT unbanChatMemberPostSignalError(output, error_type, error_str);
        Q_EMIT unbanChatMemberPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::unpinAllChatMessagesPost(const OAI_deleteChatPhoto_post_request &oai_delete_chat_photo_post_request) {
    QString fullPath = QString(_serverConfigs["unpinAllChatMessagesPost"][_serverIndices.value("unpinAllChatMessagesPost")].URL()+"/unpinAllChatMessages");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_delete_chat_photo_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::unpinAllChatMessagesPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::unpinAllChatMessagesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT unpinAllChatMessagesPostSignal(output);
        Q_EMIT unpinAllChatMessagesPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT unpinAllChatMessagesPostSignalE(output, error_type, error_str);
        Q_EMIT unpinAllChatMessagesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT unpinAllChatMessagesPostSignalError(output, error_type, error_str);
        Q_EMIT unpinAllChatMessagesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::unpinChatMessagePost(const OAI_unpinChatMessage_post_request &oai_unpin_chat_message_post_request) {
    QString fullPath = QString(_serverConfigs["unpinChatMessagePost"][_serverIndices.value("unpinChatMessagePost")].URL()+"/unpinChatMessage");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_unpin_chat_message_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::unpinChatMessagePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::unpinChatMessagePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_addStickerToSet_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT unpinChatMessagePostSignal(output);
        Q_EMIT unpinChatMessagePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT unpinChatMessagePostSignalE(output, error_type, error_str);
        Q_EMIT unpinChatMessagePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT unpinChatMessagePostSignalError(output, error_type, error_str);
        Q_EMIT unpinChatMessagePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::uploadStickerFilePost(const QJsonValue &png_sticker, const qint32 &user_id) {
    QString fullPath = QString(_serverConfigs["uploadStickerFilePost"][_serverIndices.value("uploadStickerFilePost")].URL()+"/uploadStickerFile");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("png_sticker", ::OpenAPI::toStringValue(png_sticker));
    }
    
    {
        input.add_var("user_id", ::OpenAPI::toStringValue(user_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::uploadStickerFilePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::uploadStickerFilePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_getFile_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT uploadStickerFilePostSignal(output);
        Q_EMIT uploadStickerFilePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT uploadStickerFilePostSignalE(output, error_type, error_str);
        Q_EMIT uploadStickerFilePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT uploadStickerFilePostSignalError(output, error_type, error_str);
        Q_EMIT uploadStickerFilePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
