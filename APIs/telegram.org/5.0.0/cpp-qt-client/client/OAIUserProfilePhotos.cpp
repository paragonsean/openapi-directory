/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserProfilePhotos.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserProfilePhotos::OAIUserProfilePhotos(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserProfilePhotos::OAIUserProfilePhotos() {
    this->initializeModel();
}

OAIUserProfilePhotos::~OAIUserProfilePhotos() {}

void OAIUserProfilePhotos::initializeModel() {

    m_photos_isSet = false;
    m_photos_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIUserProfilePhotos::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserProfilePhotos::fromJsonObject(QJsonObject json) {

    if(json["photos"].isArray()){
        auto arr = json["photos"].toArray();
        m_photos_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIPhotoSize> item;
                m_photos_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_photos_isSet = !jval.isNull() && m_photos_isValid;
                m_photos.push_back(item);
            }
        }
    }

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;
}

QString OAIUserProfilePhotos::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserProfilePhotos::asJsonObject() const {
    QJsonObject obj;
    if (m_photos.size() > 0) {
        
        obj.insert(QString("photos"), toJsonValue(m_photos));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QList<QList<OAIPhotoSize>> OAIUserProfilePhotos::getPhotos() const {
    return m_photos;
}
void OAIUserProfilePhotos::setPhotos(const QList<QList<OAIPhotoSize>> &photos) {
    m_photos = photos;
    m_photos_isSet = true;
}

bool OAIUserProfilePhotos::is_photos_Set() const{
    return m_photos_isSet;
}

bool OAIUserProfilePhotos::is_photos_Valid() const{
    return m_photos_isValid;
}

qint32 OAIUserProfilePhotos::getTotalCount() const {
    return m_total_count;
}
void OAIUserProfilePhotos::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIUserProfilePhotos::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIUserProfilePhotos::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIUserProfilePhotos::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_photos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserProfilePhotos::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_photos_isValid && m_total_count_isValid && true;
}

} // namespace OpenAPI
