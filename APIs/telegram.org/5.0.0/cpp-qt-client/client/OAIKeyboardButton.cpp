/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyboardButton.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyboardButton::OAIKeyboardButton(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyboardButton::OAIKeyboardButton() {
    this->initializeModel();
}

OAIKeyboardButton::~OAIKeyboardButton() {}

void OAIKeyboardButton::initializeModel() {

    m_request_contact_isSet = false;
    m_request_contact_isValid = false;

    m_request_location_isSet = false;
    m_request_location_isValid = false;

    m_request_poll_isSet = false;
    m_request_poll_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIKeyboardButton::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyboardButton::fromJsonObject(QJsonObject json) {

    m_request_contact_isValid = ::OpenAPI::fromJsonValue(m_request_contact, json[QString("request_contact")]);
    m_request_contact_isSet = !json[QString("request_contact")].isNull() && m_request_contact_isValid;

    m_request_location_isValid = ::OpenAPI::fromJsonValue(m_request_location, json[QString("request_location")]);
    m_request_location_isSet = !json[QString("request_location")].isNull() && m_request_location_isValid;

    m_request_poll_isValid = ::OpenAPI::fromJsonValue(m_request_poll, json[QString("request_poll")]);
    m_request_poll_isSet = !json[QString("request_poll")].isNull() && m_request_poll_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIKeyboardButton::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyboardButton::asJsonObject() const {
    QJsonObject obj;
    if (m_request_contact_isSet) {
        obj.insert(QString("request_contact"), ::OpenAPI::toJsonValue(m_request_contact));
    }
    if (m_request_location_isSet) {
        obj.insert(QString("request_location"), ::OpenAPI::toJsonValue(m_request_location));
    }
    if (m_request_poll.isSet()) {
        obj.insert(QString("request_poll"), ::OpenAPI::toJsonValue(m_request_poll));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

bool OAIKeyboardButton::isRequestContact() const {
    return m_request_contact;
}
void OAIKeyboardButton::setRequestContact(const bool &request_contact) {
    m_request_contact = request_contact;
    m_request_contact_isSet = true;
}

bool OAIKeyboardButton::is_request_contact_Set() const{
    return m_request_contact_isSet;
}

bool OAIKeyboardButton::is_request_contact_Valid() const{
    return m_request_contact_isValid;
}

bool OAIKeyboardButton::isRequestLocation() const {
    return m_request_location;
}
void OAIKeyboardButton::setRequestLocation(const bool &request_location) {
    m_request_location = request_location;
    m_request_location_isSet = true;
}

bool OAIKeyboardButton::is_request_location_Set() const{
    return m_request_location_isSet;
}

bool OAIKeyboardButton::is_request_location_Valid() const{
    return m_request_location_isValid;
}

OAIKeyboardButtonPollType OAIKeyboardButton::getRequestPoll() const {
    return m_request_poll;
}
void OAIKeyboardButton::setRequestPoll(const OAIKeyboardButtonPollType &request_poll) {
    m_request_poll = request_poll;
    m_request_poll_isSet = true;
}

bool OAIKeyboardButton::is_request_poll_Set() const{
    return m_request_poll_isSet;
}

bool OAIKeyboardButton::is_request_poll_Valid() const{
    return m_request_poll_isValid;
}

QString OAIKeyboardButton::getText() const {
    return m_text;
}
void OAIKeyboardButton::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIKeyboardButton::is_text_Set() const{
    return m_text_isSet;
}

bool OAIKeyboardButton::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIKeyboardButton::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_poll.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyboardButton::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && true;
}

} // namespace OpenAPI
