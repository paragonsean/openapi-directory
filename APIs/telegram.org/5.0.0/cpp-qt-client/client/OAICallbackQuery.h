/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICallbackQuery.h
 *
 * This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\\_message\\_id* will be present. Exactly one of the fields *data* or *game\\_short\\_name* will be present.
 */

#ifndef OAICallbackQuery_H
#define OAICallbackQuery_H

#include <QJsonObject>

#include "OAIMessage.h"
#include "OAIUser.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser;
class OAIMessage;

class OAICallbackQuery : public OAIObject {
public:
    OAICallbackQuery();
    OAICallbackQuery(QString json);
    ~OAICallbackQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChatInstance() const;
    void setChatInstance(const QString &chat_instance);
    bool is_chat_instance_Set() const;
    bool is_chat_instance_Valid() const;

    QString getData() const;
    void setData(const QString &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    OAIUser getFrom() const;
    void setFrom(const OAIUser &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QString getGameShortName() const;
    void setGameShortName(const QString &game_short_name);
    bool is_game_short_name_Set() const;
    bool is_game_short_name_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getInlineMessageId() const;
    void setInlineMessageId(const QString &inline_message_id);
    bool is_inline_message_id_Set() const;
    bool is_inline_message_id_Valid() const;

    OAIMessage getMessage() const;
    void setMessage(const OAIMessage &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_chat_instance;
    bool m_chat_instance_isSet;
    bool m_chat_instance_isValid;

    QString m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    OAIUser m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QString m_game_short_name;
    bool m_game_short_name_isSet;
    bool m_game_short_name_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_inline_message_id;
    bool m_inline_message_id_isSet;
    bool m_inline_message_id_isValid;

    OAIMessage m_message;
    bool m_message_isSet;
    bool m_message_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICallbackQuery)

#endif // OAICallbackQuery_H
