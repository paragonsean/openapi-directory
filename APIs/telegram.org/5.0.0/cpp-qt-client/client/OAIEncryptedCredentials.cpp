/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptedCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptedCredentials::OAIEncryptedCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptedCredentials::OAIEncryptedCredentials() {
    this->initializeModel();
}

OAIEncryptedCredentials::~OAIEncryptedCredentials() {}

void OAIEncryptedCredentials::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIEncryptedCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptedCredentials::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAIEncryptedCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptedCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

QString OAIEncryptedCredentials::getData() const {
    return m_data;
}
void OAIEncryptedCredentials::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIEncryptedCredentials::is_data_Set() const{
    return m_data_isSet;
}

bool OAIEncryptedCredentials::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIEncryptedCredentials::getHash() const {
    return m_hash;
}
void OAIEncryptedCredentials::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIEncryptedCredentials::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIEncryptedCredentials::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAIEncryptedCredentials::getSecret() const {
    return m_secret;
}
void OAIEncryptedCredentials::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIEncryptedCredentials::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIEncryptedCredentials::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIEncryptedCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptedCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_hash_isValid && m_secret_isValid && true;
}

} // namespace OpenAPI
