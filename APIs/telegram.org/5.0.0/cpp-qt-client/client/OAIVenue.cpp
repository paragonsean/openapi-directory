/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVenue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVenue::OAIVenue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVenue::OAIVenue() {
    this->initializeModel();
}

OAIVenue::~OAIVenue() {}

void OAIVenue::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_foursquare_id_isSet = false;
    m_foursquare_id_isValid = false;

    m_foursquare_type_isSet = false;
    m_foursquare_type_isValid = false;

    m_google_place_id_isSet = false;
    m_google_place_id_isValid = false;

    m_google_place_type_isSet = false;
    m_google_place_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIVenue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVenue::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_foursquare_id_isValid = ::OpenAPI::fromJsonValue(m_foursquare_id, json[QString("foursquare_id")]);
    m_foursquare_id_isSet = !json[QString("foursquare_id")].isNull() && m_foursquare_id_isValid;

    m_foursquare_type_isValid = ::OpenAPI::fromJsonValue(m_foursquare_type, json[QString("foursquare_type")]);
    m_foursquare_type_isSet = !json[QString("foursquare_type")].isNull() && m_foursquare_type_isValid;

    m_google_place_id_isValid = ::OpenAPI::fromJsonValue(m_google_place_id, json[QString("google_place_id")]);
    m_google_place_id_isSet = !json[QString("google_place_id")].isNull() && m_google_place_id_isValid;

    m_google_place_type_isValid = ::OpenAPI::fromJsonValue(m_google_place_type, json[QString("google_place_type")]);
    m_google_place_type_isSet = !json[QString("google_place_type")].isNull() && m_google_place_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIVenue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVenue::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_foursquare_id_isSet) {
        obj.insert(QString("foursquare_id"), ::OpenAPI::toJsonValue(m_foursquare_id));
    }
    if (m_foursquare_type_isSet) {
        obj.insert(QString("foursquare_type"), ::OpenAPI::toJsonValue(m_foursquare_type));
    }
    if (m_google_place_id_isSet) {
        obj.insert(QString("google_place_id"), ::OpenAPI::toJsonValue(m_google_place_id));
    }
    if (m_google_place_type_isSet) {
        obj.insert(QString("google_place_type"), ::OpenAPI::toJsonValue(m_google_place_type));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIVenue::getAddress() const {
    return m_address;
}
void OAIVenue::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIVenue::is_address_Set() const{
    return m_address_isSet;
}

bool OAIVenue::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIVenue::getFoursquareId() const {
    return m_foursquare_id;
}
void OAIVenue::setFoursquareId(const QString &foursquare_id) {
    m_foursquare_id = foursquare_id;
    m_foursquare_id_isSet = true;
}

bool OAIVenue::is_foursquare_id_Set() const{
    return m_foursquare_id_isSet;
}

bool OAIVenue::is_foursquare_id_Valid() const{
    return m_foursquare_id_isValid;
}

QString OAIVenue::getFoursquareType() const {
    return m_foursquare_type;
}
void OAIVenue::setFoursquareType(const QString &foursquare_type) {
    m_foursquare_type = foursquare_type;
    m_foursquare_type_isSet = true;
}

bool OAIVenue::is_foursquare_type_Set() const{
    return m_foursquare_type_isSet;
}

bool OAIVenue::is_foursquare_type_Valid() const{
    return m_foursquare_type_isValid;
}

QString OAIVenue::getGooglePlaceId() const {
    return m_google_place_id;
}
void OAIVenue::setGooglePlaceId(const QString &google_place_id) {
    m_google_place_id = google_place_id;
    m_google_place_id_isSet = true;
}

bool OAIVenue::is_google_place_id_Set() const{
    return m_google_place_id_isSet;
}

bool OAIVenue::is_google_place_id_Valid() const{
    return m_google_place_id_isValid;
}

QString OAIVenue::getGooglePlaceType() const {
    return m_google_place_type;
}
void OAIVenue::setGooglePlaceType(const QString &google_place_type) {
    m_google_place_type = google_place_type;
    m_google_place_type_isSet = true;
}

bool OAIVenue::is_google_place_type_Set() const{
    return m_google_place_type_isSet;
}

bool OAIVenue::is_google_place_type_Valid() const{
    return m_google_place_type_isValid;
}

OAILocation OAIVenue::getLocation() const {
    return m_location;
}
void OAIVenue::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIVenue::is_location_Set() const{
    return m_location_isSet;
}

bool OAIVenue::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIVenue::getTitle() const {
    return m_title;
}
void OAIVenue::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIVenue::is_title_Set() const{
    return m_title_isSet;
}

bool OAIVenue::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIVenue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foursquare_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foursquare_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_place_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVenue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_location_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
