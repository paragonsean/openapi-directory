/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInlineQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInlineQuery::OAIInlineQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInlineQuery::OAIInlineQuery() {
    this->initializeModel();
}

OAIInlineQuery::~OAIInlineQuery() {}

void OAIInlineQuery::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAIInlineQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInlineQuery::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAIInlineQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInlineQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

OAIUser OAIInlineQuery::getFrom() const {
    return m_from;
}
void OAIInlineQuery::setFrom(const OAIUser &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIInlineQuery::is_from_Set() const{
    return m_from_isSet;
}

bool OAIInlineQuery::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIInlineQuery::getId() const {
    return m_id;
}
void OAIInlineQuery::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInlineQuery::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInlineQuery::is_id_Valid() const{
    return m_id_isValid;
}

OAILocation OAIInlineQuery::getLocation() const {
    return m_location;
}
void OAIInlineQuery::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIInlineQuery::is_location_Set() const{
    return m_location_isSet;
}

bool OAIInlineQuery::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIInlineQuery::getOffset() const {
    return m_offset;
}
void OAIInlineQuery::setOffset(const QString &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIInlineQuery::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIInlineQuery::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIInlineQuery::getQuery() const {
    return m_query;
}
void OAIInlineQuery::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIInlineQuery::is_query_Set() const{
    return m_query_isSet;
}

bool OAIInlineQuery::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIInlineQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInlineQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_id_isValid && m_offset_isValid && m_query_isValid && true;
}

} // namespace OpenAPI
