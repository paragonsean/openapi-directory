/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_getUpdates_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_getUpdates_post_request::OAI_getUpdates_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_getUpdates_post_request::OAI_getUpdates_post_request() {
    this->initializeModel();
}

OAI_getUpdates_post_request::~OAI_getUpdates_post_request() {}

void OAI_getUpdates_post_request::initializeModel() {

    m_allowed_updates_isSet = false;
    m_allowed_updates_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAI_getUpdates_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_getUpdates_post_request::fromJsonObject(QJsonObject json) {

    m_allowed_updates_isValid = ::OpenAPI::fromJsonValue(m_allowed_updates, json[QString("allowed_updates")]);
    m_allowed_updates_isSet = !json[QString("allowed_updates")].isNull() && m_allowed_updates_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAI_getUpdates_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_getUpdates_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_updates.size() > 0) {
        obj.insert(QString("allowed_updates"), ::OpenAPI::toJsonValue(m_allowed_updates));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QList<QString> OAI_getUpdates_post_request::getAllowedUpdates() const {
    return m_allowed_updates;
}
void OAI_getUpdates_post_request::setAllowedUpdates(const QList<QString> &allowed_updates) {
    m_allowed_updates = allowed_updates;
    m_allowed_updates_isSet = true;
}

bool OAI_getUpdates_post_request::is_allowed_updates_Set() const{
    return m_allowed_updates_isSet;
}

bool OAI_getUpdates_post_request::is_allowed_updates_Valid() const{
    return m_allowed_updates_isValid;
}

qint32 OAI_getUpdates_post_request::getLimit() const {
    return m_limit;
}
void OAI_getUpdates_post_request::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAI_getUpdates_post_request::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAI_getUpdates_post_request::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAI_getUpdates_post_request::getOffset() const {
    return m_offset;
}
void OAI_getUpdates_post_request::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAI_getUpdates_post_request::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAI_getUpdates_post_request::is_offset_Valid() const{
    return m_offset_isValid;
}

qint32 OAI_getUpdates_post_request::getTimeout() const {
    return m_timeout;
}
void OAI_getUpdates_post_request::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAI_getUpdates_post_request::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAI_getUpdates_post_request::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAI_getUpdates_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_updates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_getUpdates_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
