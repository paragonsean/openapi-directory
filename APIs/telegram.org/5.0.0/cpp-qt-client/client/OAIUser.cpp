/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_can_join_groups_isSet = false;
    m_can_join_groups_isValid = false;

    m_can_read_all_group_messages_isSet = false;
    m_can_read_all_group_messages_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_bot_isSet = false;
    m_is_bot_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_supports_inline_queries_isSet = false;
    m_supports_inline_queries_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_can_join_groups_isValid = ::OpenAPI::fromJsonValue(m_can_join_groups, json[QString("can_join_groups")]);
    m_can_join_groups_isSet = !json[QString("can_join_groups")].isNull() && m_can_join_groups_isValid;

    m_can_read_all_group_messages_isValid = ::OpenAPI::fromJsonValue(m_can_read_all_group_messages, json[QString("can_read_all_group_messages")]);
    m_can_read_all_group_messages_isSet = !json[QString("can_read_all_group_messages")].isNull() && m_can_read_all_group_messages_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_bot_isValid = ::OpenAPI::fromJsonValue(m_is_bot, json[QString("is_bot")]);
    m_is_bot_isSet = !json[QString("is_bot")].isNull() && m_is_bot_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("language_code")]);
    m_language_code_isSet = !json[QString("language_code")].isNull() && m_language_code_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_supports_inline_queries_isValid = ::OpenAPI::fromJsonValue(m_supports_inline_queries, json[QString("supports_inline_queries")]);
    m_supports_inline_queries_isSet = !json[QString("supports_inline_queries")].isNull() && m_supports_inline_queries_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_can_join_groups_isSet) {
        obj.insert(QString("can_join_groups"), ::OpenAPI::toJsonValue(m_can_join_groups));
    }
    if (m_can_read_all_group_messages_isSet) {
        obj.insert(QString("can_read_all_group_messages"), ::OpenAPI::toJsonValue(m_can_read_all_group_messages));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_bot_isSet) {
        obj.insert(QString("is_bot"), ::OpenAPI::toJsonValue(m_is_bot));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("language_code"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_supports_inline_queries_isSet) {
        obj.insert(QString("supports_inline_queries"), ::OpenAPI::toJsonValue(m_supports_inline_queries));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAIUser::isCanJoinGroups() const {
    return m_can_join_groups;
}
void OAIUser::setCanJoinGroups(const bool &can_join_groups) {
    m_can_join_groups = can_join_groups;
    m_can_join_groups_isSet = true;
}

bool OAIUser::is_can_join_groups_Set() const{
    return m_can_join_groups_isSet;
}

bool OAIUser::is_can_join_groups_Valid() const{
    return m_can_join_groups_isValid;
}

bool OAIUser::isCanReadAllGroupMessages() const {
    return m_can_read_all_group_messages;
}
void OAIUser::setCanReadAllGroupMessages(const bool &can_read_all_group_messages) {
    m_can_read_all_group_messages = can_read_all_group_messages;
    m_can_read_all_group_messages_isSet = true;
}

bool OAIUser::is_can_read_all_group_messages_Set() const{
    return m_can_read_all_group_messages_isSet;
}

bool OAIUser::is_can_read_all_group_messages_Valid() const{
    return m_can_read_all_group_messages_isValid;
}

QString OAIUser::getFirstName() const {
    return m_first_name;
}
void OAIUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint32 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUser::isIsBot() const {
    return m_is_bot;
}
void OAIUser::setIsBot(const bool &is_bot) {
    m_is_bot = is_bot;
    m_is_bot_isSet = true;
}

bool OAIUser::is_is_bot_Set() const{
    return m_is_bot_isSet;
}

bool OAIUser::is_is_bot_Valid() const{
    return m_is_bot_isValid;
}

QString OAIUser::getLanguageCode() const {
    return m_language_code;
}
void OAIUser::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIUser::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIUser::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIUser::getLastName() const {
    return m_last_name;
}
void OAIUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

bool OAIUser::isSupportsInlineQueries() const {
    return m_supports_inline_queries;
}
void OAIUser::setSupportsInlineQueries(const bool &supports_inline_queries) {
    m_supports_inline_queries = supports_inline_queries;
    m_supports_inline_queries_isSet = true;
}

bool OAIUser::is_supports_inline_queries_Set() const{
    return m_supports_inline_queries_isSet;
}

bool OAIUser::is_supports_inline_queries_Valid() const{
    return m_supports_inline_queries_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_join_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_read_all_group_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_inline_queries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_first_name_isValid && m_id_isValid && m_is_bot_isValid && true;
}

} // namespace OpenAPI
