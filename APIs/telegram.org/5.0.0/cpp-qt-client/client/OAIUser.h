/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUser.h
 *
 * This object represents a Telegram user or bot.
 */

#ifndef OAIUser_H
#define OAIUser_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUser : public OAIObject {
public:
    OAIUser();
    OAIUser(QString json);
    ~OAIUser() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCanJoinGroups() const;
    void setCanJoinGroups(const bool &can_join_groups);
    bool is_can_join_groups_Set() const;
    bool is_can_join_groups_Valid() const;

    bool isCanReadAllGroupMessages() const;
    void setCanReadAllGroupMessages(const bool &can_read_all_group_messages);
    bool is_can_read_all_group_messages_Set() const;
    bool is_can_read_all_group_messages_Valid() const;

    QString getFirstName() const;
    void setFirstName(const QString &first_name);
    bool is_first_name_Set() const;
    bool is_first_name_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsBot() const;
    void setIsBot(const bool &is_bot);
    bool is_is_bot_Set() const;
    bool is_is_bot_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    QString getLastName() const;
    void setLastName(const QString &last_name);
    bool is_last_name_Set() const;
    bool is_last_name_Valid() const;

    bool isSupportsInlineQueries() const;
    void setSupportsInlineQueries(const bool &supports_inline_queries);
    bool is_supports_inline_queries_Set() const;
    bool is_supports_inline_queries_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_can_join_groups;
    bool m_can_join_groups_isSet;
    bool m_can_join_groups_isValid;

    bool m_can_read_all_group_messages;
    bool m_can_read_all_group_messages_isSet;
    bool m_can_read_all_group_messages_isValid;

    QString m_first_name;
    bool m_first_name_isSet;
    bool m_first_name_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_bot;
    bool m_is_bot_isSet;
    bool m_is_bot_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    QString m_last_name;
    bool m_last_name_isSet;
    bool m_last_name_isValid;

    bool m_supports_inline_queries;
    bool m_supports_inline_queries_isSet;
    bool m_supports_inline_queries_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUser)

#endif // OAIUser_H
