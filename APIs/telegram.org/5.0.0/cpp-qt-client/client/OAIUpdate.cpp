/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdate::OAIUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdate::OAIUpdate() {
    this->initializeModel();
}

OAIUpdate::~OAIUpdate() {}

void OAIUpdate::initializeModel() {

    m_callback_query_isSet = false;
    m_callback_query_isValid = false;

    m_channel_post_isSet = false;
    m_channel_post_isValid = false;

    m_chosen_inline_result_isSet = false;
    m_chosen_inline_result_isValid = false;

    m_edited_channel_post_isSet = false;
    m_edited_channel_post_isValid = false;

    m_edited_message_isSet = false;
    m_edited_message_isValid = false;

    m_inline_query_isSet = false;
    m_inline_query_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_poll_isSet = false;
    m_poll_isValid = false;

    m_poll_answer_isSet = false;
    m_poll_answer_isValid = false;

    m_pre_checkout_query_isSet = false;
    m_pre_checkout_query_isValid = false;

    m_shipping_query_isSet = false;
    m_shipping_query_isValid = false;

    m_update_id_isSet = false;
    m_update_id_isValid = false;
}

void OAIUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdate::fromJsonObject(QJsonObject json) {

    m_callback_query_isValid = ::OpenAPI::fromJsonValue(m_callback_query, json[QString("callback_query")]);
    m_callback_query_isSet = !json[QString("callback_query")].isNull() && m_callback_query_isValid;

    m_channel_post_isValid = ::OpenAPI::fromJsonValue(m_channel_post, json[QString("channel_post")]);
    m_channel_post_isSet = !json[QString("channel_post")].isNull() && m_channel_post_isValid;

    m_chosen_inline_result_isValid = ::OpenAPI::fromJsonValue(m_chosen_inline_result, json[QString("chosen_inline_result")]);
    m_chosen_inline_result_isSet = !json[QString("chosen_inline_result")].isNull() && m_chosen_inline_result_isValid;

    m_edited_channel_post_isValid = ::OpenAPI::fromJsonValue(m_edited_channel_post, json[QString("edited_channel_post")]);
    m_edited_channel_post_isSet = !json[QString("edited_channel_post")].isNull() && m_edited_channel_post_isValid;

    m_edited_message_isValid = ::OpenAPI::fromJsonValue(m_edited_message, json[QString("edited_message")]);
    m_edited_message_isSet = !json[QString("edited_message")].isNull() && m_edited_message_isValid;

    m_inline_query_isValid = ::OpenAPI::fromJsonValue(m_inline_query, json[QString("inline_query")]);
    m_inline_query_isSet = !json[QString("inline_query")].isNull() && m_inline_query_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_poll_isValid = ::OpenAPI::fromJsonValue(m_poll, json[QString("poll")]);
    m_poll_isSet = !json[QString("poll")].isNull() && m_poll_isValid;

    m_poll_answer_isValid = ::OpenAPI::fromJsonValue(m_poll_answer, json[QString("poll_answer")]);
    m_poll_answer_isSet = !json[QString("poll_answer")].isNull() && m_poll_answer_isValid;

    m_pre_checkout_query_isValid = ::OpenAPI::fromJsonValue(m_pre_checkout_query, json[QString("pre_checkout_query")]);
    m_pre_checkout_query_isSet = !json[QString("pre_checkout_query")].isNull() && m_pre_checkout_query_isValid;

    m_shipping_query_isValid = ::OpenAPI::fromJsonValue(m_shipping_query, json[QString("shipping_query")]);
    m_shipping_query_isSet = !json[QString("shipping_query")].isNull() && m_shipping_query_isValid;

    m_update_id_isValid = ::OpenAPI::fromJsonValue(m_update_id, json[QString("update_id")]);
    m_update_id_isSet = !json[QString("update_id")].isNull() && m_update_id_isValid;
}

QString OAIUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_query.isSet()) {
        obj.insert(QString("callback_query"), ::OpenAPI::toJsonValue(m_callback_query));
    }
    if (m_channel_post.isSet()) {
        obj.insert(QString("channel_post"), ::OpenAPI::toJsonValue(m_channel_post));
    }
    if (m_chosen_inline_result.isSet()) {
        obj.insert(QString("chosen_inline_result"), ::OpenAPI::toJsonValue(m_chosen_inline_result));
    }
    if (m_edited_channel_post.isSet()) {
        obj.insert(QString("edited_channel_post"), ::OpenAPI::toJsonValue(m_edited_channel_post));
    }
    if (m_edited_message.isSet()) {
        obj.insert(QString("edited_message"), ::OpenAPI::toJsonValue(m_edited_message));
    }
    if (m_inline_query.isSet()) {
        obj.insert(QString("inline_query"), ::OpenAPI::toJsonValue(m_inline_query));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_poll.isSet()) {
        obj.insert(QString("poll"), ::OpenAPI::toJsonValue(m_poll));
    }
    if (m_poll_answer.isSet()) {
        obj.insert(QString("poll_answer"), ::OpenAPI::toJsonValue(m_poll_answer));
    }
    if (m_pre_checkout_query.isSet()) {
        obj.insert(QString("pre_checkout_query"), ::OpenAPI::toJsonValue(m_pre_checkout_query));
    }
    if (m_shipping_query.isSet()) {
        obj.insert(QString("shipping_query"), ::OpenAPI::toJsonValue(m_shipping_query));
    }
    if (m_update_id_isSet) {
        obj.insert(QString("update_id"), ::OpenAPI::toJsonValue(m_update_id));
    }
    return obj;
}

OAICallbackQuery OAIUpdate::getCallbackQuery() const {
    return m_callback_query;
}
void OAIUpdate::setCallbackQuery(const OAICallbackQuery &callback_query) {
    m_callback_query = callback_query;
    m_callback_query_isSet = true;
}

bool OAIUpdate::is_callback_query_Set() const{
    return m_callback_query_isSet;
}

bool OAIUpdate::is_callback_query_Valid() const{
    return m_callback_query_isValid;
}

OAIMessage OAIUpdate::getChannelPost() const {
    return m_channel_post;
}
void OAIUpdate::setChannelPost(const OAIMessage &channel_post) {
    m_channel_post = channel_post;
    m_channel_post_isSet = true;
}

bool OAIUpdate::is_channel_post_Set() const{
    return m_channel_post_isSet;
}

bool OAIUpdate::is_channel_post_Valid() const{
    return m_channel_post_isValid;
}

OAIChosenInlineResult OAIUpdate::getChosenInlineResult() const {
    return m_chosen_inline_result;
}
void OAIUpdate::setChosenInlineResult(const OAIChosenInlineResult &chosen_inline_result) {
    m_chosen_inline_result = chosen_inline_result;
    m_chosen_inline_result_isSet = true;
}

bool OAIUpdate::is_chosen_inline_result_Set() const{
    return m_chosen_inline_result_isSet;
}

bool OAIUpdate::is_chosen_inline_result_Valid() const{
    return m_chosen_inline_result_isValid;
}

OAIMessage OAIUpdate::getEditedChannelPost() const {
    return m_edited_channel_post;
}
void OAIUpdate::setEditedChannelPost(const OAIMessage &edited_channel_post) {
    m_edited_channel_post = edited_channel_post;
    m_edited_channel_post_isSet = true;
}

bool OAIUpdate::is_edited_channel_post_Set() const{
    return m_edited_channel_post_isSet;
}

bool OAIUpdate::is_edited_channel_post_Valid() const{
    return m_edited_channel_post_isValid;
}

OAIMessage OAIUpdate::getEditedMessage() const {
    return m_edited_message;
}
void OAIUpdate::setEditedMessage(const OAIMessage &edited_message) {
    m_edited_message = edited_message;
    m_edited_message_isSet = true;
}

bool OAIUpdate::is_edited_message_Set() const{
    return m_edited_message_isSet;
}

bool OAIUpdate::is_edited_message_Valid() const{
    return m_edited_message_isValid;
}

OAIInlineQuery OAIUpdate::getInlineQuery() const {
    return m_inline_query;
}
void OAIUpdate::setInlineQuery(const OAIInlineQuery &inline_query) {
    m_inline_query = inline_query;
    m_inline_query_isSet = true;
}

bool OAIUpdate::is_inline_query_Set() const{
    return m_inline_query_isSet;
}

bool OAIUpdate::is_inline_query_Valid() const{
    return m_inline_query_isValid;
}

OAIMessage OAIUpdate::getMessage() const {
    return m_message;
}
void OAIUpdate::setMessage(const OAIMessage &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIUpdate::is_message_Set() const{
    return m_message_isSet;
}

bool OAIUpdate::is_message_Valid() const{
    return m_message_isValid;
}

OAIPoll OAIUpdate::getPoll() const {
    return m_poll;
}
void OAIUpdate::setPoll(const OAIPoll &poll) {
    m_poll = poll;
    m_poll_isSet = true;
}

bool OAIUpdate::is_poll_Set() const{
    return m_poll_isSet;
}

bool OAIUpdate::is_poll_Valid() const{
    return m_poll_isValid;
}

OAIPollAnswer OAIUpdate::getPollAnswer() const {
    return m_poll_answer;
}
void OAIUpdate::setPollAnswer(const OAIPollAnswer &poll_answer) {
    m_poll_answer = poll_answer;
    m_poll_answer_isSet = true;
}

bool OAIUpdate::is_poll_answer_Set() const{
    return m_poll_answer_isSet;
}

bool OAIUpdate::is_poll_answer_Valid() const{
    return m_poll_answer_isValid;
}

OAIPreCheckoutQuery OAIUpdate::getPreCheckoutQuery() const {
    return m_pre_checkout_query;
}
void OAIUpdate::setPreCheckoutQuery(const OAIPreCheckoutQuery &pre_checkout_query) {
    m_pre_checkout_query = pre_checkout_query;
    m_pre_checkout_query_isSet = true;
}

bool OAIUpdate::is_pre_checkout_query_Set() const{
    return m_pre_checkout_query_isSet;
}

bool OAIUpdate::is_pre_checkout_query_Valid() const{
    return m_pre_checkout_query_isValid;
}

OAIShippingQuery OAIUpdate::getShippingQuery() const {
    return m_shipping_query;
}
void OAIUpdate::setShippingQuery(const OAIShippingQuery &shipping_query) {
    m_shipping_query = shipping_query;
    m_shipping_query_isSet = true;
}

bool OAIUpdate::is_shipping_query_Set() const{
    return m_shipping_query_isSet;
}

bool OAIUpdate::is_shipping_query_Valid() const{
    return m_shipping_query_isValid;
}

qint32 OAIUpdate::getUpdateId() const {
    return m_update_id;
}
void OAIUpdate::setUpdateId(const qint32 &update_id) {
    m_update_id = update_id;
    m_update_id_isSet = true;
}

bool OAIUpdate::is_update_id_Set() const{
    return m_update_id_isSet;
}

bool OAIUpdate::is_update_id_Valid() const{
    return m_update_id_isValid;
}

bool OAIUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_post.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chosen_inline_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edited_channel_post.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edited_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll_answer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_checkout_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_update_id_isValid && true;
}

} // namespace OpenAPI
