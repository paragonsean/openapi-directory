/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoNote::OAIVideoNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoNote::OAIVideoNote() {
    this->initializeModel();
}

OAIVideoNote::~OAIVideoNote() {}

void OAIVideoNote::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_file_unique_id_isSet = false;
    m_file_unique_id_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_thumb_isSet = false;
    m_thumb_isValid = false;
}

void OAIVideoNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoNote::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("file_id")]);
    m_file_id_isSet = !json[QString("file_id")].isNull() && m_file_id_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("file_size")]);
    m_file_size_isSet = !json[QString("file_size")].isNull() && m_file_size_isValid;

    m_file_unique_id_isValid = ::OpenAPI::fromJsonValue(m_file_unique_id, json[QString("file_unique_id")]);
    m_file_unique_id_isSet = !json[QString("file_unique_id")].isNull() && m_file_unique_id_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_thumb_isValid = ::OpenAPI::fromJsonValue(m_thumb, json[QString("thumb")]);
    m_thumb_isSet = !json[QString("thumb")].isNull() && m_thumb_isValid;
}

QString OAIVideoNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoNote::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("file_id"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("file_size"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_file_unique_id_isSet) {
        obj.insert(QString("file_unique_id"), ::OpenAPI::toJsonValue(m_file_unique_id));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_thumb.isSet()) {
        obj.insert(QString("thumb"), ::OpenAPI::toJsonValue(m_thumb));
    }
    return obj;
}

qint32 OAIVideoNote::getDuration() const {
    return m_duration;
}
void OAIVideoNote::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVideoNote::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVideoNote::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIVideoNote::getFileId() const {
    return m_file_id;
}
void OAIVideoNote::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIVideoNote::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIVideoNote::is_file_id_Valid() const{
    return m_file_id_isValid;
}

qint32 OAIVideoNote::getFileSize() const {
    return m_file_size;
}
void OAIVideoNote::setFileSize(const qint32 &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIVideoNote::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIVideoNote::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAIVideoNote::getFileUniqueId() const {
    return m_file_unique_id;
}
void OAIVideoNote::setFileUniqueId(const QString &file_unique_id) {
    m_file_unique_id = file_unique_id;
    m_file_unique_id_isSet = true;
}

bool OAIVideoNote::is_file_unique_id_Set() const{
    return m_file_unique_id_isSet;
}

bool OAIVideoNote::is_file_unique_id_Valid() const{
    return m_file_unique_id_isValid;
}

qint32 OAIVideoNote::getLength() const {
    return m_length;
}
void OAIVideoNote::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIVideoNote::is_length_Set() const{
    return m_length_isSet;
}

bool OAIVideoNote::is_length_Valid() const{
    return m_length_isValid;
}

OAIPhotoSize OAIVideoNote::getThumb() const {
    return m_thumb;
}
void OAIVideoNote::setThumb(const OAIPhotoSize &thumb) {
    m_thumb = thumb;
    m_thumb_isSet = true;
}

bool OAIVideoNote::is_thumb_Set() const{
    return m_thumb_isSet;
}

bool OAIVideoNote::is_thumb_Valid() const{
    return m_thumb_isValid;
}

bool OAIVideoNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && m_file_id_isValid && m_file_unique_id_isValid && m_length_isValid && true;
}

} // namespace OpenAPI
