/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAIError::getDescription() const {
    return m_description;
}
void OAIError::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIError::is_description_Set() const{
    return m_description_isSet;
}

bool OAIError::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIError::getErrorCode() const {
    return m_error_code;
}
void OAIError::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

bool OAIError::isOk() const {
    return m_ok;
}
void OAIError::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIError::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIError::is_ok_Valid() const{
    return m_ok_isValid;
}

OAIResponseParameters OAIError::getParameters() const {
    return m_parameters;
}
void OAIError::setParameters(const OAIResponseParameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIError::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIError::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_error_code_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
