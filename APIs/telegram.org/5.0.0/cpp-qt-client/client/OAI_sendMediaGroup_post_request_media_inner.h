/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_sendMediaGroup_post_request_media_inner.h
 *
 * 
 */

#ifndef OAI_sendMediaGroup_post_request_media_inner_H
#define OAI_sendMediaGroup_post_request_media_inner_H

#include <QJsonObject>

#include "OAIInputMediaAudio.h"
#include "OAIInputMediaDocument.h"
#include "OAIInputMediaPhoto.h"
#include "OAIInputMediaVideo.h"
#include "OAIMessageEntity.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMessageEntity;

class OAI_sendMediaGroup_post_request_media_inner : public OAIObject {
public:
    OAI_sendMediaGroup_post_request_media_inner();
    OAI_sendMediaGroup_post_request_media_inner(QString json);
    ~OAI_sendMediaGroup_post_request_media_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCaption() const;
    void setCaption(const QString &caption);
    bool is_caption_Set() const;
    bool is_caption_Valid() const;

    QList<OAIMessageEntity> getCaptionEntities() const;
    void setCaptionEntities(const QList<OAIMessageEntity> &caption_entities);
    bool is_caption_entities_Set() const;
    bool is_caption_entities_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getMedia() const;
    void setMedia(const QString &media);
    bool is_media_Set() const;
    bool is_media_Valid() const;

    QString getParseMode() const;
    void setParseMode(const QString &parse_mode);
    bool is_parse_mode_Set() const;
    bool is_parse_mode_Valid() const;

    QString getPerformer() const;
    void setPerformer(const QString &performer);
    bool is_performer_Set() const;
    bool is_performer_Valid() const;

    QString getThumb() const;
    void setThumb(const QString &thumb);
    bool is_thumb_Set() const;
    bool is_thumb_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    bool isDisableContentTypeDetection() const;
    void setDisableContentTypeDetection(const bool &disable_content_type_detection);
    bool is_disable_content_type_detection_Set() const;
    bool is_disable_content_type_detection_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    bool isSupportsStreaming() const;
    void setSupportsStreaming(const bool &supports_streaming);
    bool is_supports_streaming_Set() const;
    bool is_supports_streaming_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_caption;
    bool m_caption_isSet;
    bool m_caption_isValid;

    QList<OAIMessageEntity> m_caption_entities;
    bool m_caption_entities_isSet;
    bool m_caption_entities_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QString m_media;
    bool m_media_isSet;
    bool m_media_isValid;

    QString m_parse_mode;
    bool m_parse_mode_isSet;
    bool m_parse_mode_isValid;

    QString m_performer;
    bool m_performer_isSet;
    bool m_performer_isValid;

    QString m_thumb;
    bool m_thumb_isSet;
    bool m_thumb_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    bool m_disable_content_type_detection;
    bool m_disable_content_type_detection_isSet;
    bool m_disable_content_type_detection_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    bool m_supports_streaming;
    bool m_supports_streaming_isSet;
    bool m_supports_streaming_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_sendMediaGroup_post_request_media_inner)

#endif // OAI_sendMediaGroup_post_request_media_inner_H
