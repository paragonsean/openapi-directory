/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_copyMessage_post_request.h
 *
 * 
 */

#ifndef OAI_copyMessage_post_request_H
#define OAI_copyMessage_post_request_H

#include <QJsonObject>

#include "OAIMessageEntity.h"
#include "OAI_copyMessage_post_request_chat_id.h"
#include "OAI_copyMessage_post_request_from_chat_id.h"
#include "OAI_copyMessage_post_request_reply_markup.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMessageEntity;
class OAI_copyMessage_post_request_reply_markup;

class OAI_copyMessage_post_request : public OAIObject {
public:
    OAI_copyMessage_post_request();
    OAI_copyMessage_post_request(QString json);
    ~OAI_copyMessage_post_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowSendingWithoutReply() const;
    void setAllowSendingWithoutReply(const bool &allow_sending_without_reply);
    bool is_allow_sending_without_reply_Set() const;
    bool is_allow_sending_without_reply_Valid() const;

    QString getCaption() const;
    void setCaption(const QString &caption);
    bool is_caption_Set() const;
    bool is_caption_Valid() const;

    QList<OAIMessageEntity> getCaptionEntities() const;
    void setCaptionEntities(const QList<OAIMessageEntity> &caption_entities);
    bool is_caption_entities_Set() const;
    bool is_caption_entities_Valid() const;

    OAI_copyMessage_post_request_chat_id getChatId() const;
    void setChatId(const OAI_copyMessage_post_request_chat_id &chat_id);
    bool is_chat_id_Set() const;
    bool is_chat_id_Valid() const;

    bool isDisableNotification() const;
    void setDisableNotification(const bool &disable_notification);
    bool is_disable_notification_Set() const;
    bool is_disable_notification_Valid() const;

    OAI_copyMessage_post_request_from_chat_id getFromChatId() const;
    void setFromChatId(const OAI_copyMessage_post_request_from_chat_id &from_chat_id);
    bool is_from_chat_id_Set() const;
    bool is_from_chat_id_Valid() const;

    qint32 getMessageId() const;
    void setMessageId(const qint32 &message_id);
    bool is_message_id_Set() const;
    bool is_message_id_Valid() const;

    QString getParseMode() const;
    void setParseMode(const QString &parse_mode);
    bool is_parse_mode_Set() const;
    bool is_parse_mode_Valid() const;

    OAI_copyMessage_post_request_reply_markup getReplyMarkup() const;
    void setReplyMarkup(const OAI_copyMessage_post_request_reply_markup &reply_markup);
    bool is_reply_markup_Set() const;
    bool is_reply_markup_Valid() const;

    qint32 getReplyToMessageId() const;
    void setReplyToMessageId(const qint32 &reply_to_message_id);
    bool is_reply_to_message_id_Set() const;
    bool is_reply_to_message_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_sending_without_reply;
    bool m_allow_sending_without_reply_isSet;
    bool m_allow_sending_without_reply_isValid;

    QString m_caption;
    bool m_caption_isSet;
    bool m_caption_isValid;

    QList<OAIMessageEntity> m_caption_entities;
    bool m_caption_entities_isSet;
    bool m_caption_entities_isValid;

    OAI_copyMessage_post_request_chat_id m_chat_id;
    bool m_chat_id_isSet;
    bool m_chat_id_isValid;

    bool m_disable_notification;
    bool m_disable_notification_isSet;
    bool m_disable_notification_isValid;

    OAI_copyMessage_post_request_from_chat_id m_from_chat_id;
    bool m_from_chat_id_isSet;
    bool m_from_chat_id_isValid;

    qint32 m_message_id;
    bool m_message_id_isSet;
    bool m_message_id_isValid;

    QString m_parse_mode;
    bool m_parse_mode_isSet;
    bool m_parse_mode_isValid;

    OAI_copyMessage_post_request_reply_markup m_reply_markup;
    bool m_reply_markup_isSet;
    bool m_reply_markup_isValid;

    qint32 m_reply_to_message_id;
    bool m_reply_to_message_id_isSet;
    bool m_reply_to_message_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_copyMessage_post_request)

#endif // OAI_copyMessage_post_request_H
