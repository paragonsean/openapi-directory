/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISticker.h
 *
 * This object represents a sticker.
 */

#ifndef OAISticker_H
#define OAISticker_H

#include <QJsonObject>

#include "OAIMaskPosition.h"
#include "OAIPhotoSize.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMaskPosition;
class OAIPhotoSize;

class OAISticker : public OAIObject {
public:
    OAISticker();
    OAISticker(QString json);
    ~OAISticker() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEmoji() const;
    void setEmoji(const QString &emoji);
    bool is_emoji_Set() const;
    bool is_emoji_Valid() const;

    QString getFileId() const;
    void setFileId(const QString &file_id);
    bool is_file_id_Set() const;
    bool is_file_id_Valid() const;

    qint32 getFileSize() const;
    void setFileSize(const qint32 &file_size);
    bool is_file_size_Set() const;
    bool is_file_size_Valid() const;

    QString getFileUniqueId() const;
    void setFileUniqueId(const QString &file_unique_id);
    bool is_file_unique_id_Set() const;
    bool is_file_unique_id_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    bool isIsAnimated() const;
    void setIsAnimated(const bool &is_animated);
    bool is_is_animated_Set() const;
    bool is_is_animated_Valid() const;

    OAIMaskPosition getMaskPosition() const;
    void setMaskPosition(const OAIMaskPosition &mask_position);
    bool is_mask_position_Set() const;
    bool is_mask_position_Valid() const;

    QString getSetName() const;
    void setSetName(const QString &set_name);
    bool is_set_name_Set() const;
    bool is_set_name_Valid() const;

    OAIPhotoSize getThumb() const;
    void setThumb(const OAIPhotoSize &thumb);
    bool is_thumb_Set() const;
    bool is_thumb_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_emoji;
    bool m_emoji_isSet;
    bool m_emoji_isValid;

    QString m_file_id;
    bool m_file_id_isSet;
    bool m_file_id_isValid;

    qint32 m_file_size;
    bool m_file_size_isSet;
    bool m_file_size_isValid;

    QString m_file_unique_id;
    bool m_file_unique_id_isSet;
    bool m_file_unique_id_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    bool m_is_animated;
    bool m_is_animated_isSet;
    bool m_is_animated_isValid;

    OAIMaskPosition m_mask_position;
    bool m_mask_position_isSet;
    bool m_mask_position_isValid;

    QString m_set_name;
    bool m_set_name_isSet;
    bool m_set_name_isValid;

    OAIPhotoSize m_thumb;
    bool m_thumb_isSet;
    bool m_thumb_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISticker)

#endif // OAISticker_H
