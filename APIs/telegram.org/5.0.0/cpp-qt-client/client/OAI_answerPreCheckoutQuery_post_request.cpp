/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_answerPreCheckoutQuery_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_answerPreCheckoutQuery_post_request::OAI_answerPreCheckoutQuery_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_answerPreCheckoutQuery_post_request::OAI_answerPreCheckoutQuery_post_request() {
    this->initializeModel();
}

OAI_answerPreCheckoutQuery_post_request::~OAI_answerPreCheckoutQuery_post_request() {}

void OAI_answerPreCheckoutQuery_post_request::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_pre_checkout_query_id_isSet = false;
    m_pre_checkout_query_id_isValid = false;
}

void OAI_answerPreCheckoutQuery_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_answerPreCheckoutQuery_post_request::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_pre_checkout_query_id_isValid = ::OpenAPI::fromJsonValue(m_pre_checkout_query_id, json[QString("pre_checkout_query_id")]);
    m_pre_checkout_query_id_isSet = !json[QString("pre_checkout_query_id")].isNull() && m_pre_checkout_query_id_isValid;
}

QString OAI_answerPreCheckoutQuery_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_answerPreCheckoutQuery_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_pre_checkout_query_id_isSet) {
        obj.insert(QString("pre_checkout_query_id"), ::OpenAPI::toJsonValue(m_pre_checkout_query_id));
    }
    return obj;
}

QString OAI_answerPreCheckoutQuery_post_request::getErrorMessage() const {
    return m_error_message;
}
void OAI_answerPreCheckoutQuery_post_request::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAI_answerPreCheckoutQuery_post_request::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAI_answerPreCheckoutQuery_post_request::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAI_answerPreCheckoutQuery_post_request::isOk() const {
    return m_ok;
}
void OAI_answerPreCheckoutQuery_post_request::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAI_answerPreCheckoutQuery_post_request::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAI_answerPreCheckoutQuery_post_request::is_ok_Valid() const{
    return m_ok_isValid;
}

QString OAI_answerPreCheckoutQuery_post_request::getPreCheckoutQueryId() const {
    return m_pre_checkout_query_id;
}
void OAI_answerPreCheckoutQuery_post_request::setPreCheckoutQueryId(const QString &pre_checkout_query_id) {
    m_pre_checkout_query_id = pre_checkout_query_id;
    m_pre_checkout_query_id_isSet = true;
}

bool OAI_answerPreCheckoutQuery_post_request::is_pre_checkout_query_id_Set() const{
    return m_pre_checkout_query_id_isSet;
}

bool OAI_answerPreCheckoutQuery_post_request::is_pre_checkout_query_id_Valid() const{
    return m_pre_checkout_query_id_isValid;
}

bool OAI_answerPreCheckoutQuery_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_checkout_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_answerPreCheckoutQuery_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ok_isValid && m_pre_checkout_query_id_isValid && true;
}

} // namespace OpenAPI
