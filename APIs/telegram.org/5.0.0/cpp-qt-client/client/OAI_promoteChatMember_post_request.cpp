/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_promoteChatMember_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_promoteChatMember_post_request::OAI_promoteChatMember_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_promoteChatMember_post_request::OAI_promoteChatMember_post_request() {
    this->initializeModel();
}

OAI_promoteChatMember_post_request::~OAI_promoteChatMember_post_request() {}

void OAI_promoteChatMember_post_request::initializeModel() {

    m_can_change_info_isSet = false;
    m_can_change_info_isValid = false;

    m_can_delete_messages_isSet = false;
    m_can_delete_messages_isValid = false;

    m_can_edit_messages_isSet = false;
    m_can_edit_messages_isValid = false;

    m_can_invite_users_isSet = false;
    m_can_invite_users_isValid = false;

    m_can_pin_messages_isSet = false;
    m_can_pin_messages_isValid = false;

    m_can_post_messages_isSet = false;
    m_can_post_messages_isValid = false;

    m_can_promote_members_isSet = false;
    m_can_promote_members_isValid = false;

    m_can_restrict_members_isSet = false;
    m_can_restrict_members_isValid = false;

    m_chat_id_isSet = false;
    m_chat_id_isValid = false;

    m_is_anonymous_isSet = false;
    m_is_anonymous_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAI_promoteChatMember_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_promoteChatMember_post_request::fromJsonObject(QJsonObject json) {

    m_can_change_info_isValid = ::OpenAPI::fromJsonValue(m_can_change_info, json[QString("can_change_info")]);
    m_can_change_info_isSet = !json[QString("can_change_info")].isNull() && m_can_change_info_isValid;

    m_can_delete_messages_isValid = ::OpenAPI::fromJsonValue(m_can_delete_messages, json[QString("can_delete_messages")]);
    m_can_delete_messages_isSet = !json[QString("can_delete_messages")].isNull() && m_can_delete_messages_isValid;

    m_can_edit_messages_isValid = ::OpenAPI::fromJsonValue(m_can_edit_messages, json[QString("can_edit_messages")]);
    m_can_edit_messages_isSet = !json[QString("can_edit_messages")].isNull() && m_can_edit_messages_isValid;

    m_can_invite_users_isValid = ::OpenAPI::fromJsonValue(m_can_invite_users, json[QString("can_invite_users")]);
    m_can_invite_users_isSet = !json[QString("can_invite_users")].isNull() && m_can_invite_users_isValid;

    m_can_pin_messages_isValid = ::OpenAPI::fromJsonValue(m_can_pin_messages, json[QString("can_pin_messages")]);
    m_can_pin_messages_isSet = !json[QString("can_pin_messages")].isNull() && m_can_pin_messages_isValid;

    m_can_post_messages_isValid = ::OpenAPI::fromJsonValue(m_can_post_messages, json[QString("can_post_messages")]);
    m_can_post_messages_isSet = !json[QString("can_post_messages")].isNull() && m_can_post_messages_isValid;

    m_can_promote_members_isValid = ::OpenAPI::fromJsonValue(m_can_promote_members, json[QString("can_promote_members")]);
    m_can_promote_members_isSet = !json[QString("can_promote_members")].isNull() && m_can_promote_members_isValid;

    m_can_restrict_members_isValid = ::OpenAPI::fromJsonValue(m_can_restrict_members, json[QString("can_restrict_members")]);
    m_can_restrict_members_isSet = !json[QString("can_restrict_members")].isNull() && m_can_restrict_members_isValid;

    m_chat_id_isValid = ::OpenAPI::fromJsonValue(m_chat_id, json[QString("chat_id")]);
    m_chat_id_isSet = !json[QString("chat_id")].isNull() && m_chat_id_isValid;

    m_is_anonymous_isValid = ::OpenAPI::fromJsonValue(m_is_anonymous, json[QString("is_anonymous")]);
    m_is_anonymous_isSet = !json[QString("is_anonymous")].isNull() && m_is_anonymous_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAI_promoteChatMember_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_promoteChatMember_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_can_change_info_isSet) {
        obj.insert(QString("can_change_info"), ::OpenAPI::toJsonValue(m_can_change_info));
    }
    if (m_can_delete_messages_isSet) {
        obj.insert(QString("can_delete_messages"), ::OpenAPI::toJsonValue(m_can_delete_messages));
    }
    if (m_can_edit_messages_isSet) {
        obj.insert(QString("can_edit_messages"), ::OpenAPI::toJsonValue(m_can_edit_messages));
    }
    if (m_can_invite_users_isSet) {
        obj.insert(QString("can_invite_users"), ::OpenAPI::toJsonValue(m_can_invite_users));
    }
    if (m_can_pin_messages_isSet) {
        obj.insert(QString("can_pin_messages"), ::OpenAPI::toJsonValue(m_can_pin_messages));
    }
    if (m_can_post_messages_isSet) {
        obj.insert(QString("can_post_messages"), ::OpenAPI::toJsonValue(m_can_post_messages));
    }
    if (m_can_promote_members_isSet) {
        obj.insert(QString("can_promote_members"), ::OpenAPI::toJsonValue(m_can_promote_members));
    }
    if (m_can_restrict_members_isSet) {
        obj.insert(QString("can_restrict_members"), ::OpenAPI::toJsonValue(m_can_restrict_members));
    }
    if (m_chat_id.isSet()) {
        obj.insert(QString("chat_id"), ::OpenAPI::toJsonValue(m_chat_id));
    }
    if (m_is_anonymous_isSet) {
        obj.insert(QString("is_anonymous"), ::OpenAPI::toJsonValue(m_is_anonymous));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

bool OAI_promoteChatMember_post_request::isCanChangeInfo() const {
    return m_can_change_info;
}
void OAI_promoteChatMember_post_request::setCanChangeInfo(const bool &can_change_info) {
    m_can_change_info = can_change_info;
    m_can_change_info_isSet = true;
}

bool OAI_promoteChatMember_post_request::is_can_change_info_Set() const{
    return m_can_change_info_isSet;
}

bool OAI_promoteChatMember_post_request::is_can_change_info_Valid() const{
    return m_can_change_info_isValid;
}

bool OAI_promoteChatMember_post_request::isCanDeleteMessages() const {
    return m_can_delete_messages;
}
void OAI_promoteChatMember_post_request::setCanDeleteMessages(const bool &can_delete_messages) {
    m_can_delete_messages = can_delete_messages;
    m_can_delete_messages_isSet = true;
}

bool OAI_promoteChatMember_post_request::is_can_delete_messages_Set() const{
    return m_can_delete_messages_isSet;
}

bool OAI_promoteChatMember_post_request::is_can_delete_messages_Valid() const{
    return m_can_delete_messages_isValid;
}

bool OAI_promoteChatMember_post_request::isCanEditMessages() const {
    return m_can_edit_messages;
}
void OAI_promoteChatMember_post_request::setCanEditMessages(const bool &can_edit_messages) {
    m_can_edit_messages = can_edit_messages;
    m_can_edit_messages_isSet = true;
}

bool OAI_promoteChatMember_post_request::is_can_edit_messages_Set() const{
    return m_can_edit_messages_isSet;
}

bool OAI_promoteChatMember_post_request::is_can_edit_messages_Valid() const{
    return m_can_edit_messages_isValid;
}

bool OAI_promoteChatMember_post_request::isCanInviteUsers() const {
    return m_can_invite_users;
}
void OAI_promoteChatMember_post_request::setCanInviteUsers(const bool &can_invite_users) {
    m_can_invite_users = can_invite_users;
    m_can_invite_users_isSet = true;
}

bool OAI_promoteChatMember_post_request::is_can_invite_users_Set() const{
    return m_can_invite_users_isSet;
}

bool OAI_promoteChatMember_post_request::is_can_invite_users_Valid() const{
    return m_can_invite_users_isValid;
}

bool OAI_promoteChatMember_post_request::isCanPinMessages() const {
    return m_can_pin_messages;
}
void OAI_promoteChatMember_post_request::setCanPinMessages(const bool &can_pin_messages) {
    m_can_pin_messages = can_pin_messages;
    m_can_pin_messages_isSet = true;
}

bool OAI_promoteChatMember_post_request::is_can_pin_messages_Set() const{
    return m_can_pin_messages_isSet;
}

bool OAI_promoteChatMember_post_request::is_can_pin_messages_Valid() const{
    return m_can_pin_messages_isValid;
}

bool OAI_promoteChatMember_post_request::isCanPostMessages() const {
    return m_can_post_messages;
}
void OAI_promoteChatMember_post_request::setCanPostMessages(const bool &can_post_messages) {
    m_can_post_messages = can_post_messages;
    m_can_post_messages_isSet = true;
}

bool OAI_promoteChatMember_post_request::is_can_post_messages_Set() const{
    return m_can_post_messages_isSet;
}

bool OAI_promoteChatMember_post_request::is_can_post_messages_Valid() const{
    return m_can_post_messages_isValid;
}

bool OAI_promoteChatMember_post_request::isCanPromoteMembers() const {
    return m_can_promote_members;
}
void OAI_promoteChatMember_post_request::setCanPromoteMembers(const bool &can_promote_members) {
    m_can_promote_members = can_promote_members;
    m_can_promote_members_isSet = true;
}

bool OAI_promoteChatMember_post_request::is_can_promote_members_Set() const{
    return m_can_promote_members_isSet;
}

bool OAI_promoteChatMember_post_request::is_can_promote_members_Valid() const{
    return m_can_promote_members_isValid;
}

bool OAI_promoteChatMember_post_request::isCanRestrictMembers() const {
    return m_can_restrict_members;
}
void OAI_promoteChatMember_post_request::setCanRestrictMembers(const bool &can_restrict_members) {
    m_can_restrict_members = can_restrict_members;
    m_can_restrict_members_isSet = true;
}

bool OAI_promoteChatMember_post_request::is_can_restrict_members_Set() const{
    return m_can_restrict_members_isSet;
}

bool OAI_promoteChatMember_post_request::is_can_restrict_members_Valid() const{
    return m_can_restrict_members_isValid;
}

OAI_copyMessage_post_request_chat_id OAI_promoteChatMember_post_request::getChatId() const {
    return m_chat_id;
}
void OAI_promoteChatMember_post_request::setChatId(const OAI_copyMessage_post_request_chat_id &chat_id) {
    m_chat_id = chat_id;
    m_chat_id_isSet = true;
}

bool OAI_promoteChatMember_post_request::is_chat_id_Set() const{
    return m_chat_id_isSet;
}

bool OAI_promoteChatMember_post_request::is_chat_id_Valid() const{
    return m_chat_id_isValid;
}

bool OAI_promoteChatMember_post_request::isIsAnonymous() const {
    return m_is_anonymous;
}
void OAI_promoteChatMember_post_request::setIsAnonymous(const bool &is_anonymous) {
    m_is_anonymous = is_anonymous;
    m_is_anonymous_isSet = true;
}

bool OAI_promoteChatMember_post_request::is_is_anonymous_Set() const{
    return m_is_anonymous_isSet;
}

bool OAI_promoteChatMember_post_request::is_is_anonymous_Valid() const{
    return m_is_anonymous_isValid;
}

qint32 OAI_promoteChatMember_post_request::getUserId() const {
    return m_user_id;
}
void OAI_promoteChatMember_post_request::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAI_promoteChatMember_post_request::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAI_promoteChatMember_post_request::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAI_promoteChatMember_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_change_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_invite_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_pin_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_post_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_promote_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_restrict_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_anonymous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_promoteChatMember_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_chat_id_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
