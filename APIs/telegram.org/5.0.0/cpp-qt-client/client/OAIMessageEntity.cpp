/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageEntity::OAIMessageEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageEntity::OAIMessageEntity() {
    this->initializeModel();
}

OAIMessageEntity::~OAIMessageEntity() {}

void OAIMessageEntity::initializeModel() {

    m_language_isSet = false;
    m_language_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIMessageEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageEntity::fromJsonObject(QJsonObject json) {

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIMessageEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIMessageEntity::getLanguage() const {
    return m_language;
}
void OAIMessageEntity::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIMessageEntity::is_language_Set() const{
    return m_language_isSet;
}

bool OAIMessageEntity::is_language_Valid() const{
    return m_language_isValid;
}

qint32 OAIMessageEntity::getLength() const {
    return m_length;
}
void OAIMessageEntity::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIMessageEntity::is_length_Set() const{
    return m_length_isSet;
}

bool OAIMessageEntity::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAIMessageEntity::getOffset() const {
    return m_offset;
}
void OAIMessageEntity::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIMessageEntity::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIMessageEntity::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIMessageEntity::getType() const {
    return m_type;
}
void OAIMessageEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMessageEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMessageEntity::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMessageEntity::getUrl() const {
    return m_url;
}
void OAIMessageEntity::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMessageEntity::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMessageEntity::is_url_Valid() const{
    return m_url_isValid;
}

OAIUser OAIMessageEntity::getUser() const {
    return m_user;
}
void OAIMessageEntity::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIMessageEntity::is_user_Set() const{
    return m_user_isSet;
}

bool OAIMessageEntity::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIMessageEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_length_isValid && m_offset_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
