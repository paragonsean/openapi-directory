/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_copyMessage_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_copyMessage_post_request::OAI_copyMessage_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_copyMessage_post_request::OAI_copyMessage_post_request() {
    this->initializeModel();
}

OAI_copyMessage_post_request::~OAI_copyMessage_post_request() {}

void OAI_copyMessage_post_request::initializeModel() {

    m_allow_sending_without_reply_isSet = false;
    m_allow_sending_without_reply_isValid = false;

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_caption_entities_isSet = false;
    m_caption_entities_isValid = false;

    m_chat_id_isSet = false;
    m_chat_id_isValid = false;

    m_disable_notification_isSet = false;
    m_disable_notification_isValid = false;

    m_from_chat_id_isSet = false;
    m_from_chat_id_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_parse_mode_isSet = false;
    m_parse_mode_isValid = false;

    m_reply_markup_isSet = false;
    m_reply_markup_isValid = false;

    m_reply_to_message_id_isSet = false;
    m_reply_to_message_id_isValid = false;
}

void OAI_copyMessage_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_copyMessage_post_request::fromJsonObject(QJsonObject json) {

    m_allow_sending_without_reply_isValid = ::OpenAPI::fromJsonValue(m_allow_sending_without_reply, json[QString("allow_sending_without_reply")]);
    m_allow_sending_without_reply_isSet = !json[QString("allow_sending_without_reply")].isNull() && m_allow_sending_without_reply_isValid;

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_caption_entities_isValid = ::OpenAPI::fromJsonValue(m_caption_entities, json[QString("caption_entities")]);
    m_caption_entities_isSet = !json[QString("caption_entities")].isNull() && m_caption_entities_isValid;

    m_chat_id_isValid = ::OpenAPI::fromJsonValue(m_chat_id, json[QString("chat_id")]);
    m_chat_id_isSet = !json[QString("chat_id")].isNull() && m_chat_id_isValid;

    m_disable_notification_isValid = ::OpenAPI::fromJsonValue(m_disable_notification, json[QString("disable_notification")]);
    m_disable_notification_isSet = !json[QString("disable_notification")].isNull() && m_disable_notification_isValid;

    m_from_chat_id_isValid = ::OpenAPI::fromJsonValue(m_from_chat_id, json[QString("from_chat_id")]);
    m_from_chat_id_isSet = !json[QString("from_chat_id")].isNull() && m_from_chat_id_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_parse_mode_isValid = ::OpenAPI::fromJsonValue(m_parse_mode, json[QString("parse_mode")]);
    m_parse_mode_isSet = !json[QString("parse_mode")].isNull() && m_parse_mode_isValid;

    m_reply_markup_isValid = ::OpenAPI::fromJsonValue(m_reply_markup, json[QString("reply_markup")]);
    m_reply_markup_isSet = !json[QString("reply_markup")].isNull() && m_reply_markup_isValid;

    m_reply_to_message_id_isValid = ::OpenAPI::fromJsonValue(m_reply_to_message_id, json[QString("reply_to_message_id")]);
    m_reply_to_message_id_isSet = !json[QString("reply_to_message_id")].isNull() && m_reply_to_message_id_isValid;
}

QString OAI_copyMessage_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_copyMessage_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_sending_without_reply_isSet) {
        obj.insert(QString("allow_sending_without_reply"), ::OpenAPI::toJsonValue(m_allow_sending_without_reply));
    }
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_caption_entities.size() > 0) {
        obj.insert(QString("caption_entities"), ::OpenAPI::toJsonValue(m_caption_entities));
    }
    if (m_chat_id.isSet()) {
        obj.insert(QString("chat_id"), ::OpenAPI::toJsonValue(m_chat_id));
    }
    if (m_disable_notification_isSet) {
        obj.insert(QString("disable_notification"), ::OpenAPI::toJsonValue(m_disable_notification));
    }
    if (m_from_chat_id.isSet()) {
        obj.insert(QString("from_chat_id"), ::OpenAPI::toJsonValue(m_from_chat_id));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_parse_mode_isSet) {
        obj.insert(QString("parse_mode"), ::OpenAPI::toJsonValue(m_parse_mode));
    }
    if (m_reply_markup.isSet()) {
        obj.insert(QString("reply_markup"), ::OpenAPI::toJsonValue(m_reply_markup));
    }
    if (m_reply_to_message_id_isSet) {
        obj.insert(QString("reply_to_message_id"), ::OpenAPI::toJsonValue(m_reply_to_message_id));
    }
    return obj;
}

bool OAI_copyMessage_post_request::isAllowSendingWithoutReply() const {
    return m_allow_sending_without_reply;
}
void OAI_copyMessage_post_request::setAllowSendingWithoutReply(const bool &allow_sending_without_reply) {
    m_allow_sending_without_reply = allow_sending_without_reply;
    m_allow_sending_without_reply_isSet = true;
}

bool OAI_copyMessage_post_request::is_allow_sending_without_reply_Set() const{
    return m_allow_sending_without_reply_isSet;
}

bool OAI_copyMessage_post_request::is_allow_sending_without_reply_Valid() const{
    return m_allow_sending_without_reply_isValid;
}

QString OAI_copyMessage_post_request::getCaption() const {
    return m_caption;
}
void OAI_copyMessage_post_request::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAI_copyMessage_post_request::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAI_copyMessage_post_request::is_caption_Valid() const{
    return m_caption_isValid;
}

QList<OAIMessageEntity> OAI_copyMessage_post_request::getCaptionEntities() const {
    return m_caption_entities;
}
void OAI_copyMessage_post_request::setCaptionEntities(const QList<OAIMessageEntity> &caption_entities) {
    m_caption_entities = caption_entities;
    m_caption_entities_isSet = true;
}

bool OAI_copyMessage_post_request::is_caption_entities_Set() const{
    return m_caption_entities_isSet;
}

bool OAI_copyMessage_post_request::is_caption_entities_Valid() const{
    return m_caption_entities_isValid;
}

OAI_copyMessage_post_request_chat_id OAI_copyMessage_post_request::getChatId() const {
    return m_chat_id;
}
void OAI_copyMessage_post_request::setChatId(const OAI_copyMessage_post_request_chat_id &chat_id) {
    m_chat_id = chat_id;
    m_chat_id_isSet = true;
}

bool OAI_copyMessage_post_request::is_chat_id_Set() const{
    return m_chat_id_isSet;
}

bool OAI_copyMessage_post_request::is_chat_id_Valid() const{
    return m_chat_id_isValid;
}

bool OAI_copyMessage_post_request::isDisableNotification() const {
    return m_disable_notification;
}
void OAI_copyMessage_post_request::setDisableNotification(const bool &disable_notification) {
    m_disable_notification = disable_notification;
    m_disable_notification_isSet = true;
}

bool OAI_copyMessage_post_request::is_disable_notification_Set() const{
    return m_disable_notification_isSet;
}

bool OAI_copyMessage_post_request::is_disable_notification_Valid() const{
    return m_disable_notification_isValid;
}

OAI_copyMessage_post_request_from_chat_id OAI_copyMessage_post_request::getFromChatId() const {
    return m_from_chat_id;
}
void OAI_copyMessage_post_request::setFromChatId(const OAI_copyMessage_post_request_from_chat_id &from_chat_id) {
    m_from_chat_id = from_chat_id;
    m_from_chat_id_isSet = true;
}

bool OAI_copyMessage_post_request::is_from_chat_id_Set() const{
    return m_from_chat_id_isSet;
}

bool OAI_copyMessage_post_request::is_from_chat_id_Valid() const{
    return m_from_chat_id_isValid;
}

qint32 OAI_copyMessage_post_request::getMessageId() const {
    return m_message_id;
}
void OAI_copyMessage_post_request::setMessageId(const qint32 &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAI_copyMessage_post_request::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAI_copyMessage_post_request::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAI_copyMessage_post_request::getParseMode() const {
    return m_parse_mode;
}
void OAI_copyMessage_post_request::setParseMode(const QString &parse_mode) {
    m_parse_mode = parse_mode;
    m_parse_mode_isSet = true;
}

bool OAI_copyMessage_post_request::is_parse_mode_Set() const{
    return m_parse_mode_isSet;
}

bool OAI_copyMessage_post_request::is_parse_mode_Valid() const{
    return m_parse_mode_isValid;
}

OAI_copyMessage_post_request_reply_markup OAI_copyMessage_post_request::getReplyMarkup() const {
    return m_reply_markup;
}
void OAI_copyMessage_post_request::setReplyMarkup(const OAI_copyMessage_post_request_reply_markup &reply_markup) {
    m_reply_markup = reply_markup;
    m_reply_markup_isSet = true;
}

bool OAI_copyMessage_post_request::is_reply_markup_Set() const{
    return m_reply_markup_isSet;
}

bool OAI_copyMessage_post_request::is_reply_markup_Valid() const{
    return m_reply_markup_isValid;
}

qint32 OAI_copyMessage_post_request::getReplyToMessageId() const {
    return m_reply_to_message_id;
}
void OAI_copyMessage_post_request::setReplyToMessageId(const qint32 &reply_to_message_id) {
    m_reply_to_message_id = reply_to_message_id;
    m_reply_to_message_id_isSet = true;
}

bool OAI_copyMessage_post_request::is_reply_to_message_id_Set() const{
    return m_reply_to_message_id_isSet;
}

bool OAI_copyMessage_post_request::is_reply_to_message_id_Valid() const{
    return m_reply_to_message_id_isValid;
}

bool OAI_copyMessage_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_sending_without_reply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_chat_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parse_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_markup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_copyMessage_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_chat_id_isValid && m_from_chat_id_isValid && m_message_id_isValid && true;
}

} // namespace OpenAPI
