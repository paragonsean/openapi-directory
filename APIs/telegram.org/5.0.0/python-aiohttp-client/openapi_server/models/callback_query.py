# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message import Message
from openapi_server.models.user import User
from openapi_server import util


class CallbackQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_instance: str=None, data: str=None, _from: User=None, game_short_name: str=None, id: str=None, inline_message_id: str=None, message: Message=None):
        """CallbackQuery - a model defined in OpenAPI

        :param chat_instance: The chat_instance of this CallbackQuery.
        :param data: The data of this CallbackQuery.
        :param _from: The _from of this CallbackQuery.
        :param game_short_name: The game_short_name of this CallbackQuery.
        :param id: The id of this CallbackQuery.
        :param inline_message_id: The inline_message_id of this CallbackQuery.
        :param message: The message of this CallbackQuery.
        """
        self.openapi_types = {
            'chat_instance': str,
            'data': str,
            '_from': User,
            'game_short_name': str,
            'id': str,
            'inline_message_id': str,
            'message': Message
        }

        self.attribute_map = {
            'chat_instance': 'chat_instance',
            'data': 'data',
            '_from': 'from',
            'game_short_name': 'game_short_name',
            'id': 'id',
            'inline_message_id': 'inline_message_id',
            'message': 'message'
        }

        self._chat_instance = chat_instance
        self._data = data
        self.__from = _from
        self._game_short_name = game_short_name
        self._id = id
        self._inline_message_id = inline_message_id
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallbackQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallbackQuery of this CallbackQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_instance(self):
        """Gets the chat_instance of this CallbackQuery.

        Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).

        :return: The chat_instance of this CallbackQuery.
        :rtype: str
        """
        return self._chat_instance

    @chat_instance.setter
    def chat_instance(self, chat_instance):
        """Sets the chat_instance of this CallbackQuery.

        Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).

        :param chat_instance: The chat_instance of this CallbackQuery.
        :type chat_instance: str
        """
        if chat_instance is None:
            raise ValueError("Invalid value for `chat_instance`, must not be `None`")

        self._chat_instance = chat_instance

    @property
    def data(self):
        """Gets the data of this CallbackQuery.

        *Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.

        :return: The data of this CallbackQuery.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CallbackQuery.

        *Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.

        :param data: The data of this CallbackQuery.
        :type data: str
        """

        self._data = data

    @property
    def _from(self):
        """Gets the _from of this CallbackQuery.


        :return: The _from of this CallbackQuery.
        :rtype: User
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CallbackQuery.


        :param _from: The _from of this CallbackQuery.
        :type _from: User
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def game_short_name(self):
        """Gets the game_short_name of this CallbackQuery.

        *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game

        :return: The game_short_name of this CallbackQuery.
        :rtype: str
        """
        return self._game_short_name

    @game_short_name.setter
    def game_short_name(self, game_short_name):
        """Sets the game_short_name of this CallbackQuery.

        *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game

        :param game_short_name: The game_short_name of this CallbackQuery.
        :type game_short_name: str
        """

        self._game_short_name = game_short_name

    @property
    def id(self):
        """Gets the id of this CallbackQuery.

        Unique identifier for this query

        :return: The id of this CallbackQuery.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CallbackQuery.

        Unique identifier for this query

        :param id: The id of this CallbackQuery.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def inline_message_id(self):
        """Gets the inline_message_id of this CallbackQuery.

        *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.

        :return: The inline_message_id of this CallbackQuery.
        :rtype: str
        """
        return self._inline_message_id

    @inline_message_id.setter
    def inline_message_id(self, inline_message_id):
        """Sets the inline_message_id of this CallbackQuery.

        *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.

        :param inline_message_id: The inline_message_id of this CallbackQuery.
        :type inline_message_id: str
        """

        self._inline_message_id = inline_message_id

    @property
    def message(self):
        """Gets the message of this CallbackQuery.


        :return: The message of this CallbackQuery.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CallbackQuery.


        :param message: The message of this CallbackQuery.
        :type message: Message
        """

        self._message = message
