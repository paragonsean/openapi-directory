# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.photo_size import PhotoSize
from openapi_server import util


class UserProfilePhotos(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, photos: List[List[PhotoSize]]=None, total_count: int=None):
        """UserProfilePhotos - a model defined in OpenAPI

        :param photos: The photos of this UserProfilePhotos.
        :param total_count: The total_count of this UserProfilePhotos.
        """
        self.openapi_types = {
            'photos': List[List[PhotoSize]],
            'total_count': int
        }

        self.attribute_map = {
            'photos': 'photos',
            'total_count': 'total_count'
        }

        self._photos = photos
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProfilePhotos':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProfilePhotos of this UserProfilePhotos.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def photos(self):
        """Gets the photos of this UserProfilePhotos.

        Requested profile pictures (in up to 4 sizes each)

        :return: The photos of this UserProfilePhotos.
        :rtype: List[List[PhotoSize]]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this UserProfilePhotos.

        Requested profile pictures (in up to 4 sizes each)

        :param photos: The photos of this UserProfilePhotos.
        :type photos: List[List[PhotoSize]]
        """
        if photos is None:
            raise ValueError("Invalid value for `photos`, must not be `None`")

        self._photos = photos

    @property
    def total_count(self):
        """Gets the total_count of this UserProfilePhotos.

        Total number of profile pictures the target user has

        :return: The total_count of this UserProfilePhotos.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this UserProfilePhotos.

        Total number of profile pictures the target user has

        :param total_count: The total_count of this UserProfilePhotos.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
