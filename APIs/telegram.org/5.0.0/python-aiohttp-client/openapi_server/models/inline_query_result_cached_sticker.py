# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server.models.input_message_content import InputMessageContent
from openapi_server import util


class InlineQueryResultCachedSticker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, input_message_content: InputMessageContent=None, reply_markup: InlineKeyboardMarkup=None, sticker_file_id: str=None, type: str=None):
        """InlineQueryResultCachedSticker - a model defined in OpenAPI

        :param id: The id of this InlineQueryResultCachedSticker.
        :param input_message_content: The input_message_content of this InlineQueryResultCachedSticker.
        :param reply_markup: The reply_markup of this InlineQueryResultCachedSticker.
        :param sticker_file_id: The sticker_file_id of this InlineQueryResultCachedSticker.
        :param type: The type of this InlineQueryResultCachedSticker.
        """
        self.openapi_types = {
            'id': str,
            'input_message_content': InputMessageContent,
            'reply_markup': InlineKeyboardMarkup,
            'sticker_file_id': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'input_message_content': 'input_message_content',
            'reply_markup': 'reply_markup',
            'sticker_file_id': 'sticker_file_id',
            'type': 'type'
        }

        self._id = id
        self._input_message_content = input_message_content
        self._reply_markup = reply_markup
        self._sticker_file_id = sticker_file_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineQueryResultCachedSticker':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InlineQueryResultCachedSticker of this InlineQueryResultCachedSticker.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this InlineQueryResultCachedSticker.

        Unique identifier for this result, 1-64 bytes

        :return: The id of this InlineQueryResultCachedSticker.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineQueryResultCachedSticker.

        Unique identifier for this result, 1-64 bytes

        :param id: The id of this InlineQueryResultCachedSticker.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def input_message_content(self):
        """Gets the input_message_content of this InlineQueryResultCachedSticker.


        :return: The input_message_content of this InlineQueryResultCachedSticker.
        :rtype: InputMessageContent
        """
        return self._input_message_content

    @input_message_content.setter
    def input_message_content(self, input_message_content):
        """Sets the input_message_content of this InlineQueryResultCachedSticker.


        :param input_message_content: The input_message_content of this InlineQueryResultCachedSticker.
        :type input_message_content: InputMessageContent
        """

        self._input_message_content = input_message_content

    @property
    def reply_markup(self):
        """Gets the reply_markup of this InlineQueryResultCachedSticker.


        :return: The reply_markup of this InlineQueryResultCachedSticker.
        :rtype: InlineKeyboardMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this InlineQueryResultCachedSticker.


        :param reply_markup: The reply_markup of this InlineQueryResultCachedSticker.
        :type reply_markup: InlineKeyboardMarkup
        """

        self._reply_markup = reply_markup

    @property
    def sticker_file_id(self):
        """Gets the sticker_file_id of this InlineQueryResultCachedSticker.

        A valid file identifier of the sticker

        :return: The sticker_file_id of this InlineQueryResultCachedSticker.
        :rtype: str
        """
        return self._sticker_file_id

    @sticker_file_id.setter
    def sticker_file_id(self, sticker_file_id):
        """Sets the sticker_file_id of this InlineQueryResultCachedSticker.

        A valid file identifier of the sticker

        :param sticker_file_id: The sticker_file_id of this InlineQueryResultCachedSticker.
        :type sticker_file_id: str
        """
        if sticker_file_id is None:
            raise ValueError("Invalid value for `sticker_file_id`, must not be `None`")

        self._sticker_file_id = sticker_file_id

    @property
    def type(self):
        """Gets the type of this InlineQueryResultCachedSticker.

        Type of the result, must be *sticker*

        :return: The type of this InlineQueryResultCachedSticker.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineQueryResultCachedSticker.

        Type of the result, must be *sticker*

        :param type: The type of this InlineQueryResultCachedSticker.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
