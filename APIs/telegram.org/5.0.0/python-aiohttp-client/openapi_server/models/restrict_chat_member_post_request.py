# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chat_permissions import ChatPermissions
from openapi_server.models.delete_chat_sticker_set_post_request_chat_id import DeleteChatStickerSetPostRequestChatId
from openapi_server import util


class RestrictChatMemberPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_id: DeleteChatStickerSetPostRequestChatId=None, permissions: ChatPermissions=None, until_date: int=None, user_id: int=None):
        """RestrictChatMemberPostRequest - a model defined in OpenAPI

        :param chat_id: The chat_id of this RestrictChatMemberPostRequest.
        :param permissions: The permissions of this RestrictChatMemberPostRequest.
        :param until_date: The until_date of this RestrictChatMemberPostRequest.
        :param user_id: The user_id of this RestrictChatMemberPostRequest.
        """
        self.openapi_types = {
            'chat_id': DeleteChatStickerSetPostRequestChatId,
            'permissions': ChatPermissions,
            'until_date': int,
            'user_id': int
        }

        self.attribute_map = {
            'chat_id': 'chat_id',
            'permissions': 'permissions',
            'until_date': 'until_date',
            'user_id': 'user_id'
        }

        self._chat_id = chat_id
        self._permissions = permissions
        self._until_date = until_date
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestrictChatMemberPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _restrictChatMember_post_request of this RestrictChatMemberPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_id(self):
        """Gets the chat_id of this RestrictChatMemberPostRequest.


        :return: The chat_id of this RestrictChatMemberPostRequest.
        :rtype: DeleteChatStickerSetPostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this RestrictChatMemberPostRequest.


        :param chat_id: The chat_id of this RestrictChatMemberPostRequest.
        :type chat_id: DeleteChatStickerSetPostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def permissions(self):
        """Gets the permissions of this RestrictChatMemberPostRequest.


        :return: The permissions of this RestrictChatMemberPostRequest.
        :rtype: ChatPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this RestrictChatMemberPostRequest.


        :param permissions: The permissions of this RestrictChatMemberPostRequest.
        :type permissions: ChatPermissions
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def until_date(self):
        """Gets the until_date of this RestrictChatMemberPostRequest.

        Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever

        :return: The until_date of this RestrictChatMemberPostRequest.
        :rtype: int
        """
        return self._until_date

    @until_date.setter
    def until_date(self, until_date):
        """Sets the until_date of this RestrictChatMemberPostRequest.

        Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever

        :param until_date: The until_date of this RestrictChatMemberPostRequest.
        :type until_date: int
        """

        self._until_date = until_date

    @property
    def user_id(self):
        """Gets the user_id of this RestrictChatMemberPostRequest.

        Unique identifier of the target user

        :return: The user_id of this RestrictChatMemberPostRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this RestrictChatMemberPostRequest.

        Unique identifier of the target user

        :param user_id: The user_id of this RestrictChatMemberPostRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
