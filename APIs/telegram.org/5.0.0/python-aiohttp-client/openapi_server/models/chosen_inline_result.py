# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server.models.user import User
from openapi_server import util


class ChosenInlineResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _from: User=None, inline_message_id: str=None, location: Location=None, query: str=None, result_id: str=None):
        """ChosenInlineResult - a model defined in OpenAPI

        :param _from: The _from of this ChosenInlineResult.
        :param inline_message_id: The inline_message_id of this ChosenInlineResult.
        :param location: The location of this ChosenInlineResult.
        :param query: The query of this ChosenInlineResult.
        :param result_id: The result_id of this ChosenInlineResult.
        """
        self.openapi_types = {
            '_from': User,
            'inline_message_id': str,
            'location': Location,
            'query': str,
            'result_id': str
        }

        self.attribute_map = {
            '_from': 'from',
            'inline_message_id': 'inline_message_id',
            'location': 'location',
            'query': 'query',
            'result_id': 'result_id'
        }

        self.__from = _from
        self._inline_message_id = inline_message_id
        self._location = location
        self._query = query
        self._result_id = result_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChosenInlineResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChosenInlineResult of this ChosenInlineResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self):
        """Gets the _from of this ChosenInlineResult.


        :return: The _from of this ChosenInlineResult.
        :rtype: User
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ChosenInlineResult.


        :param _from: The _from of this ChosenInlineResult.
        :type _from: User
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def inline_message_id(self):
        """Gets the inline_message_id of this ChosenInlineResult.

        *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.

        :return: The inline_message_id of this ChosenInlineResult.
        :rtype: str
        """
        return self._inline_message_id

    @inline_message_id.setter
    def inline_message_id(self, inline_message_id):
        """Sets the inline_message_id of this ChosenInlineResult.

        *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.

        :param inline_message_id: The inline_message_id of this ChosenInlineResult.
        :type inline_message_id: str
        """

        self._inline_message_id = inline_message_id

    @property
    def location(self):
        """Gets the location of this ChosenInlineResult.


        :return: The location of this ChosenInlineResult.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ChosenInlineResult.


        :param location: The location of this ChosenInlineResult.
        :type location: Location
        """

        self._location = location

    @property
    def query(self):
        """Gets the query of this ChosenInlineResult.

        The query that was used to obtain the result

        :return: The query of this ChosenInlineResult.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ChosenInlineResult.

        The query that was used to obtain the result

        :param query: The query of this ChosenInlineResult.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def result_id(self):
        """Gets the result_id of this ChosenInlineResult.

        The unique identifier for the result that was chosen

        :return: The result_id of this ChosenInlineResult.
        :rtype: str
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this ChosenInlineResult.

        The unique identifier for the result that was chosen

        :param result_id: The result_id of this ChosenInlineResult.
        :type result_id: str
        """
        if result_id is None:
            raise ValueError("Invalid value for `result_id`, must not be `None`")

        self._result_id = result_id
