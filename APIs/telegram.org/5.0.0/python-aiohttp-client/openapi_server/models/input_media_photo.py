# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_entity import MessageEntity
from openapi_server import util


class InputMediaPhoto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, caption_entities: List[MessageEntity]=None, media: str=None, parse_mode: str=None, type: str=None):
        """InputMediaPhoto - a model defined in OpenAPI

        :param caption: The caption of this InputMediaPhoto.
        :param caption_entities: The caption_entities of this InputMediaPhoto.
        :param media: The media of this InputMediaPhoto.
        :param parse_mode: The parse_mode of this InputMediaPhoto.
        :param type: The type of this InputMediaPhoto.
        """
        self.openapi_types = {
            'caption': str,
            'caption_entities': List[MessageEntity],
            'media': str,
            'parse_mode': str,
            'type': str
        }

        self.attribute_map = {
            'caption': 'caption',
            'caption_entities': 'caption_entities',
            'media': 'media',
            'parse_mode': 'parse_mode',
            'type': 'type'
        }

        self._caption = caption
        self._caption_entities = caption_entities
        self._media = media
        self._parse_mode = parse_mode
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputMediaPhoto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputMediaPhoto of this InputMediaPhoto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this InputMediaPhoto.

        *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing

        :return: The caption of this InputMediaPhoto.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this InputMediaPhoto.

        *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing

        :param caption: The caption of this InputMediaPhoto.
        :type caption: str
        """

        self._caption = caption

    @property
    def caption_entities(self):
        """Gets the caption_entities of this InputMediaPhoto.

        *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*

        :return: The caption_entities of this InputMediaPhoto.
        :rtype: List[MessageEntity]
        """
        return self._caption_entities

    @caption_entities.setter
    def caption_entities(self, caption_entities):
        """Sets the caption_entities of this InputMediaPhoto.

        *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*

        :param caption_entities: The caption_entities of this InputMediaPhoto.
        :type caption_entities: List[MessageEntity]
        """

        self._caption_entities = caption_entities

    @property
    def media(self):
        """Gets the media of this InputMediaPhoto.

        File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\\_attach\\_name>” to upload a new one using multipart/form-data under <file\\_attach\\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)

        :return: The media of this InputMediaPhoto.
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this InputMediaPhoto.

        File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\\_attach\\_name>” to upload a new one using multipart/form-data under <file\\_attach\\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)

        :param media: The media of this InputMediaPhoto.
        :type media: str
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def parse_mode(self):
        """Gets the parse_mode of this InputMediaPhoto.

        *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :return: The parse_mode of this InputMediaPhoto.
        :rtype: str
        """
        return self._parse_mode

    @parse_mode.setter
    def parse_mode(self, parse_mode):
        """Sets the parse_mode of this InputMediaPhoto.

        *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :param parse_mode: The parse_mode of this InputMediaPhoto.
        :type parse_mode: str
        """

        self._parse_mode = parse_mode

    @property
    def type(self):
        """Gets the type of this InputMediaPhoto.

        Type of the result, must be *photo*

        :return: The type of this InputMediaPhoto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InputMediaPhoto.

        Type of the result, must be *photo*

        :param type: The type of this InputMediaPhoto.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
