# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUpdatesPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_updates: List[str]=None, limit: int=100, offset: int=None, timeout: int=0):
        """GetUpdatesPostRequest - a model defined in OpenAPI

        :param allowed_updates: The allowed_updates of this GetUpdatesPostRequest.
        :param limit: The limit of this GetUpdatesPostRequest.
        :param offset: The offset of this GetUpdatesPostRequest.
        :param timeout: The timeout of this GetUpdatesPostRequest.
        """
        self.openapi_types = {
            'allowed_updates': List[str],
            'limit': int,
            'offset': int,
            'timeout': int
        }

        self.attribute_map = {
            'allowed_updates': 'allowed_updates',
            'limit': 'limit',
            'offset': 'offset',
            'timeout': 'timeout'
        }

        self._allowed_updates = allowed_updates
        self._limit = limit
        self._offset = offset
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUpdatesPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _getUpdates_post_request of this GetUpdatesPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_updates(self):
        """Gets the allowed_updates of this GetUpdatesPostRequest.

        A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\_channel\\_post”, “callback\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.    Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.

        :return: The allowed_updates of this GetUpdatesPostRequest.
        :rtype: List[str]
        """
        return self._allowed_updates

    @allowed_updates.setter
    def allowed_updates(self, allowed_updates):
        """Sets the allowed_updates of this GetUpdatesPostRequest.

        A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\_channel\\_post”, “callback\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.    Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.

        :param allowed_updates: The allowed_updates of this GetUpdatesPostRequest.
        :type allowed_updates: List[str]
        """

        self._allowed_updates = allowed_updates

    @property
    def limit(self):
        """Gets the limit of this GetUpdatesPostRequest.

        Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.

        :return: The limit of this GetUpdatesPostRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetUpdatesPostRequest.

        Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.

        :param limit: The limit of this GetUpdatesPostRequest.
        :type limit: int
        """
        if limit is not None and limit > 100:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this GetUpdatesPostRequest.

        Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.

        :return: The offset of this GetUpdatesPostRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GetUpdatesPostRequest.

        Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.

        :param offset: The offset of this GetUpdatesPostRequest.
        :type offset: int
        """

        self._offset = offset

    @property
    def timeout(self):
        """Gets the timeout of this GetUpdatesPostRequest.

        Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.

        :return: The timeout of this GetUpdatesPostRequest.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this GetUpdatesPostRequest.

        Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.

        :param timeout: The timeout of this GetUpdatesPostRequest.
        :type timeout: int
        """

        self._timeout = timeout
