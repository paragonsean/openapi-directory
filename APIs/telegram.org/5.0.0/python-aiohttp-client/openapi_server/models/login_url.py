# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoginUrl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_username: str=None, forward_text: str=None, request_write_access: bool=None, url: str=None):
        """LoginUrl - a model defined in OpenAPI

        :param bot_username: The bot_username of this LoginUrl.
        :param forward_text: The forward_text of this LoginUrl.
        :param request_write_access: The request_write_access of this LoginUrl.
        :param url: The url of this LoginUrl.
        """
        self.openapi_types = {
            'bot_username': str,
            'forward_text': str,
            'request_write_access': bool,
            'url': str
        }

        self.attribute_map = {
            'bot_username': 'bot_username',
            'forward_text': 'forward_text',
            'request_write_access': 'request_write_access',
            'url': 'url'
        }

        self._bot_username = bot_username
        self._forward_text = forward_text
        self._request_write_access = request_write_access
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginUrl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoginUrl of this LoginUrl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_username(self):
        """Gets the bot_username of this LoginUrl.

        *Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The *url*'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.

        :return: The bot_username of this LoginUrl.
        :rtype: str
        """
        return self._bot_username

    @bot_username.setter
    def bot_username(self, bot_username):
        """Sets the bot_username of this LoginUrl.

        *Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The *url*'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.

        :param bot_username: The bot_username of this LoginUrl.
        :type bot_username: str
        """

        self._bot_username = bot_username

    @property
    def forward_text(self):
        """Gets the forward_text of this LoginUrl.

        *Optional*. New text of the button in forwarded messages.

        :return: The forward_text of this LoginUrl.
        :rtype: str
        """
        return self._forward_text

    @forward_text.setter
    def forward_text(self, forward_text):
        """Sets the forward_text of this LoginUrl.

        *Optional*. New text of the button in forwarded messages.

        :param forward_text: The forward_text of this LoginUrl.
        :type forward_text: str
        """

        self._forward_text = forward_text

    @property
    def request_write_access(self):
        """Gets the request_write_access of this LoginUrl.

        *Optional*. Pass True to request the permission for your bot to send messages to the user.

        :return: The request_write_access of this LoginUrl.
        :rtype: bool
        """
        return self._request_write_access

    @request_write_access.setter
    def request_write_access(self, request_write_access):
        """Sets the request_write_access of this LoginUrl.

        *Optional*. Pass True to request the permission for your bot to send messages to the user.

        :param request_write_access: The request_write_access of this LoginUrl.
        :type request_write_access: bool
        """

        self._request_write_access = request_write_access

    @property
    def url(self):
        """Gets the url of this LoginUrl.

        An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).    **NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).

        :return: The url of this LoginUrl.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LoginUrl.

        An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).    **NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).

        :param url: The url of this LoginUrl.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
