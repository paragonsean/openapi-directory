# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inline_keyboard_button import InlineKeyboardButton
from openapi_server import util


class InlineKeyboardMarkup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inline_keyboard: List[List[InlineKeyboardButton]]=None):
        """InlineKeyboardMarkup - a model defined in OpenAPI

        :param inline_keyboard: The inline_keyboard of this InlineKeyboardMarkup.
        """
        self.openapi_types = {
            'inline_keyboard': List[List[InlineKeyboardButton]]
        }

        self.attribute_map = {
            'inline_keyboard': 'inline_keyboard'
        }

        self._inline_keyboard = inline_keyboard

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineKeyboardMarkup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InlineKeyboardMarkup of this InlineKeyboardMarkup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inline_keyboard(self):
        """Gets the inline_keyboard of this InlineKeyboardMarkup.

        Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects

        :return: The inline_keyboard of this InlineKeyboardMarkup.
        :rtype: List[List[InlineKeyboardButton]]
        """
        return self._inline_keyboard

    @inline_keyboard.setter
    def inline_keyboard(self, inline_keyboard):
        """Sets the inline_keyboard of this InlineKeyboardMarkup.

        Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects

        :param inline_keyboard: The inline_keyboard of this InlineKeyboardMarkup.
        :type inline_keyboard: List[List[InlineKeyboardButton]]
        """
        if inline_keyboard is None:
            raise ValueError("Invalid value for `inline_keyboard`, must not be `None`")

        self._inline_keyboard = inline_keyboard
