# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_server import util


class PromoteChatMemberPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_change_info: bool=None, can_delete_messages: bool=None, can_edit_messages: bool=None, can_invite_users: bool=None, can_pin_messages: bool=None, can_post_messages: bool=None, can_promote_members: bool=None, can_restrict_members: bool=None, chat_id: CopyMessagePostRequestChatId=None, is_anonymous: bool=None, user_id: int=None):
        """PromoteChatMemberPostRequest - a model defined in OpenAPI

        :param can_change_info: The can_change_info of this PromoteChatMemberPostRequest.
        :param can_delete_messages: The can_delete_messages of this PromoteChatMemberPostRequest.
        :param can_edit_messages: The can_edit_messages of this PromoteChatMemberPostRequest.
        :param can_invite_users: The can_invite_users of this PromoteChatMemberPostRequest.
        :param can_pin_messages: The can_pin_messages of this PromoteChatMemberPostRequest.
        :param can_post_messages: The can_post_messages of this PromoteChatMemberPostRequest.
        :param can_promote_members: The can_promote_members of this PromoteChatMemberPostRequest.
        :param can_restrict_members: The can_restrict_members of this PromoteChatMemberPostRequest.
        :param chat_id: The chat_id of this PromoteChatMemberPostRequest.
        :param is_anonymous: The is_anonymous of this PromoteChatMemberPostRequest.
        :param user_id: The user_id of this PromoteChatMemberPostRequest.
        """
        self.openapi_types = {
            'can_change_info': bool,
            'can_delete_messages': bool,
            'can_edit_messages': bool,
            'can_invite_users': bool,
            'can_pin_messages': bool,
            'can_post_messages': bool,
            'can_promote_members': bool,
            'can_restrict_members': bool,
            'chat_id': CopyMessagePostRequestChatId,
            'is_anonymous': bool,
            'user_id': int
        }

        self.attribute_map = {
            'can_change_info': 'can_change_info',
            'can_delete_messages': 'can_delete_messages',
            'can_edit_messages': 'can_edit_messages',
            'can_invite_users': 'can_invite_users',
            'can_pin_messages': 'can_pin_messages',
            'can_post_messages': 'can_post_messages',
            'can_promote_members': 'can_promote_members',
            'can_restrict_members': 'can_restrict_members',
            'chat_id': 'chat_id',
            'is_anonymous': 'is_anonymous',
            'user_id': 'user_id'
        }

        self._can_change_info = can_change_info
        self._can_delete_messages = can_delete_messages
        self._can_edit_messages = can_edit_messages
        self._can_invite_users = can_invite_users
        self._can_pin_messages = can_pin_messages
        self._can_post_messages = can_post_messages
        self._can_promote_members = can_promote_members
        self._can_restrict_members = can_restrict_members
        self._chat_id = chat_id
        self._is_anonymous = is_anonymous
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromoteChatMemberPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _promoteChatMember_post_request of this PromoteChatMemberPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_change_info(self):
        """Gets the can_change_info of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can change chat title, photo and other settings

        :return: The can_change_info of this PromoteChatMemberPostRequest.
        :rtype: bool
        """
        return self._can_change_info

    @can_change_info.setter
    def can_change_info(self, can_change_info):
        """Sets the can_change_info of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can change chat title, photo and other settings

        :param can_change_info: The can_change_info of this PromoteChatMemberPostRequest.
        :type can_change_info: bool
        """

        self._can_change_info = can_change_info

    @property
    def can_delete_messages(self):
        """Gets the can_delete_messages of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can delete messages of other users

        :return: The can_delete_messages of this PromoteChatMemberPostRequest.
        :rtype: bool
        """
        return self._can_delete_messages

    @can_delete_messages.setter
    def can_delete_messages(self, can_delete_messages):
        """Sets the can_delete_messages of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can delete messages of other users

        :param can_delete_messages: The can_delete_messages of this PromoteChatMemberPostRequest.
        :type can_delete_messages: bool
        """

        self._can_delete_messages = can_delete_messages

    @property
    def can_edit_messages(self):
        """Gets the can_edit_messages of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can edit messages of other users and can pin messages, channels only

        :return: The can_edit_messages of this PromoteChatMemberPostRequest.
        :rtype: bool
        """
        return self._can_edit_messages

    @can_edit_messages.setter
    def can_edit_messages(self, can_edit_messages):
        """Sets the can_edit_messages of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can edit messages of other users and can pin messages, channels only

        :param can_edit_messages: The can_edit_messages of this PromoteChatMemberPostRequest.
        :type can_edit_messages: bool
        """

        self._can_edit_messages = can_edit_messages

    @property
    def can_invite_users(self):
        """Gets the can_invite_users of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can invite new users to the chat

        :return: The can_invite_users of this PromoteChatMemberPostRequest.
        :rtype: bool
        """
        return self._can_invite_users

    @can_invite_users.setter
    def can_invite_users(self, can_invite_users):
        """Sets the can_invite_users of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can invite new users to the chat

        :param can_invite_users: The can_invite_users of this PromoteChatMemberPostRequest.
        :type can_invite_users: bool
        """

        self._can_invite_users = can_invite_users

    @property
    def can_pin_messages(self):
        """Gets the can_pin_messages of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can pin messages, supergroups only

        :return: The can_pin_messages of this PromoteChatMemberPostRequest.
        :rtype: bool
        """
        return self._can_pin_messages

    @can_pin_messages.setter
    def can_pin_messages(self, can_pin_messages):
        """Sets the can_pin_messages of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can pin messages, supergroups only

        :param can_pin_messages: The can_pin_messages of this PromoteChatMemberPostRequest.
        :type can_pin_messages: bool
        """

        self._can_pin_messages = can_pin_messages

    @property
    def can_post_messages(self):
        """Gets the can_post_messages of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can create channel posts, channels only

        :return: The can_post_messages of this PromoteChatMemberPostRequest.
        :rtype: bool
        """
        return self._can_post_messages

    @can_post_messages.setter
    def can_post_messages(self, can_post_messages):
        """Sets the can_post_messages of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can create channel posts, channels only

        :param can_post_messages: The can_post_messages of this PromoteChatMemberPostRequest.
        :type can_post_messages: bool
        """

        self._can_post_messages = can_post_messages

    @property
    def can_promote_members(self):
        """Gets the can_promote_members of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)

        :return: The can_promote_members of this PromoteChatMemberPostRequest.
        :rtype: bool
        """
        return self._can_promote_members

    @can_promote_members.setter
    def can_promote_members(self, can_promote_members):
        """Sets the can_promote_members of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)

        :param can_promote_members: The can_promote_members of this PromoteChatMemberPostRequest.
        :type can_promote_members: bool
        """

        self._can_promote_members = can_promote_members

    @property
    def can_restrict_members(self):
        """Gets the can_restrict_members of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can restrict, ban or unban chat members

        :return: The can_restrict_members of this PromoteChatMemberPostRequest.
        :rtype: bool
        """
        return self._can_restrict_members

    @can_restrict_members.setter
    def can_restrict_members(self, can_restrict_members):
        """Sets the can_restrict_members of this PromoteChatMemberPostRequest.

        Pass True, if the administrator can restrict, ban or unban chat members

        :param can_restrict_members: The can_restrict_members of this PromoteChatMemberPostRequest.
        :type can_restrict_members: bool
        """

        self._can_restrict_members = can_restrict_members

    @property
    def chat_id(self):
        """Gets the chat_id of this PromoteChatMemberPostRequest.


        :return: The chat_id of this PromoteChatMemberPostRequest.
        :rtype: CopyMessagePostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this PromoteChatMemberPostRequest.


        :param chat_id: The chat_id of this PromoteChatMemberPostRequest.
        :type chat_id: CopyMessagePostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def is_anonymous(self):
        """Gets the is_anonymous of this PromoteChatMemberPostRequest.

        Pass *True*, if the administrator's presence in the chat is hidden

        :return: The is_anonymous of this PromoteChatMemberPostRequest.
        :rtype: bool
        """
        return self._is_anonymous

    @is_anonymous.setter
    def is_anonymous(self, is_anonymous):
        """Sets the is_anonymous of this PromoteChatMemberPostRequest.

        Pass *True*, if the administrator's presence in the chat is hidden

        :param is_anonymous: The is_anonymous of this PromoteChatMemberPostRequest.
        :type is_anonymous: bool
        """

        self._is_anonymous = is_anonymous

    @property
    def user_id(self):
        """Gets the user_id of this PromoteChatMemberPostRequest.

        Unique identifier of the target user

        :return: The user_id of this PromoteChatMemberPostRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PromoteChatMemberPostRequest.

        Unique identifier of the target user

        :param user_id: The user_id of this PromoteChatMemberPostRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
