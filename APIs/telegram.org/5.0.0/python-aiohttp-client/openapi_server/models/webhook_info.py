# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebhookInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_updates: List[str]=None, has_custom_certificate: bool=None, ip_address: str=None, last_error_date: int=None, last_error_message: str=None, max_connections: int=None, pending_update_count: int=None, url: str=None):
        """WebhookInfo - a model defined in OpenAPI

        :param allowed_updates: The allowed_updates of this WebhookInfo.
        :param has_custom_certificate: The has_custom_certificate of this WebhookInfo.
        :param ip_address: The ip_address of this WebhookInfo.
        :param last_error_date: The last_error_date of this WebhookInfo.
        :param last_error_message: The last_error_message of this WebhookInfo.
        :param max_connections: The max_connections of this WebhookInfo.
        :param pending_update_count: The pending_update_count of this WebhookInfo.
        :param url: The url of this WebhookInfo.
        """
        self.openapi_types = {
            'allowed_updates': List[str],
            'has_custom_certificate': bool,
            'ip_address': str,
            'last_error_date': int,
            'last_error_message': str,
            'max_connections': int,
            'pending_update_count': int,
            'url': str
        }

        self.attribute_map = {
            'allowed_updates': 'allowed_updates',
            'has_custom_certificate': 'has_custom_certificate',
            'ip_address': 'ip_address',
            'last_error_date': 'last_error_date',
            'last_error_message': 'last_error_message',
            'max_connections': 'max_connections',
            'pending_update_count': 'pending_update_count',
            'url': 'url'
        }

        self._allowed_updates = allowed_updates
        self._has_custom_certificate = has_custom_certificate
        self._ip_address = ip_address
        self._last_error_date = last_error_date
        self._last_error_message = last_error_message
        self._max_connections = max_connections
        self._pending_update_count = pending_update_count
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookInfo of this WebhookInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_updates(self):
        """Gets the allowed_updates of this WebhookInfo.

        *Optional*. A list of update types the bot is subscribed to. Defaults to all update types

        :return: The allowed_updates of this WebhookInfo.
        :rtype: List[str]
        """
        return self._allowed_updates

    @allowed_updates.setter
    def allowed_updates(self, allowed_updates):
        """Sets the allowed_updates of this WebhookInfo.

        *Optional*. A list of update types the bot is subscribed to. Defaults to all update types

        :param allowed_updates: The allowed_updates of this WebhookInfo.
        :type allowed_updates: List[str]
        """

        self._allowed_updates = allowed_updates

    @property
    def has_custom_certificate(self):
        """Gets the has_custom_certificate of this WebhookInfo.

        True, if a custom certificate was provided for webhook certificate checks

        :return: The has_custom_certificate of this WebhookInfo.
        :rtype: bool
        """
        return self._has_custom_certificate

    @has_custom_certificate.setter
    def has_custom_certificate(self, has_custom_certificate):
        """Sets the has_custom_certificate of this WebhookInfo.

        True, if a custom certificate was provided for webhook certificate checks

        :param has_custom_certificate: The has_custom_certificate of this WebhookInfo.
        :type has_custom_certificate: bool
        """
        if has_custom_certificate is None:
            raise ValueError("Invalid value for `has_custom_certificate`, must not be `None`")

        self._has_custom_certificate = has_custom_certificate

    @property
    def ip_address(self):
        """Gets the ip_address of this WebhookInfo.

        *Optional*. Currently used webhook IP address

        :return: The ip_address of this WebhookInfo.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this WebhookInfo.

        *Optional*. Currently used webhook IP address

        :param ip_address: The ip_address of this WebhookInfo.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def last_error_date(self):
        """Gets the last_error_date of this WebhookInfo.

        *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook

        :return: The last_error_date of this WebhookInfo.
        :rtype: int
        """
        return self._last_error_date

    @last_error_date.setter
    def last_error_date(self, last_error_date):
        """Sets the last_error_date of this WebhookInfo.

        *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook

        :param last_error_date: The last_error_date of this WebhookInfo.
        :type last_error_date: int
        """

        self._last_error_date = last_error_date

    @property
    def last_error_message(self):
        """Gets the last_error_message of this WebhookInfo.

        *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook

        :return: The last_error_message of this WebhookInfo.
        :rtype: str
        """
        return self._last_error_message

    @last_error_message.setter
    def last_error_message(self, last_error_message):
        """Sets the last_error_message of this WebhookInfo.

        *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook

        :param last_error_message: The last_error_message of this WebhookInfo.
        :type last_error_message: str
        """

        self._last_error_message = last_error_message

    @property
    def max_connections(self):
        """Gets the max_connections of this WebhookInfo.

        *Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery

        :return: The max_connections of this WebhookInfo.
        :rtype: int
        """
        return self._max_connections

    @max_connections.setter
    def max_connections(self, max_connections):
        """Sets the max_connections of this WebhookInfo.

        *Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery

        :param max_connections: The max_connections of this WebhookInfo.
        :type max_connections: int
        """

        self._max_connections = max_connections

    @property
    def pending_update_count(self):
        """Gets the pending_update_count of this WebhookInfo.

        Number of updates awaiting delivery

        :return: The pending_update_count of this WebhookInfo.
        :rtype: int
        """
        return self._pending_update_count

    @pending_update_count.setter
    def pending_update_count(self, pending_update_count):
        """Sets the pending_update_count of this WebhookInfo.

        Number of updates awaiting delivery

        :param pending_update_count: The pending_update_count of this WebhookInfo.
        :type pending_update_count: int
        """
        if pending_update_count is None:
            raise ValueError("Invalid value for `pending_update_count`, must not be `None`")

        self._pending_update_count = pending_update_count

    @property
    def url(self):
        """Gets the url of this WebhookInfo.

        Webhook URL, may be empty if webhook is not set up

        :return: The url of this WebhookInfo.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookInfo.

        Webhook URL, may be empty if webhook is not set up

        :param url: The url of this WebhookInfo.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
