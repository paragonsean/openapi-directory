# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class ProximityAlertTriggered(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance: int=None, traveler: User=None, watcher: User=None):
        """ProximityAlertTriggered - a model defined in OpenAPI

        :param distance: The distance of this ProximityAlertTriggered.
        :param traveler: The traveler of this ProximityAlertTriggered.
        :param watcher: The watcher of this ProximityAlertTriggered.
        """
        self.openapi_types = {
            'distance': int,
            'traveler': User,
            'watcher': User
        }

        self.attribute_map = {
            'distance': 'distance',
            'traveler': 'traveler',
            'watcher': 'watcher'
        }

        self._distance = distance
        self._traveler = traveler
        self._watcher = watcher

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProximityAlertTriggered':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProximityAlertTriggered of this ProximityAlertTriggered.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance(self):
        """Gets the distance of this ProximityAlertTriggered.

        The distance between the users

        :return: The distance of this ProximityAlertTriggered.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ProximityAlertTriggered.

        The distance between the users

        :param distance: The distance of this ProximityAlertTriggered.
        :type distance: int
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")

        self._distance = distance

    @property
    def traveler(self):
        """Gets the traveler of this ProximityAlertTriggered.


        :return: The traveler of this ProximityAlertTriggered.
        :rtype: User
        """
        return self._traveler

    @traveler.setter
    def traveler(self, traveler):
        """Sets the traveler of this ProximityAlertTriggered.


        :param traveler: The traveler of this ProximityAlertTriggered.
        :type traveler: User
        """
        if traveler is None:
            raise ValueError("Invalid value for `traveler`, must not be `None`")

        self._traveler = traveler

    @property
    def watcher(self):
        """Gets the watcher of this ProximityAlertTriggered.


        :return: The watcher of this ProximityAlertTriggered.
        :rtype: User
        """
        return self._watcher

    @watcher.setter
    def watcher(self, watcher):
        """Sets the watcher of this ProximityAlertTriggered.


        :param watcher: The watcher of this ProximityAlertTriggered.
        :type watcher: User
        """
        if watcher is None:
            raise ValueError("Invalid value for `watcher`, must not be `None`")

        self._watcher = watcher
