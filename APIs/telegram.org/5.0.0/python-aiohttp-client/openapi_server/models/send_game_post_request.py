# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server import util


class SendGamePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_sending_without_reply: bool=None, chat_id: int=None, disable_notification: bool=None, game_short_name: str=None, reply_markup: InlineKeyboardMarkup=None, reply_to_message_id: int=None):
        """SendGamePostRequest - a model defined in OpenAPI

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendGamePostRequest.
        :param chat_id: The chat_id of this SendGamePostRequest.
        :param disable_notification: The disable_notification of this SendGamePostRequest.
        :param game_short_name: The game_short_name of this SendGamePostRequest.
        :param reply_markup: The reply_markup of this SendGamePostRequest.
        :param reply_to_message_id: The reply_to_message_id of this SendGamePostRequest.
        """
        self.openapi_types = {
            'allow_sending_without_reply': bool,
            'chat_id': int,
            'disable_notification': bool,
            'game_short_name': str,
            'reply_markup': InlineKeyboardMarkup,
            'reply_to_message_id': int
        }

        self.attribute_map = {
            'allow_sending_without_reply': 'allow_sending_without_reply',
            'chat_id': 'chat_id',
            'disable_notification': 'disable_notification',
            'game_short_name': 'game_short_name',
            'reply_markup': 'reply_markup',
            'reply_to_message_id': 'reply_to_message_id'
        }

        self._allow_sending_without_reply = allow_sending_without_reply
        self._chat_id = chat_id
        self._disable_notification = disable_notification
        self._game_short_name = game_short_name
        self._reply_markup = reply_markup
        self._reply_to_message_id = reply_to_message_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendGamePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _sendGame_post_request of this SendGamePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_sending_without_reply(self):
        """Gets the allow_sending_without_reply of this SendGamePostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :return: The allow_sending_without_reply of this SendGamePostRequest.
        :rtype: bool
        """
        return self._allow_sending_without_reply

    @allow_sending_without_reply.setter
    def allow_sending_without_reply(self, allow_sending_without_reply):
        """Sets the allow_sending_without_reply of this SendGamePostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendGamePostRequest.
        :type allow_sending_without_reply: bool
        """

        self._allow_sending_without_reply = allow_sending_without_reply

    @property
    def chat_id(self):
        """Gets the chat_id of this SendGamePostRequest.

        Unique identifier for the target chat

        :return: The chat_id of this SendGamePostRequest.
        :rtype: int
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SendGamePostRequest.

        Unique identifier for the target chat

        :param chat_id: The chat_id of this SendGamePostRequest.
        :type chat_id: int
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def disable_notification(self):
        """Gets the disable_notification of this SendGamePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :return: The disable_notification of this SendGamePostRequest.
        :rtype: bool
        """
        return self._disable_notification

    @disable_notification.setter
    def disable_notification(self, disable_notification):
        """Sets the disable_notification of this SendGamePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :param disable_notification: The disable_notification of this SendGamePostRequest.
        :type disable_notification: bool
        """

        self._disable_notification = disable_notification

    @property
    def game_short_name(self):
        """Gets the game_short_name of this SendGamePostRequest.

        Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).

        :return: The game_short_name of this SendGamePostRequest.
        :rtype: str
        """
        return self._game_short_name

    @game_short_name.setter
    def game_short_name(self, game_short_name):
        """Sets the game_short_name of this SendGamePostRequest.

        Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).

        :param game_short_name: The game_short_name of this SendGamePostRequest.
        :type game_short_name: str
        """
        if game_short_name is None:
            raise ValueError("Invalid value for `game_short_name`, must not be `None`")

        self._game_short_name = game_short_name

    @property
    def reply_markup(self):
        """Gets the reply_markup of this SendGamePostRequest.


        :return: The reply_markup of this SendGamePostRequest.
        :rtype: InlineKeyboardMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this SendGamePostRequest.


        :param reply_markup: The reply_markup of this SendGamePostRequest.
        :type reply_markup: InlineKeyboardMarkup
        """

        self._reply_markup = reply_markup

    @property
    def reply_to_message_id(self):
        """Gets the reply_to_message_id of this SendGamePostRequest.

        If the message is a reply, ID of the original message

        :return: The reply_to_message_id of this SendGamePostRequest.
        :rtype: int
        """
        return self._reply_to_message_id

    @reply_to_message_id.setter
    def reply_to_message_id(self, reply_to_message_id):
        """Sets the reply_to_message_id of this SendGamePostRequest.

        If the message is a reply, ID of the original message

        :param reply_to_message_id: The reply_to_message_id of this SendGamePostRequest.
        :type reply_to_message_id: int
        """

        self._reply_to_message_id = reply_to_message_id
