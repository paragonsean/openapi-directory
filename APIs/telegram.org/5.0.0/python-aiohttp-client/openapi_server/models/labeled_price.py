# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabeledPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, label: str=None):
        """LabeledPrice - a model defined in OpenAPI

        :param amount: The amount of this LabeledPrice.
        :param label: The label of this LabeledPrice.
        """
        self.openapi_types = {
            'amount': int,
            'label': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'label': 'label'
        }

        self._amount = amount
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabeledPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabeledPrice of this LabeledPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this LabeledPrice.

        Price of the product in the *smallest units* of the [currency](/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).

        :return: The amount of this LabeledPrice.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this LabeledPrice.

        Price of the product in the *smallest units* of the [currency](/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).

        :param amount: The amount of this LabeledPrice.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def label(self):
        """Gets the label of this LabeledPrice.

        Portion label

        :return: The label of this LabeledPrice.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LabeledPrice.

        Portion label

        :param label: The label of this LabeledPrice.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label
