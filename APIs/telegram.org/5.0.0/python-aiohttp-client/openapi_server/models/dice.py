# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emoji: str=None, value: int=None):
        """Dice - a model defined in OpenAPI

        :param emoji: The emoji of this Dice.
        :param value: The value of this Dice.
        """
        self.openapi_types = {
            'emoji': str,
            'value': int
        }

        self.attribute_map = {
            'emoji': 'emoji',
            'value': 'value'
        }

        self._emoji = emoji
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dice of this Dice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emoji(self):
        """Gets the emoji of this Dice.

        Emoji on which the dice throw animation is based

        :return: The emoji of this Dice.
        :rtype: str
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this Dice.

        Emoji on which the dice throw animation is based

        :param emoji: The emoji of this Dice.
        :type emoji: str
        """
        if emoji is None:
            raise ValueError("Invalid value for `emoji`, must not be `None`")

        self._emoji = emoji

    @property
    def value(self):
        """Gets the value of this Dice.

        Value of the dice, 1-6 for ‚Äú<img alt=\"üé≤\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" />‚Äù and ‚Äú<img alt=\"üéØ\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" />‚Äù base emoji, 1-5 for ‚Äú<img alt=\"üèÄ\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" />‚Äù and ‚Äú<img alt=\"‚öΩ\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" />‚Äù base emoji, 1-64 for ‚Äú<img alt=\"üé∞\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" />‚Äù base emoji

        :return: The value of this Dice.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Dice.

        Value of the dice, 1-6 for ‚Äú<img alt=\"üé≤\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" />‚Äù and ‚Äú<img alt=\"üéØ\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" />‚Äù base emoji, 1-5 for ‚Äú<img alt=\"üèÄ\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" />‚Äù and ‚Äú<img alt=\"‚öΩ\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" />‚Äù base emoji, 1-64 for ‚Äú<img alt=\"üé∞\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" />‚Äù base emoji

        :param value: The value of this Dice.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
