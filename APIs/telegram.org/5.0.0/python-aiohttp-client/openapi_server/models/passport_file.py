# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PassportFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_date: int=None, file_id: str=None, file_size: int=None, file_unique_id: str=None):
        """PassportFile - a model defined in OpenAPI

        :param file_date: The file_date of this PassportFile.
        :param file_id: The file_id of this PassportFile.
        :param file_size: The file_size of this PassportFile.
        :param file_unique_id: The file_unique_id of this PassportFile.
        """
        self.openapi_types = {
            'file_date': int,
            'file_id': str,
            'file_size': int,
            'file_unique_id': str
        }

        self.attribute_map = {
            'file_date': 'file_date',
            'file_id': 'file_id',
            'file_size': 'file_size',
            'file_unique_id': 'file_unique_id'
        }

        self._file_date = file_date
        self._file_id = file_id
        self._file_size = file_size
        self._file_unique_id = file_unique_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PassportFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PassportFile of this PassportFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_date(self):
        """Gets the file_date of this PassportFile.

        Unix time when the file was uploaded

        :return: The file_date of this PassportFile.
        :rtype: int
        """
        return self._file_date

    @file_date.setter
    def file_date(self, file_date):
        """Sets the file_date of this PassportFile.

        Unix time when the file was uploaded

        :param file_date: The file_date of this PassportFile.
        :type file_date: int
        """
        if file_date is None:
            raise ValueError("Invalid value for `file_date`, must not be `None`")

        self._file_date = file_date

    @property
    def file_id(self):
        """Gets the file_id of this PassportFile.

        Identifier for this file, which can be used to download or reuse the file

        :return: The file_id of this PassportFile.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this PassportFile.

        Identifier for this file, which can be used to download or reuse the file

        :param file_id: The file_id of this PassportFile.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_size(self):
        """Gets the file_size of this PassportFile.

        File size

        :return: The file_size of this PassportFile.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this PassportFile.

        File size

        :param file_size: The file_size of this PassportFile.
        :type file_size: int
        """
        if file_size is None:
            raise ValueError("Invalid value for `file_size`, must not be `None`")

        self._file_size = file_size

    @property
    def file_unique_id(self):
        """Gets the file_unique_id of this PassportFile.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :return: The file_unique_id of this PassportFile.
        :rtype: str
        """
        return self._file_unique_id

    @file_unique_id.setter
    def file_unique_id(self, file_unique_id):
        """Sets the file_unique_id of this PassportFile.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :param file_unique_id: The file_unique_id of this PassportFile.
        :type file_unique_id: str
        """
        if file_unique_id is None:
            raise ValueError("Invalid value for `file_unique_id`, must not be `None`")

        self._file_unique_id = file_unique_id
