# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteStickerFromSetPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sticker: str=None):
        """DeleteStickerFromSetPostRequest - a model defined in OpenAPI

        :param sticker: The sticker of this DeleteStickerFromSetPostRequest.
        """
        self.openapi_types = {
            'sticker': str
        }

        self.attribute_map = {
            'sticker': 'sticker'
        }

        self._sticker = sticker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteStickerFromSetPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _deleteStickerFromSet_post_request of this DeleteStickerFromSetPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sticker(self):
        """Gets the sticker of this DeleteStickerFromSetPostRequest.

        File identifier of the sticker

        :return: The sticker of this DeleteStickerFromSetPostRequest.
        :rtype: str
        """
        return self._sticker

    @sticker.setter
    def sticker(self, sticker):
        """Sets the sticker of this DeleteStickerFromSetPostRequest.

        File identifier of the sticker

        :param sticker: The sticker of this DeleteStickerFromSetPostRequest.
        :type sticker: str
        """
        if sticker is None:
            raise ValueError("Invalid value for `sticker`, must not be `None`")

        self._sticker = sticker
