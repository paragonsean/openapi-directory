# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_info import OrderInfo
from openapi_server import util


class SuccessfulPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, invoice_payload: str=None, order_info: OrderInfo=None, provider_payment_charge_id: str=None, shipping_option_id: str=None, telegram_payment_charge_id: str=None, total_amount: int=None):
        """SuccessfulPayment - a model defined in OpenAPI

        :param currency: The currency of this SuccessfulPayment.
        :param invoice_payload: The invoice_payload of this SuccessfulPayment.
        :param order_info: The order_info of this SuccessfulPayment.
        :param provider_payment_charge_id: The provider_payment_charge_id of this SuccessfulPayment.
        :param shipping_option_id: The shipping_option_id of this SuccessfulPayment.
        :param telegram_payment_charge_id: The telegram_payment_charge_id of this SuccessfulPayment.
        :param total_amount: The total_amount of this SuccessfulPayment.
        """
        self.openapi_types = {
            'currency': str,
            'invoice_payload': str,
            'order_info': OrderInfo,
            'provider_payment_charge_id': str,
            'shipping_option_id': str,
            'telegram_payment_charge_id': str,
            'total_amount': int
        }

        self.attribute_map = {
            'currency': 'currency',
            'invoice_payload': 'invoice_payload',
            'order_info': 'order_info',
            'provider_payment_charge_id': 'provider_payment_charge_id',
            'shipping_option_id': 'shipping_option_id',
            'telegram_payment_charge_id': 'telegram_payment_charge_id',
            'total_amount': 'total_amount'
        }

        self._currency = currency
        self._invoice_payload = invoice_payload
        self._order_info = order_info
        self._provider_payment_charge_id = provider_payment_charge_id
        self._shipping_option_id = shipping_option_id
        self._telegram_payment_charge_id = telegram_payment_charge_id
        self._total_amount = total_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuccessfulPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuccessfulPayment of this SuccessfulPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this SuccessfulPayment.

        Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code

        :return: The currency of this SuccessfulPayment.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SuccessfulPayment.

        Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code

        :param currency: The currency of this SuccessfulPayment.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def invoice_payload(self):
        """Gets the invoice_payload of this SuccessfulPayment.

        Bot specified invoice payload

        :return: The invoice_payload of this SuccessfulPayment.
        :rtype: str
        """
        return self._invoice_payload

    @invoice_payload.setter
    def invoice_payload(self, invoice_payload):
        """Sets the invoice_payload of this SuccessfulPayment.

        Bot specified invoice payload

        :param invoice_payload: The invoice_payload of this SuccessfulPayment.
        :type invoice_payload: str
        """
        if invoice_payload is None:
            raise ValueError("Invalid value for `invoice_payload`, must not be `None`")

        self._invoice_payload = invoice_payload

    @property
    def order_info(self):
        """Gets the order_info of this SuccessfulPayment.


        :return: The order_info of this SuccessfulPayment.
        :rtype: OrderInfo
        """
        return self._order_info

    @order_info.setter
    def order_info(self, order_info):
        """Sets the order_info of this SuccessfulPayment.


        :param order_info: The order_info of this SuccessfulPayment.
        :type order_info: OrderInfo
        """

        self._order_info = order_info

    @property
    def provider_payment_charge_id(self):
        """Gets the provider_payment_charge_id of this SuccessfulPayment.

        Provider payment identifier

        :return: The provider_payment_charge_id of this SuccessfulPayment.
        :rtype: str
        """
        return self._provider_payment_charge_id

    @provider_payment_charge_id.setter
    def provider_payment_charge_id(self, provider_payment_charge_id):
        """Sets the provider_payment_charge_id of this SuccessfulPayment.

        Provider payment identifier

        :param provider_payment_charge_id: The provider_payment_charge_id of this SuccessfulPayment.
        :type provider_payment_charge_id: str
        """
        if provider_payment_charge_id is None:
            raise ValueError("Invalid value for `provider_payment_charge_id`, must not be `None`")

        self._provider_payment_charge_id = provider_payment_charge_id

    @property
    def shipping_option_id(self):
        """Gets the shipping_option_id of this SuccessfulPayment.

        *Optional*. Identifier of the shipping option chosen by the user

        :return: The shipping_option_id of this SuccessfulPayment.
        :rtype: str
        """
        return self._shipping_option_id

    @shipping_option_id.setter
    def shipping_option_id(self, shipping_option_id):
        """Sets the shipping_option_id of this SuccessfulPayment.

        *Optional*. Identifier of the shipping option chosen by the user

        :param shipping_option_id: The shipping_option_id of this SuccessfulPayment.
        :type shipping_option_id: str
        """

        self._shipping_option_id = shipping_option_id

    @property
    def telegram_payment_charge_id(self):
        """Gets the telegram_payment_charge_id of this SuccessfulPayment.

        Telegram payment identifier

        :return: The telegram_payment_charge_id of this SuccessfulPayment.
        :rtype: str
        """
        return self._telegram_payment_charge_id

    @telegram_payment_charge_id.setter
    def telegram_payment_charge_id(self, telegram_payment_charge_id):
        """Sets the telegram_payment_charge_id of this SuccessfulPayment.

        Telegram payment identifier

        :param telegram_payment_charge_id: The telegram_payment_charge_id of this SuccessfulPayment.
        :type telegram_payment_charge_id: str
        """
        if telegram_payment_charge_id is None:
            raise ValueError("Invalid value for `telegram_payment_charge_id`, must not be `None`")

        self._telegram_payment_charge_id = telegram_payment_charge_id

    @property
    def total_amount(self):
        """Gets the total_amount of this SuccessfulPayment.

        Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).

        :return: The total_amount of this SuccessfulPayment.
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this SuccessfulPayment.

        Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).

        :param total_amount: The total_amount of this SuccessfulPayment.
        :type total_amount: int
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")

        self._total_amount = total_amount
