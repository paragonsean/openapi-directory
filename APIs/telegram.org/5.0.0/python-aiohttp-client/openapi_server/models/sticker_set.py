# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.photo_size import PhotoSize
from openapi_server.models.sticker import Sticker
from openapi_server import util


class StickerSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contains_masks: bool=None, is_animated: bool=None, name: str=None, stickers: List[Sticker]=None, thumb: PhotoSize=None, title: str=None):
        """StickerSet - a model defined in OpenAPI

        :param contains_masks: The contains_masks of this StickerSet.
        :param is_animated: The is_animated of this StickerSet.
        :param name: The name of this StickerSet.
        :param stickers: The stickers of this StickerSet.
        :param thumb: The thumb of this StickerSet.
        :param title: The title of this StickerSet.
        """
        self.openapi_types = {
            'contains_masks': bool,
            'is_animated': bool,
            'name': str,
            'stickers': List[Sticker],
            'thumb': PhotoSize,
            'title': str
        }

        self.attribute_map = {
            'contains_masks': 'contains_masks',
            'is_animated': 'is_animated',
            'name': 'name',
            'stickers': 'stickers',
            'thumb': 'thumb',
            'title': 'title'
        }

        self._contains_masks = contains_masks
        self._is_animated = is_animated
        self._name = name
        self._stickers = stickers
        self._thumb = thumb
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StickerSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StickerSet of this StickerSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contains_masks(self):
        """Gets the contains_masks of this StickerSet.

        *True*, if the sticker set contains masks

        :return: The contains_masks of this StickerSet.
        :rtype: bool
        """
        return self._contains_masks

    @contains_masks.setter
    def contains_masks(self, contains_masks):
        """Sets the contains_masks of this StickerSet.

        *True*, if the sticker set contains masks

        :param contains_masks: The contains_masks of this StickerSet.
        :type contains_masks: bool
        """
        if contains_masks is None:
            raise ValueError("Invalid value for `contains_masks`, must not be `None`")

        self._contains_masks = contains_masks

    @property
    def is_animated(self):
        """Gets the is_animated of this StickerSet.

        *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)

        :return: The is_animated of this StickerSet.
        :rtype: bool
        """
        return self._is_animated

    @is_animated.setter
    def is_animated(self, is_animated):
        """Sets the is_animated of this StickerSet.

        *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)

        :param is_animated: The is_animated of this StickerSet.
        :type is_animated: bool
        """
        if is_animated is None:
            raise ValueError("Invalid value for `is_animated`, must not be `None`")

        self._is_animated = is_animated

    @property
    def name(self):
        """Gets the name of this StickerSet.

        Sticker set name

        :return: The name of this StickerSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StickerSet.

        Sticker set name

        :param name: The name of this StickerSet.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def stickers(self):
        """Gets the stickers of this StickerSet.

        List of all set stickers

        :return: The stickers of this StickerSet.
        :rtype: List[Sticker]
        """
        return self._stickers

    @stickers.setter
    def stickers(self, stickers):
        """Sets the stickers of this StickerSet.

        List of all set stickers

        :param stickers: The stickers of this StickerSet.
        :type stickers: List[Sticker]
        """
        if stickers is None:
            raise ValueError("Invalid value for `stickers`, must not be `None`")

        self._stickers = stickers

    @property
    def thumb(self):
        """Gets the thumb of this StickerSet.


        :return: The thumb of this StickerSet.
        :rtype: PhotoSize
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this StickerSet.


        :param thumb: The thumb of this StickerSet.
        :type thumb: PhotoSize
        """

        self._thumb = thumb

    @property
    def title(self):
        """Gets the title of this StickerSet.

        Sticker set title

        :return: The title of this StickerSet.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this StickerSet.

        Sticker set title

        :param title: The title of this StickerSet.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
