# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PassportElementErrorFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_hash: str=None, message: str=None, source: str=None, type: str=None):
        """PassportElementErrorFile - a model defined in OpenAPI

        :param file_hash: The file_hash of this PassportElementErrorFile.
        :param message: The message of this PassportElementErrorFile.
        :param source: The source of this PassportElementErrorFile.
        :param type: The type of this PassportElementErrorFile.
        """
        self.openapi_types = {
            'file_hash': str,
            'message': str,
            'source': str,
            'type': str
        }

        self.attribute_map = {
            'file_hash': 'file_hash',
            'message': 'message',
            'source': 'source',
            'type': 'type'
        }

        self._file_hash = file_hash
        self._message = message
        self._source = source
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PassportElementErrorFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PassportElementErrorFile of this PassportElementErrorFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_hash(self):
        """Gets the file_hash of this PassportElementErrorFile.

        Base64-encoded file hash

        :return: The file_hash of this PassportElementErrorFile.
        :rtype: str
        """
        return self._file_hash

    @file_hash.setter
    def file_hash(self, file_hash):
        """Sets the file_hash of this PassportElementErrorFile.

        Base64-encoded file hash

        :param file_hash: The file_hash of this PassportElementErrorFile.
        :type file_hash: str
        """
        if file_hash is None:
            raise ValueError("Invalid value for `file_hash`, must not be `None`")

        self._file_hash = file_hash

    @property
    def message(self):
        """Gets the message of this PassportElementErrorFile.

        Error message

        :return: The message of this PassportElementErrorFile.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PassportElementErrorFile.

        Error message

        :param message: The message of this PassportElementErrorFile.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def source(self):
        """Gets the source of this PassportElementErrorFile.

        Error source, must be *file*

        :return: The source of this PassportElementErrorFile.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PassportElementErrorFile.

        Error source, must be *file*

        :param source: The source of this PassportElementErrorFile.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def type(self):
        """Gets the type of this PassportElementErrorFile.

        The section of the user's Telegram Passport which has the issue, one of “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”

        :return: The type of this PassportElementErrorFile.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PassportElementErrorFile.

        The section of the user's Telegram Passport which has the issue, one of “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”

        :param type: The type of this PassportElementErrorFile.
        :type type: str
        """
        allowed_values = ["utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
