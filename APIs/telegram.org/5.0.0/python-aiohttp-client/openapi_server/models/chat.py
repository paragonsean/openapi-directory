# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chat_location import ChatLocation
from openapi_server.models.chat_permissions import ChatPermissions
from openapi_server.models.chat_photo import ChatPhoto
from openapi_server.models.message import Message
from openapi_server import util


class Chat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bio: str=None, can_set_sticker_set: bool=None, description: str=None, first_name: str=None, id: int=None, invite_link: str=None, last_name: str=None, linked_chat_id: int=None, location: ChatLocation=None, permissions: ChatPermissions=None, photo: ChatPhoto=None, pinned_message: Message=None, slow_mode_delay: int=None, sticker_set_name: str=None, title: str=None, type: str=None, username: str=None):
        """Chat - a model defined in OpenAPI

        :param bio: The bio of this Chat.
        :param can_set_sticker_set: The can_set_sticker_set of this Chat.
        :param description: The description of this Chat.
        :param first_name: The first_name of this Chat.
        :param id: The id of this Chat.
        :param invite_link: The invite_link of this Chat.
        :param last_name: The last_name of this Chat.
        :param linked_chat_id: The linked_chat_id of this Chat.
        :param location: The location of this Chat.
        :param permissions: The permissions of this Chat.
        :param photo: The photo of this Chat.
        :param pinned_message: The pinned_message of this Chat.
        :param slow_mode_delay: The slow_mode_delay of this Chat.
        :param sticker_set_name: The sticker_set_name of this Chat.
        :param title: The title of this Chat.
        :param type: The type of this Chat.
        :param username: The username of this Chat.
        """
        self.openapi_types = {
            'bio': str,
            'can_set_sticker_set': bool,
            'description': str,
            'first_name': str,
            'id': int,
            'invite_link': str,
            'last_name': str,
            'linked_chat_id': int,
            'location': ChatLocation,
            'permissions': ChatPermissions,
            'photo': ChatPhoto,
            'pinned_message': Message,
            'slow_mode_delay': int,
            'sticker_set_name': str,
            'title': str,
            'type': str,
            'username': str
        }

        self.attribute_map = {
            'bio': 'bio',
            'can_set_sticker_set': 'can_set_sticker_set',
            'description': 'description',
            'first_name': 'first_name',
            'id': 'id',
            'invite_link': 'invite_link',
            'last_name': 'last_name',
            'linked_chat_id': 'linked_chat_id',
            'location': 'location',
            'permissions': 'permissions',
            'photo': 'photo',
            'pinned_message': 'pinned_message',
            'slow_mode_delay': 'slow_mode_delay',
            'sticker_set_name': 'sticker_set_name',
            'title': 'title',
            'type': 'type',
            'username': 'username'
        }

        self._bio = bio
        self._can_set_sticker_set = can_set_sticker_set
        self._description = description
        self._first_name = first_name
        self._id = id
        self._invite_link = invite_link
        self._last_name = last_name
        self._linked_chat_id = linked_chat_id
        self._location = location
        self._permissions = permissions
        self._photo = photo
        self._pinned_message = pinned_message
        self._slow_mode_delay = slow_mode_delay
        self._sticker_set_name = sticker_set_name
        self._title = title
        self._type = type
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Chat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Chat of this Chat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bio(self):
        """Gets the bio of this Chat.

        *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :return: The bio of this Chat.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this Chat.

        *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :param bio: The bio of this Chat.
        :type bio: str
        """

        self._bio = bio

    @property
    def can_set_sticker_set(self):
        """Gets the can_set_sticker_set of this Chat.

        *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :return: The can_set_sticker_set of this Chat.
        :rtype: bool
        """
        return self._can_set_sticker_set

    @can_set_sticker_set.setter
    def can_set_sticker_set(self, can_set_sticker_set):
        """Sets the can_set_sticker_set of this Chat.

        *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :param can_set_sticker_set: The can_set_sticker_set of this Chat.
        :type can_set_sticker_set: bool
        """

        self._can_set_sticker_set = can_set_sticker_set

    @property
    def description(self):
        """Gets the description of this Chat.

        *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :return: The description of this Chat.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Chat.

        *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :param description: The description of this Chat.
        :type description: str
        """

        self._description = description

    @property
    def first_name(self):
        """Gets the first_name of this Chat.

        *Optional*. First name of the other party in a private chat

        :return: The first_name of this Chat.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Chat.

        *Optional*. First name of the other party in a private chat

        :param first_name: The first_name of this Chat.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Chat.

        Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.

        :return: The id of this Chat.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Chat.

        Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.

        :param id: The id of this Chat.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def invite_link(self):
        """Gets the invite_link of this Chat.

        *Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :return: The invite_link of this Chat.
        :rtype: str
        """
        return self._invite_link

    @invite_link.setter
    def invite_link(self, invite_link):
        """Sets the invite_link of this Chat.

        *Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :param invite_link: The invite_link of this Chat.
        :type invite_link: str
        """

        self._invite_link = invite_link

    @property
    def last_name(self):
        """Gets the last_name of this Chat.

        *Optional*. Last name of the other party in a private chat

        :return: The last_name of this Chat.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Chat.

        *Optional*. Last name of the other party in a private chat

        :param last_name: The last_name of this Chat.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def linked_chat_id(self):
        """Gets the linked_chat_id of this Chat.

        *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :return: The linked_chat_id of this Chat.
        :rtype: int
        """
        return self._linked_chat_id

    @linked_chat_id.setter
    def linked_chat_id(self, linked_chat_id):
        """Sets the linked_chat_id of this Chat.

        *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :param linked_chat_id: The linked_chat_id of this Chat.
        :type linked_chat_id: int
        """

        self._linked_chat_id = linked_chat_id

    @property
    def location(self):
        """Gets the location of this Chat.


        :return: The location of this Chat.
        :rtype: ChatLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Chat.


        :param location: The location of this Chat.
        :type location: ChatLocation
        """

        self._location = location

    @property
    def permissions(self):
        """Gets the permissions of this Chat.


        :return: The permissions of this Chat.
        :rtype: ChatPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Chat.


        :param permissions: The permissions of this Chat.
        :type permissions: ChatPermissions
        """

        self._permissions = permissions

    @property
    def photo(self):
        """Gets the photo of this Chat.


        :return: The photo of this Chat.
        :rtype: ChatPhoto
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this Chat.


        :param photo: The photo of this Chat.
        :type photo: ChatPhoto
        """

        self._photo = photo

    @property
    def pinned_message(self):
        """Gets the pinned_message of this Chat.


        :return: The pinned_message of this Chat.
        :rtype: Message
        """
        return self._pinned_message

    @pinned_message.setter
    def pinned_message(self, pinned_message):
        """Sets the pinned_message of this Chat.


        :param pinned_message: The pinned_message of this Chat.
        :type pinned_message: Message
        """

        self._pinned_message = pinned_message

    @property
    def slow_mode_delay(self):
        """Gets the slow_mode_delay of this Chat.

        *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :return: The slow_mode_delay of this Chat.
        :rtype: int
        """
        return self._slow_mode_delay

    @slow_mode_delay.setter
    def slow_mode_delay(self, slow_mode_delay):
        """Sets the slow_mode_delay of this Chat.

        *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :param slow_mode_delay: The slow_mode_delay of this Chat.
        :type slow_mode_delay: int
        """

        self._slow_mode_delay = slow_mode_delay

    @property
    def sticker_set_name(self):
        """Gets the sticker_set_name of this Chat.

        *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :return: The sticker_set_name of this Chat.
        :rtype: str
        """
        return self._sticker_set_name

    @sticker_set_name.setter
    def sticker_set_name(self, sticker_set_name):
        """Sets the sticker_set_name of this Chat.

        *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).

        :param sticker_set_name: The sticker_set_name of this Chat.
        :type sticker_set_name: str
        """

        self._sticker_set_name = sticker_set_name

    @property
    def title(self):
        """Gets the title of this Chat.

        *Optional*. Title, for supergroups, channels and group chats

        :return: The title of this Chat.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Chat.

        *Optional*. Title, for supergroups, channels and group chats

        :param title: The title of this Chat.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Chat.

        Type of chat, can be either “private”, “group”, “supergroup” or “channel”

        :return: The type of this Chat.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Chat.

        Type of chat, can be either “private”, “group”, “supergroup” or “channel”

        :param type: The type of this Chat.
        :type type: str
        """
        allowed_values = ["private", "group", "supergroup", "channel"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """Gets the username of this Chat.

        *Optional*. Username, for private chats, supergroups and channels if available

        :return: The username of this Chat.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Chat.

        *Optional*. Username, for private chats, supergroups and channels if available

        :param username: The username of this Chat.
        :type username: str
        """

        self._username = username
