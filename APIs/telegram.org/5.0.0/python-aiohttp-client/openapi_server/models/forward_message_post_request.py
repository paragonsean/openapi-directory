# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_server.models.copy_message_post_request_from_chat_id import CopyMessagePostRequestFromChatId
from openapi_server import util


class ForwardMessagePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_id: CopyMessagePostRequestChatId=None, disable_notification: bool=None, from_chat_id: CopyMessagePostRequestFromChatId=None, message_id: int=None):
        """ForwardMessagePostRequest - a model defined in OpenAPI

        :param chat_id: The chat_id of this ForwardMessagePostRequest.
        :param disable_notification: The disable_notification of this ForwardMessagePostRequest.
        :param from_chat_id: The from_chat_id of this ForwardMessagePostRequest.
        :param message_id: The message_id of this ForwardMessagePostRequest.
        """
        self.openapi_types = {
            'chat_id': CopyMessagePostRequestChatId,
            'disable_notification': bool,
            'from_chat_id': CopyMessagePostRequestFromChatId,
            'message_id': int
        }

        self.attribute_map = {
            'chat_id': 'chat_id',
            'disable_notification': 'disable_notification',
            'from_chat_id': 'from_chat_id',
            'message_id': 'message_id'
        }

        self._chat_id = chat_id
        self._disable_notification = disable_notification
        self._from_chat_id = from_chat_id
        self._message_id = message_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForwardMessagePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _forwardMessage_post_request of this ForwardMessagePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_id(self):
        """Gets the chat_id of this ForwardMessagePostRequest.


        :return: The chat_id of this ForwardMessagePostRequest.
        :rtype: CopyMessagePostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this ForwardMessagePostRequest.


        :param chat_id: The chat_id of this ForwardMessagePostRequest.
        :type chat_id: CopyMessagePostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def disable_notification(self):
        """Gets the disable_notification of this ForwardMessagePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :return: The disable_notification of this ForwardMessagePostRequest.
        :rtype: bool
        """
        return self._disable_notification

    @disable_notification.setter
    def disable_notification(self, disable_notification):
        """Sets the disable_notification of this ForwardMessagePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :param disable_notification: The disable_notification of this ForwardMessagePostRequest.
        :type disable_notification: bool
        """

        self._disable_notification = disable_notification

    @property
    def from_chat_id(self):
        """Gets the from_chat_id of this ForwardMessagePostRequest.


        :return: The from_chat_id of this ForwardMessagePostRequest.
        :rtype: CopyMessagePostRequestFromChatId
        """
        return self._from_chat_id

    @from_chat_id.setter
    def from_chat_id(self, from_chat_id):
        """Sets the from_chat_id of this ForwardMessagePostRequest.


        :param from_chat_id: The from_chat_id of this ForwardMessagePostRequest.
        :type from_chat_id: CopyMessagePostRequestFromChatId
        """
        if from_chat_id is None:
            raise ValueError("Invalid value for `from_chat_id`, must not be `None`")

        self._from_chat_id = from_chat_id

    @property
    def message_id(self):
        """Gets the message_id of this ForwardMessagePostRequest.

        Message identifier in the chat specified in *from\\_chat\\_id*

        :return: The message_id of this ForwardMessagePostRequest.
        :rtype: int
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this ForwardMessagePostRequest.

        Message identifier in the chat specified in *from\\_chat\\_id*

        :param message_id: The message_id of this ForwardMessagePostRequest.
        :type message_id: int
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")

        self._message_id = message_id
