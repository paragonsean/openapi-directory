# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class MessageEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language: str=None, length: int=None, offset: int=None, type: str=None, url: str=None, user: User=None):
        """MessageEntity - a model defined in OpenAPI

        :param language: The language of this MessageEntity.
        :param length: The length of this MessageEntity.
        :param offset: The offset of this MessageEntity.
        :param type: The type of this MessageEntity.
        :param url: The url of this MessageEntity.
        :param user: The user of this MessageEntity.
        """
        self.openapi_types = {
            'language': str,
            'length': int,
            'offset': int,
            'type': str,
            'url': str,
            'user': User
        }

        self.attribute_map = {
            'language': 'language',
            'length': 'length',
            'offset': 'offset',
            'type': 'type',
            'url': 'url',
            'user': 'user'
        }

        self._language = language
        self._length = length
        self._offset = offset
        self._type = type
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageEntity of this MessageEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language(self):
        """Gets the language of this MessageEntity.

        *Optional*. For “pre” only, the programming language of the entity text

        :return: The language of this MessageEntity.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this MessageEntity.

        *Optional*. For “pre” only, the programming language of the entity text

        :param language: The language of this MessageEntity.
        :type language: str
        """

        self._language = language

    @property
    def length(self):
        """Gets the length of this MessageEntity.

        Length of the entity in UTF-16 code units

        :return: The length of this MessageEntity.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this MessageEntity.

        Length of the entity in UTF-16 code units

        :param length: The length of this MessageEntity.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def offset(self):
        """Gets the offset of this MessageEntity.

        Offset in UTF-16 code units to the start of the entity

        :return: The offset of this MessageEntity.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this MessageEntity.

        Offset in UTF-16 code units to the start of the entity

        :param offset: The offset of this MessageEntity.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def type(self):
        """Gets the type of this MessageEntity.

        Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\\_link” (for clickable text URLs), “text\\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))

        :return: The type of this MessageEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MessageEntity.

        Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\\_link” (for clickable text URLs), “text\\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))

        :param type: The type of this MessageEntity.
        :type type: str
        """
        allowed_values = ["mention", "hashtag", "cashtag", "bot_command", "url", "email", "phone_number", "bold", "italic", "underline", "strikethrough", "code", "pre", "text_link", "text_mention"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this MessageEntity.

        *Optional*. For “text\\_link” only, url that will be opened after user taps on the text

        :return: The url of this MessageEntity.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MessageEntity.

        *Optional*. For “text\\_link” only, url that will be opened after user taps on the text

        :param url: The url of this MessageEntity.
        :type url: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this MessageEntity.


        :return: The user of this MessageEntity.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MessageEntity.


        :param user: The user of this MessageEntity.
        :type user: User
        """

        self._user = user
