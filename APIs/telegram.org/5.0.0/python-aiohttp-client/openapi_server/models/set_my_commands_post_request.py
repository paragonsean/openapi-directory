# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bot_command import BotCommand
from openapi_server import util


class SetMyCommandsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commands: List[BotCommand]=None):
        """SetMyCommandsPostRequest - a model defined in OpenAPI

        :param commands: The commands of this SetMyCommandsPostRequest.
        """
        self.openapi_types = {
            'commands': List[BotCommand]
        }

        self.attribute_map = {
            'commands': 'commands'
        }

        self._commands = commands

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetMyCommandsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _setMyCommands_post_request of this SetMyCommandsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commands(self):
        """Gets the commands of this SetMyCommandsPostRequest.

        A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.

        :return: The commands of this SetMyCommandsPostRequest.
        :rtype: List[BotCommand]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this SetMyCommandsPostRequest.

        A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.

        :param commands: The commands of this SetMyCommandsPostRequest.
        :type commands: List[BotCommand]
        """
        if commands is None:
            raise ValueError("Invalid value for `commands`, must not be `None`")

        self._commands = commands
