# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChatPermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_add_web_page_previews: bool=None, can_change_info: bool=None, can_invite_users: bool=None, can_pin_messages: bool=None, can_send_media_messages: bool=None, can_send_messages: bool=None, can_send_other_messages: bool=None, can_send_polls: bool=None):
        """ChatPermissions - a model defined in OpenAPI

        :param can_add_web_page_previews: The can_add_web_page_previews of this ChatPermissions.
        :param can_change_info: The can_change_info of this ChatPermissions.
        :param can_invite_users: The can_invite_users of this ChatPermissions.
        :param can_pin_messages: The can_pin_messages of this ChatPermissions.
        :param can_send_media_messages: The can_send_media_messages of this ChatPermissions.
        :param can_send_messages: The can_send_messages of this ChatPermissions.
        :param can_send_other_messages: The can_send_other_messages of this ChatPermissions.
        :param can_send_polls: The can_send_polls of this ChatPermissions.
        """
        self.openapi_types = {
            'can_add_web_page_previews': bool,
            'can_change_info': bool,
            'can_invite_users': bool,
            'can_pin_messages': bool,
            'can_send_media_messages': bool,
            'can_send_messages': bool,
            'can_send_other_messages': bool,
            'can_send_polls': bool
        }

        self.attribute_map = {
            'can_add_web_page_previews': 'can_add_web_page_previews',
            'can_change_info': 'can_change_info',
            'can_invite_users': 'can_invite_users',
            'can_pin_messages': 'can_pin_messages',
            'can_send_media_messages': 'can_send_media_messages',
            'can_send_messages': 'can_send_messages',
            'can_send_other_messages': 'can_send_other_messages',
            'can_send_polls': 'can_send_polls'
        }

        self._can_add_web_page_previews = can_add_web_page_previews
        self._can_change_info = can_change_info
        self._can_invite_users = can_invite_users
        self._can_pin_messages = can_pin_messages
        self._can_send_media_messages = can_send_media_messages
        self._can_send_messages = can_send_messages
        self._can_send_other_messages = can_send_other_messages
        self._can_send_polls = can_send_polls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatPermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChatPermissions of this ChatPermissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_add_web_page_previews(self):
        """Gets the can_add_web_page_previews of this ChatPermissions.

        *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\\_send\\_media\\_messages

        :return: The can_add_web_page_previews of this ChatPermissions.
        :rtype: bool
        """
        return self._can_add_web_page_previews

    @can_add_web_page_previews.setter
    def can_add_web_page_previews(self, can_add_web_page_previews):
        """Sets the can_add_web_page_previews of this ChatPermissions.

        *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\\_send\\_media\\_messages

        :param can_add_web_page_previews: The can_add_web_page_previews of this ChatPermissions.
        :type can_add_web_page_previews: bool
        """

        self._can_add_web_page_previews = can_add_web_page_previews

    @property
    def can_change_info(self):
        """Gets the can_change_info of this ChatPermissions.

        *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups

        :return: The can_change_info of this ChatPermissions.
        :rtype: bool
        """
        return self._can_change_info

    @can_change_info.setter
    def can_change_info(self, can_change_info):
        """Sets the can_change_info of this ChatPermissions.

        *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups

        :param can_change_info: The can_change_info of this ChatPermissions.
        :type can_change_info: bool
        """

        self._can_change_info = can_change_info

    @property
    def can_invite_users(self):
        """Gets the can_invite_users of this ChatPermissions.

        *Optional*. True, if the user is allowed to invite new users to the chat

        :return: The can_invite_users of this ChatPermissions.
        :rtype: bool
        """
        return self._can_invite_users

    @can_invite_users.setter
    def can_invite_users(self, can_invite_users):
        """Sets the can_invite_users of this ChatPermissions.

        *Optional*. True, if the user is allowed to invite new users to the chat

        :param can_invite_users: The can_invite_users of this ChatPermissions.
        :type can_invite_users: bool
        """

        self._can_invite_users = can_invite_users

    @property
    def can_pin_messages(self):
        """Gets the can_pin_messages of this ChatPermissions.

        *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups

        :return: The can_pin_messages of this ChatPermissions.
        :rtype: bool
        """
        return self._can_pin_messages

    @can_pin_messages.setter
    def can_pin_messages(self, can_pin_messages):
        """Sets the can_pin_messages of this ChatPermissions.

        *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups

        :param can_pin_messages: The can_pin_messages of this ChatPermissions.
        :type can_pin_messages: bool
        """

        self._can_pin_messages = can_pin_messages

    @property
    def can_send_media_messages(self):
        """Gets the can_send_media_messages of this ChatPermissions.

        *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\\_send\\_messages

        :return: The can_send_media_messages of this ChatPermissions.
        :rtype: bool
        """
        return self._can_send_media_messages

    @can_send_media_messages.setter
    def can_send_media_messages(self, can_send_media_messages):
        """Sets the can_send_media_messages of this ChatPermissions.

        *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\\_send\\_messages

        :param can_send_media_messages: The can_send_media_messages of this ChatPermissions.
        :type can_send_media_messages: bool
        """

        self._can_send_media_messages = can_send_media_messages

    @property
    def can_send_messages(self):
        """Gets the can_send_messages of this ChatPermissions.

        *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues

        :return: The can_send_messages of this ChatPermissions.
        :rtype: bool
        """
        return self._can_send_messages

    @can_send_messages.setter
    def can_send_messages(self, can_send_messages):
        """Sets the can_send_messages of this ChatPermissions.

        *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues

        :param can_send_messages: The can_send_messages of this ChatPermissions.
        :type can_send_messages: bool
        """

        self._can_send_messages = can_send_messages

    @property
    def can_send_other_messages(self):
        """Gets the can_send_other_messages of this ChatPermissions.

        *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\\_send\\_media\\_messages

        :return: The can_send_other_messages of this ChatPermissions.
        :rtype: bool
        """
        return self._can_send_other_messages

    @can_send_other_messages.setter
    def can_send_other_messages(self, can_send_other_messages):
        """Sets the can_send_other_messages of this ChatPermissions.

        *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\\_send\\_media\\_messages

        :param can_send_other_messages: The can_send_other_messages of this ChatPermissions.
        :type can_send_other_messages: bool
        """

        self._can_send_other_messages = can_send_other_messages

    @property
    def can_send_polls(self):
        """Gets the can_send_polls of this ChatPermissions.

        *Optional*. True, if the user is allowed to send polls, implies can\\_send\\_messages

        :return: The can_send_polls of this ChatPermissions.
        :rtype: bool
        """
        return self._can_send_polls

    @can_send_polls.setter
    def can_send_polls(self, can_send_polls):
        """Sets the can_send_polls of this ChatPermissions.

        *Optional*. True, if the user is allowed to send polls, implies can\\_send\\_messages

        :param can_send_polls: The can_send_polls of this ChatPermissions.
        :type can_send_polls: bool
        """

        self._can_send_polls = can_send_polls
