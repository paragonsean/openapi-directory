# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.unban_chat_member_post_request_chat_id import UnbanChatMemberPostRequestChatId
from openapi_server import util


class UnbanChatMemberPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_id: UnbanChatMemberPostRequestChatId=None, only_if_banned: bool=None, user_id: int=None):
        """UnbanChatMemberPostRequest - a model defined in OpenAPI

        :param chat_id: The chat_id of this UnbanChatMemberPostRequest.
        :param only_if_banned: The only_if_banned of this UnbanChatMemberPostRequest.
        :param user_id: The user_id of this UnbanChatMemberPostRequest.
        """
        self.openapi_types = {
            'chat_id': UnbanChatMemberPostRequestChatId,
            'only_if_banned': bool,
            'user_id': int
        }

        self.attribute_map = {
            'chat_id': 'chat_id',
            'only_if_banned': 'only_if_banned',
            'user_id': 'user_id'
        }

        self._chat_id = chat_id
        self._only_if_banned = only_if_banned
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnbanChatMemberPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _unbanChatMember_post_request of this UnbanChatMemberPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_id(self):
        """Gets the chat_id of this UnbanChatMemberPostRequest.


        :return: The chat_id of this UnbanChatMemberPostRequest.
        :rtype: UnbanChatMemberPostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this UnbanChatMemberPostRequest.


        :param chat_id: The chat_id of this UnbanChatMemberPostRequest.
        :type chat_id: UnbanChatMemberPostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def only_if_banned(self):
        """Gets the only_if_banned of this UnbanChatMemberPostRequest.

        Do nothing if the user is not banned

        :return: The only_if_banned of this UnbanChatMemberPostRequest.
        :rtype: bool
        """
        return self._only_if_banned

    @only_if_banned.setter
    def only_if_banned(self, only_if_banned):
        """Sets the only_if_banned of this UnbanChatMemberPostRequest.

        Do nothing if the user is not banned

        :param only_if_banned: The only_if_banned of this UnbanChatMemberPostRequest.
        :type only_if_banned: bool
        """

        self._only_if_banned = only_if_banned

    @property
    def user_id(self):
        """Gets the user_id of this UnbanChatMemberPostRequest.

        Unique identifier of the target user

        :return: The user_id of this UnbanChatMemberPostRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UnbanChatMemberPostRequest.

        Unique identifier of the target user

        :param user_id: The user_id of this UnbanChatMemberPostRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
