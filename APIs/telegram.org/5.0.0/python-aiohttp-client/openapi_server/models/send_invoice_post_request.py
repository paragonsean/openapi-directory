# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server.models.labeled_price import LabeledPrice
from openapi_server import util


class SendInvoicePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_sending_without_reply: bool=None, chat_id: int=None, currency: str=None, description: str=None, disable_notification: bool=None, is_flexible: bool=None, need_email: bool=None, need_name: bool=None, need_phone_number: bool=None, need_shipping_address: bool=None, payload: str=None, photo_height: int=None, photo_size: int=None, photo_url: str=None, photo_width: int=None, prices: List[LabeledPrice]=None, provider_data: str=None, provider_token: str=None, reply_markup: InlineKeyboardMarkup=None, reply_to_message_id: int=None, send_email_to_provider: bool=None, send_phone_number_to_provider: bool=None, start_parameter: str=None, title: str=None):
        """SendInvoicePostRequest - a model defined in OpenAPI

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendInvoicePostRequest.
        :param chat_id: The chat_id of this SendInvoicePostRequest.
        :param currency: The currency of this SendInvoicePostRequest.
        :param description: The description of this SendInvoicePostRequest.
        :param disable_notification: The disable_notification of this SendInvoicePostRequest.
        :param is_flexible: The is_flexible of this SendInvoicePostRequest.
        :param need_email: The need_email of this SendInvoicePostRequest.
        :param need_name: The need_name of this SendInvoicePostRequest.
        :param need_phone_number: The need_phone_number of this SendInvoicePostRequest.
        :param need_shipping_address: The need_shipping_address of this SendInvoicePostRequest.
        :param payload: The payload of this SendInvoicePostRequest.
        :param photo_height: The photo_height of this SendInvoicePostRequest.
        :param photo_size: The photo_size of this SendInvoicePostRequest.
        :param photo_url: The photo_url of this SendInvoicePostRequest.
        :param photo_width: The photo_width of this SendInvoicePostRequest.
        :param prices: The prices of this SendInvoicePostRequest.
        :param provider_data: The provider_data of this SendInvoicePostRequest.
        :param provider_token: The provider_token of this SendInvoicePostRequest.
        :param reply_markup: The reply_markup of this SendInvoicePostRequest.
        :param reply_to_message_id: The reply_to_message_id of this SendInvoicePostRequest.
        :param send_email_to_provider: The send_email_to_provider of this SendInvoicePostRequest.
        :param send_phone_number_to_provider: The send_phone_number_to_provider of this SendInvoicePostRequest.
        :param start_parameter: The start_parameter of this SendInvoicePostRequest.
        :param title: The title of this SendInvoicePostRequest.
        """
        self.openapi_types = {
            'allow_sending_without_reply': bool,
            'chat_id': int,
            'currency': str,
            'description': str,
            'disable_notification': bool,
            'is_flexible': bool,
            'need_email': bool,
            'need_name': bool,
            'need_phone_number': bool,
            'need_shipping_address': bool,
            'payload': str,
            'photo_height': int,
            'photo_size': int,
            'photo_url': str,
            'photo_width': int,
            'prices': List[LabeledPrice],
            'provider_data': str,
            'provider_token': str,
            'reply_markup': InlineKeyboardMarkup,
            'reply_to_message_id': int,
            'send_email_to_provider': bool,
            'send_phone_number_to_provider': bool,
            'start_parameter': str,
            'title': str
        }

        self.attribute_map = {
            'allow_sending_without_reply': 'allow_sending_without_reply',
            'chat_id': 'chat_id',
            'currency': 'currency',
            'description': 'description',
            'disable_notification': 'disable_notification',
            'is_flexible': 'is_flexible',
            'need_email': 'need_email',
            'need_name': 'need_name',
            'need_phone_number': 'need_phone_number',
            'need_shipping_address': 'need_shipping_address',
            'payload': 'payload',
            'photo_height': 'photo_height',
            'photo_size': 'photo_size',
            'photo_url': 'photo_url',
            'photo_width': 'photo_width',
            'prices': 'prices',
            'provider_data': 'provider_data',
            'provider_token': 'provider_token',
            'reply_markup': 'reply_markup',
            'reply_to_message_id': 'reply_to_message_id',
            'send_email_to_provider': 'send_email_to_provider',
            'send_phone_number_to_provider': 'send_phone_number_to_provider',
            'start_parameter': 'start_parameter',
            'title': 'title'
        }

        self._allow_sending_without_reply = allow_sending_without_reply
        self._chat_id = chat_id
        self._currency = currency
        self._description = description
        self._disable_notification = disable_notification
        self._is_flexible = is_flexible
        self._need_email = need_email
        self._need_name = need_name
        self._need_phone_number = need_phone_number
        self._need_shipping_address = need_shipping_address
        self._payload = payload
        self._photo_height = photo_height
        self._photo_size = photo_size
        self._photo_url = photo_url
        self._photo_width = photo_width
        self._prices = prices
        self._provider_data = provider_data
        self._provider_token = provider_token
        self._reply_markup = reply_markup
        self._reply_to_message_id = reply_to_message_id
        self._send_email_to_provider = send_email_to_provider
        self._send_phone_number_to_provider = send_phone_number_to_provider
        self._start_parameter = start_parameter
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendInvoicePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _sendInvoice_post_request of this SendInvoicePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_sending_without_reply(self):
        """Gets the allow_sending_without_reply of this SendInvoicePostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :return: The allow_sending_without_reply of this SendInvoicePostRequest.
        :rtype: bool
        """
        return self._allow_sending_without_reply

    @allow_sending_without_reply.setter
    def allow_sending_without_reply(self, allow_sending_without_reply):
        """Sets the allow_sending_without_reply of this SendInvoicePostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendInvoicePostRequest.
        :type allow_sending_without_reply: bool
        """

        self._allow_sending_without_reply = allow_sending_without_reply

    @property
    def chat_id(self):
        """Gets the chat_id of this SendInvoicePostRequest.

        Unique identifier for the target private chat

        :return: The chat_id of this SendInvoicePostRequest.
        :rtype: int
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SendInvoicePostRequest.

        Unique identifier for the target private chat

        :param chat_id: The chat_id of this SendInvoicePostRequest.
        :type chat_id: int
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def currency(self):
        """Gets the currency of this SendInvoicePostRequest.

        Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)

        :return: The currency of this SendInvoicePostRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SendInvoicePostRequest.

        Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)

        :param currency: The currency of this SendInvoicePostRequest.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this SendInvoicePostRequest.

        Product description, 1-255 characters

        :return: The description of this SendInvoicePostRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SendInvoicePostRequest.

        Product description, 1-255 characters

        :param description: The description of this SendInvoicePostRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def disable_notification(self):
        """Gets the disable_notification of this SendInvoicePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :return: The disable_notification of this SendInvoicePostRequest.
        :rtype: bool
        """
        return self._disable_notification

    @disable_notification.setter
    def disable_notification(self, disable_notification):
        """Sets the disable_notification of this SendInvoicePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :param disable_notification: The disable_notification of this SendInvoicePostRequest.
        :type disable_notification: bool
        """

        self._disable_notification = disable_notification

    @property
    def is_flexible(self):
        """Gets the is_flexible of this SendInvoicePostRequest.

        Pass *True*, if the final price depends on the shipping method

        :return: The is_flexible of this SendInvoicePostRequest.
        :rtype: bool
        """
        return self._is_flexible

    @is_flexible.setter
    def is_flexible(self, is_flexible):
        """Sets the is_flexible of this SendInvoicePostRequest.

        Pass *True*, if the final price depends on the shipping method

        :param is_flexible: The is_flexible of this SendInvoicePostRequest.
        :type is_flexible: bool
        """

        self._is_flexible = is_flexible

    @property
    def need_email(self):
        """Gets the need_email of this SendInvoicePostRequest.

        Pass *True*, if you require the user's email address to complete the order

        :return: The need_email of this SendInvoicePostRequest.
        :rtype: bool
        """
        return self._need_email

    @need_email.setter
    def need_email(self, need_email):
        """Sets the need_email of this SendInvoicePostRequest.

        Pass *True*, if you require the user's email address to complete the order

        :param need_email: The need_email of this SendInvoicePostRequest.
        :type need_email: bool
        """

        self._need_email = need_email

    @property
    def need_name(self):
        """Gets the need_name of this SendInvoicePostRequest.

        Pass *True*, if you require the user's full name to complete the order

        :return: The need_name of this SendInvoicePostRequest.
        :rtype: bool
        """
        return self._need_name

    @need_name.setter
    def need_name(self, need_name):
        """Sets the need_name of this SendInvoicePostRequest.

        Pass *True*, if you require the user's full name to complete the order

        :param need_name: The need_name of this SendInvoicePostRequest.
        :type need_name: bool
        """

        self._need_name = need_name

    @property
    def need_phone_number(self):
        """Gets the need_phone_number of this SendInvoicePostRequest.

        Pass *True*, if you require the user's phone number to complete the order

        :return: The need_phone_number of this SendInvoicePostRequest.
        :rtype: bool
        """
        return self._need_phone_number

    @need_phone_number.setter
    def need_phone_number(self, need_phone_number):
        """Sets the need_phone_number of this SendInvoicePostRequest.

        Pass *True*, if you require the user's phone number to complete the order

        :param need_phone_number: The need_phone_number of this SendInvoicePostRequest.
        :type need_phone_number: bool
        """

        self._need_phone_number = need_phone_number

    @property
    def need_shipping_address(self):
        """Gets the need_shipping_address of this SendInvoicePostRequest.

        Pass *True*, if you require the user's shipping address to complete the order

        :return: The need_shipping_address of this SendInvoicePostRequest.
        :rtype: bool
        """
        return self._need_shipping_address

    @need_shipping_address.setter
    def need_shipping_address(self, need_shipping_address):
        """Sets the need_shipping_address of this SendInvoicePostRequest.

        Pass *True*, if you require the user's shipping address to complete the order

        :param need_shipping_address: The need_shipping_address of this SendInvoicePostRequest.
        :type need_shipping_address: bool
        """

        self._need_shipping_address = need_shipping_address

    @property
    def payload(self):
        """Gets the payload of this SendInvoicePostRequest.

        Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.

        :return: The payload of this SendInvoicePostRequest.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this SendInvoicePostRequest.

        Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.

        :param payload: The payload of this SendInvoicePostRequest.
        :type payload: str
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload

    @property
    def photo_height(self):
        """Gets the photo_height of this SendInvoicePostRequest.

        Photo height

        :return: The photo_height of this SendInvoicePostRequest.
        :rtype: int
        """
        return self._photo_height

    @photo_height.setter
    def photo_height(self, photo_height):
        """Sets the photo_height of this SendInvoicePostRequest.

        Photo height

        :param photo_height: The photo_height of this SendInvoicePostRequest.
        :type photo_height: int
        """

        self._photo_height = photo_height

    @property
    def photo_size(self):
        """Gets the photo_size of this SendInvoicePostRequest.

        Photo size

        :return: The photo_size of this SendInvoicePostRequest.
        :rtype: int
        """
        return self._photo_size

    @photo_size.setter
    def photo_size(self, photo_size):
        """Sets the photo_size of this SendInvoicePostRequest.

        Photo size

        :param photo_size: The photo_size of this SendInvoicePostRequest.
        :type photo_size: int
        """

        self._photo_size = photo_size

    @property
    def photo_url(self):
        """Gets the photo_url of this SendInvoicePostRequest.

        URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.

        :return: The photo_url of this SendInvoicePostRequest.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this SendInvoicePostRequest.

        URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.

        :param photo_url: The photo_url of this SendInvoicePostRequest.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def photo_width(self):
        """Gets the photo_width of this SendInvoicePostRequest.

        Photo width

        :return: The photo_width of this SendInvoicePostRequest.
        :rtype: int
        """
        return self._photo_width

    @photo_width.setter
    def photo_width(self, photo_width):
        """Sets the photo_width of this SendInvoicePostRequest.

        Photo width

        :param photo_width: The photo_width of this SendInvoicePostRequest.
        :type photo_width: int
        """

        self._photo_width = photo_width

    @property
    def prices(self):
        """Gets the prices of this SendInvoicePostRequest.

        Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)

        :return: The prices of this SendInvoicePostRequest.
        :rtype: List[LabeledPrice]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this SendInvoicePostRequest.

        Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)

        :param prices: The prices of this SendInvoicePostRequest.
        :type prices: List[LabeledPrice]
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")

        self._prices = prices

    @property
    def provider_data(self):
        """Gets the provider_data of this SendInvoicePostRequest.

        A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.

        :return: The provider_data of this SendInvoicePostRequest.
        :rtype: str
        """
        return self._provider_data

    @provider_data.setter
    def provider_data(self, provider_data):
        """Sets the provider_data of this SendInvoicePostRequest.

        A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.

        :param provider_data: The provider_data of this SendInvoicePostRequest.
        :type provider_data: str
        """

        self._provider_data = provider_data

    @property
    def provider_token(self):
        """Gets the provider_token of this SendInvoicePostRequest.

        Payments provider token, obtained via [Botfather](https://t.me/botfather)

        :return: The provider_token of this SendInvoicePostRequest.
        :rtype: str
        """
        return self._provider_token

    @provider_token.setter
    def provider_token(self, provider_token):
        """Sets the provider_token of this SendInvoicePostRequest.

        Payments provider token, obtained via [Botfather](https://t.me/botfather)

        :param provider_token: The provider_token of this SendInvoicePostRequest.
        :type provider_token: str
        """
        if provider_token is None:
            raise ValueError("Invalid value for `provider_token`, must not be `None`")

        self._provider_token = provider_token

    @property
    def reply_markup(self):
        """Gets the reply_markup of this SendInvoicePostRequest.


        :return: The reply_markup of this SendInvoicePostRequest.
        :rtype: InlineKeyboardMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this SendInvoicePostRequest.


        :param reply_markup: The reply_markup of this SendInvoicePostRequest.
        :type reply_markup: InlineKeyboardMarkup
        """

        self._reply_markup = reply_markup

    @property
    def reply_to_message_id(self):
        """Gets the reply_to_message_id of this SendInvoicePostRequest.

        If the message is a reply, ID of the original message

        :return: The reply_to_message_id of this SendInvoicePostRequest.
        :rtype: int
        """
        return self._reply_to_message_id

    @reply_to_message_id.setter
    def reply_to_message_id(self, reply_to_message_id):
        """Sets the reply_to_message_id of this SendInvoicePostRequest.

        If the message is a reply, ID of the original message

        :param reply_to_message_id: The reply_to_message_id of this SendInvoicePostRequest.
        :type reply_to_message_id: int
        """

        self._reply_to_message_id = reply_to_message_id

    @property
    def send_email_to_provider(self):
        """Gets the send_email_to_provider of this SendInvoicePostRequest.

        Pass *True*, if user's email address should be sent to provider

        :return: The send_email_to_provider of this SendInvoicePostRequest.
        :rtype: bool
        """
        return self._send_email_to_provider

    @send_email_to_provider.setter
    def send_email_to_provider(self, send_email_to_provider):
        """Sets the send_email_to_provider of this SendInvoicePostRequest.

        Pass *True*, if user's email address should be sent to provider

        :param send_email_to_provider: The send_email_to_provider of this SendInvoicePostRequest.
        :type send_email_to_provider: bool
        """

        self._send_email_to_provider = send_email_to_provider

    @property
    def send_phone_number_to_provider(self):
        """Gets the send_phone_number_to_provider of this SendInvoicePostRequest.

        Pass *True*, if user's phone number should be sent to provider

        :return: The send_phone_number_to_provider of this SendInvoicePostRequest.
        :rtype: bool
        """
        return self._send_phone_number_to_provider

    @send_phone_number_to_provider.setter
    def send_phone_number_to_provider(self, send_phone_number_to_provider):
        """Sets the send_phone_number_to_provider of this SendInvoicePostRequest.

        Pass *True*, if user's phone number should be sent to provider

        :param send_phone_number_to_provider: The send_phone_number_to_provider of this SendInvoicePostRequest.
        :type send_phone_number_to_provider: bool
        """

        self._send_phone_number_to_provider = send_phone_number_to_provider

    @property
    def start_parameter(self):
        """Gets the start_parameter of this SendInvoicePostRequest.

        Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter

        :return: The start_parameter of this SendInvoicePostRequest.
        :rtype: str
        """
        return self._start_parameter

    @start_parameter.setter
    def start_parameter(self, start_parameter):
        """Sets the start_parameter of this SendInvoicePostRequest.

        Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter

        :param start_parameter: The start_parameter of this SendInvoicePostRequest.
        :type start_parameter: str
        """
        if start_parameter is None:
            raise ValueError("Invalid value for `start_parameter`, must not be `None`")

        self._start_parameter = start_parameter

    @property
    def title(self):
        """Gets the title of this SendInvoicePostRequest.

        Product name, 1-32 characters

        :return: The title of this SendInvoicePostRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SendInvoicePostRequest.

        Product name, 1-32 characters

        :param title: The title of this SendInvoicePostRequest.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
