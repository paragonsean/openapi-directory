# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.photo_size import PhotoSize
from openapi_server import util


class Audio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, file_id: str=None, file_name: str=None, file_size: int=None, file_unique_id: str=None, mime_type: str=None, performer: str=None, thumb: PhotoSize=None, title: str=None):
        """Audio - a model defined in OpenAPI

        :param duration: The duration of this Audio.
        :param file_id: The file_id of this Audio.
        :param file_name: The file_name of this Audio.
        :param file_size: The file_size of this Audio.
        :param file_unique_id: The file_unique_id of this Audio.
        :param mime_type: The mime_type of this Audio.
        :param performer: The performer of this Audio.
        :param thumb: The thumb of this Audio.
        :param title: The title of this Audio.
        """
        self.openapi_types = {
            'duration': int,
            'file_id': str,
            'file_name': str,
            'file_size': int,
            'file_unique_id': str,
            'mime_type': str,
            'performer': str,
            'thumb': PhotoSize,
            'title': str
        }

        self.attribute_map = {
            'duration': 'duration',
            'file_id': 'file_id',
            'file_name': 'file_name',
            'file_size': 'file_size',
            'file_unique_id': 'file_unique_id',
            'mime_type': 'mime_type',
            'performer': 'performer',
            'thumb': 'thumb',
            'title': 'title'
        }

        self._duration = duration
        self._file_id = file_id
        self._file_name = file_name
        self._file_size = file_size
        self._file_unique_id = file_unique_id
        self._mime_type = mime_type
        self._performer = performer
        self._thumb = thumb
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Audio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Audio of this Audio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this Audio.

        Duration of the audio in seconds as defined by sender

        :return: The duration of this Audio.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Audio.

        Duration of the audio in seconds as defined by sender

        :param duration: The duration of this Audio.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def file_id(self):
        """Gets the file_id of this Audio.

        Identifier for this file, which can be used to download or reuse the file

        :return: The file_id of this Audio.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Audio.

        Identifier for this file, which can be used to download or reuse the file

        :param file_id: The file_id of this Audio.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_name(self):
        """Gets the file_name of this Audio.

        *Optional*. Original filename as defined by sender

        :return: The file_name of this Audio.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Audio.

        *Optional*. Original filename as defined by sender

        :param file_name: The file_name of this Audio.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this Audio.

        *Optional*. File size

        :return: The file_size of this Audio.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Audio.

        *Optional*. File size

        :param file_size: The file_size of this Audio.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def file_unique_id(self):
        """Gets the file_unique_id of this Audio.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :return: The file_unique_id of this Audio.
        :rtype: str
        """
        return self._file_unique_id

    @file_unique_id.setter
    def file_unique_id(self, file_unique_id):
        """Sets the file_unique_id of this Audio.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :param file_unique_id: The file_unique_id of this Audio.
        :type file_unique_id: str
        """
        if file_unique_id is None:
            raise ValueError("Invalid value for `file_unique_id`, must not be `None`")

        self._file_unique_id = file_unique_id

    @property
    def mime_type(self):
        """Gets the mime_type of this Audio.

        *Optional*. MIME type of the file as defined by sender

        :return: The mime_type of this Audio.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Audio.

        *Optional*. MIME type of the file as defined by sender

        :param mime_type: The mime_type of this Audio.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def performer(self):
        """Gets the performer of this Audio.

        *Optional*. Performer of the audio as defined by sender or by audio tags

        :return: The performer of this Audio.
        :rtype: str
        """
        return self._performer

    @performer.setter
    def performer(self, performer):
        """Sets the performer of this Audio.

        *Optional*. Performer of the audio as defined by sender or by audio tags

        :param performer: The performer of this Audio.
        :type performer: str
        """

        self._performer = performer

    @property
    def thumb(self):
        """Gets the thumb of this Audio.


        :return: The thumb of this Audio.
        :rtype: PhotoSize
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this Audio.


        :param thumb: The thumb of this Audio.
        :type thumb: PhotoSize
        """

        self._thumb = thumb

    @property
    def title(self):
        """Gets the title of this Audio.

        *Optional*. Title of the audio as defined by sender or by audio tags

        :return: The title of this Audio.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Audio.

        *Optional*. Title of the audio as defined by sender or by audio tags

        :param title: The title of this Audio.
        :type title: str
        """

        self._title = title
