# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inline_query_result import InlineQueryResult
from openapi_server import util


class AnswerInlineQueryPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_time: int=300, inline_query_id: str=None, is_personal: bool=None, next_offset: str=None, results: List[InlineQueryResult]=None, switch_pm_parameter: str=None, switch_pm_text: str=None):
        """AnswerInlineQueryPostRequest - a model defined in OpenAPI

        :param cache_time: The cache_time of this AnswerInlineQueryPostRequest.
        :param inline_query_id: The inline_query_id of this AnswerInlineQueryPostRequest.
        :param is_personal: The is_personal of this AnswerInlineQueryPostRequest.
        :param next_offset: The next_offset of this AnswerInlineQueryPostRequest.
        :param results: The results of this AnswerInlineQueryPostRequest.
        :param switch_pm_parameter: The switch_pm_parameter of this AnswerInlineQueryPostRequest.
        :param switch_pm_text: The switch_pm_text of this AnswerInlineQueryPostRequest.
        """
        self.openapi_types = {
            'cache_time': int,
            'inline_query_id': str,
            'is_personal': bool,
            'next_offset': str,
            'results': List[InlineQueryResult],
            'switch_pm_parameter': str,
            'switch_pm_text': str
        }

        self.attribute_map = {
            'cache_time': 'cache_time',
            'inline_query_id': 'inline_query_id',
            'is_personal': 'is_personal',
            'next_offset': 'next_offset',
            'results': 'results',
            'switch_pm_parameter': 'switch_pm_parameter',
            'switch_pm_text': 'switch_pm_text'
        }

        self._cache_time = cache_time
        self._inline_query_id = inline_query_id
        self._is_personal = is_personal
        self._next_offset = next_offset
        self._results = results
        self._switch_pm_parameter = switch_pm_parameter
        self._switch_pm_text = switch_pm_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnswerInlineQueryPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _answerInlineQuery_post_request of this AnswerInlineQueryPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_time(self):
        """Gets the cache_time of this AnswerInlineQueryPostRequest.

        The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.

        :return: The cache_time of this AnswerInlineQueryPostRequest.
        :rtype: int
        """
        return self._cache_time

    @cache_time.setter
    def cache_time(self, cache_time):
        """Sets the cache_time of this AnswerInlineQueryPostRequest.

        The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.

        :param cache_time: The cache_time of this AnswerInlineQueryPostRequest.
        :type cache_time: int
        """

        self._cache_time = cache_time

    @property
    def inline_query_id(self):
        """Gets the inline_query_id of this AnswerInlineQueryPostRequest.

        Unique identifier for the answered query

        :return: The inline_query_id of this AnswerInlineQueryPostRequest.
        :rtype: str
        """
        return self._inline_query_id

    @inline_query_id.setter
    def inline_query_id(self, inline_query_id):
        """Sets the inline_query_id of this AnswerInlineQueryPostRequest.

        Unique identifier for the answered query

        :param inline_query_id: The inline_query_id of this AnswerInlineQueryPostRequest.
        :type inline_query_id: str
        """
        if inline_query_id is None:
            raise ValueError("Invalid value for `inline_query_id`, must not be `None`")

        self._inline_query_id = inline_query_id

    @property
    def is_personal(self):
        """Gets the is_personal of this AnswerInlineQueryPostRequest.

        Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query

        :return: The is_personal of this AnswerInlineQueryPostRequest.
        :rtype: bool
        """
        return self._is_personal

    @is_personal.setter
    def is_personal(self, is_personal):
        """Sets the is_personal of this AnswerInlineQueryPostRequest.

        Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query

        :param is_personal: The is_personal of this AnswerInlineQueryPostRequest.
        :type is_personal: bool
        """

        self._is_personal = is_personal

    @property
    def next_offset(self):
        """Gets the next_offset of this AnswerInlineQueryPostRequest.

        Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.

        :return: The next_offset of this AnswerInlineQueryPostRequest.
        :rtype: str
        """
        return self._next_offset

    @next_offset.setter
    def next_offset(self, next_offset):
        """Sets the next_offset of this AnswerInlineQueryPostRequest.

        Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.

        :param next_offset: The next_offset of this AnswerInlineQueryPostRequest.
        :type next_offset: str
        """

        self._next_offset = next_offset

    @property
    def results(self):
        """Gets the results of this AnswerInlineQueryPostRequest.

        A JSON-serialized array of results for the inline query

        :return: The results of this AnswerInlineQueryPostRequest.
        :rtype: List[InlineQueryResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this AnswerInlineQueryPostRequest.

        A JSON-serialized array of results for the inline query

        :param results: The results of this AnswerInlineQueryPostRequest.
        :type results: List[InlineQueryResult]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results

    @property
    def switch_pm_parameter(self):
        """Gets the switch_pm_parameter of this AnswerInlineQueryPostRequest.

        [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.    *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.

        :return: The switch_pm_parameter of this AnswerInlineQueryPostRequest.
        :rtype: str
        """
        return self._switch_pm_parameter

    @switch_pm_parameter.setter
    def switch_pm_parameter(self, switch_pm_parameter):
        """Sets the switch_pm_parameter of this AnswerInlineQueryPostRequest.

        [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.    *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.

        :param switch_pm_parameter: The switch_pm_parameter of this AnswerInlineQueryPostRequest.
        :type switch_pm_parameter: str
        """

        self._switch_pm_parameter = switch_pm_parameter

    @property
    def switch_pm_text(self):
        """Gets the switch_pm_text of this AnswerInlineQueryPostRequest.

        If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\\_pm\\_parameter*

        :return: The switch_pm_text of this AnswerInlineQueryPostRequest.
        :rtype: str
        """
        return self._switch_pm_text

    @switch_pm_text.setter
    def switch_pm_text(self, switch_pm_text):
        """Sets the switch_pm_text of this AnswerInlineQueryPostRequest.

        If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\\_pm\\_parameter*

        :param switch_pm_text: The switch_pm_text of this AnswerInlineQueryPostRequest.
        :type switch_pm_text: str
        """

        self._switch_pm_text = switch_pm_text
