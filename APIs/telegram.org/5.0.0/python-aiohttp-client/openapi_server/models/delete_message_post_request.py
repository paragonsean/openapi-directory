# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_server import util


class DeleteMessagePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_id: CopyMessagePostRequestChatId=None, message_id: int=None):
        """DeleteMessagePostRequest - a model defined in OpenAPI

        :param chat_id: The chat_id of this DeleteMessagePostRequest.
        :param message_id: The message_id of this DeleteMessagePostRequest.
        """
        self.openapi_types = {
            'chat_id': CopyMessagePostRequestChatId,
            'message_id': int
        }

        self.attribute_map = {
            'chat_id': 'chat_id',
            'message_id': 'message_id'
        }

        self._chat_id = chat_id
        self._message_id = message_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteMessagePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _deleteMessage_post_request of this DeleteMessagePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_id(self):
        """Gets the chat_id of this DeleteMessagePostRequest.


        :return: The chat_id of this DeleteMessagePostRequest.
        :rtype: CopyMessagePostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this DeleteMessagePostRequest.


        :param chat_id: The chat_id of this DeleteMessagePostRequest.
        :type chat_id: CopyMessagePostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def message_id(self):
        """Gets the message_id of this DeleteMessagePostRequest.

        Identifier of the message to delete

        :return: The message_id of this DeleteMessagePostRequest.
        :rtype: int
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this DeleteMessagePostRequest.

        Identifier of the message to delete

        :param message_id: The message_id of this DeleteMessagePostRequest.
        :type message_id: int
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")

        self._message_id = message_id
