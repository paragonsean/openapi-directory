# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mask_position import MaskPosition
from openapi_server.models.photo_size import PhotoSize
from openapi_server import util


class Sticker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emoji: str=None, file_id: str=None, file_size: int=None, file_unique_id: str=None, height: int=None, is_animated: bool=None, mask_position: MaskPosition=None, set_name: str=None, thumb: PhotoSize=None, width: int=None):
        """Sticker - a model defined in OpenAPI

        :param emoji: The emoji of this Sticker.
        :param file_id: The file_id of this Sticker.
        :param file_size: The file_size of this Sticker.
        :param file_unique_id: The file_unique_id of this Sticker.
        :param height: The height of this Sticker.
        :param is_animated: The is_animated of this Sticker.
        :param mask_position: The mask_position of this Sticker.
        :param set_name: The set_name of this Sticker.
        :param thumb: The thumb of this Sticker.
        :param width: The width of this Sticker.
        """
        self.openapi_types = {
            'emoji': str,
            'file_id': str,
            'file_size': int,
            'file_unique_id': str,
            'height': int,
            'is_animated': bool,
            'mask_position': MaskPosition,
            'set_name': str,
            'thumb': PhotoSize,
            'width': int
        }

        self.attribute_map = {
            'emoji': 'emoji',
            'file_id': 'file_id',
            'file_size': 'file_size',
            'file_unique_id': 'file_unique_id',
            'height': 'height',
            'is_animated': 'is_animated',
            'mask_position': 'mask_position',
            'set_name': 'set_name',
            'thumb': 'thumb',
            'width': 'width'
        }

        self._emoji = emoji
        self._file_id = file_id
        self._file_size = file_size
        self._file_unique_id = file_unique_id
        self._height = height
        self._is_animated = is_animated
        self._mask_position = mask_position
        self._set_name = set_name
        self._thumb = thumb
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sticker':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sticker of this Sticker.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emoji(self):
        """Gets the emoji of this Sticker.

        *Optional*. Emoji associated with the sticker

        :return: The emoji of this Sticker.
        :rtype: str
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this Sticker.

        *Optional*. Emoji associated with the sticker

        :param emoji: The emoji of this Sticker.
        :type emoji: str
        """

        self._emoji = emoji

    @property
    def file_id(self):
        """Gets the file_id of this Sticker.

        Identifier for this file, which can be used to download or reuse the file

        :return: The file_id of this Sticker.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Sticker.

        Identifier for this file, which can be used to download or reuse the file

        :param file_id: The file_id of this Sticker.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_size(self):
        """Gets the file_size of this Sticker.

        *Optional*. File size

        :return: The file_size of this Sticker.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Sticker.

        *Optional*. File size

        :param file_size: The file_size of this Sticker.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def file_unique_id(self):
        """Gets the file_unique_id of this Sticker.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :return: The file_unique_id of this Sticker.
        :rtype: str
        """
        return self._file_unique_id

    @file_unique_id.setter
    def file_unique_id(self, file_unique_id):
        """Sets the file_unique_id of this Sticker.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :param file_unique_id: The file_unique_id of this Sticker.
        :type file_unique_id: str
        """
        if file_unique_id is None:
            raise ValueError("Invalid value for `file_unique_id`, must not be `None`")

        self._file_unique_id = file_unique_id

    @property
    def height(self):
        """Gets the height of this Sticker.

        Sticker height

        :return: The height of this Sticker.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Sticker.

        Sticker height

        :param height: The height of this Sticker.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def is_animated(self):
        """Gets the is_animated of this Sticker.

        *True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)

        :return: The is_animated of this Sticker.
        :rtype: bool
        """
        return self._is_animated

    @is_animated.setter
    def is_animated(self, is_animated):
        """Sets the is_animated of this Sticker.

        *True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)

        :param is_animated: The is_animated of this Sticker.
        :type is_animated: bool
        """
        if is_animated is None:
            raise ValueError("Invalid value for `is_animated`, must not be `None`")

        self._is_animated = is_animated

    @property
    def mask_position(self):
        """Gets the mask_position of this Sticker.


        :return: The mask_position of this Sticker.
        :rtype: MaskPosition
        """
        return self._mask_position

    @mask_position.setter
    def mask_position(self, mask_position):
        """Sets the mask_position of this Sticker.


        :param mask_position: The mask_position of this Sticker.
        :type mask_position: MaskPosition
        """

        self._mask_position = mask_position

    @property
    def set_name(self):
        """Gets the set_name of this Sticker.

        *Optional*. Name of the sticker set to which the sticker belongs

        :return: The set_name of this Sticker.
        :rtype: str
        """
        return self._set_name

    @set_name.setter
    def set_name(self, set_name):
        """Sets the set_name of this Sticker.

        *Optional*. Name of the sticker set to which the sticker belongs

        :param set_name: The set_name of this Sticker.
        :type set_name: str
        """

        self._set_name = set_name

    @property
    def thumb(self):
        """Gets the thumb of this Sticker.


        :return: The thumb of this Sticker.
        :rtype: PhotoSize
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this Sticker.


        :param thumb: The thumb of this Sticker.
        :type thumb: PhotoSize
        """

        self._thumb = thumb

    @property
    def width(self):
        """Gets the width of this Sticker.

        Sticker width

        :return: The width of this Sticker.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Sticker.

        Sticker width

        :param width: The width of this Sticker.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
