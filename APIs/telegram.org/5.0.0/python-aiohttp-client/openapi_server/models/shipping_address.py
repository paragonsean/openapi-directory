# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShippingAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country_code: str=None, post_code: str=None, state: str=None, street_line1: str=None, street_line2: str=None):
        """ShippingAddress - a model defined in OpenAPI

        :param city: The city of this ShippingAddress.
        :param country_code: The country_code of this ShippingAddress.
        :param post_code: The post_code of this ShippingAddress.
        :param state: The state of this ShippingAddress.
        :param street_line1: The street_line1 of this ShippingAddress.
        :param street_line2: The street_line2 of this ShippingAddress.
        """
        self.openapi_types = {
            'city': str,
            'country_code': str,
            'post_code': str,
            'state': str,
            'street_line1': str,
            'street_line2': str
        }

        self.attribute_map = {
            'city': 'city',
            'country_code': 'country_code',
            'post_code': 'post_code',
            'state': 'state',
            'street_line1': 'street_line1',
            'street_line2': 'street_line2'
        }

        self._city = city
        self._country_code = country_code
        self._post_code = post_code
        self._state = state
        self._street_line1 = street_line1
        self._street_line2 = street_line2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingAddress of this ShippingAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this ShippingAddress.

        City

        :return: The city of this ShippingAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ShippingAddress.

        City

        :param city: The city of this ShippingAddress.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this ShippingAddress.

        ISO 3166-1 alpha-2 country code

        :return: The country_code of this ShippingAddress.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ShippingAddress.

        ISO 3166-1 alpha-2 country code

        :param country_code: The country_code of this ShippingAddress.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def post_code(self):
        """Gets the post_code of this ShippingAddress.

        Address post code

        :return: The post_code of this ShippingAddress.
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this ShippingAddress.

        Address post code

        :param post_code: The post_code of this ShippingAddress.
        :type post_code: str
        """
        if post_code is None:
            raise ValueError("Invalid value for `post_code`, must not be `None`")

        self._post_code = post_code

    @property
    def state(self):
        """Gets the state of this ShippingAddress.

        State, if applicable

        :return: The state of this ShippingAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ShippingAddress.

        State, if applicable

        :param state: The state of this ShippingAddress.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def street_line1(self):
        """Gets the street_line1 of this ShippingAddress.

        First line for the address

        :return: The street_line1 of this ShippingAddress.
        :rtype: str
        """
        return self._street_line1

    @street_line1.setter
    def street_line1(self, street_line1):
        """Sets the street_line1 of this ShippingAddress.

        First line for the address

        :param street_line1: The street_line1 of this ShippingAddress.
        :type street_line1: str
        """
        if street_line1 is None:
            raise ValueError("Invalid value for `street_line1`, must not be `None`")

        self._street_line1 = street_line1

    @property
    def street_line2(self):
        """Gets the street_line2 of this ShippingAddress.

        Second line for the address

        :return: The street_line2 of this ShippingAddress.
        :rtype: str
        """
        return self._street_line2

    @street_line2.setter
    def street_line2(self, street_line2):
        """Sets the street_line2 of this ShippingAddress.

        Second line for the address

        :param street_line2: The street_line2 of this ShippingAddress.
        :type street_line2: str
        """
        if street_line2 is None:
            raise ValueError("Invalid value for `street_line2`, must not be `None`")

        self._street_line2 = street_line2
