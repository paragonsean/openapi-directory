# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUserProfilePhotosPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit: int=100, offset: int=None, user_id: int=None):
        """GetUserProfilePhotosPostRequest - a model defined in OpenAPI

        :param limit: The limit of this GetUserProfilePhotosPostRequest.
        :param offset: The offset of this GetUserProfilePhotosPostRequest.
        :param user_id: The user_id of this GetUserProfilePhotosPostRequest.
        """
        self.openapi_types = {
            'limit': int,
            'offset': int,
            'user_id': int
        }

        self.attribute_map = {
            'limit': 'limit',
            'offset': 'offset',
            'user_id': 'user_id'
        }

        self._limit = limit
        self._offset = offset
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUserProfilePhotosPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _getUserProfilePhotos_post_request of this GetUserProfilePhotosPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this GetUserProfilePhotosPostRequest.

        Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.

        :return: The limit of this GetUserProfilePhotosPostRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetUserProfilePhotosPostRequest.

        Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.

        :param limit: The limit of this GetUserProfilePhotosPostRequest.
        :type limit: int
        """
        if limit is not None and limit > 100:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this GetUserProfilePhotosPostRequest.

        Sequential number of the first photo to be returned. By default, all photos are returned.

        :return: The offset of this GetUserProfilePhotosPostRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GetUserProfilePhotosPostRequest.

        Sequential number of the first photo to be returned. By default, all photos are returned.

        :param offset: The offset of this GetUserProfilePhotosPostRequest.
        :type offset: int
        """

        self._offset = offset

    @property
    def user_id(self):
        """Gets the user_id of this GetUserProfilePhotosPostRequest.

        Unique identifier of the target user

        :return: The user_id of this GetUserProfilePhotosPostRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetUserProfilePhotosPostRequest.

        Unique identifier of the target user

        :param user_id: The user_id of this GetUserProfilePhotosPostRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
