# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReplyKeyboardRemove(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, remove_keyboard: bool=None, selective: bool=None):
        """ReplyKeyboardRemove - a model defined in OpenAPI

        :param remove_keyboard: The remove_keyboard of this ReplyKeyboardRemove.
        :param selective: The selective of this ReplyKeyboardRemove.
        """
        self.openapi_types = {
            'remove_keyboard': bool,
            'selective': bool
        }

        self.attribute_map = {
            'remove_keyboard': 'remove_keyboard',
            'selective': 'selective'
        }

        self._remove_keyboard = remove_keyboard
        self._selective = selective

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplyKeyboardRemove':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplyKeyboardRemove of this ReplyKeyboardRemove.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def remove_keyboard(self):
        """Gets the remove_keyboard of this ReplyKeyboardRemove.

        Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\\_time\\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))

        :return: The remove_keyboard of this ReplyKeyboardRemove.
        :rtype: bool
        """
        return self._remove_keyboard

    @remove_keyboard.setter
    def remove_keyboard(self, remove_keyboard):
        """Sets the remove_keyboard of this ReplyKeyboardRemove.

        Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\\_time\\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))

        :param remove_keyboard: The remove_keyboard of this ReplyKeyboardRemove.
        :type remove_keyboard: bool
        """
        if remove_keyboard is None:
            raise ValueError("Invalid value for `remove_keyboard`, must not be `None`")

        self._remove_keyboard = remove_keyboard

    @property
    def selective(self):
        """Gets the selective of this ReplyKeyboardRemove.

        *Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.    *Example:* A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.

        :return: The selective of this ReplyKeyboardRemove.
        :rtype: bool
        """
        return self._selective

    @selective.setter
    def selective(self, selective):
        """Sets the selective of this ReplyKeyboardRemove.

        *Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.    *Example:* A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.

        :param selective: The selective of this ReplyKeyboardRemove.
        :type selective: bool
        """

        self._selective = selective
