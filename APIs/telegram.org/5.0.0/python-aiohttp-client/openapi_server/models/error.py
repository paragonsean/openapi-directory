# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.response_parameters import ResponseParameters
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, error_code: int=None, ok: bool=False, parameters: ResponseParameters=None):
        """Error - a model defined in OpenAPI

        :param description: The description of this Error.
        :param error_code: The error_code of this Error.
        :param ok: The ok of this Error.
        :param parameters: The parameters of this Error.
        """
        self.openapi_types = {
            'description': str,
            'error_code': int,
            'ok': bool,
            'parameters': ResponseParameters
        }

        self.attribute_map = {
            'description': 'description',
            'error_code': 'error_code',
            'ok': 'ok',
            'parameters': 'parameters'
        }

        self._description = description
        self._error_code = error_code
        self._ok = ok
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Error.


        :return: The description of this Error.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Error.


        :param description: The description of this Error.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def error_code(self):
        """Gets the error_code of this Error.


        :return: The error_code of this Error.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this Error.


        :param error_code: The error_code of this Error.
        :type error_code: int
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def ok(self):
        """Gets the ok of this Error.


        :return: The ok of this Error.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this Error.


        :param ok: The ok of this Error.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def parameters(self):
        """Gets the parameters of this Error.


        :return: The parameters of this Error.
        :rtype: ResponseParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Error.


        :param parameters: The parameters of this Error.
        :type parameters: ResponseParameters
        """

        self._parameters = parameters
