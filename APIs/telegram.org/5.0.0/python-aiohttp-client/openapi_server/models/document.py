# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.photo_size import PhotoSize
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_id: str=None, file_name: str=None, file_size: int=None, file_unique_id: str=None, mime_type: str=None, thumb: PhotoSize=None):
        """Document - a model defined in OpenAPI

        :param file_id: The file_id of this Document.
        :param file_name: The file_name of this Document.
        :param file_size: The file_size of this Document.
        :param file_unique_id: The file_unique_id of this Document.
        :param mime_type: The mime_type of this Document.
        :param thumb: The thumb of this Document.
        """
        self.openapi_types = {
            'file_id': str,
            'file_name': str,
            'file_size': int,
            'file_unique_id': str,
            'mime_type': str,
            'thumb': PhotoSize
        }

        self.attribute_map = {
            'file_id': 'file_id',
            'file_name': 'file_name',
            'file_size': 'file_size',
            'file_unique_id': 'file_unique_id',
            'mime_type': 'mime_type',
            'thumb': 'thumb'
        }

        self._file_id = file_id
        self._file_name = file_name
        self._file_size = file_size
        self._file_unique_id = file_unique_id
        self._mime_type = mime_type
        self._thumb = thumb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self):
        """Gets the file_id of this Document.

        Identifier for this file, which can be used to download or reuse the file

        :return: The file_id of this Document.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Document.

        Identifier for this file, which can be used to download or reuse the file

        :param file_id: The file_id of this Document.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_name(self):
        """Gets the file_name of this Document.

        *Optional*. Original filename as defined by sender

        :return: The file_name of this Document.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Document.

        *Optional*. Original filename as defined by sender

        :param file_name: The file_name of this Document.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this Document.

        *Optional*. File size

        :return: The file_size of this Document.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Document.

        *Optional*. File size

        :param file_size: The file_size of this Document.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def file_unique_id(self):
        """Gets the file_unique_id of this Document.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :return: The file_unique_id of this Document.
        :rtype: str
        """
        return self._file_unique_id

    @file_unique_id.setter
    def file_unique_id(self, file_unique_id):
        """Sets the file_unique_id of this Document.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :param file_unique_id: The file_unique_id of this Document.
        :type file_unique_id: str
        """
        if file_unique_id is None:
            raise ValueError("Invalid value for `file_unique_id`, must not be `None`")

        self._file_unique_id = file_unique_id

    @property
    def mime_type(self):
        """Gets the mime_type of this Document.

        *Optional*. MIME type of the file as defined by sender

        :return: The mime_type of this Document.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Document.

        *Optional*. MIME type of the file as defined by sender

        :param mime_type: The mime_type of this Document.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def thumb(self):
        """Gets the thumb of this Document.


        :return: The thumb of this Document.
        :rtype: PhotoSize
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this Document.


        :param thumb: The thumb of this Document.
        :type thumb: PhotoSize
        """

        self._thumb = thumb
