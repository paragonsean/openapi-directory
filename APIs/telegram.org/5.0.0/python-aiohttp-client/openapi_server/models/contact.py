# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, last_name: str=None, phone_number: str=None, user_id: int=None, vcard: str=None):
        """Contact - a model defined in OpenAPI

        :param first_name: The first_name of this Contact.
        :param last_name: The last_name of this Contact.
        :param phone_number: The phone_number of this Contact.
        :param user_id: The user_id of this Contact.
        :param vcard: The vcard of this Contact.
        """
        self.openapi_types = {
            'first_name': str,
            'last_name': str,
            'phone_number': str,
            'user_id': int,
            'vcard': str
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'last_name': 'last_name',
            'phone_number': 'phone_number',
            'user_id': 'user_id',
            'vcard': 'vcard'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._phone_number = phone_number
        self._user_id = user_id
        self._vcard = vcard

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this Contact.

        Contact's first name

        :return: The first_name of this Contact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.

        Contact's first name

        :param first_name: The first_name of this Contact.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Contact.

        *Optional*. Contact's last name

        :return: The last_name of this Contact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.

        *Optional*. Contact's last name

        :param last_name: The last_name of this Contact.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this Contact.

        Contact's phone number

        :return: The phone_number of this Contact.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Contact.

        Contact's phone number

        :param phone_number: The phone_number of this Contact.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def user_id(self):
        """Gets the user_id of this Contact.

        *Optional*. Contact's user identifier in Telegram

        :return: The user_id of this Contact.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Contact.

        *Optional*. Contact's user identifier in Telegram

        :param user_id: The user_id of this Contact.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def vcard(self):
        """Gets the vcard of this Contact.

        *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)

        :return: The vcard of this Contact.
        :rtype: str
        """
        return self._vcard

    @vcard.setter
    def vcard(self, vcard):
        """Sets the vcard of this Contact.

        *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)

        :param vcard: The vcard of this Contact.
        :type vcard: str
        """

        self._vcard = vcard
