# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.force_reply import ForceReply
from openapi_server.models.inline_keyboard_button import InlineKeyboardButton
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server.models.keyboard_button import KeyboardButton
from openapi_server.models.reply_keyboard_markup import ReplyKeyboardMarkup
from openapi_server.models.reply_keyboard_remove import ReplyKeyboardRemove
from openapi_server import util


class SendContactPostRequestReplyMarkup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inline_keyboard: List[List[InlineKeyboardButton]]=None, keyboard: List[List[KeyboardButton]]=None, one_time_keyboard: bool=False, resize_keyboard: bool=False, selective: bool=None, remove_keyboard: bool=None, force_reply: bool=None):
        """SendContactPostRequestReplyMarkup - a model defined in OpenAPI

        :param inline_keyboard: The inline_keyboard of this SendContactPostRequestReplyMarkup.
        :param keyboard: The keyboard of this SendContactPostRequestReplyMarkup.
        :param one_time_keyboard: The one_time_keyboard of this SendContactPostRequestReplyMarkup.
        :param resize_keyboard: The resize_keyboard of this SendContactPostRequestReplyMarkup.
        :param selective: The selective of this SendContactPostRequestReplyMarkup.
        :param remove_keyboard: The remove_keyboard of this SendContactPostRequestReplyMarkup.
        :param force_reply: The force_reply of this SendContactPostRequestReplyMarkup.
        """
        self.openapi_types = {
            'inline_keyboard': List[List[InlineKeyboardButton]],
            'keyboard': List[List[KeyboardButton]],
            'one_time_keyboard': bool,
            'resize_keyboard': bool,
            'selective': bool,
            'remove_keyboard': bool,
            'force_reply': bool
        }

        self.attribute_map = {
            'inline_keyboard': 'inline_keyboard',
            'keyboard': 'keyboard',
            'one_time_keyboard': 'one_time_keyboard',
            'resize_keyboard': 'resize_keyboard',
            'selective': 'selective',
            'remove_keyboard': 'remove_keyboard',
            'force_reply': 'force_reply'
        }

        self._inline_keyboard = inline_keyboard
        self._keyboard = keyboard
        self._one_time_keyboard = one_time_keyboard
        self._resize_keyboard = resize_keyboard
        self._selective = selective
        self._remove_keyboard = remove_keyboard
        self._force_reply = force_reply

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendContactPostRequestReplyMarkup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _sendContact_post_request_reply_markup of this SendContactPostRequestReplyMarkup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inline_keyboard(self):
        """Gets the inline_keyboard of this SendContactPostRequestReplyMarkup.

        Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects

        :return: The inline_keyboard of this SendContactPostRequestReplyMarkup.
        :rtype: List[List[InlineKeyboardButton]]
        """
        return self._inline_keyboard

    @inline_keyboard.setter
    def inline_keyboard(self, inline_keyboard):
        """Sets the inline_keyboard of this SendContactPostRequestReplyMarkup.

        Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects

        :param inline_keyboard: The inline_keyboard of this SendContactPostRequestReplyMarkup.
        :type inline_keyboard: List[List[InlineKeyboardButton]]
        """
        if inline_keyboard is None:
            raise ValueError("Invalid value for `inline_keyboard`, must not be `None`")

        self._inline_keyboard = inline_keyboard

    @property
    def keyboard(self):
        """Gets the keyboard of this SendContactPostRequestReplyMarkup.

        Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects

        :return: The keyboard of this SendContactPostRequestReplyMarkup.
        :rtype: List[List[KeyboardButton]]
        """
        return self._keyboard

    @keyboard.setter
    def keyboard(self, keyboard):
        """Sets the keyboard of this SendContactPostRequestReplyMarkup.

        Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects

        :param keyboard: The keyboard of this SendContactPostRequestReplyMarkup.
        :type keyboard: List[List[KeyboardButton]]
        """
        if keyboard is None:
            raise ValueError("Invalid value for `keyboard`, must not be `None`")

        self._keyboard = keyboard

    @property
    def one_time_keyboard(self):
        """Gets the one_time_keyboard of this SendContactPostRequestReplyMarkup.

        *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.

        :return: The one_time_keyboard of this SendContactPostRequestReplyMarkup.
        :rtype: bool
        """
        return self._one_time_keyboard

    @one_time_keyboard.setter
    def one_time_keyboard(self, one_time_keyboard):
        """Sets the one_time_keyboard of this SendContactPostRequestReplyMarkup.

        *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.

        :param one_time_keyboard: The one_time_keyboard of this SendContactPostRequestReplyMarkup.
        :type one_time_keyboard: bool
        """

        self._one_time_keyboard = one_time_keyboard

    @property
    def resize_keyboard(self):
        """Gets the resize_keyboard of this SendContactPostRequestReplyMarkup.

        *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.

        :return: The resize_keyboard of this SendContactPostRequestReplyMarkup.
        :rtype: bool
        """
        return self._resize_keyboard

    @resize_keyboard.setter
    def resize_keyboard(self, resize_keyboard):
        """Sets the resize_keyboard of this SendContactPostRequestReplyMarkup.

        *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.

        :param resize_keyboard: The resize_keyboard of this SendContactPostRequestReplyMarkup.
        :type resize_keyboard: bool
        """

        self._resize_keyboard = resize_keyboard

    @property
    def selective(self):
        """Gets the selective of this SendContactPostRequestReplyMarkup.

        *Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.

        :return: The selective of this SendContactPostRequestReplyMarkup.
        :rtype: bool
        """
        return self._selective

    @selective.setter
    def selective(self, selective):
        """Sets the selective of this SendContactPostRequestReplyMarkup.

        *Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.

        :param selective: The selective of this SendContactPostRequestReplyMarkup.
        :type selective: bool
        """

        self._selective = selective

    @property
    def remove_keyboard(self):
        """Gets the remove_keyboard of this SendContactPostRequestReplyMarkup.

        Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\\_time\\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))

        :return: The remove_keyboard of this SendContactPostRequestReplyMarkup.
        :rtype: bool
        """
        return self._remove_keyboard

    @remove_keyboard.setter
    def remove_keyboard(self, remove_keyboard):
        """Sets the remove_keyboard of this SendContactPostRequestReplyMarkup.

        Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\\_time\\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))

        :param remove_keyboard: The remove_keyboard of this SendContactPostRequestReplyMarkup.
        :type remove_keyboard: bool
        """
        if remove_keyboard is None:
            raise ValueError("Invalid value for `remove_keyboard`, must not be `None`")

        self._remove_keyboard = remove_keyboard

    @property
    def force_reply(self):
        """Gets the force_reply of this SendContactPostRequestReplyMarkup.

        Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'

        :return: The force_reply of this SendContactPostRequestReplyMarkup.
        :rtype: bool
        """
        return self._force_reply

    @force_reply.setter
    def force_reply(self, force_reply):
        """Sets the force_reply of this SendContactPostRequestReplyMarkup.

        Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'

        :param force_reply: The force_reply of this SendContactPostRequestReplyMarkup.
        :type force_reply: bool
        """
        if force_reply is None:
            raise ValueError("Invalid value for `force_reply`, must not be `None`")

        self._force_reply = force_reply
