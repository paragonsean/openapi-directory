# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.passport_file import PassportFile
from openapi_server import util


class EncryptedPassportElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, email: str=None, files: List[PassportFile]=None, front_side: PassportFile=None, hash: str=None, phone_number: str=None, reverse_side: PassportFile=None, selfie: PassportFile=None, translation: List[PassportFile]=None, type: str=None):
        """EncryptedPassportElement - a model defined in OpenAPI

        :param data: The data of this EncryptedPassportElement.
        :param email: The email of this EncryptedPassportElement.
        :param files: The files of this EncryptedPassportElement.
        :param front_side: The front_side of this EncryptedPassportElement.
        :param hash: The hash of this EncryptedPassportElement.
        :param phone_number: The phone_number of this EncryptedPassportElement.
        :param reverse_side: The reverse_side of this EncryptedPassportElement.
        :param selfie: The selfie of this EncryptedPassportElement.
        :param translation: The translation of this EncryptedPassportElement.
        :param type: The type of this EncryptedPassportElement.
        """
        self.openapi_types = {
            'data': str,
            'email': str,
            'files': List[PassportFile],
            'front_side': PassportFile,
            'hash': str,
            'phone_number': str,
            'reverse_side': PassportFile,
            'selfie': PassportFile,
            'translation': List[PassportFile],
            'type': str
        }

        self.attribute_map = {
            'data': 'data',
            'email': 'email',
            'files': 'files',
            'front_side': 'front_side',
            'hash': 'hash',
            'phone_number': 'phone_number',
            'reverse_side': 'reverse_side',
            'selfie': 'selfie',
            'translation': 'translation',
            'type': 'type'
        }

        self._data = data
        self._email = email
        self._files = files
        self._front_side = front_side
        self._hash = hash
        self._phone_number = phone_number
        self._reverse_side = reverse_side
        self._selfie = selfie
        self._translation = translation
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptedPassportElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptedPassportElement of this EncryptedPassportElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this EncryptedPassportElement.

        *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).

        :return: The data of this EncryptedPassportElement.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EncryptedPassportElement.

        *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).

        :param data: The data of this EncryptedPassportElement.
        :type data: str
        """

        self._data = data

    @property
    def email(self):
        """Gets the email of this EncryptedPassportElement.

        *Optional*. User's verified email address, available only for “email” type

        :return: The email of this EncryptedPassportElement.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EncryptedPassportElement.

        *Optional*. User's verified email address, available only for “email” type

        :param email: The email of this EncryptedPassportElement.
        :type email: str
        """

        self._email = email

    @property
    def files(self):
        """Gets the files of this EncryptedPassportElement.

        *Optional*. Array of encrypted files with documents provided by the user, available for “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).

        :return: The files of this EncryptedPassportElement.
        :rtype: List[PassportFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this EncryptedPassportElement.

        *Optional*. Array of encrypted files with documents provided by the user, available for “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).

        :param files: The files of this EncryptedPassportElement.
        :type files: List[PassportFile]
        """

        self._files = files

    @property
    def front_side(self):
        """Gets the front_side of this EncryptedPassportElement.


        :return: The front_side of this EncryptedPassportElement.
        :rtype: PassportFile
        """
        return self._front_side

    @front_side.setter
    def front_side(self, front_side):
        """Sets the front_side of this EncryptedPassportElement.


        :param front_side: The front_side of this EncryptedPassportElement.
        :type front_side: PassportFile
        """

        self._front_side = front_side

    @property
    def hash(self):
        """Gets the hash of this EncryptedPassportElement.

        Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)

        :return: The hash of this EncryptedPassportElement.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this EncryptedPassportElement.

        Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)

        :param hash: The hash of this EncryptedPassportElement.
        :type hash: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")

        self._hash = hash

    @property
    def phone_number(self):
        """Gets the phone_number of this EncryptedPassportElement.

        *Optional*. User's verified phone number, available only for “phone\\_number” type

        :return: The phone_number of this EncryptedPassportElement.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this EncryptedPassportElement.

        *Optional*. User's verified phone number, available only for “phone\\_number” type

        :param phone_number: The phone_number of this EncryptedPassportElement.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def reverse_side(self):
        """Gets the reverse_side of this EncryptedPassportElement.


        :return: The reverse_side of this EncryptedPassportElement.
        :rtype: PassportFile
        """
        return self._reverse_side

    @reverse_side.setter
    def reverse_side(self, reverse_side):
        """Sets the reverse_side of this EncryptedPassportElement.


        :param reverse_side: The reverse_side of this EncryptedPassportElement.
        :type reverse_side: PassportFile
        """

        self._reverse_side = reverse_side

    @property
    def selfie(self):
        """Gets the selfie of this EncryptedPassportElement.


        :return: The selfie of this EncryptedPassportElement.
        :rtype: PassportFile
        """
        return self._selfie

    @selfie.setter
    def selfie(self, selfie):
        """Sets the selfie of this EncryptedPassportElement.


        :param selfie: The selfie of this EncryptedPassportElement.
        :type selfie: PassportFile
        """

        self._selfie = selfie

    @property
    def translation(self):
        """Gets the translation of this EncryptedPassportElement.

        *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).

        :return: The translation of this EncryptedPassportElement.
        :rtype: List[PassportFile]
        """
        return self._translation

    @translation.setter
    def translation(self, translation):
        """Sets the translation of this EncryptedPassportElement.

        *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).

        :param translation: The translation of this EncryptedPassportElement.
        :type translation: List[PassportFile]
        """

        self._translation = translation

    @property
    def type(self):
        """Gets the type of this EncryptedPassportElement.

        Element type. One of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”, “phone\\_number”, “email”.

        :return: The type of this EncryptedPassportElement.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EncryptedPassportElement.

        Element type. One of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”, “phone\\_number”, “email”.

        :param type: The type of this EncryptedPassportElement.
        :type type: str
        """
        allowed_values = ["personal_details", "passport", "driver_license", "identity_card", "internal_passport", "address", "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration", "phone_number", "email"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
