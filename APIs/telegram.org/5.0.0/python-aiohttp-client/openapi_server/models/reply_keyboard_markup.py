# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.keyboard_button import KeyboardButton
from openapi_server import util


class ReplyKeyboardMarkup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keyboard: List[List[KeyboardButton]]=None, one_time_keyboard: bool=False, resize_keyboard: bool=False, selective: bool=None):
        """ReplyKeyboardMarkup - a model defined in OpenAPI

        :param keyboard: The keyboard of this ReplyKeyboardMarkup.
        :param one_time_keyboard: The one_time_keyboard of this ReplyKeyboardMarkup.
        :param resize_keyboard: The resize_keyboard of this ReplyKeyboardMarkup.
        :param selective: The selective of this ReplyKeyboardMarkup.
        """
        self.openapi_types = {
            'keyboard': List[List[KeyboardButton]],
            'one_time_keyboard': bool,
            'resize_keyboard': bool,
            'selective': bool
        }

        self.attribute_map = {
            'keyboard': 'keyboard',
            'one_time_keyboard': 'one_time_keyboard',
            'resize_keyboard': 'resize_keyboard',
            'selective': 'selective'
        }

        self._keyboard = keyboard
        self._one_time_keyboard = one_time_keyboard
        self._resize_keyboard = resize_keyboard
        self._selective = selective

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplyKeyboardMarkup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplyKeyboardMarkup of this ReplyKeyboardMarkup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keyboard(self):
        """Gets the keyboard of this ReplyKeyboardMarkup.

        Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects

        :return: The keyboard of this ReplyKeyboardMarkup.
        :rtype: List[List[KeyboardButton]]
        """
        return self._keyboard

    @keyboard.setter
    def keyboard(self, keyboard):
        """Sets the keyboard of this ReplyKeyboardMarkup.

        Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects

        :param keyboard: The keyboard of this ReplyKeyboardMarkup.
        :type keyboard: List[List[KeyboardButton]]
        """
        if keyboard is None:
            raise ValueError("Invalid value for `keyboard`, must not be `None`")

        self._keyboard = keyboard

    @property
    def one_time_keyboard(self):
        """Gets the one_time_keyboard of this ReplyKeyboardMarkup.

        *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.

        :return: The one_time_keyboard of this ReplyKeyboardMarkup.
        :rtype: bool
        """
        return self._one_time_keyboard

    @one_time_keyboard.setter
    def one_time_keyboard(self, one_time_keyboard):
        """Sets the one_time_keyboard of this ReplyKeyboardMarkup.

        *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.

        :param one_time_keyboard: The one_time_keyboard of this ReplyKeyboardMarkup.
        :type one_time_keyboard: bool
        """

        self._one_time_keyboard = one_time_keyboard

    @property
    def resize_keyboard(self):
        """Gets the resize_keyboard of this ReplyKeyboardMarkup.

        *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.

        :return: The resize_keyboard of this ReplyKeyboardMarkup.
        :rtype: bool
        """
        return self._resize_keyboard

    @resize_keyboard.setter
    def resize_keyboard(self, resize_keyboard):
        """Sets the resize_keyboard of this ReplyKeyboardMarkup.

        *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.

        :param resize_keyboard: The resize_keyboard of this ReplyKeyboardMarkup.
        :type resize_keyboard: bool
        """

        self._resize_keyboard = resize_keyboard

    @property
    def selective(self):
        """Gets the selective of this ReplyKeyboardMarkup.

        *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.    *Example:* A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.

        :return: The selective of this ReplyKeyboardMarkup.
        :rtype: bool
        """
        return self._selective

    @selective.setter
    def selective(self, selective):
        """Sets the selective of this ReplyKeyboardMarkup.

        *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.    *Example:* A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.

        :param selective: The selective of this ReplyKeyboardMarkup.
        :type selective: bool
        """

        self._selective = selective
