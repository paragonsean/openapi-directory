# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.passport_element_error import PassportElementError
from openapi_server import util


class SetPassportDataErrorsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[PassportElementError]=None, user_id: int=None):
        """SetPassportDataErrorsPostRequest - a model defined in OpenAPI

        :param errors: The errors of this SetPassportDataErrorsPostRequest.
        :param user_id: The user_id of this SetPassportDataErrorsPostRequest.
        """
        self.openapi_types = {
            'errors': List[PassportElementError],
            'user_id': int
        }

        self.attribute_map = {
            'errors': 'errors',
            'user_id': 'user_id'
        }

        self._errors = errors
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetPassportDataErrorsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _setPassportDataErrors_post_request of this SetPassportDataErrorsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this SetPassportDataErrorsPostRequest.

        A JSON-serialized array describing the errors

        :return: The errors of this SetPassportDataErrorsPostRequest.
        :rtype: List[PassportElementError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SetPassportDataErrorsPostRequest.

        A JSON-serialized array describing the errors

        :param errors: The errors of this SetPassportDataErrorsPostRequest.
        :type errors: List[PassportElementError]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def user_id(self):
        """Gets the user_id of this SetPassportDataErrorsPostRequest.

        User identifier

        :return: The user_id of this SetPassportDataErrorsPostRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SetPassportDataErrorsPostRequest.

        User identifier

        :param user_id: The user_id of this SetPassportDataErrorsPostRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
