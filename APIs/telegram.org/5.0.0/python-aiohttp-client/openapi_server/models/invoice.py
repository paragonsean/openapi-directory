# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Invoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, description: str=None, start_parameter: str=None, title: str=None, total_amount: int=None):
        """Invoice - a model defined in OpenAPI

        :param currency: The currency of this Invoice.
        :param description: The description of this Invoice.
        :param start_parameter: The start_parameter of this Invoice.
        :param title: The title of this Invoice.
        :param total_amount: The total_amount of this Invoice.
        """
        self.openapi_types = {
            'currency': str,
            'description': str,
            'start_parameter': str,
            'title': str,
            'total_amount': int
        }

        self.attribute_map = {
            'currency': 'currency',
            'description': 'description',
            'start_parameter': 'start_parameter',
            'title': 'title',
            'total_amount': 'total_amount'
        }

        self._currency = currency
        self._description = description
        self._start_parameter = start_parameter
        self._title = title
        self._total_amount = total_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invoice of this Invoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this Invoice.

        Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code

        :return: The currency of this Invoice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Invoice.

        Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code

        :param currency: The currency of this Invoice.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this Invoice.

        Product description

        :return: The description of this Invoice.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Invoice.

        Product description

        :param description: The description of this Invoice.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def start_parameter(self):
        """Gets the start_parameter of this Invoice.

        Unique bot deep-linking parameter that can be used to generate this invoice

        :return: The start_parameter of this Invoice.
        :rtype: str
        """
        return self._start_parameter

    @start_parameter.setter
    def start_parameter(self, start_parameter):
        """Sets the start_parameter of this Invoice.

        Unique bot deep-linking parameter that can be used to generate this invoice

        :param start_parameter: The start_parameter of this Invoice.
        :type start_parameter: str
        """
        if start_parameter is None:
            raise ValueError("Invalid value for `start_parameter`, must not be `None`")

        self._start_parameter = start_parameter

    @property
    def title(self):
        """Gets the title of this Invoice.

        Product name

        :return: The title of this Invoice.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Invoice.

        Product name

        :param title: The title of this Invoice.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def total_amount(self):
        """Gets the total_amount of this Invoice.

        Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).

        :return: The total_amount of this Invoice.
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Invoice.

        Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).

        :param total_amount: The total_amount of this Invoice.
        :type total_amount: int
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")

        self._total_amount = total_amount
