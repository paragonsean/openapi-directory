# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.labeled_price import LabeledPrice
from openapi_server import util


class ShippingOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, prices: List[LabeledPrice]=None, title: str=None):
        """ShippingOption - a model defined in OpenAPI

        :param id: The id of this ShippingOption.
        :param prices: The prices of this ShippingOption.
        :param title: The title of this ShippingOption.
        """
        self.openapi_types = {
            'id': str,
            'prices': List[LabeledPrice],
            'title': str
        }

        self.attribute_map = {
            'id': 'id',
            'prices': 'prices',
            'title': 'title'
        }

        self._id = id
        self._prices = prices
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingOption of this ShippingOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ShippingOption.

        Shipping option identifier

        :return: The id of this ShippingOption.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShippingOption.

        Shipping option identifier

        :param id: The id of this ShippingOption.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def prices(self):
        """Gets the prices of this ShippingOption.

        List of price portions

        :return: The prices of this ShippingOption.
        :rtype: List[LabeledPrice]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this ShippingOption.

        List of price portions

        :param prices: The prices of this ShippingOption.
        :type prices: List[LabeledPrice]
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")

        self._prices = prices

    @property
    def title(self):
        """Gets the title of this ShippingOption.

        Option title

        :return: The title of this ShippingOption.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ShippingOption.

        Option title

        :param title: The title of this ShippingOption.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
