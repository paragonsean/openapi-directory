# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server.models.inline_query_result_article import InlineQueryResultArticle
from openapi_server.models.inline_query_result_audio import InlineQueryResultAudio
from openapi_server.models.inline_query_result_cached_audio import InlineQueryResultCachedAudio
from openapi_server.models.inline_query_result_cached_document import InlineQueryResultCachedDocument
from openapi_server.models.inline_query_result_cached_gif import InlineQueryResultCachedGif
from openapi_server.models.inline_query_result_cached_mpeg4_gif import InlineQueryResultCachedMpeg4Gif
from openapi_server.models.inline_query_result_cached_photo import InlineQueryResultCachedPhoto
from openapi_server.models.inline_query_result_cached_sticker import InlineQueryResultCachedSticker
from openapi_server.models.inline_query_result_cached_video import InlineQueryResultCachedVideo
from openapi_server.models.inline_query_result_cached_voice import InlineQueryResultCachedVoice
from openapi_server.models.inline_query_result_contact import InlineQueryResultContact
from openapi_server.models.inline_query_result_document import InlineQueryResultDocument
from openapi_server.models.inline_query_result_game import InlineQueryResultGame
from openapi_server.models.inline_query_result_gif import InlineQueryResultGif
from openapi_server.models.inline_query_result_location import InlineQueryResultLocation
from openapi_server.models.inline_query_result_mpeg4_gif import InlineQueryResultMpeg4Gif
from openapi_server.models.inline_query_result_photo import InlineQueryResultPhoto
from openapi_server.models.inline_query_result_venue import InlineQueryResultVenue
from openapi_server.models.inline_query_result_video import InlineQueryResultVideo
from openapi_server.models.inline_query_result_voice import InlineQueryResultVoice
from openapi_server.models.input_message_content import InputMessageContent
from openapi_server.models.message_entity import MessageEntity
from openapi_server import util


class InlineQueryResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_file_id: str=None, caption: str=None, caption_entities: List[MessageEntity]=None, id: str=None, input_message_content: InputMessageContent=None, parse_mode: str=None, reply_markup: InlineKeyboardMarkup=None, type: str=None, description: str=None, document_file_id: str=None, title: str=None, gif_file_id: str=None, mpeg4_file_id: str=None, photo_file_id: str=None, sticker_file_id: str=None, video_file_id: str=None, voice_file_id: str=None, hide_url: bool=None, thumb_height: int=None, thumb_url: str=None, thumb_width: int=None, url: str=None, audio_duration: int=None, audio_url: str=None, performer: str=None, first_name: str=None, last_name: str=None, phone_number: str=None, vcard: str=None, game_short_name: str=None, document_url: str=None, mime_type: str=None, gif_duration: int=None, gif_height: int=None, gif_url: str=None, gif_width: int=None, thumb_mime_type: str='image/jpeg', heading: int=None, horizontal_accuracy: float=None, latitude: float=None, live_period: int=None, longitude: float=None, proximity_alert_radius: int=None, mpeg4_duration: int=None, mpeg4_height: int=None, mpeg4_url: str=None, mpeg4_width: int=None, photo_height: int=None, photo_url: str=None, photo_width: int=None, address: str=None, foursquare_id: str=None, foursquare_type: str=None, google_place_id: str=None, google_place_type: str=None, video_duration: int=None, video_height: int=None, video_url: str=None, video_width: int=None, voice_duration: int=None, voice_url: str=None):
        """InlineQueryResult - a model defined in OpenAPI

        :param audio_file_id: The audio_file_id of this InlineQueryResult.
        :param caption: The caption of this InlineQueryResult.
        :param caption_entities: The caption_entities of this InlineQueryResult.
        :param id: The id of this InlineQueryResult.
        :param input_message_content: The input_message_content of this InlineQueryResult.
        :param parse_mode: The parse_mode of this InlineQueryResult.
        :param reply_markup: The reply_markup of this InlineQueryResult.
        :param type: The type of this InlineQueryResult.
        :param description: The description of this InlineQueryResult.
        :param document_file_id: The document_file_id of this InlineQueryResult.
        :param title: The title of this InlineQueryResult.
        :param gif_file_id: The gif_file_id of this InlineQueryResult.
        :param mpeg4_file_id: The mpeg4_file_id of this InlineQueryResult.
        :param photo_file_id: The photo_file_id of this InlineQueryResult.
        :param sticker_file_id: The sticker_file_id of this InlineQueryResult.
        :param video_file_id: The video_file_id of this InlineQueryResult.
        :param voice_file_id: The voice_file_id of this InlineQueryResult.
        :param hide_url: The hide_url of this InlineQueryResult.
        :param thumb_height: The thumb_height of this InlineQueryResult.
        :param thumb_url: The thumb_url of this InlineQueryResult.
        :param thumb_width: The thumb_width of this InlineQueryResult.
        :param url: The url of this InlineQueryResult.
        :param audio_duration: The audio_duration of this InlineQueryResult.
        :param audio_url: The audio_url of this InlineQueryResult.
        :param performer: The performer of this InlineQueryResult.
        :param first_name: The first_name of this InlineQueryResult.
        :param last_name: The last_name of this InlineQueryResult.
        :param phone_number: The phone_number of this InlineQueryResult.
        :param vcard: The vcard of this InlineQueryResult.
        :param game_short_name: The game_short_name of this InlineQueryResult.
        :param document_url: The document_url of this InlineQueryResult.
        :param mime_type: The mime_type of this InlineQueryResult.
        :param gif_duration: The gif_duration of this InlineQueryResult.
        :param gif_height: The gif_height of this InlineQueryResult.
        :param gif_url: The gif_url of this InlineQueryResult.
        :param gif_width: The gif_width of this InlineQueryResult.
        :param thumb_mime_type: The thumb_mime_type of this InlineQueryResult.
        :param heading: The heading of this InlineQueryResult.
        :param horizontal_accuracy: The horizontal_accuracy of this InlineQueryResult.
        :param latitude: The latitude of this InlineQueryResult.
        :param live_period: The live_period of this InlineQueryResult.
        :param longitude: The longitude of this InlineQueryResult.
        :param proximity_alert_radius: The proximity_alert_radius of this InlineQueryResult.
        :param mpeg4_duration: The mpeg4_duration of this InlineQueryResult.
        :param mpeg4_height: The mpeg4_height of this InlineQueryResult.
        :param mpeg4_url: The mpeg4_url of this InlineQueryResult.
        :param mpeg4_width: The mpeg4_width of this InlineQueryResult.
        :param photo_height: The photo_height of this InlineQueryResult.
        :param photo_url: The photo_url of this InlineQueryResult.
        :param photo_width: The photo_width of this InlineQueryResult.
        :param address: The address of this InlineQueryResult.
        :param foursquare_id: The foursquare_id of this InlineQueryResult.
        :param foursquare_type: The foursquare_type of this InlineQueryResult.
        :param google_place_id: The google_place_id of this InlineQueryResult.
        :param google_place_type: The google_place_type of this InlineQueryResult.
        :param video_duration: The video_duration of this InlineQueryResult.
        :param video_height: The video_height of this InlineQueryResult.
        :param video_url: The video_url of this InlineQueryResult.
        :param video_width: The video_width of this InlineQueryResult.
        :param voice_duration: The voice_duration of this InlineQueryResult.
        :param voice_url: The voice_url of this InlineQueryResult.
        """
        self.openapi_types = {
            'audio_file_id': str,
            'caption': str,
            'caption_entities': List[MessageEntity],
            'id': str,
            'input_message_content': InputMessageContent,
            'parse_mode': str,
            'reply_markup': InlineKeyboardMarkup,
            'type': str,
            'description': str,
            'document_file_id': str,
            'title': str,
            'gif_file_id': str,
            'mpeg4_file_id': str,
            'photo_file_id': str,
            'sticker_file_id': str,
            'video_file_id': str,
            'voice_file_id': str,
            'hide_url': bool,
            'thumb_height': int,
            'thumb_url': str,
            'thumb_width': int,
            'url': str,
            'audio_duration': int,
            'audio_url': str,
            'performer': str,
            'first_name': str,
            'last_name': str,
            'phone_number': str,
            'vcard': str,
            'game_short_name': str,
            'document_url': str,
            'mime_type': str,
            'gif_duration': int,
            'gif_height': int,
            'gif_url': str,
            'gif_width': int,
            'thumb_mime_type': str,
            'heading': int,
            'horizontal_accuracy': float,
            'latitude': float,
            'live_period': int,
            'longitude': float,
            'proximity_alert_radius': int,
            'mpeg4_duration': int,
            'mpeg4_height': int,
            'mpeg4_url': str,
            'mpeg4_width': int,
            'photo_height': int,
            'photo_url': str,
            'photo_width': int,
            'address': str,
            'foursquare_id': str,
            'foursquare_type': str,
            'google_place_id': str,
            'google_place_type': str,
            'video_duration': int,
            'video_height': int,
            'video_url': str,
            'video_width': int,
            'voice_duration': int,
            'voice_url': str
        }

        self.attribute_map = {
            'audio_file_id': 'audio_file_id',
            'caption': 'caption',
            'caption_entities': 'caption_entities',
            'id': 'id',
            'input_message_content': 'input_message_content',
            'parse_mode': 'parse_mode',
            'reply_markup': 'reply_markup',
            'type': 'type',
            'description': 'description',
            'document_file_id': 'document_file_id',
            'title': 'title',
            'gif_file_id': 'gif_file_id',
            'mpeg4_file_id': 'mpeg4_file_id',
            'photo_file_id': 'photo_file_id',
            'sticker_file_id': 'sticker_file_id',
            'video_file_id': 'video_file_id',
            'voice_file_id': 'voice_file_id',
            'hide_url': 'hide_url',
            'thumb_height': 'thumb_height',
            'thumb_url': 'thumb_url',
            'thumb_width': 'thumb_width',
            'url': 'url',
            'audio_duration': 'audio_duration',
            'audio_url': 'audio_url',
            'performer': 'performer',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'phone_number': 'phone_number',
            'vcard': 'vcard',
            'game_short_name': 'game_short_name',
            'document_url': 'document_url',
            'mime_type': 'mime_type',
            'gif_duration': 'gif_duration',
            'gif_height': 'gif_height',
            'gif_url': 'gif_url',
            'gif_width': 'gif_width',
            'thumb_mime_type': 'thumb_mime_type',
            'heading': 'heading',
            'horizontal_accuracy': 'horizontal_accuracy',
            'latitude': 'latitude',
            'live_period': 'live_period',
            'longitude': 'longitude',
            'proximity_alert_radius': 'proximity_alert_radius',
            'mpeg4_duration': 'mpeg4_duration',
            'mpeg4_height': 'mpeg4_height',
            'mpeg4_url': 'mpeg4_url',
            'mpeg4_width': 'mpeg4_width',
            'photo_height': 'photo_height',
            'photo_url': 'photo_url',
            'photo_width': 'photo_width',
            'address': 'address',
            'foursquare_id': 'foursquare_id',
            'foursquare_type': 'foursquare_type',
            'google_place_id': 'google_place_id',
            'google_place_type': 'google_place_type',
            'video_duration': 'video_duration',
            'video_height': 'video_height',
            'video_url': 'video_url',
            'video_width': 'video_width',
            'voice_duration': 'voice_duration',
            'voice_url': 'voice_url'
        }

        self._audio_file_id = audio_file_id
        self._caption = caption
        self._caption_entities = caption_entities
        self._id = id
        self._input_message_content = input_message_content
        self._parse_mode = parse_mode
        self._reply_markup = reply_markup
        self._type = type
        self._description = description
        self._document_file_id = document_file_id
        self._title = title
        self._gif_file_id = gif_file_id
        self._mpeg4_file_id = mpeg4_file_id
        self._photo_file_id = photo_file_id
        self._sticker_file_id = sticker_file_id
        self._video_file_id = video_file_id
        self._voice_file_id = voice_file_id
        self._hide_url = hide_url
        self._thumb_height = thumb_height
        self._thumb_url = thumb_url
        self._thumb_width = thumb_width
        self._url = url
        self._audio_duration = audio_duration
        self._audio_url = audio_url
        self._performer = performer
        self._first_name = first_name
        self._last_name = last_name
        self._phone_number = phone_number
        self._vcard = vcard
        self._game_short_name = game_short_name
        self._document_url = document_url
        self._mime_type = mime_type
        self._gif_duration = gif_duration
        self._gif_height = gif_height
        self._gif_url = gif_url
        self._gif_width = gif_width
        self._thumb_mime_type = thumb_mime_type
        self._heading = heading
        self._horizontal_accuracy = horizontal_accuracy
        self._latitude = latitude
        self._live_period = live_period
        self._longitude = longitude
        self._proximity_alert_radius = proximity_alert_radius
        self._mpeg4_duration = mpeg4_duration
        self._mpeg4_height = mpeg4_height
        self._mpeg4_url = mpeg4_url
        self._mpeg4_width = mpeg4_width
        self._photo_height = photo_height
        self._photo_url = photo_url
        self._photo_width = photo_width
        self._address = address
        self._foursquare_id = foursquare_id
        self._foursquare_type = foursquare_type
        self._google_place_id = google_place_id
        self._google_place_type = google_place_type
        self._video_duration = video_duration
        self._video_height = video_height
        self._video_url = video_url
        self._video_width = video_width
        self._voice_duration = voice_duration
        self._voice_url = voice_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineQueryResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InlineQueryResult of this InlineQueryResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_file_id(self):
        """Gets the audio_file_id of this InlineQueryResult.

        A valid file identifier for the audio file

        :return: The audio_file_id of this InlineQueryResult.
        :rtype: str
        """
        return self._audio_file_id

    @audio_file_id.setter
    def audio_file_id(self, audio_file_id):
        """Sets the audio_file_id of this InlineQueryResult.

        A valid file identifier for the audio file

        :param audio_file_id: The audio_file_id of this InlineQueryResult.
        :type audio_file_id: str
        """
        if audio_file_id is None:
            raise ValueError("Invalid value for `audio_file_id`, must not be `None`")

        self._audio_file_id = audio_file_id

    @property
    def caption(self):
        """Gets the caption of this InlineQueryResult.

        *Optional*. Caption, 0-1024 characters after entities parsing

        :return: The caption of this InlineQueryResult.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this InlineQueryResult.

        *Optional*. Caption, 0-1024 characters after entities parsing

        :param caption: The caption of this InlineQueryResult.
        :type caption: str
        """

        self._caption = caption

    @property
    def caption_entities(self):
        """Gets the caption_entities of this InlineQueryResult.

        *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*

        :return: The caption_entities of this InlineQueryResult.
        :rtype: List[MessageEntity]
        """
        return self._caption_entities

    @caption_entities.setter
    def caption_entities(self, caption_entities):
        """Sets the caption_entities of this InlineQueryResult.

        *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*

        :param caption_entities: The caption_entities of this InlineQueryResult.
        :type caption_entities: List[MessageEntity]
        """

        self._caption_entities = caption_entities

    @property
    def id(self):
        """Gets the id of this InlineQueryResult.

        Unique identifier for this result, 1-64 bytes

        :return: The id of this InlineQueryResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineQueryResult.

        Unique identifier for this result, 1-64 bytes

        :param id: The id of this InlineQueryResult.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def input_message_content(self):
        """Gets the input_message_content of this InlineQueryResult.


        :return: The input_message_content of this InlineQueryResult.
        :rtype: InputMessageContent
        """
        return self._input_message_content

    @input_message_content.setter
    def input_message_content(self, input_message_content):
        """Sets the input_message_content of this InlineQueryResult.


        :param input_message_content: The input_message_content of this InlineQueryResult.
        :type input_message_content: InputMessageContent
        """
        if input_message_content is None:
            raise ValueError("Invalid value for `input_message_content`, must not be `None`")

        self._input_message_content = input_message_content

    @property
    def parse_mode(self):
        """Gets the parse_mode of this InlineQueryResult.

        *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :return: The parse_mode of this InlineQueryResult.
        :rtype: str
        """
        return self._parse_mode

    @parse_mode.setter
    def parse_mode(self, parse_mode):
        """Sets the parse_mode of this InlineQueryResult.

        *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :param parse_mode: The parse_mode of this InlineQueryResult.
        :type parse_mode: str
        """

        self._parse_mode = parse_mode

    @property
    def reply_markup(self):
        """Gets the reply_markup of this InlineQueryResult.


        :return: The reply_markup of this InlineQueryResult.
        :rtype: InlineKeyboardMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this InlineQueryResult.


        :param reply_markup: The reply_markup of this InlineQueryResult.
        :type reply_markup: InlineKeyboardMarkup
        """

        self._reply_markup = reply_markup

    @property
    def type(self):
        """Gets the type of this InlineQueryResult.

        Type of the result, must be *voice*

        :return: The type of this InlineQueryResult.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineQueryResult.

        Type of the result, must be *voice*

        :param type: The type of this InlineQueryResult.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def description(self):
        """Gets the description of this InlineQueryResult.

        *Optional*. Short description of the result

        :return: The description of this InlineQueryResult.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineQueryResult.

        *Optional*. Short description of the result

        :param description: The description of this InlineQueryResult.
        :type description: str
        """

        self._description = description

    @property
    def document_file_id(self):
        """Gets the document_file_id of this InlineQueryResult.

        A valid file identifier for the file

        :return: The document_file_id of this InlineQueryResult.
        :rtype: str
        """
        return self._document_file_id

    @document_file_id.setter
    def document_file_id(self, document_file_id):
        """Sets the document_file_id of this InlineQueryResult.

        A valid file identifier for the file

        :param document_file_id: The document_file_id of this InlineQueryResult.
        :type document_file_id: str
        """
        if document_file_id is None:
            raise ValueError("Invalid value for `document_file_id`, must not be `None`")

        self._document_file_id = document_file_id

    @property
    def title(self):
        """Gets the title of this InlineQueryResult.

        Recording title

        :return: The title of this InlineQueryResult.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineQueryResult.

        Recording title

        :param title: The title of this InlineQueryResult.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def gif_file_id(self):
        """Gets the gif_file_id of this InlineQueryResult.

        A valid file identifier for the GIF file

        :return: The gif_file_id of this InlineQueryResult.
        :rtype: str
        """
        return self._gif_file_id

    @gif_file_id.setter
    def gif_file_id(self, gif_file_id):
        """Sets the gif_file_id of this InlineQueryResult.

        A valid file identifier for the GIF file

        :param gif_file_id: The gif_file_id of this InlineQueryResult.
        :type gif_file_id: str
        """
        if gif_file_id is None:
            raise ValueError("Invalid value for `gif_file_id`, must not be `None`")

        self._gif_file_id = gif_file_id

    @property
    def mpeg4_file_id(self):
        """Gets the mpeg4_file_id of this InlineQueryResult.

        A valid file identifier for the MP4 file

        :return: The mpeg4_file_id of this InlineQueryResult.
        :rtype: str
        """
        return self._mpeg4_file_id

    @mpeg4_file_id.setter
    def mpeg4_file_id(self, mpeg4_file_id):
        """Sets the mpeg4_file_id of this InlineQueryResult.

        A valid file identifier for the MP4 file

        :param mpeg4_file_id: The mpeg4_file_id of this InlineQueryResult.
        :type mpeg4_file_id: str
        """
        if mpeg4_file_id is None:
            raise ValueError("Invalid value for `mpeg4_file_id`, must not be `None`")

        self._mpeg4_file_id = mpeg4_file_id

    @property
    def photo_file_id(self):
        """Gets the photo_file_id of this InlineQueryResult.

        A valid file identifier of the photo

        :return: The photo_file_id of this InlineQueryResult.
        :rtype: str
        """
        return self._photo_file_id

    @photo_file_id.setter
    def photo_file_id(self, photo_file_id):
        """Sets the photo_file_id of this InlineQueryResult.

        A valid file identifier of the photo

        :param photo_file_id: The photo_file_id of this InlineQueryResult.
        :type photo_file_id: str
        """
        if photo_file_id is None:
            raise ValueError("Invalid value for `photo_file_id`, must not be `None`")

        self._photo_file_id = photo_file_id

    @property
    def sticker_file_id(self):
        """Gets the sticker_file_id of this InlineQueryResult.

        A valid file identifier of the sticker

        :return: The sticker_file_id of this InlineQueryResult.
        :rtype: str
        """
        return self._sticker_file_id

    @sticker_file_id.setter
    def sticker_file_id(self, sticker_file_id):
        """Sets the sticker_file_id of this InlineQueryResult.

        A valid file identifier of the sticker

        :param sticker_file_id: The sticker_file_id of this InlineQueryResult.
        :type sticker_file_id: str
        """
        if sticker_file_id is None:
            raise ValueError("Invalid value for `sticker_file_id`, must not be `None`")

        self._sticker_file_id = sticker_file_id

    @property
    def video_file_id(self):
        """Gets the video_file_id of this InlineQueryResult.

        A valid file identifier for the video file

        :return: The video_file_id of this InlineQueryResult.
        :rtype: str
        """
        return self._video_file_id

    @video_file_id.setter
    def video_file_id(self, video_file_id):
        """Sets the video_file_id of this InlineQueryResult.

        A valid file identifier for the video file

        :param video_file_id: The video_file_id of this InlineQueryResult.
        :type video_file_id: str
        """
        if video_file_id is None:
            raise ValueError("Invalid value for `video_file_id`, must not be `None`")

        self._video_file_id = video_file_id

    @property
    def voice_file_id(self):
        """Gets the voice_file_id of this InlineQueryResult.

        A valid file identifier for the voice message

        :return: The voice_file_id of this InlineQueryResult.
        :rtype: str
        """
        return self._voice_file_id

    @voice_file_id.setter
    def voice_file_id(self, voice_file_id):
        """Sets the voice_file_id of this InlineQueryResult.

        A valid file identifier for the voice message

        :param voice_file_id: The voice_file_id of this InlineQueryResult.
        :type voice_file_id: str
        """
        if voice_file_id is None:
            raise ValueError("Invalid value for `voice_file_id`, must not be `None`")

        self._voice_file_id = voice_file_id

    @property
    def hide_url(self):
        """Gets the hide_url of this InlineQueryResult.

        *Optional*. Pass *True*, if you don't want the URL to be shown in the message

        :return: The hide_url of this InlineQueryResult.
        :rtype: bool
        """
        return self._hide_url

    @hide_url.setter
    def hide_url(self, hide_url):
        """Sets the hide_url of this InlineQueryResult.

        *Optional*. Pass *True*, if you don't want the URL to be shown in the message

        :param hide_url: The hide_url of this InlineQueryResult.
        :type hide_url: bool
        """

        self._hide_url = hide_url

    @property
    def thumb_height(self):
        """Gets the thumb_height of this InlineQueryResult.

        *Optional*. Thumbnail height

        :return: The thumb_height of this InlineQueryResult.
        :rtype: int
        """
        return self._thumb_height

    @thumb_height.setter
    def thumb_height(self, thumb_height):
        """Sets the thumb_height of this InlineQueryResult.

        *Optional*. Thumbnail height

        :param thumb_height: The thumb_height of this InlineQueryResult.
        :type thumb_height: int
        """

        self._thumb_height = thumb_height

    @property
    def thumb_url(self):
        """Gets the thumb_url of this InlineQueryResult.

        URL of the thumbnail (jpeg only) for the video

        :return: The thumb_url of this InlineQueryResult.
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this InlineQueryResult.

        URL of the thumbnail (jpeg only) for the video

        :param thumb_url: The thumb_url of this InlineQueryResult.
        :type thumb_url: str
        """
        if thumb_url is None:
            raise ValueError("Invalid value for `thumb_url`, must not be `None`")

        self._thumb_url = thumb_url

    @property
    def thumb_width(self):
        """Gets the thumb_width of this InlineQueryResult.

        *Optional*. Thumbnail width

        :return: The thumb_width of this InlineQueryResult.
        :rtype: int
        """
        return self._thumb_width

    @thumb_width.setter
    def thumb_width(self, thumb_width):
        """Sets the thumb_width of this InlineQueryResult.

        *Optional*. Thumbnail width

        :param thumb_width: The thumb_width of this InlineQueryResult.
        :type thumb_width: int
        """

        self._thumb_width = thumb_width

    @property
    def url(self):
        """Gets the url of this InlineQueryResult.

        *Optional*. URL of the result

        :return: The url of this InlineQueryResult.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineQueryResult.

        *Optional*. URL of the result

        :param url: The url of this InlineQueryResult.
        :type url: str
        """

        self._url = url

    @property
    def audio_duration(self):
        """Gets the audio_duration of this InlineQueryResult.

        *Optional*. Audio duration in seconds

        :return: The audio_duration of this InlineQueryResult.
        :rtype: int
        """
        return self._audio_duration

    @audio_duration.setter
    def audio_duration(self, audio_duration):
        """Sets the audio_duration of this InlineQueryResult.

        *Optional*. Audio duration in seconds

        :param audio_duration: The audio_duration of this InlineQueryResult.
        :type audio_duration: int
        """

        self._audio_duration = audio_duration

    @property
    def audio_url(self):
        """Gets the audio_url of this InlineQueryResult.

        A valid URL for the audio file

        :return: The audio_url of this InlineQueryResult.
        :rtype: str
        """
        return self._audio_url

    @audio_url.setter
    def audio_url(self, audio_url):
        """Sets the audio_url of this InlineQueryResult.

        A valid URL for the audio file

        :param audio_url: The audio_url of this InlineQueryResult.
        :type audio_url: str
        """
        if audio_url is None:
            raise ValueError("Invalid value for `audio_url`, must not be `None`")

        self._audio_url = audio_url

    @property
    def performer(self):
        """Gets the performer of this InlineQueryResult.

        *Optional*. Performer

        :return: The performer of this InlineQueryResult.
        :rtype: str
        """
        return self._performer

    @performer.setter
    def performer(self, performer):
        """Sets the performer of this InlineQueryResult.

        *Optional*. Performer

        :param performer: The performer of this InlineQueryResult.
        :type performer: str
        """

        self._performer = performer

    @property
    def first_name(self):
        """Gets the first_name of this InlineQueryResult.

        Contact's first name

        :return: The first_name of this InlineQueryResult.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this InlineQueryResult.

        Contact's first name

        :param first_name: The first_name of this InlineQueryResult.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this InlineQueryResult.

        *Optional*. Contact's last name

        :return: The last_name of this InlineQueryResult.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this InlineQueryResult.

        *Optional*. Contact's last name

        :param last_name: The last_name of this InlineQueryResult.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this InlineQueryResult.

        Contact's phone number

        :return: The phone_number of this InlineQueryResult.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this InlineQueryResult.

        Contact's phone number

        :param phone_number: The phone_number of this InlineQueryResult.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def vcard(self):
        """Gets the vcard of this InlineQueryResult.

        *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes

        :return: The vcard of this InlineQueryResult.
        :rtype: str
        """
        return self._vcard

    @vcard.setter
    def vcard(self, vcard):
        """Sets the vcard of this InlineQueryResult.

        *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes

        :param vcard: The vcard of this InlineQueryResult.
        :type vcard: str
        """

        self._vcard = vcard

    @property
    def game_short_name(self):
        """Gets the game_short_name of this InlineQueryResult.

        Short name of the game

        :return: The game_short_name of this InlineQueryResult.
        :rtype: str
        """
        return self._game_short_name

    @game_short_name.setter
    def game_short_name(self, game_short_name):
        """Sets the game_short_name of this InlineQueryResult.

        Short name of the game

        :param game_short_name: The game_short_name of this InlineQueryResult.
        :type game_short_name: str
        """
        if game_short_name is None:
            raise ValueError("Invalid value for `game_short_name`, must not be `None`")

        self._game_short_name = game_short_name

    @property
    def document_url(self):
        """Gets the document_url of this InlineQueryResult.

        A valid URL for the file

        :return: The document_url of this InlineQueryResult.
        :rtype: str
        """
        return self._document_url

    @document_url.setter
    def document_url(self, document_url):
        """Sets the document_url of this InlineQueryResult.

        A valid URL for the file

        :param document_url: The document_url of this InlineQueryResult.
        :type document_url: str
        """
        if document_url is None:
            raise ValueError("Invalid value for `document_url`, must not be `None`")

        self._document_url = document_url

    @property
    def mime_type(self):
        """Gets the mime_type of this InlineQueryResult.

        Mime type of the content of video url, “text/html” or “video/mp4”

        :return: The mime_type of this InlineQueryResult.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this InlineQueryResult.

        Mime type of the content of video url, “text/html” or “video/mp4”

        :param mime_type: The mime_type of this InlineQueryResult.
        :type mime_type: str
        """
        if mime_type is None:
            raise ValueError("Invalid value for `mime_type`, must not be `None`")

        self._mime_type = mime_type

    @property
    def gif_duration(self):
        """Gets the gif_duration of this InlineQueryResult.

        *Optional*. Duration of the GIF

        :return: The gif_duration of this InlineQueryResult.
        :rtype: int
        """
        return self._gif_duration

    @gif_duration.setter
    def gif_duration(self, gif_duration):
        """Sets the gif_duration of this InlineQueryResult.

        *Optional*. Duration of the GIF

        :param gif_duration: The gif_duration of this InlineQueryResult.
        :type gif_duration: int
        """

        self._gif_duration = gif_duration

    @property
    def gif_height(self):
        """Gets the gif_height of this InlineQueryResult.

        *Optional*. Height of the GIF

        :return: The gif_height of this InlineQueryResult.
        :rtype: int
        """
        return self._gif_height

    @gif_height.setter
    def gif_height(self, gif_height):
        """Sets the gif_height of this InlineQueryResult.

        *Optional*. Height of the GIF

        :param gif_height: The gif_height of this InlineQueryResult.
        :type gif_height: int
        """

        self._gif_height = gif_height

    @property
    def gif_url(self):
        """Gets the gif_url of this InlineQueryResult.

        A valid URL for the GIF file. File size must not exceed 1MB

        :return: The gif_url of this InlineQueryResult.
        :rtype: str
        """
        return self._gif_url

    @gif_url.setter
    def gif_url(self, gif_url):
        """Sets the gif_url of this InlineQueryResult.

        A valid URL for the GIF file. File size must not exceed 1MB

        :param gif_url: The gif_url of this InlineQueryResult.
        :type gif_url: str
        """
        if gif_url is None:
            raise ValueError("Invalid value for `gif_url`, must not be `None`")

        self._gif_url = gif_url

    @property
    def gif_width(self):
        """Gets the gif_width of this InlineQueryResult.

        *Optional*. Width of the GIF

        :return: The gif_width of this InlineQueryResult.
        :rtype: int
        """
        return self._gif_width

    @gif_width.setter
    def gif_width(self, gif_width):
        """Sets the gif_width of this InlineQueryResult.

        *Optional*. Width of the GIF

        :param gif_width: The gif_width of this InlineQueryResult.
        :type gif_width: int
        """

        self._gif_width = gif_width

    @property
    def thumb_mime_type(self):
        """Gets the thumb_mime_type of this InlineQueryResult.

        *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”

        :return: The thumb_mime_type of this InlineQueryResult.
        :rtype: str
        """
        return self._thumb_mime_type

    @thumb_mime_type.setter
    def thumb_mime_type(self, thumb_mime_type):
        """Sets the thumb_mime_type of this InlineQueryResult.

        *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”

        :param thumb_mime_type: The thumb_mime_type of this InlineQueryResult.
        :type thumb_mime_type: str
        """
        allowed_values = ["image/jpeg", "image/gif", "video/mp4"]  # noqa: E501
        if thumb_mime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `thumb_mime_type` ({0}), must be one of {1}"
                .format(thumb_mime_type, allowed_values)
            )

        self._thumb_mime_type = thumb_mime_type

    @property
    def heading(self):
        """Gets the heading of this InlineQueryResult.

        *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :return: The heading of this InlineQueryResult.
        :rtype: int
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this InlineQueryResult.

        *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :param heading: The heading of this InlineQueryResult.
        :type heading: int
        """

        self._heading = heading

    @property
    def horizontal_accuracy(self):
        """Gets the horizontal_accuracy of this InlineQueryResult.

        *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500

        :return: The horizontal_accuracy of this InlineQueryResult.
        :rtype: float
        """
        return self._horizontal_accuracy

    @horizontal_accuracy.setter
    def horizontal_accuracy(self, horizontal_accuracy):
        """Sets the horizontal_accuracy of this InlineQueryResult.

        *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500

        :param horizontal_accuracy: The horizontal_accuracy of this InlineQueryResult.
        :type horizontal_accuracy: float
        """

        self._horizontal_accuracy = horizontal_accuracy

    @property
    def latitude(self):
        """Gets the latitude of this InlineQueryResult.

        Latitude of the venue location in degrees

        :return: The latitude of this InlineQueryResult.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this InlineQueryResult.

        Latitude of the venue location in degrees

        :param latitude: The latitude of this InlineQueryResult.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def live_period(self):
        """Gets the live_period of this InlineQueryResult.

        *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.

        :return: The live_period of this InlineQueryResult.
        :rtype: int
        """
        return self._live_period

    @live_period.setter
    def live_period(self, live_period):
        """Sets the live_period of this InlineQueryResult.

        *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.

        :param live_period: The live_period of this InlineQueryResult.
        :type live_period: int
        """

        self._live_period = live_period

    @property
    def longitude(self):
        """Gets the longitude of this InlineQueryResult.

        Longitude of the venue location in degrees

        :return: The longitude of this InlineQueryResult.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this InlineQueryResult.

        Longitude of the venue location in degrees

        :param longitude: The longitude of this InlineQueryResult.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def proximity_alert_radius(self):
        """Gets the proximity_alert_radius of this InlineQueryResult.

        *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :return: The proximity_alert_radius of this InlineQueryResult.
        :rtype: int
        """
        return self._proximity_alert_radius

    @proximity_alert_radius.setter
    def proximity_alert_radius(self, proximity_alert_radius):
        """Sets the proximity_alert_radius of this InlineQueryResult.

        *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :param proximity_alert_radius: The proximity_alert_radius of this InlineQueryResult.
        :type proximity_alert_radius: int
        """

        self._proximity_alert_radius = proximity_alert_radius

    @property
    def mpeg4_duration(self):
        """Gets the mpeg4_duration of this InlineQueryResult.

        *Optional*. Video duration

        :return: The mpeg4_duration of this InlineQueryResult.
        :rtype: int
        """
        return self._mpeg4_duration

    @mpeg4_duration.setter
    def mpeg4_duration(self, mpeg4_duration):
        """Sets the mpeg4_duration of this InlineQueryResult.

        *Optional*. Video duration

        :param mpeg4_duration: The mpeg4_duration of this InlineQueryResult.
        :type mpeg4_duration: int
        """

        self._mpeg4_duration = mpeg4_duration

    @property
    def mpeg4_height(self):
        """Gets the mpeg4_height of this InlineQueryResult.

        *Optional*. Video height

        :return: The mpeg4_height of this InlineQueryResult.
        :rtype: int
        """
        return self._mpeg4_height

    @mpeg4_height.setter
    def mpeg4_height(self, mpeg4_height):
        """Sets the mpeg4_height of this InlineQueryResult.

        *Optional*. Video height

        :param mpeg4_height: The mpeg4_height of this InlineQueryResult.
        :type mpeg4_height: int
        """

        self._mpeg4_height = mpeg4_height

    @property
    def mpeg4_url(self):
        """Gets the mpeg4_url of this InlineQueryResult.

        A valid URL for the MP4 file. File size must not exceed 1MB

        :return: The mpeg4_url of this InlineQueryResult.
        :rtype: str
        """
        return self._mpeg4_url

    @mpeg4_url.setter
    def mpeg4_url(self, mpeg4_url):
        """Sets the mpeg4_url of this InlineQueryResult.

        A valid URL for the MP4 file. File size must not exceed 1MB

        :param mpeg4_url: The mpeg4_url of this InlineQueryResult.
        :type mpeg4_url: str
        """
        if mpeg4_url is None:
            raise ValueError("Invalid value for `mpeg4_url`, must not be `None`")

        self._mpeg4_url = mpeg4_url

    @property
    def mpeg4_width(self):
        """Gets the mpeg4_width of this InlineQueryResult.

        *Optional*. Video width

        :return: The mpeg4_width of this InlineQueryResult.
        :rtype: int
        """
        return self._mpeg4_width

    @mpeg4_width.setter
    def mpeg4_width(self, mpeg4_width):
        """Sets the mpeg4_width of this InlineQueryResult.

        *Optional*. Video width

        :param mpeg4_width: The mpeg4_width of this InlineQueryResult.
        :type mpeg4_width: int
        """

        self._mpeg4_width = mpeg4_width

    @property
    def photo_height(self):
        """Gets the photo_height of this InlineQueryResult.

        *Optional*. Height of the photo

        :return: The photo_height of this InlineQueryResult.
        :rtype: int
        """
        return self._photo_height

    @photo_height.setter
    def photo_height(self, photo_height):
        """Sets the photo_height of this InlineQueryResult.

        *Optional*. Height of the photo

        :param photo_height: The photo_height of this InlineQueryResult.
        :type photo_height: int
        """

        self._photo_height = photo_height

    @property
    def photo_url(self):
        """Gets the photo_url of this InlineQueryResult.

        A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB

        :return: The photo_url of this InlineQueryResult.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this InlineQueryResult.

        A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB

        :param photo_url: The photo_url of this InlineQueryResult.
        :type photo_url: str
        """
        if photo_url is None:
            raise ValueError("Invalid value for `photo_url`, must not be `None`")

        self._photo_url = photo_url

    @property
    def photo_width(self):
        """Gets the photo_width of this InlineQueryResult.

        *Optional*. Width of the photo

        :return: The photo_width of this InlineQueryResult.
        :rtype: int
        """
        return self._photo_width

    @photo_width.setter
    def photo_width(self, photo_width):
        """Sets the photo_width of this InlineQueryResult.

        *Optional*. Width of the photo

        :param photo_width: The photo_width of this InlineQueryResult.
        :type photo_width: int
        """

        self._photo_width = photo_width

    @property
    def address(self):
        """Gets the address of this InlineQueryResult.

        Address of the venue

        :return: The address of this InlineQueryResult.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineQueryResult.

        Address of the venue

        :param address: The address of this InlineQueryResult.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def foursquare_id(self):
        """Gets the foursquare_id of this InlineQueryResult.

        *Optional*. Foursquare identifier of the venue if known

        :return: The foursquare_id of this InlineQueryResult.
        :rtype: str
        """
        return self._foursquare_id

    @foursquare_id.setter
    def foursquare_id(self, foursquare_id):
        """Sets the foursquare_id of this InlineQueryResult.

        *Optional*. Foursquare identifier of the venue if known

        :param foursquare_id: The foursquare_id of this InlineQueryResult.
        :type foursquare_id: str
        """

        self._foursquare_id = foursquare_id

    @property
    def foursquare_type(self):
        """Gets the foursquare_type of this InlineQueryResult.

        *Optional*. Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)

        :return: The foursquare_type of this InlineQueryResult.
        :rtype: str
        """
        return self._foursquare_type

    @foursquare_type.setter
    def foursquare_type(self, foursquare_type):
        """Sets the foursquare_type of this InlineQueryResult.

        *Optional*. Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)

        :param foursquare_type: The foursquare_type of this InlineQueryResult.
        :type foursquare_type: str
        """

        self._foursquare_type = foursquare_type

    @property
    def google_place_id(self):
        """Gets the google_place_id of this InlineQueryResult.

        *Optional*. Google Places identifier of the venue

        :return: The google_place_id of this InlineQueryResult.
        :rtype: str
        """
        return self._google_place_id

    @google_place_id.setter
    def google_place_id(self, google_place_id):
        """Sets the google_place_id of this InlineQueryResult.

        *Optional*. Google Places identifier of the venue

        :param google_place_id: The google_place_id of this InlineQueryResult.
        :type google_place_id: str
        """

        self._google_place_id = google_place_id

    @property
    def google_place_type(self):
        """Gets the google_place_type of this InlineQueryResult.

        *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)

        :return: The google_place_type of this InlineQueryResult.
        :rtype: str
        """
        return self._google_place_type

    @google_place_type.setter
    def google_place_type(self, google_place_type):
        """Sets the google_place_type of this InlineQueryResult.

        *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)

        :param google_place_type: The google_place_type of this InlineQueryResult.
        :type google_place_type: str
        """

        self._google_place_type = google_place_type

    @property
    def video_duration(self):
        """Gets the video_duration of this InlineQueryResult.

        *Optional*. Video duration in seconds

        :return: The video_duration of this InlineQueryResult.
        :rtype: int
        """
        return self._video_duration

    @video_duration.setter
    def video_duration(self, video_duration):
        """Sets the video_duration of this InlineQueryResult.

        *Optional*. Video duration in seconds

        :param video_duration: The video_duration of this InlineQueryResult.
        :type video_duration: int
        """

        self._video_duration = video_duration

    @property
    def video_height(self):
        """Gets the video_height of this InlineQueryResult.

        *Optional*. Video height

        :return: The video_height of this InlineQueryResult.
        :rtype: int
        """
        return self._video_height

    @video_height.setter
    def video_height(self, video_height):
        """Sets the video_height of this InlineQueryResult.

        *Optional*. Video height

        :param video_height: The video_height of this InlineQueryResult.
        :type video_height: int
        """

        self._video_height = video_height

    @property
    def video_url(self):
        """Gets the video_url of this InlineQueryResult.

        A valid URL for the embedded video player or video file

        :return: The video_url of this InlineQueryResult.
        :rtype: str
        """
        return self._video_url

    @video_url.setter
    def video_url(self, video_url):
        """Sets the video_url of this InlineQueryResult.

        A valid URL for the embedded video player or video file

        :param video_url: The video_url of this InlineQueryResult.
        :type video_url: str
        """
        if video_url is None:
            raise ValueError("Invalid value for `video_url`, must not be `None`")

        self._video_url = video_url

    @property
    def video_width(self):
        """Gets the video_width of this InlineQueryResult.

        *Optional*. Video width

        :return: The video_width of this InlineQueryResult.
        :rtype: int
        """
        return self._video_width

    @video_width.setter
    def video_width(self, video_width):
        """Sets the video_width of this InlineQueryResult.

        *Optional*. Video width

        :param video_width: The video_width of this InlineQueryResult.
        :type video_width: int
        """

        self._video_width = video_width

    @property
    def voice_duration(self):
        """Gets the voice_duration of this InlineQueryResult.

        *Optional*. Recording duration in seconds

        :return: The voice_duration of this InlineQueryResult.
        :rtype: int
        """
        return self._voice_duration

    @voice_duration.setter
    def voice_duration(self, voice_duration):
        """Sets the voice_duration of this InlineQueryResult.

        *Optional*. Recording duration in seconds

        :param voice_duration: The voice_duration of this InlineQueryResult.
        :type voice_duration: int
        """

        self._voice_duration = voice_duration

    @property
    def voice_url(self):
        """Gets the voice_url of this InlineQueryResult.

        A valid URL for the voice recording

        :return: The voice_url of this InlineQueryResult.
        :rtype: str
        """
        return self._voice_url

    @voice_url.setter
    def voice_url(self, voice_url):
        """Sets the voice_url of this InlineQueryResult.

        A valid URL for the voice recording

        :param voice_url: The voice_url of this InlineQueryResult.
        :type voice_url: str
        """
        if voice_url is None:
            raise ValueError("Invalid value for `voice_url`, must not be `None`")

        self._voice_url = voice_url
