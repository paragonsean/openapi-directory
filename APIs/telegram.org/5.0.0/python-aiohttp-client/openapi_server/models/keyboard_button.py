# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.keyboard_button_poll_type import KeyboardButtonPollType
from openapi_server import util


class KeyboardButton(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_contact: bool=None, request_location: bool=None, request_poll: KeyboardButtonPollType=None, text: str=None):
        """KeyboardButton - a model defined in OpenAPI

        :param request_contact: The request_contact of this KeyboardButton.
        :param request_location: The request_location of this KeyboardButton.
        :param request_poll: The request_poll of this KeyboardButton.
        :param text: The text of this KeyboardButton.
        """
        self.openapi_types = {
            'request_contact': bool,
            'request_location': bool,
            'request_poll': KeyboardButtonPollType,
            'text': str
        }

        self.attribute_map = {
            'request_contact': 'request_contact',
            'request_location': 'request_location',
            'request_poll': 'request_poll',
            'text': 'text'
        }

        self._request_contact = request_contact
        self._request_location = request_location
        self._request_poll = request_poll
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyboardButton':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyboardButton of this KeyboardButton.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_contact(self):
        """Gets the request_contact of this KeyboardButton.

        *Optional*. If *True*, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only

        :return: The request_contact of this KeyboardButton.
        :rtype: bool
        """
        return self._request_contact

    @request_contact.setter
    def request_contact(self, request_contact):
        """Sets the request_contact of this KeyboardButton.

        *Optional*. If *True*, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only

        :param request_contact: The request_contact of this KeyboardButton.
        :type request_contact: bool
        """

        self._request_contact = request_contact

    @property
    def request_location(self):
        """Gets the request_location of this KeyboardButton.

        *Optional*. If *True*, the user's current location will be sent when the button is pressed. Available in private chats only

        :return: The request_location of this KeyboardButton.
        :rtype: bool
        """
        return self._request_location

    @request_location.setter
    def request_location(self, request_location):
        """Sets the request_location of this KeyboardButton.

        *Optional*. If *True*, the user's current location will be sent when the button is pressed. Available in private chats only

        :param request_location: The request_location of this KeyboardButton.
        :type request_location: bool
        """

        self._request_location = request_location

    @property
    def request_poll(self):
        """Gets the request_poll of this KeyboardButton.


        :return: The request_poll of this KeyboardButton.
        :rtype: KeyboardButtonPollType
        """
        return self._request_poll

    @request_poll.setter
    def request_poll(self, request_poll):
        """Sets the request_poll of this KeyboardButton.


        :param request_poll: The request_poll of this KeyboardButton.
        :type request_poll: KeyboardButtonPollType
        """

        self._request_poll = request_poll

    @property
    def text(self):
        """Gets the text of this KeyboardButton.

        Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed

        :return: The text of this KeyboardButton.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this KeyboardButton.

        Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed

        :param text: The text of this KeyboardButton.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
