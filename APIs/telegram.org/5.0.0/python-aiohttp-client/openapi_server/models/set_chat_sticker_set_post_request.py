# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete_chat_sticker_set_post_request_chat_id import DeleteChatStickerSetPostRequestChatId
from openapi_server import util


class SetChatStickerSetPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_id: DeleteChatStickerSetPostRequestChatId=None, sticker_set_name: str=None):
        """SetChatStickerSetPostRequest - a model defined in OpenAPI

        :param chat_id: The chat_id of this SetChatStickerSetPostRequest.
        :param sticker_set_name: The sticker_set_name of this SetChatStickerSetPostRequest.
        """
        self.openapi_types = {
            'chat_id': DeleteChatStickerSetPostRequestChatId,
            'sticker_set_name': str
        }

        self.attribute_map = {
            'chat_id': 'chat_id',
            'sticker_set_name': 'sticker_set_name'
        }

        self._chat_id = chat_id
        self._sticker_set_name = sticker_set_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetChatStickerSetPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _setChatStickerSet_post_request of this SetChatStickerSetPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_id(self):
        """Gets the chat_id of this SetChatStickerSetPostRequest.


        :return: The chat_id of this SetChatStickerSetPostRequest.
        :rtype: DeleteChatStickerSetPostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SetChatStickerSetPostRequest.


        :param chat_id: The chat_id of this SetChatStickerSetPostRequest.
        :type chat_id: DeleteChatStickerSetPostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def sticker_set_name(self):
        """Gets the sticker_set_name of this SetChatStickerSetPostRequest.

        Name of the sticker set to be set as the group sticker set

        :return: The sticker_set_name of this SetChatStickerSetPostRequest.
        :rtype: str
        """
        return self._sticker_set_name

    @sticker_set_name.setter
    def sticker_set_name(self, sticker_set_name):
        """Sets the sticker_set_name of this SetChatStickerSetPostRequest.

        Name of the sticker set to be set as the group sticker set

        :param sticker_set_name: The sticker_set_name of this SetChatStickerSetPostRequest.
        :type sticker_set_name: str
        """
        if sticker_set_name is None:
            raise ValueError("Invalid value for `sticker_set_name`, must not be `None`")

        self._sticker_set_name = sticker_set_name
