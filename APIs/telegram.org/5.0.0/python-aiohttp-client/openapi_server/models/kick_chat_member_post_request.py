# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kick_chat_member_post_request_chat_id import KickChatMemberPostRequestChatId
from openapi_server import util


class KickChatMemberPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_id: KickChatMemberPostRequestChatId=None, until_date: int=None, user_id: int=None):
        """KickChatMemberPostRequest - a model defined in OpenAPI

        :param chat_id: The chat_id of this KickChatMemberPostRequest.
        :param until_date: The until_date of this KickChatMemberPostRequest.
        :param user_id: The user_id of this KickChatMemberPostRequest.
        """
        self.openapi_types = {
            'chat_id': KickChatMemberPostRequestChatId,
            'until_date': int,
            'user_id': int
        }

        self.attribute_map = {
            'chat_id': 'chat_id',
            'until_date': 'until_date',
            'user_id': 'user_id'
        }

        self._chat_id = chat_id
        self._until_date = until_date
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KickChatMemberPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _kickChatMember_post_request of this KickChatMemberPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_id(self):
        """Gets the chat_id of this KickChatMemberPostRequest.


        :return: The chat_id of this KickChatMemberPostRequest.
        :rtype: KickChatMemberPostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this KickChatMemberPostRequest.


        :param chat_id: The chat_id of this KickChatMemberPostRequest.
        :type chat_id: KickChatMemberPostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def until_date(self):
        """Gets the until_date of this KickChatMemberPostRequest.

        Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever

        :return: The until_date of this KickChatMemberPostRequest.
        :rtype: int
        """
        return self._until_date

    @until_date.setter
    def until_date(self, until_date):
        """Sets the until_date of this KickChatMemberPostRequest.

        Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever

        :param until_date: The until_date of this KickChatMemberPostRequest.
        :type until_date: int
        """

        self._until_date = until_date

    @property
    def user_id(self):
        """Gets the user_id of this KickChatMemberPostRequest.

        Unique identifier of the target user

        :return: The user_id of this KickChatMemberPostRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this KickChatMemberPostRequest.

        Unique identifier of the target user

        :param user_id: The user_id of this KickChatMemberPostRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
