# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shipping_option import ShippingOption
from openapi_server import util


class AnswerShippingQueryPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, ok: bool=None, shipping_options: List[ShippingOption]=None, shipping_query_id: str=None):
        """AnswerShippingQueryPostRequest - a model defined in OpenAPI

        :param error_message: The error_message of this AnswerShippingQueryPostRequest.
        :param ok: The ok of this AnswerShippingQueryPostRequest.
        :param shipping_options: The shipping_options of this AnswerShippingQueryPostRequest.
        :param shipping_query_id: The shipping_query_id of this AnswerShippingQueryPostRequest.
        """
        self.openapi_types = {
            'error_message': str,
            'ok': bool,
            'shipping_options': List[ShippingOption],
            'shipping_query_id': str
        }

        self.attribute_map = {
            'error_message': 'error_message',
            'ok': 'ok',
            'shipping_options': 'shipping_options',
            'shipping_query_id': 'shipping_query_id'
        }

        self._error_message = error_message
        self._ok = ok
        self._shipping_options = shipping_options
        self._shipping_query_id = shipping_query_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnswerShippingQueryPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _answerShippingQuery_post_request of this AnswerShippingQueryPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this AnswerShippingQueryPostRequest.

        Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.

        :return: The error_message of this AnswerShippingQueryPostRequest.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this AnswerShippingQueryPostRequest.

        Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.

        :param error_message: The error_message of this AnswerShippingQueryPostRequest.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def ok(self):
        """Gets the ok of this AnswerShippingQueryPostRequest.

        Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)

        :return: The ok of this AnswerShippingQueryPostRequest.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this AnswerShippingQueryPostRequest.

        Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)

        :param ok: The ok of this AnswerShippingQueryPostRequest.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def shipping_options(self):
        """Gets the shipping_options of this AnswerShippingQueryPostRequest.

        Required if *ok* is True. A JSON-serialized array of available shipping options.

        :return: The shipping_options of this AnswerShippingQueryPostRequest.
        :rtype: List[ShippingOption]
        """
        return self._shipping_options

    @shipping_options.setter
    def shipping_options(self, shipping_options):
        """Sets the shipping_options of this AnswerShippingQueryPostRequest.

        Required if *ok* is True. A JSON-serialized array of available shipping options.

        :param shipping_options: The shipping_options of this AnswerShippingQueryPostRequest.
        :type shipping_options: List[ShippingOption]
        """

        self._shipping_options = shipping_options

    @property
    def shipping_query_id(self):
        """Gets the shipping_query_id of this AnswerShippingQueryPostRequest.

        Unique identifier for the query to be answered

        :return: The shipping_query_id of this AnswerShippingQueryPostRequest.
        :rtype: str
        """
        return self._shipping_query_id

    @shipping_query_id.setter
    def shipping_query_id(self, shipping_query_id):
        """Sets the shipping_query_id of this AnswerShippingQueryPostRequest.

        Unique identifier for the query to be answered

        :param shipping_query_id: The shipping_query_id of this AnswerShippingQueryPostRequest.
        :type shipping_query_id: str
        """
        if shipping_query_id is None:
            raise ValueError("Invalid value for `shipping_query_id`, must not be `None`")

        self._shipping_query_id = shipping_query_id
