# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_id: str=None, file_path: str=None, file_size: int=None, file_unique_id: str=None):
        """File - a model defined in OpenAPI

        :param file_id: The file_id of this File.
        :param file_path: The file_path of this File.
        :param file_size: The file_size of this File.
        :param file_unique_id: The file_unique_id of this File.
        """
        self.openapi_types = {
            'file_id': str,
            'file_path': str,
            'file_size': int,
            'file_unique_id': str
        }

        self.attribute_map = {
            'file_id': 'file_id',
            'file_path': 'file_path',
            'file_size': 'file_size',
            'file_unique_id': 'file_unique_id'
        }

        self._file_id = file_id
        self._file_path = file_path
        self._file_size = file_size
        self._file_unique_id = file_unique_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The File of this File.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self):
        """Gets the file_id of this File.

        Identifier for this file, which can be used to download or reuse the file

        :return: The file_id of this File.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this File.

        Identifier for this file, which can be used to download or reuse the file

        :param file_id: The file_id of this File.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_path(self):
        """Gets the file_path of this File.

        *Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.

        :return: The file_path of this File.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this File.

        *Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.

        :param file_path: The file_path of this File.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def file_size(self):
        """Gets the file_size of this File.

        *Optional*. File size, if known

        :return: The file_size of this File.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this File.

        *Optional*. File size, if known

        :param file_size: The file_size of this File.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def file_unique_id(self):
        """Gets the file_unique_id of this File.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :return: The file_unique_id of this File.
        :rtype: str
        """
        return self._file_unique_id

    @file_unique_id.setter
    def file_unique_id(self, file_unique_id):
        """Sets the file_unique_id of this File.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :param file_unique_id: The file_unique_id of this File.
        :type file_unique_id: str
        """
        if file_unique_id is None:
            raise ValueError("Invalid value for `file_unique_id`, must not be `None`")

        self._file_unique_id = file_unique_id
