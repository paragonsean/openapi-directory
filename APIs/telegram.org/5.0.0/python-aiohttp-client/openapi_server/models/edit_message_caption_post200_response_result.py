# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.animation import Animation
from openapi_server.models.audio import Audio
from openapi_server.models.chat import Chat
from openapi_server.models.contact import Contact
from openapi_server.models.dice import Dice
from openapi_server.models.document import Document
from openapi_server.models.game import Game
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server.models.invoice import Invoice
from openapi_server.models.location import Location
from openapi_server.models.message import Message
from openapi_server.models.message_entity import MessageEntity
from openapi_server.models.passport_data import PassportData
from openapi_server.models.photo_size import PhotoSize
from openapi_server.models.poll import Poll
from openapi_server.models.proximity_alert_triggered import ProximityAlertTriggered
from openapi_server.models.sticker import Sticker
from openapi_server.models.successful_payment import SuccessfulPayment
from openapi_server.models.user import User
from openapi_server.models.venue import Venue
from openapi_server.models.video import Video
from openapi_server.models.video_note import VideoNote
from openapi_server.models.voice import Voice
from openapi_server import util


class EditMessageCaptionPost200ResponseResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, animation: Animation=None, audio: Audio=None, author_signature: str=None, caption: str=None, caption_entities: List[MessageEntity]=None, channel_chat_created: bool=None, chat: Chat=None, connected_website: str=None, contact: Contact=None, _date: int=None, delete_chat_photo: bool=None, dice: Dice=None, document: Document=None, edit_date: int=None, entities: List[MessageEntity]=None, forward_date: int=None, forward_from: User=None, forward_from_chat: Chat=None, forward_from_message_id: int=None, forward_sender_name: str=None, forward_signature: str=None, _from: User=None, game: Game=None, group_chat_created: bool=None, invoice: Invoice=None, left_chat_member: User=None, location: Location=None, media_group_id: str=None, message_id: int=None, migrate_from_chat_id: int=None, migrate_to_chat_id: int=None, new_chat_members: List[User]=None, new_chat_photo: List[PhotoSize]=None, new_chat_title: str=None, passport_data: PassportData=None, photo: List[PhotoSize]=None, pinned_message: Message=None, poll: Poll=None, proximity_alert_triggered: ProximityAlertTriggered=None, reply_markup: InlineKeyboardMarkup=None, reply_to_message: Message=None, sender_chat: Chat=None, sticker: Sticker=None, successful_payment: SuccessfulPayment=None, supergroup_chat_created: bool=None, text: str=None, venue: Venue=None, via_bot: User=None, video: Video=None, video_note: VideoNote=None, voice: Voice=None):
        """EditMessageCaptionPost200ResponseResult - a model defined in OpenAPI

        :param animation: The animation of this EditMessageCaptionPost200ResponseResult.
        :param audio: The audio of this EditMessageCaptionPost200ResponseResult.
        :param author_signature: The author_signature of this EditMessageCaptionPost200ResponseResult.
        :param caption: The caption of this EditMessageCaptionPost200ResponseResult.
        :param caption_entities: The caption_entities of this EditMessageCaptionPost200ResponseResult.
        :param channel_chat_created: The channel_chat_created of this EditMessageCaptionPost200ResponseResult.
        :param chat: The chat of this EditMessageCaptionPost200ResponseResult.
        :param connected_website: The connected_website of this EditMessageCaptionPost200ResponseResult.
        :param contact: The contact of this EditMessageCaptionPost200ResponseResult.
        :param _date: The _date of this EditMessageCaptionPost200ResponseResult.
        :param delete_chat_photo: The delete_chat_photo of this EditMessageCaptionPost200ResponseResult.
        :param dice: The dice of this EditMessageCaptionPost200ResponseResult.
        :param document: The document of this EditMessageCaptionPost200ResponseResult.
        :param edit_date: The edit_date of this EditMessageCaptionPost200ResponseResult.
        :param entities: The entities of this EditMessageCaptionPost200ResponseResult.
        :param forward_date: The forward_date of this EditMessageCaptionPost200ResponseResult.
        :param forward_from: The forward_from of this EditMessageCaptionPost200ResponseResult.
        :param forward_from_chat: The forward_from_chat of this EditMessageCaptionPost200ResponseResult.
        :param forward_from_message_id: The forward_from_message_id of this EditMessageCaptionPost200ResponseResult.
        :param forward_sender_name: The forward_sender_name of this EditMessageCaptionPost200ResponseResult.
        :param forward_signature: The forward_signature of this EditMessageCaptionPost200ResponseResult.
        :param _from: The _from of this EditMessageCaptionPost200ResponseResult.
        :param game: The game of this EditMessageCaptionPost200ResponseResult.
        :param group_chat_created: The group_chat_created of this EditMessageCaptionPost200ResponseResult.
        :param invoice: The invoice of this EditMessageCaptionPost200ResponseResult.
        :param left_chat_member: The left_chat_member of this EditMessageCaptionPost200ResponseResult.
        :param location: The location of this EditMessageCaptionPost200ResponseResult.
        :param media_group_id: The media_group_id of this EditMessageCaptionPost200ResponseResult.
        :param message_id: The message_id of this EditMessageCaptionPost200ResponseResult.
        :param migrate_from_chat_id: The migrate_from_chat_id of this EditMessageCaptionPost200ResponseResult.
        :param migrate_to_chat_id: The migrate_to_chat_id of this EditMessageCaptionPost200ResponseResult.
        :param new_chat_members: The new_chat_members of this EditMessageCaptionPost200ResponseResult.
        :param new_chat_photo: The new_chat_photo of this EditMessageCaptionPost200ResponseResult.
        :param new_chat_title: The new_chat_title of this EditMessageCaptionPost200ResponseResult.
        :param passport_data: The passport_data of this EditMessageCaptionPost200ResponseResult.
        :param photo: The photo of this EditMessageCaptionPost200ResponseResult.
        :param pinned_message: The pinned_message of this EditMessageCaptionPost200ResponseResult.
        :param poll: The poll of this EditMessageCaptionPost200ResponseResult.
        :param proximity_alert_triggered: The proximity_alert_triggered of this EditMessageCaptionPost200ResponseResult.
        :param reply_markup: The reply_markup of this EditMessageCaptionPost200ResponseResult.
        :param reply_to_message: The reply_to_message of this EditMessageCaptionPost200ResponseResult.
        :param sender_chat: The sender_chat of this EditMessageCaptionPost200ResponseResult.
        :param sticker: The sticker of this EditMessageCaptionPost200ResponseResult.
        :param successful_payment: The successful_payment of this EditMessageCaptionPost200ResponseResult.
        :param supergroup_chat_created: The supergroup_chat_created of this EditMessageCaptionPost200ResponseResult.
        :param text: The text of this EditMessageCaptionPost200ResponseResult.
        :param venue: The venue of this EditMessageCaptionPost200ResponseResult.
        :param via_bot: The via_bot of this EditMessageCaptionPost200ResponseResult.
        :param video: The video of this EditMessageCaptionPost200ResponseResult.
        :param video_note: The video_note of this EditMessageCaptionPost200ResponseResult.
        :param voice: The voice of this EditMessageCaptionPost200ResponseResult.
        """
        self.openapi_types = {
            'animation': Animation,
            'audio': Audio,
            'author_signature': str,
            'caption': str,
            'caption_entities': List[MessageEntity],
            'channel_chat_created': bool,
            'chat': Chat,
            'connected_website': str,
            'contact': Contact,
            '_date': int,
            'delete_chat_photo': bool,
            'dice': Dice,
            'document': Document,
            'edit_date': int,
            'entities': List[MessageEntity],
            'forward_date': int,
            'forward_from': User,
            'forward_from_chat': Chat,
            'forward_from_message_id': int,
            'forward_sender_name': str,
            'forward_signature': str,
            '_from': User,
            'game': Game,
            'group_chat_created': bool,
            'invoice': Invoice,
            'left_chat_member': User,
            'location': Location,
            'media_group_id': str,
            'message_id': int,
            'migrate_from_chat_id': int,
            'migrate_to_chat_id': int,
            'new_chat_members': List[User],
            'new_chat_photo': List[PhotoSize],
            'new_chat_title': str,
            'passport_data': PassportData,
            'photo': List[PhotoSize],
            'pinned_message': Message,
            'poll': Poll,
            'proximity_alert_triggered': ProximityAlertTriggered,
            'reply_markup': InlineKeyboardMarkup,
            'reply_to_message': Message,
            'sender_chat': Chat,
            'sticker': Sticker,
            'successful_payment': SuccessfulPayment,
            'supergroup_chat_created': bool,
            'text': str,
            'venue': Venue,
            'via_bot': User,
            'video': Video,
            'video_note': VideoNote,
            'voice': Voice
        }

        self.attribute_map = {
            'animation': 'animation',
            'audio': 'audio',
            'author_signature': 'author_signature',
            'caption': 'caption',
            'caption_entities': 'caption_entities',
            'channel_chat_created': 'channel_chat_created',
            'chat': 'chat',
            'connected_website': 'connected_website',
            'contact': 'contact',
            '_date': 'date',
            'delete_chat_photo': 'delete_chat_photo',
            'dice': 'dice',
            'document': 'document',
            'edit_date': 'edit_date',
            'entities': 'entities',
            'forward_date': 'forward_date',
            'forward_from': 'forward_from',
            'forward_from_chat': 'forward_from_chat',
            'forward_from_message_id': 'forward_from_message_id',
            'forward_sender_name': 'forward_sender_name',
            'forward_signature': 'forward_signature',
            '_from': 'from',
            'game': 'game',
            'group_chat_created': 'group_chat_created',
            'invoice': 'invoice',
            'left_chat_member': 'left_chat_member',
            'location': 'location',
            'media_group_id': 'media_group_id',
            'message_id': 'message_id',
            'migrate_from_chat_id': 'migrate_from_chat_id',
            'migrate_to_chat_id': 'migrate_to_chat_id',
            'new_chat_members': 'new_chat_members',
            'new_chat_photo': 'new_chat_photo',
            'new_chat_title': 'new_chat_title',
            'passport_data': 'passport_data',
            'photo': 'photo',
            'pinned_message': 'pinned_message',
            'poll': 'poll',
            'proximity_alert_triggered': 'proximity_alert_triggered',
            'reply_markup': 'reply_markup',
            'reply_to_message': 'reply_to_message',
            'sender_chat': 'sender_chat',
            'sticker': 'sticker',
            'successful_payment': 'successful_payment',
            'supergroup_chat_created': 'supergroup_chat_created',
            'text': 'text',
            'venue': 'venue',
            'via_bot': 'via_bot',
            'video': 'video',
            'video_note': 'video_note',
            'voice': 'voice'
        }

        self._animation = animation
        self._audio = audio
        self._author_signature = author_signature
        self._caption = caption
        self._caption_entities = caption_entities
        self._channel_chat_created = channel_chat_created
        self._chat = chat
        self._connected_website = connected_website
        self._contact = contact
        self.__date = _date
        self._delete_chat_photo = delete_chat_photo
        self._dice = dice
        self._document = document
        self._edit_date = edit_date
        self._entities = entities
        self._forward_date = forward_date
        self._forward_from = forward_from
        self._forward_from_chat = forward_from_chat
        self._forward_from_message_id = forward_from_message_id
        self._forward_sender_name = forward_sender_name
        self._forward_signature = forward_signature
        self.__from = _from
        self._game = game
        self._group_chat_created = group_chat_created
        self._invoice = invoice
        self._left_chat_member = left_chat_member
        self._location = location
        self._media_group_id = media_group_id
        self._message_id = message_id
        self._migrate_from_chat_id = migrate_from_chat_id
        self._migrate_to_chat_id = migrate_to_chat_id
        self._new_chat_members = new_chat_members
        self._new_chat_photo = new_chat_photo
        self._new_chat_title = new_chat_title
        self._passport_data = passport_data
        self._photo = photo
        self._pinned_message = pinned_message
        self._poll = poll
        self._proximity_alert_triggered = proximity_alert_triggered
        self._reply_markup = reply_markup
        self._reply_to_message = reply_to_message
        self._sender_chat = sender_chat
        self._sticker = sticker
        self._successful_payment = successful_payment
        self._supergroup_chat_created = supergroup_chat_created
        self._text = text
        self._venue = venue
        self._via_bot = via_bot
        self._video = video
        self._video_note = video_note
        self._voice = voice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditMessageCaptionPost200ResponseResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _editMessageCaption_post_200_response_result of this EditMessageCaptionPost200ResponseResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def animation(self):
        """Gets the animation of this EditMessageCaptionPost200ResponseResult.


        :return: The animation of this EditMessageCaptionPost200ResponseResult.
        :rtype: Animation
        """
        return self._animation

    @animation.setter
    def animation(self, animation):
        """Sets the animation of this EditMessageCaptionPost200ResponseResult.


        :param animation: The animation of this EditMessageCaptionPost200ResponseResult.
        :type animation: Animation
        """

        self._animation = animation

    @property
    def audio(self):
        """Gets the audio of this EditMessageCaptionPost200ResponseResult.


        :return: The audio of this EditMessageCaptionPost200ResponseResult.
        :rtype: Audio
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this EditMessageCaptionPost200ResponseResult.


        :param audio: The audio of this EditMessageCaptionPost200ResponseResult.
        :type audio: Audio
        """

        self._audio = audio

    @property
    def author_signature(self):
        """Gets the author_signature of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator

        :return: The author_signature of this EditMessageCaptionPost200ResponseResult.
        :rtype: str
        """
        return self._author_signature

    @author_signature.setter
    def author_signature(self, author_signature):
        """Sets the author_signature of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator

        :param author_signature: The author_signature of this EditMessageCaptionPost200ResponseResult.
        :type author_signature: str
        """

        self._author_signature = author_signature

    @property
    def caption(self):
        """Gets the caption of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters

        :return: The caption of this EditMessageCaptionPost200ResponseResult.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters

        :param caption: The caption of this EditMessageCaptionPost200ResponseResult.
        :type caption: str
        """

        self._caption = caption

    @property
    def caption_entities(self):
        """Gets the caption_entities of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption

        :return: The caption_entities of this EditMessageCaptionPost200ResponseResult.
        :rtype: List[MessageEntity]
        """
        return self._caption_entities

    @caption_entities.setter
    def caption_entities(self, caption_entities):
        """Sets the caption_entities of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption

        :param caption_entities: The caption_entities of this EditMessageCaptionPost200ResponseResult.
        :type caption_entities: List[MessageEntity]
        """

        self._caption_entities = caption_entities

    @property
    def channel_chat_created(self):
        """Gets the channel_chat_created of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a channel.

        :return: The channel_chat_created of this EditMessageCaptionPost200ResponseResult.
        :rtype: bool
        """
        return self._channel_chat_created

    @channel_chat_created.setter
    def channel_chat_created(self, channel_chat_created):
        """Sets the channel_chat_created of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a channel.

        :param channel_chat_created: The channel_chat_created of this EditMessageCaptionPost200ResponseResult.
        :type channel_chat_created: bool
        """

        self._channel_chat_created = channel_chat_created

    @property
    def chat(self):
        """Gets the chat of this EditMessageCaptionPost200ResponseResult.


        :return: The chat of this EditMessageCaptionPost200ResponseResult.
        :rtype: Chat
        """
        return self._chat

    @chat.setter
    def chat(self, chat):
        """Sets the chat of this EditMessageCaptionPost200ResponseResult.


        :param chat: The chat of this EditMessageCaptionPost200ResponseResult.
        :type chat: Chat
        """
        if chat is None:
            raise ValueError("Invalid value for `chat`, must not be `None`")

        self._chat = chat

    @property
    def connected_website(self):
        """Gets the connected_website of this EditMessageCaptionPost200ResponseResult.

        *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)

        :return: The connected_website of this EditMessageCaptionPost200ResponseResult.
        :rtype: str
        """
        return self._connected_website

    @connected_website.setter
    def connected_website(self, connected_website):
        """Sets the connected_website of this EditMessageCaptionPost200ResponseResult.

        *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)

        :param connected_website: The connected_website of this EditMessageCaptionPost200ResponseResult.
        :type connected_website: str
        """

        self._connected_website = connected_website

    @property
    def contact(self):
        """Gets the contact of this EditMessageCaptionPost200ResponseResult.


        :return: The contact of this EditMessageCaptionPost200ResponseResult.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this EditMessageCaptionPost200ResponseResult.


        :param contact: The contact of this EditMessageCaptionPost200ResponseResult.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def _date(self):
        """Gets the _date of this EditMessageCaptionPost200ResponseResult.

        Date the message was sent in Unix time

        :return: The _date of this EditMessageCaptionPost200ResponseResult.
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EditMessageCaptionPost200ResponseResult.

        Date the message was sent in Unix time

        :param _date: The _date of this EditMessageCaptionPost200ResponseResult.
        :type _date: int
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def delete_chat_photo(self):
        """Gets the delete_chat_photo of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Service message: the chat photo was deleted

        :return: The delete_chat_photo of this EditMessageCaptionPost200ResponseResult.
        :rtype: bool
        """
        return self._delete_chat_photo

    @delete_chat_photo.setter
    def delete_chat_photo(self, delete_chat_photo):
        """Sets the delete_chat_photo of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Service message: the chat photo was deleted

        :param delete_chat_photo: The delete_chat_photo of this EditMessageCaptionPost200ResponseResult.
        :type delete_chat_photo: bool
        """

        self._delete_chat_photo = delete_chat_photo

    @property
    def dice(self):
        """Gets the dice of this EditMessageCaptionPost200ResponseResult.


        :return: The dice of this EditMessageCaptionPost200ResponseResult.
        :rtype: Dice
        """
        return self._dice

    @dice.setter
    def dice(self, dice):
        """Sets the dice of this EditMessageCaptionPost200ResponseResult.


        :param dice: The dice of this EditMessageCaptionPost200ResponseResult.
        :type dice: Dice
        """

        self._dice = dice

    @property
    def document(self):
        """Gets the document of this EditMessageCaptionPost200ResponseResult.


        :return: The document of this EditMessageCaptionPost200ResponseResult.
        :rtype: Document
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this EditMessageCaptionPost200ResponseResult.


        :param document: The document of this EditMessageCaptionPost200ResponseResult.
        :type document: Document
        """

        self._document = document

    @property
    def edit_date(self):
        """Gets the edit_date of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Date the message was last edited in Unix time

        :return: The edit_date of this EditMessageCaptionPost200ResponseResult.
        :rtype: int
        """
        return self._edit_date

    @edit_date.setter
    def edit_date(self, edit_date):
        """Sets the edit_date of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Date the message was last edited in Unix time

        :param edit_date: The edit_date of this EditMessageCaptionPost200ResponseResult.
        :type edit_date: int
        """

        self._edit_date = edit_date

    @property
    def entities(self):
        """Gets the entities of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text

        :return: The entities of this EditMessageCaptionPost200ResponseResult.
        :rtype: List[MessageEntity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text

        :param entities: The entities of this EditMessageCaptionPost200ResponseResult.
        :type entities: List[MessageEntity]
        """

        self._entities = entities

    @property
    def forward_date(self):
        """Gets the forward_date of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For forwarded messages, date the original message was sent in Unix time

        :return: The forward_date of this EditMessageCaptionPost200ResponseResult.
        :rtype: int
        """
        return self._forward_date

    @forward_date.setter
    def forward_date(self, forward_date):
        """Sets the forward_date of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For forwarded messages, date the original message was sent in Unix time

        :param forward_date: The forward_date of this EditMessageCaptionPost200ResponseResult.
        :type forward_date: int
        """

        self._forward_date = forward_date

    @property
    def forward_from(self):
        """Gets the forward_from of this EditMessageCaptionPost200ResponseResult.


        :return: The forward_from of this EditMessageCaptionPost200ResponseResult.
        :rtype: User
        """
        return self._forward_from

    @forward_from.setter
    def forward_from(self, forward_from):
        """Sets the forward_from of this EditMessageCaptionPost200ResponseResult.


        :param forward_from: The forward_from of this EditMessageCaptionPost200ResponseResult.
        :type forward_from: User
        """

        self._forward_from = forward_from

    @property
    def forward_from_chat(self):
        """Gets the forward_from_chat of this EditMessageCaptionPost200ResponseResult.


        :return: The forward_from_chat of this EditMessageCaptionPost200ResponseResult.
        :rtype: Chat
        """
        return self._forward_from_chat

    @forward_from_chat.setter
    def forward_from_chat(self, forward_from_chat):
        """Sets the forward_from_chat of this EditMessageCaptionPost200ResponseResult.


        :param forward_from_chat: The forward_from_chat of this EditMessageCaptionPost200ResponseResult.
        :type forward_from_chat: Chat
        """

        self._forward_from_chat = forward_from_chat

    @property
    def forward_from_message_id(self):
        """Gets the forward_from_message_id of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For messages forwarded from channels, identifier of the original message in the channel

        :return: The forward_from_message_id of this EditMessageCaptionPost200ResponseResult.
        :rtype: int
        """
        return self._forward_from_message_id

    @forward_from_message_id.setter
    def forward_from_message_id(self, forward_from_message_id):
        """Sets the forward_from_message_id of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For messages forwarded from channels, identifier of the original message in the channel

        :param forward_from_message_id: The forward_from_message_id of this EditMessageCaptionPost200ResponseResult.
        :type forward_from_message_id: int
        """

        self._forward_from_message_id = forward_from_message_id

    @property
    def forward_sender_name(self):
        """Gets the forward_sender_name of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages

        :return: The forward_sender_name of this EditMessageCaptionPost200ResponseResult.
        :rtype: str
        """
        return self._forward_sender_name

    @forward_sender_name.setter
    def forward_sender_name(self, forward_sender_name):
        """Sets the forward_sender_name of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages

        :param forward_sender_name: The forward_sender_name of this EditMessageCaptionPost200ResponseResult.
        :type forward_sender_name: str
        """

        self._forward_sender_name = forward_sender_name

    @property
    def forward_signature(self):
        """Gets the forward_signature of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For messages forwarded from channels, signature of the post author if present

        :return: The forward_signature of this EditMessageCaptionPost200ResponseResult.
        :rtype: str
        """
        return self._forward_signature

    @forward_signature.setter
    def forward_signature(self, forward_signature):
        """Sets the forward_signature of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For messages forwarded from channels, signature of the post author if present

        :param forward_signature: The forward_signature of this EditMessageCaptionPost200ResponseResult.
        :type forward_signature: str
        """

        self._forward_signature = forward_signature

    @property
    def _from(self):
        """Gets the _from of this EditMessageCaptionPost200ResponseResult.


        :return: The _from of this EditMessageCaptionPost200ResponseResult.
        :rtype: User
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EditMessageCaptionPost200ResponseResult.


        :param _from: The _from of this EditMessageCaptionPost200ResponseResult.
        :type _from: User
        """

        self.__from = _from

    @property
    def game(self):
        """Gets the game of this EditMessageCaptionPost200ResponseResult.


        :return: The game of this EditMessageCaptionPost200ResponseResult.
        :rtype: Game
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this EditMessageCaptionPost200ResponseResult.


        :param game: The game of this EditMessageCaptionPost200ResponseResult.
        :type game: Game
        """

        self._game = game

    @property
    def group_chat_created(self):
        """Gets the group_chat_created of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Service message: the group has been created

        :return: The group_chat_created of this EditMessageCaptionPost200ResponseResult.
        :rtype: bool
        """
        return self._group_chat_created

    @group_chat_created.setter
    def group_chat_created(self, group_chat_created):
        """Sets the group_chat_created of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Service message: the group has been created

        :param group_chat_created: The group_chat_created of this EditMessageCaptionPost200ResponseResult.
        :type group_chat_created: bool
        """

        self._group_chat_created = group_chat_created

    @property
    def invoice(self):
        """Gets the invoice of this EditMessageCaptionPost200ResponseResult.


        :return: The invoice of this EditMessageCaptionPost200ResponseResult.
        :rtype: Invoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this EditMessageCaptionPost200ResponseResult.


        :param invoice: The invoice of this EditMessageCaptionPost200ResponseResult.
        :type invoice: Invoice
        """

        self._invoice = invoice

    @property
    def left_chat_member(self):
        """Gets the left_chat_member of this EditMessageCaptionPost200ResponseResult.


        :return: The left_chat_member of this EditMessageCaptionPost200ResponseResult.
        :rtype: User
        """
        return self._left_chat_member

    @left_chat_member.setter
    def left_chat_member(self, left_chat_member):
        """Sets the left_chat_member of this EditMessageCaptionPost200ResponseResult.


        :param left_chat_member: The left_chat_member of this EditMessageCaptionPost200ResponseResult.
        :type left_chat_member: User
        """

        self._left_chat_member = left_chat_member

    @property
    def location(self):
        """Gets the location of this EditMessageCaptionPost200ResponseResult.


        :return: The location of this EditMessageCaptionPost200ResponseResult.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EditMessageCaptionPost200ResponseResult.


        :param location: The location of this EditMessageCaptionPost200ResponseResult.
        :type location: Location
        """

        self._location = location

    @property
    def media_group_id(self):
        """Gets the media_group_id of this EditMessageCaptionPost200ResponseResult.

        *Optional*. The unique identifier of a media message group this message belongs to

        :return: The media_group_id of this EditMessageCaptionPost200ResponseResult.
        :rtype: str
        """
        return self._media_group_id

    @media_group_id.setter
    def media_group_id(self, media_group_id):
        """Sets the media_group_id of this EditMessageCaptionPost200ResponseResult.

        *Optional*. The unique identifier of a media message group this message belongs to

        :param media_group_id: The media_group_id of this EditMessageCaptionPost200ResponseResult.
        :type media_group_id: str
        """

        self._media_group_id = media_group_id

    @property
    def message_id(self):
        """Gets the message_id of this EditMessageCaptionPost200ResponseResult.

        Unique message identifier inside this chat

        :return: The message_id of this EditMessageCaptionPost200ResponseResult.
        :rtype: int
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this EditMessageCaptionPost200ResponseResult.

        Unique message identifier inside this chat

        :param message_id: The message_id of this EditMessageCaptionPost200ResponseResult.
        :type message_id: int
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")

        self._message_id = message_id

    @property
    def migrate_from_chat_id(self):
        """Gets the migrate_from_chat_id of this EditMessageCaptionPost200ResponseResult.

        *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.

        :return: The migrate_from_chat_id of this EditMessageCaptionPost200ResponseResult.
        :rtype: int
        """
        return self._migrate_from_chat_id

    @migrate_from_chat_id.setter
    def migrate_from_chat_id(self, migrate_from_chat_id):
        """Sets the migrate_from_chat_id of this EditMessageCaptionPost200ResponseResult.

        *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.

        :param migrate_from_chat_id: The migrate_from_chat_id of this EditMessageCaptionPost200ResponseResult.
        :type migrate_from_chat_id: int
        """

        self._migrate_from_chat_id = migrate_from_chat_id

    @property
    def migrate_to_chat_id(self):
        """Gets the migrate_to_chat_id of this EditMessageCaptionPost200ResponseResult.

        *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.

        :return: The migrate_to_chat_id of this EditMessageCaptionPost200ResponseResult.
        :rtype: int
        """
        return self._migrate_to_chat_id

    @migrate_to_chat_id.setter
    def migrate_to_chat_id(self, migrate_to_chat_id):
        """Sets the migrate_to_chat_id of this EditMessageCaptionPost200ResponseResult.

        *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.

        :param migrate_to_chat_id: The migrate_to_chat_id of this EditMessageCaptionPost200ResponseResult.
        :type migrate_to_chat_id: int
        """

        self._migrate_to_chat_id = migrate_to_chat_id

    @property
    def new_chat_members(self):
        """Gets the new_chat_members of this EditMessageCaptionPost200ResponseResult.

        *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)

        :return: The new_chat_members of this EditMessageCaptionPost200ResponseResult.
        :rtype: List[User]
        """
        return self._new_chat_members

    @new_chat_members.setter
    def new_chat_members(self, new_chat_members):
        """Sets the new_chat_members of this EditMessageCaptionPost200ResponseResult.

        *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)

        :param new_chat_members: The new_chat_members of this EditMessageCaptionPost200ResponseResult.
        :type new_chat_members: List[User]
        """

        self._new_chat_members = new_chat_members

    @property
    def new_chat_photo(self):
        """Gets the new_chat_photo of this EditMessageCaptionPost200ResponseResult.

        *Optional*. A chat photo was change to this value

        :return: The new_chat_photo of this EditMessageCaptionPost200ResponseResult.
        :rtype: List[PhotoSize]
        """
        return self._new_chat_photo

    @new_chat_photo.setter
    def new_chat_photo(self, new_chat_photo):
        """Sets the new_chat_photo of this EditMessageCaptionPost200ResponseResult.

        *Optional*. A chat photo was change to this value

        :param new_chat_photo: The new_chat_photo of this EditMessageCaptionPost200ResponseResult.
        :type new_chat_photo: List[PhotoSize]
        """

        self._new_chat_photo = new_chat_photo

    @property
    def new_chat_title(self):
        """Gets the new_chat_title of this EditMessageCaptionPost200ResponseResult.

        *Optional*. A chat title was changed to this value

        :return: The new_chat_title of this EditMessageCaptionPost200ResponseResult.
        :rtype: str
        """
        return self._new_chat_title

    @new_chat_title.setter
    def new_chat_title(self, new_chat_title):
        """Sets the new_chat_title of this EditMessageCaptionPost200ResponseResult.

        *Optional*. A chat title was changed to this value

        :param new_chat_title: The new_chat_title of this EditMessageCaptionPost200ResponseResult.
        :type new_chat_title: str
        """

        self._new_chat_title = new_chat_title

    @property
    def passport_data(self):
        """Gets the passport_data of this EditMessageCaptionPost200ResponseResult.


        :return: The passport_data of this EditMessageCaptionPost200ResponseResult.
        :rtype: PassportData
        """
        return self._passport_data

    @passport_data.setter
    def passport_data(self, passport_data):
        """Sets the passport_data of this EditMessageCaptionPost200ResponseResult.


        :param passport_data: The passport_data of this EditMessageCaptionPost200ResponseResult.
        :type passport_data: PassportData
        """

        self._passport_data = passport_data

    @property
    def photo(self):
        """Gets the photo of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Message is a photo, available sizes of the photo

        :return: The photo of this EditMessageCaptionPost200ResponseResult.
        :rtype: List[PhotoSize]
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Message is a photo, available sizes of the photo

        :param photo: The photo of this EditMessageCaptionPost200ResponseResult.
        :type photo: List[PhotoSize]
        """

        self._photo = photo

    @property
    def pinned_message(self):
        """Gets the pinned_message of this EditMessageCaptionPost200ResponseResult.


        :return: The pinned_message of this EditMessageCaptionPost200ResponseResult.
        :rtype: Message
        """
        return self._pinned_message

    @pinned_message.setter
    def pinned_message(self, pinned_message):
        """Sets the pinned_message of this EditMessageCaptionPost200ResponseResult.


        :param pinned_message: The pinned_message of this EditMessageCaptionPost200ResponseResult.
        :type pinned_message: Message
        """

        self._pinned_message = pinned_message

    @property
    def poll(self):
        """Gets the poll of this EditMessageCaptionPost200ResponseResult.


        :return: The poll of this EditMessageCaptionPost200ResponseResult.
        :rtype: Poll
        """
        return self._poll

    @poll.setter
    def poll(self, poll):
        """Sets the poll of this EditMessageCaptionPost200ResponseResult.


        :param poll: The poll of this EditMessageCaptionPost200ResponseResult.
        :type poll: Poll
        """

        self._poll = poll

    @property
    def proximity_alert_triggered(self):
        """Gets the proximity_alert_triggered of this EditMessageCaptionPost200ResponseResult.


        :return: The proximity_alert_triggered of this EditMessageCaptionPost200ResponseResult.
        :rtype: ProximityAlertTriggered
        """
        return self._proximity_alert_triggered

    @proximity_alert_triggered.setter
    def proximity_alert_triggered(self, proximity_alert_triggered):
        """Sets the proximity_alert_triggered of this EditMessageCaptionPost200ResponseResult.


        :param proximity_alert_triggered: The proximity_alert_triggered of this EditMessageCaptionPost200ResponseResult.
        :type proximity_alert_triggered: ProximityAlertTriggered
        """

        self._proximity_alert_triggered = proximity_alert_triggered

    @property
    def reply_markup(self):
        """Gets the reply_markup of this EditMessageCaptionPost200ResponseResult.


        :return: The reply_markup of this EditMessageCaptionPost200ResponseResult.
        :rtype: InlineKeyboardMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this EditMessageCaptionPost200ResponseResult.


        :param reply_markup: The reply_markup of this EditMessageCaptionPost200ResponseResult.
        :type reply_markup: InlineKeyboardMarkup
        """

        self._reply_markup = reply_markup

    @property
    def reply_to_message(self):
        """Gets the reply_to_message of this EditMessageCaptionPost200ResponseResult.


        :return: The reply_to_message of this EditMessageCaptionPost200ResponseResult.
        :rtype: Message
        """
        return self._reply_to_message

    @reply_to_message.setter
    def reply_to_message(self, reply_to_message):
        """Sets the reply_to_message of this EditMessageCaptionPost200ResponseResult.


        :param reply_to_message: The reply_to_message of this EditMessageCaptionPost200ResponseResult.
        :type reply_to_message: Message
        """

        self._reply_to_message = reply_to_message

    @property
    def sender_chat(self):
        """Gets the sender_chat of this EditMessageCaptionPost200ResponseResult.


        :return: The sender_chat of this EditMessageCaptionPost200ResponseResult.
        :rtype: Chat
        """
        return self._sender_chat

    @sender_chat.setter
    def sender_chat(self, sender_chat):
        """Sets the sender_chat of this EditMessageCaptionPost200ResponseResult.


        :param sender_chat: The sender_chat of this EditMessageCaptionPost200ResponseResult.
        :type sender_chat: Chat
        """

        self._sender_chat = sender_chat

    @property
    def sticker(self):
        """Gets the sticker of this EditMessageCaptionPost200ResponseResult.


        :return: The sticker of this EditMessageCaptionPost200ResponseResult.
        :rtype: Sticker
        """
        return self._sticker

    @sticker.setter
    def sticker(self, sticker):
        """Sets the sticker of this EditMessageCaptionPost200ResponseResult.


        :param sticker: The sticker of this EditMessageCaptionPost200ResponseResult.
        :type sticker: Sticker
        """

        self._sticker = sticker

    @property
    def successful_payment(self):
        """Gets the successful_payment of this EditMessageCaptionPost200ResponseResult.


        :return: The successful_payment of this EditMessageCaptionPost200ResponseResult.
        :rtype: SuccessfulPayment
        """
        return self._successful_payment

    @successful_payment.setter
    def successful_payment(self, successful_payment):
        """Sets the successful_payment of this EditMessageCaptionPost200ResponseResult.


        :param successful_payment: The successful_payment of this EditMessageCaptionPost200ResponseResult.
        :type successful_payment: SuccessfulPayment
        """

        self._successful_payment = successful_payment

    @property
    def supergroup_chat_created(self):
        """Gets the supergroup_chat_created of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a directly created supergroup.

        :return: The supergroup_chat_created of this EditMessageCaptionPost200ResponseResult.
        :rtype: bool
        """
        return self._supergroup_chat_created

    @supergroup_chat_created.setter
    def supergroup_chat_created(self, supergroup_chat_created):
        """Sets the supergroup_chat_created of this EditMessageCaptionPost200ResponseResult.

        *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a directly created supergroup.

        :param supergroup_chat_created: The supergroup_chat_created of this EditMessageCaptionPost200ResponseResult.
        :type supergroup_chat_created: bool
        """

        self._supergroup_chat_created = supergroup_chat_created

    @property
    def text(self):
        """Gets the text of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters

        :return: The text of this EditMessageCaptionPost200ResponseResult.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this EditMessageCaptionPost200ResponseResult.

        *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters

        :param text: The text of this EditMessageCaptionPost200ResponseResult.
        :type text: str
        """

        self._text = text

    @property
    def venue(self):
        """Gets the venue of this EditMessageCaptionPost200ResponseResult.


        :return: The venue of this EditMessageCaptionPost200ResponseResult.
        :rtype: Venue
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this EditMessageCaptionPost200ResponseResult.


        :param venue: The venue of this EditMessageCaptionPost200ResponseResult.
        :type venue: Venue
        """

        self._venue = venue

    @property
    def via_bot(self):
        """Gets the via_bot of this EditMessageCaptionPost200ResponseResult.


        :return: The via_bot of this EditMessageCaptionPost200ResponseResult.
        :rtype: User
        """
        return self._via_bot

    @via_bot.setter
    def via_bot(self, via_bot):
        """Sets the via_bot of this EditMessageCaptionPost200ResponseResult.


        :param via_bot: The via_bot of this EditMessageCaptionPost200ResponseResult.
        :type via_bot: User
        """

        self._via_bot = via_bot

    @property
    def video(self):
        """Gets the video of this EditMessageCaptionPost200ResponseResult.


        :return: The video of this EditMessageCaptionPost200ResponseResult.
        :rtype: Video
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this EditMessageCaptionPost200ResponseResult.


        :param video: The video of this EditMessageCaptionPost200ResponseResult.
        :type video: Video
        """

        self._video = video

    @property
    def video_note(self):
        """Gets the video_note of this EditMessageCaptionPost200ResponseResult.


        :return: The video_note of this EditMessageCaptionPost200ResponseResult.
        :rtype: VideoNote
        """
        return self._video_note

    @video_note.setter
    def video_note(self, video_note):
        """Sets the video_note of this EditMessageCaptionPost200ResponseResult.


        :param video_note: The video_note of this EditMessageCaptionPost200ResponseResult.
        :type video_note: VideoNote
        """

        self._video_note = video_note

    @property
    def voice(self):
        """Gets the voice of this EditMessageCaptionPost200ResponseResult.


        :return: The voice of this EditMessageCaptionPost200ResponseResult.
        :rtype: Voice
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this EditMessageCaptionPost200ResponseResult.


        :param voice: The voice of this EditMessageCaptionPost200ResponseResult.
        :type voice: Voice
        """

        self._voice = voice
