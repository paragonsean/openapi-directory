# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_contact_message_content import InputContactMessageContent
from openapi_server.models.input_location_message_content import InputLocationMessageContent
from openapi_server.models.input_text_message_content import InputTextMessageContent
from openapi_server.models.input_venue_message_content import InputVenueMessageContent
from openapi_server.models.message_entity import MessageEntity
from openapi_server import util


class InputMessageContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_web_page_preview: bool=None, entities: List[MessageEntity]=None, message_text: str=None, parse_mode: str=None, heading: int=None, horizontal_accuracy: float=None, latitude: float=None, live_period: int=None, longitude: float=None, proximity_alert_radius: int=None, address: str=None, foursquare_id: str=None, foursquare_type: str=None, google_place_id: str=None, google_place_type: str=None, title: str=None, first_name: str=None, last_name: str=None, phone_number: str=None, vcard: str=None):
        """InputMessageContent - a model defined in OpenAPI

        :param disable_web_page_preview: The disable_web_page_preview of this InputMessageContent.
        :param entities: The entities of this InputMessageContent.
        :param message_text: The message_text of this InputMessageContent.
        :param parse_mode: The parse_mode of this InputMessageContent.
        :param heading: The heading of this InputMessageContent.
        :param horizontal_accuracy: The horizontal_accuracy of this InputMessageContent.
        :param latitude: The latitude of this InputMessageContent.
        :param live_period: The live_period of this InputMessageContent.
        :param longitude: The longitude of this InputMessageContent.
        :param proximity_alert_radius: The proximity_alert_radius of this InputMessageContent.
        :param address: The address of this InputMessageContent.
        :param foursquare_id: The foursquare_id of this InputMessageContent.
        :param foursquare_type: The foursquare_type of this InputMessageContent.
        :param google_place_id: The google_place_id of this InputMessageContent.
        :param google_place_type: The google_place_type of this InputMessageContent.
        :param title: The title of this InputMessageContent.
        :param first_name: The first_name of this InputMessageContent.
        :param last_name: The last_name of this InputMessageContent.
        :param phone_number: The phone_number of this InputMessageContent.
        :param vcard: The vcard of this InputMessageContent.
        """
        self.openapi_types = {
            'disable_web_page_preview': bool,
            'entities': List[MessageEntity],
            'message_text': str,
            'parse_mode': str,
            'heading': int,
            'horizontal_accuracy': float,
            'latitude': float,
            'live_period': int,
            'longitude': float,
            'proximity_alert_radius': int,
            'address': str,
            'foursquare_id': str,
            'foursquare_type': str,
            'google_place_id': str,
            'google_place_type': str,
            'title': str,
            'first_name': str,
            'last_name': str,
            'phone_number': str,
            'vcard': str
        }

        self.attribute_map = {
            'disable_web_page_preview': 'disable_web_page_preview',
            'entities': 'entities',
            'message_text': 'message_text',
            'parse_mode': 'parse_mode',
            'heading': 'heading',
            'horizontal_accuracy': 'horizontal_accuracy',
            'latitude': 'latitude',
            'live_period': 'live_period',
            'longitude': 'longitude',
            'proximity_alert_radius': 'proximity_alert_radius',
            'address': 'address',
            'foursquare_id': 'foursquare_id',
            'foursquare_type': 'foursquare_type',
            'google_place_id': 'google_place_id',
            'google_place_type': 'google_place_type',
            'title': 'title',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'phone_number': 'phone_number',
            'vcard': 'vcard'
        }

        self._disable_web_page_preview = disable_web_page_preview
        self._entities = entities
        self._message_text = message_text
        self._parse_mode = parse_mode
        self._heading = heading
        self._horizontal_accuracy = horizontal_accuracy
        self._latitude = latitude
        self._live_period = live_period
        self._longitude = longitude
        self._proximity_alert_radius = proximity_alert_radius
        self._address = address
        self._foursquare_id = foursquare_id
        self._foursquare_type = foursquare_type
        self._google_place_id = google_place_id
        self._google_place_type = google_place_type
        self._title = title
        self._first_name = first_name
        self._last_name = last_name
        self._phone_number = phone_number
        self._vcard = vcard

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputMessageContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputMessageContent of this InputMessageContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_web_page_preview(self):
        """Gets the disable_web_page_preview of this InputMessageContent.

        *Optional*. Disables link previews for links in the sent message

        :return: The disable_web_page_preview of this InputMessageContent.
        :rtype: bool
        """
        return self._disable_web_page_preview

    @disable_web_page_preview.setter
    def disable_web_page_preview(self, disable_web_page_preview):
        """Sets the disable_web_page_preview of this InputMessageContent.

        *Optional*. Disables link previews for links in the sent message

        :param disable_web_page_preview: The disable_web_page_preview of this InputMessageContent.
        :type disable_web_page_preview: bool
        """

        self._disable_web_page_preview = disable_web_page_preview

    @property
    def entities(self):
        """Gets the entities of this InputMessageContent.

        *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\\_mode*

        :return: The entities of this InputMessageContent.
        :rtype: List[MessageEntity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this InputMessageContent.

        *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\\_mode*

        :param entities: The entities of this InputMessageContent.
        :type entities: List[MessageEntity]
        """

        self._entities = entities

    @property
    def message_text(self):
        """Gets the message_text of this InputMessageContent.

        Text of the message to be sent, 1-4096 characters

        :return: The message_text of this InputMessageContent.
        :rtype: str
        """
        return self._message_text

    @message_text.setter
    def message_text(self, message_text):
        """Sets the message_text of this InputMessageContent.

        Text of the message to be sent, 1-4096 characters

        :param message_text: The message_text of this InputMessageContent.
        :type message_text: str
        """
        if message_text is None:
            raise ValueError("Invalid value for `message_text`, must not be `None`")

        self._message_text = message_text

    @property
    def parse_mode(self):
        """Gets the parse_mode of this InputMessageContent.

        *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :return: The parse_mode of this InputMessageContent.
        :rtype: str
        """
        return self._parse_mode

    @parse_mode.setter
    def parse_mode(self, parse_mode):
        """Sets the parse_mode of this InputMessageContent.

        *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :param parse_mode: The parse_mode of this InputMessageContent.
        :type parse_mode: str
        """

        self._parse_mode = parse_mode

    @property
    def heading(self):
        """Gets the heading of this InputMessageContent.

        *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :return: The heading of this InputMessageContent.
        :rtype: int
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this InputMessageContent.

        *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :param heading: The heading of this InputMessageContent.
        :type heading: int
        """

        self._heading = heading

    @property
    def horizontal_accuracy(self):
        """Gets the horizontal_accuracy of this InputMessageContent.

        *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500

        :return: The horizontal_accuracy of this InputMessageContent.
        :rtype: float
        """
        return self._horizontal_accuracy

    @horizontal_accuracy.setter
    def horizontal_accuracy(self, horizontal_accuracy):
        """Sets the horizontal_accuracy of this InputMessageContent.

        *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500

        :param horizontal_accuracy: The horizontal_accuracy of this InputMessageContent.
        :type horizontal_accuracy: float
        """

        self._horizontal_accuracy = horizontal_accuracy

    @property
    def latitude(self):
        """Gets the latitude of this InputMessageContent.

        Latitude of the venue in degrees

        :return: The latitude of this InputMessageContent.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this InputMessageContent.

        Latitude of the venue in degrees

        :param latitude: The latitude of this InputMessageContent.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def live_period(self):
        """Gets the live_period of this InputMessageContent.

        *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.

        :return: The live_period of this InputMessageContent.
        :rtype: int
        """
        return self._live_period

    @live_period.setter
    def live_period(self, live_period):
        """Sets the live_period of this InputMessageContent.

        *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.

        :param live_period: The live_period of this InputMessageContent.
        :type live_period: int
        """

        self._live_period = live_period

    @property
    def longitude(self):
        """Gets the longitude of this InputMessageContent.

        Longitude of the venue in degrees

        :return: The longitude of this InputMessageContent.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this InputMessageContent.

        Longitude of the venue in degrees

        :param longitude: The longitude of this InputMessageContent.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def proximity_alert_radius(self):
        """Gets the proximity_alert_radius of this InputMessageContent.

        *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :return: The proximity_alert_radius of this InputMessageContent.
        :rtype: int
        """
        return self._proximity_alert_radius

    @proximity_alert_radius.setter
    def proximity_alert_radius(self, proximity_alert_radius):
        """Sets the proximity_alert_radius of this InputMessageContent.

        *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :param proximity_alert_radius: The proximity_alert_radius of this InputMessageContent.
        :type proximity_alert_radius: int
        """

        self._proximity_alert_radius = proximity_alert_radius

    @property
    def address(self):
        """Gets the address of this InputMessageContent.

        Address of the venue

        :return: The address of this InputMessageContent.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InputMessageContent.

        Address of the venue

        :param address: The address of this InputMessageContent.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def foursquare_id(self):
        """Gets the foursquare_id of this InputMessageContent.

        *Optional*. Foursquare identifier of the venue, if known

        :return: The foursquare_id of this InputMessageContent.
        :rtype: str
        """
        return self._foursquare_id

    @foursquare_id.setter
    def foursquare_id(self, foursquare_id):
        """Sets the foursquare_id of this InputMessageContent.

        *Optional*. Foursquare identifier of the venue, if known

        :param foursquare_id: The foursquare_id of this InputMessageContent.
        :type foursquare_id: str
        """

        self._foursquare_id = foursquare_id

    @property
    def foursquare_type(self):
        """Gets the foursquare_type of this InputMessageContent.

        *Optional*. Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)

        :return: The foursquare_type of this InputMessageContent.
        :rtype: str
        """
        return self._foursquare_type

    @foursquare_type.setter
    def foursquare_type(self, foursquare_type):
        """Sets the foursquare_type of this InputMessageContent.

        *Optional*. Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)

        :param foursquare_type: The foursquare_type of this InputMessageContent.
        :type foursquare_type: str
        """

        self._foursquare_type = foursquare_type

    @property
    def google_place_id(self):
        """Gets the google_place_id of this InputMessageContent.

        *Optional*. Google Places identifier of the venue

        :return: The google_place_id of this InputMessageContent.
        :rtype: str
        """
        return self._google_place_id

    @google_place_id.setter
    def google_place_id(self, google_place_id):
        """Sets the google_place_id of this InputMessageContent.

        *Optional*. Google Places identifier of the venue

        :param google_place_id: The google_place_id of this InputMessageContent.
        :type google_place_id: str
        """

        self._google_place_id = google_place_id

    @property
    def google_place_type(self):
        """Gets the google_place_type of this InputMessageContent.

        *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)

        :return: The google_place_type of this InputMessageContent.
        :rtype: str
        """
        return self._google_place_type

    @google_place_type.setter
    def google_place_type(self, google_place_type):
        """Sets the google_place_type of this InputMessageContent.

        *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)

        :param google_place_type: The google_place_type of this InputMessageContent.
        :type google_place_type: str
        """

        self._google_place_type = google_place_type

    @property
    def title(self):
        """Gets the title of this InputMessageContent.

        Name of the venue

        :return: The title of this InputMessageContent.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InputMessageContent.

        Name of the venue

        :param title: The title of this InputMessageContent.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def first_name(self):
        """Gets the first_name of this InputMessageContent.

        Contact's first name

        :return: The first_name of this InputMessageContent.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this InputMessageContent.

        Contact's first name

        :param first_name: The first_name of this InputMessageContent.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this InputMessageContent.

        *Optional*. Contact's last name

        :return: The last_name of this InputMessageContent.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this InputMessageContent.

        *Optional*. Contact's last name

        :param last_name: The last_name of this InputMessageContent.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this InputMessageContent.

        Contact's phone number

        :return: The phone_number of this InputMessageContent.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this InputMessageContent.

        Contact's phone number

        :param phone_number: The phone_number of this InputMessageContent.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def vcard(self):
        """Gets the vcard of this InputMessageContent.

        *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes

        :return: The vcard of this InputMessageContent.
        :rtype: str
        """
        return self._vcard

    @vcard.setter
    def vcard(self, vcard):
        """Sets the vcard of this InputMessageContent.

        *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes

        :param vcard: The vcard of this InputMessageContent.
        :type vcard: str
        """

        self._vcard = vcard
