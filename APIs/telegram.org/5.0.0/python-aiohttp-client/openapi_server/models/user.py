# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_join_groups: bool=None, can_read_all_group_messages: bool=None, first_name: str=None, id: int=None, is_bot: bool=None, language_code: str=None, last_name: str=None, supports_inline_queries: bool=None, username: str=None):
        """User - a model defined in OpenAPI

        :param can_join_groups: The can_join_groups of this User.
        :param can_read_all_group_messages: The can_read_all_group_messages of this User.
        :param first_name: The first_name of this User.
        :param id: The id of this User.
        :param is_bot: The is_bot of this User.
        :param language_code: The language_code of this User.
        :param last_name: The last_name of this User.
        :param supports_inline_queries: The supports_inline_queries of this User.
        :param username: The username of this User.
        """
        self.openapi_types = {
            'can_join_groups': bool,
            'can_read_all_group_messages': bool,
            'first_name': str,
            'id': int,
            'is_bot': bool,
            'language_code': str,
            'last_name': str,
            'supports_inline_queries': bool,
            'username': str
        }

        self.attribute_map = {
            'can_join_groups': 'can_join_groups',
            'can_read_all_group_messages': 'can_read_all_group_messages',
            'first_name': 'first_name',
            'id': 'id',
            'is_bot': 'is_bot',
            'language_code': 'language_code',
            'last_name': 'last_name',
            'supports_inline_queries': 'supports_inline_queries',
            'username': 'username'
        }

        self._can_join_groups = can_join_groups
        self._can_read_all_group_messages = can_read_all_group_messages
        self._first_name = first_name
        self._id = id
        self._is_bot = is_bot
        self._language_code = language_code
        self._last_name = last_name
        self._supports_inline_queries = supports_inline_queries
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_join_groups(self):
        """Gets the can_join_groups of this User.

        *Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).

        :return: The can_join_groups of this User.
        :rtype: bool
        """
        return self._can_join_groups

    @can_join_groups.setter
    def can_join_groups(self, can_join_groups):
        """Sets the can_join_groups of this User.

        *Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).

        :param can_join_groups: The can_join_groups of this User.
        :type can_join_groups: bool
        """

        self._can_join_groups = can_join_groups

    @property
    def can_read_all_group_messages(self):
        """Gets the can_read_all_group_messages of this User.

        *Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).

        :return: The can_read_all_group_messages of this User.
        :rtype: bool
        """
        return self._can_read_all_group_messages

    @can_read_all_group_messages.setter
    def can_read_all_group_messages(self, can_read_all_group_messages):
        """Sets the can_read_all_group_messages of this User.

        *Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).

        :param can_read_all_group_messages: The can_read_all_group_messages of this User.
        :type can_read_all_group_messages: bool
        """

        self._can_read_all_group_messages = can_read_all_group_messages

    @property
    def first_name(self):
        """Gets the first_name of this User.

        User's or bot's first name

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        User's or bot's first name

        :param first_name: The first_name of this User.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this User.

        Unique identifier for this user or bot

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        Unique identifier for this user or bot

        :param id: The id of this User.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_bot(self):
        """Gets the is_bot of this User.

        True, if this user is a bot

        :return: The is_bot of this User.
        :rtype: bool
        """
        return self._is_bot

    @is_bot.setter
    def is_bot(self, is_bot):
        """Sets the is_bot of this User.

        True, if this user is a bot

        :param is_bot: The is_bot of this User.
        :type is_bot: bool
        """
        if is_bot is None:
            raise ValueError("Invalid value for `is_bot`, must not be `None`")

        self._is_bot = is_bot

    @property
    def language_code(self):
        """Gets the language_code of this User.

        *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language

        :return: The language_code of this User.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this User.

        *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language

        :param language_code: The language_code of this User.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def last_name(self):
        """Gets the last_name of this User.

        *Optional*. User's or bot's last name

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        *Optional*. User's or bot's last name

        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def supports_inline_queries(self):
        """Gets the supports_inline_queries of this User.

        *Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).

        :return: The supports_inline_queries of this User.
        :rtype: bool
        """
        return self._supports_inline_queries

    @supports_inline_queries.setter
    def supports_inline_queries(self, supports_inline_queries):
        """Sets the supports_inline_queries of this User.

        *Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).

        :param supports_inline_queries: The supports_inline_queries of this User.
        :type supports_inline_queries: bool
        """

        self._supports_inline_queries = supports_inline_queries

    @property
    def username(self):
        """Gets the username of this User.

        *Optional*. User's or bot's username

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        *Optional*. User's or bot's username

        :param username: The username of this User.
        :type username: str
        """

        self._username = username
