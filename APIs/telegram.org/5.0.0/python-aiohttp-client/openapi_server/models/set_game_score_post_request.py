# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetGameScorePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_id: int=None, disable_edit_message: bool=None, force: bool=None, inline_message_id: str=None, message_id: int=None, score: int=None, user_id: int=None):
        """SetGameScorePostRequest - a model defined in OpenAPI

        :param chat_id: The chat_id of this SetGameScorePostRequest.
        :param disable_edit_message: The disable_edit_message of this SetGameScorePostRequest.
        :param force: The force of this SetGameScorePostRequest.
        :param inline_message_id: The inline_message_id of this SetGameScorePostRequest.
        :param message_id: The message_id of this SetGameScorePostRequest.
        :param score: The score of this SetGameScorePostRequest.
        :param user_id: The user_id of this SetGameScorePostRequest.
        """
        self.openapi_types = {
            'chat_id': int,
            'disable_edit_message': bool,
            'force': bool,
            'inline_message_id': str,
            'message_id': int,
            'score': int,
            'user_id': int
        }

        self.attribute_map = {
            'chat_id': 'chat_id',
            'disable_edit_message': 'disable_edit_message',
            'force': 'force',
            'inline_message_id': 'inline_message_id',
            'message_id': 'message_id',
            'score': 'score',
            'user_id': 'user_id'
        }

        self._chat_id = chat_id
        self._disable_edit_message = disable_edit_message
        self._force = force
        self._inline_message_id = inline_message_id
        self._message_id = message_id
        self._score = score
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetGameScorePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _setGameScore_post_request of this SetGameScorePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_id(self):
        """Gets the chat_id of this SetGameScorePostRequest.

        Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat

        :return: The chat_id of this SetGameScorePostRequest.
        :rtype: int
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SetGameScorePostRequest.

        Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat

        :param chat_id: The chat_id of this SetGameScorePostRequest.
        :type chat_id: int
        """

        self._chat_id = chat_id

    @property
    def disable_edit_message(self):
        """Gets the disable_edit_message of this SetGameScorePostRequest.

        Pass True, if the game message should not be automatically edited to include the current scoreboard

        :return: The disable_edit_message of this SetGameScorePostRequest.
        :rtype: bool
        """
        return self._disable_edit_message

    @disable_edit_message.setter
    def disable_edit_message(self, disable_edit_message):
        """Sets the disable_edit_message of this SetGameScorePostRequest.

        Pass True, if the game message should not be automatically edited to include the current scoreboard

        :param disable_edit_message: The disable_edit_message of this SetGameScorePostRequest.
        :type disable_edit_message: bool
        """

        self._disable_edit_message = disable_edit_message

    @property
    def force(self):
        """Gets the force of this SetGameScorePostRequest.

        Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters

        :return: The force of this SetGameScorePostRequest.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this SetGameScorePostRequest.

        Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters

        :param force: The force of this SetGameScorePostRequest.
        :type force: bool
        """

        self._force = force

    @property
    def inline_message_id(self):
        """Gets the inline_message_id of this SetGameScorePostRequest.

        Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message

        :return: The inline_message_id of this SetGameScorePostRequest.
        :rtype: str
        """
        return self._inline_message_id

    @inline_message_id.setter
    def inline_message_id(self, inline_message_id):
        """Sets the inline_message_id of this SetGameScorePostRequest.

        Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message

        :param inline_message_id: The inline_message_id of this SetGameScorePostRequest.
        :type inline_message_id: str
        """

        self._inline_message_id = inline_message_id

    @property
    def message_id(self):
        """Gets the message_id of this SetGameScorePostRequest.

        Required if *inline\\_message\\_id* is not specified. Identifier of the sent message

        :return: The message_id of this SetGameScorePostRequest.
        :rtype: int
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this SetGameScorePostRequest.

        Required if *inline\\_message\\_id* is not specified. Identifier of the sent message

        :param message_id: The message_id of this SetGameScorePostRequest.
        :type message_id: int
        """

        self._message_id = message_id

    @property
    def score(self):
        """Gets the score of this SetGameScorePostRequest.

        New score, must be non-negative

        :return: The score of this SetGameScorePostRequest.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SetGameScorePostRequest.

        New score, must be non-negative

        :param score: The score of this SetGameScorePostRequest.
        :type score: int
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def user_id(self):
        """Gets the user_id of this SetGameScorePostRequest.

        User identifier

        :return: The user_id of this SetGameScorePostRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SetGameScorePostRequest.

        User identifier

        :param user_id: The user_id of this SetGameScorePostRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
