# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class PollAnswer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, option_ids: List[int]=None, poll_id: str=None, user: User=None):
        """PollAnswer - a model defined in OpenAPI

        :param option_ids: The option_ids of this PollAnswer.
        :param poll_id: The poll_id of this PollAnswer.
        :param user: The user of this PollAnswer.
        """
        self.openapi_types = {
            'option_ids': List[int],
            'poll_id': str,
            'user': User
        }

        self.attribute_map = {
            'option_ids': 'option_ids',
            'poll_id': 'poll_id',
            'user': 'user'
        }

        self._option_ids = option_ids
        self._poll_id = poll_id
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PollAnswer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PollAnswer of this PollAnswer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def option_ids(self):
        """Gets the option_ids of this PollAnswer.

        0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.

        :return: The option_ids of this PollAnswer.
        :rtype: List[int]
        """
        return self._option_ids

    @option_ids.setter
    def option_ids(self, option_ids):
        """Sets the option_ids of this PollAnswer.

        0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.

        :param option_ids: The option_ids of this PollAnswer.
        :type option_ids: List[int]
        """
        if option_ids is None:
            raise ValueError("Invalid value for `option_ids`, must not be `None`")

        self._option_ids = option_ids

    @property
    def poll_id(self):
        """Gets the poll_id of this PollAnswer.

        Unique poll identifier

        :return: The poll_id of this PollAnswer.
        :rtype: str
        """
        return self._poll_id

    @poll_id.setter
    def poll_id(self, poll_id):
        """Sets the poll_id of this PollAnswer.

        Unique poll identifier

        :param poll_id: The poll_id of this PollAnswer.
        :type poll_id: str
        """
        if poll_id is None:
            raise ValueError("Invalid value for `poll_id`, must not be `None`")

        self._poll_id = poll_id

    @property
    def user(self):
        """Gets the user of this PollAnswer.


        :return: The user of this PollAnswer.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PollAnswer.


        :param user: The user of this PollAnswer.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
