# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.animation import Animation
from openapi_server.models.message_entity import MessageEntity
from openapi_server.models.photo_size import PhotoSize
from openapi_server import util


class Game(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, animation: Animation=None, description: str=None, photo: List[PhotoSize]=None, text: str=None, text_entities: List[MessageEntity]=None, title: str=None):
        """Game - a model defined in OpenAPI

        :param animation: The animation of this Game.
        :param description: The description of this Game.
        :param photo: The photo of this Game.
        :param text: The text of this Game.
        :param text_entities: The text_entities of this Game.
        :param title: The title of this Game.
        """
        self.openapi_types = {
            'animation': Animation,
            'description': str,
            'photo': List[PhotoSize],
            'text': str,
            'text_entities': List[MessageEntity],
            'title': str
        }

        self.attribute_map = {
            'animation': 'animation',
            'description': 'description',
            'photo': 'photo',
            'text': 'text',
            'text_entities': 'text_entities',
            'title': 'title'
        }

        self._animation = animation
        self._description = description
        self._photo = photo
        self._text = text
        self._text_entities = text_entities
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Game':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Game of this Game.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def animation(self):
        """Gets the animation of this Game.


        :return: The animation of this Game.
        :rtype: Animation
        """
        return self._animation

    @animation.setter
    def animation(self, animation):
        """Sets the animation of this Game.


        :param animation: The animation of this Game.
        :type animation: Animation
        """

        self._animation = animation

    @property
    def description(self):
        """Gets the description of this Game.

        Description of the game

        :return: The description of this Game.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Game.

        Description of the game

        :param description: The description of this Game.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def photo(self):
        """Gets the photo of this Game.

        Photo that will be displayed in the game message in chats.

        :return: The photo of this Game.
        :rtype: List[PhotoSize]
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this Game.

        Photo that will be displayed in the game message in chats.

        :param photo: The photo of this Game.
        :type photo: List[PhotoSize]
        """
        if photo is None:
            raise ValueError("Invalid value for `photo`, must not be `None`")

        self._photo = photo

    @property
    def text(self):
        """Gets the text of this Game.

        *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.

        :return: The text of this Game.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Game.

        *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.

        :param text: The text of this Game.
        :type text: str
        """

        self._text = text

    @property
    def text_entities(self):
        """Gets the text_entities of this Game.

        *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.

        :return: The text_entities of this Game.
        :rtype: List[MessageEntity]
        """
        return self._text_entities

    @text_entities.setter
    def text_entities(self, text_entities):
        """Sets the text_entities of this Game.

        *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.

        :param text_entities: The text_entities of this Game.
        :type text_entities: List[MessageEntity]
        """

        self._text_entities = text_entities

    @property
    def title(self):
        """Gets the title of this Game.

        Title of the game

        :return: The title of this Game.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Game.

        Title of the game

        :param title: The title of this Game.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
