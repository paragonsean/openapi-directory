# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server import util


class InlineQueryResultGame(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, game_short_name: str=None, id: str=None, reply_markup: InlineKeyboardMarkup=None, type: str=None):
        """InlineQueryResultGame - a model defined in OpenAPI

        :param game_short_name: The game_short_name of this InlineQueryResultGame.
        :param id: The id of this InlineQueryResultGame.
        :param reply_markup: The reply_markup of this InlineQueryResultGame.
        :param type: The type of this InlineQueryResultGame.
        """
        self.openapi_types = {
            'game_short_name': str,
            'id': str,
            'reply_markup': InlineKeyboardMarkup,
            'type': str
        }

        self.attribute_map = {
            'game_short_name': 'game_short_name',
            'id': 'id',
            'reply_markup': 'reply_markup',
            'type': 'type'
        }

        self._game_short_name = game_short_name
        self._id = id
        self._reply_markup = reply_markup
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineQueryResultGame':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InlineQueryResultGame of this InlineQueryResultGame.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game_short_name(self):
        """Gets the game_short_name of this InlineQueryResultGame.

        Short name of the game

        :return: The game_short_name of this InlineQueryResultGame.
        :rtype: str
        """
        return self._game_short_name

    @game_short_name.setter
    def game_short_name(self, game_short_name):
        """Sets the game_short_name of this InlineQueryResultGame.

        Short name of the game

        :param game_short_name: The game_short_name of this InlineQueryResultGame.
        :type game_short_name: str
        """
        if game_short_name is None:
            raise ValueError("Invalid value for `game_short_name`, must not be `None`")

        self._game_short_name = game_short_name

    @property
    def id(self):
        """Gets the id of this InlineQueryResultGame.

        Unique identifier for this result, 1-64 bytes

        :return: The id of this InlineQueryResultGame.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineQueryResultGame.

        Unique identifier for this result, 1-64 bytes

        :param id: The id of this InlineQueryResultGame.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def reply_markup(self):
        """Gets the reply_markup of this InlineQueryResultGame.


        :return: The reply_markup of this InlineQueryResultGame.
        :rtype: InlineKeyboardMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this InlineQueryResultGame.


        :param reply_markup: The reply_markup of this InlineQueryResultGame.
        :type reply_markup: InlineKeyboardMarkup
        """

        self._reply_markup = reply_markup

    @property
    def type(self):
        """Gets the type of this InlineQueryResultGame.

        Type of the result, must be *game*

        :return: The type of this InlineQueryResultGame.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineQueryResultGame.

        Type of the result, must be *game*

        :param type: The type of this InlineQueryResultGame.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
