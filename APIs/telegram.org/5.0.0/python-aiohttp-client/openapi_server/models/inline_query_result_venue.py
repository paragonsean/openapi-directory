# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server.models.input_message_content import InputMessageContent
from openapi_server import util


class InlineQueryResultVenue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, foursquare_id: str=None, foursquare_type: str=None, google_place_id: str=None, google_place_type: str=None, id: str=None, input_message_content: InputMessageContent=None, latitude: float=None, longitude: float=None, reply_markup: InlineKeyboardMarkup=None, thumb_height: int=None, thumb_url: str=None, thumb_width: int=None, title: str=None, type: str=None):
        """InlineQueryResultVenue - a model defined in OpenAPI

        :param address: The address of this InlineQueryResultVenue.
        :param foursquare_id: The foursquare_id of this InlineQueryResultVenue.
        :param foursquare_type: The foursquare_type of this InlineQueryResultVenue.
        :param google_place_id: The google_place_id of this InlineQueryResultVenue.
        :param google_place_type: The google_place_type of this InlineQueryResultVenue.
        :param id: The id of this InlineQueryResultVenue.
        :param input_message_content: The input_message_content of this InlineQueryResultVenue.
        :param latitude: The latitude of this InlineQueryResultVenue.
        :param longitude: The longitude of this InlineQueryResultVenue.
        :param reply_markup: The reply_markup of this InlineQueryResultVenue.
        :param thumb_height: The thumb_height of this InlineQueryResultVenue.
        :param thumb_url: The thumb_url of this InlineQueryResultVenue.
        :param thumb_width: The thumb_width of this InlineQueryResultVenue.
        :param title: The title of this InlineQueryResultVenue.
        :param type: The type of this InlineQueryResultVenue.
        """
        self.openapi_types = {
            'address': str,
            'foursquare_id': str,
            'foursquare_type': str,
            'google_place_id': str,
            'google_place_type': str,
            'id': str,
            'input_message_content': InputMessageContent,
            'latitude': float,
            'longitude': float,
            'reply_markup': InlineKeyboardMarkup,
            'thumb_height': int,
            'thumb_url': str,
            'thumb_width': int,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'address': 'address',
            'foursquare_id': 'foursquare_id',
            'foursquare_type': 'foursquare_type',
            'google_place_id': 'google_place_id',
            'google_place_type': 'google_place_type',
            'id': 'id',
            'input_message_content': 'input_message_content',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'reply_markup': 'reply_markup',
            'thumb_height': 'thumb_height',
            'thumb_url': 'thumb_url',
            'thumb_width': 'thumb_width',
            'title': 'title',
            'type': 'type'
        }

        self._address = address
        self._foursquare_id = foursquare_id
        self._foursquare_type = foursquare_type
        self._google_place_id = google_place_id
        self._google_place_type = google_place_type
        self._id = id
        self._input_message_content = input_message_content
        self._latitude = latitude
        self._longitude = longitude
        self._reply_markup = reply_markup
        self._thumb_height = thumb_height
        self._thumb_url = thumb_url
        self._thumb_width = thumb_width
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineQueryResultVenue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InlineQueryResultVenue of this InlineQueryResultVenue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this InlineQueryResultVenue.

        Address of the venue

        :return: The address of this InlineQueryResultVenue.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineQueryResultVenue.

        Address of the venue

        :param address: The address of this InlineQueryResultVenue.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def foursquare_id(self):
        """Gets the foursquare_id of this InlineQueryResultVenue.

        *Optional*. Foursquare identifier of the venue if known

        :return: The foursquare_id of this InlineQueryResultVenue.
        :rtype: str
        """
        return self._foursquare_id

    @foursquare_id.setter
    def foursquare_id(self, foursquare_id):
        """Sets the foursquare_id of this InlineQueryResultVenue.

        *Optional*. Foursquare identifier of the venue if known

        :param foursquare_id: The foursquare_id of this InlineQueryResultVenue.
        :type foursquare_id: str
        """

        self._foursquare_id = foursquare_id

    @property
    def foursquare_type(self):
        """Gets the foursquare_type of this InlineQueryResultVenue.

        *Optional*. Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)

        :return: The foursquare_type of this InlineQueryResultVenue.
        :rtype: str
        """
        return self._foursquare_type

    @foursquare_type.setter
    def foursquare_type(self, foursquare_type):
        """Sets the foursquare_type of this InlineQueryResultVenue.

        *Optional*. Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)

        :param foursquare_type: The foursquare_type of this InlineQueryResultVenue.
        :type foursquare_type: str
        """

        self._foursquare_type = foursquare_type

    @property
    def google_place_id(self):
        """Gets the google_place_id of this InlineQueryResultVenue.

        *Optional*. Google Places identifier of the venue

        :return: The google_place_id of this InlineQueryResultVenue.
        :rtype: str
        """
        return self._google_place_id

    @google_place_id.setter
    def google_place_id(self, google_place_id):
        """Sets the google_place_id of this InlineQueryResultVenue.

        *Optional*. Google Places identifier of the venue

        :param google_place_id: The google_place_id of this InlineQueryResultVenue.
        :type google_place_id: str
        """

        self._google_place_id = google_place_id

    @property
    def google_place_type(self):
        """Gets the google_place_type of this InlineQueryResultVenue.

        *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)

        :return: The google_place_type of this InlineQueryResultVenue.
        :rtype: str
        """
        return self._google_place_type

    @google_place_type.setter
    def google_place_type(self, google_place_type):
        """Sets the google_place_type of this InlineQueryResultVenue.

        *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)

        :param google_place_type: The google_place_type of this InlineQueryResultVenue.
        :type google_place_type: str
        """

        self._google_place_type = google_place_type

    @property
    def id(self):
        """Gets the id of this InlineQueryResultVenue.

        Unique identifier for this result, 1-64 Bytes

        :return: The id of this InlineQueryResultVenue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineQueryResultVenue.

        Unique identifier for this result, 1-64 Bytes

        :param id: The id of this InlineQueryResultVenue.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def input_message_content(self):
        """Gets the input_message_content of this InlineQueryResultVenue.


        :return: The input_message_content of this InlineQueryResultVenue.
        :rtype: InputMessageContent
        """
        return self._input_message_content

    @input_message_content.setter
    def input_message_content(self, input_message_content):
        """Sets the input_message_content of this InlineQueryResultVenue.


        :param input_message_content: The input_message_content of this InlineQueryResultVenue.
        :type input_message_content: InputMessageContent
        """

        self._input_message_content = input_message_content

    @property
    def latitude(self):
        """Gets the latitude of this InlineQueryResultVenue.

        Latitude of the venue location in degrees

        :return: The latitude of this InlineQueryResultVenue.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this InlineQueryResultVenue.

        Latitude of the venue location in degrees

        :param latitude: The latitude of this InlineQueryResultVenue.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this InlineQueryResultVenue.

        Longitude of the venue location in degrees

        :return: The longitude of this InlineQueryResultVenue.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this InlineQueryResultVenue.

        Longitude of the venue location in degrees

        :param longitude: The longitude of this InlineQueryResultVenue.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def reply_markup(self):
        """Gets the reply_markup of this InlineQueryResultVenue.


        :return: The reply_markup of this InlineQueryResultVenue.
        :rtype: InlineKeyboardMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this InlineQueryResultVenue.


        :param reply_markup: The reply_markup of this InlineQueryResultVenue.
        :type reply_markup: InlineKeyboardMarkup
        """

        self._reply_markup = reply_markup

    @property
    def thumb_height(self):
        """Gets the thumb_height of this InlineQueryResultVenue.

        *Optional*. Thumbnail height

        :return: The thumb_height of this InlineQueryResultVenue.
        :rtype: int
        """
        return self._thumb_height

    @thumb_height.setter
    def thumb_height(self, thumb_height):
        """Sets the thumb_height of this InlineQueryResultVenue.

        *Optional*. Thumbnail height

        :param thumb_height: The thumb_height of this InlineQueryResultVenue.
        :type thumb_height: int
        """

        self._thumb_height = thumb_height

    @property
    def thumb_url(self):
        """Gets the thumb_url of this InlineQueryResultVenue.

        *Optional*. Url of the thumbnail for the result

        :return: The thumb_url of this InlineQueryResultVenue.
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this InlineQueryResultVenue.

        *Optional*. Url of the thumbnail for the result

        :param thumb_url: The thumb_url of this InlineQueryResultVenue.
        :type thumb_url: str
        """

        self._thumb_url = thumb_url

    @property
    def thumb_width(self):
        """Gets the thumb_width of this InlineQueryResultVenue.

        *Optional*. Thumbnail width

        :return: The thumb_width of this InlineQueryResultVenue.
        :rtype: int
        """
        return self._thumb_width

    @thumb_width.setter
    def thumb_width(self, thumb_width):
        """Sets the thumb_width of this InlineQueryResultVenue.

        *Optional*. Thumbnail width

        :param thumb_width: The thumb_width of this InlineQueryResultVenue.
        :type thumb_width: int
        """

        self._thumb_width = thumb_width

    @property
    def title(self):
        """Gets the title of this InlineQueryResultVenue.

        Title of the venue

        :return: The title of this InlineQueryResultVenue.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineQueryResultVenue.

        Title of the venue

        :param title: The title of this InlineQueryResultVenue.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this InlineQueryResultVenue.

        Type of the result, must be *venue*

        :return: The type of this InlineQueryResultVenue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineQueryResultVenue.

        Type of the result, must be *venue*

        :param type: The type of this InlineQueryResultVenue.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
