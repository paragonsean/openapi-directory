# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server.models.input_message_content import InputMessageContent
from openapi_server import util


class InlineQueryResultArticle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, hide_url: bool=None, id: str=None, input_message_content: InputMessageContent=None, reply_markup: InlineKeyboardMarkup=None, thumb_height: int=None, thumb_url: str=None, thumb_width: int=None, title: str=None, type: str=None, url: str=None):
        """InlineQueryResultArticle - a model defined in OpenAPI

        :param description: The description of this InlineQueryResultArticle.
        :param hide_url: The hide_url of this InlineQueryResultArticle.
        :param id: The id of this InlineQueryResultArticle.
        :param input_message_content: The input_message_content of this InlineQueryResultArticle.
        :param reply_markup: The reply_markup of this InlineQueryResultArticle.
        :param thumb_height: The thumb_height of this InlineQueryResultArticle.
        :param thumb_url: The thumb_url of this InlineQueryResultArticle.
        :param thumb_width: The thumb_width of this InlineQueryResultArticle.
        :param title: The title of this InlineQueryResultArticle.
        :param type: The type of this InlineQueryResultArticle.
        :param url: The url of this InlineQueryResultArticle.
        """
        self.openapi_types = {
            'description': str,
            'hide_url': bool,
            'id': str,
            'input_message_content': InputMessageContent,
            'reply_markup': InlineKeyboardMarkup,
            'thumb_height': int,
            'thumb_url': str,
            'thumb_width': int,
            'title': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'description': 'description',
            'hide_url': 'hide_url',
            'id': 'id',
            'input_message_content': 'input_message_content',
            'reply_markup': 'reply_markup',
            'thumb_height': 'thumb_height',
            'thumb_url': 'thumb_url',
            'thumb_width': 'thumb_width',
            'title': 'title',
            'type': 'type',
            'url': 'url'
        }

        self._description = description
        self._hide_url = hide_url
        self._id = id
        self._input_message_content = input_message_content
        self._reply_markup = reply_markup
        self._thumb_height = thumb_height
        self._thumb_url = thumb_url
        self._thumb_width = thumb_width
        self._title = title
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineQueryResultArticle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InlineQueryResultArticle of this InlineQueryResultArticle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this InlineQueryResultArticle.

        *Optional*. Short description of the result

        :return: The description of this InlineQueryResultArticle.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineQueryResultArticle.

        *Optional*. Short description of the result

        :param description: The description of this InlineQueryResultArticle.
        :type description: str
        """

        self._description = description

    @property
    def hide_url(self):
        """Gets the hide_url of this InlineQueryResultArticle.

        *Optional*. Pass *True*, if you don't want the URL to be shown in the message

        :return: The hide_url of this InlineQueryResultArticle.
        :rtype: bool
        """
        return self._hide_url

    @hide_url.setter
    def hide_url(self, hide_url):
        """Sets the hide_url of this InlineQueryResultArticle.

        *Optional*. Pass *True*, if you don't want the URL to be shown in the message

        :param hide_url: The hide_url of this InlineQueryResultArticle.
        :type hide_url: bool
        """

        self._hide_url = hide_url

    @property
    def id(self):
        """Gets the id of this InlineQueryResultArticle.

        Unique identifier for this result, 1-64 Bytes

        :return: The id of this InlineQueryResultArticle.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineQueryResultArticle.

        Unique identifier for this result, 1-64 Bytes

        :param id: The id of this InlineQueryResultArticle.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def input_message_content(self):
        """Gets the input_message_content of this InlineQueryResultArticle.


        :return: The input_message_content of this InlineQueryResultArticle.
        :rtype: InputMessageContent
        """
        return self._input_message_content

    @input_message_content.setter
    def input_message_content(self, input_message_content):
        """Sets the input_message_content of this InlineQueryResultArticle.


        :param input_message_content: The input_message_content of this InlineQueryResultArticle.
        :type input_message_content: InputMessageContent
        """
        if input_message_content is None:
            raise ValueError("Invalid value for `input_message_content`, must not be `None`")

        self._input_message_content = input_message_content

    @property
    def reply_markup(self):
        """Gets the reply_markup of this InlineQueryResultArticle.


        :return: The reply_markup of this InlineQueryResultArticle.
        :rtype: InlineKeyboardMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this InlineQueryResultArticle.


        :param reply_markup: The reply_markup of this InlineQueryResultArticle.
        :type reply_markup: InlineKeyboardMarkup
        """

        self._reply_markup = reply_markup

    @property
    def thumb_height(self):
        """Gets the thumb_height of this InlineQueryResultArticle.

        *Optional*. Thumbnail height

        :return: The thumb_height of this InlineQueryResultArticle.
        :rtype: int
        """
        return self._thumb_height

    @thumb_height.setter
    def thumb_height(self, thumb_height):
        """Sets the thumb_height of this InlineQueryResultArticle.

        *Optional*. Thumbnail height

        :param thumb_height: The thumb_height of this InlineQueryResultArticle.
        :type thumb_height: int
        """

        self._thumb_height = thumb_height

    @property
    def thumb_url(self):
        """Gets the thumb_url of this InlineQueryResultArticle.

        *Optional*. Url of the thumbnail for the result

        :return: The thumb_url of this InlineQueryResultArticle.
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this InlineQueryResultArticle.

        *Optional*. Url of the thumbnail for the result

        :param thumb_url: The thumb_url of this InlineQueryResultArticle.
        :type thumb_url: str
        """

        self._thumb_url = thumb_url

    @property
    def thumb_width(self):
        """Gets the thumb_width of this InlineQueryResultArticle.

        *Optional*. Thumbnail width

        :return: The thumb_width of this InlineQueryResultArticle.
        :rtype: int
        """
        return self._thumb_width

    @thumb_width.setter
    def thumb_width(self, thumb_width):
        """Sets the thumb_width of this InlineQueryResultArticle.

        *Optional*. Thumbnail width

        :param thumb_width: The thumb_width of this InlineQueryResultArticle.
        :type thumb_width: int
        """

        self._thumb_width = thumb_width

    @property
    def title(self):
        """Gets the title of this InlineQueryResultArticle.

        Title of the result

        :return: The title of this InlineQueryResultArticle.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineQueryResultArticle.

        Title of the result

        :param title: The title of this InlineQueryResultArticle.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this InlineQueryResultArticle.

        Type of the result, must be *article*

        :return: The type of this InlineQueryResultArticle.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineQueryResultArticle.

        Type of the result, must be *article*

        :param type: The type of this InlineQueryResultArticle.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this InlineQueryResultArticle.

        *Optional*. URL of the result

        :return: The url of this InlineQueryResultArticle.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineQueryResultArticle.

        *Optional*. URL of the result

        :param url: The url of this InlineQueryResultArticle.
        :type url: str
        """

        self._url = url
