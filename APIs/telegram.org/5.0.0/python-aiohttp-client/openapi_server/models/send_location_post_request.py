# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_server.models.copy_message_post_request_reply_markup import CopyMessagePostRequestReplyMarkup
from openapi_server import util


class SendLocationPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_sending_without_reply: bool=None, chat_id: CopyMessagePostRequestChatId=None, disable_notification: bool=None, heading: int=None, horizontal_accuracy: float=None, latitude: float=None, live_period: int=None, longitude: float=None, proximity_alert_radius: int=None, reply_markup: CopyMessagePostRequestReplyMarkup=None, reply_to_message_id: int=None):
        """SendLocationPostRequest - a model defined in OpenAPI

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendLocationPostRequest.
        :param chat_id: The chat_id of this SendLocationPostRequest.
        :param disable_notification: The disable_notification of this SendLocationPostRequest.
        :param heading: The heading of this SendLocationPostRequest.
        :param horizontal_accuracy: The horizontal_accuracy of this SendLocationPostRequest.
        :param latitude: The latitude of this SendLocationPostRequest.
        :param live_period: The live_period of this SendLocationPostRequest.
        :param longitude: The longitude of this SendLocationPostRequest.
        :param proximity_alert_radius: The proximity_alert_radius of this SendLocationPostRequest.
        :param reply_markup: The reply_markup of this SendLocationPostRequest.
        :param reply_to_message_id: The reply_to_message_id of this SendLocationPostRequest.
        """
        self.openapi_types = {
            'allow_sending_without_reply': bool,
            'chat_id': CopyMessagePostRequestChatId,
            'disable_notification': bool,
            'heading': int,
            'horizontal_accuracy': float,
            'latitude': float,
            'live_period': int,
            'longitude': float,
            'proximity_alert_radius': int,
            'reply_markup': CopyMessagePostRequestReplyMarkup,
            'reply_to_message_id': int
        }

        self.attribute_map = {
            'allow_sending_without_reply': 'allow_sending_without_reply',
            'chat_id': 'chat_id',
            'disable_notification': 'disable_notification',
            'heading': 'heading',
            'horizontal_accuracy': 'horizontal_accuracy',
            'latitude': 'latitude',
            'live_period': 'live_period',
            'longitude': 'longitude',
            'proximity_alert_radius': 'proximity_alert_radius',
            'reply_markup': 'reply_markup',
            'reply_to_message_id': 'reply_to_message_id'
        }

        self._allow_sending_without_reply = allow_sending_without_reply
        self._chat_id = chat_id
        self._disable_notification = disable_notification
        self._heading = heading
        self._horizontal_accuracy = horizontal_accuracy
        self._latitude = latitude
        self._live_period = live_period
        self._longitude = longitude
        self._proximity_alert_radius = proximity_alert_radius
        self._reply_markup = reply_markup
        self._reply_to_message_id = reply_to_message_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendLocationPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _sendLocation_post_request of this SendLocationPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_sending_without_reply(self):
        """Gets the allow_sending_without_reply of this SendLocationPostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :return: The allow_sending_without_reply of this SendLocationPostRequest.
        :rtype: bool
        """
        return self._allow_sending_without_reply

    @allow_sending_without_reply.setter
    def allow_sending_without_reply(self, allow_sending_without_reply):
        """Sets the allow_sending_without_reply of this SendLocationPostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendLocationPostRequest.
        :type allow_sending_without_reply: bool
        """

        self._allow_sending_without_reply = allow_sending_without_reply

    @property
    def chat_id(self):
        """Gets the chat_id of this SendLocationPostRequest.


        :return: The chat_id of this SendLocationPostRequest.
        :rtype: CopyMessagePostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SendLocationPostRequest.


        :param chat_id: The chat_id of this SendLocationPostRequest.
        :type chat_id: CopyMessagePostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def disable_notification(self):
        """Gets the disable_notification of this SendLocationPostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :return: The disable_notification of this SendLocationPostRequest.
        :rtype: bool
        """
        return self._disable_notification

    @disable_notification.setter
    def disable_notification(self, disable_notification):
        """Sets the disable_notification of this SendLocationPostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :param disable_notification: The disable_notification of this SendLocationPostRequest.
        :type disable_notification: bool
        """

        self._disable_notification = disable_notification

    @property
    def heading(self):
        """Gets the heading of this SendLocationPostRequest.

        For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :return: The heading of this SendLocationPostRequest.
        :rtype: int
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this SendLocationPostRequest.

        For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :param heading: The heading of this SendLocationPostRequest.
        :type heading: int
        """

        self._heading = heading

    @property
    def horizontal_accuracy(self):
        """Gets the horizontal_accuracy of this SendLocationPostRequest.

        The radius of uncertainty for the location, measured in meters; 0-1500

        :return: The horizontal_accuracy of this SendLocationPostRequest.
        :rtype: float
        """
        return self._horizontal_accuracy

    @horizontal_accuracy.setter
    def horizontal_accuracy(self, horizontal_accuracy):
        """Sets the horizontal_accuracy of this SendLocationPostRequest.

        The radius of uncertainty for the location, measured in meters; 0-1500

        :param horizontal_accuracy: The horizontal_accuracy of this SendLocationPostRequest.
        :type horizontal_accuracy: float
        """

        self._horizontal_accuracy = horizontal_accuracy

    @property
    def latitude(self):
        """Gets the latitude of this SendLocationPostRequest.

        Latitude of the location

        :return: The latitude of this SendLocationPostRequest.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this SendLocationPostRequest.

        Latitude of the location

        :param latitude: The latitude of this SendLocationPostRequest.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def live_period(self):
        """Gets the live_period of this SendLocationPostRequest.

        Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.

        :return: The live_period of this SendLocationPostRequest.
        :rtype: int
        """
        return self._live_period

    @live_period.setter
    def live_period(self, live_period):
        """Sets the live_period of this SendLocationPostRequest.

        Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.

        :param live_period: The live_period of this SendLocationPostRequest.
        :type live_period: int
        """

        self._live_period = live_period

    @property
    def longitude(self):
        """Gets the longitude of this SendLocationPostRequest.

        Longitude of the location

        :return: The longitude of this SendLocationPostRequest.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this SendLocationPostRequest.

        Longitude of the location

        :param longitude: The longitude of this SendLocationPostRequest.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def proximity_alert_radius(self):
        """Gets the proximity_alert_radius of this SendLocationPostRequest.

        For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :return: The proximity_alert_radius of this SendLocationPostRequest.
        :rtype: int
        """
        return self._proximity_alert_radius

    @proximity_alert_radius.setter
    def proximity_alert_radius(self, proximity_alert_radius):
        """Sets the proximity_alert_radius of this SendLocationPostRequest.

        For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :param proximity_alert_radius: The proximity_alert_radius of this SendLocationPostRequest.
        :type proximity_alert_radius: int
        """

        self._proximity_alert_radius = proximity_alert_radius

    @property
    def reply_markup(self):
        """Gets the reply_markup of this SendLocationPostRequest.


        :return: The reply_markup of this SendLocationPostRequest.
        :rtype: CopyMessagePostRequestReplyMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this SendLocationPostRequest.


        :param reply_markup: The reply_markup of this SendLocationPostRequest.
        :type reply_markup: CopyMessagePostRequestReplyMarkup
        """

        self._reply_markup = reply_markup

    @property
    def reply_to_message_id(self):
        """Gets the reply_to_message_id of this SendLocationPostRequest.

        If the message is a reply, ID of the original message

        :return: The reply_to_message_id of this SendLocationPostRequest.
        :rtype: int
        """
        return self._reply_to_message_id

    @reply_to_message_id.setter
    def reply_to_message_id(self, reply_to_message_id):
        """Sets the reply_to_message_id of this SendLocationPostRequest.

        If the message is a reply, ID of the original message

        :param reply_to_message_id: The reply_to_message_id of this SendLocationPostRequest.
        :type reply_to_message_id: int
        """

        self._reply_to_message_id = reply_to_message_id
