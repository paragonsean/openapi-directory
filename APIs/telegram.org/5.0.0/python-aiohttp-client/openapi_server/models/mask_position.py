# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaskPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, point: str=None, scale: float=None, x_shift: float=None, y_shift: float=None):
        """MaskPosition - a model defined in OpenAPI

        :param point: The point of this MaskPosition.
        :param scale: The scale of this MaskPosition.
        :param x_shift: The x_shift of this MaskPosition.
        :param y_shift: The y_shift of this MaskPosition.
        """
        self.openapi_types = {
            'point': str,
            'scale': float,
            'x_shift': float,
            'y_shift': float
        }

        self.attribute_map = {
            'point': 'point',
            'scale': 'scale',
            'x_shift': 'x_shift',
            'y_shift': 'y_shift'
        }

        self._point = point
        self._scale = scale
        self._x_shift = x_shift
        self._y_shift = y_shift

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaskPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaskPosition of this MaskPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def point(self):
        """Gets the point of this MaskPosition.

        The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.

        :return: The point of this MaskPosition.
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this MaskPosition.

        The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.

        :param point: The point of this MaskPosition.
        :type point: str
        """
        allowed_values = ["forehead", "eyes", "mouth", "chin"]  # noqa: E501
        if point not in allowed_values:
            raise ValueError(
                "Invalid value for `point` ({0}), must be one of {1}"
                .format(point, allowed_values)
            )

        self._point = point

    @property
    def scale(self):
        """Gets the scale of this MaskPosition.

        Mask scaling coefficient. For example, 2.0 means double size.

        :return: The scale of this MaskPosition.
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this MaskPosition.

        Mask scaling coefficient. For example, 2.0 means double size.

        :param scale: The scale of this MaskPosition.
        :type scale: float
        """
        if scale is None:
            raise ValueError("Invalid value for `scale`, must not be `None`")

        self._scale = scale

    @property
    def x_shift(self):
        """Gets the x_shift of this MaskPosition.

        Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.

        :return: The x_shift of this MaskPosition.
        :rtype: float
        """
        return self._x_shift

    @x_shift.setter
    def x_shift(self, x_shift):
        """Sets the x_shift of this MaskPosition.

        Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.

        :param x_shift: The x_shift of this MaskPosition.
        :type x_shift: float
        """
        if x_shift is None:
            raise ValueError("Invalid value for `x_shift`, must not be `None`")

        self._x_shift = x_shift

    @property
    def y_shift(self):
        """Gets the y_shift of this MaskPosition.

        Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.

        :return: The y_shift of this MaskPosition.
        :rtype: float
        """
        return self._y_shift

    @y_shift.setter
    def y_shift(self, y_shift):
        """Sets the y_shift of this MaskPosition.

        Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.

        :param y_shift: The y_shift of this MaskPosition.
        :type y_shift: float
        """
        if y_shift is None:
            raise ValueError("Invalid value for `y_shift`, must not be `None`")

        self._y_shift = y_shift
