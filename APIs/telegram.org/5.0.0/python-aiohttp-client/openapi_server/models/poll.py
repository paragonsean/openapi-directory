# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_entity import MessageEntity
from openapi_server.models.poll_option import PollOption
from openapi_server import util


class Poll(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allows_multiple_answers: bool=None, close_date: int=None, correct_option_id: int=None, explanation: str=None, explanation_entities: List[MessageEntity]=None, id: str=None, is_anonymous: bool=None, is_closed: bool=None, open_period: int=None, options: List[PollOption]=None, question: str=None, total_voter_count: int=None, type: str=None):
        """Poll - a model defined in OpenAPI

        :param allows_multiple_answers: The allows_multiple_answers of this Poll.
        :param close_date: The close_date of this Poll.
        :param correct_option_id: The correct_option_id of this Poll.
        :param explanation: The explanation of this Poll.
        :param explanation_entities: The explanation_entities of this Poll.
        :param id: The id of this Poll.
        :param is_anonymous: The is_anonymous of this Poll.
        :param is_closed: The is_closed of this Poll.
        :param open_period: The open_period of this Poll.
        :param options: The options of this Poll.
        :param question: The question of this Poll.
        :param total_voter_count: The total_voter_count of this Poll.
        :param type: The type of this Poll.
        """
        self.openapi_types = {
            'allows_multiple_answers': bool,
            'close_date': int,
            'correct_option_id': int,
            'explanation': str,
            'explanation_entities': List[MessageEntity],
            'id': str,
            'is_anonymous': bool,
            'is_closed': bool,
            'open_period': int,
            'options': List[PollOption],
            'question': str,
            'total_voter_count': int,
            'type': str
        }

        self.attribute_map = {
            'allows_multiple_answers': 'allows_multiple_answers',
            'close_date': 'close_date',
            'correct_option_id': 'correct_option_id',
            'explanation': 'explanation',
            'explanation_entities': 'explanation_entities',
            'id': 'id',
            'is_anonymous': 'is_anonymous',
            'is_closed': 'is_closed',
            'open_period': 'open_period',
            'options': 'options',
            'question': 'question',
            'total_voter_count': 'total_voter_count',
            'type': 'type'
        }

        self._allows_multiple_answers = allows_multiple_answers
        self._close_date = close_date
        self._correct_option_id = correct_option_id
        self._explanation = explanation
        self._explanation_entities = explanation_entities
        self._id = id
        self._is_anonymous = is_anonymous
        self._is_closed = is_closed
        self._open_period = open_period
        self._options = options
        self._question = question
        self._total_voter_count = total_voter_count
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Poll':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Poll of this Poll.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allows_multiple_answers(self):
        """Gets the allows_multiple_answers of this Poll.

        True, if the poll allows multiple answers

        :return: The allows_multiple_answers of this Poll.
        :rtype: bool
        """
        return self._allows_multiple_answers

    @allows_multiple_answers.setter
    def allows_multiple_answers(self, allows_multiple_answers):
        """Sets the allows_multiple_answers of this Poll.

        True, if the poll allows multiple answers

        :param allows_multiple_answers: The allows_multiple_answers of this Poll.
        :type allows_multiple_answers: bool
        """
        if allows_multiple_answers is None:
            raise ValueError("Invalid value for `allows_multiple_answers`, must not be `None`")

        self._allows_multiple_answers = allows_multiple_answers

    @property
    def close_date(self):
        """Gets the close_date of this Poll.

        *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed

        :return: The close_date of this Poll.
        :rtype: int
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """Sets the close_date of this Poll.

        *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed

        :param close_date: The close_date of this Poll.
        :type close_date: int
        """

        self._close_date = close_date

    @property
    def correct_option_id(self):
        """Gets the correct_option_id of this Poll.

        *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.

        :return: The correct_option_id of this Poll.
        :rtype: int
        """
        return self._correct_option_id

    @correct_option_id.setter
    def correct_option_id(self, correct_option_id):
        """Sets the correct_option_id of this Poll.

        *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.

        :param correct_option_id: The correct_option_id of this Poll.
        :type correct_option_id: int
        """

        self._correct_option_id = correct_option_id

    @property
    def explanation(self):
        """Gets the explanation of this Poll.

        *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters

        :return: The explanation of this Poll.
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this Poll.

        *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters

        :param explanation: The explanation of this Poll.
        :type explanation: str
        """

        self._explanation = explanation

    @property
    def explanation_entities(self):
        """Gets the explanation_entities of this Poll.

        *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*

        :return: The explanation_entities of this Poll.
        :rtype: List[MessageEntity]
        """
        return self._explanation_entities

    @explanation_entities.setter
    def explanation_entities(self, explanation_entities):
        """Sets the explanation_entities of this Poll.

        *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*

        :param explanation_entities: The explanation_entities of this Poll.
        :type explanation_entities: List[MessageEntity]
        """

        self._explanation_entities = explanation_entities

    @property
    def id(self):
        """Gets the id of this Poll.

        Unique poll identifier

        :return: The id of this Poll.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Poll.

        Unique poll identifier

        :param id: The id of this Poll.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_anonymous(self):
        """Gets the is_anonymous of this Poll.

        True, if the poll is anonymous

        :return: The is_anonymous of this Poll.
        :rtype: bool
        """
        return self._is_anonymous

    @is_anonymous.setter
    def is_anonymous(self, is_anonymous):
        """Sets the is_anonymous of this Poll.

        True, if the poll is anonymous

        :param is_anonymous: The is_anonymous of this Poll.
        :type is_anonymous: bool
        """
        if is_anonymous is None:
            raise ValueError("Invalid value for `is_anonymous`, must not be `None`")

        self._is_anonymous = is_anonymous

    @property
    def is_closed(self):
        """Gets the is_closed of this Poll.

        True, if the poll is closed

        :return: The is_closed of this Poll.
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this Poll.

        True, if the poll is closed

        :param is_closed: The is_closed of this Poll.
        :type is_closed: bool
        """
        if is_closed is None:
            raise ValueError("Invalid value for `is_closed`, must not be `None`")

        self._is_closed = is_closed

    @property
    def open_period(self):
        """Gets the open_period of this Poll.

        *Optional*. Amount of time in seconds the poll will be active after creation

        :return: The open_period of this Poll.
        :rtype: int
        """
        return self._open_period

    @open_period.setter
    def open_period(self, open_period):
        """Sets the open_period of this Poll.

        *Optional*. Amount of time in seconds the poll will be active after creation

        :param open_period: The open_period of this Poll.
        :type open_period: int
        """

        self._open_period = open_period

    @property
    def options(self):
        """Gets the options of this Poll.

        List of poll options

        :return: The options of this Poll.
        :rtype: List[PollOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Poll.

        List of poll options

        :param options: The options of this Poll.
        :type options: List[PollOption]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def question(self):
        """Gets the question of this Poll.

        Poll question, 1-255 characters

        :return: The question of this Poll.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this Poll.

        Poll question, 1-255 characters

        :param question: The question of this Poll.
        :type question: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")

        self._question = question

    @property
    def total_voter_count(self):
        """Gets the total_voter_count of this Poll.

        Total number of users that voted in the poll

        :return: The total_voter_count of this Poll.
        :rtype: int
        """
        return self._total_voter_count

    @total_voter_count.setter
    def total_voter_count(self, total_voter_count):
        """Sets the total_voter_count of this Poll.

        Total number of users that voted in the poll

        :param total_voter_count: The total_voter_count of this Poll.
        :type total_voter_count: int
        """
        if total_voter_count is None:
            raise ValueError("Invalid value for `total_voter_count`, must not be `None`")

        self._total_voter_count = total_voter_count

    @property
    def type(self):
        """Gets the type of this Poll.

        Poll type, currently can be “regular” or “quiz”

        :return: The type of this Poll.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Poll.

        Poll type, currently can be “regular” or “quiz”

        :param type: The type of this Poll.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
