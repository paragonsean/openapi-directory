# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetStickerPositionInSetPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, position: int=None, sticker: str=None):
        """SetStickerPositionInSetPostRequest - a model defined in OpenAPI

        :param position: The position of this SetStickerPositionInSetPostRequest.
        :param sticker: The sticker of this SetStickerPositionInSetPostRequest.
        """
        self.openapi_types = {
            'position': int,
            'sticker': str
        }

        self.attribute_map = {
            'position': 'position',
            'sticker': 'sticker'
        }

        self._position = position
        self._sticker = sticker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetStickerPositionInSetPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _setStickerPositionInSet_post_request of this SetStickerPositionInSetPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def position(self):
        """Gets the position of this SetStickerPositionInSetPostRequest.

        New sticker position in the set, zero-based

        :return: The position of this SetStickerPositionInSetPostRequest.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this SetStickerPositionInSetPostRequest.

        New sticker position in the set, zero-based

        :param position: The position of this SetStickerPositionInSetPostRequest.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def sticker(self):
        """Gets the sticker of this SetStickerPositionInSetPostRequest.

        File identifier of the sticker

        :return: The sticker of this SetStickerPositionInSetPostRequest.
        :rtype: str
        """
        return self._sticker

    @sticker.setter
    def sticker(self, sticker):
        """Sets the sticker of this SetStickerPositionInSetPostRequest.

        File identifier of the sticker

        :param sticker: The sticker of this SetStickerPositionInSetPostRequest.
        :type sticker: str
        """
        if sticker is None:
            raise ValueError("Invalid value for `sticker`, must not be `None`")

        self._sticker = sticker
