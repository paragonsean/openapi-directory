# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chat_permissions import ChatPermissions
from openapi_server.models.delete_chat_sticker_set_post_request_chat_id import DeleteChatStickerSetPostRequestChatId
from openapi_server import util


class SetChatPermissionsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_id: DeleteChatStickerSetPostRequestChatId=None, permissions: ChatPermissions=None):
        """SetChatPermissionsPostRequest - a model defined in OpenAPI

        :param chat_id: The chat_id of this SetChatPermissionsPostRequest.
        :param permissions: The permissions of this SetChatPermissionsPostRequest.
        """
        self.openapi_types = {
            'chat_id': DeleteChatStickerSetPostRequestChatId,
            'permissions': ChatPermissions
        }

        self.attribute_map = {
            'chat_id': 'chat_id',
            'permissions': 'permissions'
        }

        self._chat_id = chat_id
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetChatPermissionsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _setChatPermissions_post_request of this SetChatPermissionsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_id(self):
        """Gets the chat_id of this SetChatPermissionsPostRequest.


        :return: The chat_id of this SetChatPermissionsPostRequest.
        :rtype: DeleteChatStickerSetPostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SetChatPermissionsPostRequest.


        :param chat_id: The chat_id of this SetChatPermissionsPostRequest.
        :type chat_id: DeleteChatStickerSetPostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def permissions(self):
        """Gets the permissions of this SetChatPermissionsPostRequest.


        :return: The permissions of this SetChatPermissionsPostRequest.
        :rtype: ChatPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this SetChatPermissionsPostRequest.


        :param permissions: The permissions of this SetChatPermissionsPostRequest.
        :type permissions: ChatPermissions
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions
