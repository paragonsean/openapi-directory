# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.photo_size import PhotoSize
from openapi_server import util


class Video(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, file_id: str=None, file_name: str=None, file_size: int=None, file_unique_id: str=None, height: int=None, mime_type: str=None, thumb: PhotoSize=None, width: int=None):
        """Video - a model defined in OpenAPI

        :param duration: The duration of this Video.
        :param file_id: The file_id of this Video.
        :param file_name: The file_name of this Video.
        :param file_size: The file_size of this Video.
        :param file_unique_id: The file_unique_id of this Video.
        :param height: The height of this Video.
        :param mime_type: The mime_type of this Video.
        :param thumb: The thumb of this Video.
        :param width: The width of this Video.
        """
        self.openapi_types = {
            'duration': int,
            'file_id': str,
            'file_name': str,
            'file_size': int,
            'file_unique_id': str,
            'height': int,
            'mime_type': str,
            'thumb': PhotoSize,
            'width': int
        }

        self.attribute_map = {
            'duration': 'duration',
            'file_id': 'file_id',
            'file_name': 'file_name',
            'file_size': 'file_size',
            'file_unique_id': 'file_unique_id',
            'height': 'height',
            'mime_type': 'mime_type',
            'thumb': 'thumb',
            'width': 'width'
        }

        self._duration = duration
        self._file_id = file_id
        self._file_name = file_name
        self._file_size = file_size
        self._file_unique_id = file_unique_id
        self._height = height
        self._mime_type = mime_type
        self._thumb = thumb
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Video':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Video of this Video.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this Video.

        Duration of the video in seconds as defined by sender

        :return: The duration of this Video.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Video.

        Duration of the video in seconds as defined by sender

        :param duration: The duration of this Video.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def file_id(self):
        """Gets the file_id of this Video.

        Identifier for this file, which can be used to download or reuse the file

        :return: The file_id of this Video.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Video.

        Identifier for this file, which can be used to download or reuse the file

        :param file_id: The file_id of this Video.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_name(self):
        """Gets the file_name of this Video.

        *Optional*. Original filename as defined by sender

        :return: The file_name of this Video.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Video.

        *Optional*. Original filename as defined by sender

        :param file_name: The file_name of this Video.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this Video.

        *Optional*. File size

        :return: The file_size of this Video.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Video.

        *Optional*. File size

        :param file_size: The file_size of this Video.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def file_unique_id(self):
        """Gets the file_unique_id of this Video.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :return: The file_unique_id of this Video.
        :rtype: str
        """
        return self._file_unique_id

    @file_unique_id.setter
    def file_unique_id(self, file_unique_id):
        """Sets the file_unique_id of this Video.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :param file_unique_id: The file_unique_id of this Video.
        :type file_unique_id: str
        """
        if file_unique_id is None:
            raise ValueError("Invalid value for `file_unique_id`, must not be `None`")

        self._file_unique_id = file_unique_id

    @property
    def height(self):
        """Gets the height of this Video.

        Video height as defined by sender

        :return: The height of this Video.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Video.

        Video height as defined by sender

        :param height: The height of this Video.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def mime_type(self):
        """Gets the mime_type of this Video.

        *Optional*. Mime type of a file as defined by sender

        :return: The mime_type of this Video.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Video.

        *Optional*. Mime type of a file as defined by sender

        :param mime_type: The mime_type of this Video.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def thumb(self):
        """Gets the thumb of this Video.


        :return: The thumb of this Video.
        :rtype: PhotoSize
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this Video.


        :param thumb: The thumb of this Video.
        :type thumb: PhotoSize
        """

        self._thumb = thumb

    @property
    def width(self):
        """Gets the width of this Video.

        Video width as defined by sender

        :return: The width of this Video.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Video.

        Video width as defined by sender

        :param width: The width of this Video.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
