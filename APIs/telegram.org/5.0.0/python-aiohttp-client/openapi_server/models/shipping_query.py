# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shipping_address import ShippingAddress
from openapi_server.models.user import User
from openapi_server import util


class ShippingQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _from: User=None, id: str=None, invoice_payload: str=None, shipping_address: ShippingAddress=None):
        """ShippingQuery - a model defined in OpenAPI

        :param _from: The _from of this ShippingQuery.
        :param id: The id of this ShippingQuery.
        :param invoice_payload: The invoice_payload of this ShippingQuery.
        :param shipping_address: The shipping_address of this ShippingQuery.
        """
        self.openapi_types = {
            '_from': User,
            'id': str,
            'invoice_payload': str,
            'shipping_address': ShippingAddress
        }

        self.attribute_map = {
            '_from': 'from',
            'id': 'id',
            'invoice_payload': 'invoice_payload',
            'shipping_address': 'shipping_address'
        }

        self.__from = _from
        self._id = id
        self._invoice_payload = invoice_payload
        self._shipping_address = shipping_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingQuery of this ShippingQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self):
        """Gets the _from of this ShippingQuery.


        :return: The _from of this ShippingQuery.
        :rtype: User
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ShippingQuery.


        :param _from: The _from of this ShippingQuery.
        :type _from: User
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def id(self):
        """Gets the id of this ShippingQuery.

        Unique query identifier

        :return: The id of this ShippingQuery.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShippingQuery.

        Unique query identifier

        :param id: The id of this ShippingQuery.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def invoice_payload(self):
        """Gets the invoice_payload of this ShippingQuery.

        Bot specified invoice payload

        :return: The invoice_payload of this ShippingQuery.
        :rtype: str
        """
        return self._invoice_payload

    @invoice_payload.setter
    def invoice_payload(self, invoice_payload):
        """Sets the invoice_payload of this ShippingQuery.

        Bot specified invoice payload

        :param invoice_payload: The invoice_payload of this ShippingQuery.
        :type invoice_payload: str
        """
        if invoice_payload is None:
            raise ValueError("Invalid value for `invoice_payload`, must not be `None`")

        self._invoice_payload = invoice_payload

    @property
    def shipping_address(self):
        """Gets the shipping_address of this ShippingQuery.


        :return: The shipping_address of this ShippingQuery.
        :rtype: ShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this ShippingQuery.


        :param shipping_address: The shipping_address of this ShippingQuery.
        :type shipping_address: ShippingAddress
        """
        if shipping_address is None:
            raise ValueError("Invalid value for `shipping_address`, must not be `None`")

        self._shipping_address = shipping_address
