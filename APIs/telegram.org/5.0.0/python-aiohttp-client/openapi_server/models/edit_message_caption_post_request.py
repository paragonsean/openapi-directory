# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.edit_message_caption_post_request_chat_id import EditMessageCaptionPostRequestChatId
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server.models.message_entity import MessageEntity
from openapi_server import util


class EditMessageCaptionPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, caption_entities: List[MessageEntity]=None, chat_id: EditMessageCaptionPostRequestChatId=None, inline_message_id: str=None, message_id: int=None, parse_mode: str=None, reply_markup: InlineKeyboardMarkup=None):
        """EditMessageCaptionPostRequest - a model defined in OpenAPI

        :param caption: The caption of this EditMessageCaptionPostRequest.
        :param caption_entities: The caption_entities of this EditMessageCaptionPostRequest.
        :param chat_id: The chat_id of this EditMessageCaptionPostRequest.
        :param inline_message_id: The inline_message_id of this EditMessageCaptionPostRequest.
        :param message_id: The message_id of this EditMessageCaptionPostRequest.
        :param parse_mode: The parse_mode of this EditMessageCaptionPostRequest.
        :param reply_markup: The reply_markup of this EditMessageCaptionPostRequest.
        """
        self.openapi_types = {
            'caption': str,
            'caption_entities': List[MessageEntity],
            'chat_id': EditMessageCaptionPostRequestChatId,
            'inline_message_id': str,
            'message_id': int,
            'parse_mode': str,
            'reply_markup': InlineKeyboardMarkup
        }

        self.attribute_map = {
            'caption': 'caption',
            'caption_entities': 'caption_entities',
            'chat_id': 'chat_id',
            'inline_message_id': 'inline_message_id',
            'message_id': 'message_id',
            'parse_mode': 'parse_mode',
            'reply_markup': 'reply_markup'
        }

        self._caption = caption
        self._caption_entities = caption_entities
        self._chat_id = chat_id
        self._inline_message_id = inline_message_id
        self._message_id = message_id
        self._parse_mode = parse_mode
        self._reply_markup = reply_markup

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditMessageCaptionPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _editMessageCaption_post_request of this EditMessageCaptionPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this EditMessageCaptionPostRequest.

        New caption of the message, 0-1024 characters after entities parsing

        :return: The caption of this EditMessageCaptionPostRequest.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this EditMessageCaptionPostRequest.

        New caption of the message, 0-1024 characters after entities parsing

        :param caption: The caption of this EditMessageCaptionPostRequest.
        :type caption: str
        """

        self._caption = caption

    @property
    def caption_entities(self):
        """Gets the caption_entities of this EditMessageCaptionPostRequest.

        List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*

        :return: The caption_entities of this EditMessageCaptionPostRequest.
        :rtype: List[MessageEntity]
        """
        return self._caption_entities

    @caption_entities.setter
    def caption_entities(self, caption_entities):
        """Sets the caption_entities of this EditMessageCaptionPostRequest.

        List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*

        :param caption_entities: The caption_entities of this EditMessageCaptionPostRequest.
        :type caption_entities: List[MessageEntity]
        """

        self._caption_entities = caption_entities

    @property
    def chat_id(self):
        """Gets the chat_id of this EditMessageCaptionPostRequest.


        :return: The chat_id of this EditMessageCaptionPostRequest.
        :rtype: EditMessageCaptionPostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this EditMessageCaptionPostRequest.


        :param chat_id: The chat_id of this EditMessageCaptionPostRequest.
        :type chat_id: EditMessageCaptionPostRequestChatId
        """

        self._chat_id = chat_id

    @property
    def inline_message_id(self):
        """Gets the inline_message_id of this EditMessageCaptionPostRequest.

        Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message

        :return: The inline_message_id of this EditMessageCaptionPostRequest.
        :rtype: str
        """
        return self._inline_message_id

    @inline_message_id.setter
    def inline_message_id(self, inline_message_id):
        """Sets the inline_message_id of this EditMessageCaptionPostRequest.

        Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message

        :param inline_message_id: The inline_message_id of this EditMessageCaptionPostRequest.
        :type inline_message_id: str
        """

        self._inline_message_id = inline_message_id

    @property
    def message_id(self):
        """Gets the message_id of this EditMessageCaptionPostRequest.

        Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit

        :return: The message_id of this EditMessageCaptionPostRequest.
        :rtype: int
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this EditMessageCaptionPostRequest.

        Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit

        :param message_id: The message_id of this EditMessageCaptionPostRequest.
        :type message_id: int
        """

        self._message_id = message_id

    @property
    def parse_mode(self):
        """Gets the parse_mode of this EditMessageCaptionPostRequest.

        Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :return: The parse_mode of this EditMessageCaptionPostRequest.
        :rtype: str
        """
        return self._parse_mode

    @parse_mode.setter
    def parse_mode(self, parse_mode):
        """Sets the parse_mode of this EditMessageCaptionPostRequest.

        Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :param parse_mode: The parse_mode of this EditMessageCaptionPostRequest.
        :type parse_mode: str
        """

        self._parse_mode = parse_mode

    @property
    def reply_markup(self):
        """Gets the reply_markup of this EditMessageCaptionPostRequest.


        :return: The reply_markup of this EditMessageCaptionPostRequest.
        :rtype: InlineKeyboardMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this EditMessageCaptionPostRequest.


        :param reply_markup: The reply_markup of this EditMessageCaptionPostRequest.
        :type reply_markup: InlineKeyboardMarkup
        """

        self._reply_markup = reply_markup
