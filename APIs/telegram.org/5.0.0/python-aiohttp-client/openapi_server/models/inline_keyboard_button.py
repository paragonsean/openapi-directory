# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.login_url import LoginUrl
from openapi_server import util


class InlineKeyboardButton(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_data: str=None, callback_game: object=None, login_url: LoginUrl=None, pay: bool=None, switch_inline_query: str=None, switch_inline_query_current_chat: str=None, text: str=None, url: str=None):
        """InlineKeyboardButton - a model defined in OpenAPI

        :param callback_data: The callback_data of this InlineKeyboardButton.
        :param callback_game: The callback_game of this InlineKeyboardButton.
        :param login_url: The login_url of this InlineKeyboardButton.
        :param pay: The pay of this InlineKeyboardButton.
        :param switch_inline_query: The switch_inline_query of this InlineKeyboardButton.
        :param switch_inline_query_current_chat: The switch_inline_query_current_chat of this InlineKeyboardButton.
        :param text: The text of this InlineKeyboardButton.
        :param url: The url of this InlineKeyboardButton.
        """
        self.openapi_types = {
            'callback_data': str,
            'callback_game': object,
            'login_url': LoginUrl,
            'pay': bool,
            'switch_inline_query': str,
            'switch_inline_query_current_chat': str,
            'text': str,
            'url': str
        }

        self.attribute_map = {
            'callback_data': 'callback_data',
            'callback_game': 'callback_game',
            'login_url': 'login_url',
            'pay': 'pay',
            'switch_inline_query': 'switch_inline_query',
            'switch_inline_query_current_chat': 'switch_inline_query_current_chat',
            'text': 'text',
            'url': 'url'
        }

        self._callback_data = callback_data
        self._callback_game = callback_game
        self._login_url = login_url
        self._pay = pay
        self._switch_inline_query = switch_inline_query
        self._switch_inline_query_current_chat = switch_inline_query_current_chat
        self._text = text
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineKeyboardButton':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InlineKeyboardButton of this InlineKeyboardButton.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_data(self):
        """Gets the callback_data of this InlineKeyboardButton.

        *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes

        :return: The callback_data of this InlineKeyboardButton.
        :rtype: str
        """
        return self._callback_data

    @callback_data.setter
    def callback_data(self, callback_data):
        """Sets the callback_data of this InlineKeyboardButton.

        *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes

        :param callback_data: The callback_data of this InlineKeyboardButton.
        :type callback_data: str
        """

        self._callback_data = callback_data

    @property
    def callback_game(self):
        """Gets the callback_game of this InlineKeyboardButton.

        A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.

        :return: The callback_game of this InlineKeyboardButton.
        :rtype: object
        """
        return self._callback_game

    @callback_game.setter
    def callback_game(self, callback_game):
        """Sets the callback_game of this InlineKeyboardButton.

        A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.

        :param callback_game: The callback_game of this InlineKeyboardButton.
        :type callback_game: object
        """

        self._callback_game = callback_game

    @property
    def login_url(self):
        """Gets the login_url of this InlineKeyboardButton.


        :return: The login_url of this InlineKeyboardButton.
        :rtype: LoginUrl
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this InlineKeyboardButton.


        :param login_url: The login_url of this InlineKeyboardButton.
        :type login_url: LoginUrl
        """

        self._login_url = login_url

    @property
    def pay(self):
        """Gets the pay of this InlineKeyboardButton.

        *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).    **NOTE:** This type of button **must** always be the first button in the first row.

        :return: The pay of this InlineKeyboardButton.
        :rtype: bool
        """
        return self._pay

    @pay.setter
    def pay(self, pay):
        """Sets the pay of this InlineKeyboardButton.

        *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).    **NOTE:** This type of button **must** always be the first button in the first row.

        :param pay: The pay of this InlineKeyboardButton.
        :type pay: bool
        """

        self._pay = pay

    @property
    def switch_inline_query(self):
        """Gets the switch_inline_query of this InlineKeyboardButton.

        *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.    **Note:** This offers an easy way for users to start using your bot in [inline mode](/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\\_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.

        :return: The switch_inline_query of this InlineKeyboardButton.
        :rtype: str
        """
        return self._switch_inline_query

    @switch_inline_query.setter
    def switch_inline_query(self, switch_inline_query):
        """Sets the switch_inline_query of this InlineKeyboardButton.

        *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.    **Note:** This offers an easy way for users to start using your bot in [inline mode](/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\\_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.

        :param switch_inline_query: The switch_inline_query of this InlineKeyboardButton.
        :type switch_inline_query: str
        """

        self._switch_inline_query = switch_inline_query

    @property
    def switch_inline_query_current_chat(self):
        """Gets the switch_inline_query_current_chat of this InlineKeyboardButton.

        *Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.    This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.

        :return: The switch_inline_query_current_chat of this InlineKeyboardButton.
        :rtype: str
        """
        return self._switch_inline_query_current_chat

    @switch_inline_query_current_chat.setter
    def switch_inline_query_current_chat(self, switch_inline_query_current_chat):
        """Sets the switch_inline_query_current_chat of this InlineKeyboardButton.

        *Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.    This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.

        :param switch_inline_query_current_chat: The switch_inline_query_current_chat of this InlineKeyboardButton.
        :type switch_inline_query_current_chat: str
        """

        self._switch_inline_query_current_chat = switch_inline_query_current_chat

    @property
    def text(self):
        """Gets the text of this InlineKeyboardButton.

        Label text on the button

        :return: The text of this InlineKeyboardButton.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this InlineKeyboardButton.

        Label text on the button

        :param text: The text of this InlineKeyboardButton.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def url(self):
        """Gets the url of this InlineKeyboardButton.

        *Optional*. HTTP or tg:// url to be opened when button is pressed

        :return: The url of this InlineKeyboardButton.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineKeyboardButton.

        *Optional*. HTTP or tg:// url to be opened when button is pressed

        :param url: The url of this InlineKeyboardButton.
        :type url: str
        """

        self._url = url
