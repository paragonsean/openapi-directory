# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.callback_query import CallbackQuery
from openapi_server.models.chosen_inline_result import ChosenInlineResult
from openapi_server.models.inline_query import InlineQuery
from openapi_server.models.message import Message
from openapi_server.models.poll import Poll
from openapi_server.models.poll_answer import PollAnswer
from openapi_server.models.pre_checkout_query import PreCheckoutQuery
from openapi_server.models.shipping_query import ShippingQuery
from openapi_server import util


class Update(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_query: CallbackQuery=None, channel_post: Message=None, chosen_inline_result: ChosenInlineResult=None, edited_channel_post: Message=None, edited_message: Message=None, inline_query: InlineQuery=None, message: Message=None, poll: Poll=None, poll_answer: PollAnswer=None, pre_checkout_query: PreCheckoutQuery=None, shipping_query: ShippingQuery=None, update_id: int=None):
        """Update - a model defined in OpenAPI

        :param callback_query: The callback_query of this Update.
        :param channel_post: The channel_post of this Update.
        :param chosen_inline_result: The chosen_inline_result of this Update.
        :param edited_channel_post: The edited_channel_post of this Update.
        :param edited_message: The edited_message of this Update.
        :param inline_query: The inline_query of this Update.
        :param message: The message of this Update.
        :param poll: The poll of this Update.
        :param poll_answer: The poll_answer of this Update.
        :param pre_checkout_query: The pre_checkout_query of this Update.
        :param shipping_query: The shipping_query of this Update.
        :param update_id: The update_id of this Update.
        """
        self.openapi_types = {
            'callback_query': CallbackQuery,
            'channel_post': Message,
            'chosen_inline_result': ChosenInlineResult,
            'edited_channel_post': Message,
            'edited_message': Message,
            'inline_query': InlineQuery,
            'message': Message,
            'poll': Poll,
            'poll_answer': PollAnswer,
            'pre_checkout_query': PreCheckoutQuery,
            'shipping_query': ShippingQuery,
            'update_id': int
        }

        self.attribute_map = {
            'callback_query': 'callback_query',
            'channel_post': 'channel_post',
            'chosen_inline_result': 'chosen_inline_result',
            'edited_channel_post': 'edited_channel_post',
            'edited_message': 'edited_message',
            'inline_query': 'inline_query',
            'message': 'message',
            'poll': 'poll',
            'poll_answer': 'poll_answer',
            'pre_checkout_query': 'pre_checkout_query',
            'shipping_query': 'shipping_query',
            'update_id': 'update_id'
        }

        self._callback_query = callback_query
        self._channel_post = channel_post
        self._chosen_inline_result = chosen_inline_result
        self._edited_channel_post = edited_channel_post
        self._edited_message = edited_message
        self._inline_query = inline_query
        self._message = message
        self._poll = poll
        self._poll_answer = poll_answer
        self._pre_checkout_query = pre_checkout_query
        self._shipping_query = shipping_query
        self._update_id = update_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Update':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Update of this Update.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_query(self):
        """Gets the callback_query of this Update.


        :return: The callback_query of this Update.
        :rtype: CallbackQuery
        """
        return self._callback_query

    @callback_query.setter
    def callback_query(self, callback_query):
        """Sets the callback_query of this Update.


        :param callback_query: The callback_query of this Update.
        :type callback_query: CallbackQuery
        """

        self._callback_query = callback_query

    @property
    def channel_post(self):
        """Gets the channel_post of this Update.


        :return: The channel_post of this Update.
        :rtype: Message
        """
        return self._channel_post

    @channel_post.setter
    def channel_post(self, channel_post):
        """Sets the channel_post of this Update.


        :param channel_post: The channel_post of this Update.
        :type channel_post: Message
        """

        self._channel_post = channel_post

    @property
    def chosen_inline_result(self):
        """Gets the chosen_inline_result of this Update.


        :return: The chosen_inline_result of this Update.
        :rtype: ChosenInlineResult
        """
        return self._chosen_inline_result

    @chosen_inline_result.setter
    def chosen_inline_result(self, chosen_inline_result):
        """Sets the chosen_inline_result of this Update.


        :param chosen_inline_result: The chosen_inline_result of this Update.
        :type chosen_inline_result: ChosenInlineResult
        """

        self._chosen_inline_result = chosen_inline_result

    @property
    def edited_channel_post(self):
        """Gets the edited_channel_post of this Update.


        :return: The edited_channel_post of this Update.
        :rtype: Message
        """
        return self._edited_channel_post

    @edited_channel_post.setter
    def edited_channel_post(self, edited_channel_post):
        """Sets the edited_channel_post of this Update.


        :param edited_channel_post: The edited_channel_post of this Update.
        :type edited_channel_post: Message
        """

        self._edited_channel_post = edited_channel_post

    @property
    def edited_message(self):
        """Gets the edited_message of this Update.


        :return: The edited_message of this Update.
        :rtype: Message
        """
        return self._edited_message

    @edited_message.setter
    def edited_message(self, edited_message):
        """Sets the edited_message of this Update.


        :param edited_message: The edited_message of this Update.
        :type edited_message: Message
        """

        self._edited_message = edited_message

    @property
    def inline_query(self):
        """Gets the inline_query of this Update.


        :return: The inline_query of this Update.
        :rtype: InlineQuery
        """
        return self._inline_query

    @inline_query.setter
    def inline_query(self, inline_query):
        """Sets the inline_query of this Update.


        :param inline_query: The inline_query of this Update.
        :type inline_query: InlineQuery
        """

        self._inline_query = inline_query

    @property
    def message(self):
        """Gets the message of this Update.


        :return: The message of this Update.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Update.


        :param message: The message of this Update.
        :type message: Message
        """

        self._message = message

    @property
    def poll(self):
        """Gets the poll of this Update.


        :return: The poll of this Update.
        :rtype: Poll
        """
        return self._poll

    @poll.setter
    def poll(self, poll):
        """Sets the poll of this Update.


        :param poll: The poll of this Update.
        :type poll: Poll
        """

        self._poll = poll

    @property
    def poll_answer(self):
        """Gets the poll_answer of this Update.


        :return: The poll_answer of this Update.
        :rtype: PollAnswer
        """
        return self._poll_answer

    @poll_answer.setter
    def poll_answer(self, poll_answer):
        """Sets the poll_answer of this Update.


        :param poll_answer: The poll_answer of this Update.
        :type poll_answer: PollAnswer
        """

        self._poll_answer = poll_answer

    @property
    def pre_checkout_query(self):
        """Gets the pre_checkout_query of this Update.


        :return: The pre_checkout_query of this Update.
        :rtype: PreCheckoutQuery
        """
        return self._pre_checkout_query

    @pre_checkout_query.setter
    def pre_checkout_query(self, pre_checkout_query):
        """Sets the pre_checkout_query of this Update.


        :param pre_checkout_query: The pre_checkout_query of this Update.
        :type pre_checkout_query: PreCheckoutQuery
        """

        self._pre_checkout_query = pre_checkout_query

    @property
    def shipping_query(self):
        """Gets the shipping_query of this Update.


        :return: The shipping_query of this Update.
        :rtype: ShippingQuery
        """
        return self._shipping_query

    @shipping_query.setter
    def shipping_query(self, shipping_query):
        """Sets the shipping_query of this Update.


        :param shipping_query: The shipping_query of this Update.
        :type shipping_query: ShippingQuery
        """

        self._shipping_query = shipping_query

    @property
    def update_id(self):
        """Gets the update_id of this Update.

        The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.

        :return: The update_id of this Update.
        :rtype: int
        """
        return self._update_id

    @update_id.setter
    def update_id(self, update_id):
        """Sets the update_id of this Update.

        The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.

        :param update_id: The update_id of this Update.
        :type update_id: int
        """
        if update_id is None:
            raise ValueError("Invalid value for `update_id`, must not be `None`")

        self._update_id = update_id
