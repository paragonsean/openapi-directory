# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_entity import MessageEntity
from openapi_server import util


class InputTextMessageContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_web_page_preview: bool=None, entities: List[MessageEntity]=None, message_text: str=None, parse_mode: str=None):
        """InputTextMessageContent - a model defined in OpenAPI

        :param disable_web_page_preview: The disable_web_page_preview of this InputTextMessageContent.
        :param entities: The entities of this InputTextMessageContent.
        :param message_text: The message_text of this InputTextMessageContent.
        :param parse_mode: The parse_mode of this InputTextMessageContent.
        """
        self.openapi_types = {
            'disable_web_page_preview': bool,
            'entities': List[MessageEntity],
            'message_text': str,
            'parse_mode': str
        }

        self.attribute_map = {
            'disable_web_page_preview': 'disable_web_page_preview',
            'entities': 'entities',
            'message_text': 'message_text',
            'parse_mode': 'parse_mode'
        }

        self._disable_web_page_preview = disable_web_page_preview
        self._entities = entities
        self._message_text = message_text
        self._parse_mode = parse_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputTextMessageContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputTextMessageContent of this InputTextMessageContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_web_page_preview(self):
        """Gets the disable_web_page_preview of this InputTextMessageContent.

        *Optional*. Disables link previews for links in the sent message

        :return: The disable_web_page_preview of this InputTextMessageContent.
        :rtype: bool
        """
        return self._disable_web_page_preview

    @disable_web_page_preview.setter
    def disable_web_page_preview(self, disable_web_page_preview):
        """Sets the disable_web_page_preview of this InputTextMessageContent.

        *Optional*. Disables link previews for links in the sent message

        :param disable_web_page_preview: The disable_web_page_preview of this InputTextMessageContent.
        :type disable_web_page_preview: bool
        """

        self._disable_web_page_preview = disable_web_page_preview

    @property
    def entities(self):
        """Gets the entities of this InputTextMessageContent.

        *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\\_mode*

        :return: The entities of this InputTextMessageContent.
        :rtype: List[MessageEntity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this InputTextMessageContent.

        *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\\_mode*

        :param entities: The entities of this InputTextMessageContent.
        :type entities: List[MessageEntity]
        """

        self._entities = entities

    @property
    def message_text(self):
        """Gets the message_text of this InputTextMessageContent.

        Text of the message to be sent, 1-4096 characters

        :return: The message_text of this InputTextMessageContent.
        :rtype: str
        """
        return self._message_text

    @message_text.setter
    def message_text(self, message_text):
        """Sets the message_text of this InputTextMessageContent.

        Text of the message to be sent, 1-4096 characters

        :param message_text: The message_text of this InputTextMessageContent.
        :type message_text: str
        """
        if message_text is None:
            raise ValueError("Invalid value for `message_text`, must not be `None`")

        self._message_text = message_text

    @property
    def parse_mode(self):
        """Gets the parse_mode of this InputTextMessageContent.

        *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :return: The parse_mode of this InputTextMessageContent.
        :rtype: str
        """
        return self._parse_mode

    @parse_mode.setter
    def parse_mode(self, parse_mode):
        """Sets the parse_mode of this InputTextMessageContent.

        *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :param parse_mode: The parse_mode of this InputTextMessageContent.
        :type parse_mode: str
        """

        self._parse_mode = parse_mode
