# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnswerCallbackQueryPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_time: int=0, callback_query_id: str=None, show_alert: bool=False, text: str=None, url: str=None):
        """AnswerCallbackQueryPostRequest - a model defined in OpenAPI

        :param cache_time: The cache_time of this AnswerCallbackQueryPostRequest.
        :param callback_query_id: The callback_query_id of this AnswerCallbackQueryPostRequest.
        :param show_alert: The show_alert of this AnswerCallbackQueryPostRequest.
        :param text: The text of this AnswerCallbackQueryPostRequest.
        :param url: The url of this AnswerCallbackQueryPostRequest.
        """
        self.openapi_types = {
            'cache_time': int,
            'callback_query_id': str,
            'show_alert': bool,
            'text': str,
            'url': str
        }

        self.attribute_map = {
            'cache_time': 'cache_time',
            'callback_query_id': 'callback_query_id',
            'show_alert': 'show_alert',
            'text': 'text',
            'url': 'url'
        }

        self._cache_time = cache_time
        self._callback_query_id = callback_query_id
        self._show_alert = show_alert
        self._text = text
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnswerCallbackQueryPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _answerCallbackQuery_post_request of this AnswerCallbackQueryPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_time(self):
        """Gets the cache_time of this AnswerCallbackQueryPostRequest.

        The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.

        :return: The cache_time of this AnswerCallbackQueryPostRequest.
        :rtype: int
        """
        return self._cache_time

    @cache_time.setter
    def cache_time(self, cache_time):
        """Sets the cache_time of this AnswerCallbackQueryPostRequest.

        The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.

        :param cache_time: The cache_time of this AnswerCallbackQueryPostRequest.
        :type cache_time: int
        """

        self._cache_time = cache_time

    @property
    def callback_query_id(self):
        """Gets the callback_query_id of this AnswerCallbackQueryPostRequest.

        Unique identifier for the query to be answered

        :return: The callback_query_id of this AnswerCallbackQueryPostRequest.
        :rtype: str
        """
        return self._callback_query_id

    @callback_query_id.setter
    def callback_query_id(self, callback_query_id):
        """Sets the callback_query_id of this AnswerCallbackQueryPostRequest.

        Unique identifier for the query to be answered

        :param callback_query_id: The callback_query_id of this AnswerCallbackQueryPostRequest.
        :type callback_query_id: str
        """
        if callback_query_id is None:
            raise ValueError("Invalid value for `callback_query_id`, must not be `None`")

        self._callback_query_id = callback_query_id

    @property
    def show_alert(self):
        """Gets the show_alert of this AnswerCallbackQueryPostRequest.

        If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.

        :return: The show_alert of this AnswerCallbackQueryPostRequest.
        :rtype: bool
        """
        return self._show_alert

    @show_alert.setter
    def show_alert(self, show_alert):
        """Sets the show_alert of this AnswerCallbackQueryPostRequest.

        If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.

        :param show_alert: The show_alert of this AnswerCallbackQueryPostRequest.
        :type show_alert: bool
        """

        self._show_alert = show_alert

    @property
    def text(self):
        """Gets the text of this AnswerCallbackQueryPostRequest.

        Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters

        :return: The text of this AnswerCallbackQueryPostRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AnswerCallbackQueryPostRequest.

        Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters

        :param text: The text of this AnswerCallbackQueryPostRequest.
        :type text: str
        """

        self._text = text

    @property
    def url(self):
        """Gets the url of this AnswerCallbackQueryPostRequest.

        URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.    Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.

        :return: The url of this AnswerCallbackQueryPostRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AnswerCallbackQueryPostRequest.

        URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.    Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.

        :param url: The url of this AnswerCallbackQueryPostRequest.
        :type url: str
        """

        self._url = url
