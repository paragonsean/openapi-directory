# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_server.models.send_contact_post_request_reply_markup import SendContactPostRequestReplyMarkup
from openapi_server import util


class SendContactPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_sending_without_reply: bool=None, chat_id: CopyMessagePostRequestChatId=None, disable_notification: bool=None, first_name: str=None, last_name: str=None, phone_number: str=None, reply_markup: SendContactPostRequestReplyMarkup=None, reply_to_message_id: int=None, vcard: str=None):
        """SendContactPostRequest - a model defined in OpenAPI

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendContactPostRequest.
        :param chat_id: The chat_id of this SendContactPostRequest.
        :param disable_notification: The disable_notification of this SendContactPostRequest.
        :param first_name: The first_name of this SendContactPostRequest.
        :param last_name: The last_name of this SendContactPostRequest.
        :param phone_number: The phone_number of this SendContactPostRequest.
        :param reply_markup: The reply_markup of this SendContactPostRequest.
        :param reply_to_message_id: The reply_to_message_id of this SendContactPostRequest.
        :param vcard: The vcard of this SendContactPostRequest.
        """
        self.openapi_types = {
            'allow_sending_without_reply': bool,
            'chat_id': CopyMessagePostRequestChatId,
            'disable_notification': bool,
            'first_name': str,
            'last_name': str,
            'phone_number': str,
            'reply_markup': SendContactPostRequestReplyMarkup,
            'reply_to_message_id': int,
            'vcard': str
        }

        self.attribute_map = {
            'allow_sending_without_reply': 'allow_sending_without_reply',
            'chat_id': 'chat_id',
            'disable_notification': 'disable_notification',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'phone_number': 'phone_number',
            'reply_markup': 'reply_markup',
            'reply_to_message_id': 'reply_to_message_id',
            'vcard': 'vcard'
        }

        self._allow_sending_without_reply = allow_sending_without_reply
        self._chat_id = chat_id
        self._disable_notification = disable_notification
        self._first_name = first_name
        self._last_name = last_name
        self._phone_number = phone_number
        self._reply_markup = reply_markup
        self._reply_to_message_id = reply_to_message_id
        self._vcard = vcard

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendContactPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _sendContact_post_request of this SendContactPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_sending_without_reply(self):
        """Gets the allow_sending_without_reply of this SendContactPostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :return: The allow_sending_without_reply of this SendContactPostRequest.
        :rtype: bool
        """
        return self._allow_sending_without_reply

    @allow_sending_without_reply.setter
    def allow_sending_without_reply(self, allow_sending_without_reply):
        """Sets the allow_sending_without_reply of this SendContactPostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendContactPostRequest.
        :type allow_sending_without_reply: bool
        """

        self._allow_sending_without_reply = allow_sending_without_reply

    @property
    def chat_id(self):
        """Gets the chat_id of this SendContactPostRequest.


        :return: The chat_id of this SendContactPostRequest.
        :rtype: CopyMessagePostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SendContactPostRequest.


        :param chat_id: The chat_id of this SendContactPostRequest.
        :type chat_id: CopyMessagePostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def disable_notification(self):
        """Gets the disable_notification of this SendContactPostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :return: The disable_notification of this SendContactPostRequest.
        :rtype: bool
        """
        return self._disable_notification

    @disable_notification.setter
    def disable_notification(self, disable_notification):
        """Sets the disable_notification of this SendContactPostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :param disable_notification: The disable_notification of this SendContactPostRequest.
        :type disable_notification: bool
        """

        self._disable_notification = disable_notification

    @property
    def first_name(self):
        """Gets the first_name of this SendContactPostRequest.

        Contact's first name

        :return: The first_name of this SendContactPostRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SendContactPostRequest.

        Contact's first name

        :param first_name: The first_name of this SendContactPostRequest.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this SendContactPostRequest.

        Contact's last name

        :return: The last_name of this SendContactPostRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SendContactPostRequest.

        Contact's last name

        :param last_name: The last_name of this SendContactPostRequest.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this SendContactPostRequest.

        Contact's phone number

        :return: The phone_number of this SendContactPostRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SendContactPostRequest.

        Contact's phone number

        :param phone_number: The phone_number of this SendContactPostRequest.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def reply_markup(self):
        """Gets the reply_markup of this SendContactPostRequest.


        :return: The reply_markup of this SendContactPostRequest.
        :rtype: SendContactPostRequestReplyMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this SendContactPostRequest.


        :param reply_markup: The reply_markup of this SendContactPostRequest.
        :type reply_markup: SendContactPostRequestReplyMarkup
        """

        self._reply_markup = reply_markup

    @property
    def reply_to_message_id(self):
        """Gets the reply_to_message_id of this SendContactPostRequest.

        If the message is a reply, ID of the original message

        :return: The reply_to_message_id of this SendContactPostRequest.
        :rtype: int
        """
        return self._reply_to_message_id

    @reply_to_message_id.setter
    def reply_to_message_id(self, reply_to_message_id):
        """Sets the reply_to_message_id of this SendContactPostRequest.

        If the message is a reply, ID of the original message

        :param reply_to_message_id: The reply_to_message_id of this SendContactPostRequest.
        :type reply_to_message_id: int
        """

        self._reply_to_message_id = reply_to_message_id

    @property
    def vcard(self):
        """Gets the vcard of this SendContactPostRequest.

        Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes

        :return: The vcard of this SendContactPostRequest.
        :rtype: str
        """
        return self._vcard

    @vcard.setter
    def vcard(self, vcard):
        """Sets the vcard of this SendContactPostRequest.

        Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes

        :param vcard: The vcard of this SendContactPostRequest.
        :type vcard: str
        """

        self._vcard = vcard
