# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_server.models.copy_message_post_request_reply_markup import CopyMessagePostRequestReplyMarkup
from openapi_server import util


class SendDicePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_sending_without_reply: bool=None, chat_id: CopyMessagePostRequestChatId=None, disable_notification: bool=None, emoji: str='🎲', reply_markup: CopyMessagePostRequestReplyMarkup=None, reply_to_message_id: int=None):
        """SendDicePostRequest - a model defined in OpenAPI

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendDicePostRequest.
        :param chat_id: The chat_id of this SendDicePostRequest.
        :param disable_notification: The disable_notification of this SendDicePostRequest.
        :param emoji: The emoji of this SendDicePostRequest.
        :param reply_markup: The reply_markup of this SendDicePostRequest.
        :param reply_to_message_id: The reply_to_message_id of this SendDicePostRequest.
        """
        self.openapi_types = {
            'allow_sending_without_reply': bool,
            'chat_id': CopyMessagePostRequestChatId,
            'disable_notification': bool,
            'emoji': str,
            'reply_markup': CopyMessagePostRequestReplyMarkup,
            'reply_to_message_id': int
        }

        self.attribute_map = {
            'allow_sending_without_reply': 'allow_sending_without_reply',
            'chat_id': 'chat_id',
            'disable_notification': 'disable_notification',
            'emoji': 'emoji',
            'reply_markup': 'reply_markup',
            'reply_to_message_id': 'reply_to_message_id'
        }

        self._allow_sending_without_reply = allow_sending_without_reply
        self._chat_id = chat_id
        self._disable_notification = disable_notification
        self._emoji = emoji
        self._reply_markup = reply_markup
        self._reply_to_message_id = reply_to_message_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendDicePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _sendDice_post_request of this SendDicePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_sending_without_reply(self):
        """Gets the allow_sending_without_reply of this SendDicePostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :return: The allow_sending_without_reply of this SendDicePostRequest.
        :rtype: bool
        """
        return self._allow_sending_without_reply

    @allow_sending_without_reply.setter
    def allow_sending_without_reply(self, allow_sending_without_reply):
        """Sets the allow_sending_without_reply of this SendDicePostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendDicePostRequest.
        :type allow_sending_without_reply: bool
        """

        self._allow_sending_without_reply = allow_sending_without_reply

    @property
    def chat_id(self):
        """Gets the chat_id of this SendDicePostRequest.


        :return: The chat_id of this SendDicePostRequest.
        :rtype: CopyMessagePostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SendDicePostRequest.


        :param chat_id: The chat_id of this SendDicePostRequest.
        :type chat_id: CopyMessagePostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def disable_notification(self):
        """Gets the disable_notification of this SendDicePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :return: The disable_notification of this SendDicePostRequest.
        :rtype: bool
        """
        return self._disable_notification

    @disable_notification.setter
    def disable_notification(self, disable_notification):
        """Sets the disable_notification of this SendDicePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :param disable_notification: The disable_notification of this SendDicePostRequest.
        :type disable_notification: bool
        """

        self._disable_notification = disable_notification

    @property
    def emoji(self):
        """Gets the emoji of this SendDicePostRequest.

        Emoji on which the dice throw animation is based. Currently, must be one of “<img alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" />”, “<img alt=\"🎯\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" />”, “<img alt=\"🏀\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" />”, “<img alt=\"⚽\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" />”, or “<img alt=\"🎰\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" />”. Dice can have values 1-6 for “<img alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" />” and “<img alt=\"🎯\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" />”, values 1-5 for “<img alt=\"🏀\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" />” and “<img alt=\"⚽\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" />”, and values 1-64 for “<img alt=\"🎰\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" />”. Defaults to “<img alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" />”

        :return: The emoji of this SendDicePostRequest.
        :rtype: str
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this SendDicePostRequest.

        Emoji on which the dice throw animation is based. Currently, must be one of “<img alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" />”, “<img alt=\"🎯\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" />”, “<img alt=\"🏀\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" />”, “<img alt=\"⚽\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" />”, or “<img alt=\"🎰\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" />”. Dice can have values 1-6 for “<img alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" />” and “<img alt=\"🎯\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" />”, values 1-5 for “<img alt=\"🏀\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" />” and “<img alt=\"⚽\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" />”, and values 1-64 for “<img alt=\"🎰\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" />”. Defaults to “<img alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" />”

        :param emoji: The emoji of this SendDicePostRequest.
        :type emoji: str
        """
        allowed_values = ["🎲", "🎯", "🏀", "⚽", "🎰"]  # noqa: E501
        if emoji not in allowed_values:
            raise ValueError(
                "Invalid value for `emoji` ({0}), must be one of {1}"
                .format(emoji, allowed_values)
            )

        self._emoji = emoji

    @property
    def reply_markup(self):
        """Gets the reply_markup of this SendDicePostRequest.


        :return: The reply_markup of this SendDicePostRequest.
        :rtype: CopyMessagePostRequestReplyMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this SendDicePostRequest.


        :param reply_markup: The reply_markup of this SendDicePostRequest.
        :type reply_markup: CopyMessagePostRequestReplyMarkup
        """

        self._reply_markup = reply_markup

    @property
    def reply_to_message_id(self):
        """Gets the reply_to_message_id of this SendDicePostRequest.

        If the message is a reply, ID of the original message

        :return: The reply_to_message_id of this SendDicePostRequest.
        :rtype: int
        """
        return self._reply_to_message_id

    @reply_to_message_id.setter
    def reply_to_message_id(self, reply_to_message_id):
        """Sets the reply_to_message_id of this SendDicePostRequest.

        If the message is a reply, ID of the original message

        :param reply_to_message_id: The reply_to_message_id of this SendDicePostRequest.
        :type reply_to_message_id: int
        """

        self._reply_to_message_id = reply_to_message_id
