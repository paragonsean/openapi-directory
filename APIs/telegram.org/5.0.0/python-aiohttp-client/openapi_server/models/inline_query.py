# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server.models.user import User
from openapi_server import util


class InlineQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _from: User=None, id: str=None, location: Location=None, offset: str=None, query: str=None):
        """InlineQuery - a model defined in OpenAPI

        :param _from: The _from of this InlineQuery.
        :param id: The id of this InlineQuery.
        :param location: The location of this InlineQuery.
        :param offset: The offset of this InlineQuery.
        :param query: The query of this InlineQuery.
        """
        self.openapi_types = {
            '_from': User,
            'id': str,
            'location': Location,
            'offset': str,
            'query': str
        }

        self.attribute_map = {
            '_from': 'from',
            'id': 'id',
            'location': 'location',
            'offset': 'offset',
            'query': 'query'
        }

        self.__from = _from
        self._id = id
        self._location = location
        self._offset = offset
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InlineQuery of this InlineQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self):
        """Gets the _from of this InlineQuery.


        :return: The _from of this InlineQuery.
        :rtype: User
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this InlineQuery.


        :param _from: The _from of this InlineQuery.
        :type _from: User
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def id(self):
        """Gets the id of this InlineQuery.

        Unique identifier for this query

        :return: The id of this InlineQuery.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineQuery.

        Unique identifier for this query

        :param id: The id of this InlineQuery.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def location(self):
        """Gets the location of this InlineQuery.


        :return: The location of this InlineQuery.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineQuery.


        :param location: The location of this InlineQuery.
        :type location: Location
        """

        self._location = location

    @property
    def offset(self):
        """Gets the offset of this InlineQuery.

        Offset of the results to be returned, can be controlled by the bot

        :return: The offset of this InlineQuery.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this InlineQuery.

        Offset of the results to be returned, can be controlled by the bot

        :param offset: The offset of this InlineQuery.
        :type offset: str
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def query(self):
        """Gets the query of this InlineQuery.

        Text of the query (up to 256 characters)

        :return: The query of this InlineQuery.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this InlineQuery.

        Text of the query (up to 256 characters)

        :param query: The query of this InlineQuery.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query
