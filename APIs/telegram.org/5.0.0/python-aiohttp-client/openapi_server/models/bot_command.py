# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BotCommand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command: str=None, description: str=None):
        """BotCommand - a model defined in OpenAPI

        :param command: The command of this BotCommand.
        :param description: The description of this BotCommand.
        """
        self.openapi_types = {
            'command': str,
            'description': str
        }

        self.attribute_map = {
            'command': 'command',
            'description': 'description'
        }

        self._command = command
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BotCommand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BotCommand of this BotCommand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this BotCommand.

        Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.

        :return: The command of this BotCommand.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this BotCommand.

        Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.

        :param command: The command of this BotCommand.
        :type command: str
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")

        self._command = command

    @property
    def description(self):
        """Gets the description of this BotCommand.

        Description of the command, 3-256 characters.

        :return: The description of this BotCommand.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BotCommand.

        Description of the command, 3-256 characters.

        :param description: The description of this BotCommand.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description
