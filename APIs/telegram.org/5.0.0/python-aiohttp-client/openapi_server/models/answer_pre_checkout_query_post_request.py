# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnswerPreCheckoutQueryPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, ok: bool=None, pre_checkout_query_id: str=None):
        """AnswerPreCheckoutQueryPostRequest - a model defined in OpenAPI

        :param error_message: The error_message of this AnswerPreCheckoutQueryPostRequest.
        :param ok: The ok of this AnswerPreCheckoutQueryPostRequest.
        :param pre_checkout_query_id: The pre_checkout_query_id of this AnswerPreCheckoutQueryPostRequest.
        """
        self.openapi_types = {
            'error_message': str,
            'ok': bool,
            'pre_checkout_query_id': str
        }

        self.attribute_map = {
            'error_message': 'error_message',
            'ok': 'ok',
            'pre_checkout_query_id': 'pre_checkout_query_id'
        }

        self._error_message = error_message
        self._ok = ok
        self._pre_checkout_query_id = pre_checkout_query_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnswerPreCheckoutQueryPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _answerPreCheckoutQuery_post_request of this AnswerPreCheckoutQueryPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this AnswerPreCheckoutQueryPostRequest.

        Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.

        :return: The error_message of this AnswerPreCheckoutQueryPostRequest.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this AnswerPreCheckoutQueryPostRequest.

        Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.

        :param error_message: The error_message of this AnswerPreCheckoutQueryPostRequest.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def ok(self):
        """Gets the ok of this AnswerPreCheckoutQueryPostRequest.

        Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.

        :return: The ok of this AnswerPreCheckoutQueryPostRequest.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this AnswerPreCheckoutQueryPostRequest.

        Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.

        :param ok: The ok of this AnswerPreCheckoutQueryPostRequest.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def pre_checkout_query_id(self):
        """Gets the pre_checkout_query_id of this AnswerPreCheckoutQueryPostRequest.

        Unique identifier for the query to be answered

        :return: The pre_checkout_query_id of this AnswerPreCheckoutQueryPostRequest.
        :rtype: str
        """
        return self._pre_checkout_query_id

    @pre_checkout_query_id.setter
    def pre_checkout_query_id(self, pre_checkout_query_id):
        """Sets the pre_checkout_query_id of this AnswerPreCheckoutQueryPostRequest.

        Unique identifier for the query to be answered

        :param pre_checkout_query_id: The pre_checkout_query_id of this AnswerPreCheckoutQueryPostRequest.
        :type pre_checkout_query_id: str
        """
        if pre_checkout_query_id is None:
            raise ValueError("Invalid value for `pre_checkout_query_id`, must not be `None`")

        self._pre_checkout_query_id = pre_checkout_query_id
