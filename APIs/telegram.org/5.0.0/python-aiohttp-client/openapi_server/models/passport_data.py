# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encrypted_credentials import EncryptedCredentials
from openapi_server.models.encrypted_passport_element import EncryptedPassportElement
from openapi_server import util


class PassportData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credentials: EncryptedCredentials=None, data: List[EncryptedPassportElement]=None):
        """PassportData - a model defined in OpenAPI

        :param credentials: The credentials of this PassportData.
        :param data: The data of this PassportData.
        """
        self.openapi_types = {
            'credentials': EncryptedCredentials,
            'data': List[EncryptedPassportElement]
        }

        self.attribute_map = {
            'credentials': 'credentials',
            'data': 'data'
        }

        self._credentials = credentials
        self._data = data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PassportData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PassportData of this PassportData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credentials(self):
        """Gets the credentials of this PassportData.


        :return: The credentials of this PassportData.
        :rtype: EncryptedCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this PassportData.


        :param credentials: The credentials of this PassportData.
        :type credentials: EncryptedCredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")

        self._credentials = credentials

    @property
    def data(self):
        """Gets the data of this PassportData.

        Array with information about documents and other Telegram Passport elements that was shared with the bot

        :return: The data of this PassportData.
        :rtype: List[EncryptedPassportElement]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PassportData.

        Array with information about documents and other Telegram Passport elements that was shared with the bot

        :param data: The data of this PassportData.
        :type data: List[EncryptedPassportElement]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data
