# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class GameHighScore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, position: int=None, score: int=None, user: User=None):
        """GameHighScore - a model defined in OpenAPI

        :param position: The position of this GameHighScore.
        :param score: The score of this GameHighScore.
        :param user: The user of this GameHighScore.
        """
        self.openapi_types = {
            'position': int,
            'score': int,
            'user': User
        }

        self.attribute_map = {
            'position': 'position',
            'score': 'score',
            'user': 'user'
        }

        self._position = position
        self._score = score
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GameHighScore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GameHighScore of this GameHighScore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def position(self):
        """Gets the position of this GameHighScore.

        Position in high score table for the game

        :return: The position of this GameHighScore.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this GameHighScore.

        Position in high score table for the game

        :param position: The position of this GameHighScore.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def score(self):
        """Gets the score of this GameHighScore.

        Score

        :return: The score of this GameHighScore.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this GameHighScore.

        Score

        :param score: The score of this GameHighScore.
        :type score: int
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def user(self):
        """Gets the user of this GameHighScore.


        :return: The user of this GameHighScore.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this GameHighScore.


        :param user: The user of this GameHighScore.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
