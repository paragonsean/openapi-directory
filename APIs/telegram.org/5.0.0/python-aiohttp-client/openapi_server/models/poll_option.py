# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PollOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, voter_count: int=None):
        """PollOption - a model defined in OpenAPI

        :param text: The text of this PollOption.
        :param voter_count: The voter_count of this PollOption.
        """
        self.openapi_types = {
            'text': str,
            'voter_count': int
        }

        self.attribute_map = {
            'text': 'text',
            'voter_count': 'voter_count'
        }

        self._text = text
        self._voter_count = voter_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PollOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PollOption of this PollOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this PollOption.

        Option text, 1-100 characters

        :return: The text of this PollOption.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PollOption.

        Option text, 1-100 characters

        :param text: The text of this PollOption.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def voter_count(self):
        """Gets the voter_count of this PollOption.

        Number of users that voted for this option

        :return: The voter_count of this PollOption.
        :rtype: int
        """
        return self._voter_count

    @voter_count.setter
    def voter_count(self, voter_count):
        """Sets the voter_count of this PollOption.

        Number of users that voted for this option

        :param voter_count: The voter_count of this PollOption.
        :type voter_count: int
        """
        if voter_count is None:
            raise ValueError("Invalid value for `voter_count`, must not be `None`")

        self._voter_count = voter_count
