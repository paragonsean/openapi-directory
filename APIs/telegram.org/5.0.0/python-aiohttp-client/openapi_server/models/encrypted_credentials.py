# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptedCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, hash: str=None, secret: str=None):
        """EncryptedCredentials - a model defined in OpenAPI

        :param data: The data of this EncryptedCredentials.
        :param hash: The hash of this EncryptedCredentials.
        :param secret: The secret of this EncryptedCredentials.
        """
        self.openapi_types = {
            'data': str,
            'hash': str,
            'secret': str
        }

        self.attribute_map = {
            'data': 'data',
            'hash': 'hash',
            'secret': 'secret'
        }

        self._data = data
        self._hash = hash
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptedCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptedCredentials of this EncryptedCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this EncryptedCredentials.

        Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication

        :return: The data of this EncryptedCredentials.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EncryptedCredentials.

        Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication

        :param data: The data of this EncryptedCredentials.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def hash(self):
        """Gets the hash of this EncryptedCredentials.

        Base64-encoded data hash for data authentication

        :return: The hash of this EncryptedCredentials.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this EncryptedCredentials.

        Base64-encoded data hash for data authentication

        :param hash: The hash of this EncryptedCredentials.
        :type hash: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")

        self._hash = hash

    @property
    def secret(self):
        """Gets the secret of this EncryptedCredentials.

        Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption

        :return: The secret of this EncryptedCredentials.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this EncryptedCredentials.

        Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption

        :param secret: The secret of this EncryptedCredentials.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret
