# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.photo_size import PhotoSize
from openapi_server import util


class VideoNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, file_id: str=None, file_size: int=None, file_unique_id: str=None, length: int=None, thumb: PhotoSize=None):
        """VideoNote - a model defined in OpenAPI

        :param duration: The duration of this VideoNote.
        :param file_id: The file_id of this VideoNote.
        :param file_size: The file_size of this VideoNote.
        :param file_unique_id: The file_unique_id of this VideoNote.
        :param length: The length of this VideoNote.
        :param thumb: The thumb of this VideoNote.
        """
        self.openapi_types = {
            'duration': int,
            'file_id': str,
            'file_size': int,
            'file_unique_id': str,
            'length': int,
            'thumb': PhotoSize
        }

        self.attribute_map = {
            'duration': 'duration',
            'file_id': 'file_id',
            'file_size': 'file_size',
            'file_unique_id': 'file_unique_id',
            'length': 'length',
            'thumb': 'thumb'
        }

        self._duration = duration
        self._file_id = file_id
        self._file_size = file_size
        self._file_unique_id = file_unique_id
        self._length = length
        self._thumb = thumb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoNote of this VideoNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this VideoNote.

        Duration of the video in seconds as defined by sender

        :return: The duration of this VideoNote.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VideoNote.

        Duration of the video in seconds as defined by sender

        :param duration: The duration of this VideoNote.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def file_id(self):
        """Gets the file_id of this VideoNote.

        Identifier for this file, which can be used to download or reuse the file

        :return: The file_id of this VideoNote.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this VideoNote.

        Identifier for this file, which can be used to download or reuse the file

        :param file_id: The file_id of this VideoNote.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_size(self):
        """Gets the file_size of this VideoNote.

        *Optional*. File size

        :return: The file_size of this VideoNote.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this VideoNote.

        *Optional*. File size

        :param file_size: The file_size of this VideoNote.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def file_unique_id(self):
        """Gets the file_unique_id of this VideoNote.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :return: The file_unique_id of this VideoNote.
        :rtype: str
        """
        return self._file_unique_id

    @file_unique_id.setter
    def file_unique_id(self, file_unique_id):
        """Sets the file_unique_id of this VideoNote.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :param file_unique_id: The file_unique_id of this VideoNote.
        :type file_unique_id: str
        """
        if file_unique_id is None:
            raise ValueError("Invalid value for `file_unique_id`, must not be `None`")

        self._file_unique_id = file_unique_id

    @property
    def length(self):
        """Gets the length of this VideoNote.

        Video width and height (diameter of the video message) as defined by sender

        :return: The length of this VideoNote.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this VideoNote.

        Video width and height (diameter of the video message) as defined by sender

        :param length: The length of this VideoNote.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def thumb(self):
        """Gets the thumb of this VideoNote.


        :return: The thumb of this VideoNote.
        :rtype: PhotoSize
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this VideoNote.


        :param thumb: The thumb of this VideoNote.
        :type thumb: PhotoSize
        """

        self._thumb = thumb
