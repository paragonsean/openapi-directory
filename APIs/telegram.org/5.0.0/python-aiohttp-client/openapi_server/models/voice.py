# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Voice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, file_id: str=None, file_size: int=None, file_unique_id: str=None, mime_type: str=None):
        """Voice - a model defined in OpenAPI

        :param duration: The duration of this Voice.
        :param file_id: The file_id of this Voice.
        :param file_size: The file_size of this Voice.
        :param file_unique_id: The file_unique_id of this Voice.
        :param mime_type: The mime_type of this Voice.
        """
        self.openapi_types = {
            'duration': int,
            'file_id': str,
            'file_size': int,
            'file_unique_id': str,
            'mime_type': str
        }

        self.attribute_map = {
            'duration': 'duration',
            'file_id': 'file_id',
            'file_size': 'file_size',
            'file_unique_id': 'file_unique_id',
            'mime_type': 'mime_type'
        }

        self._duration = duration
        self._file_id = file_id
        self._file_size = file_size
        self._file_unique_id = file_unique_id
        self._mime_type = mime_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Voice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Voice of this Voice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this Voice.

        Duration of the audio in seconds as defined by sender

        :return: The duration of this Voice.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Voice.

        Duration of the audio in seconds as defined by sender

        :param duration: The duration of this Voice.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def file_id(self):
        """Gets the file_id of this Voice.

        Identifier for this file, which can be used to download or reuse the file

        :return: The file_id of this Voice.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Voice.

        Identifier for this file, which can be used to download or reuse the file

        :param file_id: The file_id of this Voice.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_size(self):
        """Gets the file_size of this Voice.

        *Optional*. File size

        :return: The file_size of this Voice.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Voice.

        *Optional*. File size

        :param file_size: The file_size of this Voice.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def file_unique_id(self):
        """Gets the file_unique_id of this Voice.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :return: The file_unique_id of this Voice.
        :rtype: str
        """
        return self._file_unique_id

    @file_unique_id.setter
    def file_unique_id(self, file_unique_id):
        """Sets the file_unique_id of this Voice.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :param file_unique_id: The file_unique_id of this Voice.
        :type file_unique_id: str
        """
        if file_unique_id is None:
            raise ValueError("Invalid value for `file_unique_id`, must not be `None`")

        self._file_unique_id = file_unique_id

    @property
    def mime_type(self):
        """Gets the mime_type of this Voice.

        *Optional*. MIME type of the file as defined by sender

        :return: The mime_type of this Voice.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Voice.

        *Optional*. MIME type of the file as defined by sender

        :param mime_type: The mime_type of this Voice.
        :type mime_type: str
        """

        self._mime_type = mime_type
