# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_server.models.copy_message_post_request_reply_markup import CopyMessagePostRequestReplyMarkup
from openapi_server.models.message_entity import MessageEntity
from openapi_server import util


class SendPollPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_sending_without_reply: bool=None, allows_multiple_answers: bool=None, chat_id: CopyMessagePostRequestChatId=None, close_date: int=None, correct_option_id: int=None, disable_notification: bool=None, explanation: str=None, explanation_entities: List[MessageEntity]=None, explanation_parse_mode: str=None, is_anonymous: bool=None, is_closed: bool=None, open_period: int=None, options: List[str]=None, question: str=None, reply_markup: CopyMessagePostRequestReplyMarkup=None, reply_to_message_id: int=None, type: str=None):
        """SendPollPostRequest - a model defined in OpenAPI

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendPollPostRequest.
        :param allows_multiple_answers: The allows_multiple_answers of this SendPollPostRequest.
        :param chat_id: The chat_id of this SendPollPostRequest.
        :param close_date: The close_date of this SendPollPostRequest.
        :param correct_option_id: The correct_option_id of this SendPollPostRequest.
        :param disable_notification: The disable_notification of this SendPollPostRequest.
        :param explanation: The explanation of this SendPollPostRequest.
        :param explanation_entities: The explanation_entities of this SendPollPostRequest.
        :param explanation_parse_mode: The explanation_parse_mode of this SendPollPostRequest.
        :param is_anonymous: The is_anonymous of this SendPollPostRequest.
        :param is_closed: The is_closed of this SendPollPostRequest.
        :param open_period: The open_period of this SendPollPostRequest.
        :param options: The options of this SendPollPostRequest.
        :param question: The question of this SendPollPostRequest.
        :param reply_markup: The reply_markup of this SendPollPostRequest.
        :param reply_to_message_id: The reply_to_message_id of this SendPollPostRequest.
        :param type: The type of this SendPollPostRequest.
        """
        self.openapi_types = {
            'allow_sending_without_reply': bool,
            'allows_multiple_answers': bool,
            'chat_id': CopyMessagePostRequestChatId,
            'close_date': int,
            'correct_option_id': int,
            'disable_notification': bool,
            'explanation': str,
            'explanation_entities': List[MessageEntity],
            'explanation_parse_mode': str,
            'is_anonymous': bool,
            'is_closed': bool,
            'open_period': int,
            'options': List[str],
            'question': str,
            'reply_markup': CopyMessagePostRequestReplyMarkup,
            'reply_to_message_id': int,
            'type': str
        }

        self.attribute_map = {
            'allow_sending_without_reply': 'allow_sending_without_reply',
            'allows_multiple_answers': 'allows_multiple_answers',
            'chat_id': 'chat_id',
            'close_date': 'close_date',
            'correct_option_id': 'correct_option_id',
            'disable_notification': 'disable_notification',
            'explanation': 'explanation',
            'explanation_entities': 'explanation_entities',
            'explanation_parse_mode': 'explanation_parse_mode',
            'is_anonymous': 'is_anonymous',
            'is_closed': 'is_closed',
            'open_period': 'open_period',
            'options': 'options',
            'question': 'question',
            'reply_markup': 'reply_markup',
            'reply_to_message_id': 'reply_to_message_id',
            'type': 'type'
        }

        self._allow_sending_without_reply = allow_sending_without_reply
        self._allows_multiple_answers = allows_multiple_answers
        self._chat_id = chat_id
        self._close_date = close_date
        self._correct_option_id = correct_option_id
        self._disable_notification = disable_notification
        self._explanation = explanation
        self._explanation_entities = explanation_entities
        self._explanation_parse_mode = explanation_parse_mode
        self._is_anonymous = is_anonymous
        self._is_closed = is_closed
        self._open_period = open_period
        self._options = options
        self._question = question
        self._reply_markup = reply_markup
        self._reply_to_message_id = reply_to_message_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendPollPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _sendPoll_post_request of this SendPollPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_sending_without_reply(self):
        """Gets the allow_sending_without_reply of this SendPollPostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :return: The allow_sending_without_reply of this SendPollPostRequest.
        :rtype: bool
        """
        return self._allow_sending_without_reply

    @allow_sending_without_reply.setter
    def allow_sending_without_reply(self, allow_sending_without_reply):
        """Sets the allow_sending_without_reply of this SendPollPostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendPollPostRequest.
        :type allow_sending_without_reply: bool
        """

        self._allow_sending_without_reply = allow_sending_without_reply

    @property
    def allows_multiple_answers(self):
        """Gets the allows_multiple_answers of this SendPollPostRequest.

        True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*

        :return: The allows_multiple_answers of this SendPollPostRequest.
        :rtype: bool
        """
        return self._allows_multiple_answers

    @allows_multiple_answers.setter
    def allows_multiple_answers(self, allows_multiple_answers):
        """Sets the allows_multiple_answers of this SendPollPostRequest.

        True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*

        :param allows_multiple_answers: The allows_multiple_answers of this SendPollPostRequest.
        :type allows_multiple_answers: bool
        """

        self._allows_multiple_answers = allows_multiple_answers

    @property
    def chat_id(self):
        """Gets the chat_id of this SendPollPostRequest.


        :return: The chat_id of this SendPollPostRequest.
        :rtype: CopyMessagePostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SendPollPostRequest.


        :param chat_id: The chat_id of this SendPollPostRequest.
        :type chat_id: CopyMessagePostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def close_date(self):
        """Gets the close_date of this SendPollPostRequest.

        Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\\_period*.

        :return: The close_date of this SendPollPostRequest.
        :rtype: int
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """Sets the close_date of this SendPollPostRequest.

        Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\\_period*.

        :param close_date: The close_date of this SendPollPostRequest.
        :type close_date: int
        """

        self._close_date = close_date

    @property
    def correct_option_id(self):
        """Gets the correct_option_id of this SendPollPostRequest.

        0-based identifier of the correct answer option, required for polls in quiz mode

        :return: The correct_option_id of this SendPollPostRequest.
        :rtype: int
        """
        return self._correct_option_id

    @correct_option_id.setter
    def correct_option_id(self, correct_option_id):
        """Sets the correct_option_id of this SendPollPostRequest.

        0-based identifier of the correct answer option, required for polls in quiz mode

        :param correct_option_id: The correct_option_id of this SendPollPostRequest.
        :type correct_option_id: int
        """

        self._correct_option_id = correct_option_id

    @property
    def disable_notification(self):
        """Gets the disable_notification of this SendPollPostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :return: The disable_notification of this SendPollPostRequest.
        :rtype: bool
        """
        return self._disable_notification

    @disable_notification.setter
    def disable_notification(self, disable_notification):
        """Sets the disable_notification of this SendPollPostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :param disable_notification: The disable_notification of this SendPollPostRequest.
        :type disable_notification: bool
        """

        self._disable_notification = disable_notification

    @property
    def explanation(self):
        """Gets the explanation of this SendPollPostRequest.

        Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing

        :return: The explanation of this SendPollPostRequest.
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this SendPollPostRequest.

        Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing

        :param explanation: The explanation of this SendPollPostRequest.
        :type explanation: str
        """

        self._explanation = explanation

    @property
    def explanation_entities(self):
        """Gets the explanation_entities of this SendPollPostRequest.

        List of special entities that appear in the poll explanation, which can be specified instead of *parse\\_mode*

        :return: The explanation_entities of this SendPollPostRequest.
        :rtype: List[MessageEntity]
        """
        return self._explanation_entities

    @explanation_entities.setter
    def explanation_entities(self, explanation_entities):
        """Sets the explanation_entities of this SendPollPostRequest.

        List of special entities that appear in the poll explanation, which can be specified instead of *parse\\_mode*

        :param explanation_entities: The explanation_entities of this SendPollPostRequest.
        :type explanation_entities: List[MessageEntity]
        """

        self._explanation_entities = explanation_entities

    @property
    def explanation_parse_mode(self):
        """Gets the explanation_parse_mode of this SendPollPostRequest.

        Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :return: The explanation_parse_mode of this SendPollPostRequest.
        :rtype: str
        """
        return self._explanation_parse_mode

    @explanation_parse_mode.setter
    def explanation_parse_mode(self, explanation_parse_mode):
        """Sets the explanation_parse_mode of this SendPollPostRequest.

        Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :param explanation_parse_mode: The explanation_parse_mode of this SendPollPostRequest.
        :type explanation_parse_mode: str
        """

        self._explanation_parse_mode = explanation_parse_mode

    @property
    def is_anonymous(self):
        """Gets the is_anonymous of this SendPollPostRequest.

        True, if the poll needs to be anonymous, defaults to *True*

        :return: The is_anonymous of this SendPollPostRequest.
        :rtype: bool
        """
        return self._is_anonymous

    @is_anonymous.setter
    def is_anonymous(self, is_anonymous):
        """Sets the is_anonymous of this SendPollPostRequest.

        True, if the poll needs to be anonymous, defaults to *True*

        :param is_anonymous: The is_anonymous of this SendPollPostRequest.
        :type is_anonymous: bool
        """

        self._is_anonymous = is_anonymous

    @property
    def is_closed(self):
        """Gets the is_closed of this SendPollPostRequest.

        Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.

        :return: The is_closed of this SendPollPostRequest.
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this SendPollPostRequest.

        Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.

        :param is_closed: The is_closed of this SendPollPostRequest.
        :type is_closed: bool
        """

        self._is_closed = is_closed

    @property
    def open_period(self):
        """Gets the open_period of this SendPollPostRequest.

        Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\\_date*.

        :return: The open_period of this SendPollPostRequest.
        :rtype: int
        """
        return self._open_period

    @open_period.setter
    def open_period(self, open_period):
        """Sets the open_period of this SendPollPostRequest.

        Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\\_date*.

        :param open_period: The open_period of this SendPollPostRequest.
        :type open_period: int
        """

        self._open_period = open_period

    @property
    def options(self):
        """Gets the options of this SendPollPostRequest.

        A JSON-serialized list of answer options, 2-10 strings 1-100 characters each

        :return: The options of this SendPollPostRequest.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this SendPollPostRequest.

        A JSON-serialized list of answer options, 2-10 strings 1-100 characters each

        :param options: The options of this SendPollPostRequest.
        :type options: List[str]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def question(self):
        """Gets the question of this SendPollPostRequest.

        Poll question, 1-300 characters

        :return: The question of this SendPollPostRequest.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this SendPollPostRequest.

        Poll question, 1-300 characters

        :param question: The question of this SendPollPostRequest.
        :type question: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")

        self._question = question

    @property
    def reply_markup(self):
        """Gets the reply_markup of this SendPollPostRequest.


        :return: The reply_markup of this SendPollPostRequest.
        :rtype: CopyMessagePostRequestReplyMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this SendPollPostRequest.


        :param reply_markup: The reply_markup of this SendPollPostRequest.
        :type reply_markup: CopyMessagePostRequestReplyMarkup
        """

        self._reply_markup = reply_markup

    @property
    def reply_to_message_id(self):
        """Gets the reply_to_message_id of this SendPollPostRequest.

        If the message is a reply, ID of the original message

        :return: The reply_to_message_id of this SendPollPostRequest.
        :rtype: int
        """
        return self._reply_to_message_id

    @reply_to_message_id.setter
    def reply_to_message_id(self, reply_to_message_id):
        """Sets the reply_to_message_id of this SendPollPostRequest.

        If the message is a reply, ID of the original message

        :param reply_to_message_id: The reply_to_message_id of this SendPollPostRequest.
        :type reply_to_message_id: int
        """

        self._reply_to_message_id = reply_to_message_id

    @property
    def type(self):
        """Gets the type of this SendPollPostRequest.

        Poll type, “quiz” or “regular”, defaults to “regular”

        :return: The type of this SendPollPostRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SendPollPostRequest.

        Poll type, “quiz” or “regular”, defaults to “regular”

        :param type: The type of this SendPollPostRequest.
        :type type: str
        """

        self._type = type
