# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_server.models.copy_message_post_request_reply_markup import CopyMessagePostRequestReplyMarkup
from openapi_server.models.message_entity import MessageEntity
from openapi_server import util


class SendMessagePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_sending_without_reply: bool=None, chat_id: CopyMessagePostRequestChatId=None, disable_notification: bool=None, disable_web_page_preview: bool=None, entities: List[MessageEntity]=None, parse_mode: str=None, reply_markup: CopyMessagePostRequestReplyMarkup=None, reply_to_message_id: int=None, text: str=None):
        """SendMessagePostRequest - a model defined in OpenAPI

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendMessagePostRequest.
        :param chat_id: The chat_id of this SendMessagePostRequest.
        :param disable_notification: The disable_notification of this SendMessagePostRequest.
        :param disable_web_page_preview: The disable_web_page_preview of this SendMessagePostRequest.
        :param entities: The entities of this SendMessagePostRequest.
        :param parse_mode: The parse_mode of this SendMessagePostRequest.
        :param reply_markup: The reply_markup of this SendMessagePostRequest.
        :param reply_to_message_id: The reply_to_message_id of this SendMessagePostRequest.
        :param text: The text of this SendMessagePostRequest.
        """
        self.openapi_types = {
            'allow_sending_without_reply': bool,
            'chat_id': CopyMessagePostRequestChatId,
            'disable_notification': bool,
            'disable_web_page_preview': bool,
            'entities': List[MessageEntity],
            'parse_mode': str,
            'reply_markup': CopyMessagePostRequestReplyMarkup,
            'reply_to_message_id': int,
            'text': str
        }

        self.attribute_map = {
            'allow_sending_without_reply': 'allow_sending_without_reply',
            'chat_id': 'chat_id',
            'disable_notification': 'disable_notification',
            'disable_web_page_preview': 'disable_web_page_preview',
            'entities': 'entities',
            'parse_mode': 'parse_mode',
            'reply_markup': 'reply_markup',
            'reply_to_message_id': 'reply_to_message_id',
            'text': 'text'
        }

        self._allow_sending_without_reply = allow_sending_without_reply
        self._chat_id = chat_id
        self._disable_notification = disable_notification
        self._disable_web_page_preview = disable_web_page_preview
        self._entities = entities
        self._parse_mode = parse_mode
        self._reply_markup = reply_markup
        self._reply_to_message_id = reply_to_message_id
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendMessagePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _sendMessage_post_request of this SendMessagePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_sending_without_reply(self):
        """Gets the allow_sending_without_reply of this SendMessagePostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :return: The allow_sending_without_reply of this SendMessagePostRequest.
        :rtype: bool
        """
        return self._allow_sending_without_reply

    @allow_sending_without_reply.setter
    def allow_sending_without_reply(self, allow_sending_without_reply):
        """Sets the allow_sending_without_reply of this SendMessagePostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendMessagePostRequest.
        :type allow_sending_without_reply: bool
        """

        self._allow_sending_without_reply = allow_sending_without_reply

    @property
    def chat_id(self):
        """Gets the chat_id of this SendMessagePostRequest.


        :return: The chat_id of this SendMessagePostRequest.
        :rtype: CopyMessagePostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SendMessagePostRequest.


        :param chat_id: The chat_id of this SendMessagePostRequest.
        :type chat_id: CopyMessagePostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def disable_notification(self):
        """Gets the disable_notification of this SendMessagePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :return: The disable_notification of this SendMessagePostRequest.
        :rtype: bool
        """
        return self._disable_notification

    @disable_notification.setter
    def disable_notification(self, disable_notification):
        """Sets the disable_notification of this SendMessagePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :param disable_notification: The disable_notification of this SendMessagePostRequest.
        :type disable_notification: bool
        """

        self._disable_notification = disable_notification

    @property
    def disable_web_page_preview(self):
        """Gets the disable_web_page_preview of this SendMessagePostRequest.

        Disables link previews for links in this message

        :return: The disable_web_page_preview of this SendMessagePostRequest.
        :rtype: bool
        """
        return self._disable_web_page_preview

    @disable_web_page_preview.setter
    def disable_web_page_preview(self, disable_web_page_preview):
        """Sets the disable_web_page_preview of this SendMessagePostRequest.

        Disables link previews for links in this message

        :param disable_web_page_preview: The disable_web_page_preview of this SendMessagePostRequest.
        :type disable_web_page_preview: bool
        """

        self._disable_web_page_preview = disable_web_page_preview

    @property
    def entities(self):
        """Gets the entities of this SendMessagePostRequest.

        List of special entities that appear in message text, which can be specified instead of *parse\\_mode*

        :return: The entities of this SendMessagePostRequest.
        :rtype: List[MessageEntity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this SendMessagePostRequest.

        List of special entities that appear in message text, which can be specified instead of *parse\\_mode*

        :param entities: The entities of this SendMessagePostRequest.
        :type entities: List[MessageEntity]
        """

        self._entities = entities

    @property
    def parse_mode(self):
        """Gets the parse_mode of this SendMessagePostRequest.

        Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :return: The parse_mode of this SendMessagePostRequest.
        :rtype: str
        """
        return self._parse_mode

    @parse_mode.setter
    def parse_mode(self, parse_mode):
        """Sets the parse_mode of this SendMessagePostRequest.

        Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :param parse_mode: The parse_mode of this SendMessagePostRequest.
        :type parse_mode: str
        """

        self._parse_mode = parse_mode

    @property
    def reply_markup(self):
        """Gets the reply_markup of this SendMessagePostRequest.


        :return: The reply_markup of this SendMessagePostRequest.
        :rtype: CopyMessagePostRequestReplyMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this SendMessagePostRequest.


        :param reply_markup: The reply_markup of this SendMessagePostRequest.
        :type reply_markup: CopyMessagePostRequestReplyMarkup
        """

        self._reply_markup = reply_markup

    @property
    def reply_to_message_id(self):
        """Gets the reply_to_message_id of this SendMessagePostRequest.

        If the message is a reply, ID of the original message

        :return: The reply_to_message_id of this SendMessagePostRequest.
        :rtype: int
        """
        return self._reply_to_message_id

    @reply_to_message_id.setter
    def reply_to_message_id(self, reply_to_message_id):
        """Sets the reply_to_message_id of this SendMessagePostRequest.

        If the message is a reply, ID of the original message

        :param reply_to_message_id: The reply_to_message_id of this SendMessagePostRequest.
        :type reply_to_message_id: int
        """

        self._reply_to_message_id = reply_to_message_id

    @property
    def text(self):
        """Gets the text of this SendMessagePostRequest.

        Text of the message to be sent, 1-4096 characters after entities parsing

        :return: The text of this SendMessagePostRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SendMessagePostRequest.

        Text of the message to be sent, 1-4096 characters after entities parsing

        :param text: The text of this SendMessagePostRequest.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
