# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_media_audio import InputMediaAudio
from openapi_server.models.input_media_document import InputMediaDocument
from openapi_server.models.input_media_photo import InputMediaPhoto
from openapi_server.models.input_media_video import InputMediaVideo
from openapi_server.models.message_entity import MessageEntity
from openapi_server import util


class SendMediaGroupPostRequestMediaInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, caption_entities: List[MessageEntity]=None, duration: int=None, media: str=None, parse_mode: str=None, performer: str=None, thumb: str=None, title: str=None, type: str=None, disable_content_type_detection: bool=None, height: int=None, supports_streaming: bool=None, width: int=None):
        """SendMediaGroupPostRequestMediaInner - a model defined in OpenAPI

        :param caption: The caption of this SendMediaGroupPostRequestMediaInner.
        :param caption_entities: The caption_entities of this SendMediaGroupPostRequestMediaInner.
        :param duration: The duration of this SendMediaGroupPostRequestMediaInner.
        :param media: The media of this SendMediaGroupPostRequestMediaInner.
        :param parse_mode: The parse_mode of this SendMediaGroupPostRequestMediaInner.
        :param performer: The performer of this SendMediaGroupPostRequestMediaInner.
        :param thumb: The thumb of this SendMediaGroupPostRequestMediaInner.
        :param title: The title of this SendMediaGroupPostRequestMediaInner.
        :param type: The type of this SendMediaGroupPostRequestMediaInner.
        :param disable_content_type_detection: The disable_content_type_detection of this SendMediaGroupPostRequestMediaInner.
        :param height: The height of this SendMediaGroupPostRequestMediaInner.
        :param supports_streaming: The supports_streaming of this SendMediaGroupPostRequestMediaInner.
        :param width: The width of this SendMediaGroupPostRequestMediaInner.
        """
        self.openapi_types = {
            'caption': str,
            'caption_entities': List[MessageEntity],
            'duration': int,
            'media': str,
            'parse_mode': str,
            'performer': str,
            'thumb': str,
            'title': str,
            'type': str,
            'disable_content_type_detection': bool,
            'height': int,
            'supports_streaming': bool,
            'width': int
        }

        self.attribute_map = {
            'caption': 'caption',
            'caption_entities': 'caption_entities',
            'duration': 'duration',
            'media': 'media',
            'parse_mode': 'parse_mode',
            'performer': 'performer',
            'thumb': 'thumb',
            'title': 'title',
            'type': 'type',
            'disable_content_type_detection': 'disable_content_type_detection',
            'height': 'height',
            'supports_streaming': 'supports_streaming',
            'width': 'width'
        }

        self._caption = caption
        self._caption_entities = caption_entities
        self._duration = duration
        self._media = media
        self._parse_mode = parse_mode
        self._performer = performer
        self._thumb = thumb
        self._title = title
        self._type = type
        self._disable_content_type_detection = disable_content_type_detection
        self._height = height
        self._supports_streaming = supports_streaming
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendMediaGroupPostRequestMediaInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _sendMediaGroup_post_request_media_inner of this SendMediaGroupPostRequestMediaInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing

        :return: The caption of this SendMediaGroupPostRequestMediaInner.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing

        :param caption: The caption of this SendMediaGroupPostRequestMediaInner.
        :type caption: str
        """

        self._caption = caption

    @property
    def caption_entities(self):
        """Gets the caption_entities of this SendMediaGroupPostRequestMediaInner.

        *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*

        :return: The caption_entities of this SendMediaGroupPostRequestMediaInner.
        :rtype: List[MessageEntity]
        """
        return self._caption_entities

    @caption_entities.setter
    def caption_entities(self, caption_entities):
        """Sets the caption_entities of this SendMediaGroupPostRequestMediaInner.

        *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*

        :param caption_entities: The caption_entities of this SendMediaGroupPostRequestMediaInner.
        :type caption_entities: List[MessageEntity]
        """

        self._caption_entities = caption_entities

    @property
    def duration(self):
        """Gets the duration of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Video duration

        :return: The duration of this SendMediaGroupPostRequestMediaInner.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Video duration

        :param duration: The duration of this SendMediaGroupPostRequestMediaInner.
        :type duration: int
        """

        self._duration = duration

    @property
    def media(self):
        """Gets the media of this SendMediaGroupPostRequestMediaInner.

        File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\\_attach\\_name>” to upload a new one using multipart/form-data under <file\\_attach\\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)

        :return: The media of this SendMediaGroupPostRequestMediaInner.
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this SendMediaGroupPostRequestMediaInner.

        File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\\_attach\\_name>” to upload a new one using multipart/form-data under <file\\_attach\\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)

        :param media: The media of this SendMediaGroupPostRequestMediaInner.
        :type media: str
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def parse_mode(self):
        """Gets the parse_mode of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :return: The parse_mode of this SendMediaGroupPostRequestMediaInner.
        :rtype: str
        """
        return self._parse_mode

    @parse_mode.setter
    def parse_mode(self, parse_mode):
        """Sets the parse_mode of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.

        :param parse_mode: The parse_mode of this SendMediaGroupPostRequestMediaInner.
        :type parse_mode: str
        """

        self._parse_mode = parse_mode

    @property
    def performer(self):
        """Gets the performer of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Performer of the audio

        :return: The performer of this SendMediaGroupPostRequestMediaInner.
        :rtype: str
        """
        return self._performer

    @performer.setter
    def performer(self, performer):
        """Sets the performer of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Performer of the audio

        :param performer: The performer of this SendMediaGroupPostRequestMediaInner.
        :type performer: str
        """

        self._performer = performer

    @property
    def thumb(self):
        """Gets the thumb of this SendMediaGroupPostRequestMediaInner.


        :return: The thumb of this SendMediaGroupPostRequestMediaInner.
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this SendMediaGroupPostRequestMediaInner.


        :param thumb: The thumb of this SendMediaGroupPostRequestMediaInner.
        :type thumb: str
        """

        self._thumb = thumb

    @property
    def title(self):
        """Gets the title of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Title of the audio

        :return: The title of this SendMediaGroupPostRequestMediaInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Title of the audio

        :param title: The title of this SendMediaGroupPostRequestMediaInner.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this SendMediaGroupPostRequestMediaInner.

        Type of the result, must be *video*

        :return: The type of this SendMediaGroupPostRequestMediaInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SendMediaGroupPostRequestMediaInner.

        Type of the result, must be *video*

        :param type: The type of this SendMediaGroupPostRequestMediaInner.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def disable_content_type_detection(self):
        """Gets the disable_content_type_detection of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.

        :return: The disable_content_type_detection of this SendMediaGroupPostRequestMediaInner.
        :rtype: bool
        """
        return self._disable_content_type_detection

    @disable_content_type_detection.setter
    def disable_content_type_detection(self, disable_content_type_detection):
        """Sets the disable_content_type_detection of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.

        :param disable_content_type_detection: The disable_content_type_detection of this SendMediaGroupPostRequestMediaInner.
        :type disable_content_type_detection: bool
        """

        self._disable_content_type_detection = disable_content_type_detection

    @property
    def height(self):
        """Gets the height of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Video height

        :return: The height of this SendMediaGroupPostRequestMediaInner.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Video height

        :param height: The height of this SendMediaGroupPostRequestMediaInner.
        :type height: int
        """

        self._height = height

    @property
    def supports_streaming(self):
        """Gets the supports_streaming of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Pass *True*, if the uploaded video is suitable for streaming

        :return: The supports_streaming of this SendMediaGroupPostRequestMediaInner.
        :rtype: bool
        """
        return self._supports_streaming

    @supports_streaming.setter
    def supports_streaming(self, supports_streaming):
        """Sets the supports_streaming of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Pass *True*, if the uploaded video is suitable for streaming

        :param supports_streaming: The supports_streaming of this SendMediaGroupPostRequestMediaInner.
        :type supports_streaming: bool
        """

        self._supports_streaming = supports_streaming

    @property
    def width(self):
        """Gets the width of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Video width

        :return: The width of this SendMediaGroupPostRequestMediaInner.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SendMediaGroupPostRequestMediaInner.

        *Optional*. Video width

        :param width: The width of this SendMediaGroupPostRequestMediaInner.
        :type width: int
        """

        self._width = width
