# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChatPhoto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, big_file_id: str=None, big_file_unique_id: str=None, small_file_id: str=None, small_file_unique_id: str=None):
        """ChatPhoto - a model defined in OpenAPI

        :param big_file_id: The big_file_id of this ChatPhoto.
        :param big_file_unique_id: The big_file_unique_id of this ChatPhoto.
        :param small_file_id: The small_file_id of this ChatPhoto.
        :param small_file_unique_id: The small_file_unique_id of this ChatPhoto.
        """
        self.openapi_types = {
            'big_file_id': str,
            'big_file_unique_id': str,
            'small_file_id': str,
            'small_file_unique_id': str
        }

        self.attribute_map = {
            'big_file_id': 'big_file_id',
            'big_file_unique_id': 'big_file_unique_id',
            'small_file_id': 'small_file_id',
            'small_file_unique_id': 'small_file_unique_id'
        }

        self._big_file_id = big_file_id
        self._big_file_unique_id = big_file_unique_id
        self._small_file_id = small_file_id
        self._small_file_unique_id = small_file_unique_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatPhoto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChatPhoto of this ChatPhoto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def big_file_id(self):
        """Gets the big_file_id of this ChatPhoto.

        File identifier of big (640x640) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.

        :return: The big_file_id of this ChatPhoto.
        :rtype: str
        """
        return self._big_file_id

    @big_file_id.setter
    def big_file_id(self, big_file_id):
        """Sets the big_file_id of this ChatPhoto.

        File identifier of big (640x640) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.

        :param big_file_id: The big_file_id of this ChatPhoto.
        :type big_file_id: str
        """
        if big_file_id is None:
            raise ValueError("Invalid value for `big_file_id`, must not be `None`")

        self._big_file_id = big_file_id

    @property
    def big_file_unique_id(self):
        """Gets the big_file_unique_id of this ChatPhoto.

        Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :return: The big_file_unique_id of this ChatPhoto.
        :rtype: str
        """
        return self._big_file_unique_id

    @big_file_unique_id.setter
    def big_file_unique_id(self, big_file_unique_id):
        """Sets the big_file_unique_id of this ChatPhoto.

        Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :param big_file_unique_id: The big_file_unique_id of this ChatPhoto.
        :type big_file_unique_id: str
        """
        if big_file_unique_id is None:
            raise ValueError("Invalid value for `big_file_unique_id`, must not be `None`")

        self._big_file_unique_id = big_file_unique_id

    @property
    def small_file_id(self):
        """Gets the small_file_id of this ChatPhoto.

        File identifier of small (160x160) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.

        :return: The small_file_id of this ChatPhoto.
        :rtype: str
        """
        return self._small_file_id

    @small_file_id.setter
    def small_file_id(self, small_file_id):
        """Sets the small_file_id of this ChatPhoto.

        File identifier of small (160x160) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.

        :param small_file_id: The small_file_id of this ChatPhoto.
        :type small_file_id: str
        """
        if small_file_id is None:
            raise ValueError("Invalid value for `small_file_id`, must not be `None`")

        self._small_file_id = small_file_id

    @property
    def small_file_unique_id(self):
        """Gets the small_file_unique_id of this ChatPhoto.

        Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :return: The small_file_unique_id of this ChatPhoto.
        :rtype: str
        """
        return self._small_file_unique_id

    @small_file_unique_id.setter
    def small_file_unique_id(self, small_file_unique_id):
        """Sets the small_file_unique_id of this ChatPhoto.

        Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :param small_file_unique_id: The small_file_unique_id of this ChatPhoto.
        :type small_file_unique_id: str
        """
        if small_file_unique_id is None:
            raise ValueError("Invalid value for `small_file_unique_id`, must not be `None`")

        self._small_file_unique_id = small_file_unique_id
