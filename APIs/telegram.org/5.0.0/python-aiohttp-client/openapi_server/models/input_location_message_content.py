# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputLocationMessageContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, heading: int=None, horizontal_accuracy: float=None, latitude: float=None, live_period: int=None, longitude: float=None, proximity_alert_radius: int=None):
        """InputLocationMessageContent - a model defined in OpenAPI

        :param heading: The heading of this InputLocationMessageContent.
        :param horizontal_accuracy: The horizontal_accuracy of this InputLocationMessageContent.
        :param latitude: The latitude of this InputLocationMessageContent.
        :param live_period: The live_period of this InputLocationMessageContent.
        :param longitude: The longitude of this InputLocationMessageContent.
        :param proximity_alert_radius: The proximity_alert_radius of this InputLocationMessageContent.
        """
        self.openapi_types = {
            'heading': int,
            'horizontal_accuracy': float,
            'latitude': float,
            'live_period': int,
            'longitude': float,
            'proximity_alert_radius': int
        }

        self.attribute_map = {
            'heading': 'heading',
            'horizontal_accuracy': 'horizontal_accuracy',
            'latitude': 'latitude',
            'live_period': 'live_period',
            'longitude': 'longitude',
            'proximity_alert_radius': 'proximity_alert_radius'
        }

        self._heading = heading
        self._horizontal_accuracy = horizontal_accuracy
        self._latitude = latitude
        self._live_period = live_period
        self._longitude = longitude
        self._proximity_alert_radius = proximity_alert_radius

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputLocationMessageContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputLocationMessageContent of this InputLocationMessageContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def heading(self):
        """Gets the heading of this InputLocationMessageContent.

        *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :return: The heading of this InputLocationMessageContent.
        :rtype: int
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this InputLocationMessageContent.

        *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :param heading: The heading of this InputLocationMessageContent.
        :type heading: int
        """

        self._heading = heading

    @property
    def horizontal_accuracy(self):
        """Gets the horizontal_accuracy of this InputLocationMessageContent.

        *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500

        :return: The horizontal_accuracy of this InputLocationMessageContent.
        :rtype: float
        """
        return self._horizontal_accuracy

    @horizontal_accuracy.setter
    def horizontal_accuracy(self, horizontal_accuracy):
        """Sets the horizontal_accuracy of this InputLocationMessageContent.

        *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500

        :param horizontal_accuracy: The horizontal_accuracy of this InputLocationMessageContent.
        :type horizontal_accuracy: float
        """

        self._horizontal_accuracy = horizontal_accuracy

    @property
    def latitude(self):
        """Gets the latitude of this InputLocationMessageContent.

        Latitude of the location in degrees

        :return: The latitude of this InputLocationMessageContent.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this InputLocationMessageContent.

        Latitude of the location in degrees

        :param latitude: The latitude of this InputLocationMessageContent.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def live_period(self):
        """Gets the live_period of this InputLocationMessageContent.

        *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.

        :return: The live_period of this InputLocationMessageContent.
        :rtype: int
        """
        return self._live_period

    @live_period.setter
    def live_period(self, live_period):
        """Sets the live_period of this InputLocationMessageContent.

        *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.

        :param live_period: The live_period of this InputLocationMessageContent.
        :type live_period: int
        """

        self._live_period = live_period

    @property
    def longitude(self):
        """Gets the longitude of this InputLocationMessageContent.

        Longitude of the location in degrees

        :return: The longitude of this InputLocationMessageContent.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this InputLocationMessageContent.

        Longitude of the location in degrees

        :param longitude: The longitude of this InputLocationMessageContent.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def proximity_alert_radius(self):
        """Gets the proximity_alert_radius of this InputLocationMessageContent.

        *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :return: The proximity_alert_radius of this InputLocationMessageContent.
        :rtype: int
        """
        return self._proximity_alert_radius

    @proximity_alert_radius.setter
    def proximity_alert_radius(self, proximity_alert_radius):
        """Sets the proximity_alert_radius of this InputLocationMessageContent.

        *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :param proximity_alert_radius: The proximity_alert_radius of this InputLocationMessageContent.
        :type proximity_alert_radius: int
        """

        self._proximity_alert_radius = proximity_alert_radius
