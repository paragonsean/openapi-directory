# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_server.models.copy_message_post_request_reply_markup import CopyMessagePostRequestReplyMarkup
from openapi_server import util


class SendVenuePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, allow_sending_without_reply: bool=None, chat_id: CopyMessagePostRequestChatId=None, disable_notification: bool=None, foursquare_id: str=None, foursquare_type: str=None, google_place_id: str=None, google_place_type: str=None, latitude: float=None, longitude: float=None, reply_markup: CopyMessagePostRequestReplyMarkup=None, reply_to_message_id: int=None, title: str=None):
        """SendVenuePostRequest - a model defined in OpenAPI

        :param address: The address of this SendVenuePostRequest.
        :param allow_sending_without_reply: The allow_sending_without_reply of this SendVenuePostRequest.
        :param chat_id: The chat_id of this SendVenuePostRequest.
        :param disable_notification: The disable_notification of this SendVenuePostRequest.
        :param foursquare_id: The foursquare_id of this SendVenuePostRequest.
        :param foursquare_type: The foursquare_type of this SendVenuePostRequest.
        :param google_place_id: The google_place_id of this SendVenuePostRequest.
        :param google_place_type: The google_place_type of this SendVenuePostRequest.
        :param latitude: The latitude of this SendVenuePostRequest.
        :param longitude: The longitude of this SendVenuePostRequest.
        :param reply_markup: The reply_markup of this SendVenuePostRequest.
        :param reply_to_message_id: The reply_to_message_id of this SendVenuePostRequest.
        :param title: The title of this SendVenuePostRequest.
        """
        self.openapi_types = {
            'address': str,
            'allow_sending_without_reply': bool,
            'chat_id': CopyMessagePostRequestChatId,
            'disable_notification': bool,
            'foursquare_id': str,
            'foursquare_type': str,
            'google_place_id': str,
            'google_place_type': str,
            'latitude': float,
            'longitude': float,
            'reply_markup': CopyMessagePostRequestReplyMarkup,
            'reply_to_message_id': int,
            'title': str
        }

        self.attribute_map = {
            'address': 'address',
            'allow_sending_without_reply': 'allow_sending_without_reply',
            'chat_id': 'chat_id',
            'disable_notification': 'disable_notification',
            'foursquare_id': 'foursquare_id',
            'foursquare_type': 'foursquare_type',
            'google_place_id': 'google_place_id',
            'google_place_type': 'google_place_type',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'reply_markup': 'reply_markup',
            'reply_to_message_id': 'reply_to_message_id',
            'title': 'title'
        }

        self._address = address
        self._allow_sending_without_reply = allow_sending_without_reply
        self._chat_id = chat_id
        self._disable_notification = disable_notification
        self._foursquare_id = foursquare_id
        self._foursquare_type = foursquare_type
        self._google_place_id = google_place_id
        self._google_place_type = google_place_type
        self._latitude = latitude
        self._longitude = longitude
        self._reply_markup = reply_markup
        self._reply_to_message_id = reply_to_message_id
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendVenuePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _sendVenue_post_request of this SendVenuePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this SendVenuePostRequest.

        Address of the venue

        :return: The address of this SendVenuePostRequest.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SendVenuePostRequest.

        Address of the venue

        :param address: The address of this SendVenuePostRequest.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def allow_sending_without_reply(self):
        """Gets the allow_sending_without_reply of this SendVenuePostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :return: The allow_sending_without_reply of this SendVenuePostRequest.
        :rtype: bool
        """
        return self._allow_sending_without_reply

    @allow_sending_without_reply.setter
    def allow_sending_without_reply(self, allow_sending_without_reply):
        """Sets the allow_sending_without_reply of this SendVenuePostRequest.

        Pass *True*, if the message should be sent even if the specified replied-to message is not found

        :param allow_sending_without_reply: The allow_sending_without_reply of this SendVenuePostRequest.
        :type allow_sending_without_reply: bool
        """

        self._allow_sending_without_reply = allow_sending_without_reply

    @property
    def chat_id(self):
        """Gets the chat_id of this SendVenuePostRequest.


        :return: The chat_id of this SendVenuePostRequest.
        :rtype: CopyMessagePostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SendVenuePostRequest.


        :param chat_id: The chat_id of this SendVenuePostRequest.
        :type chat_id: CopyMessagePostRequestChatId
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")

        self._chat_id = chat_id

    @property
    def disable_notification(self):
        """Gets the disable_notification of this SendVenuePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :return: The disable_notification of this SendVenuePostRequest.
        :rtype: bool
        """
        return self._disable_notification

    @disable_notification.setter
    def disable_notification(self, disable_notification):
        """Sets the disable_notification of this SendVenuePostRequest.

        Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.

        :param disable_notification: The disable_notification of this SendVenuePostRequest.
        :type disable_notification: bool
        """

        self._disable_notification = disable_notification

    @property
    def foursquare_id(self):
        """Gets the foursquare_id of this SendVenuePostRequest.

        Foursquare identifier of the venue

        :return: The foursquare_id of this SendVenuePostRequest.
        :rtype: str
        """
        return self._foursquare_id

    @foursquare_id.setter
    def foursquare_id(self, foursquare_id):
        """Sets the foursquare_id of this SendVenuePostRequest.

        Foursquare identifier of the venue

        :param foursquare_id: The foursquare_id of this SendVenuePostRequest.
        :type foursquare_id: str
        """

        self._foursquare_id = foursquare_id

    @property
    def foursquare_type(self):
        """Gets the foursquare_type of this SendVenuePostRequest.

        Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)

        :return: The foursquare_type of this SendVenuePostRequest.
        :rtype: str
        """
        return self._foursquare_type

    @foursquare_type.setter
    def foursquare_type(self, foursquare_type):
        """Sets the foursquare_type of this SendVenuePostRequest.

        Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)

        :param foursquare_type: The foursquare_type of this SendVenuePostRequest.
        :type foursquare_type: str
        """

        self._foursquare_type = foursquare_type

    @property
    def google_place_id(self):
        """Gets the google_place_id of this SendVenuePostRequest.

        Google Places identifier of the venue

        :return: The google_place_id of this SendVenuePostRequest.
        :rtype: str
        """
        return self._google_place_id

    @google_place_id.setter
    def google_place_id(self, google_place_id):
        """Sets the google_place_id of this SendVenuePostRequest.

        Google Places identifier of the venue

        :param google_place_id: The google_place_id of this SendVenuePostRequest.
        :type google_place_id: str
        """

        self._google_place_id = google_place_id

    @property
    def google_place_type(self):
        """Gets the google_place_type of this SendVenuePostRequest.

        Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)

        :return: The google_place_type of this SendVenuePostRequest.
        :rtype: str
        """
        return self._google_place_type

    @google_place_type.setter
    def google_place_type(self, google_place_type):
        """Sets the google_place_type of this SendVenuePostRequest.

        Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)

        :param google_place_type: The google_place_type of this SendVenuePostRequest.
        :type google_place_type: str
        """

        self._google_place_type = google_place_type

    @property
    def latitude(self):
        """Gets the latitude of this SendVenuePostRequest.

        Latitude of the venue

        :return: The latitude of this SendVenuePostRequest.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this SendVenuePostRequest.

        Latitude of the venue

        :param latitude: The latitude of this SendVenuePostRequest.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this SendVenuePostRequest.

        Longitude of the venue

        :return: The longitude of this SendVenuePostRequest.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this SendVenuePostRequest.

        Longitude of the venue

        :param longitude: The longitude of this SendVenuePostRequest.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def reply_markup(self):
        """Gets the reply_markup of this SendVenuePostRequest.


        :return: The reply_markup of this SendVenuePostRequest.
        :rtype: CopyMessagePostRequestReplyMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this SendVenuePostRequest.


        :param reply_markup: The reply_markup of this SendVenuePostRequest.
        :type reply_markup: CopyMessagePostRequestReplyMarkup
        """

        self._reply_markup = reply_markup

    @property
    def reply_to_message_id(self):
        """Gets the reply_to_message_id of this SendVenuePostRequest.

        If the message is a reply, ID of the original message

        :return: The reply_to_message_id of this SendVenuePostRequest.
        :rtype: int
        """
        return self._reply_to_message_id

    @reply_to_message_id.setter
    def reply_to_message_id(self, reply_to_message_id):
        """Sets the reply_to_message_id of this SendVenuePostRequest.

        If the message is a reply, ID of the original message

        :param reply_to_message_id: The reply_to_message_id of this SendVenuePostRequest.
        :type reply_to_message_id: int
        """

        self._reply_to_message_id = reply_to_message_id

    @property
    def title(self):
        """Gets the title of this SendVenuePostRequest.

        Name of the venue

        :return: The title of this SendVenuePostRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SendVenuePostRequest.

        Name of the venue

        :param title: The title of this SendVenuePostRequest.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
