# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server.models.input_message_content import InputMessageContent
from openapi_server import util


class InlineQueryResultLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, heading: int=None, horizontal_accuracy: float=None, id: str=None, input_message_content: InputMessageContent=None, latitude: float=None, live_period: int=None, longitude: float=None, proximity_alert_radius: int=None, reply_markup: InlineKeyboardMarkup=None, thumb_height: int=None, thumb_url: str=None, thumb_width: int=None, title: str=None, type: str=None):
        """InlineQueryResultLocation - a model defined in OpenAPI

        :param heading: The heading of this InlineQueryResultLocation.
        :param horizontal_accuracy: The horizontal_accuracy of this InlineQueryResultLocation.
        :param id: The id of this InlineQueryResultLocation.
        :param input_message_content: The input_message_content of this InlineQueryResultLocation.
        :param latitude: The latitude of this InlineQueryResultLocation.
        :param live_period: The live_period of this InlineQueryResultLocation.
        :param longitude: The longitude of this InlineQueryResultLocation.
        :param proximity_alert_radius: The proximity_alert_radius of this InlineQueryResultLocation.
        :param reply_markup: The reply_markup of this InlineQueryResultLocation.
        :param thumb_height: The thumb_height of this InlineQueryResultLocation.
        :param thumb_url: The thumb_url of this InlineQueryResultLocation.
        :param thumb_width: The thumb_width of this InlineQueryResultLocation.
        :param title: The title of this InlineQueryResultLocation.
        :param type: The type of this InlineQueryResultLocation.
        """
        self.openapi_types = {
            'heading': int,
            'horizontal_accuracy': float,
            'id': str,
            'input_message_content': InputMessageContent,
            'latitude': float,
            'live_period': int,
            'longitude': float,
            'proximity_alert_radius': int,
            'reply_markup': InlineKeyboardMarkup,
            'thumb_height': int,
            'thumb_url': str,
            'thumb_width': int,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'heading': 'heading',
            'horizontal_accuracy': 'horizontal_accuracy',
            'id': 'id',
            'input_message_content': 'input_message_content',
            'latitude': 'latitude',
            'live_period': 'live_period',
            'longitude': 'longitude',
            'proximity_alert_radius': 'proximity_alert_radius',
            'reply_markup': 'reply_markup',
            'thumb_height': 'thumb_height',
            'thumb_url': 'thumb_url',
            'thumb_width': 'thumb_width',
            'title': 'title',
            'type': 'type'
        }

        self._heading = heading
        self._horizontal_accuracy = horizontal_accuracy
        self._id = id
        self._input_message_content = input_message_content
        self._latitude = latitude
        self._live_period = live_period
        self._longitude = longitude
        self._proximity_alert_radius = proximity_alert_radius
        self._reply_markup = reply_markup
        self._thumb_height = thumb_height
        self._thumb_url = thumb_url
        self._thumb_width = thumb_width
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineQueryResultLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InlineQueryResultLocation of this InlineQueryResultLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def heading(self):
        """Gets the heading of this InlineQueryResultLocation.

        *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :return: The heading of this InlineQueryResultLocation.
        :rtype: int
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this InlineQueryResultLocation.

        *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :param heading: The heading of this InlineQueryResultLocation.
        :type heading: int
        """

        self._heading = heading

    @property
    def horizontal_accuracy(self):
        """Gets the horizontal_accuracy of this InlineQueryResultLocation.

        *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500

        :return: The horizontal_accuracy of this InlineQueryResultLocation.
        :rtype: float
        """
        return self._horizontal_accuracy

    @horizontal_accuracy.setter
    def horizontal_accuracy(self, horizontal_accuracy):
        """Sets the horizontal_accuracy of this InlineQueryResultLocation.

        *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500

        :param horizontal_accuracy: The horizontal_accuracy of this InlineQueryResultLocation.
        :type horizontal_accuracy: float
        """

        self._horizontal_accuracy = horizontal_accuracy

    @property
    def id(self):
        """Gets the id of this InlineQueryResultLocation.

        Unique identifier for this result, 1-64 Bytes

        :return: The id of this InlineQueryResultLocation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineQueryResultLocation.

        Unique identifier for this result, 1-64 Bytes

        :param id: The id of this InlineQueryResultLocation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def input_message_content(self):
        """Gets the input_message_content of this InlineQueryResultLocation.


        :return: The input_message_content of this InlineQueryResultLocation.
        :rtype: InputMessageContent
        """
        return self._input_message_content

    @input_message_content.setter
    def input_message_content(self, input_message_content):
        """Sets the input_message_content of this InlineQueryResultLocation.


        :param input_message_content: The input_message_content of this InlineQueryResultLocation.
        :type input_message_content: InputMessageContent
        """

        self._input_message_content = input_message_content

    @property
    def latitude(self):
        """Gets the latitude of this InlineQueryResultLocation.

        Location latitude in degrees

        :return: The latitude of this InlineQueryResultLocation.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this InlineQueryResultLocation.

        Location latitude in degrees

        :param latitude: The latitude of this InlineQueryResultLocation.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def live_period(self):
        """Gets the live_period of this InlineQueryResultLocation.

        *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.

        :return: The live_period of this InlineQueryResultLocation.
        :rtype: int
        """
        return self._live_period

    @live_period.setter
    def live_period(self, live_period):
        """Sets the live_period of this InlineQueryResultLocation.

        *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.

        :param live_period: The live_period of this InlineQueryResultLocation.
        :type live_period: int
        """

        self._live_period = live_period

    @property
    def longitude(self):
        """Gets the longitude of this InlineQueryResultLocation.

        Location longitude in degrees

        :return: The longitude of this InlineQueryResultLocation.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this InlineQueryResultLocation.

        Location longitude in degrees

        :param longitude: The longitude of this InlineQueryResultLocation.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def proximity_alert_radius(self):
        """Gets the proximity_alert_radius of this InlineQueryResultLocation.

        *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :return: The proximity_alert_radius of this InlineQueryResultLocation.
        :rtype: int
        """
        return self._proximity_alert_radius

    @proximity_alert_radius.setter
    def proximity_alert_radius(self, proximity_alert_radius):
        """Sets the proximity_alert_radius of this InlineQueryResultLocation.

        *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :param proximity_alert_radius: The proximity_alert_radius of this InlineQueryResultLocation.
        :type proximity_alert_radius: int
        """

        self._proximity_alert_radius = proximity_alert_radius

    @property
    def reply_markup(self):
        """Gets the reply_markup of this InlineQueryResultLocation.


        :return: The reply_markup of this InlineQueryResultLocation.
        :rtype: InlineKeyboardMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this InlineQueryResultLocation.


        :param reply_markup: The reply_markup of this InlineQueryResultLocation.
        :type reply_markup: InlineKeyboardMarkup
        """

        self._reply_markup = reply_markup

    @property
    def thumb_height(self):
        """Gets the thumb_height of this InlineQueryResultLocation.

        *Optional*. Thumbnail height

        :return: The thumb_height of this InlineQueryResultLocation.
        :rtype: int
        """
        return self._thumb_height

    @thumb_height.setter
    def thumb_height(self, thumb_height):
        """Sets the thumb_height of this InlineQueryResultLocation.

        *Optional*. Thumbnail height

        :param thumb_height: The thumb_height of this InlineQueryResultLocation.
        :type thumb_height: int
        """

        self._thumb_height = thumb_height

    @property
    def thumb_url(self):
        """Gets the thumb_url of this InlineQueryResultLocation.

        *Optional*. Url of the thumbnail for the result

        :return: The thumb_url of this InlineQueryResultLocation.
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this InlineQueryResultLocation.

        *Optional*. Url of the thumbnail for the result

        :param thumb_url: The thumb_url of this InlineQueryResultLocation.
        :type thumb_url: str
        """

        self._thumb_url = thumb_url

    @property
    def thumb_width(self):
        """Gets the thumb_width of this InlineQueryResultLocation.

        *Optional*. Thumbnail width

        :return: The thumb_width of this InlineQueryResultLocation.
        :rtype: int
        """
        return self._thumb_width

    @thumb_width.setter
    def thumb_width(self, thumb_width):
        """Sets the thumb_width of this InlineQueryResultLocation.

        *Optional*. Thumbnail width

        :param thumb_width: The thumb_width of this InlineQueryResultLocation.
        :type thumb_width: int
        """

        self._thumb_width = thumb_width

    @property
    def title(self):
        """Gets the title of this InlineQueryResultLocation.

        Location title

        :return: The title of this InlineQueryResultLocation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineQueryResultLocation.

        Location title

        :param title: The title of this InlineQueryResultLocation.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this InlineQueryResultLocation.

        Type of the result, must be *location*

        :return: The type of this InlineQueryResultLocation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineQueryResultLocation.

        Type of the result, must be *location*

        :param type: The type of this InlineQueryResultLocation.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
