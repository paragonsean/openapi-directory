# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhotoSize(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_id: str=None, file_size: int=None, file_unique_id: str=None, height: int=None, width: int=None):
        """PhotoSize - a model defined in OpenAPI

        :param file_id: The file_id of this PhotoSize.
        :param file_size: The file_size of this PhotoSize.
        :param file_unique_id: The file_unique_id of this PhotoSize.
        :param height: The height of this PhotoSize.
        :param width: The width of this PhotoSize.
        """
        self.openapi_types = {
            'file_id': str,
            'file_size': int,
            'file_unique_id': str,
            'height': int,
            'width': int
        }

        self.attribute_map = {
            'file_id': 'file_id',
            'file_size': 'file_size',
            'file_unique_id': 'file_unique_id',
            'height': 'height',
            'width': 'width'
        }

        self._file_id = file_id
        self._file_size = file_size
        self._file_unique_id = file_unique_id
        self._height = height
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhotoSize':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhotoSize of this PhotoSize.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self):
        """Gets the file_id of this PhotoSize.

        Identifier for this file, which can be used to download or reuse the file

        :return: The file_id of this PhotoSize.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this PhotoSize.

        Identifier for this file, which can be used to download or reuse the file

        :param file_id: The file_id of this PhotoSize.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_size(self):
        """Gets the file_size of this PhotoSize.

        *Optional*. File size

        :return: The file_size of this PhotoSize.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this PhotoSize.

        *Optional*. File size

        :param file_size: The file_size of this PhotoSize.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def file_unique_id(self):
        """Gets the file_unique_id of this PhotoSize.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :return: The file_unique_id of this PhotoSize.
        :rtype: str
        """
        return self._file_unique_id

    @file_unique_id.setter
    def file_unique_id(self, file_unique_id):
        """Sets the file_unique_id of this PhotoSize.

        Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.

        :param file_unique_id: The file_unique_id of this PhotoSize.
        :type file_unique_id: str
        """
        if file_unique_id is None:
            raise ValueError("Invalid value for `file_unique_id`, must not be `None`")

        self._file_unique_id = file_unique_id

    @property
    def height(self):
        """Gets the height of this PhotoSize.

        Photo height

        :return: The height of this PhotoSize.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PhotoSize.

        Photo height

        :param height: The height of this PhotoSize.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def width(self):
        """Gets the width of this PhotoSize.

        Photo width

        :return: The width of this PhotoSize.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PhotoSize.

        Photo width

        :param width: The width of this PhotoSize.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
