# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.edit_message_caption_post_request_chat_id import EditMessageCaptionPostRequestChatId
from openapi_server.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_server import util


class EditMessageLiveLocationPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_id: EditMessageCaptionPostRequestChatId=None, heading: int=None, horizontal_accuracy: float=None, inline_message_id: str=None, latitude: float=None, longitude: float=None, message_id: int=None, proximity_alert_radius: int=None, reply_markup: InlineKeyboardMarkup=None):
        """EditMessageLiveLocationPostRequest - a model defined in OpenAPI

        :param chat_id: The chat_id of this EditMessageLiveLocationPostRequest.
        :param heading: The heading of this EditMessageLiveLocationPostRequest.
        :param horizontal_accuracy: The horizontal_accuracy of this EditMessageLiveLocationPostRequest.
        :param inline_message_id: The inline_message_id of this EditMessageLiveLocationPostRequest.
        :param latitude: The latitude of this EditMessageLiveLocationPostRequest.
        :param longitude: The longitude of this EditMessageLiveLocationPostRequest.
        :param message_id: The message_id of this EditMessageLiveLocationPostRequest.
        :param proximity_alert_radius: The proximity_alert_radius of this EditMessageLiveLocationPostRequest.
        :param reply_markup: The reply_markup of this EditMessageLiveLocationPostRequest.
        """
        self.openapi_types = {
            'chat_id': EditMessageCaptionPostRequestChatId,
            'heading': int,
            'horizontal_accuracy': float,
            'inline_message_id': str,
            'latitude': float,
            'longitude': float,
            'message_id': int,
            'proximity_alert_radius': int,
            'reply_markup': InlineKeyboardMarkup
        }

        self.attribute_map = {
            'chat_id': 'chat_id',
            'heading': 'heading',
            'horizontal_accuracy': 'horizontal_accuracy',
            'inline_message_id': 'inline_message_id',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'message_id': 'message_id',
            'proximity_alert_radius': 'proximity_alert_radius',
            'reply_markup': 'reply_markup'
        }

        self._chat_id = chat_id
        self._heading = heading
        self._horizontal_accuracy = horizontal_accuracy
        self._inline_message_id = inline_message_id
        self._latitude = latitude
        self._longitude = longitude
        self._message_id = message_id
        self._proximity_alert_radius = proximity_alert_radius
        self._reply_markup = reply_markup

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditMessageLiveLocationPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _editMessageLiveLocation_post_request of this EditMessageLiveLocationPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_id(self):
        """Gets the chat_id of this EditMessageLiveLocationPostRequest.


        :return: The chat_id of this EditMessageLiveLocationPostRequest.
        :rtype: EditMessageCaptionPostRequestChatId
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this EditMessageLiveLocationPostRequest.


        :param chat_id: The chat_id of this EditMessageLiveLocationPostRequest.
        :type chat_id: EditMessageCaptionPostRequestChatId
        """

        self._chat_id = chat_id

    @property
    def heading(self):
        """Gets the heading of this EditMessageLiveLocationPostRequest.

        Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :return: The heading of this EditMessageLiveLocationPostRequest.
        :rtype: int
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this EditMessageLiveLocationPostRequest.

        Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.

        :param heading: The heading of this EditMessageLiveLocationPostRequest.
        :type heading: int
        """

        self._heading = heading

    @property
    def horizontal_accuracy(self):
        """Gets the horizontal_accuracy of this EditMessageLiveLocationPostRequest.

        The radius of uncertainty for the location, measured in meters; 0-1500

        :return: The horizontal_accuracy of this EditMessageLiveLocationPostRequest.
        :rtype: float
        """
        return self._horizontal_accuracy

    @horizontal_accuracy.setter
    def horizontal_accuracy(self, horizontal_accuracy):
        """Sets the horizontal_accuracy of this EditMessageLiveLocationPostRequest.

        The radius of uncertainty for the location, measured in meters; 0-1500

        :param horizontal_accuracy: The horizontal_accuracy of this EditMessageLiveLocationPostRequest.
        :type horizontal_accuracy: float
        """

        self._horizontal_accuracy = horizontal_accuracy

    @property
    def inline_message_id(self):
        """Gets the inline_message_id of this EditMessageLiveLocationPostRequest.

        Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message

        :return: The inline_message_id of this EditMessageLiveLocationPostRequest.
        :rtype: str
        """
        return self._inline_message_id

    @inline_message_id.setter
    def inline_message_id(self, inline_message_id):
        """Sets the inline_message_id of this EditMessageLiveLocationPostRequest.

        Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message

        :param inline_message_id: The inline_message_id of this EditMessageLiveLocationPostRequest.
        :type inline_message_id: str
        """

        self._inline_message_id = inline_message_id

    @property
    def latitude(self):
        """Gets the latitude of this EditMessageLiveLocationPostRequest.

        Latitude of new location

        :return: The latitude of this EditMessageLiveLocationPostRequest.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this EditMessageLiveLocationPostRequest.

        Latitude of new location

        :param latitude: The latitude of this EditMessageLiveLocationPostRequest.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this EditMessageLiveLocationPostRequest.

        Longitude of new location

        :return: The longitude of this EditMessageLiveLocationPostRequest.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this EditMessageLiveLocationPostRequest.

        Longitude of new location

        :param longitude: The longitude of this EditMessageLiveLocationPostRequest.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def message_id(self):
        """Gets the message_id of this EditMessageLiveLocationPostRequest.

        Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit

        :return: The message_id of this EditMessageLiveLocationPostRequest.
        :rtype: int
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this EditMessageLiveLocationPostRequest.

        Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit

        :param message_id: The message_id of this EditMessageLiveLocationPostRequest.
        :type message_id: int
        """

        self._message_id = message_id

    @property
    def proximity_alert_radius(self):
        """Gets the proximity_alert_radius of this EditMessageLiveLocationPostRequest.

        Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :return: The proximity_alert_radius of this EditMessageLiveLocationPostRequest.
        :rtype: int
        """
        return self._proximity_alert_radius

    @proximity_alert_radius.setter
    def proximity_alert_radius(self, proximity_alert_radius):
        """Sets the proximity_alert_radius of this EditMessageLiveLocationPostRequest.

        Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.

        :param proximity_alert_radius: The proximity_alert_radius of this EditMessageLiveLocationPostRequest.
        :type proximity_alert_radius: int
        """

        self._proximity_alert_radius = proximity_alert_radius

    @property
    def reply_markup(self):
        """Gets the reply_markup of this EditMessageLiveLocationPostRequest.


        :return: The reply_markup of this EditMessageLiveLocationPostRequest.
        :rtype: InlineKeyboardMarkup
        """
        return self._reply_markup

    @reply_markup.setter
    def reply_markup(self, reply_markup):
        """Sets the reply_markup of this EditMessageLiveLocationPostRequest.


        :param reply_markup: The reply_markup of this EditMessageLiveLocationPostRequest.
        :type reply_markup: InlineKeyboardMarkup
        """

        self._reply_markup = reply_markup
