# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.passport_element_error_data_field import PassportElementErrorDataField
from openapi_server.models.passport_element_error_file import PassportElementErrorFile
from openapi_server.models.passport_element_error_files import PassportElementErrorFiles
from openapi_server.models.passport_element_error_front_side import PassportElementErrorFrontSide
from openapi_server.models.passport_element_error_reverse_side import PassportElementErrorReverseSide
from openapi_server.models.passport_element_error_selfie import PassportElementErrorSelfie
from openapi_server.models.passport_element_error_translation_file import PassportElementErrorTranslationFile
from openapi_server.models.passport_element_error_translation_files import PassportElementErrorTranslationFiles
from openapi_server.models.passport_element_error_unspecified import PassportElementErrorUnspecified
from openapi_server import util


class PassportElementError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_hash: str=None, field_name: str=None, message: str=None, source: str=None, type: str=None, file_hash: str=None, file_hashes: List[str]=None, element_hash: str=None):
        """PassportElementError - a model defined in OpenAPI

        :param data_hash: The data_hash of this PassportElementError.
        :param field_name: The field_name of this PassportElementError.
        :param message: The message of this PassportElementError.
        :param source: The source of this PassportElementError.
        :param type: The type of this PassportElementError.
        :param file_hash: The file_hash of this PassportElementError.
        :param file_hashes: The file_hashes of this PassportElementError.
        :param element_hash: The element_hash of this PassportElementError.
        """
        self.openapi_types = {
            'data_hash': str,
            'field_name': str,
            'message': str,
            'source': str,
            'type': str,
            'file_hash': str,
            'file_hashes': List[str],
            'element_hash': str
        }

        self.attribute_map = {
            'data_hash': 'data_hash',
            'field_name': 'field_name',
            'message': 'message',
            'source': 'source',
            'type': 'type',
            'file_hash': 'file_hash',
            'file_hashes': 'file_hashes',
            'element_hash': 'element_hash'
        }

        self._data_hash = data_hash
        self._field_name = field_name
        self._message = message
        self._source = source
        self._type = type
        self._file_hash = file_hash
        self._file_hashes = file_hashes
        self._element_hash = element_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PassportElementError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PassportElementError of this PassportElementError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_hash(self):
        """Gets the data_hash of this PassportElementError.

        Base64-encoded data hash

        :return: The data_hash of this PassportElementError.
        :rtype: str
        """
        return self._data_hash

    @data_hash.setter
    def data_hash(self, data_hash):
        """Sets the data_hash of this PassportElementError.

        Base64-encoded data hash

        :param data_hash: The data_hash of this PassportElementError.
        :type data_hash: str
        """
        if data_hash is None:
            raise ValueError("Invalid value for `data_hash`, must not be `None`")

        self._data_hash = data_hash

    @property
    def field_name(self):
        """Gets the field_name of this PassportElementError.

        Name of the data field which has the error

        :return: The field_name of this PassportElementError.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this PassportElementError.

        Name of the data field which has the error

        :param field_name: The field_name of this PassportElementError.
        :type field_name: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")

        self._field_name = field_name

    @property
    def message(self):
        """Gets the message of this PassportElementError.

        Error message

        :return: The message of this PassportElementError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PassportElementError.

        Error message

        :param message: The message of this PassportElementError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def source(self):
        """Gets the source of this PassportElementError.

        Error source, must be *unspecified*

        :return: The source of this PassportElementError.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PassportElementError.

        Error source, must be *unspecified*

        :param source: The source of this PassportElementError.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def type(self):
        """Gets the type of this PassportElementError.

        Type of element of the user's Telegram Passport which has the issue

        :return: The type of this PassportElementError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PassportElementError.

        Type of element of the user's Telegram Passport which has the issue

        :param type: The type of this PassportElementError.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def file_hash(self):
        """Gets the file_hash of this PassportElementError.

        Base64-encoded file hash

        :return: The file_hash of this PassportElementError.
        :rtype: str
        """
        return self._file_hash

    @file_hash.setter
    def file_hash(self, file_hash):
        """Sets the file_hash of this PassportElementError.

        Base64-encoded file hash

        :param file_hash: The file_hash of this PassportElementError.
        :type file_hash: str
        """
        if file_hash is None:
            raise ValueError("Invalid value for `file_hash`, must not be `None`")

        self._file_hash = file_hash

    @property
    def file_hashes(self):
        """Gets the file_hashes of this PassportElementError.

        List of base64-encoded file hashes

        :return: The file_hashes of this PassportElementError.
        :rtype: List[str]
        """
        return self._file_hashes

    @file_hashes.setter
    def file_hashes(self, file_hashes):
        """Sets the file_hashes of this PassportElementError.

        List of base64-encoded file hashes

        :param file_hashes: The file_hashes of this PassportElementError.
        :type file_hashes: List[str]
        """
        if file_hashes is None:
            raise ValueError("Invalid value for `file_hashes`, must not be `None`")

        self._file_hashes = file_hashes

    @property
    def element_hash(self):
        """Gets the element_hash of this PassportElementError.

        Base64-encoded element hash

        :return: The element_hash of this PassportElementError.
        :rtype: str
        """
        return self._element_hash

    @element_hash.setter
    def element_hash(self, element_hash):
        """Sets the element_hash of this PassportElementError.

        Base64-encoded element hash

        :param element_hash: The element_hash of this PassportElementError.
        :type element_hash: str
        """
        if element_hash is None:
            raise ValueError("Invalid value for `element_hash`, must not be `None`")

        self._element_hash = element_hash
