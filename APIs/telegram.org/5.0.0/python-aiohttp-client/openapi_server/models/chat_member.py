# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class ChatMember(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_add_web_page_previews: bool=None, can_be_edited: bool=None, can_change_info: bool=None, can_delete_messages: bool=None, can_edit_messages: bool=None, can_invite_users: bool=None, can_pin_messages: bool=None, can_post_messages: bool=None, can_promote_members: bool=None, can_restrict_members: bool=None, can_send_media_messages: bool=None, can_send_messages: bool=None, can_send_other_messages: bool=None, can_send_polls: bool=None, custom_title: str=None, is_anonymous: bool=None, is_member: bool=None, status: str=None, until_date: int=None, user: User=None):
        """ChatMember - a model defined in OpenAPI

        :param can_add_web_page_previews: The can_add_web_page_previews of this ChatMember.
        :param can_be_edited: The can_be_edited of this ChatMember.
        :param can_change_info: The can_change_info of this ChatMember.
        :param can_delete_messages: The can_delete_messages of this ChatMember.
        :param can_edit_messages: The can_edit_messages of this ChatMember.
        :param can_invite_users: The can_invite_users of this ChatMember.
        :param can_pin_messages: The can_pin_messages of this ChatMember.
        :param can_post_messages: The can_post_messages of this ChatMember.
        :param can_promote_members: The can_promote_members of this ChatMember.
        :param can_restrict_members: The can_restrict_members of this ChatMember.
        :param can_send_media_messages: The can_send_media_messages of this ChatMember.
        :param can_send_messages: The can_send_messages of this ChatMember.
        :param can_send_other_messages: The can_send_other_messages of this ChatMember.
        :param can_send_polls: The can_send_polls of this ChatMember.
        :param custom_title: The custom_title of this ChatMember.
        :param is_anonymous: The is_anonymous of this ChatMember.
        :param is_member: The is_member of this ChatMember.
        :param status: The status of this ChatMember.
        :param until_date: The until_date of this ChatMember.
        :param user: The user of this ChatMember.
        """
        self.openapi_types = {
            'can_add_web_page_previews': bool,
            'can_be_edited': bool,
            'can_change_info': bool,
            'can_delete_messages': bool,
            'can_edit_messages': bool,
            'can_invite_users': bool,
            'can_pin_messages': bool,
            'can_post_messages': bool,
            'can_promote_members': bool,
            'can_restrict_members': bool,
            'can_send_media_messages': bool,
            'can_send_messages': bool,
            'can_send_other_messages': bool,
            'can_send_polls': bool,
            'custom_title': str,
            'is_anonymous': bool,
            'is_member': bool,
            'status': str,
            'until_date': int,
            'user': User
        }

        self.attribute_map = {
            'can_add_web_page_previews': 'can_add_web_page_previews',
            'can_be_edited': 'can_be_edited',
            'can_change_info': 'can_change_info',
            'can_delete_messages': 'can_delete_messages',
            'can_edit_messages': 'can_edit_messages',
            'can_invite_users': 'can_invite_users',
            'can_pin_messages': 'can_pin_messages',
            'can_post_messages': 'can_post_messages',
            'can_promote_members': 'can_promote_members',
            'can_restrict_members': 'can_restrict_members',
            'can_send_media_messages': 'can_send_media_messages',
            'can_send_messages': 'can_send_messages',
            'can_send_other_messages': 'can_send_other_messages',
            'can_send_polls': 'can_send_polls',
            'custom_title': 'custom_title',
            'is_anonymous': 'is_anonymous',
            'is_member': 'is_member',
            'status': 'status',
            'until_date': 'until_date',
            'user': 'user'
        }

        self._can_add_web_page_previews = can_add_web_page_previews
        self._can_be_edited = can_be_edited
        self._can_change_info = can_change_info
        self._can_delete_messages = can_delete_messages
        self._can_edit_messages = can_edit_messages
        self._can_invite_users = can_invite_users
        self._can_pin_messages = can_pin_messages
        self._can_post_messages = can_post_messages
        self._can_promote_members = can_promote_members
        self._can_restrict_members = can_restrict_members
        self._can_send_media_messages = can_send_media_messages
        self._can_send_messages = can_send_messages
        self._can_send_other_messages = can_send_other_messages
        self._can_send_polls = can_send_polls
        self._custom_title = custom_title
        self._is_anonymous = is_anonymous
        self._is_member = is_member
        self._status = status
        self._until_date = until_date
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChatMember of this ChatMember.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_add_web_page_previews(self):
        """Gets the can_add_web_page_previews of this ChatMember.

        *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages

        :return: The can_add_web_page_previews of this ChatMember.
        :rtype: bool
        """
        return self._can_add_web_page_previews

    @can_add_web_page_previews.setter
    def can_add_web_page_previews(self, can_add_web_page_previews):
        """Sets the can_add_web_page_previews of this ChatMember.

        *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages

        :param can_add_web_page_previews: The can_add_web_page_previews of this ChatMember.
        :type can_add_web_page_previews: bool
        """

        self._can_add_web_page_previews = can_add_web_page_previews

    @property
    def can_be_edited(self):
        """Gets the can_be_edited of this ChatMember.

        *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user

        :return: The can_be_edited of this ChatMember.
        :rtype: bool
        """
        return self._can_be_edited

    @can_be_edited.setter
    def can_be_edited(self, can_be_edited):
        """Sets the can_be_edited of this ChatMember.

        *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user

        :param can_be_edited: The can_be_edited of this ChatMember.
        :type can_be_edited: bool
        """

        self._can_be_edited = can_be_edited

    @property
    def can_change_info(self):
        """Gets the can_change_info of this ChatMember.

        *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings

        :return: The can_change_info of this ChatMember.
        :rtype: bool
        """
        return self._can_change_info

    @can_change_info.setter
    def can_change_info(self, can_change_info):
        """Sets the can_change_info of this ChatMember.

        *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings

        :param can_change_info: The can_change_info of this ChatMember.
        :type can_change_info: bool
        """

        self._can_change_info = can_change_info

    @property
    def can_delete_messages(self):
        """Gets the can_delete_messages of this ChatMember.

        *Optional*. Administrators only. True, if the administrator can delete messages of other users

        :return: The can_delete_messages of this ChatMember.
        :rtype: bool
        """
        return self._can_delete_messages

    @can_delete_messages.setter
    def can_delete_messages(self, can_delete_messages):
        """Sets the can_delete_messages of this ChatMember.

        *Optional*. Administrators only. True, if the administrator can delete messages of other users

        :param can_delete_messages: The can_delete_messages of this ChatMember.
        :type can_delete_messages: bool
        """

        self._can_delete_messages = can_delete_messages

    @property
    def can_edit_messages(self):
        """Gets the can_edit_messages of this ChatMember.

        *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only

        :return: The can_edit_messages of this ChatMember.
        :rtype: bool
        """
        return self._can_edit_messages

    @can_edit_messages.setter
    def can_edit_messages(self, can_edit_messages):
        """Sets the can_edit_messages of this ChatMember.

        *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only

        :param can_edit_messages: The can_edit_messages of this ChatMember.
        :type can_edit_messages: bool
        """

        self._can_edit_messages = can_edit_messages

    @property
    def can_invite_users(self):
        """Gets the can_invite_users of this ChatMember.

        *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat

        :return: The can_invite_users of this ChatMember.
        :rtype: bool
        """
        return self._can_invite_users

    @can_invite_users.setter
    def can_invite_users(self, can_invite_users):
        """Sets the can_invite_users of this ChatMember.

        *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat

        :param can_invite_users: The can_invite_users of this ChatMember.
        :type can_invite_users: bool
        """

        self._can_invite_users = can_invite_users

    @property
    def can_pin_messages(self):
        """Gets the can_pin_messages of this ChatMember.

        *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only

        :return: The can_pin_messages of this ChatMember.
        :rtype: bool
        """
        return self._can_pin_messages

    @can_pin_messages.setter
    def can_pin_messages(self, can_pin_messages):
        """Sets the can_pin_messages of this ChatMember.

        *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only

        :param can_pin_messages: The can_pin_messages of this ChatMember.
        :type can_pin_messages: bool
        """

        self._can_pin_messages = can_pin_messages

    @property
    def can_post_messages(self):
        """Gets the can_post_messages of this ChatMember.

        *Optional*. Administrators only. True, if the administrator can post in the channel; channels only

        :return: The can_post_messages of this ChatMember.
        :rtype: bool
        """
        return self._can_post_messages

    @can_post_messages.setter
    def can_post_messages(self, can_post_messages):
        """Sets the can_post_messages of this ChatMember.

        *Optional*. Administrators only. True, if the administrator can post in the channel; channels only

        :param can_post_messages: The can_post_messages of this ChatMember.
        :type can_post_messages: bool
        """

        self._can_post_messages = can_post_messages

    @property
    def can_promote_members(self):
        """Gets the can_promote_members of this ChatMember.

        *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)

        :return: The can_promote_members of this ChatMember.
        :rtype: bool
        """
        return self._can_promote_members

    @can_promote_members.setter
    def can_promote_members(self, can_promote_members):
        """Sets the can_promote_members of this ChatMember.

        *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)

        :param can_promote_members: The can_promote_members of this ChatMember.
        :type can_promote_members: bool
        """

        self._can_promote_members = can_promote_members

    @property
    def can_restrict_members(self):
        """Gets the can_restrict_members of this ChatMember.

        *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members

        :return: The can_restrict_members of this ChatMember.
        :rtype: bool
        """
        return self._can_restrict_members

    @can_restrict_members.setter
    def can_restrict_members(self, can_restrict_members):
        """Sets the can_restrict_members of this ChatMember.

        *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members

        :param can_restrict_members: The can_restrict_members of this ChatMember.
        :type can_restrict_members: bool
        """

        self._can_restrict_members = can_restrict_members

    @property
    def can_send_media_messages(self):
        """Gets the can_send_media_messages of this ChatMember.

        *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes

        :return: The can_send_media_messages of this ChatMember.
        :rtype: bool
        """
        return self._can_send_media_messages

    @can_send_media_messages.setter
    def can_send_media_messages(self, can_send_media_messages):
        """Sets the can_send_media_messages of this ChatMember.

        *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes

        :param can_send_media_messages: The can_send_media_messages of this ChatMember.
        :type can_send_media_messages: bool
        """

        self._can_send_media_messages = can_send_media_messages

    @property
    def can_send_messages(self):
        """Gets the can_send_messages of this ChatMember.

        *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues

        :return: The can_send_messages of this ChatMember.
        :rtype: bool
        """
        return self._can_send_messages

    @can_send_messages.setter
    def can_send_messages(self, can_send_messages):
        """Sets the can_send_messages of this ChatMember.

        *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues

        :param can_send_messages: The can_send_messages of this ChatMember.
        :type can_send_messages: bool
        """

        self._can_send_messages = can_send_messages

    @property
    def can_send_other_messages(self):
        """Gets the can_send_other_messages of this ChatMember.

        *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots

        :return: The can_send_other_messages of this ChatMember.
        :rtype: bool
        """
        return self._can_send_other_messages

    @can_send_other_messages.setter
    def can_send_other_messages(self, can_send_other_messages):
        """Sets the can_send_other_messages of this ChatMember.

        *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots

        :param can_send_other_messages: The can_send_other_messages of this ChatMember.
        :type can_send_other_messages: bool
        """

        self._can_send_other_messages = can_send_other_messages

    @property
    def can_send_polls(self):
        """Gets the can_send_polls of this ChatMember.

        *Optional*. Restricted only. True, if the user is allowed to send polls

        :return: The can_send_polls of this ChatMember.
        :rtype: bool
        """
        return self._can_send_polls

    @can_send_polls.setter
    def can_send_polls(self, can_send_polls):
        """Sets the can_send_polls of this ChatMember.

        *Optional*. Restricted only. True, if the user is allowed to send polls

        :param can_send_polls: The can_send_polls of this ChatMember.
        :type can_send_polls: bool
        """

        self._can_send_polls = can_send_polls

    @property
    def custom_title(self):
        """Gets the custom_title of this ChatMember.

        *Optional*. Owner and administrators only. Custom title for this user

        :return: The custom_title of this ChatMember.
        :rtype: str
        """
        return self._custom_title

    @custom_title.setter
    def custom_title(self, custom_title):
        """Sets the custom_title of this ChatMember.

        *Optional*. Owner and administrators only. Custom title for this user

        :param custom_title: The custom_title of this ChatMember.
        :type custom_title: str
        """

        self._custom_title = custom_title

    @property
    def is_anonymous(self):
        """Gets the is_anonymous of this ChatMember.

        *Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden

        :return: The is_anonymous of this ChatMember.
        :rtype: bool
        """
        return self._is_anonymous

    @is_anonymous.setter
    def is_anonymous(self, is_anonymous):
        """Sets the is_anonymous of this ChatMember.

        *Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden

        :param is_anonymous: The is_anonymous of this ChatMember.
        :type is_anonymous: bool
        """

        self._is_anonymous = is_anonymous

    @property
    def is_member(self):
        """Gets the is_member of this ChatMember.

        *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request

        :return: The is_member of this ChatMember.
        :rtype: bool
        """
        return self._is_member

    @is_member.setter
    def is_member(self, is_member):
        """Sets the is_member of this ChatMember.

        *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request

        :param is_member: The is_member of this ChatMember.
        :type is_member: bool
        """

        self._is_member = is_member

    @property
    def status(self):
        """Gets the status of this ChatMember.

        The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”

        :return: The status of this ChatMember.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChatMember.

        The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”

        :param status: The status of this ChatMember.
        :type status: str
        """
        allowed_values = ["creator", "administrator", "member", "restricted", "left", "kicked"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def until_date(self):
        """Gets the until_date of this ChatMember.

        *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time

        :return: The until_date of this ChatMember.
        :rtype: int
        """
        return self._until_date

    @until_date.setter
    def until_date(self, until_date):
        """Sets the until_date of this ChatMember.

        *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time

        :param until_date: The until_date of this ChatMember.
        :type until_date: int
        """

        self._until_date = until_date

    @property
    def user(self):
        """Gets the user of this ChatMember.


        :return: The user of this ChatMember.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ChatMember.


        :param user: The user of this ChatMember.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
