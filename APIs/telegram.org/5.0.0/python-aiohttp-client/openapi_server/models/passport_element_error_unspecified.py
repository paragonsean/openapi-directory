# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PassportElementErrorUnspecified(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, element_hash: str=None, message: str=None, source: str=None, type: str=None):
        """PassportElementErrorUnspecified - a model defined in OpenAPI

        :param element_hash: The element_hash of this PassportElementErrorUnspecified.
        :param message: The message of this PassportElementErrorUnspecified.
        :param source: The source of this PassportElementErrorUnspecified.
        :param type: The type of this PassportElementErrorUnspecified.
        """
        self.openapi_types = {
            'element_hash': str,
            'message': str,
            'source': str,
            'type': str
        }

        self.attribute_map = {
            'element_hash': 'element_hash',
            'message': 'message',
            'source': 'source',
            'type': 'type'
        }

        self._element_hash = element_hash
        self._message = message
        self._source = source
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PassportElementErrorUnspecified':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PassportElementErrorUnspecified of this PassportElementErrorUnspecified.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def element_hash(self):
        """Gets the element_hash of this PassportElementErrorUnspecified.

        Base64-encoded element hash

        :return: The element_hash of this PassportElementErrorUnspecified.
        :rtype: str
        """
        return self._element_hash

    @element_hash.setter
    def element_hash(self, element_hash):
        """Sets the element_hash of this PassportElementErrorUnspecified.

        Base64-encoded element hash

        :param element_hash: The element_hash of this PassportElementErrorUnspecified.
        :type element_hash: str
        """
        if element_hash is None:
            raise ValueError("Invalid value for `element_hash`, must not be `None`")

        self._element_hash = element_hash

    @property
    def message(self):
        """Gets the message of this PassportElementErrorUnspecified.

        Error message

        :return: The message of this PassportElementErrorUnspecified.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PassportElementErrorUnspecified.

        Error message

        :param message: The message of this PassportElementErrorUnspecified.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def source(self):
        """Gets the source of this PassportElementErrorUnspecified.

        Error source, must be *unspecified*

        :return: The source of this PassportElementErrorUnspecified.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PassportElementErrorUnspecified.

        Error source, must be *unspecified*

        :param source: The source of this PassportElementErrorUnspecified.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def type(self):
        """Gets the type of this PassportElementErrorUnspecified.

        Type of element of the user's Telegram Passport which has the issue

        :return: The type of this PassportElementErrorUnspecified.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PassportElementErrorUnspecified.

        Type of element of the user's Telegram Passport which has the issue

        :param type: The type of this PassportElementErrorUnspecified.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
