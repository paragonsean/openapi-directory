/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddStickerToSetPost200Response from '../model/AddStickerToSetPost200Response';
import AnswerCallbackQueryPostRequest from '../model/AnswerCallbackQueryPostRequest';
import AnswerInlineQueryPostRequest from '../model/AnswerInlineQueryPostRequest';
import AnswerPreCheckoutQueryPostRequest from '../model/AnswerPreCheckoutQueryPostRequest';
import AnswerShippingQueryPostRequest from '../model/AnswerShippingQueryPostRequest';
import CopyMessagePost200Response from '../model/CopyMessagePost200Response';
import CopyMessagePostRequest from '../model/CopyMessagePostRequest';
import CopyMessagePostRequestChatId from '../model/CopyMessagePostRequestChatId';
import CopyMessagePostRequestReplyMarkup from '../model/CopyMessagePostRequestReplyMarkup';
import DeleteChatPhotoPostRequest from '../model/DeleteChatPhotoPostRequest';
import DeleteChatStickerSetPostRequest from '../model/DeleteChatStickerSetPostRequest';
import DeleteMessagePostRequest from '../model/DeleteMessagePostRequest';
import DeleteStickerFromSetPostRequest from '../model/DeleteStickerFromSetPostRequest';
import DeleteWebhookPostRequest from '../model/DeleteWebhookPostRequest';
import EditMessageCaptionPost200Response from '../model/EditMessageCaptionPost200Response';
import EditMessageCaptionPostRequest from '../model/EditMessageCaptionPostRequest';
import EditMessageCaptionPostRequestChatId from '../model/EditMessageCaptionPostRequestChatId';
import EditMessageLiveLocationPostRequest from '../model/EditMessageLiveLocationPostRequest';
import EditMessageReplyMarkupPostRequest from '../model/EditMessageReplyMarkupPostRequest';
import EditMessageTextPostRequest from '../model/EditMessageTextPostRequest';
import Error from '../model/Error';
import ExportChatInviteLinkPost200Response from '../model/ExportChatInviteLinkPost200Response';
import ForwardMessagePost200Response from '../model/ForwardMessagePost200Response';
import ForwardMessagePostRequest from '../model/ForwardMessagePostRequest';
import GetChatAdministratorsPost200Response from '../model/GetChatAdministratorsPost200Response';
import GetChatMemberPost200Response from '../model/GetChatMemberPost200Response';
import GetChatMemberPostRequest from '../model/GetChatMemberPostRequest';
import GetChatMembersCountPost200Response from '../model/GetChatMembersCountPost200Response';
import GetChatPost200Response from '../model/GetChatPost200Response';
import GetChatPostRequest from '../model/GetChatPostRequest';
import GetFilePost200Response from '../model/GetFilePost200Response';
import GetFilePostRequest from '../model/GetFilePostRequest';
import GetGameHighScoresPost200Response from '../model/GetGameHighScoresPost200Response';
import GetGameHighScoresPostRequest from '../model/GetGameHighScoresPostRequest';
import GetMePost200Response from '../model/GetMePost200Response';
import GetMyCommandsPost200Response from '../model/GetMyCommandsPost200Response';
import GetStickerSetPost200Response from '../model/GetStickerSetPost200Response';
import GetStickerSetPostRequest from '../model/GetStickerSetPostRequest';
import GetUpdatesPost200Response from '../model/GetUpdatesPost200Response';
import GetUpdatesPostRequest from '../model/GetUpdatesPostRequest';
import GetUserProfilePhotosPost200Response from '../model/GetUserProfilePhotosPost200Response';
import GetUserProfilePhotosPostRequest from '../model/GetUserProfilePhotosPostRequest';
import GetWebhookInfoPost200Response from '../model/GetWebhookInfoPost200Response';
import InlineKeyboardMarkup from '../model/InlineKeyboardMarkup';
import InputMedia from '../model/InputMedia';
import KickChatMemberPostRequest from '../model/KickChatMemberPostRequest';
import MaskPosition from '../model/MaskPosition';
import MessageEntity from '../model/MessageEntity';
import PinChatMessagePostRequest from '../model/PinChatMessagePostRequest';
import PromoteChatMemberPostRequest from '../model/PromoteChatMemberPostRequest';
import RestrictChatMemberPostRequest from '../model/RestrictChatMemberPostRequest';
import SendChatActionPostRequest from '../model/SendChatActionPostRequest';
import SendContactPostRequest from '../model/SendContactPostRequest';
import SendDicePostRequest from '../model/SendDicePostRequest';
import SendGamePostRequest from '../model/SendGamePostRequest';
import SendInvoicePostRequest from '../model/SendInvoicePostRequest';
import SendLocationPostRequest from '../model/SendLocationPostRequest';
import SendMediaGroupPost200Response from '../model/SendMediaGroupPost200Response';
import SendMediaGroupPostRequestMediaInner from '../model/SendMediaGroupPostRequestMediaInner';
import SendMessagePostRequest from '../model/SendMessagePostRequest';
import SendPollPostRequest from '../model/SendPollPostRequest';
import SendVenuePostRequest from '../model/SendVenuePostRequest';
import SetChatAdministratorCustomTitlePostRequest from '../model/SetChatAdministratorCustomTitlePostRequest';
import SetChatDescriptionPostRequest from '../model/SetChatDescriptionPostRequest';
import SetChatPermissionsPostRequest from '../model/SetChatPermissionsPostRequest';
import SetChatStickerSetPostRequest from '../model/SetChatStickerSetPostRequest';
import SetChatTitlePostRequest from '../model/SetChatTitlePostRequest';
import SetGameScorePostRequest from '../model/SetGameScorePostRequest';
import SetMyCommandsPostRequest from '../model/SetMyCommandsPostRequest';
import SetPassportDataErrorsPostRequest from '../model/SetPassportDataErrorsPostRequest';
import SetStickerPositionInSetPostRequest from '../model/SetStickerPositionInSetPostRequest';
import StopMessageLiveLocationPostRequest from '../model/StopMessageLiveLocationPostRequest';
import StopPollPost200Response from '../model/StopPollPost200Response';
import StopPollPostRequest from '../model/StopPollPostRequest';
import UnbanChatMemberPostRequest from '../model/UnbanChatMemberPostRequest';
import UnpinChatMessagePostRequest from '../model/UnpinChatMessagePostRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 5.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addStickerToSetPost operation.
     * @callback module:api/DefaultApi~addStickerToSetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
     * @param {String} emojis One or more emoji corresponding to the sticker
     * @param {String} name Sticker set name
     * @param {Number} userId User identifier of sticker set owner
     * @param {Object} opts Optional parameters
     * @param {module:model/MaskPosition} [maskPosition] 
     * @param {String} [pngSticker] 
     * @param {Object} [tgsSticker] This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
     * @param {module:api/DefaultApi~addStickerToSetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    addStickerToSetPost(emojis, name, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emojis' is set
      if (emojis === undefined || emojis === null) {
        throw new Error("Missing the required parameter 'emojis' when calling addStickerToSetPost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addStickerToSetPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addStickerToSetPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'emojis': emojis,
        'mask_position': opts['maskPosition'],
        'name': name,
        'png_sticker': opts['pngSticker'],
        'tgs_sticker': opts['tgsSticker'],
        'user_id': userId
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/addStickerToSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the answerCallbackQueryPost operation.
     * @callback module:api/DefaultApi~answerCallbackQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.  Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
     * @param {module:model/AnswerCallbackQueryPostRequest} answerCallbackQueryPostRequest 
     * @param {module:api/DefaultApi~answerCallbackQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    answerCallbackQueryPost(answerCallbackQueryPostRequest, callback) {
      let postBody = answerCallbackQueryPostRequest;
      // verify the required parameter 'answerCallbackQueryPostRequest' is set
      if (answerCallbackQueryPostRequest === undefined || answerCallbackQueryPostRequest === null) {
        throw new Error("Missing the required parameter 'answerCallbackQueryPostRequest' when calling answerCallbackQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/answerCallbackQuery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the answerInlineQueryPost operation.
     * @callback module:api/DefaultApi~answerInlineQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send answers to an inline query. On success, *True* is returned.   No more than **50** results per query are allowed.
     * @param {module:model/AnswerInlineQueryPostRequest} answerInlineQueryPostRequest 
     * @param {module:api/DefaultApi~answerInlineQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    answerInlineQueryPost(answerInlineQueryPostRequest, callback) {
      let postBody = answerInlineQueryPostRequest;
      // verify the required parameter 'answerInlineQueryPostRequest' is set
      if (answerInlineQueryPostRequest === undefined || answerInlineQueryPostRequest === null) {
        throw new Error("Missing the required parameter 'answerInlineQueryPostRequest' when calling answerInlineQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/answerInlineQuery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the answerPreCheckoutQueryPost operation.
     * @callback module:api/DefaultApi~answerPreCheckoutQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\\_checkout\\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
     * @param {module:model/AnswerPreCheckoutQueryPostRequest} answerPreCheckoutQueryPostRequest 
     * @param {module:api/DefaultApi~answerPreCheckoutQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    answerPreCheckoutQueryPost(answerPreCheckoutQueryPostRequest, callback) {
      let postBody = answerPreCheckoutQueryPostRequest;
      // verify the required parameter 'answerPreCheckoutQueryPostRequest' is set
      if (answerPreCheckoutQueryPostRequest === undefined || answerPreCheckoutQueryPostRequest === null) {
        throw new Error("Missing the required parameter 'answerPreCheckoutQueryPostRequest' when calling answerPreCheckoutQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/answerPreCheckoutQuery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the answerShippingQueryPost operation.
     * @callback module:api/DefaultApi~answerShippingQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * If you sent an invoice requesting a shipping address and the parameter *is\\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
     * @param {module:model/AnswerShippingQueryPostRequest} answerShippingQueryPostRequest 
     * @param {module:api/DefaultApi~answerShippingQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    answerShippingQueryPost(answerShippingQueryPostRequest, callback) {
      let postBody = answerShippingQueryPostRequest;
      // verify the required parameter 'answerShippingQueryPostRequest' is set
      if (answerShippingQueryPostRequest === undefined || answerShippingQueryPostRequest === null) {
        throw new Error("Missing the required parameter 'answerShippingQueryPostRequest' when calling answerShippingQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/answerShippingQuery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the closePost operation.
     * @callback module:api/DefaultApi~closePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
     * @param {module:api/DefaultApi~closePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    closePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyMessagePost operation.
     * @callback module:api/DefaultApi~copyMessagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
     * @param {module:model/CopyMessagePostRequest} copyMessagePostRequest 
     * @param {module:api/DefaultApi~copyMessagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyMessagePost200Response}
     */
    copyMessagePost(copyMessagePostRequest, callback) {
      let postBody = copyMessagePostRequest;
      // verify the required parameter 'copyMessagePostRequest' is set
      if (copyMessagePostRequest === undefined || copyMessagePostRequest === null) {
        throw new Error("Missing the required parameter 'copyMessagePostRequest' when calling copyMessagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CopyMessagePost200Response;
      return this.apiClient.callApi(
        '/copyMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNewStickerSetPost operation.
     * @callback module:api/DefaultApi~createNewStickerSetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Returns *True* on success.
     * @param {String} emojis One or more emoji corresponding to the sticker
     * @param {String} name Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g., *animals*). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in *“\\\\_by\\\\_<bot username>”*. *<bot\\\\_username>* is case insensitive. 1-64 characters.
     * @param {String} title Sticker set title, 1-64 characters
     * @param {Number} userId User identifier of created sticker set owner
     * @param {Object} opts Optional parameters
     * @param {Boolean} [containsMasks] Pass *True*, if a set of mask stickers should be created
     * @param {module:model/MaskPosition} [maskPosition] 
     * @param {String} [pngSticker] 
     * @param {Object} [tgsSticker] This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
     * @param {module:api/DefaultApi~createNewStickerSetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    createNewStickerSetPost(emojis, name, title, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emojis' is set
      if (emojis === undefined || emojis === null) {
        throw new Error("Missing the required parameter 'emojis' when calling createNewStickerSetPost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createNewStickerSetPost");
      }
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling createNewStickerSetPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createNewStickerSetPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'contains_masks': opts['containsMasks'],
        'emojis': emojis,
        'mask_position': opts['maskPosition'],
        'name': name,
        'png_sticker': opts['pngSticker'],
        'tgs_sticker': opts['tgsSticker'],
        'title': title,
        'user_id': userId
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/createNewStickerSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChatPhotoPost operation.
     * @callback module:api/DefaultApi~deleteChatPhotoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param {module:model/DeleteChatPhotoPostRequest} deleteChatPhotoPostRequest 
     * @param {module:api/DefaultApi~deleteChatPhotoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    deleteChatPhotoPost(deleteChatPhotoPostRequest, callback) {
      let postBody = deleteChatPhotoPostRequest;
      // verify the required parameter 'deleteChatPhotoPostRequest' is set
      if (deleteChatPhotoPostRequest === undefined || deleteChatPhotoPostRequest === null) {
        throw new Error("Missing the required parameter 'deleteChatPhotoPostRequest' when calling deleteChatPhotoPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/deleteChatPhoto', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChatStickerSetPost operation.
     * @callback module:api/DefaultApi~deleteChatStickerSetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
     * @param {module:model/DeleteChatStickerSetPostRequest} deleteChatStickerSetPostRequest 
     * @param {module:api/DefaultApi~deleteChatStickerSetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    deleteChatStickerSetPost(deleteChatStickerSetPostRequest, callback) {
      let postBody = deleteChatStickerSetPostRequest;
      // verify the required parameter 'deleteChatStickerSetPostRequest' is set
      if (deleteChatStickerSetPostRequest === undefined || deleteChatStickerSetPostRequest === null) {
        throw new Error("Missing the required parameter 'deleteChatStickerSetPostRequest' when calling deleteChatStickerSetPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/deleteChatStickerSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMessagePost operation.
     * @callback module:api/DefaultApi~deleteMessagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to delete a message, including service messages, with the following limitations:   \\- A message can only be deleted if it was sent less than 48 hours ago.   \\- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.   \\- Bots can delete outgoing messages in private chats, groups, and supergroups.   \\- Bots can delete incoming messages in private chats.   \\- Bots granted *can\\_post\\_messages* permissions can delete outgoing messages in channels.   \\- If the bot is an administrator of a group, it can delete any message there.   \\- If the bot has *can\\_delete\\_messages* permission in a supergroup or a channel, it can delete any message there.   Returns *True* on success.
     * @param {module:model/DeleteMessagePostRequest} deleteMessagePostRequest 
     * @param {module:api/DefaultApi~deleteMessagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    deleteMessagePost(deleteMessagePostRequest, callback) {
      let postBody = deleteMessagePostRequest;
      // verify the required parameter 'deleteMessagePostRequest' is set
      if (deleteMessagePostRequest === undefined || deleteMessagePostRequest === null) {
        throw new Error("Missing the required parameter 'deleteMessagePostRequest' when calling deleteMessagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/deleteMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStickerFromSetPost operation.
     * @callback module:api/DefaultApi~deleteStickerFromSetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
     * @param {module:model/DeleteStickerFromSetPostRequest} deleteStickerFromSetPostRequest 
     * @param {module:api/DefaultApi~deleteStickerFromSetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    deleteStickerFromSetPost(deleteStickerFromSetPostRequest, callback) {
      let postBody = deleteStickerFromSetPostRequest;
      // verify the required parameter 'deleteStickerFromSetPostRequest' is set
      if (deleteStickerFromSetPostRequest === undefined || deleteStickerFromSetPostRequest === null) {
        throw new Error("Missing the required parameter 'deleteStickerFromSetPostRequest' when calling deleteStickerFromSetPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/deleteStickerFromSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebhookPost operation.
     * @callback module:api/DefaultApi~deleteWebhookPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
     * @param {module:model/DeleteWebhookPostRequest} deleteWebhookPostRequest 
     * @param {module:api/DefaultApi~deleteWebhookPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    deleteWebhookPost(deleteWebhookPostRequest, callback) {
      let postBody = deleteWebhookPostRequest;
      // verify the required parameter 'deleteWebhookPostRequest' is set
      if (deleteWebhookPostRequest === undefined || deleteWebhookPostRequest === null) {
        throw new Error("Missing the required parameter 'deleteWebhookPostRequest' when calling deleteWebhookPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/deleteWebhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editMessageCaptionPost operation.
     * @callback module:api/DefaultApi~editMessageCaptionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditMessageCaptionPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param {module:model/EditMessageCaptionPostRequest} editMessageCaptionPostRequest 
     * @param {module:api/DefaultApi~editMessageCaptionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditMessageCaptionPost200Response}
     */
    editMessageCaptionPost(editMessageCaptionPostRequest, callback) {
      let postBody = editMessageCaptionPostRequest;
      // verify the required parameter 'editMessageCaptionPostRequest' is set
      if (editMessageCaptionPostRequest === undefined || editMessageCaptionPostRequest === null) {
        throw new Error("Missing the required parameter 'editMessageCaptionPostRequest' when calling editMessageCaptionPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EditMessageCaptionPost200Response;
      return this.apiClient.callApi(
        '/editMessageCaption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editMessageLiveLocationPost operation.
     * @callback module:api/DefaultApi~editMessageLiveLocationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditMessageCaptionPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to edit live location messages. A location can be edited until its *live\\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param {module:model/EditMessageLiveLocationPostRequest} editMessageLiveLocationPostRequest 
     * @param {module:api/DefaultApi~editMessageLiveLocationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditMessageCaptionPost200Response}
     */
    editMessageLiveLocationPost(editMessageLiveLocationPostRequest, callback) {
      let postBody = editMessageLiveLocationPostRequest;
      // verify the required parameter 'editMessageLiveLocationPostRequest' is set
      if (editMessageLiveLocationPostRequest === undefined || editMessageLiveLocationPostRequest === null) {
        throw new Error("Missing the required parameter 'editMessageLiveLocationPostRequest' when calling editMessageLiveLocationPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EditMessageCaptionPost200Response;
      return this.apiClient.callApi(
        '/editMessageLiveLocation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editMessageMediaPost operation.
     * @callback module:api/DefaultApi~editMessageMediaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditMessageCaptionPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param {module:model/InputMedia} media 
     * @param {Object} opts Optional parameters
     * @param {module:model/EditMessageCaptionPostRequestChatId} [chatId] 
     * @param {String} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
     * @param {Number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
     * @param {module:model/InlineKeyboardMarkup} [replyMarkup] 
     * @param {module:api/DefaultApi~editMessageMediaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditMessageCaptionPost200Response}
     */
    editMessageMediaPost(media, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'media' is set
      if (media === undefined || media === null) {
        throw new Error("Missing the required parameter 'media' when calling editMessageMediaPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'chat_id': opts['chatId'],
        'inline_message_id': opts['inlineMessageId'],
        'media': media,
        'message_id': opts['messageId'],
        'reply_markup': opts['replyMarkup']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EditMessageCaptionPost200Response;
      return this.apiClient.callApi(
        '/editMessageMedia', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editMessageReplyMarkupPost operation.
     * @callback module:api/DefaultApi~editMessageReplyMarkupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditMessageCaptionPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param {module:model/EditMessageReplyMarkupPostRequest} editMessageReplyMarkupPostRequest 
     * @param {module:api/DefaultApi~editMessageReplyMarkupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditMessageCaptionPost200Response}
     */
    editMessageReplyMarkupPost(editMessageReplyMarkupPostRequest, callback) {
      let postBody = editMessageReplyMarkupPostRequest;
      // verify the required parameter 'editMessageReplyMarkupPostRequest' is set
      if (editMessageReplyMarkupPostRequest === undefined || editMessageReplyMarkupPostRequest === null) {
        throw new Error("Missing the required parameter 'editMessageReplyMarkupPostRequest' when calling editMessageReplyMarkupPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EditMessageCaptionPost200Response;
      return this.apiClient.callApi(
        '/editMessageReplyMarkup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editMessageTextPost operation.
     * @callback module:api/DefaultApi~editMessageTextPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditMessageCaptionPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param {module:model/EditMessageTextPostRequest} editMessageTextPostRequest 
     * @param {module:api/DefaultApi~editMessageTextPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditMessageCaptionPost200Response}
     */
    editMessageTextPost(editMessageTextPostRequest, callback) {
      let postBody = editMessageTextPostRequest;
      // verify the required parameter 'editMessageTextPostRequest' is set
      if (editMessageTextPostRequest === undefined || editMessageTextPostRequest === null) {
        throw new Error("Missing the required parameter 'editMessageTextPostRequest' when calling editMessageTextPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EditMessageCaptionPost200Response;
      return this.apiClient.callApi(
        '/editMessageText', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportChatInviteLinkPost operation.
     * @callback module:api/DefaultApi~exportChatInviteLinkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportChatInviteLinkPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
     * @param {module:model/DeleteChatPhotoPostRequest} deleteChatPhotoPostRequest 
     * @param {module:api/DefaultApi~exportChatInviteLinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportChatInviteLinkPost200Response}
     */
    exportChatInviteLinkPost(deleteChatPhotoPostRequest, callback) {
      let postBody = deleteChatPhotoPostRequest;
      // verify the required parameter 'deleteChatPhotoPostRequest' is set
      if (deleteChatPhotoPostRequest === undefined || deleteChatPhotoPostRequest === null) {
        throw new Error("Missing the required parameter 'deleteChatPhotoPostRequest' when calling exportChatInviteLinkPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ExportChatInviteLinkPost200Response;
      return this.apiClient.callApi(
        '/exportChatInviteLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forwardMessagePost operation.
     * @callback module:api/DefaultApi~forwardMessagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/ForwardMessagePostRequest} forwardMessagePostRequest 
     * @param {module:api/DefaultApi~forwardMessagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    forwardMessagePost(forwardMessagePostRequest, callback) {
      let postBody = forwardMessagePostRequest;
      // verify the required parameter 'forwardMessagePostRequest' is set
      if (forwardMessagePostRequest === undefined || forwardMessagePostRequest === null) {
        throw new Error("Missing the required parameter 'forwardMessagePostRequest' when calling forwardMessagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/forwardMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatAdministratorsPost operation.
     * @callback module:api/DefaultApi~getChatAdministratorsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChatAdministratorsPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
     * @param {module:model/GetChatPostRequest} getChatPostRequest 
     * @param {module:api/DefaultApi~getChatAdministratorsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChatAdministratorsPost200Response}
     */
    getChatAdministratorsPost(getChatPostRequest, callback) {
      let postBody = getChatPostRequest;
      // verify the required parameter 'getChatPostRequest' is set
      if (getChatPostRequest === undefined || getChatPostRequest === null) {
        throw new Error("Missing the required parameter 'getChatPostRequest' when calling getChatAdministratorsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetChatAdministratorsPost200Response;
      return this.apiClient.callApi(
        '/getChatAdministrators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatMemberPost operation.
     * @callback module:api/DefaultApi~getChatMemberPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChatMemberPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
     * @param {module:model/GetChatMemberPostRequest} getChatMemberPostRequest 
     * @param {module:api/DefaultApi~getChatMemberPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChatMemberPost200Response}
     */
    getChatMemberPost(getChatMemberPostRequest, callback) {
      let postBody = getChatMemberPostRequest;
      // verify the required parameter 'getChatMemberPostRequest' is set
      if (getChatMemberPostRequest === undefined || getChatMemberPostRequest === null) {
        throw new Error("Missing the required parameter 'getChatMemberPostRequest' when calling getChatMemberPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetChatMemberPost200Response;
      return this.apiClient.callApi(
        '/getChatMember', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatMembersCountPost operation.
     * @callback module:api/DefaultApi~getChatMembersCountPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChatMembersCountPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get the number of members in a chat. Returns *Int* on success.
     * @param {module:model/GetChatPostRequest} getChatPostRequest 
     * @param {module:api/DefaultApi~getChatMembersCountPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChatMembersCountPost200Response}
     */
    getChatMembersCountPost(getChatPostRequest, callback) {
      let postBody = getChatPostRequest;
      // verify the required parameter 'getChatPostRequest' is set
      if (getChatPostRequest === undefined || getChatPostRequest === null) {
        throw new Error("Missing the required parameter 'getChatPostRequest' when calling getChatMembersCountPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetChatMembersCountPost200Response;
      return this.apiClient.callApi(
        '/getChatMembersCount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatPost operation.
     * @callback module:api/DefaultApi~getChatPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChatPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
     * @param {module:model/GetChatPostRequest} getChatPostRequest 
     * @param {module:api/DefaultApi~getChatPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChatPost200Response}
     */
    getChatPost(getChatPostRequest, callback) {
      let postBody = getChatPostRequest;
      // verify the required parameter 'getChatPostRequest' is set
      if (getChatPostRequest === undefined || getChatPostRequest === null) {
        throw new Error("Missing the required parameter 'getChatPostRequest' when calling getChatPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetChatPost200Response;
      return this.apiClient.callApi(
        '/getChat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilePost operation.
     * @callback module:api/DefaultApi~getFilePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFilePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
     * @param {module:model/GetFilePostRequest} getFilePostRequest 
     * @param {module:api/DefaultApi~getFilePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFilePost200Response}
     */
    getFilePost(getFilePostRequest, callback) {
      let postBody = getFilePostRequest;
      // verify the required parameter 'getFilePostRequest' is set
      if (getFilePostRequest === undefined || getFilePostRequest === null) {
        throw new Error("Missing the required parameter 'getFilePostRequest' when calling getFilePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetFilePost200Response;
      return this.apiClient.callApi(
        '/getFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGameHighScoresPost operation.
     * @callback module:api/DefaultApi~getGameHighScoresPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGameHighScoresPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.  This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
     * @param {module:model/GetGameHighScoresPostRequest} getGameHighScoresPostRequest 
     * @param {module:api/DefaultApi~getGameHighScoresPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGameHighScoresPost200Response}
     */
    getGameHighScoresPost(getGameHighScoresPostRequest, callback) {
      let postBody = getGameHighScoresPostRequest;
      // verify the required parameter 'getGameHighScoresPostRequest' is set
      if (getGameHighScoresPostRequest === undefined || getGameHighScoresPostRequest === null) {
        throw new Error("Missing the required parameter 'getGameHighScoresPostRequest' when calling getGameHighScoresPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetGameHighScoresPost200Response;
      return this.apiClient.callApi(
        '/getGameHighScores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMePost operation.
     * @callback module:api/DefaultApi~getMePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
     * @param {module:api/DefaultApi~getMePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMePost200Response}
     */
    getMePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMePost200Response;
      return this.apiClient.callApi(
        '/getMe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyCommandsPost operation.
     * @callback module:api/DefaultApi~getMyCommandsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMyCommandsPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
     * @param {module:api/DefaultApi~getMyCommandsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMyCommandsPost200Response}
     */
    getMyCommandsPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMyCommandsPost200Response;
      return this.apiClient.callApi(
        '/getMyCommands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStickerSetPost operation.
     * @callback module:api/DefaultApi~getStickerSetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStickerSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
     * @param {module:model/GetStickerSetPostRequest} getStickerSetPostRequest 
     * @param {module:api/DefaultApi~getStickerSetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStickerSetPost200Response}
     */
    getStickerSetPost(getStickerSetPostRequest, callback) {
      let postBody = getStickerSetPostRequest;
      // verify the required parameter 'getStickerSetPostRequest' is set
      if (getStickerSetPostRequest === undefined || getStickerSetPostRequest === null) {
        throw new Error("Missing the required parameter 'getStickerSetPostRequest' when calling getStickerSetPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetStickerSetPost200Response;
      return this.apiClient.callApi(
        '/getStickerSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpdatesPost operation.
     * @callback module:api/DefaultApi~getUpdatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUpdatesPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
     * @param {module:model/GetUpdatesPostRequest} getUpdatesPostRequest 
     * @param {module:api/DefaultApi~getUpdatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUpdatesPost200Response}
     */
    getUpdatesPost(getUpdatesPostRequest, callback) {
      let postBody = getUpdatesPostRequest;
      // verify the required parameter 'getUpdatesPostRequest' is set
      if (getUpdatesPostRequest === undefined || getUpdatesPostRequest === null) {
        throw new Error("Missing the required parameter 'getUpdatesPostRequest' when calling getUpdatesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetUpdatesPost200Response;
      return this.apiClient.callApi(
        '/getUpdates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserProfilePhotosPost operation.
     * @callback module:api/DefaultApi~getUserProfilePhotosPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserProfilePhotosPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
     * @param {module:model/GetUserProfilePhotosPostRequest} getUserProfilePhotosPostRequest 
     * @param {module:api/DefaultApi~getUserProfilePhotosPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserProfilePhotosPost200Response}
     */
    getUserProfilePhotosPost(getUserProfilePhotosPostRequest, callback) {
      let postBody = getUserProfilePhotosPostRequest;
      // verify the required parameter 'getUserProfilePhotosPostRequest' is set
      if (getUserProfilePhotosPostRequest === undefined || getUserProfilePhotosPostRequest === null) {
        throw new Error("Missing the required parameter 'getUserProfilePhotosPostRequest' when calling getUserProfilePhotosPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetUserProfilePhotosPost200Response;
      return this.apiClient.callApi(
        '/getUserProfilePhotos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebhookInfoPost operation.
     * @callback module:api/DefaultApi~getWebhookInfoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWebhookInfoPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
     * @param {module:api/DefaultApi~getWebhookInfoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWebhookInfoPost200Response}
     */
    getWebhookInfoPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWebhookInfoPost200Response;
      return this.apiClient.callApi(
        '/getWebhookInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kickChatMemberPost operation.
     * @callback module:api/DefaultApi~kickChatMemberPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param {module:model/KickChatMemberPostRequest} kickChatMemberPostRequest 
     * @param {module:api/DefaultApi~kickChatMemberPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    kickChatMemberPost(kickChatMemberPostRequest, callback) {
      let postBody = kickChatMemberPostRequest;
      // verify the required parameter 'kickChatMemberPostRequest' is set
      if (kickChatMemberPostRequest === undefined || kickChatMemberPostRequest === null) {
        throw new Error("Missing the required parameter 'kickChatMemberPostRequest' when calling kickChatMemberPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/kickChatMember', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaveChatPost operation.
     * @callback module:api/DefaultApi~leaveChatPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
     * @param {module:model/GetChatPostRequest} getChatPostRequest 
     * @param {module:api/DefaultApi~leaveChatPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    leaveChatPost(getChatPostRequest, callback) {
      let postBody = getChatPostRequest;
      // verify the required parameter 'getChatPostRequest' is set
      if (getChatPostRequest === undefined || getChatPostRequest === null) {
        throw new Error("Missing the required parameter 'getChatPostRequest' when calling leaveChatPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/leaveChat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logOutPost operation.
     * @callback module:api/DefaultApi~logOutPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
     * @param {module:api/DefaultApi~logOutPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    logOutPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/logOut', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinChatMessagePost operation.
     * @callback module:api/DefaultApi~pinChatMessagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\\_pin\\_messages' admin right in a supergroup or 'can\\_edit\\_messages' admin right in a channel. Returns *True* on success.
     * @param {module:model/PinChatMessagePostRequest} pinChatMessagePostRequest 
     * @param {module:api/DefaultApi~pinChatMessagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    pinChatMessagePost(pinChatMessagePostRequest, callback) {
      let postBody = pinChatMessagePostRequest;
      // verify the required parameter 'pinChatMessagePostRequest' is set
      if (pinChatMessagePostRequest === undefined || pinChatMessagePostRequest === null) {
        throw new Error("Missing the required parameter 'pinChatMessagePostRequest' when calling pinChatMessagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/pinChatMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promoteChatMemberPost operation.
     * @callback module:api/DefaultApi~promoteChatMemberPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
     * @param {module:model/PromoteChatMemberPostRequest} promoteChatMemberPostRequest 
     * @param {module:api/DefaultApi~promoteChatMemberPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    promoteChatMemberPost(promoteChatMemberPostRequest, callback) {
      let postBody = promoteChatMemberPostRequest;
      // verify the required parameter 'promoteChatMemberPostRequest' is set
      if (promoteChatMemberPostRequest === undefined || promoteChatMemberPostRequest === null) {
        throw new Error("Missing the required parameter 'promoteChatMemberPostRequest' when calling promoteChatMemberPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/promoteChatMember', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restrictChatMemberPost operation.
     * @callback module:api/DefaultApi~restrictChatMemberPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
     * @param {module:model/RestrictChatMemberPostRequest} restrictChatMemberPostRequest 
     * @param {module:api/DefaultApi~restrictChatMemberPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    restrictChatMemberPost(restrictChatMemberPostRequest, callback) {
      let postBody = restrictChatMemberPostRequest;
      // verify the required parameter 'restrictChatMemberPostRequest' is set
      if (restrictChatMemberPostRequest === undefined || restrictChatMemberPostRequest === null) {
        throw new Error("Missing the required parameter 'restrictChatMemberPostRequest' when calling restrictChatMemberPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/restrictChatMember', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendAnimationPost operation.
     * @callback module:api/DefaultApi~sendAnimationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
     * @param {String} animation 
     * @param {module:model/CopyMessagePostRequestChatId} chatId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowSendingWithoutReply] Pass *True*, if the message should be sent even if the specified replied-to message is not found
     * @param {String} [caption] Animation caption (may also be used when resending animation by *file\\\\_id*), 0-1024 characters after entities parsing
     * @param {Array.<module:model/MessageEntity>} [captionEntities] List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {Boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {Number} [duration] Duration of sent animation in seconds
     * @param {Number} [height] Animation height
     * @param {String} [parseMode] Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {module:model/CopyMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {Number} [replyToMessageId] If the message is a reply, ID of the original message
     * @param {String} [thumb] 
     * @param {Number} [width] Animation width
     * @param {module:api/DefaultApi~sendAnimationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendAnimationPost(animation, chatId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'animation' is set
      if (animation === undefined || animation === null) {
        throw new Error("Missing the required parameter 'animation' when calling sendAnimationPost");
      }
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendAnimationPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_sending_without_reply': opts['allowSendingWithoutReply'],
        'animation': animation,
        'caption': opts['caption'],
        'caption_entities': this.apiClient.buildCollectionParam(opts['captionEntities'], 'csv'),
        'chat_id': chatId,
        'disable_notification': opts['disableNotification'],
        'duration': opts['duration'],
        'height': opts['height'],
        'parse_mode': opts['parseMode'],
        'reply_markup': opts['replyMarkup'],
        'reply_to_message_id': opts['replyToMessageId'],
        'thumb': opts['thumb'],
        'width': opts['width']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendAnimation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendAudioPost operation.
     * @callback module:api/DefaultApi~sendAudioPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.  For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
     * @param {String} audio 
     * @param {module:model/CopyMessagePostRequestChatId} chatId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowSendingWithoutReply] Pass *True*, if the message should be sent even if the specified replied-to message is not found
     * @param {String} [caption] Audio caption, 0-1024 characters after entities parsing
     * @param {Array.<module:model/MessageEntity>} [captionEntities] List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {Boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {Number} [duration] Duration of the audio in seconds
     * @param {String} [parseMode] Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {String} [performer] Performer
     * @param {module:model/CopyMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {Number} [replyToMessageId] If the message is a reply, ID of the original message
     * @param {String} [thumb] 
     * @param {String} [title] Track name
     * @param {module:api/DefaultApi~sendAudioPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendAudioPost(audio, chatId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'audio' is set
      if (audio === undefined || audio === null) {
        throw new Error("Missing the required parameter 'audio' when calling sendAudioPost");
      }
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendAudioPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_sending_without_reply': opts['allowSendingWithoutReply'],
        'audio': audio,
        'caption': opts['caption'],
        'caption_entities': this.apiClient.buildCollectionParam(opts['captionEntities'], 'csv'),
        'chat_id': chatId,
        'disable_notification': opts['disableNotification'],
        'duration': opts['duration'],
        'parse_mode': opts['parseMode'],
        'performer': opts['performer'],
        'reply_markup': opts['replyMarkup'],
        'reply_to_message_id': opts['replyToMessageId'],
        'thumb': opts['thumb'],
        'title': opts['title']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendAudio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendChatActionPost operation.
     * @callback module:api/DefaultApi~sendChatActionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.  Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\\_photo*. The user will see a “sending photo” status for the bot.  We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
     * @param {module:model/SendChatActionPostRequest} sendChatActionPostRequest 
     * @param {module:api/DefaultApi~sendChatActionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    sendChatActionPost(sendChatActionPostRequest, callback) {
      let postBody = sendChatActionPostRequest;
      // verify the required parameter 'sendChatActionPostRequest' is set
      if (sendChatActionPostRequest === undefined || sendChatActionPostRequest === null) {
        throw new Error("Missing the required parameter 'sendChatActionPostRequest' when calling sendChatActionPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/sendChatAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendContactPost operation.
     * @callback module:api/DefaultApi~sendContactPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/SendContactPostRequest} sendContactPostRequest 
     * @param {module:api/DefaultApi~sendContactPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendContactPost(sendContactPostRequest, callback) {
      let postBody = sendContactPostRequest;
      // verify the required parameter 'sendContactPostRequest' is set
      if (sendContactPostRequest === undefined || sendContactPostRequest === null) {
        throw new Error("Missing the required parameter 'sendContactPostRequest' when calling sendContactPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendContact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDicePost operation.
     * @callback module:api/DefaultApi~sendDicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/SendDicePostRequest} sendDicePostRequest 
     * @param {module:api/DefaultApi~sendDicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendDicePost(sendDicePostRequest, callback) {
      let postBody = sendDicePostRequest;
      // verify the required parameter 'sendDicePostRequest' is set
      if (sendDicePostRequest === undefined || sendDicePostRequest === null) {
        throw new Error("Missing the required parameter 'sendDicePostRequest' when calling sendDicePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendDice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDocumentPost operation.
     * @callback module:api/DefaultApi~sendDocumentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
     * @param {module:model/CopyMessagePostRequestChatId} chatId 
     * @param {String} document 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowSendingWithoutReply] Pass *True*, if the message should be sent even if the specified replied-to message is not found
     * @param {String} [caption] Document caption (may also be used when resending documents by *file\\\\_id*), 0-1024 characters after entities parsing
     * @param {Array.<module:model/MessageEntity>} [captionEntities] List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {Boolean} [disableContentTypeDetection] Disables automatic server-side content type detection for files uploaded using multipart/form-data
     * @param {Boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {String} [parseMode] Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {module:model/CopyMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {Number} [replyToMessageId] If the message is a reply, ID of the original message
     * @param {String} [thumb] 
     * @param {module:api/DefaultApi~sendDocumentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendDocumentPost(chatId, document, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendDocumentPost");
      }
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling sendDocumentPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_sending_without_reply': opts['allowSendingWithoutReply'],
        'caption': opts['caption'],
        'caption_entities': this.apiClient.buildCollectionParam(opts['captionEntities'], 'csv'),
        'chat_id': chatId,
        'disable_content_type_detection': opts['disableContentTypeDetection'],
        'disable_notification': opts['disableNotification'],
        'document': document,
        'parse_mode': opts['parseMode'],
        'reply_markup': opts['replyMarkup'],
        'reply_to_message_id': opts['replyToMessageId'],
        'thumb': opts['thumb']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendDocument', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendGamePost operation.
     * @callback module:api/DefaultApi~sendGamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/SendGamePostRequest} sendGamePostRequest 
     * @param {module:api/DefaultApi~sendGamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendGamePost(sendGamePostRequest, callback) {
      let postBody = sendGamePostRequest;
      // verify the required parameter 'sendGamePostRequest' is set
      if (sendGamePostRequest === undefined || sendGamePostRequest === null) {
        throw new Error("Missing the required parameter 'sendGamePostRequest' when calling sendGamePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendGame', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendInvoicePost operation.
     * @callback module:api/DefaultApi~sendInvoicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/SendInvoicePostRequest} sendInvoicePostRequest 
     * @param {module:api/DefaultApi~sendInvoicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendInvoicePost(sendInvoicePostRequest, callback) {
      let postBody = sendInvoicePostRequest;
      // verify the required parameter 'sendInvoicePostRequest' is set
      if (sendInvoicePostRequest === undefined || sendInvoicePostRequest === null) {
        throw new Error("Missing the required parameter 'sendInvoicePostRequest' when calling sendInvoicePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendInvoice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendLocationPost operation.
     * @callback module:api/DefaultApi~sendLocationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/SendLocationPostRequest} sendLocationPostRequest 
     * @param {module:api/DefaultApi~sendLocationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendLocationPost(sendLocationPostRequest, callback) {
      let postBody = sendLocationPostRequest;
      // verify the required parameter 'sendLocationPostRequest' is set
      if (sendLocationPostRequest === undefined || sendLocationPostRequest === null) {
        throw new Error("Missing the required parameter 'sendLocationPostRequest' when calling sendLocationPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendLocation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMediaGroupPost operation.
     * @callback module:api/DefaultApi~sendMediaGroupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendMediaGroupPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
     * @param {module:model/CopyMessagePostRequestChatId} chatId 
     * @param {Array.<module:model/SendMediaGroupPostRequestMediaInner>} media A JSON-serialized array describing messages to be sent, must include 2-10 items
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowSendingWithoutReply] Pass *True*, if the message should be sent even if the specified replied-to message is not found
     * @param {Boolean} [disableNotification] Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {Number} [replyToMessageId] If the messages are a reply, ID of the original message
     * @param {module:api/DefaultApi~sendMediaGroupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendMediaGroupPost200Response}
     */
    sendMediaGroupPost(chatId, media, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendMediaGroupPost");
      }
      // verify the required parameter 'media' is set
      if (media === undefined || media === null) {
        throw new Error("Missing the required parameter 'media' when calling sendMediaGroupPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_sending_without_reply': opts['allowSendingWithoutReply'],
        'chat_id': chatId,
        'disable_notification': opts['disableNotification'],
        'media': this.apiClient.buildCollectionParam(media, 'csv'),
        'reply_to_message_id': opts['replyToMessageId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SendMediaGroupPost200Response;
      return this.apiClient.callApi(
        '/sendMediaGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessagePost operation.
     * @callback module:api/DefaultApi~sendMessagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/SendMessagePostRequest} sendMessagePostRequest 
     * @param {module:api/DefaultApi~sendMessagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendMessagePost(sendMessagePostRequest, callback) {
      let postBody = sendMessagePostRequest;
      // verify the required parameter 'sendMessagePostRequest' is set
      if (sendMessagePostRequest === undefined || sendMessagePostRequest === null) {
        throw new Error("Missing the required parameter 'sendMessagePostRequest' when calling sendMessagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPhotoPost operation.
     * @callback module:api/DefaultApi~sendPhotoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/CopyMessagePostRequestChatId} chatId 
     * @param {String} photo 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowSendingWithoutReply] Pass *True*, if the message should be sent even if the specified replied-to message is not found
     * @param {String} [caption] Photo caption (may also be used when resending photos by *file\\\\_id*), 0-1024 characters after entities parsing
     * @param {Array.<module:model/MessageEntity>} [captionEntities] List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {Boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {String} [parseMode] Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {module:model/CopyMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {Number} [replyToMessageId] If the message is a reply, ID of the original message
     * @param {module:api/DefaultApi~sendPhotoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendPhotoPost(chatId, photo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendPhotoPost");
      }
      // verify the required parameter 'photo' is set
      if (photo === undefined || photo === null) {
        throw new Error("Missing the required parameter 'photo' when calling sendPhotoPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_sending_without_reply': opts['allowSendingWithoutReply'],
        'caption': opts['caption'],
        'caption_entities': this.apiClient.buildCollectionParam(opts['captionEntities'], 'csv'),
        'chat_id': chatId,
        'disable_notification': opts['disableNotification'],
        'parse_mode': opts['parseMode'],
        'photo': photo,
        'reply_markup': opts['replyMarkup'],
        'reply_to_message_id': opts['replyToMessageId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendPhoto', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPollPost operation.
     * @callback module:api/DefaultApi~sendPollPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/SendPollPostRequest} sendPollPostRequest 
     * @param {module:api/DefaultApi~sendPollPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendPollPost(sendPollPostRequest, callback) {
      let postBody = sendPollPostRequest;
      // verify the required parameter 'sendPollPostRequest' is set
      if (sendPollPostRequest === undefined || sendPollPostRequest === null) {
        throw new Error("Missing the required parameter 'sendPollPostRequest' when calling sendPollPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendPoll', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendStickerPost operation.
     * @callback module:api/DefaultApi~sendStickerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/CopyMessagePostRequestChatId} chatId 
     * @param {String} sticker 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowSendingWithoutReply] Pass *True*, if the message should be sent even if the specified replied-to message is not found
     * @param {Boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {module:model/CopyMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {Number} [replyToMessageId] If the message is a reply, ID of the original message
     * @param {module:api/DefaultApi~sendStickerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendStickerPost(chatId, sticker, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendStickerPost");
      }
      // verify the required parameter 'sticker' is set
      if (sticker === undefined || sticker === null) {
        throw new Error("Missing the required parameter 'sticker' when calling sendStickerPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_sending_without_reply': opts['allowSendingWithoutReply'],
        'chat_id': chatId,
        'disable_notification': opts['disableNotification'],
        'reply_markup': opts['replyMarkup'],
        'reply_to_message_id': opts['replyToMessageId'],
        'sticker': sticker
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendSticker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendVenuePost operation.
     * @callback module:api/DefaultApi~sendVenuePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/SendVenuePostRequest} sendVenuePostRequest 
     * @param {module:api/DefaultApi~sendVenuePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendVenuePost(sendVenuePostRequest, callback) {
      let postBody = sendVenuePostRequest;
      // verify the required parameter 'sendVenuePostRequest' is set
      if (sendVenuePostRequest === undefined || sendVenuePostRequest === null) {
        throw new Error("Missing the required parameter 'sendVenuePostRequest' when calling sendVenuePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendVenue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendVideoNotePost operation.
     * @callback module:api/DefaultApi~sendVideoNotePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {module:model/CopyMessagePostRequestChatId} chatId 
     * @param {String} videoNote 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowSendingWithoutReply] Pass *True*, if the message should be sent even if the specified replied-to message is not found
     * @param {Boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {Number} [duration] Duration of sent video in seconds
     * @param {Number} [length] Video width and height, i.e. diameter of the video message
     * @param {module:model/CopyMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {Number} [replyToMessageId] If the message is a reply, ID of the original message
     * @param {String} [thumb] 
     * @param {module:api/DefaultApi~sendVideoNotePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendVideoNotePost(chatId, videoNote, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendVideoNotePost");
      }
      // verify the required parameter 'videoNote' is set
      if (videoNote === undefined || videoNote === null) {
        throw new Error("Missing the required parameter 'videoNote' when calling sendVideoNotePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_sending_without_reply': opts['allowSendingWithoutReply'],
        'chat_id': chatId,
        'disable_notification': opts['disableNotification'],
        'duration': opts['duration'],
        'length': opts['length'],
        'reply_markup': opts['replyMarkup'],
        'reply_to_message_id': opts['replyToMessageId'],
        'thumb': opts['thumb'],
        'video_note': videoNote
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendVideoNote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendVideoPost operation.
     * @callback module:api/DefaultApi~sendVideoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
     * @param {module:model/CopyMessagePostRequestChatId} chatId 
     * @param {String} video 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowSendingWithoutReply] Pass *True*, if the message should be sent even if the specified replied-to message is not found
     * @param {String} [caption] Video caption (may also be used when resending videos by *file\\\\_id*), 0-1024 characters after entities parsing
     * @param {Array.<module:model/MessageEntity>} [captionEntities] List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {Boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {Number} [duration] Duration of sent video in seconds
     * @param {Number} [height] Video height
     * @param {String} [parseMode] Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {module:model/CopyMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {Number} [replyToMessageId] If the message is a reply, ID of the original message
     * @param {Boolean} [supportsStreaming] Pass *True*, if the uploaded video is suitable for streaming
     * @param {String} [thumb] 
     * @param {Number} [width] Video width
     * @param {module:api/DefaultApi~sendVideoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendVideoPost(chatId, video, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendVideoPost");
      }
      // verify the required parameter 'video' is set
      if (video === undefined || video === null) {
        throw new Error("Missing the required parameter 'video' when calling sendVideoPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_sending_without_reply': opts['allowSendingWithoutReply'],
        'caption': opts['caption'],
        'caption_entities': this.apiClient.buildCollectionParam(opts['captionEntities'], 'csv'),
        'chat_id': chatId,
        'disable_notification': opts['disableNotification'],
        'duration': opts['duration'],
        'height': opts['height'],
        'parse_mode': opts['parseMode'],
        'reply_markup': opts['replyMarkup'],
        'reply_to_message_id': opts['replyToMessageId'],
        'supports_streaming': opts['supportsStreaming'],
        'thumb': opts['thumb'],
        'video': video,
        'width': opts['width']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendVideo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendVoicePost operation.
     * @callback module:api/DefaultApi~sendVoicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForwardMessagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
     * @param {module:model/CopyMessagePostRequestChatId} chatId 
     * @param {String} voice 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowSendingWithoutReply] Pass *True*, if the message should be sent even if the specified replied-to message is not found
     * @param {String} [caption] Voice message caption, 0-1024 characters after entities parsing
     * @param {Array.<module:model/MessageEntity>} [captionEntities] List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {Boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {Number} [duration] Duration of the voice message in seconds
     * @param {String} [parseMode] Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {module:model/CopyMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {Number} [replyToMessageId] If the message is a reply, ID of the original message
     * @param {module:api/DefaultApi~sendVoicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForwardMessagePost200Response}
     */
    sendVoicePost(chatId, voice, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendVoicePost");
      }
      // verify the required parameter 'voice' is set
      if (voice === undefined || voice === null) {
        throw new Error("Missing the required parameter 'voice' when calling sendVoicePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_sending_without_reply': opts['allowSendingWithoutReply'],
        'caption': opts['caption'],
        'caption_entities': this.apiClient.buildCollectionParam(opts['captionEntities'], 'csv'),
        'chat_id': chatId,
        'disable_notification': opts['disableNotification'],
        'duration': opts['duration'],
        'parse_mode': opts['parseMode'],
        'reply_markup': opts['replyMarkup'],
        'reply_to_message_id': opts['replyToMessageId'],
        'voice': voice
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForwardMessagePost200Response;
      return this.apiClient.callApi(
        '/sendVoice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setChatAdministratorCustomTitlePost operation.
     * @callback module:api/DefaultApi~setChatAdministratorCustomTitlePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
     * @param {module:model/SetChatAdministratorCustomTitlePostRequest} setChatAdministratorCustomTitlePostRequest 
     * @param {module:api/DefaultApi~setChatAdministratorCustomTitlePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    setChatAdministratorCustomTitlePost(setChatAdministratorCustomTitlePostRequest, callback) {
      let postBody = setChatAdministratorCustomTitlePostRequest;
      // verify the required parameter 'setChatAdministratorCustomTitlePostRequest' is set
      if (setChatAdministratorCustomTitlePostRequest === undefined || setChatAdministratorCustomTitlePostRequest === null) {
        throw new Error("Missing the required parameter 'setChatAdministratorCustomTitlePostRequest' when calling setChatAdministratorCustomTitlePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/setChatAdministratorCustomTitle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setChatDescriptionPost operation.
     * @callback module:api/DefaultApi~setChatDescriptionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param {module:model/SetChatDescriptionPostRequest} setChatDescriptionPostRequest 
     * @param {module:api/DefaultApi~setChatDescriptionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    setChatDescriptionPost(setChatDescriptionPostRequest, callback) {
      let postBody = setChatDescriptionPostRequest;
      // verify the required parameter 'setChatDescriptionPostRequest' is set
      if (setChatDescriptionPostRequest === undefined || setChatDescriptionPostRequest === null) {
        throw new Error("Missing the required parameter 'setChatDescriptionPostRequest' when calling setChatDescriptionPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/setChatDescription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setChatPermissionsPost operation.
     * @callback module:api/DefaultApi~setChatPermissionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\\_restrict\\_members* admin rights. Returns *True* on success.
     * @param {module:model/SetChatPermissionsPostRequest} setChatPermissionsPostRequest 
     * @param {module:api/DefaultApi~setChatPermissionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    setChatPermissionsPost(setChatPermissionsPostRequest, callback) {
      let postBody = setChatPermissionsPostRequest;
      // verify the required parameter 'setChatPermissionsPostRequest' is set
      if (setChatPermissionsPostRequest === undefined || setChatPermissionsPostRequest === null) {
        throw new Error("Missing the required parameter 'setChatPermissionsPostRequest' when calling setChatPermissionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/setChatPermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setChatPhotoPost operation.
     * @callback module:api/DefaultApi~setChatPhotoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param {module:model/CopyMessagePostRequestChatId} chatId 
     * @param {Object} photo This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
     * @param {module:api/DefaultApi~setChatPhotoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    setChatPhotoPost(chatId, photo, callback) {
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling setChatPhotoPost");
      }
      // verify the required parameter 'photo' is set
      if (photo === undefined || photo === null) {
        throw new Error("Missing the required parameter 'photo' when calling setChatPhotoPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'chat_id': chatId,
        'photo': photo
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/setChatPhoto', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setChatStickerSetPost operation.
     * @callback module:api/DefaultApi~setChatStickerSetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
     * @param {module:model/SetChatStickerSetPostRequest} setChatStickerSetPostRequest 
     * @param {module:api/DefaultApi~setChatStickerSetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    setChatStickerSetPost(setChatStickerSetPostRequest, callback) {
      let postBody = setChatStickerSetPostRequest;
      // verify the required parameter 'setChatStickerSetPostRequest' is set
      if (setChatStickerSetPostRequest === undefined || setChatStickerSetPostRequest === null) {
        throw new Error("Missing the required parameter 'setChatStickerSetPostRequest' when calling setChatStickerSetPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/setChatStickerSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setChatTitlePost operation.
     * @callback module:api/DefaultApi~setChatTitlePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
     * @param {module:model/SetChatTitlePostRequest} setChatTitlePostRequest 
     * @param {module:api/DefaultApi~setChatTitlePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    setChatTitlePost(setChatTitlePostRequest, callback) {
      let postBody = setChatTitlePostRequest;
      // verify the required parameter 'setChatTitlePostRequest' is set
      if (setChatTitlePostRequest === undefined || setChatTitlePostRequest === null) {
        throw new Error("Missing the required parameter 'setChatTitlePostRequest' when calling setChatTitlePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/setChatTitle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setGameScorePost operation.
     * @callback module:api/DefaultApi~setGameScorePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditMessageCaptionPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.
     * @param {module:model/SetGameScorePostRequest} setGameScorePostRequest 
     * @param {module:api/DefaultApi~setGameScorePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditMessageCaptionPost200Response}
     */
    setGameScorePost(setGameScorePostRequest, callback) {
      let postBody = setGameScorePostRequest;
      // verify the required parameter 'setGameScorePostRequest' is set
      if (setGameScorePostRequest === undefined || setGameScorePostRequest === null) {
        throw new Error("Missing the required parameter 'setGameScorePostRequest' when calling setGameScorePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EditMessageCaptionPost200Response;
      return this.apiClient.callApi(
        '/setGameScore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMyCommandsPost operation.
     * @callback module:api/DefaultApi~setMyCommandsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to change the list of the bot's commands. Returns *True* on success.
     * @param {module:model/SetMyCommandsPostRequest} setMyCommandsPostRequest 
     * @param {module:api/DefaultApi~setMyCommandsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    setMyCommandsPost(setMyCommandsPostRequest, callback) {
      let postBody = setMyCommandsPostRequest;
      // verify the required parameter 'setMyCommandsPostRequest' is set
      if (setMyCommandsPostRequest === undefined || setMyCommandsPostRequest === null) {
        throw new Error("Missing the required parameter 'setMyCommandsPostRequest' when calling setMyCommandsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/setMyCommands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPassportDataErrorsPost operation.
     * @callback module:api/DefaultApi~setPassportDataErrorsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.  Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
     * @param {module:model/SetPassportDataErrorsPostRequest} setPassportDataErrorsPostRequest 
     * @param {module:api/DefaultApi~setPassportDataErrorsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    setPassportDataErrorsPost(setPassportDataErrorsPostRequest, callback) {
      let postBody = setPassportDataErrorsPostRequest;
      // verify the required parameter 'setPassportDataErrorsPostRequest' is set
      if (setPassportDataErrorsPostRequest === undefined || setPassportDataErrorsPostRequest === null) {
        throw new Error("Missing the required parameter 'setPassportDataErrorsPostRequest' when calling setPassportDataErrorsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/setPassportDataErrors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setStickerPositionInSetPost operation.
     * @callback module:api/DefaultApi~setStickerPositionInSetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
     * @param {module:model/SetStickerPositionInSetPostRequest} setStickerPositionInSetPostRequest 
     * @param {module:api/DefaultApi~setStickerPositionInSetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    setStickerPositionInSetPost(setStickerPositionInSetPostRequest, callback) {
      let postBody = setStickerPositionInSetPostRequest;
      // verify the required parameter 'setStickerPositionInSetPostRequest' is set
      if (setStickerPositionInSetPostRequest === undefined || setStickerPositionInSetPostRequest === null) {
        throw new Error("Missing the required parameter 'setStickerPositionInSetPostRequest' when calling setStickerPositionInSetPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/setStickerPositionInSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setStickerSetThumbPost operation.
     * @callback module:api/DefaultApi~setStickerSetThumbPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
     * @param {String} name Sticker set name
     * @param {Number} userId User identifier of the sticker set owner
     * @param {Object} opts Optional parameters
     * @param {String} [thumb] 
     * @param {module:api/DefaultApi~setStickerSetThumbPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    setStickerSetThumbPost(name, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling setStickerSetThumbPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setStickerSetThumbPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'thumb': opts['thumb'],
        'user_id': userId
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/setStickerSetThumb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setWebhookPost operation.
     * @callback module:api/DefaultApi~setWebhookPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.  If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.
     * @param {String} url HTTPS url to send updates to. Use an empty string to remove webhook integration
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [allowedUpdates] A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\\\_channel\\\\_post”, “callback\\\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.   Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.
     * @param {Object} [certificate] This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
     * @param {Boolean} [dropPendingUpdates] Pass *True* to drop all pending updates
     * @param {String} [ipAddress] The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
     * @param {Number} [maxConnections = 40)] Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.
     * @param {module:api/DefaultApi~setWebhookPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    setWebhookPost(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling setWebhookPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allowed_updates': this.apiClient.buildCollectionParam(opts['allowedUpdates'], 'csv'),
        'certificate': opts['certificate'],
        'drop_pending_updates': opts['dropPendingUpdates'],
        'ip_address': opts['ipAddress'],
        'max_connections': opts['maxConnections'],
        'url': url
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/setWebhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopMessageLiveLocationPost operation.
     * @callback module:api/DefaultApi~stopMessageLiveLocationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditMessageCaptionPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to stop updating a live location message before *live\\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param {module:model/StopMessageLiveLocationPostRequest} stopMessageLiveLocationPostRequest 
     * @param {module:api/DefaultApi~stopMessageLiveLocationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditMessageCaptionPost200Response}
     */
    stopMessageLiveLocationPost(stopMessageLiveLocationPostRequest, callback) {
      let postBody = stopMessageLiveLocationPostRequest;
      // verify the required parameter 'stopMessageLiveLocationPostRequest' is set
      if (stopMessageLiveLocationPostRequest === undefined || stopMessageLiveLocationPostRequest === null) {
        throw new Error("Missing the required parameter 'stopMessageLiveLocationPostRequest' when calling stopMessageLiveLocationPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EditMessageCaptionPost200Response;
      return this.apiClient.callApi(
        '/stopMessageLiveLocation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPollPost operation.
     * @callback module:api/DefaultApi~stopPollPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopPollPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
     * @param {module:model/StopPollPostRequest} stopPollPostRequest 
     * @param {module:api/DefaultApi~stopPollPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopPollPost200Response}
     */
    stopPollPost(stopPollPostRequest, callback) {
      let postBody = stopPollPostRequest;
      // verify the required parameter 'stopPollPostRequest' is set
      if (stopPollPostRequest === undefined || stopPollPostRequest === null) {
        throw new Error("Missing the required parameter 'stopPollPostRequest' when calling stopPollPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = StopPollPost200Response;
      return this.apiClient.callApi(
        '/stopPoll', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unbanChatMemberPost operation.
     * @callback module:api/DefaultApi~unbanChatMemberPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\\_if\\_banned*. Returns *True* on success.
     * @param {module:model/UnbanChatMemberPostRequest} unbanChatMemberPostRequest 
     * @param {module:api/DefaultApi~unbanChatMemberPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    unbanChatMemberPost(unbanChatMemberPostRequest, callback) {
      let postBody = unbanChatMemberPostRequest;
      // verify the required parameter 'unbanChatMemberPostRequest' is set
      if (unbanChatMemberPostRequest === undefined || unbanChatMemberPostRequest === null) {
        throw new Error("Missing the required parameter 'unbanChatMemberPostRequest' when calling unbanChatMemberPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/unbanChatMember', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unpinAllChatMessagesPost operation.
     * @callback module:api/DefaultApi~unpinAllChatMessagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\\_pin\\_messages' admin right in a supergroup or 'can\\_edit\\_messages' admin right in a channel. Returns *True* on success.
     * @param {module:model/DeleteChatPhotoPostRequest} deleteChatPhotoPostRequest 
     * @param {module:api/DefaultApi~unpinAllChatMessagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    unpinAllChatMessagesPost(deleteChatPhotoPostRequest, callback) {
      let postBody = deleteChatPhotoPostRequest;
      // verify the required parameter 'deleteChatPhotoPostRequest' is set
      if (deleteChatPhotoPostRequest === undefined || deleteChatPhotoPostRequest === null) {
        throw new Error("Missing the required parameter 'deleteChatPhotoPostRequest' when calling unpinAllChatMessagesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/unpinAllChatMessages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unpinChatMessagePost operation.
     * @callback module:api/DefaultApi~unpinChatMessagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStickerToSetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\\_pin\\_messages' admin right in a supergroup or 'can\\_edit\\_messages' admin right in a channel. Returns *True* on success.
     * @param {module:model/UnpinChatMessagePostRequest} unpinChatMessagePostRequest 
     * @param {module:api/DefaultApi~unpinChatMessagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStickerToSetPost200Response}
     */
    unpinChatMessagePost(unpinChatMessagePostRequest, callback) {
      let postBody = unpinChatMessagePostRequest;
      // verify the required parameter 'unpinChatMessagePostRequest' is set
      if (unpinChatMessagePostRequest === undefined || unpinChatMessagePostRequest === null) {
        throw new Error("Missing the required parameter 'unpinChatMessagePostRequest' when calling unpinChatMessagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddStickerToSetPost200Response;
      return this.apiClient.callApi(
        '/unpinChatMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadStickerFilePost operation.
     * @callback module:api/DefaultApi~uploadStickerFilePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFilePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
     * @param {Object} pngSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
     * @param {Number} userId User identifier of sticker file owner
     * @param {module:api/DefaultApi~uploadStickerFilePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFilePost200Response}
     */
    uploadStickerFilePost(pngSticker, userId, callback) {
      let postBody = null;
      // verify the required parameter 'pngSticker' is set
      if (pngSticker === undefined || pngSticker === null) {
        throw new Error("Missing the required parameter 'pngSticker' when calling uploadStickerFilePost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling uploadStickerFilePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'png_sticker': pngSticker,
        'user_id': userId
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetFilePost200Response;
      return this.apiClient.callApi(
        '/uploadStickerFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
