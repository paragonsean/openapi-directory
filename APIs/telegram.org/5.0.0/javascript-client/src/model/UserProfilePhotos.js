/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PhotoSize from './PhotoSize';

/**
 * The UserProfilePhotos model module.
 * @module model/UserProfilePhotos
 * @version 5.0.0
 */
class UserProfilePhotos {
    /**
     * Constructs a new <code>UserProfilePhotos</code>.
     * This object represent a user&#39;s profile pictures.
     * @alias module:model/UserProfilePhotos
     * @param photos {Array.<Array.<module:model/PhotoSize>>} Requested profile pictures (in up to 4 sizes each)
     * @param totalCount {Number} Total number of profile pictures the target user has
     */
    constructor(photos, totalCount) { 
        
        UserProfilePhotos.initialize(this, photos, totalCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, photos, totalCount) { 
        obj['photos'] = photos;
        obj['total_count'] = totalCount;
    }

    /**
     * Constructs a <code>UserProfilePhotos</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserProfilePhotos} obj Optional instance to populate.
     * @return {module:model/UserProfilePhotos} The populated <code>UserProfilePhotos</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserProfilePhotos();

            if (data.hasOwnProperty('photos')) {
                obj['photos'] = ApiClient.convertToType(data['photos'], [[PhotoSize]]);
            }
            if (data.hasOwnProperty('total_count')) {
                obj['total_count'] = ApiClient.convertToType(data['total_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserProfilePhotos</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserProfilePhotos</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserProfilePhotos.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['photos'])) {
            throw new Error("Expected the field `photos` to be an array in the JSON data but got " + data['photos']);
        }

        return true;
    }


}

UserProfilePhotos.RequiredProperties = ["photos", "total_count"];

/**
 * Requested profile pictures (in up to 4 sizes each)
 * @member {Array.<Array.<module:model/PhotoSize>>} photos
 */
UserProfilePhotos.prototype['photos'] = undefined;

/**
 * Total number of profile pictures the target user has
 * @member {Number} total_count
 */
UserProfilePhotos.prototype['total_count'] = undefined;






export default UserProfilePhotos;

