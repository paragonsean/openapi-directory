/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CopyMessagePostRequestChatId from './CopyMessagePostRequestChatId';

/**
 * The PromoteChatMemberPostRequest model module.
 * @module model/PromoteChatMemberPostRequest
 * @version 5.0.0
 */
class PromoteChatMemberPostRequest {
    /**
     * Constructs a new <code>PromoteChatMemberPostRequest</code>.
     * @alias module:model/PromoteChatMemberPostRequest
     * @param chatId {module:model/CopyMessagePostRequestChatId} 
     * @param userId {Number} Unique identifier of the target user
     */
    constructor(chatId, userId) { 
        
        PromoteChatMemberPostRequest.initialize(this, chatId, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chatId, userId) { 
        obj['chat_id'] = chatId;
        obj['user_id'] = userId;
    }

    /**
     * Constructs a <code>PromoteChatMemberPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PromoteChatMemberPostRequest} obj Optional instance to populate.
     * @return {module:model/PromoteChatMemberPostRequest} The populated <code>PromoteChatMemberPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PromoteChatMemberPostRequest();

            if (data.hasOwnProperty('can_change_info')) {
                obj['can_change_info'] = ApiClient.convertToType(data['can_change_info'], 'Boolean');
            }
            if (data.hasOwnProperty('can_delete_messages')) {
                obj['can_delete_messages'] = ApiClient.convertToType(data['can_delete_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_edit_messages')) {
                obj['can_edit_messages'] = ApiClient.convertToType(data['can_edit_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_invite_users')) {
                obj['can_invite_users'] = ApiClient.convertToType(data['can_invite_users'], 'Boolean');
            }
            if (data.hasOwnProperty('can_pin_messages')) {
                obj['can_pin_messages'] = ApiClient.convertToType(data['can_pin_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_post_messages')) {
                obj['can_post_messages'] = ApiClient.convertToType(data['can_post_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_promote_members')) {
                obj['can_promote_members'] = ApiClient.convertToType(data['can_promote_members'], 'Boolean');
            }
            if (data.hasOwnProperty('can_restrict_members')) {
                obj['can_restrict_members'] = ApiClient.convertToType(data['can_restrict_members'], 'Boolean');
            }
            if (data.hasOwnProperty('chat_id')) {
                obj['chat_id'] = CopyMessagePostRequestChatId.constructFromObject(data['chat_id']);
            }
            if (data.hasOwnProperty('is_anonymous')) {
                obj['is_anonymous'] = ApiClient.convertToType(data['is_anonymous'], 'Boolean');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PromoteChatMemberPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PromoteChatMemberPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PromoteChatMemberPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `chat_id`
        if (data['chat_id']) { // data not null
          CopyMessagePostRequestChatId.validateJSON(data['chat_id']);
        }

        return true;
    }


}

PromoteChatMemberPostRequest.RequiredProperties = ["chat_id", "user_id"];

/**
 * Pass True, if the administrator can change chat title, photo and other settings
 * @member {Boolean} can_change_info
 */
PromoteChatMemberPostRequest.prototype['can_change_info'] = undefined;

/**
 * Pass True, if the administrator can delete messages of other users
 * @member {Boolean} can_delete_messages
 */
PromoteChatMemberPostRequest.prototype['can_delete_messages'] = undefined;

/**
 * Pass True, if the administrator can edit messages of other users and can pin messages, channels only
 * @member {Boolean} can_edit_messages
 */
PromoteChatMemberPostRequest.prototype['can_edit_messages'] = undefined;

/**
 * Pass True, if the administrator can invite new users to the chat
 * @member {Boolean} can_invite_users
 */
PromoteChatMemberPostRequest.prototype['can_invite_users'] = undefined;

/**
 * Pass True, if the administrator can pin messages, supergroups only
 * @member {Boolean} can_pin_messages
 */
PromoteChatMemberPostRequest.prototype['can_pin_messages'] = undefined;

/**
 * Pass True, if the administrator can create channel posts, channels only
 * @member {Boolean} can_post_messages
 */
PromoteChatMemberPostRequest.prototype['can_post_messages'] = undefined;

/**
 * Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
 * @member {Boolean} can_promote_members
 */
PromoteChatMemberPostRequest.prototype['can_promote_members'] = undefined;

/**
 * Pass True, if the administrator can restrict, ban or unban chat members
 * @member {Boolean} can_restrict_members
 */
PromoteChatMemberPostRequest.prototype['can_restrict_members'] = undefined;

/**
 * @member {module:model/CopyMessagePostRequestChatId} chat_id
 */
PromoteChatMemberPostRequest.prototype['chat_id'] = undefined;

/**
 * Pass *True*, if the administrator's presence in the chat is hidden
 * @member {Boolean} is_anonymous
 */
PromoteChatMemberPostRequest.prototype['is_anonymous'] = undefined;

/**
 * Unique identifier of the target user
 * @member {Number} user_id
 */
PromoteChatMemberPostRequest.prototype['user_id'] = undefined;






export default PromoteChatMemberPostRequest;

