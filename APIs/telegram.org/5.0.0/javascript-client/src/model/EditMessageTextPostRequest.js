/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EditMessageCaptionPostRequestChatId from './EditMessageCaptionPostRequestChatId';
import InlineKeyboardMarkup from './InlineKeyboardMarkup';
import MessageEntity from './MessageEntity';

/**
 * The EditMessageTextPostRequest model module.
 * @module model/EditMessageTextPostRequest
 * @version 5.0.0
 */
class EditMessageTextPostRequest {
    /**
     * Constructs a new <code>EditMessageTextPostRequest</code>.
     * @alias module:model/EditMessageTextPostRequest
     * @param text {String} New text of the message, 1-4096 characters after entities parsing
     */
    constructor(text) { 
        
        EditMessageTextPostRequest.initialize(this, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text) { 
        obj['text'] = text;
    }

    /**
     * Constructs a <code>EditMessageTextPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditMessageTextPostRequest} obj Optional instance to populate.
     * @return {module:model/EditMessageTextPostRequest} The populated <code>EditMessageTextPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditMessageTextPostRequest();

            if (data.hasOwnProperty('chat_id')) {
                obj['chat_id'] = EditMessageCaptionPostRequestChatId.constructFromObject(data['chat_id']);
            }
            if (data.hasOwnProperty('disable_web_page_preview')) {
                obj['disable_web_page_preview'] = ApiClient.convertToType(data['disable_web_page_preview'], 'Boolean');
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], [MessageEntity]);
            }
            if (data.hasOwnProperty('inline_message_id')) {
                obj['inline_message_id'] = ApiClient.convertToType(data['inline_message_id'], 'String');
            }
            if (data.hasOwnProperty('message_id')) {
                obj['message_id'] = ApiClient.convertToType(data['message_id'], 'Number');
            }
            if (data.hasOwnProperty('parse_mode')) {
                obj['parse_mode'] = ApiClient.convertToType(data['parse_mode'], 'String');
            }
            if (data.hasOwnProperty('reply_markup')) {
                obj['reply_markup'] = InlineKeyboardMarkup.constructFromObject(data['reply_markup']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditMessageTextPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditMessageTextPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EditMessageTextPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `chat_id`
        if (data['chat_id']) { // data not null
          EditMessageCaptionPostRequestChatId.validateJSON(data['chat_id']);
        }
        if (data['entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entities'])) {
                throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
            }
            // validate the optional field `entities` (array)
            for (const item of data['entities']) {
                MessageEntity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['inline_message_id'] && !(typeof data['inline_message_id'] === 'string' || data['inline_message_id'] instanceof String)) {
            throw new Error("Expected the field `inline_message_id` to be a primitive type in the JSON string but got " + data['inline_message_id']);
        }
        // ensure the json data is a string
        if (data['parse_mode'] && !(typeof data['parse_mode'] === 'string' || data['parse_mode'] instanceof String)) {
            throw new Error("Expected the field `parse_mode` to be a primitive type in the JSON string but got " + data['parse_mode']);
        }
        // validate the optional field `reply_markup`
        if (data['reply_markup']) { // data not null
          InlineKeyboardMarkup.validateJSON(data['reply_markup']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

EditMessageTextPostRequest.RequiredProperties = ["text"];

/**
 * @member {module:model/EditMessageCaptionPostRequestChatId} chat_id
 */
EditMessageTextPostRequest.prototype['chat_id'] = undefined;

/**
 * Disables link previews for links in this message
 * @member {Boolean} disable_web_page_preview
 */
EditMessageTextPostRequest.prototype['disable_web_page_preview'] = undefined;

/**
 * List of special entities that appear in message text, which can be specified instead of *parse\\_mode*
 * @member {Array.<module:model/MessageEntity>} entities
 */
EditMessageTextPostRequest.prototype['entities'] = undefined;

/**
 * Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message
 * @member {String} inline_message_id
 */
EditMessageTextPostRequest.prototype['inline_message_id'] = undefined;

/**
 * Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit
 * @member {Number} message_id
 */
EditMessageTextPostRequest.prototype['message_id'] = undefined;

/**
 * Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
 * @member {String} parse_mode
 */
EditMessageTextPostRequest.prototype['parse_mode'] = undefined;

/**
 * @member {module:model/InlineKeyboardMarkup} reply_markup
 */
EditMessageTextPostRequest.prototype['reply_markup'] = undefined;

/**
 * New text of the message, 1-4096 characters after entities parsing
 * @member {String} text
 */
EditMessageTextPostRequest.prototype['text'] = undefined;






export default EditMessageTextPostRequest;

