/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoginUrl from './LoginUrl';

/**
 * The InlineKeyboardButton model module.
 * @module model/InlineKeyboardButton
 * @version 5.0.0
 */
class InlineKeyboardButton {
    /**
     * Constructs a new <code>InlineKeyboardButton</code>.
     * This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.
     * @alias module:model/InlineKeyboardButton
     * @param text {String} Label text on the button
     */
    constructor(text) { 
        
        InlineKeyboardButton.initialize(this, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text) { 
        obj['text'] = text;
    }

    /**
     * Constructs a <code>InlineKeyboardButton</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineKeyboardButton} obj Optional instance to populate.
     * @return {module:model/InlineKeyboardButton} The populated <code>InlineKeyboardButton</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineKeyboardButton();

            if (data.hasOwnProperty('callback_data')) {
                obj['callback_data'] = ApiClient.convertToType(data['callback_data'], 'String');
            }
            if (data.hasOwnProperty('callback_game')) {
                obj['callback_game'] = ApiClient.convertToType(data['callback_game'], Object);
            }
            if (data.hasOwnProperty('login_url')) {
                obj['login_url'] = LoginUrl.constructFromObject(data['login_url']);
            }
            if (data.hasOwnProperty('pay')) {
                obj['pay'] = ApiClient.convertToType(data['pay'], 'Boolean');
            }
            if (data.hasOwnProperty('switch_inline_query')) {
                obj['switch_inline_query'] = ApiClient.convertToType(data['switch_inline_query'], 'String');
            }
            if (data.hasOwnProperty('switch_inline_query_current_chat')) {
                obj['switch_inline_query_current_chat'] = ApiClient.convertToType(data['switch_inline_query_current_chat'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InlineKeyboardButton</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InlineKeyboardButton</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InlineKeyboardButton.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['callback_data'] && !(typeof data['callback_data'] === 'string' || data['callback_data'] instanceof String)) {
            throw new Error("Expected the field `callback_data` to be a primitive type in the JSON string but got " + data['callback_data']);
        }
        // validate the optional field `login_url`
        if (data['login_url']) { // data not null
          LoginUrl.validateJSON(data['login_url']);
        }
        // ensure the json data is a string
        if (data['switch_inline_query'] && !(typeof data['switch_inline_query'] === 'string' || data['switch_inline_query'] instanceof String)) {
            throw new Error("Expected the field `switch_inline_query` to be a primitive type in the JSON string but got " + data['switch_inline_query']);
        }
        // ensure the json data is a string
        if (data['switch_inline_query_current_chat'] && !(typeof data['switch_inline_query_current_chat'] === 'string' || data['switch_inline_query_current_chat'] instanceof String)) {
            throw new Error("Expected the field `switch_inline_query_current_chat` to be a primitive type in the JSON string but got " + data['switch_inline_query_current_chat']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

InlineKeyboardButton.RequiredProperties = ["text"];

/**
 * *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes
 * @member {String} callback_data
 */
InlineKeyboardButton.prototype['callback_data'] = undefined;

/**
 * A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.
 * @member {Object} callback_game
 */
InlineKeyboardButton.prototype['callback_game'] = undefined;

/**
 * @member {module:model/LoginUrl} login_url
 */
InlineKeyboardButton.prototype['login_url'] = undefined;

/**
 * *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).    **NOTE:** This type of button **must** always be the first button in the first row.
 * @member {Boolean} pay
 */
InlineKeyboardButton.prototype['pay'] = undefined;

/**
 * *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.    **Note:** This offers an easy way for users to start using your bot in [inline mode](/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\\_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
 * @member {String} switch_inline_query
 */
InlineKeyboardButton.prototype['switch_inline_query'] = undefined;

/**
 * *Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.    This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.
 * @member {String} switch_inline_query_current_chat
 */
InlineKeyboardButton.prototype['switch_inline_query_current_chat'] = undefined;

/**
 * Label text on the button
 * @member {String} text
 */
InlineKeyboardButton.prototype['text'] = undefined;

/**
 * *Optional*. HTTP or tg:// url to be opened when button is pressed
 * @member {String} url
 */
InlineKeyboardButton.prototype['url'] = undefined;






export default InlineKeyboardButton;

