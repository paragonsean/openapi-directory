/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Animation from './Animation';
import MessageEntity from './MessageEntity';
import PhotoSize from './PhotoSize';

/**
 * The Game model module.
 * @module model/Game
 * @version 5.0.0
 */
class Game {
    /**
     * Constructs a new <code>Game</code>.
     * This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
     * @alias module:model/Game
     * @param description {String} Description of the game
     * @param photo {Array.<module:model/PhotoSize>} Photo that will be displayed in the game message in chats.
     * @param title {String} Title of the game
     */
    constructor(description, photo, title) { 
        
        Game.initialize(this, description, photo, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, photo, title) { 
        obj['description'] = description;
        obj['photo'] = photo;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Game</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Game} obj Optional instance to populate.
     * @return {module:model/Game} The populated <code>Game</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Game();

            if (data.hasOwnProperty('animation')) {
                obj['animation'] = Animation.constructFromObject(data['animation']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('photo')) {
                obj['photo'] = ApiClient.convertToType(data['photo'], [PhotoSize]);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('text_entities')) {
                obj['text_entities'] = ApiClient.convertToType(data['text_entities'], [MessageEntity]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Game</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Game</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Game.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `animation`
        if (data['animation']) { // data not null
          Animation.validateJSON(data['animation']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['photo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['photo'])) {
                throw new Error("Expected the field `photo` to be an array in the JSON data but got " + data['photo']);
            }
            // validate the optional field `photo` (array)
            for (const item of data['photo']) {
                PhotoSize.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        if (data['text_entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['text_entities'])) {
                throw new Error("Expected the field `text_entities` to be an array in the JSON data but got " + data['text_entities']);
            }
            // validate the optional field `text_entities` (array)
            for (const item of data['text_entities']) {
                MessageEntity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Game.RequiredProperties = ["description", "photo", "title"];

/**
 * @member {module:model/Animation} animation
 */
Game.prototype['animation'] = undefined;

/**
 * Description of the game
 * @member {String} description
 */
Game.prototype['description'] = undefined;

/**
 * Photo that will be displayed in the game message in chats.
 * @member {Array.<module:model/PhotoSize>} photo
 */
Game.prototype['photo'] = undefined;

/**
 * *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.
 * @member {String} text
 */
Game.prototype['text'] = undefined;

/**
 * *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.
 * @member {Array.<module:model/MessageEntity>} text_entities
 */
Game.prototype['text_entities'] = undefined;

/**
 * Title of the game
 * @member {String} title
 */
Game.prototype['title'] = undefined;






export default Game;

