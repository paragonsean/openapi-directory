/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BotCommand model module.
 * @module model/BotCommand
 * @version 5.0.0
 */
class BotCommand {
    /**
     * Constructs a new <code>BotCommand</code>.
     * This object represents a bot command.
     * @alias module:model/BotCommand
     * @param command {String} Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
     * @param description {String} Description of the command, 3-256 characters.
     */
    constructor(command, description) { 
        
        BotCommand.initialize(this, command, description);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, command, description) { 
        obj['command'] = command;
        obj['description'] = description;
    }

    /**
     * Constructs a <code>BotCommand</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BotCommand} obj Optional instance to populate.
     * @return {module:model/BotCommand} The populated <code>BotCommand</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BotCommand();

            if (data.hasOwnProperty('command')) {
                obj['command'] = ApiClient.convertToType(data['command'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BotCommand</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BotCommand</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BotCommand.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['command'] && !(typeof data['command'] === 'string' || data['command'] instanceof String)) {
            throw new Error("Expected the field `command` to be a primitive type in the JSON string but got " + data['command']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

BotCommand.RequiredProperties = ["command", "description"];

/**
 * Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
 * @member {String} command
 */
BotCommand.prototype['command'] = undefined;

/**
 * Description of the command, 3-256 characters.
 * @member {String} description
 */
BotCommand.prototype['description'] = undefined;






export default BotCommand;

