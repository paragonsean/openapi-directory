/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PhotoSize from './PhotoSize';
import Sticker from './Sticker';

/**
 * The StickerSet model module.
 * @module model/StickerSet
 * @version 5.0.0
 */
class StickerSet {
    /**
     * Constructs a new <code>StickerSet</code>.
     * This object represents a sticker set.
     * @alias module:model/StickerSet
     * @param containsMasks {Boolean} *True*, if the sticker set contains masks
     * @param isAnimated {Boolean} *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)
     * @param name {String} Sticker set name
     * @param stickers {Array.<module:model/Sticker>} List of all set stickers
     * @param title {String} Sticker set title
     */
    constructor(containsMasks, isAnimated, name, stickers, title) { 
        
        StickerSet.initialize(this, containsMasks, isAnimated, name, stickers, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, containsMasks, isAnimated, name, stickers, title) { 
        obj['contains_masks'] = containsMasks;
        obj['is_animated'] = isAnimated;
        obj['name'] = name;
        obj['stickers'] = stickers;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>StickerSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StickerSet} obj Optional instance to populate.
     * @return {module:model/StickerSet} The populated <code>StickerSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StickerSet();

            if (data.hasOwnProperty('contains_masks')) {
                obj['contains_masks'] = ApiClient.convertToType(data['contains_masks'], 'Boolean');
            }
            if (data.hasOwnProperty('is_animated')) {
                obj['is_animated'] = ApiClient.convertToType(data['is_animated'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('stickers')) {
                obj['stickers'] = ApiClient.convertToType(data['stickers'], [Sticker]);
            }
            if (data.hasOwnProperty('thumb')) {
                obj['thumb'] = PhotoSize.constructFromObject(data['thumb']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StickerSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StickerSet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StickerSet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['stickers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stickers'])) {
                throw new Error("Expected the field `stickers` to be an array in the JSON data but got " + data['stickers']);
            }
            // validate the optional field `stickers` (array)
            for (const item of data['stickers']) {
                Sticker.validateJSON(item);
            };
        }
        // validate the optional field `thumb`
        if (data['thumb']) { // data not null
          PhotoSize.validateJSON(data['thumb']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

StickerSet.RequiredProperties = ["contains_masks", "is_animated", "name", "stickers", "title"];

/**
 * *True*, if the sticker set contains masks
 * @member {Boolean} contains_masks
 */
StickerSet.prototype['contains_masks'] = undefined;

/**
 * *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)
 * @member {Boolean} is_animated
 */
StickerSet.prototype['is_animated'] = undefined;

/**
 * Sticker set name
 * @member {String} name
 */
StickerSet.prototype['name'] = undefined;

/**
 * List of all set stickers
 * @member {Array.<module:model/Sticker>} stickers
 */
StickerSet.prototype['stickers'] = undefined;

/**
 * @member {module:model/PhotoSize} thumb
 */
StickerSet.prototype['thumb'] = undefined;

/**
 * Sticker set title
 * @member {String} title
 */
StickerSet.prototype['title'] = undefined;






export default StickerSet;

