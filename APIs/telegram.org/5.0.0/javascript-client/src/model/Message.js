/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Animation from './Animation';
import Audio from './Audio';
import Chat from './Chat';
import Contact from './Contact';
import Dice from './Dice';
import Document from './Document';
import Game from './Game';
import InlineKeyboardMarkup from './InlineKeyboardMarkup';
import Invoice from './Invoice';
import Location from './Location';
import MessageEntity from './MessageEntity';
import PassportData from './PassportData';
import PhotoSize from './PhotoSize';
import Poll from './Poll';
import ProximityAlertTriggered from './ProximityAlertTriggered';
import Sticker from './Sticker';
import SuccessfulPayment from './SuccessfulPayment';
import User from './User';
import Venue from './Venue';
import Video from './Video';
import VideoNote from './VideoNote';
import Voice from './Voice';

/**
 * The Message model module.
 * @module model/Message
 * @version 5.0.0
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * This object represents a message.
     * @alias module:model/Message
     * @param chat {module:model/Chat} 
     * @param date {Number} Date the message was sent in Unix time
     * @param messageId {Number} Unique message identifier inside this chat
     */
    constructor(chat, date, messageId) { 
        
        Message.initialize(this, chat, date, messageId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chat, date, messageId) { 
        obj['chat'] = chat;
        obj['date'] = date;
        obj['message_id'] = messageId;
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('animation')) {
                obj['animation'] = Animation.constructFromObject(data['animation']);
            }
            if (data.hasOwnProperty('audio')) {
                obj['audio'] = Audio.constructFromObject(data['audio']);
            }
            if (data.hasOwnProperty('author_signature')) {
                obj['author_signature'] = ApiClient.convertToType(data['author_signature'], 'String');
            }
            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('caption_entities')) {
                obj['caption_entities'] = ApiClient.convertToType(data['caption_entities'], [MessageEntity]);
            }
            if (data.hasOwnProperty('channel_chat_created')) {
                obj['channel_chat_created'] = ApiClient.convertToType(data['channel_chat_created'], 'Boolean');
            }
            if (data.hasOwnProperty('chat')) {
                obj['chat'] = Chat.constructFromObject(data['chat']);
            }
            if (data.hasOwnProperty('connected_website')) {
                obj['connected_website'] = ApiClient.convertToType(data['connected_website'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = Contact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Number');
            }
            if (data.hasOwnProperty('delete_chat_photo')) {
                obj['delete_chat_photo'] = ApiClient.convertToType(data['delete_chat_photo'], 'Boolean');
            }
            if (data.hasOwnProperty('dice')) {
                obj['dice'] = Dice.constructFromObject(data['dice']);
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = Document.constructFromObject(data['document']);
            }
            if (data.hasOwnProperty('edit_date')) {
                obj['edit_date'] = ApiClient.convertToType(data['edit_date'], 'Number');
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], [MessageEntity]);
            }
            if (data.hasOwnProperty('forward_date')) {
                obj['forward_date'] = ApiClient.convertToType(data['forward_date'], 'Number');
            }
            if (data.hasOwnProperty('forward_from')) {
                obj['forward_from'] = User.constructFromObject(data['forward_from']);
            }
            if (data.hasOwnProperty('forward_from_chat')) {
                obj['forward_from_chat'] = Chat.constructFromObject(data['forward_from_chat']);
            }
            if (data.hasOwnProperty('forward_from_message_id')) {
                obj['forward_from_message_id'] = ApiClient.convertToType(data['forward_from_message_id'], 'Number');
            }
            if (data.hasOwnProperty('forward_sender_name')) {
                obj['forward_sender_name'] = ApiClient.convertToType(data['forward_sender_name'], 'String');
            }
            if (data.hasOwnProperty('forward_signature')) {
                obj['forward_signature'] = ApiClient.convertToType(data['forward_signature'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = User.constructFromObject(data['from']);
            }
            if (data.hasOwnProperty('game')) {
                obj['game'] = Game.constructFromObject(data['game']);
            }
            if (data.hasOwnProperty('group_chat_created')) {
                obj['group_chat_created'] = ApiClient.convertToType(data['group_chat_created'], 'Boolean');
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = Invoice.constructFromObject(data['invoice']);
            }
            if (data.hasOwnProperty('left_chat_member')) {
                obj['left_chat_member'] = User.constructFromObject(data['left_chat_member']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('media_group_id')) {
                obj['media_group_id'] = ApiClient.convertToType(data['media_group_id'], 'String');
            }
            if (data.hasOwnProperty('message_id')) {
                obj['message_id'] = ApiClient.convertToType(data['message_id'], 'Number');
            }
            if (data.hasOwnProperty('migrate_from_chat_id')) {
                obj['migrate_from_chat_id'] = ApiClient.convertToType(data['migrate_from_chat_id'], 'Number');
            }
            if (data.hasOwnProperty('migrate_to_chat_id')) {
                obj['migrate_to_chat_id'] = ApiClient.convertToType(data['migrate_to_chat_id'], 'Number');
            }
            if (data.hasOwnProperty('new_chat_members')) {
                obj['new_chat_members'] = ApiClient.convertToType(data['new_chat_members'], [User]);
            }
            if (data.hasOwnProperty('new_chat_photo')) {
                obj['new_chat_photo'] = ApiClient.convertToType(data['new_chat_photo'], [PhotoSize]);
            }
            if (data.hasOwnProperty('new_chat_title')) {
                obj['new_chat_title'] = ApiClient.convertToType(data['new_chat_title'], 'String');
            }
            if (data.hasOwnProperty('passport_data')) {
                obj['passport_data'] = PassportData.constructFromObject(data['passport_data']);
            }
            if (data.hasOwnProperty('photo')) {
                obj['photo'] = ApiClient.convertToType(data['photo'], [PhotoSize]);
            }
            if (data.hasOwnProperty('pinned_message')) {
                obj['pinned_message'] = Message.constructFromObject(data['pinned_message']);
            }
            if (data.hasOwnProperty('poll')) {
                obj['poll'] = Poll.constructFromObject(data['poll']);
            }
            if (data.hasOwnProperty('proximity_alert_triggered')) {
                obj['proximity_alert_triggered'] = ProximityAlertTriggered.constructFromObject(data['proximity_alert_triggered']);
            }
            if (data.hasOwnProperty('reply_markup')) {
                obj['reply_markup'] = InlineKeyboardMarkup.constructFromObject(data['reply_markup']);
            }
            if (data.hasOwnProperty('reply_to_message')) {
                obj['reply_to_message'] = Message.constructFromObject(data['reply_to_message']);
            }
            if (data.hasOwnProperty('sender_chat')) {
                obj['sender_chat'] = Chat.constructFromObject(data['sender_chat']);
            }
            if (data.hasOwnProperty('sticker')) {
                obj['sticker'] = Sticker.constructFromObject(data['sticker']);
            }
            if (data.hasOwnProperty('successful_payment')) {
                obj['successful_payment'] = SuccessfulPayment.constructFromObject(data['successful_payment']);
            }
            if (data.hasOwnProperty('supergroup_chat_created')) {
                obj['supergroup_chat_created'] = ApiClient.convertToType(data['supergroup_chat_created'], 'Boolean');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('venue')) {
                obj['venue'] = Venue.constructFromObject(data['venue']);
            }
            if (data.hasOwnProperty('via_bot')) {
                obj['via_bot'] = User.constructFromObject(data['via_bot']);
            }
            if (data.hasOwnProperty('video')) {
                obj['video'] = Video.constructFromObject(data['video']);
            }
            if (data.hasOwnProperty('video_note')) {
                obj['video_note'] = VideoNote.constructFromObject(data['video_note']);
            }
            if (data.hasOwnProperty('voice')) {
                obj['voice'] = Voice.constructFromObject(data['voice']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Message</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Message</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Message.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `animation`
        if (data['animation']) { // data not null
          Animation.validateJSON(data['animation']);
        }
        // validate the optional field `audio`
        if (data['audio']) { // data not null
          Audio.validateJSON(data['audio']);
        }
        // ensure the json data is a string
        if (data['author_signature'] && !(typeof data['author_signature'] === 'string' || data['author_signature'] instanceof String)) {
            throw new Error("Expected the field `author_signature` to be a primitive type in the JSON string but got " + data['author_signature']);
        }
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        if (data['caption_entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['caption_entities'])) {
                throw new Error("Expected the field `caption_entities` to be an array in the JSON data but got " + data['caption_entities']);
            }
            // validate the optional field `caption_entities` (array)
            for (const item of data['caption_entities']) {
                MessageEntity.validateJSON(item);
            };
        }
        // validate the optional field `chat`
        if (data['chat']) { // data not null
          Chat.validateJSON(data['chat']);
        }
        // ensure the json data is a string
        if (data['connected_website'] && !(typeof data['connected_website'] === 'string' || data['connected_website'] instanceof String)) {
            throw new Error("Expected the field `connected_website` to be a primitive type in the JSON string but got " + data['connected_website']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          Contact.validateJSON(data['contact']);
        }
        // validate the optional field `dice`
        if (data['dice']) { // data not null
          Dice.validateJSON(data['dice']);
        }
        // validate the optional field `document`
        if (data['document']) { // data not null
          Document.validateJSON(data['document']);
        }
        if (data['entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entities'])) {
                throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
            }
            // validate the optional field `entities` (array)
            for (const item of data['entities']) {
                MessageEntity.validateJSON(item);
            };
        }
        // validate the optional field `forward_from`
        if (data['forward_from']) { // data not null
          User.validateJSON(data['forward_from']);
        }
        // validate the optional field `forward_from_chat`
        if (data['forward_from_chat']) { // data not null
          Chat.validateJSON(data['forward_from_chat']);
        }
        // ensure the json data is a string
        if (data['forward_sender_name'] && !(typeof data['forward_sender_name'] === 'string' || data['forward_sender_name'] instanceof String)) {
            throw new Error("Expected the field `forward_sender_name` to be a primitive type in the JSON string but got " + data['forward_sender_name']);
        }
        // ensure the json data is a string
        if (data['forward_signature'] && !(typeof data['forward_signature'] === 'string' || data['forward_signature'] instanceof String)) {
            throw new Error("Expected the field `forward_signature` to be a primitive type in the JSON string but got " + data['forward_signature']);
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
          User.validateJSON(data['from']);
        }
        // validate the optional field `game`
        if (data['game']) { // data not null
          Game.validateJSON(data['game']);
        }
        // validate the optional field `invoice`
        if (data['invoice']) { // data not null
          Invoice.validateJSON(data['invoice']);
        }
        // validate the optional field `left_chat_member`
        if (data['left_chat_member']) { // data not null
          User.validateJSON(data['left_chat_member']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['media_group_id'] && !(typeof data['media_group_id'] === 'string' || data['media_group_id'] instanceof String)) {
            throw new Error("Expected the field `media_group_id` to be a primitive type in the JSON string but got " + data['media_group_id']);
        }
        if (data['new_chat_members']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['new_chat_members'])) {
                throw new Error("Expected the field `new_chat_members` to be an array in the JSON data but got " + data['new_chat_members']);
            }
            // validate the optional field `new_chat_members` (array)
            for (const item of data['new_chat_members']) {
                User.validateJSON(item);
            };
        }
        if (data['new_chat_photo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['new_chat_photo'])) {
                throw new Error("Expected the field `new_chat_photo` to be an array in the JSON data but got " + data['new_chat_photo']);
            }
            // validate the optional field `new_chat_photo` (array)
            for (const item of data['new_chat_photo']) {
                PhotoSize.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['new_chat_title'] && !(typeof data['new_chat_title'] === 'string' || data['new_chat_title'] instanceof String)) {
            throw new Error("Expected the field `new_chat_title` to be a primitive type in the JSON string but got " + data['new_chat_title']);
        }
        // validate the optional field `passport_data`
        if (data['passport_data']) { // data not null
          PassportData.validateJSON(data['passport_data']);
        }
        if (data['photo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['photo'])) {
                throw new Error("Expected the field `photo` to be an array in the JSON data but got " + data['photo']);
            }
            // validate the optional field `photo` (array)
            for (const item of data['photo']) {
                PhotoSize.validateJSON(item);
            };
        }
        // validate the optional field `pinned_message`
        if (data['pinned_message']) { // data not null
          Message.validateJSON(data['pinned_message']);
        }
        // validate the optional field `poll`
        if (data['poll']) { // data not null
          Poll.validateJSON(data['poll']);
        }
        // validate the optional field `proximity_alert_triggered`
        if (data['proximity_alert_triggered']) { // data not null
          ProximityAlertTriggered.validateJSON(data['proximity_alert_triggered']);
        }
        // validate the optional field `reply_markup`
        if (data['reply_markup']) { // data not null
          InlineKeyboardMarkup.validateJSON(data['reply_markup']);
        }
        // validate the optional field `reply_to_message`
        if (data['reply_to_message']) { // data not null
          Message.validateJSON(data['reply_to_message']);
        }
        // validate the optional field `sender_chat`
        if (data['sender_chat']) { // data not null
          Chat.validateJSON(data['sender_chat']);
        }
        // validate the optional field `sticker`
        if (data['sticker']) { // data not null
          Sticker.validateJSON(data['sticker']);
        }
        // validate the optional field `successful_payment`
        if (data['successful_payment']) { // data not null
          SuccessfulPayment.validateJSON(data['successful_payment']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // validate the optional field `venue`
        if (data['venue']) { // data not null
          Venue.validateJSON(data['venue']);
        }
        // validate the optional field `via_bot`
        if (data['via_bot']) { // data not null
          User.validateJSON(data['via_bot']);
        }
        // validate the optional field `video`
        if (data['video']) { // data not null
          Video.validateJSON(data['video']);
        }
        // validate the optional field `video_note`
        if (data['video_note']) { // data not null
          VideoNote.validateJSON(data['video_note']);
        }
        // validate the optional field `voice`
        if (data['voice']) { // data not null
          Voice.validateJSON(data['voice']);
        }

        return true;
    }


}

Message.RequiredProperties = ["chat", "date", "message_id"];

/**
 * @member {module:model/Animation} animation
 */
Message.prototype['animation'] = undefined;

/**
 * @member {module:model/Audio} audio
 */
Message.prototype['audio'] = undefined;

/**
 * *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
 * @member {String} author_signature
 */
Message.prototype['author_signature'] = undefined;

/**
 * *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
 * @member {String} caption
 */
Message.prototype['caption'] = undefined;

/**
 * *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
 * @member {Array.<module:model/MessageEntity>} caption_entities
 */
Message.prototype['caption_entities'] = undefined;

/**
 * *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a channel.
 * @member {Boolean} channel_chat_created
 */
Message.prototype['channel_chat_created'] = undefined;

/**
 * @member {module:model/Chat} chat
 */
Message.prototype['chat'] = undefined;

/**
 * *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)
 * @member {String} connected_website
 */
Message.prototype['connected_website'] = undefined;

/**
 * @member {module:model/Contact} contact
 */
Message.prototype['contact'] = undefined;

/**
 * Date the message was sent in Unix time
 * @member {Number} date
 */
Message.prototype['date'] = undefined;

/**
 * *Optional*. Service message: the chat photo was deleted
 * @member {Boolean} delete_chat_photo
 */
Message.prototype['delete_chat_photo'] = undefined;

/**
 * @member {module:model/Dice} dice
 */
Message.prototype['dice'] = undefined;

/**
 * @member {module:model/Document} document
 */
Message.prototype['document'] = undefined;

/**
 * *Optional*. Date the message was last edited in Unix time
 * @member {Number} edit_date
 */
Message.prototype['edit_date'] = undefined;

/**
 * *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
 * @member {Array.<module:model/MessageEntity>} entities
 */
Message.prototype['entities'] = undefined;

/**
 * *Optional*. For forwarded messages, date the original message was sent in Unix time
 * @member {Number} forward_date
 */
Message.prototype['forward_date'] = undefined;

/**
 * @member {module:model/User} forward_from
 */
Message.prototype['forward_from'] = undefined;

/**
 * @member {module:model/Chat} forward_from_chat
 */
Message.prototype['forward_from_chat'] = undefined;

/**
 * *Optional*. For messages forwarded from channels, identifier of the original message in the channel
 * @member {Number} forward_from_message_id
 */
Message.prototype['forward_from_message_id'] = undefined;

/**
 * *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
 * @member {String} forward_sender_name
 */
Message.prototype['forward_sender_name'] = undefined;

/**
 * *Optional*. For messages forwarded from channels, signature of the post author if present
 * @member {String} forward_signature
 */
Message.prototype['forward_signature'] = undefined;

/**
 * @member {module:model/User} from
 */
Message.prototype['from'] = undefined;

/**
 * @member {module:model/Game} game
 */
Message.prototype['game'] = undefined;

/**
 * *Optional*. Service message: the group has been created
 * @member {Boolean} group_chat_created
 */
Message.prototype['group_chat_created'] = undefined;

/**
 * @member {module:model/Invoice} invoice
 */
Message.prototype['invoice'] = undefined;

/**
 * @member {module:model/User} left_chat_member
 */
Message.prototype['left_chat_member'] = undefined;

/**
 * @member {module:model/Location} location
 */
Message.prototype['location'] = undefined;

/**
 * *Optional*. The unique identifier of a media message group this message belongs to
 * @member {String} media_group_id
 */
Message.prototype['media_group_id'] = undefined;

/**
 * Unique message identifier inside this chat
 * @member {Number} message_id
 */
Message.prototype['message_id'] = undefined;

/**
 * *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
 * @member {Number} migrate_from_chat_id
 */
Message.prototype['migrate_from_chat_id'] = undefined;

/**
 * *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
 * @member {Number} migrate_to_chat_id
 */
Message.prototype['migrate_to_chat_id'] = undefined;

/**
 * *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
 * @member {Array.<module:model/User>} new_chat_members
 */
Message.prototype['new_chat_members'] = undefined;

/**
 * *Optional*. A chat photo was change to this value
 * @member {Array.<module:model/PhotoSize>} new_chat_photo
 */
Message.prototype['new_chat_photo'] = undefined;

/**
 * *Optional*. A chat title was changed to this value
 * @member {String} new_chat_title
 */
Message.prototype['new_chat_title'] = undefined;

/**
 * @member {module:model/PassportData} passport_data
 */
Message.prototype['passport_data'] = undefined;

/**
 * *Optional*. Message is a photo, available sizes of the photo
 * @member {Array.<module:model/PhotoSize>} photo
 */
Message.prototype['photo'] = undefined;

/**
 * @member {module:model/Message} pinned_message
 */
Message.prototype['pinned_message'] = undefined;

/**
 * @member {module:model/Poll} poll
 */
Message.prototype['poll'] = undefined;

/**
 * @member {module:model/ProximityAlertTriggered} proximity_alert_triggered
 */
Message.prototype['proximity_alert_triggered'] = undefined;

/**
 * @member {module:model/InlineKeyboardMarkup} reply_markup
 */
Message.prototype['reply_markup'] = undefined;

/**
 * @member {module:model/Message} reply_to_message
 */
Message.prototype['reply_to_message'] = undefined;

/**
 * @member {module:model/Chat} sender_chat
 */
Message.prototype['sender_chat'] = undefined;

/**
 * @member {module:model/Sticker} sticker
 */
Message.prototype['sticker'] = undefined;

/**
 * @member {module:model/SuccessfulPayment} successful_payment
 */
Message.prototype['successful_payment'] = undefined;

/**
 * *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a directly created supergroup.
 * @member {Boolean} supergroup_chat_created
 */
Message.prototype['supergroup_chat_created'] = undefined;

/**
 * *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
 * @member {String} text
 */
Message.prototype['text'] = undefined;

/**
 * @member {module:model/Venue} venue
 */
Message.prototype['venue'] = undefined;

/**
 * @member {module:model/User} via_bot
 */
Message.prototype['via_bot'] = undefined;

/**
 * @member {module:model/Video} video
 */
Message.prototype['video'] = undefined;

/**
 * @member {module:model/VideoNote} video_note
 */
Message.prototype['video_note'] = undefined;

/**
 * @member {module:model/Voice} voice
 */
Message.prototype['voice'] = undefined;






export default Message;

