/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ForceReply model module.
 * @module model/ForceReply
 * @version 5.0.0
 */
class ForceReply {
    /**
     * Constructs a new <code>ForceReply</code>.
     * Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot&#39;s message and tapped &#39;Reply&#39;). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
     * @alias module:model/ForceReply
     * @param forceReply {Boolean} Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
     */
    constructor(forceReply) { 
        
        ForceReply.initialize(this, forceReply);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, forceReply) { 
        obj['force_reply'] = forceReply;
    }

    /**
     * Constructs a <code>ForceReply</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ForceReply} obj Optional instance to populate.
     * @return {module:model/ForceReply} The populated <code>ForceReply</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ForceReply();

            if (data.hasOwnProperty('force_reply')) {
                obj['force_reply'] = ApiClient.convertToType(data['force_reply'], 'Boolean');
            }
            if (data.hasOwnProperty('selective')) {
                obj['selective'] = ApiClient.convertToType(data['selective'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ForceReply</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ForceReply</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ForceReply.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

ForceReply.RequiredProperties = ["force_reply"];

/**
 * Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
 * @member {Boolean} force_reply
 */
ForceReply.prototype['force_reply'] = undefined;

/**
 * *Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.
 * @member {Boolean} selective
 */
ForceReply.prototype['selective'] = undefined;






export default ForceReply;

