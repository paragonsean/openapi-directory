/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineKeyboardMarkup from './InlineKeyboardMarkup';
import InputMessageContent from './InputMessageContent';
import MessageEntity from './MessageEntity';

/**
 * The InlineQueryResultCachedGif model module.
 * @module model/InlineQueryResultCachedGif
 * @version 5.0.0
 */
class InlineQueryResultCachedGif {
    /**
     * Constructs a new <code>InlineQueryResultCachedGif</code>.
     * Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with specified content instead of the animation.
     * @alias module:model/InlineQueryResultCachedGif
     * @param gifFileId {String} A valid file identifier for the GIF file
     * @param id {String} Unique identifier for this result, 1-64 bytes
     * @param type {String} Type of the result, must be *gif*
     */
    constructor(gifFileId, id, type) { 
        
        InlineQueryResultCachedGif.initialize(this, gifFileId, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gifFileId, id, type) { 
        obj['gif_file_id'] = gifFileId;
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>InlineQueryResultCachedGif</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineQueryResultCachedGif} obj Optional instance to populate.
     * @return {module:model/InlineQueryResultCachedGif} The populated <code>InlineQueryResultCachedGif</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineQueryResultCachedGif();

            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('caption_entities')) {
                obj['caption_entities'] = ApiClient.convertToType(data['caption_entities'], [MessageEntity]);
            }
            if (data.hasOwnProperty('gif_file_id')) {
                obj['gif_file_id'] = ApiClient.convertToType(data['gif_file_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('input_message_content')) {
                obj['input_message_content'] = InputMessageContent.constructFromObject(data['input_message_content']);
            }
            if (data.hasOwnProperty('parse_mode')) {
                obj['parse_mode'] = ApiClient.convertToType(data['parse_mode'], 'String');
            }
            if (data.hasOwnProperty('reply_markup')) {
                obj['reply_markup'] = InlineKeyboardMarkup.constructFromObject(data['reply_markup']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InlineQueryResultCachedGif</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InlineQueryResultCachedGif</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InlineQueryResultCachedGif.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        if (data['caption_entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['caption_entities'])) {
                throw new Error("Expected the field `caption_entities` to be an array in the JSON data but got " + data['caption_entities']);
            }
            // validate the optional field `caption_entities` (array)
            for (const item of data['caption_entities']) {
                MessageEntity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['gif_file_id'] && !(typeof data['gif_file_id'] === 'string' || data['gif_file_id'] instanceof String)) {
            throw new Error("Expected the field `gif_file_id` to be a primitive type in the JSON string but got " + data['gif_file_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `input_message_content`
        if (data['input_message_content']) { // data not null
          InputMessageContent.validateJSON(data['input_message_content']);
        }
        // ensure the json data is a string
        if (data['parse_mode'] && !(typeof data['parse_mode'] === 'string' || data['parse_mode'] instanceof String)) {
            throw new Error("Expected the field `parse_mode` to be a primitive type in the JSON string but got " + data['parse_mode']);
        }
        // validate the optional field `reply_markup`
        if (data['reply_markup']) { // data not null
          InlineKeyboardMarkup.validateJSON(data['reply_markup']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

InlineQueryResultCachedGif.RequiredProperties = ["gif_file_id", "id", "type"];

/**
 * *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
 * @member {String} caption
 */
InlineQueryResultCachedGif.prototype['caption'] = undefined;

/**
 * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
 * @member {Array.<module:model/MessageEntity>} caption_entities
 */
InlineQueryResultCachedGif.prototype['caption_entities'] = undefined;

/**
 * A valid file identifier for the GIF file
 * @member {String} gif_file_id
 */
InlineQueryResultCachedGif.prototype['gif_file_id'] = undefined;

/**
 * Unique identifier for this result, 1-64 bytes
 * @member {String} id
 */
InlineQueryResultCachedGif.prototype['id'] = undefined;

/**
 * @member {module:model/InputMessageContent} input_message_content
 */
InlineQueryResultCachedGif.prototype['input_message_content'] = undefined;

/**
 * *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
 * @member {String} parse_mode
 */
InlineQueryResultCachedGif.prototype['parse_mode'] = undefined;

/**
 * @member {module:model/InlineKeyboardMarkup} reply_markup
 */
InlineQueryResultCachedGif.prototype['reply_markup'] = undefined;

/**
 * *Optional*. Title for the result
 * @member {String} title
 */
InlineQueryResultCachedGif.prototype['title'] = undefined;

/**
 * Type of the result, must be *gif*
 * @member {String} type
 */
InlineQueryResultCachedGif.prototype['type'] = undefined;






export default InlineQueryResultCachedGif;

