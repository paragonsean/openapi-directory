/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageEntity from './MessageEntity';

/**
 * The InputTextMessageContent model module.
 * @module model/InputTextMessageContent
 * @version 5.0.0
 */
class InputTextMessageContent {
    /**
     * Constructs a new <code>InputTextMessageContent</code>.
     * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.
     * @alias module:model/InputTextMessageContent
     * @param messageText {String} Text of the message to be sent, 1-4096 characters
     */
    constructor(messageText) { 
        
        InputTextMessageContent.initialize(this, messageText);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messageText) { 
        obj['message_text'] = messageText;
    }

    /**
     * Constructs a <code>InputTextMessageContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputTextMessageContent} obj Optional instance to populate.
     * @return {module:model/InputTextMessageContent} The populated <code>InputTextMessageContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputTextMessageContent();

            if (data.hasOwnProperty('disable_web_page_preview')) {
                obj['disable_web_page_preview'] = ApiClient.convertToType(data['disable_web_page_preview'], 'Boolean');
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], [MessageEntity]);
            }
            if (data.hasOwnProperty('message_text')) {
                obj['message_text'] = ApiClient.convertToType(data['message_text'], 'String');
            }
            if (data.hasOwnProperty('parse_mode')) {
                obj['parse_mode'] = ApiClient.convertToType(data['parse_mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputTextMessageContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputTextMessageContent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputTextMessageContent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entities'])) {
                throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
            }
            // validate the optional field `entities` (array)
            for (const item of data['entities']) {
                MessageEntity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['message_text'] && !(typeof data['message_text'] === 'string' || data['message_text'] instanceof String)) {
            throw new Error("Expected the field `message_text` to be a primitive type in the JSON string but got " + data['message_text']);
        }
        // ensure the json data is a string
        if (data['parse_mode'] && !(typeof data['parse_mode'] === 'string' || data['parse_mode'] instanceof String)) {
            throw new Error("Expected the field `parse_mode` to be a primitive type in the JSON string but got " + data['parse_mode']);
        }

        return true;
    }


}

InputTextMessageContent.RequiredProperties = ["message_text"];

/**
 * *Optional*. Disables link previews for links in the sent message
 * @member {Boolean} disable_web_page_preview
 */
InputTextMessageContent.prototype['disable_web_page_preview'] = undefined;

/**
 * *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\\_mode*
 * @member {Array.<module:model/MessageEntity>} entities
 */
InputTextMessageContent.prototype['entities'] = undefined;

/**
 * Text of the message to be sent, 1-4096 characters
 * @member {String} message_text
 */
InputTextMessageContent.prototype['message_text'] = undefined;

/**
 * *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
 * @member {String} parse_mode
 */
InputTextMessageContent.prototype['parse_mode'] = undefined;






export default InputTextMessageContent;

