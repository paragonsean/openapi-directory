/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Invoice model module.
 * @module model/Invoice
 * @version 5.0.0
 */
class Invoice {
    /**
     * Constructs a new <code>Invoice</code>.
     * This object contains basic information about an invoice.
     * @alias module:model/Invoice
     * @param currency {String} Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
     * @param description {String} Product description
     * @param startParameter {String} Unique bot deep-linking parameter that can be used to generate this invoice
     * @param title {String} Product name
     * @param totalAmount {Number} Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     */
    constructor(currency, description, startParameter, title, totalAmount) { 
        
        Invoice.initialize(this, currency, description, startParameter, title, totalAmount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, description, startParameter, title, totalAmount) { 
        obj['currency'] = currency;
        obj['description'] = description;
        obj['start_parameter'] = startParameter;
        obj['title'] = title;
        obj['total_amount'] = totalAmount;
    }

    /**
     * Constructs a <code>Invoice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Invoice} obj Optional instance to populate.
     * @return {module:model/Invoice} The populated <code>Invoice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Invoice();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('start_parameter')) {
                obj['start_parameter'] = ApiClient.convertToType(data['start_parameter'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('total_amount')) {
                obj['total_amount'] = ApiClient.convertToType(data['total_amount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Invoice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Invoice</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Invoice.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['start_parameter'] && !(typeof data['start_parameter'] === 'string' || data['start_parameter'] instanceof String)) {
            throw new Error("Expected the field `start_parameter` to be a primitive type in the JSON string but got " + data['start_parameter']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Invoice.RequiredProperties = ["currency", "description", "start_parameter", "title", "total_amount"];

/**
 * Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
 * @member {String} currency
 */
Invoice.prototype['currency'] = undefined;

/**
 * Product description
 * @member {String} description
 */
Invoice.prototype['description'] = undefined;

/**
 * Unique bot deep-linking parameter that can be used to generate this invoice
 * @member {String} start_parameter
 */
Invoice.prototype['start_parameter'] = undefined;

/**
 * Product name
 * @member {String} title
 */
Invoice.prototype['title'] = undefined;

/**
 * Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
 * @member {Number} total_amount
 */
Invoice.prototype['total_amount'] = undefined;






export default Invoice;

