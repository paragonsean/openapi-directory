/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The PollAnswer model module.
 * @module model/PollAnswer
 * @version 5.0.0
 */
class PollAnswer {
    /**
     * Constructs a new <code>PollAnswer</code>.
     * This object represents an answer of a user in a non-anonymous poll.
     * @alias module:model/PollAnswer
     * @param optionIds {Array.<Number>} 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
     * @param pollId {String} Unique poll identifier
     * @param user {module:model/User} 
     */
    constructor(optionIds, pollId, user) { 
        
        PollAnswer.initialize(this, optionIds, pollId, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, optionIds, pollId, user) { 
        obj['option_ids'] = optionIds;
        obj['poll_id'] = pollId;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>PollAnswer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PollAnswer} obj Optional instance to populate.
     * @return {module:model/PollAnswer} The populated <code>PollAnswer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PollAnswer();

            if (data.hasOwnProperty('option_ids')) {
                obj['option_ids'] = ApiClient.convertToType(data['option_ids'], ['Number']);
            }
            if (data.hasOwnProperty('poll_id')) {
                obj['poll_id'] = ApiClient.convertToType(data['poll_id'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PollAnswer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PollAnswer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PollAnswer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['option_ids'])) {
            throw new Error("Expected the field `option_ids` to be an array in the JSON data but got " + data['option_ids']);
        }
        // ensure the json data is a string
        if (data['poll_id'] && !(typeof data['poll_id'] === 'string' || data['poll_id'] instanceof String)) {
            throw new Error("Expected the field `poll_id` to be a primitive type in the JSON string but got " + data['poll_id']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

PollAnswer.RequiredProperties = ["option_ids", "poll_id", "user"];

/**
 * 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
 * @member {Array.<Number>} option_ids
 */
PollAnswer.prototype['option_ids'] = undefined;

/**
 * Unique poll identifier
 * @member {String} poll_id
 */
PollAnswer.prototype['poll_id'] = undefined;

/**
 * @member {module:model/User} user
 */
PollAnswer.prototype['user'] = undefined;






export default PollAnswer;

