/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageEntity from './MessageEntity';

/**
 * The InputMediaAnimation model module.
 * @module model/InputMediaAnimation
 * @version 5.0.0
 */
class InputMediaAnimation {
    /**
     * Constructs a new <code>InputMediaAnimation</code>.
     * Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
     * @alias module:model/InputMediaAnimation
     * @param media {String} File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\\_attach\\_name>” to upload a new one using multipart/form-data under <file\\_attach\\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @param type {String} Type of the result, must be *animation*
     */
    constructor(media, type) { 
        
        InputMediaAnimation.initialize(this, media, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, media, type) { 
        obj['media'] = media;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>InputMediaAnimation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputMediaAnimation} obj Optional instance to populate.
     * @return {module:model/InputMediaAnimation} The populated <code>InputMediaAnimation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputMediaAnimation();

            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('caption_entities')) {
                obj['caption_entities'] = ApiClient.convertToType(data['caption_entities'], [MessageEntity]);
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], 'String');
            }
            if (data.hasOwnProperty('parse_mode')) {
                obj['parse_mode'] = ApiClient.convertToType(data['parse_mode'], 'String');
            }
            if (data.hasOwnProperty('thumb')) {
                obj['thumb'] = ApiClient.convertToType(data['thumb'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputMediaAnimation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputMediaAnimation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputMediaAnimation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        if (data['caption_entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['caption_entities'])) {
                throw new Error("Expected the field `caption_entities` to be an array in the JSON data but got " + data['caption_entities']);
            }
            // validate the optional field `caption_entities` (array)
            for (const item of data['caption_entities']) {
                MessageEntity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['media'] && !(typeof data['media'] === 'string' || data['media'] instanceof String)) {
            throw new Error("Expected the field `media` to be a primitive type in the JSON string but got " + data['media']);
        }
        // ensure the json data is a string
        if (data['parse_mode'] && !(typeof data['parse_mode'] === 'string' || data['parse_mode'] instanceof String)) {
            throw new Error("Expected the field `parse_mode` to be a primitive type in the JSON string but got " + data['parse_mode']);
        }
        // ensure the json data is a string
        if (data['thumb'] && !(typeof data['thumb'] === 'string' || data['thumb'] instanceof String)) {
            throw new Error("Expected the field `thumb` to be a primitive type in the JSON string but got " + data['thumb']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

InputMediaAnimation.RequiredProperties = ["media", "type"];

/**
 * *Optional*. Caption of the animation to be sent, 0-1024 characters after entities parsing
 * @member {String} caption
 */
InputMediaAnimation.prototype['caption'] = undefined;

/**
 * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
 * @member {Array.<module:model/MessageEntity>} caption_entities
 */
InputMediaAnimation.prototype['caption_entities'] = undefined;

/**
 * *Optional*. Animation duration
 * @member {Number} duration
 */
InputMediaAnimation.prototype['duration'] = undefined;

/**
 * *Optional*. Animation height
 * @member {Number} height
 */
InputMediaAnimation.prototype['height'] = undefined;

/**
 * File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\\_attach\\_name>” to upload a new one using multipart/form-data under <file\\_attach\\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
 * @member {String} media
 */
InputMediaAnimation.prototype['media'] = undefined;

/**
 * *Optional*. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
 * @member {String} parse_mode
 */
InputMediaAnimation.prototype['parse_mode'] = undefined;

/**
 * @member {String} thumb
 */
InputMediaAnimation.prototype['thumb'] = undefined;

/**
 * Type of the result, must be *animation*
 * @member {String} type
 */
InputMediaAnimation.prototype['type'] = undefined;

/**
 * *Optional*. Animation width
 * @member {Number} width
 */
InputMediaAnimation.prototype['width'] = undefined;






export default InputMediaAnimation;

