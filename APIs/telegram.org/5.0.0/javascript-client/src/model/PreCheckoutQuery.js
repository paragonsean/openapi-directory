/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderInfo from './OrderInfo';
import User from './User';

/**
 * The PreCheckoutQuery model module.
 * @module model/PreCheckoutQuery
 * @version 5.0.0
 */
class PreCheckoutQuery {
    /**
     * Constructs a new <code>PreCheckoutQuery</code>.
     * This object contains information about an incoming pre-checkout query.
     * @alias module:model/PreCheckoutQuery
     * @param currency {String} Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
     * @param from {module:model/User} 
     * @param id {String} Unique query identifier
     * @param invoicePayload {String} Bot specified invoice payload
     * @param totalAmount {Number} Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     */
    constructor(currency, from, id, invoicePayload, totalAmount) { 
        
        PreCheckoutQuery.initialize(this, currency, from, id, invoicePayload, totalAmount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, from, id, invoicePayload, totalAmount) { 
        obj['currency'] = currency;
        obj['from'] = from;
        obj['id'] = id;
        obj['invoice_payload'] = invoicePayload;
        obj['total_amount'] = totalAmount;
    }

    /**
     * Constructs a <code>PreCheckoutQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PreCheckoutQuery} obj Optional instance to populate.
     * @return {module:model/PreCheckoutQuery} The populated <code>PreCheckoutQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PreCheckoutQuery();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = User.constructFromObject(data['from']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invoice_payload')) {
                obj['invoice_payload'] = ApiClient.convertToType(data['invoice_payload'], 'String');
            }
            if (data.hasOwnProperty('order_info')) {
                obj['order_info'] = OrderInfo.constructFromObject(data['order_info']);
            }
            if (data.hasOwnProperty('shipping_option_id')) {
                obj['shipping_option_id'] = ApiClient.convertToType(data['shipping_option_id'], 'String');
            }
            if (data.hasOwnProperty('total_amount')) {
                obj['total_amount'] = ApiClient.convertToType(data['total_amount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PreCheckoutQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PreCheckoutQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PreCheckoutQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
          User.validateJSON(data['from']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['invoice_payload'] && !(typeof data['invoice_payload'] === 'string' || data['invoice_payload'] instanceof String)) {
            throw new Error("Expected the field `invoice_payload` to be a primitive type in the JSON string but got " + data['invoice_payload']);
        }
        // validate the optional field `order_info`
        if (data['order_info']) { // data not null
          OrderInfo.validateJSON(data['order_info']);
        }
        // ensure the json data is a string
        if (data['shipping_option_id'] && !(typeof data['shipping_option_id'] === 'string' || data['shipping_option_id'] instanceof String)) {
            throw new Error("Expected the field `shipping_option_id` to be a primitive type in the JSON string but got " + data['shipping_option_id']);
        }

        return true;
    }


}

PreCheckoutQuery.RequiredProperties = ["currency", "from", "id", "invoice_payload", "total_amount"];

/**
 * Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
 * @member {String} currency
 */
PreCheckoutQuery.prototype['currency'] = undefined;

/**
 * @member {module:model/User} from
 */
PreCheckoutQuery.prototype['from'] = undefined;

/**
 * Unique query identifier
 * @member {String} id
 */
PreCheckoutQuery.prototype['id'] = undefined;

/**
 * Bot specified invoice payload
 * @member {String} invoice_payload
 */
PreCheckoutQuery.prototype['invoice_payload'] = undefined;

/**
 * @member {module:model/OrderInfo} order_info
 */
PreCheckoutQuery.prototype['order_info'] = undefined;

/**
 * *Optional*. Identifier of the shipping option chosen by the user
 * @member {String} shipping_option_id
 */
PreCheckoutQuery.prototype['shipping_option_id'] = undefined;

/**
 * Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
 * @member {Number} total_amount
 */
PreCheckoutQuery.prototype['total_amount'] = undefined;






export default PreCheckoutQuery;

