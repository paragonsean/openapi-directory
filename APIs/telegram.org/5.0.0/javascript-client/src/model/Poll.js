/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageEntity from './MessageEntity';
import PollOption from './PollOption';

/**
 * The Poll model module.
 * @module model/Poll
 * @version 5.0.0
 */
class Poll {
    /**
     * Constructs a new <code>Poll</code>.
     * This object contains information about a poll.
     * @alias module:model/Poll
     * @param allowsMultipleAnswers {Boolean} True, if the poll allows multiple answers
     * @param id {String} Unique poll identifier
     * @param isAnonymous {Boolean} True, if the poll is anonymous
     * @param isClosed {Boolean} True, if the poll is closed
     * @param options {Array.<module:model/PollOption>} List of poll options
     * @param question {String} Poll question, 1-255 characters
     * @param totalVoterCount {Number} Total number of users that voted in the poll
     * @param type {String} Poll type, currently can be “regular” or “quiz”
     */
    constructor(allowsMultipleAnswers, id, isAnonymous, isClosed, options, question, totalVoterCount, type) { 
        
        Poll.initialize(this, allowsMultipleAnswers, id, isAnonymous, isClosed, options, question, totalVoterCount, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowsMultipleAnswers, id, isAnonymous, isClosed, options, question, totalVoterCount, type) { 
        obj['allows_multiple_answers'] = allowsMultipleAnswers;
        obj['id'] = id;
        obj['is_anonymous'] = isAnonymous;
        obj['is_closed'] = isClosed;
        obj['options'] = options;
        obj['question'] = question;
        obj['total_voter_count'] = totalVoterCount;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Poll</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Poll} obj Optional instance to populate.
     * @return {module:model/Poll} The populated <code>Poll</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Poll();

            if (data.hasOwnProperty('allows_multiple_answers')) {
                obj['allows_multiple_answers'] = ApiClient.convertToType(data['allows_multiple_answers'], 'Boolean');
            }
            if (data.hasOwnProperty('close_date')) {
                obj['close_date'] = ApiClient.convertToType(data['close_date'], 'Number');
            }
            if (data.hasOwnProperty('correct_option_id')) {
                obj['correct_option_id'] = ApiClient.convertToType(data['correct_option_id'], 'Number');
            }
            if (data.hasOwnProperty('explanation')) {
                obj['explanation'] = ApiClient.convertToType(data['explanation'], 'String');
            }
            if (data.hasOwnProperty('explanation_entities')) {
                obj['explanation_entities'] = ApiClient.convertToType(data['explanation_entities'], [MessageEntity]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_anonymous')) {
                obj['is_anonymous'] = ApiClient.convertToType(data['is_anonymous'], 'Boolean');
            }
            if (data.hasOwnProperty('is_closed')) {
                obj['is_closed'] = ApiClient.convertToType(data['is_closed'], 'Boolean');
            }
            if (data.hasOwnProperty('open_period')) {
                obj['open_period'] = ApiClient.convertToType(data['open_period'], 'Number');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [PollOption]);
            }
            if (data.hasOwnProperty('question')) {
                obj['question'] = ApiClient.convertToType(data['question'], 'String');
            }
            if (data.hasOwnProperty('total_voter_count')) {
                obj['total_voter_count'] = ApiClient.convertToType(data['total_voter_count'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Poll</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Poll</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Poll.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['explanation'] && !(typeof data['explanation'] === 'string' || data['explanation'] instanceof String)) {
            throw new Error("Expected the field `explanation` to be a primitive type in the JSON string but got " + data['explanation']);
        }
        if (data['explanation_entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['explanation_entities'])) {
                throw new Error("Expected the field `explanation_entities` to be an array in the JSON data but got " + data['explanation_entities']);
            }
            // validate the optional field `explanation_entities` (array)
            for (const item of data['explanation_entities']) {
                MessageEntity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                PollOption.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['question'] && !(typeof data['question'] === 'string' || data['question'] instanceof String)) {
            throw new Error("Expected the field `question` to be a primitive type in the JSON string but got " + data['question']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Poll.RequiredProperties = ["allows_multiple_answers", "id", "is_anonymous", "is_closed", "options", "question", "total_voter_count", "type"];

/**
 * True, if the poll allows multiple answers
 * @member {Boolean} allows_multiple_answers
 */
Poll.prototype['allows_multiple_answers'] = undefined;

/**
 * *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed
 * @member {Number} close_date
 */
Poll.prototype['close_date'] = undefined;

/**
 * *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
 * @member {Number} correct_option_id
 */
Poll.prototype['correct_option_id'] = undefined;

/**
 * *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
 * @member {String} explanation
 */
Poll.prototype['explanation'] = undefined;

/**
 * *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*
 * @member {Array.<module:model/MessageEntity>} explanation_entities
 */
Poll.prototype['explanation_entities'] = undefined;

/**
 * Unique poll identifier
 * @member {String} id
 */
Poll.prototype['id'] = undefined;

/**
 * True, if the poll is anonymous
 * @member {Boolean} is_anonymous
 */
Poll.prototype['is_anonymous'] = undefined;

/**
 * True, if the poll is closed
 * @member {Boolean} is_closed
 */
Poll.prototype['is_closed'] = undefined;

/**
 * *Optional*. Amount of time in seconds the poll will be active after creation
 * @member {Number} open_period
 */
Poll.prototype['open_period'] = undefined;

/**
 * List of poll options
 * @member {Array.<module:model/PollOption>} options
 */
Poll.prototype['options'] = undefined;

/**
 * Poll question, 1-255 characters
 * @member {String} question
 */
Poll.prototype['question'] = undefined;

/**
 * Total number of users that voted in the poll
 * @member {Number} total_voter_count
 */
Poll.prototype['total_voter_count'] = undefined;

/**
 * Poll type, currently can be “regular” or “quiz”
 * @member {String} type
 */
Poll.prototype['type'] = undefined;






export default Poll;

