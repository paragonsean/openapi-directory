/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChatPhoto model module.
 * @module model/ChatPhoto
 * @version 5.0.0
 */
class ChatPhoto {
    /**
     * Constructs a new <code>ChatPhoto</code>.
     * This object represents a chat photo.
     * @alias module:model/ChatPhoto
     * @param bigFileId {String} File identifier of big (640x640) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.
     * @param bigFileUniqueId {String} Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     * @param smallFileId {String} File identifier of small (160x160) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.
     * @param smallFileUniqueId {String} Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    constructor(bigFileId, bigFileUniqueId, smallFileId, smallFileUniqueId) { 
        
        ChatPhoto.initialize(this, bigFileId, bigFileUniqueId, smallFileId, smallFileUniqueId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bigFileId, bigFileUniqueId, smallFileId, smallFileUniqueId) { 
        obj['big_file_id'] = bigFileId;
        obj['big_file_unique_id'] = bigFileUniqueId;
        obj['small_file_id'] = smallFileId;
        obj['small_file_unique_id'] = smallFileUniqueId;
    }

    /**
     * Constructs a <code>ChatPhoto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatPhoto} obj Optional instance to populate.
     * @return {module:model/ChatPhoto} The populated <code>ChatPhoto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatPhoto();

            if (data.hasOwnProperty('big_file_id')) {
                obj['big_file_id'] = ApiClient.convertToType(data['big_file_id'], 'String');
            }
            if (data.hasOwnProperty('big_file_unique_id')) {
                obj['big_file_unique_id'] = ApiClient.convertToType(data['big_file_unique_id'], 'String');
            }
            if (data.hasOwnProperty('small_file_id')) {
                obj['small_file_id'] = ApiClient.convertToType(data['small_file_id'], 'String');
            }
            if (data.hasOwnProperty('small_file_unique_id')) {
                obj['small_file_unique_id'] = ApiClient.convertToType(data['small_file_unique_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatPhoto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatPhoto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatPhoto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['big_file_id'] && !(typeof data['big_file_id'] === 'string' || data['big_file_id'] instanceof String)) {
            throw new Error("Expected the field `big_file_id` to be a primitive type in the JSON string but got " + data['big_file_id']);
        }
        // ensure the json data is a string
        if (data['big_file_unique_id'] && !(typeof data['big_file_unique_id'] === 'string' || data['big_file_unique_id'] instanceof String)) {
            throw new Error("Expected the field `big_file_unique_id` to be a primitive type in the JSON string but got " + data['big_file_unique_id']);
        }
        // ensure the json data is a string
        if (data['small_file_id'] && !(typeof data['small_file_id'] === 'string' || data['small_file_id'] instanceof String)) {
            throw new Error("Expected the field `small_file_id` to be a primitive type in the JSON string but got " + data['small_file_id']);
        }
        // ensure the json data is a string
        if (data['small_file_unique_id'] && !(typeof data['small_file_unique_id'] === 'string' || data['small_file_unique_id'] instanceof String)) {
            throw new Error("Expected the field `small_file_unique_id` to be a primitive type in the JSON string but got " + data['small_file_unique_id']);
        }

        return true;
    }


}

ChatPhoto.RequiredProperties = ["big_file_id", "big_file_unique_id", "small_file_id", "small_file_unique_id"];

/**
 * File identifier of big (640x640) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.
 * @member {String} big_file_id
 */
ChatPhoto.prototype['big_file_id'] = undefined;

/**
 * Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
 * @member {String} big_file_unique_id
 */
ChatPhoto.prototype['big_file_unique_id'] = undefined;

/**
 * File identifier of small (160x160) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.
 * @member {String} small_file_id
 */
ChatPhoto.prototype['small_file_id'] = undefined;

/**
 * Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
 * @member {String} small_file_unique_id
 */
ChatPhoto.prototype['small_file_unique_id'] = undefined;






export default ChatPhoto;

