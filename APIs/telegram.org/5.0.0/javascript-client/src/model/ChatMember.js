/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The ChatMember model module.
 * @module model/ChatMember
 * @version 5.0.0
 */
class ChatMember {
    /**
     * Constructs a new <code>ChatMember</code>.
     * This object contains information about one member of a chat.
     * @alias module:model/ChatMember
     * @param status {module:model/ChatMember.StatusEnum} The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
     * @param user {module:model/User} 
     */
    constructor(status, user) { 
        
        ChatMember.initialize(this, status, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, user) { 
        obj['status'] = status;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>ChatMember</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatMember} obj Optional instance to populate.
     * @return {module:model/ChatMember} The populated <code>ChatMember</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatMember();

            if (data.hasOwnProperty('can_add_web_page_previews')) {
                obj['can_add_web_page_previews'] = ApiClient.convertToType(data['can_add_web_page_previews'], 'Boolean');
            }
            if (data.hasOwnProperty('can_be_edited')) {
                obj['can_be_edited'] = ApiClient.convertToType(data['can_be_edited'], 'Boolean');
            }
            if (data.hasOwnProperty('can_change_info')) {
                obj['can_change_info'] = ApiClient.convertToType(data['can_change_info'], 'Boolean');
            }
            if (data.hasOwnProperty('can_delete_messages')) {
                obj['can_delete_messages'] = ApiClient.convertToType(data['can_delete_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_edit_messages')) {
                obj['can_edit_messages'] = ApiClient.convertToType(data['can_edit_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_invite_users')) {
                obj['can_invite_users'] = ApiClient.convertToType(data['can_invite_users'], 'Boolean');
            }
            if (data.hasOwnProperty('can_pin_messages')) {
                obj['can_pin_messages'] = ApiClient.convertToType(data['can_pin_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_post_messages')) {
                obj['can_post_messages'] = ApiClient.convertToType(data['can_post_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_promote_members')) {
                obj['can_promote_members'] = ApiClient.convertToType(data['can_promote_members'], 'Boolean');
            }
            if (data.hasOwnProperty('can_restrict_members')) {
                obj['can_restrict_members'] = ApiClient.convertToType(data['can_restrict_members'], 'Boolean');
            }
            if (data.hasOwnProperty('can_send_media_messages')) {
                obj['can_send_media_messages'] = ApiClient.convertToType(data['can_send_media_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_send_messages')) {
                obj['can_send_messages'] = ApiClient.convertToType(data['can_send_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_send_other_messages')) {
                obj['can_send_other_messages'] = ApiClient.convertToType(data['can_send_other_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_send_polls')) {
                obj['can_send_polls'] = ApiClient.convertToType(data['can_send_polls'], 'Boolean');
            }
            if (data.hasOwnProperty('custom_title')) {
                obj['custom_title'] = ApiClient.convertToType(data['custom_title'], 'String');
            }
            if (data.hasOwnProperty('is_anonymous')) {
                obj['is_anonymous'] = ApiClient.convertToType(data['is_anonymous'], 'Boolean');
            }
            if (data.hasOwnProperty('is_member')) {
                obj['is_member'] = ApiClient.convertToType(data['is_member'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('until_date')) {
                obj['until_date'] = ApiClient.convertToType(data['until_date'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatMember</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatMember</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatMember.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['custom_title'] && !(typeof data['custom_title'] === 'string' || data['custom_title'] instanceof String)) {
            throw new Error("Expected the field `custom_title` to be a primitive type in the JSON string but got " + data['custom_title']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

ChatMember.RequiredProperties = ["status", "user"];

/**
 * *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages
 * @member {Boolean} can_add_web_page_previews
 */
ChatMember.prototype['can_add_web_page_previews'] = undefined;

/**
 * *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
 * @member {Boolean} can_be_edited
 */
ChatMember.prototype['can_be_edited'] = undefined;

/**
 * *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
 * @member {Boolean} can_change_info
 */
ChatMember.prototype['can_change_info'] = undefined;

/**
 * *Optional*. Administrators only. True, if the administrator can delete messages of other users
 * @member {Boolean} can_delete_messages
 */
ChatMember.prototype['can_delete_messages'] = undefined;

/**
 * *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
 * @member {Boolean} can_edit_messages
 */
ChatMember.prototype['can_edit_messages'] = undefined;

/**
 * *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
 * @member {Boolean} can_invite_users
 */
ChatMember.prototype['can_invite_users'] = undefined;

/**
 * *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
 * @member {Boolean} can_pin_messages
 */
ChatMember.prototype['can_pin_messages'] = undefined;

/**
 * *Optional*. Administrators only. True, if the administrator can post in the channel; channels only
 * @member {Boolean} can_post_messages
 */
ChatMember.prototype['can_post_messages'] = undefined;

/**
 * *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
 * @member {Boolean} can_promote_members
 */
ChatMember.prototype['can_promote_members'] = undefined;

/**
 * *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members
 * @member {Boolean} can_restrict_members
 */
ChatMember.prototype['can_restrict_members'] = undefined;

/**
 * *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
 * @member {Boolean} can_send_media_messages
 */
ChatMember.prototype['can_send_media_messages'] = undefined;

/**
 * *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
 * @member {Boolean} can_send_messages
 */
ChatMember.prototype['can_send_messages'] = undefined;

/**
 * *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
 * @member {Boolean} can_send_other_messages
 */
ChatMember.prototype['can_send_other_messages'] = undefined;

/**
 * *Optional*. Restricted only. True, if the user is allowed to send polls
 * @member {Boolean} can_send_polls
 */
ChatMember.prototype['can_send_polls'] = undefined;

/**
 * *Optional*. Owner and administrators only. Custom title for this user
 * @member {String} custom_title
 */
ChatMember.prototype['custom_title'] = undefined;

/**
 * *Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden
 * @member {Boolean} is_anonymous
 */
ChatMember.prototype['is_anonymous'] = undefined;

/**
 * *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request
 * @member {Boolean} is_member
 */
ChatMember.prototype['is_member'] = undefined;

/**
 * The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
 * @member {module:model/ChatMember.StatusEnum} status
 */
ChatMember.prototype['status'] = undefined;

/**
 * *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
 * @member {Number} until_date
 */
ChatMember.prototype['until_date'] = undefined;

/**
 * @member {module:model/User} user
 */
ChatMember.prototype['user'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ChatMember['StatusEnum'] = {

    /**
     * value: "creator"
     * @const
     */
    "creator": "creator",

    /**
     * value: "administrator"
     * @const
     */
    "administrator": "administrator",

    /**
     * value: "member"
     * @const
     */
    "member": "member",

    /**
     * value: "restricted"
     * @const
     */
    "restricted": "restricted",

    /**
     * value: "left"
     * @const
     */
    "left": "left",

    /**
     * value: "kicked"
     * @const
     */
    "kicked": "kicked"
};



export default ChatMember;

