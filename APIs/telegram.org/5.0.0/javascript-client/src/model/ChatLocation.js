/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';

/**
 * The ChatLocation model module.
 * @module model/ChatLocation
 * @version 5.0.0
 */
class ChatLocation {
    /**
     * Constructs a new <code>ChatLocation</code>.
     * Represents a location to which a chat is connected.
     * @alias module:model/ChatLocation
     * @param address {String} Location address; 1-64 characters, as defined by the chat owner
     * @param location {module:model/Location} 
     */
    constructor(address, location) { 
        
        ChatLocation.initialize(this, address, location);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, location) { 
        obj['address'] = address;
        obj['location'] = location;
    }

    /**
     * Constructs a <code>ChatLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatLocation} obj Optional instance to populate.
     * @return {module:model/ChatLocation} The populated <code>ChatLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatLocation();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatLocation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatLocation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }

        return true;
    }


}

ChatLocation.RequiredProperties = ["address", "location"];

/**
 * Location address; 1-64 characters, as defined by the chat owner
 * @member {String} address
 */
ChatLocation.prototype['address'] = undefined;

/**
 * @member {module:model/Location} location
 */
ChatLocation.prototype['location'] = undefined;






export default ChatLocation;

