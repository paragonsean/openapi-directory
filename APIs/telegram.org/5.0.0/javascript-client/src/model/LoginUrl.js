/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoginUrl model module.
 * @module model/LoginUrl
 * @version 5.0.0
 */
class LoginUrl {
    /**
     * Constructs a new <code>LoginUrl</code>.
     * This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:  Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).  Sample bot: [@discussbot](https://t.me/discussbot)
     * @alias module:model/LoginUrl
     * @param url {String} An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).    **NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).
     */
    constructor(url) { 
        
        LoginUrl.initialize(this, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url) { 
        obj['url'] = url;
    }

    /**
     * Constructs a <code>LoginUrl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoginUrl} obj Optional instance to populate.
     * @return {module:model/LoginUrl} The populated <code>LoginUrl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoginUrl();

            if (data.hasOwnProperty('bot_username')) {
                obj['bot_username'] = ApiClient.convertToType(data['bot_username'], 'String');
            }
            if (data.hasOwnProperty('forward_text')) {
                obj['forward_text'] = ApiClient.convertToType(data['forward_text'], 'String');
            }
            if (data.hasOwnProperty('request_write_access')) {
                obj['request_write_access'] = ApiClient.convertToType(data['request_write_access'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoginUrl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoginUrl</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoginUrl.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bot_username'] && !(typeof data['bot_username'] === 'string' || data['bot_username'] instanceof String)) {
            throw new Error("Expected the field `bot_username` to be a primitive type in the JSON string but got " + data['bot_username']);
        }
        // ensure the json data is a string
        if (data['forward_text'] && !(typeof data['forward_text'] === 'string' || data['forward_text'] instanceof String)) {
            throw new Error("Expected the field `forward_text` to be a primitive type in the JSON string but got " + data['forward_text']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

LoginUrl.RequiredProperties = ["url"];

/**
 * *Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The *url*'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.
 * @member {String} bot_username
 */
LoginUrl.prototype['bot_username'] = undefined;

/**
 * *Optional*. New text of the button in forwarded messages.
 * @member {String} forward_text
 */
LoginUrl.prototype['forward_text'] = undefined;

/**
 * *Optional*. Pass True to request the permission for your bot to send messages to the user.
 * @member {Boolean} request_write_access
 */
LoginUrl.prototype['request_write_access'] = undefined;

/**
 * An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).    **NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).
 * @member {String} url
 */
LoginUrl.prototype['url'] = undefined;






export default LoginUrl;

