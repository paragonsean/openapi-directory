/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';
import User from './User';

/**
 * The InlineQuery model module.
 * @module model/InlineQuery
 * @version 5.0.0
 */
class InlineQuery {
    /**
     * Constructs a new <code>InlineQuery</code>.
     * This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
     * @alias module:model/InlineQuery
     * @param from {module:model/User} 
     * @param id {String} Unique identifier for this query
     * @param offset {String} Offset of the results to be returned, can be controlled by the bot
     * @param query {String} Text of the query (up to 256 characters)
     */
    constructor(from, id, offset, query) { 
        
        InlineQuery.initialize(this, from, id, offset, query);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from, id, offset, query) { 
        obj['from'] = from;
        obj['id'] = id;
        obj['offset'] = offset;
        obj['query'] = query;
    }

    /**
     * Constructs a <code>InlineQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineQuery} obj Optional instance to populate.
     * @return {module:model/InlineQuery} The populated <code>InlineQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineQuery();

            if (data.hasOwnProperty('from')) {
                obj['from'] = User.constructFromObject(data['from']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InlineQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InlineQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InlineQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
          User.validateJSON(data['from']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['offset'] && !(typeof data['offset'] === 'string' || data['offset'] instanceof String)) {
            throw new Error("Expected the field `offset` to be a primitive type in the JSON string but got " + data['offset']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }

        return true;
    }


}

InlineQuery.RequiredProperties = ["from", "id", "offset", "query"];

/**
 * @member {module:model/User} from
 */
InlineQuery.prototype['from'] = undefined;

/**
 * Unique identifier for this query
 * @member {String} id
 */
InlineQuery.prototype['id'] = undefined;

/**
 * @member {module:model/Location} location
 */
InlineQuery.prototype['location'] = undefined;

/**
 * Offset of the results to be returned, can be controlled by the bot
 * @member {String} offset
 */
InlineQuery.prototype['offset'] = undefined;

/**
 * Text of the query (up to 256 characters)
 * @member {String} query
 */
InlineQuery.prototype['query'] = undefined;






export default InlineQuery;

