/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderInfo from './OrderInfo';

/**
 * The SuccessfulPayment model module.
 * @module model/SuccessfulPayment
 * @version 5.0.0
 */
class SuccessfulPayment {
    /**
     * Constructs a new <code>SuccessfulPayment</code>.
     * This object contains basic information about a successful payment.
     * @alias module:model/SuccessfulPayment
     * @param currency {String} Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
     * @param invoicePayload {String} Bot specified invoice payload
     * @param providerPaymentChargeId {String} Provider payment identifier
     * @param telegramPaymentChargeId {String} Telegram payment identifier
     * @param totalAmount {Number} Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     */
    constructor(currency, invoicePayload, providerPaymentChargeId, telegramPaymentChargeId, totalAmount) { 
        
        SuccessfulPayment.initialize(this, currency, invoicePayload, providerPaymentChargeId, telegramPaymentChargeId, totalAmount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, invoicePayload, providerPaymentChargeId, telegramPaymentChargeId, totalAmount) { 
        obj['currency'] = currency;
        obj['invoice_payload'] = invoicePayload;
        obj['provider_payment_charge_id'] = providerPaymentChargeId;
        obj['telegram_payment_charge_id'] = telegramPaymentChargeId;
        obj['total_amount'] = totalAmount;
    }

    /**
     * Constructs a <code>SuccessfulPayment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuccessfulPayment} obj Optional instance to populate.
     * @return {module:model/SuccessfulPayment} The populated <code>SuccessfulPayment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuccessfulPayment();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('invoice_payload')) {
                obj['invoice_payload'] = ApiClient.convertToType(data['invoice_payload'], 'String');
            }
            if (data.hasOwnProperty('order_info')) {
                obj['order_info'] = OrderInfo.constructFromObject(data['order_info']);
            }
            if (data.hasOwnProperty('provider_payment_charge_id')) {
                obj['provider_payment_charge_id'] = ApiClient.convertToType(data['provider_payment_charge_id'], 'String');
            }
            if (data.hasOwnProperty('shipping_option_id')) {
                obj['shipping_option_id'] = ApiClient.convertToType(data['shipping_option_id'], 'String');
            }
            if (data.hasOwnProperty('telegram_payment_charge_id')) {
                obj['telegram_payment_charge_id'] = ApiClient.convertToType(data['telegram_payment_charge_id'], 'String');
            }
            if (data.hasOwnProperty('total_amount')) {
                obj['total_amount'] = ApiClient.convertToType(data['total_amount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuccessfulPayment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuccessfulPayment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SuccessfulPayment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['invoice_payload'] && !(typeof data['invoice_payload'] === 'string' || data['invoice_payload'] instanceof String)) {
            throw new Error("Expected the field `invoice_payload` to be a primitive type in the JSON string but got " + data['invoice_payload']);
        }
        // validate the optional field `order_info`
        if (data['order_info']) { // data not null
          OrderInfo.validateJSON(data['order_info']);
        }
        // ensure the json data is a string
        if (data['provider_payment_charge_id'] && !(typeof data['provider_payment_charge_id'] === 'string' || data['provider_payment_charge_id'] instanceof String)) {
            throw new Error("Expected the field `provider_payment_charge_id` to be a primitive type in the JSON string but got " + data['provider_payment_charge_id']);
        }
        // ensure the json data is a string
        if (data['shipping_option_id'] && !(typeof data['shipping_option_id'] === 'string' || data['shipping_option_id'] instanceof String)) {
            throw new Error("Expected the field `shipping_option_id` to be a primitive type in the JSON string but got " + data['shipping_option_id']);
        }
        // ensure the json data is a string
        if (data['telegram_payment_charge_id'] && !(typeof data['telegram_payment_charge_id'] === 'string' || data['telegram_payment_charge_id'] instanceof String)) {
            throw new Error("Expected the field `telegram_payment_charge_id` to be a primitive type in the JSON string but got " + data['telegram_payment_charge_id']);
        }

        return true;
    }


}

SuccessfulPayment.RequiredProperties = ["currency", "invoice_payload", "provider_payment_charge_id", "telegram_payment_charge_id", "total_amount"];

/**
 * Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
 * @member {String} currency
 */
SuccessfulPayment.prototype['currency'] = undefined;

/**
 * Bot specified invoice payload
 * @member {String} invoice_payload
 */
SuccessfulPayment.prototype['invoice_payload'] = undefined;

/**
 * @member {module:model/OrderInfo} order_info
 */
SuccessfulPayment.prototype['order_info'] = undefined;

/**
 * Provider payment identifier
 * @member {String} provider_payment_charge_id
 */
SuccessfulPayment.prototype['provider_payment_charge_id'] = undefined;

/**
 * *Optional*. Identifier of the shipping option chosen by the user
 * @member {String} shipping_option_id
 */
SuccessfulPayment.prototype['shipping_option_id'] = undefined;

/**
 * Telegram payment identifier
 * @member {String} telegram_payment_charge_id
 */
SuccessfulPayment.prototype['telegram_payment_charge_id'] = undefined;

/**
 * Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
 * @member {Number} total_amount
 */
SuccessfulPayment.prototype['total_amount'] = undefined;






export default SuccessfulPayment;

