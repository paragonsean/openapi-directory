/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyboardButton from './KeyboardButton';

/**
 * The ReplyKeyboardMarkup model module.
 * @module model/ReplyKeyboardMarkup
 * @version 5.0.0
 */
class ReplyKeyboardMarkup {
    /**
     * Constructs a new <code>ReplyKeyboardMarkup</code>.
     * This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
     * @alias module:model/ReplyKeyboardMarkup
     * @param keyboard {Array.<Array.<module:model/KeyboardButton>>} Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
     */
    constructor(keyboard) { 
        
        ReplyKeyboardMarkup.initialize(this, keyboard);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyboard) { 
        obj['keyboard'] = keyboard;
        obj['one_time_keyboard'] = false;
        obj['resize_keyboard'] = false;
    }

    /**
     * Constructs a <code>ReplyKeyboardMarkup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplyKeyboardMarkup} obj Optional instance to populate.
     * @return {module:model/ReplyKeyboardMarkup} The populated <code>ReplyKeyboardMarkup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplyKeyboardMarkup();

            if (data.hasOwnProperty('keyboard')) {
                obj['keyboard'] = ApiClient.convertToType(data['keyboard'], [[KeyboardButton]]);
            }
            if (data.hasOwnProperty('one_time_keyboard')) {
                obj['one_time_keyboard'] = ApiClient.convertToType(data['one_time_keyboard'], 'Boolean');
            }
            if (data.hasOwnProperty('resize_keyboard')) {
                obj['resize_keyboard'] = ApiClient.convertToType(data['resize_keyboard'], 'Boolean');
            }
            if (data.hasOwnProperty('selective')) {
                obj['selective'] = ApiClient.convertToType(data['selective'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplyKeyboardMarkup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplyKeyboardMarkup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReplyKeyboardMarkup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keyboard'])) {
            throw new Error("Expected the field `keyboard` to be an array in the JSON data but got " + data['keyboard']);
        }

        return true;
    }


}

ReplyKeyboardMarkup.RequiredProperties = ["keyboard"];

/**
 * Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
 * @member {Array.<Array.<module:model/KeyboardButton>>} keyboard
 */
ReplyKeyboardMarkup.prototype['keyboard'] = undefined;

/**
 * *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat â€“ the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
 * @member {Boolean} one_time_keyboard
 * @default false
 */
ReplyKeyboardMarkup.prototype['one_time_keyboard'] = false;

/**
 * *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.
 * @member {Boolean} resize_keyboard
 * @default false
 */
ReplyKeyboardMarkup.prototype['resize_keyboard'] = false;

/**
 * *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.    *Example:* A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.
 * @member {Boolean} selective
 */
ReplyKeyboardMarkup.prototype['selective'] = undefined;






export default ReplyKeyboardMarkup;

