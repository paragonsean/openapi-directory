/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CopyMessagePostRequestChatId from './CopyMessagePostRequestChatId';

/**
 * The SendChatActionPostRequest model module.
 * @module model/SendChatActionPostRequest
 * @version 5.0.0
 */
class SendChatActionPostRequest {
    /**
     * Constructs a new <code>SendChatActionPostRequest</code>.
     * @alias module:model/SendChatActionPostRequest
     * @param action {String} Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\\_video* or *upload\\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\\_voice* or *upload\\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\\_video\\_note* or *upload\\_video\\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
     * @param chatId {module:model/CopyMessagePostRequestChatId} 
     */
    constructor(action, chatId) { 
        
        SendChatActionPostRequest.initialize(this, action, chatId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, chatId) { 
        obj['action'] = action;
        obj['chat_id'] = chatId;
    }

    /**
     * Constructs a <code>SendChatActionPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendChatActionPostRequest} obj Optional instance to populate.
     * @return {module:model/SendChatActionPostRequest} The populated <code>SendChatActionPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendChatActionPostRequest();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('chat_id')) {
                obj['chat_id'] = CopyMessagePostRequestChatId.constructFromObject(data['chat_id']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendChatActionPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendChatActionPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendChatActionPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // validate the optional field `chat_id`
        if (data['chat_id']) { // data not null
          CopyMessagePostRequestChatId.validateJSON(data['chat_id']);
        }

        return true;
    }


}

SendChatActionPostRequest.RequiredProperties = ["action", "chat_id"];

/**
 * Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\\_video* or *upload\\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\\_voice* or *upload\\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\\_video\\_note* or *upload\\_video\\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
 * @member {String} action
 */
SendChatActionPostRequest.prototype['action'] = undefined;

/**
 * @member {module:model/CopyMessagePostRequestChatId} chat_id
 */
SendChatActionPostRequest.prototype['chat_id'] = undefined;






export default SendChatActionPostRequest;

