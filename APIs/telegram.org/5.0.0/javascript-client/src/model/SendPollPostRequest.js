/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CopyMessagePostRequestChatId from './CopyMessagePostRequestChatId';
import CopyMessagePostRequestReplyMarkup from './CopyMessagePostRequestReplyMarkup';
import MessageEntity from './MessageEntity';

/**
 * The SendPollPostRequest model module.
 * @module model/SendPollPostRequest
 * @version 5.0.0
 */
class SendPollPostRequest {
    /**
     * Constructs a new <code>SendPollPostRequest</code>.
     * @alias module:model/SendPollPostRequest
     * @param chatId {module:model/CopyMessagePostRequestChatId} 
     * @param options {Array.<String>} A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
     * @param question {String} Poll question, 1-300 characters
     */
    constructor(chatId, options, question) { 
        
        SendPollPostRequest.initialize(this, chatId, options, question);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chatId, options, question) { 
        obj['chat_id'] = chatId;
        obj['options'] = options;
        obj['question'] = question;
    }

    /**
     * Constructs a <code>SendPollPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendPollPostRequest} obj Optional instance to populate.
     * @return {module:model/SendPollPostRequest} The populated <code>SendPollPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendPollPostRequest();

            if (data.hasOwnProperty('allow_sending_without_reply')) {
                obj['allow_sending_without_reply'] = ApiClient.convertToType(data['allow_sending_without_reply'], 'Boolean');
            }
            if (data.hasOwnProperty('allows_multiple_answers')) {
                obj['allows_multiple_answers'] = ApiClient.convertToType(data['allows_multiple_answers'], 'Boolean');
            }
            if (data.hasOwnProperty('chat_id')) {
                obj['chat_id'] = CopyMessagePostRequestChatId.constructFromObject(data['chat_id']);
            }
            if (data.hasOwnProperty('close_date')) {
                obj['close_date'] = ApiClient.convertToType(data['close_date'], 'Number');
            }
            if (data.hasOwnProperty('correct_option_id')) {
                obj['correct_option_id'] = ApiClient.convertToType(data['correct_option_id'], 'Number');
            }
            if (data.hasOwnProperty('disable_notification')) {
                obj['disable_notification'] = ApiClient.convertToType(data['disable_notification'], 'Boolean');
            }
            if (data.hasOwnProperty('explanation')) {
                obj['explanation'] = ApiClient.convertToType(data['explanation'], 'String');
            }
            if (data.hasOwnProperty('explanation_entities')) {
                obj['explanation_entities'] = ApiClient.convertToType(data['explanation_entities'], [MessageEntity]);
            }
            if (data.hasOwnProperty('explanation_parse_mode')) {
                obj['explanation_parse_mode'] = ApiClient.convertToType(data['explanation_parse_mode'], 'String');
            }
            if (data.hasOwnProperty('is_anonymous')) {
                obj['is_anonymous'] = ApiClient.convertToType(data['is_anonymous'], 'Boolean');
            }
            if (data.hasOwnProperty('is_closed')) {
                obj['is_closed'] = ApiClient.convertToType(data['is_closed'], 'Boolean');
            }
            if (data.hasOwnProperty('open_period')) {
                obj['open_period'] = ApiClient.convertToType(data['open_period'], 'Number');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], ['String']);
            }
            if (data.hasOwnProperty('question')) {
                obj['question'] = ApiClient.convertToType(data['question'], 'String');
            }
            if (data.hasOwnProperty('reply_markup')) {
                obj['reply_markup'] = CopyMessagePostRequestReplyMarkup.constructFromObject(data['reply_markup']);
            }
            if (data.hasOwnProperty('reply_to_message_id')) {
                obj['reply_to_message_id'] = ApiClient.convertToType(data['reply_to_message_id'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendPollPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendPollPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendPollPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `chat_id`
        if (data['chat_id']) { // data not null
          CopyMessagePostRequestChatId.validateJSON(data['chat_id']);
        }
        // ensure the json data is a string
        if (data['explanation'] && !(typeof data['explanation'] === 'string' || data['explanation'] instanceof String)) {
            throw new Error("Expected the field `explanation` to be a primitive type in the JSON string but got " + data['explanation']);
        }
        if (data['explanation_entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['explanation_entities'])) {
                throw new Error("Expected the field `explanation_entities` to be an array in the JSON data but got " + data['explanation_entities']);
            }
            // validate the optional field `explanation_entities` (array)
            for (const item of data['explanation_entities']) {
                MessageEntity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['explanation_parse_mode'] && !(typeof data['explanation_parse_mode'] === 'string' || data['explanation_parse_mode'] instanceof String)) {
            throw new Error("Expected the field `explanation_parse_mode` to be a primitive type in the JSON string but got " + data['explanation_parse_mode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['options'])) {
            throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
        }
        // ensure the json data is a string
        if (data['question'] && !(typeof data['question'] === 'string' || data['question'] instanceof String)) {
            throw new Error("Expected the field `question` to be a primitive type in the JSON string but got " + data['question']);
        }
        // validate the optional field `reply_markup`
        if (data['reply_markup']) { // data not null
          CopyMessagePostRequestReplyMarkup.validateJSON(data['reply_markup']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SendPollPostRequest.RequiredProperties = ["chat_id", "options", "question"];

/**
 * Pass *True*, if the message should be sent even if the specified replied-to message is not found
 * @member {Boolean} allow_sending_without_reply
 */
SendPollPostRequest.prototype['allow_sending_without_reply'] = undefined;

/**
 * True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
 * @member {Boolean} allows_multiple_answers
 */
SendPollPostRequest.prototype['allows_multiple_answers'] = undefined;

/**
 * @member {module:model/CopyMessagePostRequestChatId} chat_id
 */
SendPollPostRequest.prototype['chat_id'] = undefined;

/**
 * Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\\_period*.
 * @member {Number} close_date
 */
SendPollPostRequest.prototype['close_date'] = undefined;

/**
 * 0-based identifier of the correct answer option, required for polls in quiz mode
 * @member {Number} correct_option_id
 */
SendPollPostRequest.prototype['correct_option_id'] = undefined;

/**
 * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
 * @member {Boolean} disable_notification
 */
SendPollPostRequest.prototype['disable_notification'] = undefined;

/**
 * Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
 * @member {String} explanation
 */
SendPollPostRequest.prototype['explanation'] = undefined;

/**
 * List of special entities that appear in the poll explanation, which can be specified instead of *parse\\_mode*
 * @member {Array.<module:model/MessageEntity>} explanation_entities
 */
SendPollPostRequest.prototype['explanation_entities'] = undefined;

/**
 * Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
 * @member {String} explanation_parse_mode
 */
SendPollPostRequest.prototype['explanation_parse_mode'] = undefined;

/**
 * True, if the poll needs to be anonymous, defaults to *True*
 * @member {Boolean} is_anonymous
 */
SendPollPostRequest.prototype['is_anonymous'] = undefined;

/**
 * Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
 * @member {Boolean} is_closed
 */
SendPollPostRequest.prototype['is_closed'] = undefined;

/**
 * Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\\_date*.
 * @member {Number} open_period
 */
SendPollPostRequest.prototype['open_period'] = undefined;

/**
 * A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
 * @member {Array.<String>} options
 */
SendPollPostRequest.prototype['options'] = undefined;

/**
 * Poll question, 1-300 characters
 * @member {String} question
 */
SendPollPostRequest.prototype['question'] = undefined;

/**
 * @member {module:model/CopyMessagePostRequestReplyMarkup} reply_markup
 */
SendPollPostRequest.prototype['reply_markup'] = undefined;

/**
 * If the message is a reply, ID of the original message
 * @member {Number} reply_to_message_id
 */
SendPollPostRequest.prototype['reply_to_message_id'] = undefined;

/**
 * Poll type, “quiz” or “regular”, defaults to “regular”
 * @member {String} type
 */
SendPollPostRequest.prototype['type'] = undefined;






export default SendPollPostRequest;

