/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineKeyboardMarkup from './InlineKeyboardMarkup';
import InputMessageContent from './InputMessageContent';
import MessageEntity from './MessageEntity';

/**
 * The InlineQueryResultCachedDocument model module.
 * @module model/InlineQueryResultCachedDocument
 * @version 5.0.0
 */
class InlineQueryResultCachedDocument {
    /**
     * Constructs a new <code>InlineQueryResultCachedDocument</code>.
     * Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the file.
     * @alias module:model/InlineQueryResultCachedDocument
     * @param documentFileId {String} A valid file identifier for the file
     * @param id {String} Unique identifier for this result, 1-64 bytes
     * @param title {String} Title for the result
     * @param type {String} Type of the result, must be *document*
     */
    constructor(documentFileId, id, title, type) { 
        
        InlineQueryResultCachedDocument.initialize(this, documentFileId, id, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentFileId, id, title, type) { 
        obj['document_file_id'] = documentFileId;
        obj['id'] = id;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>InlineQueryResultCachedDocument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineQueryResultCachedDocument} obj Optional instance to populate.
     * @return {module:model/InlineQueryResultCachedDocument} The populated <code>InlineQueryResultCachedDocument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineQueryResultCachedDocument();

            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('caption_entities')) {
                obj['caption_entities'] = ApiClient.convertToType(data['caption_entities'], [MessageEntity]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('document_file_id')) {
                obj['document_file_id'] = ApiClient.convertToType(data['document_file_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('input_message_content')) {
                obj['input_message_content'] = InputMessageContent.constructFromObject(data['input_message_content']);
            }
            if (data.hasOwnProperty('parse_mode')) {
                obj['parse_mode'] = ApiClient.convertToType(data['parse_mode'], 'String');
            }
            if (data.hasOwnProperty('reply_markup')) {
                obj['reply_markup'] = InlineKeyboardMarkup.constructFromObject(data['reply_markup']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InlineQueryResultCachedDocument</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InlineQueryResultCachedDocument</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InlineQueryResultCachedDocument.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        if (data['caption_entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['caption_entities'])) {
                throw new Error("Expected the field `caption_entities` to be an array in the JSON data but got " + data['caption_entities']);
            }
            // validate the optional field `caption_entities` (array)
            for (const item of data['caption_entities']) {
                MessageEntity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['document_file_id'] && !(typeof data['document_file_id'] === 'string' || data['document_file_id'] instanceof String)) {
            throw new Error("Expected the field `document_file_id` to be a primitive type in the JSON string but got " + data['document_file_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `input_message_content`
        if (data['input_message_content']) { // data not null
          InputMessageContent.validateJSON(data['input_message_content']);
        }
        // ensure the json data is a string
        if (data['parse_mode'] && !(typeof data['parse_mode'] === 'string' || data['parse_mode'] instanceof String)) {
            throw new Error("Expected the field `parse_mode` to be a primitive type in the JSON string but got " + data['parse_mode']);
        }
        // validate the optional field `reply_markup`
        if (data['reply_markup']) { // data not null
          InlineKeyboardMarkup.validateJSON(data['reply_markup']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

InlineQueryResultCachedDocument.RequiredProperties = ["document_file_id", "id", "title", "type"];

/**
 * *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
 * @member {String} caption
 */
InlineQueryResultCachedDocument.prototype['caption'] = undefined;

/**
 * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
 * @member {Array.<module:model/MessageEntity>} caption_entities
 */
InlineQueryResultCachedDocument.prototype['caption_entities'] = undefined;

/**
 * *Optional*. Short description of the result
 * @member {String} description
 */
InlineQueryResultCachedDocument.prototype['description'] = undefined;

/**
 * A valid file identifier for the file
 * @member {String} document_file_id
 */
InlineQueryResultCachedDocument.prototype['document_file_id'] = undefined;

/**
 * Unique identifier for this result, 1-64 bytes
 * @member {String} id
 */
InlineQueryResultCachedDocument.prototype['id'] = undefined;

/**
 * @member {module:model/InputMessageContent} input_message_content
 */
InlineQueryResultCachedDocument.prototype['input_message_content'] = undefined;

/**
 * *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
 * @member {String} parse_mode
 */
InlineQueryResultCachedDocument.prototype['parse_mode'] = undefined;

/**
 * @member {module:model/InlineKeyboardMarkup} reply_markup
 */
InlineQueryResultCachedDocument.prototype['reply_markup'] = undefined;

/**
 * Title for the result
 * @member {String} title
 */
InlineQueryResultCachedDocument.prototype['title'] = undefined;

/**
 * Type of the result, must be *document*
 * @member {String} type
 */
InlineQueryResultCachedDocument.prototype['type'] = undefined;






export default InlineQueryResultCachedDocument;

