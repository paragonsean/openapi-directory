/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PassportElementErrorUnspecified model module.
 * @module model/PassportElementErrorUnspecified
 * @version 5.0.0
 */
class PassportElementErrorUnspecified {
    /**
     * Constructs a new <code>PassportElementErrorUnspecified</code>.
     * Represents an issue in an unspecified place. The error is considered resolved when new data is added.
     * @alias module:model/PassportElementErrorUnspecified
     * @param elementHash {String} Base64-encoded element hash
     * @param message {String} Error message
     * @param source {String} Error source, must be *unspecified*
     * @param type {String} Type of element of the user's Telegram Passport which has the issue
     */
    constructor(elementHash, message, source, type) { 
        
        PassportElementErrorUnspecified.initialize(this, elementHash, message, source, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, elementHash, message, source, type) { 
        obj['element_hash'] = elementHash;
        obj['message'] = message;
        obj['source'] = source;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PassportElementErrorUnspecified</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PassportElementErrorUnspecified} obj Optional instance to populate.
     * @return {module:model/PassportElementErrorUnspecified} The populated <code>PassportElementErrorUnspecified</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PassportElementErrorUnspecified();

            if (data.hasOwnProperty('element_hash')) {
                obj['element_hash'] = ApiClient.convertToType(data['element_hash'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PassportElementErrorUnspecified</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PassportElementErrorUnspecified</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PassportElementErrorUnspecified.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['element_hash'] && !(typeof data['element_hash'] === 'string' || data['element_hash'] instanceof String)) {
            throw new Error("Expected the field `element_hash` to be a primitive type in the JSON string but got " + data['element_hash']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PassportElementErrorUnspecified.RequiredProperties = ["element_hash", "message", "source", "type"];

/**
 * Base64-encoded element hash
 * @member {String} element_hash
 */
PassportElementErrorUnspecified.prototype['element_hash'] = undefined;

/**
 * Error message
 * @member {String} message
 */
PassportElementErrorUnspecified.prototype['message'] = undefined;

/**
 * Error source, must be *unspecified*
 * @member {String} source
 */
PassportElementErrorUnspecified.prototype['source'] = undefined;

/**
 * Type of element of the user's Telegram Passport which has the issue
 * @member {String} type
 */
PassportElementErrorUnspecified.prototype['type'] = undefined;






export default PassportElementErrorUnspecified;

