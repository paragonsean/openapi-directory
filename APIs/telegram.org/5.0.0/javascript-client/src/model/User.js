/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 5.0.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * This object represents a Telegram user or bot.
     * @alias module:model/User
     * @param firstName {String} User's or bot's first name
     * @param id {Number} Unique identifier for this user or bot
     * @param isBot {Boolean} True, if this user is a bot
     */
    constructor(firstName, id, isBot) { 
        
        User.initialize(this, firstName, id, isBot);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstName, id, isBot) { 
        obj['first_name'] = firstName;
        obj['id'] = id;
        obj['is_bot'] = isBot;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('can_join_groups')) {
                obj['can_join_groups'] = ApiClient.convertToType(data['can_join_groups'], 'Boolean');
            }
            if (data.hasOwnProperty('can_read_all_group_messages')) {
                obj['can_read_all_group_messages'] = ApiClient.convertToType(data['can_read_all_group_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_bot')) {
                obj['is_bot'] = ApiClient.convertToType(data['is_bot'], 'Boolean');
            }
            if (data.hasOwnProperty('language_code')) {
                obj['language_code'] = ApiClient.convertToType(data['language_code'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('supports_inline_queries')) {
                obj['supports_inline_queries'] = ApiClient.convertToType(data['supports_inline_queries'], 'Boolean');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['language_code'] && !(typeof data['language_code'] === 'string' || data['language_code'] instanceof String)) {
            throw new Error("Expected the field `language_code` to be a primitive type in the JSON string but got " + data['language_code']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

User.RequiredProperties = ["first_name", "id", "is_bot"];

/**
 * *Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
 * @member {Boolean} can_join_groups
 */
User.prototype['can_join_groups'] = undefined;

/**
 * *Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
 * @member {Boolean} can_read_all_group_messages
 */
User.prototype['can_read_all_group_messages'] = undefined;

/**
 * User's or bot's first name
 * @member {String} first_name
 */
User.prototype['first_name'] = undefined;

/**
 * Unique identifier for this user or bot
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * True, if this user is a bot
 * @member {Boolean} is_bot
 */
User.prototype['is_bot'] = undefined;

/**
 * *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language
 * @member {String} language_code
 */
User.prototype['language_code'] = undefined;

/**
 * *Optional*. User's or bot's last name
 * @member {String} last_name
 */
User.prototype['last_name'] = undefined;

/**
 * *Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
 * @member {Boolean} supports_inline_queries
 */
User.prototype['supports_inline_queries'] = undefined;

/**
 * *Optional*. User's or bot's username
 * @member {String} username
 */
User.prototype['username'] = undefined;






export default User;

