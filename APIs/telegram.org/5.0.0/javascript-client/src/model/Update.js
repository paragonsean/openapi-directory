/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CallbackQuery from './CallbackQuery';
import ChosenInlineResult from './ChosenInlineResult';
import InlineQuery from './InlineQuery';
import Message from './Message';
import Poll from './Poll';
import PollAnswer from './PollAnswer';
import PreCheckoutQuery from './PreCheckoutQuery';
import ShippingQuery from './ShippingQuery';

/**
 * The Update model module.
 * @module model/Update
 * @version 5.0.0
 */
class Update {
    /**
     * Constructs a new <code>Update</code>.
     * This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.   At most **one** of the optional parameters can be present in any given update.
     * @alias module:model/Update
     * @param updateId {Number} The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
     */
    constructor(updateId) { 
        
        Update.initialize(this, updateId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, updateId) { 
        obj['update_id'] = updateId;
    }

    /**
     * Constructs a <code>Update</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Update} obj Optional instance to populate.
     * @return {module:model/Update} The populated <code>Update</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Update();

            if (data.hasOwnProperty('callback_query')) {
                obj['callback_query'] = CallbackQuery.constructFromObject(data['callback_query']);
            }
            if (data.hasOwnProperty('channel_post')) {
                obj['channel_post'] = Message.constructFromObject(data['channel_post']);
            }
            if (data.hasOwnProperty('chosen_inline_result')) {
                obj['chosen_inline_result'] = ChosenInlineResult.constructFromObject(data['chosen_inline_result']);
            }
            if (data.hasOwnProperty('edited_channel_post')) {
                obj['edited_channel_post'] = Message.constructFromObject(data['edited_channel_post']);
            }
            if (data.hasOwnProperty('edited_message')) {
                obj['edited_message'] = Message.constructFromObject(data['edited_message']);
            }
            if (data.hasOwnProperty('inline_query')) {
                obj['inline_query'] = InlineQuery.constructFromObject(data['inline_query']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = Message.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('poll')) {
                obj['poll'] = Poll.constructFromObject(data['poll']);
            }
            if (data.hasOwnProperty('poll_answer')) {
                obj['poll_answer'] = PollAnswer.constructFromObject(data['poll_answer']);
            }
            if (data.hasOwnProperty('pre_checkout_query')) {
                obj['pre_checkout_query'] = PreCheckoutQuery.constructFromObject(data['pre_checkout_query']);
            }
            if (data.hasOwnProperty('shipping_query')) {
                obj['shipping_query'] = ShippingQuery.constructFromObject(data['shipping_query']);
            }
            if (data.hasOwnProperty('update_id')) {
                obj['update_id'] = ApiClient.convertToType(data['update_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Update</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Update</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Update.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `callback_query`
        if (data['callback_query']) { // data not null
          CallbackQuery.validateJSON(data['callback_query']);
        }
        // validate the optional field `channel_post`
        if (data['channel_post']) { // data not null
          Message.validateJSON(data['channel_post']);
        }
        // validate the optional field `chosen_inline_result`
        if (data['chosen_inline_result']) { // data not null
          ChosenInlineResult.validateJSON(data['chosen_inline_result']);
        }
        // validate the optional field `edited_channel_post`
        if (data['edited_channel_post']) { // data not null
          Message.validateJSON(data['edited_channel_post']);
        }
        // validate the optional field `edited_message`
        if (data['edited_message']) { // data not null
          Message.validateJSON(data['edited_message']);
        }
        // validate the optional field `inline_query`
        if (data['inline_query']) { // data not null
          InlineQuery.validateJSON(data['inline_query']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          Message.validateJSON(data['message']);
        }
        // validate the optional field `poll`
        if (data['poll']) { // data not null
          Poll.validateJSON(data['poll']);
        }
        // validate the optional field `poll_answer`
        if (data['poll_answer']) { // data not null
          PollAnswer.validateJSON(data['poll_answer']);
        }
        // validate the optional field `pre_checkout_query`
        if (data['pre_checkout_query']) { // data not null
          PreCheckoutQuery.validateJSON(data['pre_checkout_query']);
        }
        // validate the optional field `shipping_query`
        if (data['shipping_query']) { // data not null
          ShippingQuery.validateJSON(data['shipping_query']);
        }

        return true;
    }


}

Update.RequiredProperties = ["update_id"];

/**
 * @member {module:model/CallbackQuery} callback_query
 */
Update.prototype['callback_query'] = undefined;

/**
 * @member {module:model/Message} channel_post
 */
Update.prototype['channel_post'] = undefined;

/**
 * @member {module:model/ChosenInlineResult} chosen_inline_result
 */
Update.prototype['chosen_inline_result'] = undefined;

/**
 * @member {module:model/Message} edited_channel_post
 */
Update.prototype['edited_channel_post'] = undefined;

/**
 * @member {module:model/Message} edited_message
 */
Update.prototype['edited_message'] = undefined;

/**
 * @member {module:model/InlineQuery} inline_query
 */
Update.prototype['inline_query'] = undefined;

/**
 * @member {module:model/Message} message
 */
Update.prototype['message'] = undefined;

/**
 * @member {module:model/Poll} poll
 */
Update.prototype['poll'] = undefined;

/**
 * @member {module:model/PollAnswer} poll_answer
 */
Update.prototype['poll_answer'] = undefined;

/**
 * @member {module:model/PreCheckoutQuery} pre_checkout_query
 */
Update.prototype['pre_checkout_query'] = undefined;

/**
 * @member {module:model/ShippingQuery} shipping_query
 */
Update.prototype['shipping_query'] = undefined;

/**
 * The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
 * @member {Number} update_id
 */
Update.prototype['update_id'] = undefined;






export default Update;

