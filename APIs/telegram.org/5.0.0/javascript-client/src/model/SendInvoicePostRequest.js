/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineKeyboardMarkup from './InlineKeyboardMarkup';
import LabeledPrice from './LabeledPrice';

/**
 * The SendInvoicePostRequest model module.
 * @module model/SendInvoicePostRequest
 * @version 5.0.0
 */
class SendInvoicePostRequest {
    /**
     * Constructs a new <code>SendInvoicePostRequest</code>.
     * @alias module:model/SendInvoicePostRequest
     * @param chatId {Number} Unique identifier for the target private chat
     * @param currency {String} Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
     * @param description {String} Product description, 1-255 characters
     * @param payload {String} Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
     * @param prices {Array.<module:model/LabeledPrice>} Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
     * @param providerToken {String} Payments provider token, obtained via [Botfather](https://t.me/botfather)
     * @param startParameter {String} Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
     * @param title {String} Product name, 1-32 characters
     */
    constructor(chatId, currency, description, payload, prices, providerToken, startParameter, title) { 
        
        SendInvoicePostRequest.initialize(this, chatId, currency, description, payload, prices, providerToken, startParameter, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chatId, currency, description, payload, prices, providerToken, startParameter, title) { 
        obj['chat_id'] = chatId;
        obj['currency'] = currency;
        obj['description'] = description;
        obj['payload'] = payload;
        obj['prices'] = prices;
        obj['provider_token'] = providerToken;
        obj['start_parameter'] = startParameter;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>SendInvoicePostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendInvoicePostRequest} obj Optional instance to populate.
     * @return {module:model/SendInvoicePostRequest} The populated <code>SendInvoicePostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendInvoicePostRequest();

            if (data.hasOwnProperty('allow_sending_without_reply')) {
                obj['allow_sending_without_reply'] = ApiClient.convertToType(data['allow_sending_without_reply'], 'Boolean');
            }
            if (data.hasOwnProperty('chat_id')) {
                obj['chat_id'] = ApiClient.convertToType(data['chat_id'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('disable_notification')) {
                obj['disable_notification'] = ApiClient.convertToType(data['disable_notification'], 'Boolean');
            }
            if (data.hasOwnProperty('is_flexible')) {
                obj['is_flexible'] = ApiClient.convertToType(data['is_flexible'], 'Boolean');
            }
            if (data.hasOwnProperty('need_email')) {
                obj['need_email'] = ApiClient.convertToType(data['need_email'], 'Boolean');
            }
            if (data.hasOwnProperty('need_name')) {
                obj['need_name'] = ApiClient.convertToType(data['need_name'], 'Boolean');
            }
            if (data.hasOwnProperty('need_phone_number')) {
                obj['need_phone_number'] = ApiClient.convertToType(data['need_phone_number'], 'Boolean');
            }
            if (data.hasOwnProperty('need_shipping_address')) {
                obj['need_shipping_address'] = ApiClient.convertToType(data['need_shipping_address'], 'Boolean');
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], 'String');
            }
            if (data.hasOwnProperty('photo_height')) {
                obj['photo_height'] = ApiClient.convertToType(data['photo_height'], 'Number');
            }
            if (data.hasOwnProperty('photo_size')) {
                obj['photo_size'] = ApiClient.convertToType(data['photo_size'], 'Number');
            }
            if (data.hasOwnProperty('photo_url')) {
                obj['photo_url'] = ApiClient.convertToType(data['photo_url'], 'String');
            }
            if (data.hasOwnProperty('photo_width')) {
                obj['photo_width'] = ApiClient.convertToType(data['photo_width'], 'Number');
            }
            if (data.hasOwnProperty('prices')) {
                obj['prices'] = ApiClient.convertToType(data['prices'], [LabeledPrice]);
            }
            if (data.hasOwnProperty('provider_data')) {
                obj['provider_data'] = ApiClient.convertToType(data['provider_data'], 'String');
            }
            if (data.hasOwnProperty('provider_token')) {
                obj['provider_token'] = ApiClient.convertToType(data['provider_token'], 'String');
            }
            if (data.hasOwnProperty('reply_markup')) {
                obj['reply_markup'] = InlineKeyboardMarkup.constructFromObject(data['reply_markup']);
            }
            if (data.hasOwnProperty('reply_to_message_id')) {
                obj['reply_to_message_id'] = ApiClient.convertToType(data['reply_to_message_id'], 'Number');
            }
            if (data.hasOwnProperty('send_email_to_provider')) {
                obj['send_email_to_provider'] = ApiClient.convertToType(data['send_email_to_provider'], 'Boolean');
            }
            if (data.hasOwnProperty('send_phone_number_to_provider')) {
                obj['send_phone_number_to_provider'] = ApiClient.convertToType(data['send_phone_number_to_provider'], 'Boolean');
            }
            if (data.hasOwnProperty('start_parameter')) {
                obj['start_parameter'] = ApiClient.convertToType(data['start_parameter'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendInvoicePostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendInvoicePostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendInvoicePostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['payload'] && !(typeof data['payload'] === 'string' || data['payload'] instanceof String)) {
            throw new Error("Expected the field `payload` to be a primitive type in the JSON string but got " + data['payload']);
        }
        // ensure the json data is a string
        if (data['photo_url'] && !(typeof data['photo_url'] === 'string' || data['photo_url'] instanceof String)) {
            throw new Error("Expected the field `photo_url` to be a primitive type in the JSON string but got " + data['photo_url']);
        }
        if (data['prices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['prices'])) {
                throw new Error("Expected the field `prices` to be an array in the JSON data but got " + data['prices']);
            }
            // validate the optional field `prices` (array)
            for (const item of data['prices']) {
                LabeledPrice.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provider_data'] && !(typeof data['provider_data'] === 'string' || data['provider_data'] instanceof String)) {
            throw new Error("Expected the field `provider_data` to be a primitive type in the JSON string but got " + data['provider_data']);
        }
        // ensure the json data is a string
        if (data['provider_token'] && !(typeof data['provider_token'] === 'string' || data['provider_token'] instanceof String)) {
            throw new Error("Expected the field `provider_token` to be a primitive type in the JSON string but got " + data['provider_token']);
        }
        // validate the optional field `reply_markup`
        if (data['reply_markup']) { // data not null
          InlineKeyboardMarkup.validateJSON(data['reply_markup']);
        }
        // ensure the json data is a string
        if (data['start_parameter'] && !(typeof data['start_parameter'] === 'string' || data['start_parameter'] instanceof String)) {
            throw new Error("Expected the field `start_parameter` to be a primitive type in the JSON string but got " + data['start_parameter']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

SendInvoicePostRequest.RequiredProperties = ["chat_id", "currency", "description", "payload", "prices", "provider_token", "start_parameter", "title"];

/**
 * Pass *True*, if the message should be sent even if the specified replied-to message is not found
 * @member {Boolean} allow_sending_without_reply
 */
SendInvoicePostRequest.prototype['allow_sending_without_reply'] = undefined;

/**
 * Unique identifier for the target private chat
 * @member {Number} chat_id
 */
SendInvoicePostRequest.prototype['chat_id'] = undefined;

/**
 * Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
 * @member {String} currency
 */
SendInvoicePostRequest.prototype['currency'] = undefined;

/**
 * Product description, 1-255 characters
 * @member {String} description
 */
SendInvoicePostRequest.prototype['description'] = undefined;

/**
 * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
 * @member {Boolean} disable_notification
 */
SendInvoicePostRequest.prototype['disable_notification'] = undefined;

/**
 * Pass *True*, if the final price depends on the shipping method
 * @member {Boolean} is_flexible
 */
SendInvoicePostRequest.prototype['is_flexible'] = undefined;

/**
 * Pass *True*, if you require the user's email address to complete the order
 * @member {Boolean} need_email
 */
SendInvoicePostRequest.prototype['need_email'] = undefined;

/**
 * Pass *True*, if you require the user's full name to complete the order
 * @member {Boolean} need_name
 */
SendInvoicePostRequest.prototype['need_name'] = undefined;

/**
 * Pass *True*, if you require the user's phone number to complete the order
 * @member {Boolean} need_phone_number
 */
SendInvoicePostRequest.prototype['need_phone_number'] = undefined;

/**
 * Pass *True*, if you require the user's shipping address to complete the order
 * @member {Boolean} need_shipping_address
 */
SendInvoicePostRequest.prototype['need_shipping_address'] = undefined;

/**
 * Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
 * @member {String} payload
 */
SendInvoicePostRequest.prototype['payload'] = undefined;

/**
 * Photo height
 * @member {Number} photo_height
 */
SendInvoicePostRequest.prototype['photo_height'] = undefined;

/**
 * Photo size
 * @member {Number} photo_size
 */
SendInvoicePostRequest.prototype['photo_size'] = undefined;

/**
 * URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
 * @member {String} photo_url
 */
SendInvoicePostRequest.prototype['photo_url'] = undefined;

/**
 * Photo width
 * @member {Number} photo_width
 */
SendInvoicePostRequest.prototype['photo_width'] = undefined;

/**
 * Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
 * @member {Array.<module:model/LabeledPrice>} prices
 */
SendInvoicePostRequest.prototype['prices'] = undefined;

/**
 * A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
 * @member {String} provider_data
 */
SendInvoicePostRequest.prototype['provider_data'] = undefined;

/**
 * Payments provider token, obtained via [Botfather](https://t.me/botfather)
 * @member {String} provider_token
 */
SendInvoicePostRequest.prototype['provider_token'] = undefined;

/**
 * @member {module:model/InlineKeyboardMarkup} reply_markup
 */
SendInvoicePostRequest.prototype['reply_markup'] = undefined;

/**
 * If the message is a reply, ID of the original message
 * @member {Number} reply_to_message_id
 */
SendInvoicePostRequest.prototype['reply_to_message_id'] = undefined;

/**
 * Pass *True*, if user's email address should be sent to provider
 * @member {Boolean} send_email_to_provider
 */
SendInvoicePostRequest.prototype['send_email_to_provider'] = undefined;

/**
 * Pass *True*, if user's phone number should be sent to provider
 * @member {Boolean} send_phone_number_to_provider
 */
SendInvoicePostRequest.prototype['send_phone_number_to_provider'] = undefined;

/**
 * Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
 * @member {String} start_parameter
 */
SendInvoicePostRequest.prototype['start_parameter'] = undefined;

/**
 * Product name, 1-32 characters
 * @member {String} title
 */
SendInvoicePostRequest.prototype['title'] = undefined;






export default SendInvoicePostRequest;

