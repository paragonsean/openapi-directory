/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyboardButtonPollType from './KeyboardButtonPollType';

/**
 * The KeyboardButton model module.
 * @module model/KeyboardButton
 * @version 5.0.0
 */
class KeyboardButton {
    /**
     * Constructs a new <code>KeyboardButton</code>.
     * This object represents one button of the reply keyboard. For simple text buttons *String* can be used instead of this object to specify text of the button. Optional fields *request\\_contact*, *request\\_location*, and *request\\_poll* are mutually exclusive.
     * @alias module:model/KeyboardButton
     * @param text {String} Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
     */
    constructor(text) { 
        
        KeyboardButton.initialize(this, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text) { 
        obj['text'] = text;
    }

    /**
     * Constructs a <code>KeyboardButton</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyboardButton} obj Optional instance to populate.
     * @return {module:model/KeyboardButton} The populated <code>KeyboardButton</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyboardButton();

            if (data.hasOwnProperty('request_contact')) {
                obj['request_contact'] = ApiClient.convertToType(data['request_contact'], 'Boolean');
            }
            if (data.hasOwnProperty('request_location')) {
                obj['request_location'] = ApiClient.convertToType(data['request_location'], 'Boolean');
            }
            if (data.hasOwnProperty('request_poll')) {
                obj['request_poll'] = KeyboardButtonPollType.constructFromObject(data['request_poll']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyboardButton</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyboardButton</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeyboardButton.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `request_poll`
        if (data['request_poll']) { // data not null
          KeyboardButtonPollType.validateJSON(data['request_poll']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

KeyboardButton.RequiredProperties = ["text"];

/**
 * *Optional*. If *True*, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
 * @member {Boolean} request_contact
 */
KeyboardButton.prototype['request_contact'] = undefined;

/**
 * *Optional*. If *True*, the user's current location will be sent when the button is pressed. Available in private chats only
 * @member {Boolean} request_location
 */
KeyboardButton.prototype['request_location'] = undefined;

/**
 * @member {module:model/KeyboardButtonPollType} request_poll
 */
KeyboardButton.prototype['request_poll'] = undefined;

/**
 * Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
 * @member {String} text
 */
KeyboardButton.prototype['text'] = undefined;






export default KeyboardButton;

