/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PassportFile from './PassportFile';

/**
 * The EncryptedPassportElement model module.
 * @module model/EncryptedPassportElement
 * @version 5.0.0
 */
class EncryptedPassportElement {
    /**
     * Constructs a new <code>EncryptedPassportElement</code>.
     * Contains information about documents or other Telegram Passport elements shared with the bot by the user.
     * @alias module:model/EncryptedPassportElement
     * @param hash {String} Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
     * @param type {module:model/EncryptedPassportElement.TypeEnum} Element type. One of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”, “phone\\_number”, “email”.
     */
    constructor(hash, type) { 
        
        EncryptedPassportElement.initialize(this, hash, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hash, type) { 
        obj['hash'] = hash;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>EncryptedPassportElement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncryptedPassportElement} obj Optional instance to populate.
     * @return {module:model/EncryptedPassportElement} The populated <code>EncryptedPassportElement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncryptedPassportElement();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [PassportFile]);
            }
            if (data.hasOwnProperty('front_side')) {
                obj['front_side'] = PassportFile.constructFromObject(data['front_side']);
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('phone_number')) {
                obj['phone_number'] = ApiClient.convertToType(data['phone_number'], 'String');
            }
            if (data.hasOwnProperty('reverse_side')) {
                obj['reverse_side'] = PassportFile.constructFromObject(data['reverse_side']);
            }
            if (data.hasOwnProperty('selfie')) {
                obj['selfie'] = PassportFile.constructFromObject(data['selfie']);
            }
            if (data.hasOwnProperty('translation')) {
                obj['translation'] = ApiClient.convertToType(data['translation'], [PassportFile]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncryptedPassportElement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncryptedPassportElement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EncryptedPassportElement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                PassportFile.validateJSON(item);
            };
        }
        // validate the optional field `front_side`
        if (data['front_side']) { // data not null
          PassportFile.validateJSON(data['front_side']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is a string
        if (data['phone_number'] && !(typeof data['phone_number'] === 'string' || data['phone_number'] instanceof String)) {
            throw new Error("Expected the field `phone_number` to be a primitive type in the JSON string but got " + data['phone_number']);
        }
        // validate the optional field `reverse_side`
        if (data['reverse_side']) { // data not null
          PassportFile.validateJSON(data['reverse_side']);
        }
        // validate the optional field `selfie`
        if (data['selfie']) { // data not null
          PassportFile.validateJSON(data['selfie']);
        }
        if (data['translation']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['translation'])) {
                throw new Error("Expected the field `translation` to be an array in the JSON data but got " + data['translation']);
            }
            // validate the optional field `translation` (array)
            for (const item of data['translation']) {
                PassportFile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

EncryptedPassportElement.RequiredProperties = ["hash", "type"];

/**
 * *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
 * @member {String} data
 */
EncryptedPassportElement.prototype['data'] = undefined;

/**
 * *Optional*. User's verified email address, available only for “email” type
 * @member {String} email
 */
EncryptedPassportElement.prototype['email'] = undefined;

/**
 * *Optional*. Array of encrypted files with documents provided by the user, available for “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
 * @member {Array.<module:model/PassportFile>} files
 */
EncryptedPassportElement.prototype['files'] = undefined;

/**
 * @member {module:model/PassportFile} front_side
 */
EncryptedPassportElement.prototype['front_side'] = undefined;

/**
 * Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
 * @member {String} hash
 */
EncryptedPassportElement.prototype['hash'] = undefined;

/**
 * *Optional*. User's verified phone number, available only for “phone\\_number” type
 * @member {String} phone_number
 */
EncryptedPassportElement.prototype['phone_number'] = undefined;

/**
 * @member {module:model/PassportFile} reverse_side
 */
EncryptedPassportElement.prototype['reverse_side'] = undefined;

/**
 * @member {module:model/PassportFile} selfie
 */
EncryptedPassportElement.prototype['selfie'] = undefined;

/**
 * *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
 * @member {Array.<module:model/PassportFile>} translation
 */
EncryptedPassportElement.prototype['translation'] = undefined;

/**
 * Element type. One of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”, “phone\\_number”, “email”.
 * @member {module:model/EncryptedPassportElement.TypeEnum} type
 */
EncryptedPassportElement.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EncryptedPassportElement['TypeEnum'] = {

    /**
     * value: "personal_details"
     * @const
     */
    "personal_details": "personal_details",

    /**
     * value: "passport"
     * @const
     */
    "passport": "passport",

    /**
     * value: "driver_license"
     * @const
     */
    "driver_license": "driver_license",

    /**
     * value: "identity_card"
     * @const
     */
    "identity_card": "identity_card",

    /**
     * value: "internal_passport"
     * @const
     */
    "internal_passport": "internal_passport",

    /**
     * value: "address"
     * @const
     */
    "address": "address",

    /**
     * value: "utility_bill"
     * @const
     */
    "utility_bill": "utility_bill",

    /**
     * value: "bank_statement"
     * @const
     */
    "bank_statement": "bank_statement",

    /**
     * value: "rental_agreement"
     * @const
     */
    "rental_agreement": "rental_agreement",

    /**
     * value: "passport_registration"
     * @const
     */
    "passport_registration": "passport_registration",

    /**
     * value: "temporary_registration"
     * @const
     */
    "temporary_registration": "temporary_registration",

    /**
     * value: "phone_number"
     * @const
     */
    "phone_number": "phone_number",

    /**
     * value: "email"
     * @const
     */
    "email": "email"
};



export default EncryptedPassportElement;

