/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebhookInfo model module.
 * @module model/WebhookInfo
 * @version 5.0.0
 */
class WebhookInfo {
    /**
     * Constructs a new <code>WebhookInfo</code>.
     * Contains information about the current status of a webhook.
     * @alias module:model/WebhookInfo
     * @param hasCustomCertificate {Boolean} True, if a custom certificate was provided for webhook certificate checks
     * @param pendingUpdateCount {Number} Number of updates awaiting delivery
     * @param url {String} Webhook URL, may be empty if webhook is not set up
     */
    constructor(hasCustomCertificate, pendingUpdateCount, url) { 
        
        WebhookInfo.initialize(this, hasCustomCertificate, pendingUpdateCount, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hasCustomCertificate, pendingUpdateCount, url) { 
        obj['has_custom_certificate'] = hasCustomCertificate;
        obj['pending_update_count'] = pendingUpdateCount;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>WebhookInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookInfo} obj Optional instance to populate.
     * @return {module:model/WebhookInfo} The populated <code>WebhookInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookInfo();

            if (data.hasOwnProperty('allowed_updates')) {
                obj['allowed_updates'] = ApiClient.convertToType(data['allowed_updates'], ['String']);
            }
            if (data.hasOwnProperty('has_custom_certificate')) {
                obj['has_custom_certificate'] = ApiClient.convertToType(data['has_custom_certificate'], 'Boolean');
            }
            if (data.hasOwnProperty('ip_address')) {
                obj['ip_address'] = ApiClient.convertToType(data['ip_address'], 'String');
            }
            if (data.hasOwnProperty('last_error_date')) {
                obj['last_error_date'] = ApiClient.convertToType(data['last_error_date'], 'Number');
            }
            if (data.hasOwnProperty('last_error_message')) {
                obj['last_error_message'] = ApiClient.convertToType(data['last_error_message'], 'String');
            }
            if (data.hasOwnProperty('max_connections')) {
                obj['max_connections'] = ApiClient.convertToType(data['max_connections'], 'Number');
            }
            if (data.hasOwnProperty('pending_update_count')) {
                obj['pending_update_count'] = ApiClient.convertToType(data['pending_update_count'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_updates'])) {
            throw new Error("Expected the field `allowed_updates` to be an array in the JSON data but got " + data['allowed_updates']);
        }
        // ensure the json data is a string
        if (data['ip_address'] && !(typeof data['ip_address'] === 'string' || data['ip_address'] instanceof String)) {
            throw new Error("Expected the field `ip_address` to be a primitive type in the JSON string but got " + data['ip_address']);
        }
        // ensure the json data is a string
        if (data['last_error_message'] && !(typeof data['last_error_message'] === 'string' || data['last_error_message'] instanceof String)) {
            throw new Error("Expected the field `last_error_message` to be a primitive type in the JSON string but got " + data['last_error_message']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

WebhookInfo.RequiredProperties = ["has_custom_certificate", "pending_update_count", "url"];

/**
 * *Optional*. A list of update types the bot is subscribed to. Defaults to all update types
 * @member {Array.<String>} allowed_updates
 */
WebhookInfo.prototype['allowed_updates'] = undefined;

/**
 * True, if a custom certificate was provided for webhook certificate checks
 * @member {Boolean} has_custom_certificate
 */
WebhookInfo.prototype['has_custom_certificate'] = undefined;

/**
 * *Optional*. Currently used webhook IP address
 * @member {String} ip_address
 */
WebhookInfo.prototype['ip_address'] = undefined;

/**
 * *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook
 * @member {Number} last_error_date
 */
WebhookInfo.prototype['last_error_date'] = undefined;

/**
 * *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
 * @member {String} last_error_message
 */
WebhookInfo.prototype['last_error_message'] = undefined;

/**
 * *Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
 * @member {Number} max_connections
 */
WebhookInfo.prototype['max_connections'] = undefined;

/**
 * Number of updates awaiting delivery
 * @member {Number} pending_update_count
 */
WebhookInfo.prototype['pending_update_count'] = undefined;

/**
 * Webhook URL, may be empty if webhook is not set up
 * @member {String} url
 */
WebhookInfo.prototype['url'] = undefined;






export default WebhookInfo;

