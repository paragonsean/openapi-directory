/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Location model module.
 * @module model/Location
 * @version 5.0.0
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * This object represents a point on the map.
     * @alias module:model/Location
     * @param latitude {Number} Latitude as defined by sender
     * @param longitude {Number} Longitude as defined by sender
     */
    constructor(latitude, longitude) { 
        
        Location.initialize(this, latitude, longitude);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, latitude, longitude) { 
        obj['latitude'] = latitude;
        obj['longitude'] = longitude;
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('heading')) {
                obj['heading'] = ApiClient.convertToType(data['heading'], 'Number');
            }
            if (data.hasOwnProperty('horizontal_accuracy')) {
                obj['horizontal_accuracy'] = ApiClient.convertToType(data['horizontal_accuracy'], 'Number');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('live_period')) {
                obj['live_period'] = ApiClient.convertToType(data['live_period'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('proximity_alert_radius')) {
                obj['proximity_alert_radius'] = ApiClient.convertToType(data['proximity_alert_radius'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Location.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Location.RequiredProperties = ["latitude", "longitude"];

/**
 * *Optional*. The direction in which user is moving, in degrees; 1-360. For active live locations only.
 * @member {Number} heading
 */
Location.prototype['heading'] = undefined;

/**
 * *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
 * @member {Number} horizontal_accuracy
 */
Location.prototype['horizontal_accuracy'] = undefined;

/**
 * Latitude as defined by sender
 * @member {Number} latitude
 */
Location.prototype['latitude'] = undefined;

/**
 * *Optional*. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.
 * @member {Number} live_period
 */
Location.prototype['live_period'] = undefined;

/**
 * Longitude as defined by sender
 * @member {Number} longitude
 */
Location.prototype['longitude'] = undefined;

/**
 * *Optional*. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
 * @member {Number} proximity_alert_radius
 */
Location.prototype['proximity_alert_radius'] = undefined;






export default Location;

