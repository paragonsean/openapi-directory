/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The MessageEntity model module.
 * @module model/MessageEntity
 * @version 5.0.0
 */
class MessageEntity {
    /**
     * Constructs a new <code>MessageEntity</code>.
     * This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
     * @alias module:model/MessageEntity
     * @param length {Number} Length of the entity in UTF-16 code units
     * @param offset {Number} Offset in UTF-16 code units to the start of the entity
     * @param type {module:model/MessageEntity.TypeEnum} Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\\_link” (for clickable text URLs), “text\\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
     */
    constructor(length, offset, type) { 
        
        MessageEntity.initialize(this, length, offset, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, length, offset, type) { 
        obj['length'] = length;
        obj['offset'] = offset;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>MessageEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageEntity} obj Optional instance to populate.
     * @return {module:model/MessageEntity} The populated <code>MessageEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageEntity();

            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageEntity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MessageEntity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

MessageEntity.RequiredProperties = ["length", "offset", "type"];

/**
 * *Optional*. For “pre” only, the programming language of the entity text
 * @member {String} language
 */
MessageEntity.prototype['language'] = undefined;

/**
 * Length of the entity in UTF-16 code units
 * @member {Number} length
 */
MessageEntity.prototype['length'] = undefined;

/**
 * Offset in UTF-16 code units to the start of the entity
 * @member {Number} offset
 */
MessageEntity.prototype['offset'] = undefined;

/**
 * Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\\_link” (for clickable text URLs), “text\\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
 * @member {module:model/MessageEntity.TypeEnum} type
 */
MessageEntity.prototype['type'] = undefined;

/**
 * *Optional*. For “text\\_link” only, url that will be opened after user taps on the text
 * @member {String} url
 */
MessageEntity.prototype['url'] = undefined;

/**
 * @member {module:model/User} user
 */
MessageEntity.prototype['user'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MessageEntity['TypeEnum'] = {

    /**
     * value: "mention"
     * @const
     */
    "mention": "mention",

    /**
     * value: "hashtag"
     * @const
     */
    "hashtag": "hashtag",

    /**
     * value: "cashtag"
     * @const
     */
    "cashtag": "cashtag",

    /**
     * value: "bot_command"
     * @const
     */
    "bot_command": "bot_command",

    /**
     * value: "url"
     * @const
     */
    "url": "url",

    /**
     * value: "email"
     * @const
     */
    "email": "email",

    /**
     * value: "phone_number"
     * @const
     */
    "phone_number": "phone_number",

    /**
     * value: "bold"
     * @const
     */
    "bold": "bold",

    /**
     * value: "italic"
     * @const
     */
    "italic": "italic",

    /**
     * value: "underline"
     * @const
     */
    "underline": "underline",

    /**
     * value: "strikethrough"
     * @const
     */
    "strikethrough": "strikethrough",

    /**
     * value: "code"
     * @const
     */
    "code": "code",

    /**
     * value: "pre"
     * @const
     */
    "pre": "pre",

    /**
     * value: "text_link"
     * @const
     */
    "text_link": "text_link",

    /**
     * value: "text_mention"
     * @const
     */
    "text_mention": "text_mention"
};



export default MessageEntity;

