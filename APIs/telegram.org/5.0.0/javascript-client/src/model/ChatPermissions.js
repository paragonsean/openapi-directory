/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChatPermissions model module.
 * @module model/ChatPermissions
 * @version 5.0.0
 */
class ChatPermissions {
    /**
     * Constructs a new <code>ChatPermissions</code>.
     * Describes actions that a non-administrator user is allowed to take in a chat.
     * @alias module:model/ChatPermissions
     */
    constructor() { 
        
        ChatPermissions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChatPermissions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatPermissions} obj Optional instance to populate.
     * @return {module:model/ChatPermissions} The populated <code>ChatPermissions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatPermissions();

            if (data.hasOwnProperty('can_add_web_page_previews')) {
                obj['can_add_web_page_previews'] = ApiClient.convertToType(data['can_add_web_page_previews'], 'Boolean');
            }
            if (data.hasOwnProperty('can_change_info')) {
                obj['can_change_info'] = ApiClient.convertToType(data['can_change_info'], 'Boolean');
            }
            if (data.hasOwnProperty('can_invite_users')) {
                obj['can_invite_users'] = ApiClient.convertToType(data['can_invite_users'], 'Boolean');
            }
            if (data.hasOwnProperty('can_pin_messages')) {
                obj['can_pin_messages'] = ApiClient.convertToType(data['can_pin_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_send_media_messages')) {
                obj['can_send_media_messages'] = ApiClient.convertToType(data['can_send_media_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_send_messages')) {
                obj['can_send_messages'] = ApiClient.convertToType(data['can_send_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_send_other_messages')) {
                obj['can_send_other_messages'] = ApiClient.convertToType(data['can_send_other_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('can_send_polls')) {
                obj['can_send_polls'] = ApiClient.convertToType(data['can_send_polls'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatPermissions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatPermissions</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\\_send\\_media\\_messages
 * @member {Boolean} can_add_web_page_previews
 */
ChatPermissions.prototype['can_add_web_page_previews'] = undefined;

/**
 * *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
 * @member {Boolean} can_change_info
 */
ChatPermissions.prototype['can_change_info'] = undefined;

/**
 * *Optional*. True, if the user is allowed to invite new users to the chat
 * @member {Boolean} can_invite_users
 */
ChatPermissions.prototype['can_invite_users'] = undefined;

/**
 * *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups
 * @member {Boolean} can_pin_messages
 */
ChatPermissions.prototype['can_pin_messages'] = undefined;

/**
 * *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\\_send\\_messages
 * @member {Boolean} can_send_media_messages
 */
ChatPermissions.prototype['can_send_media_messages'] = undefined;

/**
 * *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues
 * @member {Boolean} can_send_messages
 */
ChatPermissions.prototype['can_send_messages'] = undefined;

/**
 * *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\\_send\\_media\\_messages
 * @member {Boolean} can_send_other_messages
 */
ChatPermissions.prototype['can_send_other_messages'] = undefined;

/**
 * *Optional*. True, if the user is allowed to send polls, implies can\\_send\\_messages
 * @member {Boolean} can_send_polls
 */
ChatPermissions.prototype['can_send_polls'] = undefined;






export default ChatPermissions;

