/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ShippingOption from './ShippingOption';

/**
 * The AnswerShippingQueryPostRequest model module.
 * @module model/AnswerShippingQueryPostRequest
 * @version 5.0.0
 */
class AnswerShippingQueryPostRequest {
    /**
     * Constructs a new <code>AnswerShippingQueryPostRequest</code>.
     * @alias module:model/AnswerShippingQueryPostRequest
     * @param ok {Boolean} Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
     * @param shippingQueryId {String} Unique identifier for the query to be answered
     */
    constructor(ok, shippingQueryId) { 
        
        AnswerShippingQueryPostRequest.initialize(this, ok, shippingQueryId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ok, shippingQueryId) { 
        obj['ok'] = ok;
        obj['shipping_query_id'] = shippingQueryId;
    }

    /**
     * Constructs a <code>AnswerShippingQueryPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnswerShippingQueryPostRequest} obj Optional instance to populate.
     * @return {module:model/AnswerShippingQueryPostRequest} The populated <code>AnswerShippingQueryPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnswerShippingQueryPostRequest();

            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('ok')) {
                obj['ok'] = ApiClient.convertToType(data['ok'], 'Boolean');
            }
            if (data.hasOwnProperty('shipping_options')) {
                obj['shipping_options'] = ApiClient.convertToType(data['shipping_options'], [ShippingOption]);
            }
            if (data.hasOwnProperty('shipping_query_id')) {
                obj['shipping_query_id'] = ApiClient.convertToType(data['shipping_query_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnswerShippingQueryPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnswerShippingQueryPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AnswerShippingQueryPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['error_message'] && !(typeof data['error_message'] === 'string' || data['error_message'] instanceof String)) {
            throw new Error("Expected the field `error_message` to be a primitive type in the JSON string but got " + data['error_message']);
        }
        if (data['shipping_options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shipping_options'])) {
                throw new Error("Expected the field `shipping_options` to be an array in the JSON data but got " + data['shipping_options']);
            }
            // validate the optional field `shipping_options` (array)
            for (const item of data['shipping_options']) {
                ShippingOption.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shipping_query_id'] && !(typeof data['shipping_query_id'] === 'string' || data['shipping_query_id'] instanceof String)) {
            throw new Error("Expected the field `shipping_query_id` to be a primitive type in the JSON string but got " + data['shipping_query_id']);
        }

        return true;
    }


}

AnswerShippingQueryPostRequest.RequiredProperties = ["ok", "shipping_query_id"];

/**
 * Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
 * @member {String} error_message
 */
AnswerShippingQueryPostRequest.prototype['error_message'] = undefined;

/**
 * Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
 * @member {Boolean} ok
 */
AnswerShippingQueryPostRequest.prototype['ok'] = undefined;

/**
 * Required if *ok* is True. A JSON-serialized array of available shipping options.
 * @member {Array.<module:model/ShippingOption>} shipping_options
 */
AnswerShippingQueryPostRequest.prototype['shipping_options'] = undefined;

/**
 * Unique identifier for the query to be answered
 * @member {String} shipping_query_id
 */
AnswerShippingQueryPostRequest.prototype['shipping_query_id'] = undefined;






export default AnswerShippingQueryPostRequest;

