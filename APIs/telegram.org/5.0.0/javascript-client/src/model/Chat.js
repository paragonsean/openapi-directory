/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatLocation from './ChatLocation';
import ChatPermissions from './ChatPermissions';
import ChatPhoto from './ChatPhoto';
import Message from './Message';

/**
 * The Chat model module.
 * @module model/Chat
 * @version 5.0.0
 */
class Chat {
    /**
     * Constructs a new <code>Chat</code>.
     * This object represents a chat.
     * @alias module:model/Chat
     * @param id {Number} Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
     * @param type {module:model/Chat.TypeEnum} Type of chat, can be either “private”, “group”, “supergroup” or “channel”
     */
    constructor(id, type) { 
        
        Chat.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Chat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Chat} obj Optional instance to populate.
     * @return {module:model/Chat} The populated <code>Chat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Chat();

            if (data.hasOwnProperty('bio')) {
                obj['bio'] = ApiClient.convertToType(data['bio'], 'String');
            }
            if (data.hasOwnProperty('can_set_sticker_set')) {
                obj['can_set_sticker_set'] = ApiClient.convertToType(data['can_set_sticker_set'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('invite_link')) {
                obj['invite_link'] = ApiClient.convertToType(data['invite_link'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('linked_chat_id')) {
                obj['linked_chat_id'] = ApiClient.convertToType(data['linked_chat_id'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ChatLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ChatPermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('photo')) {
                obj['photo'] = ChatPhoto.constructFromObject(data['photo']);
            }
            if (data.hasOwnProperty('pinned_message')) {
                obj['pinned_message'] = Message.constructFromObject(data['pinned_message']);
            }
            if (data.hasOwnProperty('slow_mode_delay')) {
                obj['slow_mode_delay'] = ApiClient.convertToType(data['slow_mode_delay'], 'Number');
            }
            if (data.hasOwnProperty('sticker_set_name')) {
                obj['sticker_set_name'] = ApiClient.convertToType(data['sticker_set_name'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Chat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Chat</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Chat.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bio'] && !(typeof data['bio'] === 'string' || data['bio'] instanceof String)) {
            throw new Error("Expected the field `bio` to be a primitive type in the JSON string but got " + data['bio']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['invite_link'] && !(typeof data['invite_link'] === 'string' || data['invite_link'] instanceof String)) {
            throw new Error("Expected the field `invite_link` to be a primitive type in the JSON string but got " + data['invite_link']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          ChatLocation.validateJSON(data['location']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          ChatPermissions.validateJSON(data['permissions']);
        }
        // validate the optional field `photo`
        if (data['photo']) { // data not null
          ChatPhoto.validateJSON(data['photo']);
        }
        // validate the optional field `pinned_message`
        if (data['pinned_message']) { // data not null
          Message.validateJSON(data['pinned_message']);
        }
        // ensure the json data is a string
        if (data['sticker_set_name'] && !(typeof data['sticker_set_name'] === 'string' || data['sticker_set_name'] instanceof String)) {
            throw new Error("Expected the field `sticker_set_name` to be a primitive type in the JSON string but got " + data['sticker_set_name']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

Chat.RequiredProperties = ["id", "type"];

/**
 * *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
 * @member {String} bio
 */
Chat.prototype['bio'] = undefined;

/**
 * *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
 * @member {Boolean} can_set_sticker_set
 */
Chat.prototype['can_set_sticker_set'] = undefined;

/**
 * *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
 * @member {String} description
 */
Chat.prototype['description'] = undefined;

/**
 * *Optional*. First name of the other party in a private chat
 * @member {String} first_name
 */
Chat.prototype['first_name'] = undefined;

/**
 * Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
 * @member {Number} id
 */
Chat.prototype['id'] = undefined;

/**
 * *Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
 * @member {String} invite_link
 */
Chat.prototype['invite_link'] = undefined;

/**
 * *Optional*. Last name of the other party in a private chat
 * @member {String} last_name
 */
Chat.prototype['last_name'] = undefined;

/**
 * *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
 * @member {Number} linked_chat_id
 */
Chat.prototype['linked_chat_id'] = undefined;

/**
 * @member {module:model/ChatLocation} location
 */
Chat.prototype['location'] = undefined;

/**
 * @member {module:model/ChatPermissions} permissions
 */
Chat.prototype['permissions'] = undefined;

/**
 * @member {module:model/ChatPhoto} photo
 */
Chat.prototype['photo'] = undefined;

/**
 * @member {module:model/Message} pinned_message
 */
Chat.prototype['pinned_message'] = undefined;

/**
 * *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
 * @member {Number} slow_mode_delay
 */
Chat.prototype['slow_mode_delay'] = undefined;

/**
 * *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
 * @member {String} sticker_set_name
 */
Chat.prototype['sticker_set_name'] = undefined;

/**
 * *Optional*. Title, for supergroups, channels and group chats
 * @member {String} title
 */
Chat.prototype['title'] = undefined;

/**
 * Type of chat, can be either “private”, “group”, “supergroup” or “channel”
 * @member {module:model/Chat.TypeEnum} type
 */
Chat.prototype['type'] = undefined;

/**
 * *Optional*. Username, for private chats, supergroups and channels if available
 * @member {String} username
 */
Chat.prototype['username'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Chat['TypeEnum'] = {

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "group"
     * @const
     */
    "group": "group",

    /**
     * value: "supergroup"
     * @const
     */
    "supergroup": "supergroup",

    /**
     * value: "channel"
     * @const
     */
    "channel": "channel"
};



export default Chat;

