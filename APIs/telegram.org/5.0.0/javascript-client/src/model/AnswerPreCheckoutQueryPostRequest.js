/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnswerPreCheckoutQueryPostRequest model module.
 * @module model/AnswerPreCheckoutQueryPostRequest
 * @version 5.0.0
 */
class AnswerPreCheckoutQueryPostRequest {
    /**
     * Constructs a new <code>AnswerPreCheckoutQueryPostRequest</code>.
     * @alias module:model/AnswerPreCheckoutQueryPostRequest
     * @param ok {Boolean} Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
     * @param preCheckoutQueryId {String} Unique identifier for the query to be answered
     */
    constructor(ok, preCheckoutQueryId) { 
        
        AnswerPreCheckoutQueryPostRequest.initialize(this, ok, preCheckoutQueryId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ok, preCheckoutQueryId) { 
        obj['ok'] = ok;
        obj['pre_checkout_query_id'] = preCheckoutQueryId;
    }

    /**
     * Constructs a <code>AnswerPreCheckoutQueryPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnswerPreCheckoutQueryPostRequest} obj Optional instance to populate.
     * @return {module:model/AnswerPreCheckoutQueryPostRequest} The populated <code>AnswerPreCheckoutQueryPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnswerPreCheckoutQueryPostRequest();

            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('ok')) {
                obj['ok'] = ApiClient.convertToType(data['ok'], 'Boolean');
            }
            if (data.hasOwnProperty('pre_checkout_query_id')) {
                obj['pre_checkout_query_id'] = ApiClient.convertToType(data['pre_checkout_query_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnswerPreCheckoutQueryPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnswerPreCheckoutQueryPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AnswerPreCheckoutQueryPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['error_message'] && !(typeof data['error_message'] === 'string' || data['error_message'] instanceof String)) {
            throw new Error("Expected the field `error_message` to be a primitive type in the JSON string but got " + data['error_message']);
        }
        // ensure the json data is a string
        if (data['pre_checkout_query_id'] && !(typeof data['pre_checkout_query_id'] === 'string' || data['pre_checkout_query_id'] instanceof String)) {
            throw new Error("Expected the field `pre_checkout_query_id` to be a primitive type in the JSON string but got " + data['pre_checkout_query_id']);
        }

        return true;
    }


}

AnswerPreCheckoutQueryPostRequest.RequiredProperties = ["ok", "pre_checkout_query_id"];

/**
 * Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.
 * @member {String} error_message
 */
AnswerPreCheckoutQueryPostRequest.prototype['error_message'] = undefined;

/**
 * Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
 * @member {Boolean} ok
 */
AnswerPreCheckoutQueryPostRequest.prototype['ok'] = undefined;

/**
 * Unique identifier for the query to be answered
 * @member {String} pre_checkout_query_id
 */
AnswerPreCheckoutQueryPostRequest.prototype['pre_checkout_query_id'] = undefined;






export default AnswerPreCheckoutQueryPostRequest;

