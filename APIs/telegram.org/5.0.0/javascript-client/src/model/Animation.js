/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PhotoSize from './PhotoSize';

/**
 * The Animation model module.
 * @module model/Animation
 * @version 5.0.0
 */
class Animation {
    /**
     * Constructs a new <code>Animation</code>.
     * This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
     * @alias module:model/Animation
     * @param duration {Number} Duration of the video in seconds as defined by sender
     * @param fileId {String} Identifier for this file, which can be used to download or reuse the file
     * @param fileUniqueId {String} Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     * @param height {Number} Video height as defined by sender
     * @param width {Number} Video width as defined by sender
     */
    constructor(duration, fileId, fileUniqueId, height, width) { 
        
        Animation.initialize(this, duration, fileId, fileUniqueId, height, width);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, duration, fileId, fileUniqueId, height, width) { 
        obj['duration'] = duration;
        obj['file_id'] = fileId;
        obj['file_unique_id'] = fileUniqueId;
        obj['height'] = height;
        obj['width'] = width;
    }

    /**
     * Constructs a <code>Animation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Animation} obj Optional instance to populate.
     * @return {module:model/Animation} The populated <code>Animation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Animation();

            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('file_id')) {
                obj['file_id'] = ApiClient.convertToType(data['file_id'], 'String');
            }
            if (data.hasOwnProperty('file_name')) {
                obj['file_name'] = ApiClient.convertToType(data['file_name'], 'String');
            }
            if (data.hasOwnProperty('file_size')) {
                obj['file_size'] = ApiClient.convertToType(data['file_size'], 'Number');
            }
            if (data.hasOwnProperty('file_unique_id')) {
                obj['file_unique_id'] = ApiClient.convertToType(data['file_unique_id'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('mime_type')) {
                obj['mime_type'] = ApiClient.convertToType(data['mime_type'], 'String');
            }
            if (data.hasOwnProperty('thumb')) {
                obj['thumb'] = PhotoSize.constructFromObject(data['thumb']);
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Animation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Animation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Animation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['file_id'] && !(typeof data['file_id'] === 'string' || data['file_id'] instanceof String)) {
            throw new Error("Expected the field `file_id` to be a primitive type in the JSON string but got " + data['file_id']);
        }
        // ensure the json data is a string
        if (data['file_name'] && !(typeof data['file_name'] === 'string' || data['file_name'] instanceof String)) {
            throw new Error("Expected the field `file_name` to be a primitive type in the JSON string but got " + data['file_name']);
        }
        // ensure the json data is a string
        if (data['file_unique_id'] && !(typeof data['file_unique_id'] === 'string' || data['file_unique_id'] instanceof String)) {
            throw new Error("Expected the field `file_unique_id` to be a primitive type in the JSON string but got " + data['file_unique_id']);
        }
        // ensure the json data is a string
        if (data['mime_type'] && !(typeof data['mime_type'] === 'string' || data['mime_type'] instanceof String)) {
            throw new Error("Expected the field `mime_type` to be a primitive type in the JSON string but got " + data['mime_type']);
        }
        // validate the optional field `thumb`
        if (data['thumb']) { // data not null
          PhotoSize.validateJSON(data['thumb']);
        }

        return true;
    }


}

Animation.RequiredProperties = ["duration", "file_id", "file_unique_id", "height", "width"];

/**
 * Duration of the video in seconds as defined by sender
 * @member {Number} duration
 */
Animation.prototype['duration'] = undefined;

/**
 * Identifier for this file, which can be used to download or reuse the file
 * @member {String} file_id
 */
Animation.prototype['file_id'] = undefined;

/**
 * *Optional*. Original animation filename as defined by sender
 * @member {String} file_name
 */
Animation.prototype['file_name'] = undefined;

/**
 * *Optional*. File size
 * @member {Number} file_size
 */
Animation.prototype['file_size'] = undefined;

/**
 * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
 * @member {String} file_unique_id
 */
Animation.prototype['file_unique_id'] = undefined;

/**
 * Video height as defined by sender
 * @member {Number} height
 */
Animation.prototype['height'] = undefined;

/**
 * *Optional*. MIME type of the file as defined by sender
 * @member {String} mime_type
 */
Animation.prototype['mime_type'] = undefined;

/**
 * @member {module:model/PhotoSize} thumb
 */
Animation.prototype['thumb'] = undefined;

/**
 * Video width as defined by sender
 * @member {Number} width
 */
Animation.prototype['width'] = undefined;






export default Animation;

