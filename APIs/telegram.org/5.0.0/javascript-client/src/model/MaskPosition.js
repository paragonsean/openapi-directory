/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MaskPosition model module.
 * @module model/MaskPosition
 * @version 5.0.0
 */
class MaskPosition {
    /**
     * Constructs a new <code>MaskPosition</code>.
     * This object describes the position on faces where a mask should be placed by default.
     * @alias module:model/MaskPosition
     * @param point {module:model/MaskPosition.PointEnum} The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
     * @param scale {Number} Mask scaling coefficient. For example, 2.0 means double size.
     * @param xShift {Number} Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
     * @param yShift {Number} Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
     */
    constructor(point, scale, xShift, yShift) { 
        
        MaskPosition.initialize(this, point, scale, xShift, yShift);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, point, scale, xShift, yShift) { 
        obj['point'] = point;
        obj['scale'] = scale;
        obj['x_shift'] = xShift;
        obj['y_shift'] = yShift;
    }

    /**
     * Constructs a <code>MaskPosition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MaskPosition} obj Optional instance to populate.
     * @return {module:model/MaskPosition} The populated <code>MaskPosition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MaskPosition();

            if (data.hasOwnProperty('point')) {
                obj['point'] = ApiClient.convertToType(data['point'], 'String');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
            }
            if (data.hasOwnProperty('x_shift')) {
                obj['x_shift'] = ApiClient.convertToType(data['x_shift'], 'Number');
            }
            if (data.hasOwnProperty('y_shift')) {
                obj['y_shift'] = ApiClient.convertToType(data['y_shift'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MaskPosition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MaskPosition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MaskPosition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['point'] && !(typeof data['point'] === 'string' || data['point'] instanceof String)) {
            throw new Error("Expected the field `point` to be a primitive type in the JSON string but got " + data['point']);
        }

        return true;
    }


}

MaskPosition.RequiredProperties = ["point", "scale", "x_shift", "y_shift"];

/**
 * The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
 * @member {module:model/MaskPosition.PointEnum} point
 */
MaskPosition.prototype['point'] = undefined;

/**
 * Mask scaling coefficient. For example, 2.0 means double size.
 * @member {Number} scale
 */
MaskPosition.prototype['scale'] = undefined;

/**
 * Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
 * @member {Number} x_shift
 */
MaskPosition.prototype['x_shift'] = undefined;

/**
 * Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
 * @member {Number} y_shift
 */
MaskPosition.prototype['y_shift'] = undefined;





/**
 * Allowed values for the <code>point</code> property.
 * @enum {String}
 * @readonly
 */
MaskPosition['PointEnum'] = {

    /**
     * value: "forehead"
     * @const
     */
    "forehead": "forehead",

    /**
     * value: "eyes"
     * @const
     */
    "eyes": "eyes",

    /**
     * value: "mouth"
     * @const
     */
    "mouth": "mouth",

    /**
     * value: "chin"
     * @const
     */
    "chin": "chin"
};



export default MaskPosition;

