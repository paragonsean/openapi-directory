/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Message from './Message';
import User from './User';

/**
 * The CallbackQuery model module.
 * @module model/CallbackQuery
 * @version 5.0.0
 */
class CallbackQuery {
    /**
     * Constructs a new <code>CallbackQuery</code>.
     * This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\\_message\\_id* will be present. Exactly one of the fields *data* or *game\\_short\\_name* will be present.
     * @alias module:model/CallbackQuery
     * @param chatInstance {String} Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
     * @param from {module:model/User} 
     * @param id {String} Unique identifier for this query
     */
    constructor(chatInstance, from, id) { 
        
        CallbackQuery.initialize(this, chatInstance, from, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chatInstance, from, id) { 
        obj['chat_instance'] = chatInstance;
        obj['from'] = from;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>CallbackQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallbackQuery} obj Optional instance to populate.
     * @return {module:model/CallbackQuery} The populated <code>CallbackQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallbackQuery();

            if (data.hasOwnProperty('chat_instance')) {
                obj['chat_instance'] = ApiClient.convertToType(data['chat_instance'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = User.constructFromObject(data['from']);
            }
            if (data.hasOwnProperty('game_short_name')) {
                obj['game_short_name'] = ApiClient.convertToType(data['game_short_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inline_message_id')) {
                obj['inline_message_id'] = ApiClient.convertToType(data['inline_message_id'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = Message.constructFromObject(data['message']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallbackQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallbackQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CallbackQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['chat_instance'] && !(typeof data['chat_instance'] === 'string' || data['chat_instance'] instanceof String)) {
            throw new Error("Expected the field `chat_instance` to be a primitive type in the JSON string but got " + data['chat_instance']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
          User.validateJSON(data['from']);
        }
        // ensure the json data is a string
        if (data['game_short_name'] && !(typeof data['game_short_name'] === 'string' || data['game_short_name'] instanceof String)) {
            throw new Error("Expected the field `game_short_name` to be a primitive type in the JSON string but got " + data['game_short_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['inline_message_id'] && !(typeof data['inline_message_id'] === 'string' || data['inline_message_id'] instanceof String)) {
            throw new Error("Expected the field `inline_message_id` to be a primitive type in the JSON string but got " + data['inline_message_id']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          Message.validateJSON(data['message']);
        }

        return true;
    }


}

CallbackQuery.RequiredProperties = ["chat_instance", "from", "id"];

/**
 * Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
 * @member {String} chat_instance
 */
CallbackQuery.prototype['chat_instance'] = undefined;

/**
 * *Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
 * @member {String} data
 */
CallbackQuery.prototype['data'] = undefined;

/**
 * @member {module:model/User} from
 */
CallbackQuery.prototype['from'] = undefined;

/**
 * *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game
 * @member {String} game_short_name
 */
CallbackQuery.prototype['game_short_name'] = undefined;

/**
 * Unique identifier for this query
 * @member {String} id
 */
CallbackQuery.prototype['id'] = undefined;

/**
 * *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.
 * @member {String} inline_message_id
 */
CallbackQuery.prototype['inline_message_id'] = undefined;

/**
 * @member {module:model/Message} message
 */
CallbackQuery.prototype['message'] = undefined;






export default CallbackQuery;

