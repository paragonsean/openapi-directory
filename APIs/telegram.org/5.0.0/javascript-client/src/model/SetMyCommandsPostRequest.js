/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BotCommand from './BotCommand';

/**
 * The SetMyCommandsPostRequest model module.
 * @module model/SetMyCommandsPostRequest
 * @version 5.0.0
 */
class SetMyCommandsPostRequest {
    /**
     * Constructs a new <code>SetMyCommandsPostRequest</code>.
     * @alias module:model/SetMyCommandsPostRequest
     * @param commands {Array.<module:model/BotCommand>} A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
     */
    constructor(commands) { 
        
        SetMyCommandsPostRequest.initialize(this, commands);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, commands) { 
        obj['commands'] = commands;
    }

    /**
     * Constructs a <code>SetMyCommandsPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SetMyCommandsPostRequest} obj Optional instance to populate.
     * @return {module:model/SetMyCommandsPostRequest} The populated <code>SetMyCommandsPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SetMyCommandsPostRequest();

            if (data.hasOwnProperty('commands')) {
                obj['commands'] = ApiClient.convertToType(data['commands'], [BotCommand]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SetMyCommandsPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SetMyCommandsPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SetMyCommandsPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['commands']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['commands'])) {
                throw new Error("Expected the field `commands` to be an array in the JSON data but got " + data['commands']);
            }
            // validate the optional field `commands` (array)
            for (const item of data['commands']) {
                BotCommand.validateJSON(item);
            };
        }

        return true;
    }


}

SetMyCommandsPostRequest.RequiredProperties = ["commands"];

/**
 * A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
 * @member {Array.<module:model/BotCommand>} commands
 */
SetMyCommandsPostRequest.prototype['commands'] = undefined;






export default SetMyCommandsPostRequest;

