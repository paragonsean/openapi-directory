/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';

/**
 * The Venue model module.
 * @module model/Venue
 * @version 5.0.0
 */
class Venue {
    /**
     * Constructs a new <code>Venue</code>.
     * This object represents a venue.
     * @alias module:model/Venue
     * @param address {String} Address of the venue
     * @param location {module:model/Location} 
     * @param title {String} Name of the venue
     */
    constructor(address, location, title) { 
        
        Venue.initialize(this, address, location, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, location, title) { 
        obj['address'] = address;
        obj['location'] = location;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Venue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Venue} obj Optional instance to populate.
     * @return {module:model/Venue} The populated <code>Venue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Venue();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('foursquare_id')) {
                obj['foursquare_id'] = ApiClient.convertToType(data['foursquare_id'], 'String');
            }
            if (data.hasOwnProperty('foursquare_type')) {
                obj['foursquare_type'] = ApiClient.convertToType(data['foursquare_type'], 'String');
            }
            if (data.hasOwnProperty('google_place_id')) {
                obj['google_place_id'] = ApiClient.convertToType(data['google_place_id'], 'String');
            }
            if (data.hasOwnProperty('google_place_type')) {
                obj['google_place_type'] = ApiClient.convertToType(data['google_place_type'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Venue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Venue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Venue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['foursquare_id'] && !(typeof data['foursquare_id'] === 'string' || data['foursquare_id'] instanceof String)) {
            throw new Error("Expected the field `foursquare_id` to be a primitive type in the JSON string but got " + data['foursquare_id']);
        }
        // ensure the json data is a string
        if (data['foursquare_type'] && !(typeof data['foursquare_type'] === 'string' || data['foursquare_type'] instanceof String)) {
            throw new Error("Expected the field `foursquare_type` to be a primitive type in the JSON string but got " + data['foursquare_type']);
        }
        // ensure the json data is a string
        if (data['google_place_id'] && !(typeof data['google_place_id'] === 'string' || data['google_place_id'] instanceof String)) {
            throw new Error("Expected the field `google_place_id` to be a primitive type in the JSON string but got " + data['google_place_id']);
        }
        // ensure the json data is a string
        if (data['google_place_type'] && !(typeof data['google_place_type'] === 'string' || data['google_place_type'] instanceof String)) {
            throw new Error("Expected the field `google_place_type` to be a primitive type in the JSON string but got " + data['google_place_type']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Venue.RequiredProperties = ["address", "location", "title"];

/**
 * Address of the venue
 * @member {String} address
 */
Venue.prototype['address'] = undefined;

/**
 * *Optional*. Foursquare identifier of the venue
 * @member {String} foursquare_id
 */
Venue.prototype['foursquare_id'] = undefined;

/**
 * *Optional*. Foursquare type of the venue. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)
 * @member {String} foursquare_type
 */
Venue.prototype['foursquare_type'] = undefined;

/**
 * *Optional*. Google Places identifier of the venue
 * @member {String} google_place_id
 */
Venue.prototype['google_place_id'] = undefined;

/**
 * *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
 * @member {String} google_place_type
 */
Venue.prototype['google_place_type'] = undefined;

/**
 * @member {module:model/Location} location
 */
Venue.prototype['location'] = undefined;

/**
 * Name of the venue
 * @member {String} title
 */
Venue.prototype['title'] = undefined;






export default Venue;

