/**
 * Telegram Bot API
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineKeyboardMarkup from './InlineKeyboardMarkup';
import InputMessageContent from './InputMessageContent';

/**
 * The InlineQueryResultLocation model module.
 * @module model/InlineQueryResultLocation
 * @version 5.0.0
 */
class InlineQueryResultLocation {
    /**
     * Constructs a new <code>InlineQueryResultLocation</code>.
     * Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the location.
     * @alias module:model/InlineQueryResultLocation
     * @param id {String} Unique identifier for this result, 1-64 Bytes
     * @param latitude {Number} Location latitude in degrees
     * @param longitude {Number} Location longitude in degrees
     * @param title {String} Location title
     * @param type {String} Type of the result, must be *location*
     */
    constructor(id, latitude, longitude, title, type) { 
        
        InlineQueryResultLocation.initialize(this, id, latitude, longitude, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, latitude, longitude, title, type) { 
        obj['id'] = id;
        obj['latitude'] = latitude;
        obj['longitude'] = longitude;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>InlineQueryResultLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineQueryResultLocation} obj Optional instance to populate.
     * @return {module:model/InlineQueryResultLocation} The populated <code>InlineQueryResultLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineQueryResultLocation();

            if (data.hasOwnProperty('heading')) {
                obj['heading'] = ApiClient.convertToType(data['heading'], 'Number');
            }
            if (data.hasOwnProperty('horizontal_accuracy')) {
                obj['horizontal_accuracy'] = ApiClient.convertToType(data['horizontal_accuracy'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('input_message_content')) {
                obj['input_message_content'] = InputMessageContent.constructFromObject(data['input_message_content']);
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('live_period')) {
                obj['live_period'] = ApiClient.convertToType(data['live_period'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('proximity_alert_radius')) {
                obj['proximity_alert_radius'] = ApiClient.convertToType(data['proximity_alert_radius'], 'Number');
            }
            if (data.hasOwnProperty('reply_markup')) {
                obj['reply_markup'] = InlineKeyboardMarkup.constructFromObject(data['reply_markup']);
            }
            if (data.hasOwnProperty('thumb_height')) {
                obj['thumb_height'] = ApiClient.convertToType(data['thumb_height'], 'Number');
            }
            if (data.hasOwnProperty('thumb_url')) {
                obj['thumb_url'] = ApiClient.convertToType(data['thumb_url'], 'String');
            }
            if (data.hasOwnProperty('thumb_width')) {
                obj['thumb_width'] = ApiClient.convertToType(data['thumb_width'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InlineQueryResultLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InlineQueryResultLocation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InlineQueryResultLocation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `input_message_content`
        if (data['input_message_content']) { // data not null
          InputMessageContent.validateJSON(data['input_message_content']);
        }
        // validate the optional field `reply_markup`
        if (data['reply_markup']) { // data not null
          InlineKeyboardMarkup.validateJSON(data['reply_markup']);
        }
        // ensure the json data is a string
        if (data['thumb_url'] && !(typeof data['thumb_url'] === 'string' || data['thumb_url'] instanceof String)) {
            throw new Error("Expected the field `thumb_url` to be a primitive type in the JSON string but got " + data['thumb_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

InlineQueryResultLocation.RequiredProperties = ["id", "latitude", "longitude", "title", "type"];

/**
 * *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
 * @member {Number} heading
 */
InlineQueryResultLocation.prototype['heading'] = undefined;

/**
 * *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
 * @member {Number} horizontal_accuracy
 */
InlineQueryResultLocation.prototype['horizontal_accuracy'] = undefined;

/**
 * Unique identifier for this result, 1-64 Bytes
 * @member {String} id
 */
InlineQueryResultLocation.prototype['id'] = undefined;

/**
 * @member {module:model/InputMessageContent} input_message_content
 */
InlineQueryResultLocation.prototype['input_message_content'] = undefined;

/**
 * Location latitude in degrees
 * @member {Number} latitude
 */
InlineQueryResultLocation.prototype['latitude'] = undefined;

/**
 * *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
 * @member {Number} live_period
 */
InlineQueryResultLocation.prototype['live_period'] = undefined;

/**
 * Location longitude in degrees
 * @member {Number} longitude
 */
InlineQueryResultLocation.prototype['longitude'] = undefined;

/**
 * *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
 * @member {Number} proximity_alert_radius
 */
InlineQueryResultLocation.prototype['proximity_alert_radius'] = undefined;

/**
 * @member {module:model/InlineKeyboardMarkup} reply_markup
 */
InlineQueryResultLocation.prototype['reply_markup'] = undefined;

/**
 * *Optional*. Thumbnail height
 * @member {Number} thumb_height
 */
InlineQueryResultLocation.prototype['thumb_height'] = undefined;

/**
 * *Optional*. Url of the thumbnail for the result
 * @member {String} thumb_url
 */
InlineQueryResultLocation.prototype['thumb_url'] = undefined;

/**
 * *Optional*. Thumbnail width
 * @member {Number} thumb_width
 */
InlineQueryResultLocation.prototype['thumb_width'] = undefined;

/**
 * Location title
 * @member {String} title
 */
InlineQueryResultLocation.prototype['title'] = undefined;

/**
 * Type of the result, must be *location*
 * @member {String} type
 */
InlineQueryResultLocation.prototype['type'] = undefined;






export default InlineQueryResultLocation;

