/**
 * SchoolDigger API V1
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.
 *
 * The version of the OpenAPI document: v1
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APILatLong from './APILatLong';

/**
 * The APILocation model module.
 * @module model/APILocation
 * @version v1
 */
class APILocation {
    /**
     * Constructs a new <code>APILocation</code>.
     * @alias module:model/APILocation
     */
    constructor() { 
        
        APILocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>APILocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/APILocation} obj Optional instance to populate.
     * @return {module:model/APILocation} The populated <code>APILocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new APILocation();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('cityURL')) {
                obj['cityURL'] = ApiClient.convertToType(data['cityURL'], 'String');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('latLong')) {
                obj['latLong'] = APILatLong.constructFromObject(data['latLong']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateFull')) {
                obj['stateFull'] = ApiClient.convertToType(data['stateFull'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
            if (data.hasOwnProperty('zip4')) {
                obj['zip4'] = ApiClient.convertToType(data['zip4'], 'String');
            }
            if (data.hasOwnProperty('zipURL')) {
                obj['zipURL'] = ApiClient.convertToType(data['zipURL'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>APILocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>APILocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['cityURL'] && !(typeof data['cityURL'] === 'string' || data['cityURL'] instanceof String)) {
            throw new Error("Expected the field `cityURL` to be a primitive type in the JSON string but got " + data['cityURL']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // validate the optional field `latLong`
        if (data['latLong']) { // data not null
          APILatLong.validateJSON(data['latLong']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateFull'] && !(typeof data['stateFull'] === 'string' || data['stateFull'] instanceof String)) {
            throw new Error("Expected the field `stateFull` to be a primitive type in the JSON string but got " + data['stateFull']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }
        // ensure the json data is a string
        if (data['zip4'] && !(typeof data['zip4'] === 'string' || data['zip4'] instanceof String)) {
            throw new Error("Expected the field `zip4` to be a primitive type in the JSON string but got " + data['zip4']);
        }
        // ensure the json data is a string
        if (data['zipURL'] && !(typeof data['zipURL'] === 'string' || data['zipURL'] instanceof String)) {
            throw new Error("Expected the field `zipURL` to be a primitive type in the JSON string but got " + data['zipURL']);
        }

        return true;
    }


}



/**
 * @member {String} city
 */
APILocation.prototype['city'] = undefined;

/**
 * SchoolDigger URL for schools in this city
 * @member {String} cityURL
 */
APILocation.prototype['cityURL'] = undefined;

/**
 * HTML formatted address
 * @member {String} html
 */
APILocation.prototype['html'] = undefined;

/**
 * @member {module:model/APILatLong} latLong
 */
APILocation.prototype['latLong'] = undefined;

/**
 * @member {String} state
 */
APILocation.prototype['state'] = undefined;

/**
 * Full state name (WA = Washington)
 * @member {String} stateFull
 */
APILocation.prototype['stateFull'] = undefined;

/**
 * @member {String} street
 */
APILocation.prototype['street'] = undefined;

/**
 * @member {String} zip
 */
APILocation.prototype['zip'] = undefined;

/**
 * @member {String} zip4
 */
APILocation.prototype['zip4'] = undefined;

/**
 * SchoolDigger URL for schools in this zip code
 * @member {String} zipURL
 */
APILocation.prototype['zipURL'] = undefined;






export default APILocation;

