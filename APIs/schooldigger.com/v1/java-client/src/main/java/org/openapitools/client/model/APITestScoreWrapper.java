/*
 * SchoolDigger API V1
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.
 *
 * The version of the OpenAPI document: v1
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.APITestScore;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APITestScoreWrapper
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:02.382564-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APITestScoreWrapper {
  public static final String SERIALIZED_NAME_DISTRICT_TEST_SCORE = "districtTestScore";
  @SerializedName(SERIALIZED_NAME_DISTRICT_TEST_SCORE)
  private APITestScore districtTestScore;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private String grade;

  public static final String SERIALIZED_NAME_SCHOOL_TEST_SCORE = "schoolTestScore";
  @SerializedName(SERIALIZED_NAME_SCHOOL_TEST_SCORE)
  private APITestScore schoolTestScore;

  public static final String SERIALIZED_NAME_STATE_TEST_SCORE = "stateTestScore";
  @SerializedName(SERIALIZED_NAME_STATE_TEST_SCORE)
  private APITestScore stateTestScore;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private String test;

  public static final String SERIALIZED_NAME_TIER1 = "tier1";
  @SerializedName(SERIALIZED_NAME_TIER1)
  private String tier1;

  public static final String SERIALIZED_NAME_TIER2 = "tier2";
  @SerializedName(SERIALIZED_NAME_TIER2)
  private String tier2;

  public static final String SERIALIZED_NAME_TIER3 = "tier3";
  @SerializedName(SERIALIZED_NAME_TIER3)
  private String tier3;

  public static final String SERIALIZED_NAME_TIER4 = "tier4";
  @SerializedName(SERIALIZED_NAME_TIER4)
  private String tier4;

  public static final String SERIALIZED_NAME_TIER5 = "tier5";
  @SerializedName(SERIALIZED_NAME_TIER5)
  private String tier5;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public APITestScoreWrapper() {
  }

  public APITestScoreWrapper districtTestScore(APITestScore districtTestScore) {
    this.districtTestScore = districtTestScore;
    return this;
  }

  /**
   * Get districtTestScore
   * @return districtTestScore
   */
  @javax.annotation.Nullable
  public APITestScore getDistrictTestScore() {
    return districtTestScore;
  }

  public void setDistrictTestScore(APITestScore districtTestScore) {
    this.districtTestScore = districtTestScore;
  }


  public APITestScoreWrapper grade(String grade) {
    this.grade = grade;
    return this;
  }

  /**
   * Get grade
   * @return grade
   */
  @javax.annotation.Nullable
  public String getGrade() {
    return grade;
  }

  public void setGrade(String grade) {
    this.grade = grade;
  }


  public APITestScoreWrapper schoolTestScore(APITestScore schoolTestScore) {
    this.schoolTestScore = schoolTestScore;
    return this;
  }

  /**
   * Get schoolTestScore
   * @return schoolTestScore
   */
  @javax.annotation.Nullable
  public APITestScore getSchoolTestScore() {
    return schoolTestScore;
  }

  public void setSchoolTestScore(APITestScore schoolTestScore) {
    this.schoolTestScore = schoolTestScore;
  }


  public APITestScoreWrapper stateTestScore(APITestScore stateTestScore) {
    this.stateTestScore = stateTestScore;
    return this;
  }

  /**
   * Get stateTestScore
   * @return stateTestScore
   */
  @javax.annotation.Nullable
  public APITestScore getStateTestScore() {
    return stateTestScore;
  }

  public void setStateTestScore(APITestScore stateTestScore) {
    this.stateTestScore = stateTestScore;
  }


  public APITestScoreWrapper subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Test subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public APITestScoreWrapper test(String test) {
    this.test = test;
    return this;
  }

  /**
   * The name of the state-administered test
   * @return test
   */
  @javax.annotation.Nullable
  public String getTest() {
    return test;
  }

  public void setTest(String test) {
    this.test = test;
  }


  public APITestScoreWrapper tier1(String tier1) {
    this.tier1 = tier1;
    return this;
  }

  /**
   * Tier 1 test score description (Enterprise API level only)
   * @return tier1
   */
  @javax.annotation.Nullable
  public String getTier1() {
    return tier1;
  }

  public void setTier1(String tier1) {
    this.tier1 = tier1;
  }


  public APITestScoreWrapper tier2(String tier2) {
    this.tier2 = tier2;
    return this;
  }

  /**
   * Tier 2 test score description (Enterprise API level only)
   * @return tier2
   */
  @javax.annotation.Nullable
  public String getTier2() {
    return tier2;
  }

  public void setTier2(String tier2) {
    this.tier2 = tier2;
  }


  public APITestScoreWrapper tier3(String tier3) {
    this.tier3 = tier3;
    return this;
  }

  /**
   * Tier 3 test score description (Enterprise API level only)
   * @return tier3
   */
  @javax.annotation.Nullable
  public String getTier3() {
    return tier3;
  }

  public void setTier3(String tier3) {
    this.tier3 = tier3;
  }


  public APITestScoreWrapper tier4(String tier4) {
    this.tier4 = tier4;
    return this;
  }

  /**
   * Tier 4 test score description (Enterprise API level only)
   * @return tier4
   */
  @javax.annotation.Nullable
  public String getTier4() {
    return tier4;
  }

  public void setTier4(String tier4) {
    this.tier4 = tier4;
  }


  public APITestScoreWrapper tier5(String tier5) {
    this.tier5 = tier5;
    return this;
  }

  /**
   * Tier 5 test score description (Enterprise API level only)
   * @return tier5
   */
  @javax.annotation.Nullable
  public String getTier5() {
    return tier5;
  }

  public void setTier5(String tier5) {
    this.tier5 = tier5;
  }


  public APITestScoreWrapper year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Year test was administered (2018 &#x3D; 2017-18)
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APITestScoreWrapper apITestScoreWrapper = (APITestScoreWrapper) o;
    return Objects.equals(this.districtTestScore, apITestScoreWrapper.districtTestScore) &&
        Objects.equals(this.grade, apITestScoreWrapper.grade) &&
        Objects.equals(this.schoolTestScore, apITestScoreWrapper.schoolTestScore) &&
        Objects.equals(this.stateTestScore, apITestScoreWrapper.stateTestScore) &&
        Objects.equals(this.subject, apITestScoreWrapper.subject) &&
        Objects.equals(this.test, apITestScoreWrapper.test) &&
        Objects.equals(this.tier1, apITestScoreWrapper.tier1) &&
        Objects.equals(this.tier2, apITestScoreWrapper.tier2) &&
        Objects.equals(this.tier3, apITestScoreWrapper.tier3) &&
        Objects.equals(this.tier4, apITestScoreWrapper.tier4) &&
        Objects.equals(this.tier5, apITestScoreWrapper.tier5) &&
        Objects.equals(this.year, apITestScoreWrapper.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(districtTestScore, grade, schoolTestScore, stateTestScore, subject, test, tier1, tier2, tier3, tier4, tier5, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APITestScoreWrapper {\n");
    sb.append("    districtTestScore: ").append(toIndentedString(districtTestScore)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    schoolTestScore: ").append(toIndentedString(schoolTestScore)).append("\n");
    sb.append("    stateTestScore: ").append(toIndentedString(stateTestScore)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    tier1: ").append(toIndentedString(tier1)).append("\n");
    sb.append("    tier2: ").append(toIndentedString(tier2)).append("\n");
    sb.append("    tier3: ").append(toIndentedString(tier3)).append("\n");
    sb.append("    tier4: ").append(toIndentedString(tier4)).append("\n");
    sb.append("    tier5: ").append(toIndentedString(tier5)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("districtTestScore");
    openapiFields.add("grade");
    openapiFields.add("schoolTestScore");
    openapiFields.add("stateTestScore");
    openapiFields.add("subject");
    openapiFields.add("test");
    openapiFields.add("tier1");
    openapiFields.add("tier2");
    openapiFields.add("tier3");
    openapiFields.add("tier4");
    openapiFields.add("tier5");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APITestScoreWrapper
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APITestScoreWrapper.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APITestScoreWrapper is not found in the empty JSON string", APITestScoreWrapper.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APITestScoreWrapper.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APITestScoreWrapper` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `districtTestScore`
      if (jsonObj.get("districtTestScore") != null && !jsonObj.get("districtTestScore").isJsonNull()) {
        APITestScore.validateJsonElement(jsonObj.get("districtTestScore"));
      }
      if ((jsonObj.get("grade") != null && !jsonObj.get("grade").isJsonNull()) && !jsonObj.get("grade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grade").toString()));
      }
      // validate the optional field `schoolTestScore`
      if (jsonObj.get("schoolTestScore") != null && !jsonObj.get("schoolTestScore").isJsonNull()) {
        APITestScore.validateJsonElement(jsonObj.get("schoolTestScore"));
      }
      // validate the optional field `stateTestScore`
      if (jsonObj.get("stateTestScore") != null && !jsonObj.get("stateTestScore").isJsonNull()) {
        APITestScore.validateJsonElement(jsonObj.get("stateTestScore"));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("test") != null && !jsonObj.get("test").isJsonNull()) && !jsonObj.get("test").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `test` to be a primitive type in the JSON string but got `%s`", jsonObj.get("test").toString()));
      }
      if ((jsonObj.get("tier1") != null && !jsonObj.get("tier1").isJsonNull()) && !jsonObj.get("tier1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier1").toString()));
      }
      if ((jsonObj.get("tier2") != null && !jsonObj.get("tier2").isJsonNull()) && !jsonObj.get("tier2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier2").toString()));
      }
      if ((jsonObj.get("tier3") != null && !jsonObj.get("tier3").isJsonNull()) && !jsonObj.get("tier3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier3").toString()));
      }
      if ((jsonObj.get("tier4") != null && !jsonObj.get("tier4").isJsonNull()) && !jsonObj.get("tier4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier4").toString()));
      }
      if ((jsonObj.get("tier5") != null && !jsonObj.get("tier5").isJsonNull()) && !jsonObj.get("tier5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier5").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APITestScoreWrapper.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APITestScoreWrapper' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APITestScoreWrapper> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APITestScoreWrapper.class));

       return (TypeAdapter<T>) new TypeAdapter<APITestScoreWrapper>() {
           @Override
           public void write(JsonWriter out, APITestScoreWrapper value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APITestScoreWrapper read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APITestScoreWrapper given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APITestScoreWrapper
   * @throws IOException if the JSON string is invalid with respect to APITestScoreWrapper
   */
  public static APITestScoreWrapper fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APITestScoreWrapper.class);
  }

  /**
   * Convert an instance of APITestScoreWrapper to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

