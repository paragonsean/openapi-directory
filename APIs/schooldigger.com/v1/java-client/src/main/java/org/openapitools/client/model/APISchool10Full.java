/*
 * SchoolDigger API V1
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.
 *
 * The version of the OpenAPI document: v1
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.APIBoundary;
import org.openapitools.client.model.APICounty;
import org.openapitools.client.model.APIDistrictSum;
import org.openapitools.client.model.APILocation;
import org.openapitools.client.model.APIRankHistory;
import org.openapitools.client.model.APITestScoreWrapper;
import org.openapitools.client.model.APIYearlyDemographics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APISchool10Full
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:02.382564-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APISchool10Full {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private APILocation address;

  public static final String SERIALIZED_NAME_BOUNDARY = "boundary";
  @SerializedName(SERIALIZED_NAME_BOUNDARY)
  private APIBoundary boundary;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private APICounty county;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private APIDistrictSum district;

  public static final String SERIALIZED_NAME_HIGH_GRADE = "highGrade";
  @SerializedName(SERIALIZED_NAME_HIGH_GRADE)
  private String highGrade;

  public static final String SERIALIZED_NAME_IS_CHARTER_SCHOOL = "isCharterSchool";
  @SerializedName(SERIALIZED_NAME_IS_CHARTER_SCHOOL)
  private String isCharterSchool;

  public static final String SERIALIZED_NAME_IS_MAGNET_SCHOOL = "isMagnetSchool";
  @SerializedName(SERIALIZED_NAME_IS_MAGNET_SCHOOL)
  private String isMagnetSchool;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "isPrivate";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_IS_TITLE_I_SCHOOL = "isTitleISchool";
  @SerializedName(SERIALIZED_NAME_IS_TITLE_I_SCHOOL)
  private String isTitleISchool;

  public static final String SERIALIZED_NAME_IS_TITLE_I_SCHOOLWIDE_SCHOOL = "isTitleISchoolwideSchool";
  @SerializedName(SERIALIZED_NAME_IS_TITLE_I_SCHOOLWIDE_SCHOOL)
  private String isTitleISchoolwideSchool;

  public static final String SERIALIZED_NAME_IS_VIRTUAL_SCHOOL = "isVirtualSchool";
  @SerializedName(SERIALIZED_NAME_IS_VIRTUAL_SCHOOL)
  private String isVirtualSchool;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_LOW_GRADE = "lowGrade";
  @SerializedName(SERIALIZED_NAME_LOW_GRADE)
  private String lowGrade;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_PRIVATE_COED = "privateCoed";
  @SerializedName(SERIALIZED_NAME_PRIVATE_COED)
  private String privateCoed;

  public static final String SERIALIZED_NAME_PRIVATE_DAYS = "privateDays";
  @SerializedName(SERIALIZED_NAME_PRIVATE_DAYS)
  private Integer privateDays;

  public static final String SERIALIZED_NAME_PRIVATE_HAS_LIBRARY = "privateHasLibrary";
  @SerializedName(SERIALIZED_NAME_PRIVATE_HAS_LIBRARY)
  private Boolean privateHasLibrary;

  public static final String SERIALIZED_NAME_PRIVATE_HOURS = "privateHours";
  @SerializedName(SERIALIZED_NAME_PRIVATE_HOURS)
  private Double privateHours;

  public static final String SERIALIZED_NAME_PRIVATE_ORIENTATION = "privateOrientation";
  @SerializedName(SERIALIZED_NAME_PRIVATE_ORIENTATION)
  private String privateOrientation;

  public static final String SERIALIZED_NAME_RANK_HISTORY = "rankHistory";
  @SerializedName(SERIALIZED_NAME_RANK_HISTORY)
  private List<APIRankHistory> rankHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANK_MOVEMENT = "rankMovement";
  @SerializedName(SERIALIZED_NAME_RANK_MOVEMENT)
  private Integer rankMovement;

  public static final String SERIALIZED_NAME_SCHOOL_LEVEL = "schoolLevel";
  @SerializedName(SERIALIZED_NAME_SCHOOL_LEVEL)
  private String schoolLevel;

  public static final String SERIALIZED_NAME_SCHOOL_NAME = "schoolName";
  @SerializedName(SERIALIZED_NAME_SCHOOL_NAME)
  private String schoolName;

  public static final String SERIALIZED_NAME_SCHOOL_YEARLY_DETAILS = "schoolYearlyDetails";
  @SerializedName(SERIALIZED_NAME_SCHOOL_YEARLY_DETAILS)
  private List<APIYearlyDemographics> schoolYearlyDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHOOLID = "schoolid";
  @SerializedName(SERIALIZED_NAME_SCHOOLID)
  private String schoolid;

  public static final String SERIALIZED_NAME_TEST_SCORES = "testScores";
  @SerializedName(SERIALIZED_NAME_TEST_SCORES)
  private List<APITestScoreWrapper> testScores = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_COMPARE = "urlCompare";
  @SerializedName(SERIALIZED_NAME_URL_COMPARE)
  private String urlCompare;

  public APISchool10Full() {
  }

  public APISchool10Full address(APILocation address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public APILocation getAddress() {
    return address;
  }

  public void setAddress(APILocation address) {
    this.address = address;
  }


  public APISchool10Full boundary(APIBoundary boundary) {
    this.boundary = boundary;
    return this;
  }

  /**
   * Get boundary
   * @return boundary
   */
  @javax.annotation.Nullable
  public APIBoundary getBoundary() {
    return boundary;
  }

  public void setBoundary(APIBoundary boundary) {
    this.boundary = boundary;
  }


  public APISchool10Full county(APICounty county) {
    this.county = county;
    return this;
  }

  /**
   * Get county
   * @return county
   */
  @javax.annotation.Nullable
  public APICounty getCounty() {
    return county;
  }

  public void setCounty(APICounty county) {
    this.county = county;
  }


  public APISchool10Full district(APIDistrictSum district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable
  public APIDistrictSum getDistrict() {
    return district;
  }

  public void setDistrict(APIDistrictSum district) {
    this.district = district;
  }


  public APISchool10Full highGrade(String highGrade) {
    this.highGrade = highGrade;
    return this;
  }

  /**
   * The high grade served by this school
   * @return highGrade
   */
  @javax.annotation.Nullable
  public String getHighGrade() {
    return highGrade;
  }

  public void setHighGrade(String highGrade) {
    this.highGrade = highGrade;
  }


  public APISchool10Full isCharterSchool(String isCharterSchool) {
    this.isCharterSchool = isCharterSchool;
    return this;
  }

  /**
   * Indicates if school is a charter school (Yes/No/n-a)
   * @return isCharterSchool
   */
  @javax.annotation.Nullable
  public String getIsCharterSchool() {
    return isCharterSchool;
  }

  public void setIsCharterSchool(String isCharterSchool) {
    this.isCharterSchool = isCharterSchool;
  }


  public APISchool10Full isMagnetSchool(String isMagnetSchool) {
    this.isMagnetSchool = isMagnetSchool;
    return this;
  }

  /**
   * Indicates if school is a magnet school (Yes/No/n-a)
   * @return isMagnetSchool
   */
  @javax.annotation.Nullable
  public String getIsMagnetSchool() {
    return isMagnetSchool;
  }

  public void setIsMagnetSchool(String isMagnetSchool) {
    this.isMagnetSchool = isMagnetSchool;
  }


  public APISchool10Full isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * Indicates if school is a private school (Yes/No)
   * @return isPrivate
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivate() {
    return isPrivate;
  }

  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public APISchool10Full isTitleISchool(String isTitleISchool) {
    this.isTitleISchool = isTitleISchool;
    return this;
  }

  /**
   * Indicates if school is a Title I school (Yes/No/n-a)
   * @return isTitleISchool
   */
  @javax.annotation.Nullable
  public String getIsTitleISchool() {
    return isTitleISchool;
  }

  public void setIsTitleISchool(String isTitleISchool) {
    this.isTitleISchool = isTitleISchool;
  }


  public APISchool10Full isTitleISchoolwideSchool(String isTitleISchoolwideSchool) {
    this.isTitleISchoolwideSchool = isTitleISchoolwideSchool;
    return this;
  }

  /**
   * Indicates if a school-wide Title I school (Yes/No/n-a)
   * @return isTitleISchoolwideSchool
   */
  @javax.annotation.Nullable
  public String getIsTitleISchoolwideSchool() {
    return isTitleISchoolwideSchool;
  }

  public void setIsTitleISchoolwideSchool(String isTitleISchoolwideSchool) {
    this.isTitleISchoolwideSchool = isTitleISchoolwideSchool;
  }


  public APISchool10Full isVirtualSchool(String isVirtualSchool) {
    this.isVirtualSchool = isVirtualSchool;
    return this;
  }

  /**
   * Indicates if school is a virtual school (Yes/No/n-a)
   * @return isVirtualSchool
   */
  @javax.annotation.Nullable
  public String getIsVirtualSchool() {
    return isVirtualSchool;
  }

  public void setIsVirtualSchool(String isVirtualSchool) {
    this.isVirtualSchool = isVirtualSchool;
  }


  public APISchool10Full locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * NCES Locale of school (https://nces.ed.gov/ccd/rural_locales.asp)
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public APISchool10Full lowGrade(String lowGrade) {
    this.lowGrade = lowGrade;
    return this;
  }

  /**
   * The low grade served by this school (PK &#x3D; Prekindergarten, K &#x3D; Kindergarten)
   * @return lowGrade
   */
  @javax.annotation.Nullable
  public String getLowGrade() {
    return lowGrade;
  }

  public void setLowGrade(String lowGrade) {
    this.lowGrade = lowGrade;
  }


  public APISchool10Full phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * School phone number
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public APISchool10Full privateCoed(String privateCoed) {
    this.privateCoed = privateCoed;
    return this;
  }

  /**
   * Coed/Boys/Girls (private schools only)
   * @return privateCoed
   */
  @javax.annotation.Nullable
  public String getPrivateCoed() {
    return privateCoed;
  }

  public void setPrivateCoed(String privateCoed) {
    this.privateCoed = privateCoed;
  }


  public APISchool10Full privateDays(Integer privateDays) {
    this.privateDays = privateDays;
    return this;
  }

  /**
   * Days in the school year (private schools only)
   * @return privateDays
   */
  @javax.annotation.Nullable
  public Integer getPrivateDays() {
    return privateDays;
  }

  public void setPrivateDays(Integer privateDays) {
    this.privateDays = privateDays;
  }


  public APISchool10Full privateHasLibrary(Boolean privateHasLibrary) {
    this.privateHasLibrary = privateHasLibrary;
    return this;
  }

  /**
   * Indicates if the school has a library (private schools only)
   * @return privateHasLibrary
   */
  @javax.annotation.Nullable
  public Boolean getPrivateHasLibrary() {
    return privateHasLibrary;
  }

  public void setPrivateHasLibrary(Boolean privateHasLibrary) {
    this.privateHasLibrary = privateHasLibrary;
  }


  public APISchool10Full privateHours(Double privateHours) {
    this.privateHours = privateHours;
    return this;
  }

  /**
   * Hours in the school day (private schools only)
   * @return privateHours
   */
  @javax.annotation.Nullable
  public Double getPrivateHours() {
    return privateHours;
  }

  public void setPrivateHours(Double privateHours) {
    this.privateHours = privateHours;
  }


  public APISchool10Full privateOrientation(String privateOrientation) {
    this.privateOrientation = privateOrientation;
    return this;
  }

  /**
   * Affiliation of the school (private schools only)
   * @return privateOrientation
   */
  @javax.annotation.Nullable
  public String getPrivateOrientation() {
    return privateOrientation;
  }

  public void setPrivateOrientation(String privateOrientation) {
    this.privateOrientation = privateOrientation;
  }


  public APISchool10Full rankHistory(List<APIRankHistory> rankHistory) {
    this.rankHistory = rankHistory;
    return this;
  }

  public APISchool10Full addRankHistoryItem(APIRankHistory rankHistoryItem) {
    if (this.rankHistory == null) {
      this.rankHistory = new ArrayList<>();
    }
    this.rankHistory.add(rankHistoryItem);
    return this;
  }

  /**
   * SchoolDigger yearly rank history of the school
   * @return rankHistory
   */
  @javax.annotation.Nullable
  public List<APIRankHistory> getRankHistory() {
    return rankHistory;
  }

  public void setRankHistory(List<APIRankHistory> rankHistory) {
    this.rankHistory = rankHistory;
  }


  public APISchool10Full rankMovement(Integer rankMovement) {
    this.rankMovement = rankMovement;
    return this;
  }

  /**
   * Returns the movement of rank for this school between current and previous year
   * @return rankMovement
   */
  @javax.annotation.Nullable
  public Integer getRankMovement() {
    return rankMovement;
  }

  public void setRankMovement(Integer rankMovement) {
    this.rankMovement = rankMovement;
  }


  public APISchool10Full schoolLevel(String schoolLevel) {
    this.schoolLevel = schoolLevel;
    return this;
  }

  /**
   * The level of school (Elementary, Middle, High, Private, Alternative)
   * @return schoolLevel
   */
  @javax.annotation.Nullable
  public String getSchoolLevel() {
    return schoolLevel;
  }

  public void setSchoolLevel(String schoolLevel) {
    this.schoolLevel = schoolLevel;
  }


  public APISchool10Full schoolName(String schoolName) {
    this.schoolName = schoolName;
    return this;
  }

  /**
   * School name
   * @return schoolName
   */
  @javax.annotation.Nullable
  public String getSchoolName() {
    return schoolName;
  }

  public void setSchoolName(String schoolName) {
    this.schoolName = schoolName;
  }


  public APISchool10Full schoolYearlyDetails(List<APIYearlyDemographics> schoolYearlyDetails) {
    this.schoolYearlyDetails = schoolYearlyDetails;
    return this;
  }

  public APISchool10Full addSchoolYearlyDetailsItem(APIYearlyDemographics schoolYearlyDetailsItem) {
    if (this.schoolYearlyDetails == null) {
      this.schoolYearlyDetails = new ArrayList<>();
    }
    this.schoolYearlyDetails.add(schoolYearlyDetailsItem);
    return this;
  }

  /**
   * School Yearly metrics
   * @return schoolYearlyDetails
   */
  @javax.annotation.Nullable
  public List<APIYearlyDemographics> getSchoolYearlyDetails() {
    return schoolYearlyDetails;
  }

  public void setSchoolYearlyDetails(List<APIYearlyDemographics> schoolYearlyDetails) {
    this.schoolYearlyDetails = schoolYearlyDetails;
  }


  public APISchool10Full schoolid(String schoolid) {
    this.schoolid = schoolid;
    return this;
  }

  /**
   * SchoolDigger School ID Number (12 digits)
   * @return schoolid
   */
  @javax.annotation.Nullable
  public String getSchoolid() {
    return schoolid;
  }

  public void setSchoolid(String schoolid) {
    this.schoolid = schoolid;
  }


  public APISchool10Full testScores(List<APITestScoreWrapper> testScores) {
    this.testScores = testScores;
    return this;
  }

  public APISchool10Full addTestScoresItem(APITestScoreWrapper testScoresItem) {
    if (this.testScores == null) {
      this.testScores = new ArrayList<>();
    }
    this.testScores.add(testScoresItem);
    return this;
  }

  /**
   * Test scores (including district and state) -- requires Pro or Enterprise level API subscription
   * @return testScores
   */
  @javax.annotation.Nullable
  public List<APITestScoreWrapper> getTestScores() {
    return testScores;
  }

  public void setTestScores(List<APITestScoreWrapper> testScores) {
    this.testScores = testScores;
  }


  public APISchool10Full url(String url) {
    this.url = url;
    return this;
  }

  /**
   * SchoolDigger URL for this school
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public APISchool10Full urlCompare(String urlCompare) {
    this.urlCompare = urlCompare;
    return this;
  }

  /**
   * SchoolDigger URL for comparing this school to nearby schools
   * @return urlCompare
   */
  @javax.annotation.Nullable
  public String getUrlCompare() {
    return urlCompare;
  }

  public void setUrlCompare(String urlCompare) {
    this.urlCompare = urlCompare;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APISchool10Full apISchool10Full = (APISchool10Full) o;
    return Objects.equals(this.address, apISchool10Full.address) &&
        Objects.equals(this.boundary, apISchool10Full.boundary) &&
        Objects.equals(this.county, apISchool10Full.county) &&
        Objects.equals(this.district, apISchool10Full.district) &&
        Objects.equals(this.highGrade, apISchool10Full.highGrade) &&
        Objects.equals(this.isCharterSchool, apISchool10Full.isCharterSchool) &&
        Objects.equals(this.isMagnetSchool, apISchool10Full.isMagnetSchool) &&
        Objects.equals(this.isPrivate, apISchool10Full.isPrivate) &&
        Objects.equals(this.isTitleISchool, apISchool10Full.isTitleISchool) &&
        Objects.equals(this.isTitleISchoolwideSchool, apISchool10Full.isTitleISchoolwideSchool) &&
        Objects.equals(this.isVirtualSchool, apISchool10Full.isVirtualSchool) &&
        Objects.equals(this.locale, apISchool10Full.locale) &&
        Objects.equals(this.lowGrade, apISchool10Full.lowGrade) &&
        Objects.equals(this.phone, apISchool10Full.phone) &&
        Objects.equals(this.privateCoed, apISchool10Full.privateCoed) &&
        Objects.equals(this.privateDays, apISchool10Full.privateDays) &&
        Objects.equals(this.privateHasLibrary, apISchool10Full.privateHasLibrary) &&
        Objects.equals(this.privateHours, apISchool10Full.privateHours) &&
        Objects.equals(this.privateOrientation, apISchool10Full.privateOrientation) &&
        Objects.equals(this.rankHistory, apISchool10Full.rankHistory) &&
        Objects.equals(this.rankMovement, apISchool10Full.rankMovement) &&
        Objects.equals(this.schoolLevel, apISchool10Full.schoolLevel) &&
        Objects.equals(this.schoolName, apISchool10Full.schoolName) &&
        Objects.equals(this.schoolYearlyDetails, apISchool10Full.schoolYearlyDetails) &&
        Objects.equals(this.schoolid, apISchool10Full.schoolid) &&
        Objects.equals(this.testScores, apISchool10Full.testScores) &&
        Objects.equals(this.url, apISchool10Full.url) &&
        Objects.equals(this.urlCompare, apISchool10Full.urlCompare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, boundary, county, district, highGrade, isCharterSchool, isMagnetSchool, isPrivate, isTitleISchool, isTitleISchoolwideSchool, isVirtualSchool, locale, lowGrade, phone, privateCoed, privateDays, privateHasLibrary, privateHours, privateOrientation, rankHistory, rankMovement, schoolLevel, schoolName, schoolYearlyDetails, schoolid, testScores, url, urlCompare);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APISchool10Full {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    boundary: ").append(toIndentedString(boundary)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    highGrade: ").append(toIndentedString(highGrade)).append("\n");
    sb.append("    isCharterSchool: ").append(toIndentedString(isCharterSchool)).append("\n");
    sb.append("    isMagnetSchool: ").append(toIndentedString(isMagnetSchool)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    isTitleISchool: ").append(toIndentedString(isTitleISchool)).append("\n");
    sb.append("    isTitleISchoolwideSchool: ").append(toIndentedString(isTitleISchoolwideSchool)).append("\n");
    sb.append("    isVirtualSchool: ").append(toIndentedString(isVirtualSchool)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    lowGrade: ").append(toIndentedString(lowGrade)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    privateCoed: ").append(toIndentedString(privateCoed)).append("\n");
    sb.append("    privateDays: ").append(toIndentedString(privateDays)).append("\n");
    sb.append("    privateHasLibrary: ").append(toIndentedString(privateHasLibrary)).append("\n");
    sb.append("    privateHours: ").append(toIndentedString(privateHours)).append("\n");
    sb.append("    privateOrientation: ").append(toIndentedString(privateOrientation)).append("\n");
    sb.append("    rankHistory: ").append(toIndentedString(rankHistory)).append("\n");
    sb.append("    rankMovement: ").append(toIndentedString(rankMovement)).append("\n");
    sb.append("    schoolLevel: ").append(toIndentedString(schoolLevel)).append("\n");
    sb.append("    schoolName: ").append(toIndentedString(schoolName)).append("\n");
    sb.append("    schoolYearlyDetails: ").append(toIndentedString(schoolYearlyDetails)).append("\n");
    sb.append("    schoolid: ").append(toIndentedString(schoolid)).append("\n");
    sb.append("    testScores: ").append(toIndentedString(testScores)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlCompare: ").append(toIndentedString(urlCompare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("boundary");
    openapiFields.add("county");
    openapiFields.add("district");
    openapiFields.add("highGrade");
    openapiFields.add("isCharterSchool");
    openapiFields.add("isMagnetSchool");
    openapiFields.add("isPrivate");
    openapiFields.add("isTitleISchool");
    openapiFields.add("isTitleISchoolwideSchool");
    openapiFields.add("isVirtualSchool");
    openapiFields.add("locale");
    openapiFields.add("lowGrade");
    openapiFields.add("phone");
    openapiFields.add("privateCoed");
    openapiFields.add("privateDays");
    openapiFields.add("privateHasLibrary");
    openapiFields.add("privateHours");
    openapiFields.add("privateOrientation");
    openapiFields.add("rankHistory");
    openapiFields.add("rankMovement");
    openapiFields.add("schoolLevel");
    openapiFields.add("schoolName");
    openapiFields.add("schoolYearlyDetails");
    openapiFields.add("schoolid");
    openapiFields.add("testScores");
    openapiFields.add("url");
    openapiFields.add("urlCompare");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APISchool10Full
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APISchool10Full.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APISchool10Full is not found in the empty JSON string", APISchool10Full.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APISchool10Full.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APISchool10Full` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        APILocation.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `boundary`
      if (jsonObj.get("boundary") != null && !jsonObj.get("boundary").isJsonNull()) {
        APIBoundary.validateJsonElement(jsonObj.get("boundary"));
      }
      // validate the optional field `county`
      if (jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) {
        APICounty.validateJsonElement(jsonObj.get("county"));
      }
      // validate the optional field `district`
      if (jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) {
        APIDistrictSum.validateJsonElement(jsonObj.get("district"));
      }
      if ((jsonObj.get("highGrade") != null && !jsonObj.get("highGrade").isJsonNull()) && !jsonObj.get("highGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highGrade").toString()));
      }
      if ((jsonObj.get("isCharterSchool") != null && !jsonObj.get("isCharterSchool").isJsonNull()) && !jsonObj.get("isCharterSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isCharterSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isCharterSchool").toString()));
      }
      if ((jsonObj.get("isMagnetSchool") != null && !jsonObj.get("isMagnetSchool").isJsonNull()) && !jsonObj.get("isMagnetSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isMagnetSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isMagnetSchool").toString()));
      }
      if ((jsonObj.get("isTitleISchool") != null && !jsonObj.get("isTitleISchool").isJsonNull()) && !jsonObj.get("isTitleISchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isTitleISchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isTitleISchool").toString()));
      }
      if ((jsonObj.get("isTitleISchoolwideSchool") != null && !jsonObj.get("isTitleISchoolwideSchool").isJsonNull()) && !jsonObj.get("isTitleISchoolwideSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isTitleISchoolwideSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isTitleISchoolwideSchool").toString()));
      }
      if ((jsonObj.get("isVirtualSchool") != null && !jsonObj.get("isVirtualSchool").isJsonNull()) && !jsonObj.get("isVirtualSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isVirtualSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isVirtualSchool").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("lowGrade") != null && !jsonObj.get("lowGrade").isJsonNull()) && !jsonObj.get("lowGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lowGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lowGrade").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("privateCoed") != null && !jsonObj.get("privateCoed").isJsonNull()) && !jsonObj.get("privateCoed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateCoed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateCoed").toString()));
      }
      if ((jsonObj.get("privateOrientation") != null && !jsonObj.get("privateOrientation").isJsonNull()) && !jsonObj.get("privateOrientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateOrientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateOrientation").toString()));
      }
      if (jsonObj.get("rankHistory") != null && !jsonObj.get("rankHistory").isJsonNull()) {
        JsonArray jsonArrayrankHistory = jsonObj.getAsJsonArray("rankHistory");
        if (jsonArrayrankHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rankHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rankHistory` to be an array in the JSON string but got `%s`", jsonObj.get("rankHistory").toString()));
          }

          // validate the optional field `rankHistory` (array)
          for (int i = 0; i < jsonArrayrankHistory.size(); i++) {
            APIRankHistory.validateJsonElement(jsonArrayrankHistory.get(i));
          };
        }
      }
      if ((jsonObj.get("schoolLevel") != null && !jsonObj.get("schoolLevel").isJsonNull()) && !jsonObj.get("schoolLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schoolLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schoolLevel").toString()));
      }
      if ((jsonObj.get("schoolName") != null && !jsonObj.get("schoolName").isJsonNull()) && !jsonObj.get("schoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schoolName").toString()));
      }
      if (jsonObj.get("schoolYearlyDetails") != null && !jsonObj.get("schoolYearlyDetails").isJsonNull()) {
        JsonArray jsonArrayschoolYearlyDetails = jsonObj.getAsJsonArray("schoolYearlyDetails");
        if (jsonArrayschoolYearlyDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("schoolYearlyDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `schoolYearlyDetails` to be an array in the JSON string but got `%s`", jsonObj.get("schoolYearlyDetails").toString()));
          }

          // validate the optional field `schoolYearlyDetails` (array)
          for (int i = 0; i < jsonArrayschoolYearlyDetails.size(); i++) {
            APIYearlyDemographics.validateJsonElement(jsonArrayschoolYearlyDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("schoolid") != null && !jsonObj.get("schoolid").isJsonNull()) && !jsonObj.get("schoolid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schoolid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schoolid").toString()));
      }
      if (jsonObj.get("testScores") != null && !jsonObj.get("testScores").isJsonNull()) {
        JsonArray jsonArraytestScores = jsonObj.getAsJsonArray("testScores");
        if (jsonArraytestScores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testScores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testScores` to be an array in the JSON string but got `%s`", jsonObj.get("testScores").toString()));
          }

          // validate the optional field `testScores` (array)
          for (int i = 0; i < jsonArraytestScores.size(); i++) {
            APITestScoreWrapper.validateJsonElement(jsonArraytestScores.get(i));
          };
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("urlCompare") != null && !jsonObj.get("urlCompare").isJsonNull()) && !jsonObj.get("urlCompare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlCompare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlCompare").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APISchool10Full.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APISchool10Full' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APISchool10Full> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APISchool10Full.class));

       return (TypeAdapter<T>) new TypeAdapter<APISchool10Full>() {
           @Override
           public void write(JsonWriter out, APISchool10Full value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APISchool10Full read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APISchool10Full given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APISchool10Full
   * @throws IOException if the JSON string is invalid with respect to APISchool10Full
   */
  public static APISchool10Full fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APISchool10Full.class);
  }

  /**
   * Convert an instance of APISchool10Full to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

