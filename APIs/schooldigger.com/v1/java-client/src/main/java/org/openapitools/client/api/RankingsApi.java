/*
 * SchoolDigger API V1
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.
 *
 * The version of the OpenAPI document: v1
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIDistrictListRank;
import org.openapitools.client.model.APISchoolListRank;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RankingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RankingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RankingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for rankingsGetRank
     * @param st Two character state (e.g. &#39;CA&#39;) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param year The ranking year (leave blank for most recent year) (optional)
     * @param level Level of ranking: &#39;Elementary&#39;, &#39;Middle&#39;, or &#39;High&#39; (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of schools to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankingsGetRankCall(String st, String appID, String appKey, Integer year, String level, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/rankings/schools/{st}"
            .replace("{" + "st" + "}", localVarApiClient.escapeString(st.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (level != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("level", level));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (appID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appID", appID));
        }

        if (appKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appKey", appKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rankingsGetRankValidateBeforeCall(String st, String appID, String appKey, Integer year, String level, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'st' is set
        if (st == null) {
            throw new ApiException("Missing the required parameter 'st' when calling rankingsGetRank(Async)");
        }

        // verify the required parameter 'appID' is set
        if (appID == null) {
            throw new ApiException("Missing the required parameter 'appID' when calling rankingsGetRank(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling rankingsGetRank(Async)");
        }

        return rankingsGetRankCall(st, appID, appKey, year, level, page, perPage, _callback);

    }

    /**
     * Returns a SchoolDigger school ranking list
     * 
     * @param st Two character state (e.g. &#39;CA&#39;) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param year The ranking year (leave blank for most recent year) (optional)
     * @param level Level of ranking: &#39;Elementary&#39;, &#39;Middle&#39;, or &#39;High&#39; (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of schools to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @return APISchoolListRank
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APISchoolListRank rankingsGetRank(String st, String appID, String appKey, Integer year, String level, Integer page, Integer perPage) throws ApiException {
        ApiResponse<APISchoolListRank> localVarResp = rankingsGetRankWithHttpInfo(st, appID, appKey, year, level, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Returns a SchoolDigger school ranking list
     * 
     * @param st Two character state (e.g. &#39;CA&#39;) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param year The ranking year (leave blank for most recent year) (optional)
     * @param level Level of ranking: &#39;Elementary&#39;, &#39;Middle&#39;, or &#39;High&#39; (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of schools to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @return ApiResponse&lt;APISchoolListRank&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APISchoolListRank> rankingsGetRankWithHttpInfo(String st, String appID, String appKey, Integer year, String level, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = rankingsGetRankValidateBeforeCall(st, appID, appKey, year, level, page, perPage, null);
        Type localVarReturnType = new TypeToken<APISchoolListRank>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a SchoolDigger school ranking list (asynchronously)
     * 
     * @param st Two character state (e.g. &#39;CA&#39;) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param year The ranking year (leave blank for most recent year) (optional)
     * @param level Level of ranking: &#39;Elementary&#39;, &#39;Middle&#39;, or &#39;High&#39; (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of schools to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankingsGetRankAsync(String st, String appID, String appKey, Integer year, String level, Integer page, Integer perPage, final ApiCallback<APISchoolListRank> _callback) throws ApiException {

        okhttp3.Call localVarCall = rankingsGetRankValidateBeforeCall(st, appID, appKey, year, level, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<APISchoolListRank>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rankingsGetRankDistrict
     * @param st Two character state (e.g. &#39;CA&#39;) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param year The ranking year (leave blank for most recent year) (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of districts to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankingsGetRankDistrictCall(String st, String appID, String appKey, Integer year, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/rankings/districts/{st}"
            .replace("{" + "st" + "}", localVarApiClient.escapeString(st.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (appID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appID", appID));
        }

        if (appKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appKey", appKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rankingsGetRankDistrictValidateBeforeCall(String st, String appID, String appKey, Integer year, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'st' is set
        if (st == null) {
            throw new ApiException("Missing the required parameter 'st' when calling rankingsGetRankDistrict(Async)");
        }

        // verify the required parameter 'appID' is set
        if (appID == null) {
            throw new ApiException("Missing the required parameter 'appID' when calling rankingsGetRankDistrict(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling rankingsGetRankDistrict(Async)");
        }

        return rankingsGetRankDistrictCall(st, appID, appKey, year, page, perPage, _callback);

    }

    /**
     * Returns a SchoolDigger district ranking list
     * 
     * @param st Two character state (e.g. &#39;CA&#39;) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param year The ranking year (leave blank for most recent year) (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of districts to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @return APIDistrictListRank
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIDistrictListRank rankingsGetRankDistrict(String st, String appID, String appKey, Integer year, Integer page, Integer perPage) throws ApiException {
        ApiResponse<APIDistrictListRank> localVarResp = rankingsGetRankDistrictWithHttpInfo(st, appID, appKey, year, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Returns a SchoolDigger district ranking list
     * 
     * @param st Two character state (e.g. &#39;CA&#39;) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param year The ranking year (leave blank for most recent year) (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of districts to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @return ApiResponse&lt;APIDistrictListRank&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIDistrictListRank> rankingsGetRankDistrictWithHttpInfo(String st, String appID, String appKey, Integer year, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = rankingsGetRankDistrictValidateBeforeCall(st, appID, appKey, year, page, perPage, null);
        Type localVarReturnType = new TypeToken<APIDistrictListRank>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a SchoolDigger district ranking list (asynchronously)
     * 
     * @param st Two character state (e.g. &#39;CA&#39;) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param year The ranking year (leave blank for most recent year) (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of districts to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankingsGetRankDistrictAsync(String st, String appID, String appKey, Integer year, Integer page, Integer perPage, final ApiCallback<APIDistrictListRank> _callback) throws ApiException {

        okhttp3.Call localVarCall = rankingsGetRankDistrictValidateBeforeCall(st, appID, appKey, year, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<APIDistrictListRank>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
