/*
 * SchoolDigger API V1
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.
 *
 * The version of the OpenAPI document: v1
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APILEARankHistory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:02.382564-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APILEARankHistory {
  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_RANK_OF = "rankOf";
  @SerializedName(SERIALIZED_NAME_RANK_OF)
  private Integer rankOf;

  public static final String SERIALIZED_NAME_RANK_SCORE = "rankScore";
  @SerializedName(SERIALIZED_NAME_RANK_SCORE)
  private Double rankScore;

  public static final String SERIALIZED_NAME_RANK_STARS = "rankStars";
  @SerializedName(SERIALIZED_NAME_RANK_STARS)
  private Integer rankStars;

  public static final String SERIALIZED_NAME_RANK_STATEWIDE_PERCENTAGE = "rankStatewidePercentage";
  @SerializedName(SERIALIZED_NAME_RANK_STATEWIDE_PERCENTAGE)
  private Double rankStatewidePercentage;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public APILEARankHistory() {
  }

  public APILEARankHistory rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Statewide rank of this district
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public APILEARankHistory rankOf(Integer rankOf) {
    this.rankOf = rankOf;
    return this;
  }

  /**
   * Count of district ranked in this state
   * @return rankOf
   */
  @javax.annotation.Nullable
  public Integer getRankOf() {
    return rankOf;
  }

  public void setRankOf(Integer rankOf) {
    this.rankOf = rankOf;
  }


  public APILEARankHistory rankScore(Double rankScore) {
    this.rankScore = rankScore;
    return this;
  }

  /**
   * The rank score calculated by SchoolDigger (see https://www.schooldigger.com/aboutranking.aspx)
   * @return rankScore
   */
  @javax.annotation.Nullable
  public Double getRankScore() {
    return rankScore;
  }

  public void setRankScore(Double rankScore) {
    this.rankScore = rankScore;
  }


  public APILEARankHistory rankStars(Integer rankStars) {
    this.rankStars = rankStars;
    return this;
  }

  /**
   * The number of stars SchoolDigger awarded in the ranking of the district (0-5, 5 is best)
   * @return rankStars
   */
  @javax.annotation.Nullable
  public Integer getRankStars() {
    return rankStars;
  }

  public void setRankStars(Integer rankStars) {
    this.rankStars = rankStars;
  }


  public APILEARankHistory rankStatewidePercentage(Double rankStatewidePercentage) {
    this.rankStatewidePercentage = rankStatewidePercentage;
    return this;
  }

  /**
   * Percentile of this district&#39;s rank (e.g. this district performed better than (x)% of this state&#39;s districts)
   * @return rankStatewidePercentage
   */
  @javax.annotation.Nullable
  public Double getRankStatewidePercentage() {
    return rankStatewidePercentage;
  }

  public void setRankStatewidePercentage(Double rankStatewidePercentage) {
    this.rankStatewidePercentage = rankStatewidePercentage;
  }


  public APILEARankHistory year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * School year (2017 - 2016-17)
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APILEARankHistory apILEARankHistory = (APILEARankHistory) o;
    return Objects.equals(this.rank, apILEARankHistory.rank) &&
        Objects.equals(this.rankOf, apILEARankHistory.rankOf) &&
        Objects.equals(this.rankScore, apILEARankHistory.rankScore) &&
        Objects.equals(this.rankStars, apILEARankHistory.rankStars) &&
        Objects.equals(this.rankStatewidePercentage, apILEARankHistory.rankStatewidePercentage) &&
        Objects.equals(this.year, apILEARankHistory.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rank, rankOf, rankScore, rankStars, rankStatewidePercentage, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APILEARankHistory {\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    rankOf: ").append(toIndentedString(rankOf)).append("\n");
    sb.append("    rankScore: ").append(toIndentedString(rankScore)).append("\n");
    sb.append("    rankStars: ").append(toIndentedString(rankStars)).append("\n");
    sb.append("    rankStatewidePercentage: ").append(toIndentedString(rankStatewidePercentage)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rank");
    openapiFields.add("rankOf");
    openapiFields.add("rankScore");
    openapiFields.add("rankStars");
    openapiFields.add("rankStatewidePercentage");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APILEARankHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APILEARankHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APILEARankHistory is not found in the empty JSON string", APILEARankHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APILEARankHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APILEARankHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APILEARankHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APILEARankHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APILEARankHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APILEARankHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<APILEARankHistory>() {
           @Override
           public void write(JsonWriter out, APILEARankHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APILEARankHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APILEARankHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APILEARankHistory
   * @throws IOException if the JSON string is invalid with respect to APILEARankHistory
   */
  public static APILEARankHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APILEARankHistory.class);
  }

  /**
   * Convert an instance of APILEARankHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

