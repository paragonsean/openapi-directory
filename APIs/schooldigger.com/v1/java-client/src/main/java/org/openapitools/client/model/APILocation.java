/*
 * SchoolDigger API V1
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.
 *
 * The version of the OpenAPI document: v1
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.APILatLong;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APILocation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:02.382564-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APILocation {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CITY_U_R_L = "cityURL";
  @SerializedName(SERIALIZED_NAME_CITY_U_R_L)
  private String cityURL;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_LAT_LONG = "latLong";
  @SerializedName(SERIALIZED_NAME_LAT_LONG)
  private APILatLong latLong;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATE_FULL = "stateFull";
  @SerializedName(SERIALIZED_NAME_STATE_FULL)
  private String stateFull;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_ZIP4 = "zip4";
  @SerializedName(SERIALIZED_NAME_ZIP4)
  private String zip4;

  public static final String SERIALIZED_NAME_ZIP_U_R_L = "zipURL";
  @SerializedName(SERIALIZED_NAME_ZIP_U_R_L)
  private String zipURL;

  public APILocation() {
  }

  public APILocation city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public APILocation cityURL(String cityURL) {
    this.cityURL = cityURL;
    return this;
  }

  /**
   * SchoolDigger URL for schools in this city
   * @return cityURL
   */
  @javax.annotation.Nullable
  public String getCityURL() {
    return cityURL;
  }

  public void setCityURL(String cityURL) {
    this.cityURL = cityURL;
  }


  public APILocation html(String html) {
    this.html = html;
    return this;
  }

  /**
   * HTML formatted address
   * @return html
   */
  @javax.annotation.Nullable
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  public APILocation latLong(APILatLong latLong) {
    this.latLong = latLong;
    return this;
  }

  /**
   * Get latLong
   * @return latLong
   */
  @javax.annotation.Nullable
  public APILatLong getLatLong() {
    return latLong;
  }

  public void setLatLong(APILatLong latLong) {
    this.latLong = latLong;
  }


  public APILocation state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public APILocation stateFull(String stateFull) {
    this.stateFull = stateFull;
    return this;
  }

  /**
   * Full state name (WA &#x3D; Washington)
   * @return stateFull
   */
  @javax.annotation.Nullable
  public String getStateFull() {
    return stateFull;
  }

  public void setStateFull(String stateFull) {
    this.stateFull = stateFull;
  }


  public APILocation street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Get street
   * @return street
   */
  @javax.annotation.Nullable
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public APILocation zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * Get zip
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }


  public APILocation zip4(String zip4) {
    this.zip4 = zip4;
    return this;
  }

  /**
   * Get zip4
   * @return zip4
   */
  @javax.annotation.Nullable
  public String getZip4() {
    return zip4;
  }

  public void setZip4(String zip4) {
    this.zip4 = zip4;
  }


  public APILocation zipURL(String zipURL) {
    this.zipURL = zipURL;
    return this;
  }

  /**
   * SchoolDigger URL for schools in this zip code
   * @return zipURL
   */
  @javax.annotation.Nullable
  public String getZipURL() {
    return zipURL;
  }

  public void setZipURL(String zipURL) {
    this.zipURL = zipURL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APILocation apILocation = (APILocation) o;
    return Objects.equals(this.city, apILocation.city) &&
        Objects.equals(this.cityURL, apILocation.cityURL) &&
        Objects.equals(this.html, apILocation.html) &&
        Objects.equals(this.latLong, apILocation.latLong) &&
        Objects.equals(this.state, apILocation.state) &&
        Objects.equals(this.stateFull, apILocation.stateFull) &&
        Objects.equals(this.street, apILocation.street) &&
        Objects.equals(this.zip, apILocation.zip) &&
        Objects.equals(this.zip4, apILocation.zip4) &&
        Objects.equals(this.zipURL, apILocation.zipURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, cityURL, html, latLong, state, stateFull, street, zip, zip4, zipURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APILocation {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    cityURL: ").append(toIndentedString(cityURL)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    latLong: ").append(toIndentedString(latLong)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateFull: ").append(toIndentedString(stateFull)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    zip4: ").append(toIndentedString(zip4)).append("\n");
    sb.append("    zipURL: ").append(toIndentedString(zipURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("cityURL");
    openapiFields.add("html");
    openapiFields.add("latLong");
    openapiFields.add("state");
    openapiFields.add("stateFull");
    openapiFields.add("street");
    openapiFields.add("zip");
    openapiFields.add("zip4");
    openapiFields.add("zipURL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APILocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APILocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APILocation is not found in the empty JSON string", APILocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APILocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APILocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("cityURL") != null && !jsonObj.get("cityURL").isJsonNull()) && !jsonObj.get("cityURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityURL").toString()));
      }
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      // validate the optional field `latLong`
      if (jsonObj.get("latLong") != null && !jsonObj.get("latLong").isJsonNull()) {
        APILatLong.validateJsonElement(jsonObj.get("latLong"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("stateFull") != null && !jsonObj.get("stateFull").isJsonNull()) && !jsonObj.get("stateFull").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateFull` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateFull").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if ((jsonObj.get("zip4") != null && !jsonObj.get("zip4").isJsonNull()) && !jsonObj.get("zip4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip4").toString()));
      }
      if ((jsonObj.get("zipURL") != null && !jsonObj.get("zipURL").isJsonNull()) && !jsonObj.get("zipURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APILocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APILocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APILocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APILocation.class));

       return (TypeAdapter<T>) new TypeAdapter<APILocation>() {
           @Override
           public void write(JsonWriter out, APILocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APILocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APILocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APILocation
   * @throws IOException if the JSON string is invalid with respect to APILocation
   */
  public static APILocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APILocation.class);
  }

  /**
   * Convert an instance of APILocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

