# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_test_score import APITestScore
from openapi_server import util


class APITestScoreWrapper(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, district_test_score: APITestScore=None, grade: str=None, school_test_score: APITestScore=None, state_test_score: APITestScore=None, subject: str=None, test: str=None, tier1: str=None, tier2: str=None, tier3: str=None, tier4: str=None, tier5: str=None, year: int=None):
        """APITestScoreWrapper - a model defined in OpenAPI

        :param district_test_score: The district_test_score of this APITestScoreWrapper.
        :param grade: The grade of this APITestScoreWrapper.
        :param school_test_score: The school_test_score of this APITestScoreWrapper.
        :param state_test_score: The state_test_score of this APITestScoreWrapper.
        :param subject: The subject of this APITestScoreWrapper.
        :param test: The test of this APITestScoreWrapper.
        :param tier1: The tier1 of this APITestScoreWrapper.
        :param tier2: The tier2 of this APITestScoreWrapper.
        :param tier3: The tier3 of this APITestScoreWrapper.
        :param tier4: The tier4 of this APITestScoreWrapper.
        :param tier5: The tier5 of this APITestScoreWrapper.
        :param year: The year of this APITestScoreWrapper.
        """
        self.openapi_types = {
            'district_test_score': APITestScore,
            'grade': str,
            'school_test_score': APITestScore,
            'state_test_score': APITestScore,
            'subject': str,
            'test': str,
            'tier1': str,
            'tier2': str,
            'tier3': str,
            'tier4': str,
            'tier5': str,
            'year': int
        }

        self.attribute_map = {
            'district_test_score': 'districtTestScore',
            'grade': 'grade',
            'school_test_score': 'schoolTestScore',
            'state_test_score': 'stateTestScore',
            'subject': 'subject',
            'test': 'test',
            'tier1': 'tier1',
            'tier2': 'tier2',
            'tier3': 'tier3',
            'tier4': 'tier4',
            'tier5': 'tier5',
            'year': 'year'
        }

        self._district_test_score = district_test_score
        self._grade = grade
        self._school_test_score = school_test_score
        self._state_test_score = state_test_score
        self._subject = subject
        self._test = test
        self._tier1 = tier1
        self._tier2 = tier2
        self._tier3 = tier3
        self._tier4 = tier4
        self._tier5 = tier5
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APITestScoreWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APITestScoreWrapper of this APITestScoreWrapper.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def district_test_score(self):
        """Gets the district_test_score of this APITestScoreWrapper.


        :return: The district_test_score of this APITestScoreWrapper.
        :rtype: APITestScore
        """
        return self._district_test_score

    @district_test_score.setter
    def district_test_score(self, district_test_score):
        """Sets the district_test_score of this APITestScoreWrapper.


        :param district_test_score: The district_test_score of this APITestScoreWrapper.
        :type district_test_score: APITestScore
        """

        self._district_test_score = district_test_score

    @property
    def grade(self):
        """Gets the grade of this APITestScoreWrapper.


        :return: The grade of this APITestScoreWrapper.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this APITestScoreWrapper.


        :param grade: The grade of this APITestScoreWrapper.
        :type grade: str
        """

        self._grade = grade

    @property
    def school_test_score(self):
        """Gets the school_test_score of this APITestScoreWrapper.


        :return: The school_test_score of this APITestScoreWrapper.
        :rtype: APITestScore
        """
        return self._school_test_score

    @school_test_score.setter
    def school_test_score(self, school_test_score):
        """Sets the school_test_score of this APITestScoreWrapper.


        :param school_test_score: The school_test_score of this APITestScoreWrapper.
        :type school_test_score: APITestScore
        """

        self._school_test_score = school_test_score

    @property
    def state_test_score(self):
        """Gets the state_test_score of this APITestScoreWrapper.


        :return: The state_test_score of this APITestScoreWrapper.
        :rtype: APITestScore
        """
        return self._state_test_score

    @state_test_score.setter
    def state_test_score(self, state_test_score):
        """Sets the state_test_score of this APITestScoreWrapper.


        :param state_test_score: The state_test_score of this APITestScoreWrapper.
        :type state_test_score: APITestScore
        """

        self._state_test_score = state_test_score

    @property
    def subject(self):
        """Gets the subject of this APITestScoreWrapper.

        Test subject

        :return: The subject of this APITestScoreWrapper.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this APITestScoreWrapper.

        Test subject

        :param subject: The subject of this APITestScoreWrapper.
        :type subject: str
        """

        self._subject = subject

    @property
    def test(self):
        """Gets the test of this APITestScoreWrapper.

        The name of the state-administered test

        :return: The test of this APITestScoreWrapper.
        :rtype: str
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this APITestScoreWrapper.

        The name of the state-administered test

        :param test: The test of this APITestScoreWrapper.
        :type test: str
        """

        self._test = test

    @property
    def tier1(self):
        """Gets the tier1 of this APITestScoreWrapper.

        Tier 1 test score description (Enterprise API level only)

        :return: The tier1 of this APITestScoreWrapper.
        :rtype: str
        """
        return self._tier1

    @tier1.setter
    def tier1(self, tier1):
        """Sets the tier1 of this APITestScoreWrapper.

        Tier 1 test score description (Enterprise API level only)

        :param tier1: The tier1 of this APITestScoreWrapper.
        :type tier1: str
        """

        self._tier1 = tier1

    @property
    def tier2(self):
        """Gets the tier2 of this APITestScoreWrapper.

        Tier 2 test score description (Enterprise API level only)

        :return: The tier2 of this APITestScoreWrapper.
        :rtype: str
        """
        return self._tier2

    @tier2.setter
    def tier2(self, tier2):
        """Sets the tier2 of this APITestScoreWrapper.

        Tier 2 test score description (Enterprise API level only)

        :param tier2: The tier2 of this APITestScoreWrapper.
        :type tier2: str
        """

        self._tier2 = tier2

    @property
    def tier3(self):
        """Gets the tier3 of this APITestScoreWrapper.

        Tier 3 test score description (Enterprise API level only)

        :return: The tier3 of this APITestScoreWrapper.
        :rtype: str
        """
        return self._tier3

    @tier3.setter
    def tier3(self, tier3):
        """Sets the tier3 of this APITestScoreWrapper.

        Tier 3 test score description (Enterprise API level only)

        :param tier3: The tier3 of this APITestScoreWrapper.
        :type tier3: str
        """

        self._tier3 = tier3

    @property
    def tier4(self):
        """Gets the tier4 of this APITestScoreWrapper.

        Tier 4 test score description (Enterprise API level only)

        :return: The tier4 of this APITestScoreWrapper.
        :rtype: str
        """
        return self._tier4

    @tier4.setter
    def tier4(self, tier4):
        """Sets the tier4 of this APITestScoreWrapper.

        Tier 4 test score description (Enterprise API level only)

        :param tier4: The tier4 of this APITestScoreWrapper.
        :type tier4: str
        """

        self._tier4 = tier4

    @property
    def tier5(self):
        """Gets the tier5 of this APITestScoreWrapper.

        Tier 5 test score description (Enterprise API level only)

        :return: The tier5 of this APITestScoreWrapper.
        :rtype: str
        """
        return self._tier5

    @tier5.setter
    def tier5(self, tier5):
        """Sets the tier5 of this APITestScoreWrapper.

        Tier 5 test score description (Enterprise API level only)

        :param tier5: The tier5 of this APITestScoreWrapper.
        :type tier5: str
        """

        self._tier5 = tier5

    @property
    def year(self):
        """Gets the year of this APITestScoreWrapper.

        Year test was administered (2018 = 2017-18)

        :return: The year of this APITestScoreWrapper.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this APITestScoreWrapper.

        Year test was administered (2018 = 2017-18)

        :param year: The year of this APITestScoreWrapper.
        :type year: int
        """

        self._year = year
