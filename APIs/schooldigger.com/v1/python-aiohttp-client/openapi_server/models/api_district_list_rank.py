# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_district1_summary import APIDistrict1Summary
from openapi_server import util


class APIDistrictListRank(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, district_list: List[APIDistrict1Summary]=None, number_of_districts: int=None, number_of_pages: int=None, rank_compare_year: int=None, rank_year: int=None, rank_year_compare: int=None, rank_years_available: List[int]=None):
        """APIDistrictListRank - a model defined in OpenAPI

        :param district_list: The district_list of this APIDistrictListRank.
        :param number_of_districts: The number_of_districts of this APIDistrictListRank.
        :param number_of_pages: The number_of_pages of this APIDistrictListRank.
        :param rank_compare_year: The rank_compare_year of this APIDistrictListRank.
        :param rank_year: The rank_year of this APIDistrictListRank.
        :param rank_year_compare: The rank_year_compare of this APIDistrictListRank.
        :param rank_years_available: The rank_years_available of this APIDistrictListRank.
        """
        self.openapi_types = {
            'district_list': List[APIDistrict1Summary],
            'number_of_districts': int,
            'number_of_pages': int,
            'rank_compare_year': int,
            'rank_year': int,
            'rank_year_compare': int,
            'rank_years_available': List[int]
        }

        self.attribute_map = {
            'district_list': 'districtList',
            'number_of_districts': 'numberOfDistricts',
            'number_of_pages': 'numberOfPages',
            'rank_compare_year': 'rankCompareYear',
            'rank_year': 'rankYear',
            'rank_year_compare': 'rankYearCompare',
            'rank_years_available': 'rankYearsAvailable'
        }

        self._district_list = district_list
        self._number_of_districts = number_of_districts
        self._number_of_pages = number_of_pages
        self._rank_compare_year = rank_compare_year
        self._rank_year = rank_year
        self._rank_year_compare = rank_year_compare
        self._rank_years_available = rank_years_available

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIDistrictListRank':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIDistrictListRank of this APIDistrictListRank.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def district_list(self):
        """Gets the district_list of this APIDistrictListRank.


        :return: The district_list of this APIDistrictListRank.
        :rtype: List[APIDistrict1Summary]
        """
        return self._district_list

    @district_list.setter
    def district_list(self, district_list):
        """Sets the district_list of this APIDistrictListRank.


        :param district_list: The district_list of this APIDistrictListRank.
        :type district_list: List[APIDistrict1Summary]
        """

        self._district_list = district_list

    @property
    def number_of_districts(self):
        """Gets the number_of_districts of this APIDistrictListRank.

        The total count of districts in the entire rank list

        :return: The number_of_districts of this APIDistrictListRank.
        :rtype: int
        """
        return self._number_of_districts

    @number_of_districts.setter
    def number_of_districts(self, number_of_districts):
        """Sets the number_of_districts of this APIDistrictListRank.

        The total count of districts in the entire rank list

        :param number_of_districts: The number_of_districts of this APIDistrictListRank.
        :type number_of_districts: int
        """

        self._number_of_districts = number_of_districts

    @property
    def number_of_pages(self):
        """Gets the number_of_pages of this APIDistrictListRank.

        The total count of pages in your query list based on given per_page value

        :return: The number_of_pages of this APIDistrictListRank.
        :rtype: int
        """
        return self._number_of_pages

    @number_of_pages.setter
    def number_of_pages(self, number_of_pages):
        """Sets the number_of_pages of this APIDistrictListRank.

        The total count of pages in your query list based on given per_page value

        :param number_of_pages: The number_of_pages of this APIDistrictListRank.
        :type number_of_pages: int
        """

        self._number_of_pages = number_of_pages

    @property
    def rank_compare_year(self):
        """Gets the rank_compare_year of this APIDistrictListRank.


        :return: The rank_compare_year of this APIDistrictListRank.
        :rtype: int
        """
        return self._rank_compare_year

    @rank_compare_year.setter
    def rank_compare_year(self, rank_compare_year):
        """Sets the rank_compare_year of this APIDistrictListRank.


        :param rank_compare_year: The rank_compare_year of this APIDistrictListRank.
        :type rank_compare_year: int
        """

        self._rank_compare_year = rank_compare_year

    @property
    def rank_year(self):
        """Gets the rank_year of this APIDistrictListRank.

        Year this ranking list represents (2018 = 2017-18)

        :return: The rank_year of this APIDistrictListRank.
        :rtype: int
        """
        return self._rank_year

    @rank_year.setter
    def rank_year(self, rank_year):
        """Sets the rank_year of this APIDistrictListRank.

        Year this ranking list represents (2018 = 2017-18)

        :param rank_year: The rank_year of this APIDistrictListRank.
        :type rank_year: int
        """

        self._rank_year = rank_year

    @property
    def rank_year_compare(self):
        """Gets the rank_year_compare of this APIDistrictListRank.

        Year rankings returned for comparison (2018 = 2017-18)

        :return: The rank_year_compare of this APIDistrictListRank.
        :rtype: int
        """
        return self._rank_year_compare

    @rank_year_compare.setter
    def rank_year_compare(self, rank_year_compare):
        """Sets the rank_year_compare of this APIDistrictListRank.

        Year rankings returned for comparison (2018 = 2017-18)

        :param rank_year_compare: The rank_year_compare of this APIDistrictListRank.
        :type rank_year_compare: int
        """

        self._rank_year_compare = rank_year_compare

    @property
    def rank_years_available(self):
        """Gets the rank_years_available of this APIDistrictListRank.

        The years for which SchoolDigger district rankings are available for this state

        :return: The rank_years_available of this APIDistrictListRank.
        :rtype: List[int]
        """
        return self._rank_years_available

    @rank_years_available.setter
    def rank_years_available(self, rank_years_available):
        """Sets the rank_years_available of this APIDistrictListRank.

        The years for which SchoolDigger district rankings are available for this state

        :param rank_years_available: The rank_years_available of this APIDistrictListRank.
        :type rank_years_available: List[int]
        """

        self._rank_years_available = rank_years_available
