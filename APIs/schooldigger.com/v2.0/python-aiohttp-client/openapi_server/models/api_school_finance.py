# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APISchoolFinance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, spending_federal_non_personnel: float=None, spending_federal_personnel: float=None, spending_per_student: float=None, spending_per_student_federal: float=None, spending_per_student_state_local: float=None, spending_state_local_non_personnel: float=None, spending_state_local_personnel: float=None, year: int=None):
        """APISchoolFinance - a model defined in OpenAPI

        :param spending_federal_non_personnel: The spending_federal_non_personnel of this APISchoolFinance.
        :param spending_federal_personnel: The spending_federal_personnel of this APISchoolFinance.
        :param spending_per_student: The spending_per_student of this APISchoolFinance.
        :param spending_per_student_federal: The spending_per_student_federal of this APISchoolFinance.
        :param spending_per_student_state_local: The spending_per_student_state_local of this APISchoolFinance.
        :param spending_state_local_non_personnel: The spending_state_local_non_personnel of this APISchoolFinance.
        :param spending_state_local_personnel: The spending_state_local_personnel of this APISchoolFinance.
        :param year: The year of this APISchoolFinance.
        """
        self.openapi_types = {
            'spending_federal_non_personnel': float,
            'spending_federal_personnel': float,
            'spending_per_student': float,
            'spending_per_student_federal': float,
            'spending_per_student_state_local': float,
            'spending_state_local_non_personnel': float,
            'spending_state_local_personnel': float,
            'year': int
        }

        self.attribute_map = {
            'spending_federal_non_personnel': 'spendingFederalNonPersonnel',
            'spending_federal_personnel': 'spendingFederalPersonnel',
            'spending_per_student': 'spendingPerStudent',
            'spending_per_student_federal': 'spendingPerStudentFederal',
            'spending_per_student_state_local': 'spendingPerStudentStateLocal',
            'spending_state_local_non_personnel': 'spendingStateLocalNonPersonnel',
            'spending_state_local_personnel': 'spendingStateLocalPersonnel',
            'year': 'year'
        }

        self._spending_federal_non_personnel = spending_federal_non_personnel
        self._spending_federal_personnel = spending_federal_personnel
        self._spending_per_student = spending_per_student
        self._spending_per_student_federal = spending_per_student_federal
        self._spending_per_student_state_local = spending_per_student_state_local
        self._spending_state_local_non_personnel = spending_state_local_non_personnel
        self._spending_state_local_personnel = spending_state_local_personnel
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APISchoolFinance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APISchoolFinance of this APISchoolFinance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def spending_federal_non_personnel(self):
        """Gets the spending_federal_non_personnel of this APISchoolFinance.

        Spending per student for Non-personnel at the Federal Level (Enterprise level only)

        :return: The spending_federal_non_personnel of this APISchoolFinance.
        :rtype: float
        """
        return self._spending_federal_non_personnel

    @spending_federal_non_personnel.setter
    def spending_federal_non_personnel(self, spending_federal_non_personnel):
        """Sets the spending_federal_non_personnel of this APISchoolFinance.

        Spending per student for Non-personnel at the Federal Level (Enterprise level only)

        :param spending_federal_non_personnel: The spending_federal_non_personnel of this APISchoolFinance.
        :type spending_federal_non_personnel: float
        """

        self._spending_federal_non_personnel = spending_federal_non_personnel

    @property
    def spending_federal_personnel(self):
        """Gets the spending_federal_personnel of this APISchoolFinance.

        Spending per student for Personnel at the Federal Level (Enterprise level only)

        :return: The spending_federal_personnel of this APISchoolFinance.
        :rtype: float
        """
        return self._spending_federal_personnel

    @spending_federal_personnel.setter
    def spending_federal_personnel(self, spending_federal_personnel):
        """Sets the spending_federal_personnel of this APISchoolFinance.

        Spending per student for Personnel at the Federal Level (Enterprise level only)

        :param spending_federal_personnel: The spending_federal_personnel of this APISchoolFinance.
        :type spending_federal_personnel: float
        """

        self._spending_federal_personnel = spending_federal_personnel

    @property
    def spending_per_student(self):
        """Gets the spending_per_student of this APISchoolFinance.

        Total spending per student from all funds (Pro or Enterprise level only)

        :return: The spending_per_student of this APISchoolFinance.
        :rtype: float
        """
        return self._spending_per_student

    @spending_per_student.setter
    def spending_per_student(self, spending_per_student):
        """Sets the spending_per_student of this APISchoolFinance.

        Total spending per student from all funds (Pro or Enterprise level only)

        :param spending_per_student: The spending_per_student of this APISchoolFinance.
        :type spending_per_student: float
        """

        self._spending_per_student = spending_per_student

    @property
    def spending_per_student_federal(self):
        """Gets the spending_per_student_federal of this APISchoolFinance.

        Spending per student at the Federal Level (Enterprise level only)

        :return: The spending_per_student_federal of this APISchoolFinance.
        :rtype: float
        """
        return self._spending_per_student_federal

    @spending_per_student_federal.setter
    def spending_per_student_federal(self, spending_per_student_federal):
        """Sets the spending_per_student_federal of this APISchoolFinance.

        Spending per student at the Federal Level (Enterprise level only)

        :param spending_per_student_federal: The spending_per_student_federal of this APISchoolFinance.
        :type spending_per_student_federal: float
        """

        self._spending_per_student_federal = spending_per_student_federal

    @property
    def spending_per_student_state_local(self):
        """Gets the spending_per_student_state_local of this APISchoolFinance.

        Spending per student at the State and Local Level (Enterprise level only)

        :return: The spending_per_student_state_local of this APISchoolFinance.
        :rtype: float
        """
        return self._spending_per_student_state_local

    @spending_per_student_state_local.setter
    def spending_per_student_state_local(self, spending_per_student_state_local):
        """Sets the spending_per_student_state_local of this APISchoolFinance.

        Spending per student at the State and Local Level (Enterprise level only)

        :param spending_per_student_state_local: The spending_per_student_state_local of this APISchoolFinance.
        :type spending_per_student_state_local: float
        """

        self._spending_per_student_state_local = spending_per_student_state_local

    @property
    def spending_state_local_non_personnel(self):
        """Gets the spending_state_local_non_personnel of this APISchoolFinance.

        Spending per student for Non-personnel at the State and Local Level (Enterprise level only)

        :return: The spending_state_local_non_personnel of this APISchoolFinance.
        :rtype: float
        """
        return self._spending_state_local_non_personnel

    @spending_state_local_non_personnel.setter
    def spending_state_local_non_personnel(self, spending_state_local_non_personnel):
        """Sets the spending_state_local_non_personnel of this APISchoolFinance.

        Spending per student for Non-personnel at the State and Local Level (Enterprise level only)

        :param spending_state_local_non_personnel: The spending_state_local_non_personnel of this APISchoolFinance.
        :type spending_state_local_non_personnel: float
        """

        self._spending_state_local_non_personnel = spending_state_local_non_personnel

    @property
    def spending_state_local_personnel(self):
        """Gets the spending_state_local_personnel of this APISchoolFinance.

        Spending per student for Personnel at the State and Local Level (Enterprise level only)

        :return: The spending_state_local_personnel of this APISchoolFinance.
        :rtype: float
        """
        return self._spending_state_local_personnel

    @spending_state_local_personnel.setter
    def spending_state_local_personnel(self, spending_state_local_personnel):
        """Sets the spending_state_local_personnel of this APISchoolFinance.

        Spending per student for Personnel at the State and Local Level (Enterprise level only)

        :param spending_state_local_personnel: The spending_state_local_personnel of this APISchoolFinance.
        :type spending_state_local_personnel: float
        """

        self._spending_state_local_personnel = spending_state_local_personnel

    @property
    def year(self):
        """Gets the year of this APISchoolFinance.

        Fiscal School year (2021 = 2020-2021 year)

        :return: The year of this APISchoolFinance.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this APISchoolFinance.

        Fiscal School year (2021 = 2020-2021 year)

        :param year: The year of this APISchoolFinance.
        :type year: int
        """

        self._year = year
