# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIRankHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_standard_score: float=None, rank: int=None, rank_level: str=None, rank_of: int=None, rank_stars: int=None, rank_statewide_percentage: float=None, year: int=None):
        """APIRankHistory - a model defined in OpenAPI

        :param average_standard_score: The average_standard_score of this APIRankHistory.
        :param rank: The rank of this APIRankHistory.
        :param rank_level: The rank_level of this APIRankHistory.
        :param rank_of: The rank_of of this APIRankHistory.
        :param rank_stars: The rank_stars of this APIRankHistory.
        :param rank_statewide_percentage: The rank_statewide_percentage of this APIRankHistory.
        :param year: The year of this APIRankHistory.
        """
        self.openapi_types = {
            'average_standard_score': float,
            'rank': int,
            'rank_level': str,
            'rank_of': int,
            'rank_stars': int,
            'rank_statewide_percentage': float,
            'year': int
        }

        self.attribute_map = {
            'average_standard_score': 'averageStandardScore',
            'rank': 'rank',
            'rank_level': 'rankLevel',
            'rank_of': 'rankOf',
            'rank_stars': 'rankStars',
            'rank_statewide_percentage': 'rankStatewidePercentage',
            'year': 'year'
        }

        self._average_standard_score = average_standard_score
        self._rank = rank
        self._rank_level = rank_level
        self._rank_of = rank_of
        self._rank_stars = rank_stars
        self._rank_statewide_percentage = rank_statewide_percentage
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIRankHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIRankHistory of this APIRankHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_standard_score(self):
        """Gets the average_standard_score of this APIRankHistory.

        The Average Standard score calculated by SchoolDigger (see: https://www.schooldigger.com/aboutrankingmethodology.aspx)

        :return: The average_standard_score of this APIRankHistory.
        :rtype: float
        """
        return self._average_standard_score

    @average_standard_score.setter
    def average_standard_score(self, average_standard_score):
        """Sets the average_standard_score of this APIRankHistory.

        The Average Standard score calculated by SchoolDigger (see: https://www.schooldigger.com/aboutrankingmethodology.aspx)

        :param average_standard_score: The average_standard_score of this APIRankHistory.
        :type average_standard_score: float
        """

        self._average_standard_score = average_standard_score

    @property
    def rank(self):
        """Gets the rank of this APIRankHistory.

        Statewide rank of this School

        :return: The rank of this APIRankHistory.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this APIRankHistory.

        Statewide rank of this School

        :param rank: The rank of this APIRankHistory.
        :type rank: int
        """

        self._rank = rank

    @property
    def rank_level(self):
        """Gets the rank_level of this APIRankHistory.

        The level for which this school is ranked (Elementary, Middle, High)

        :return: The rank_level of this APIRankHistory.
        :rtype: str
        """
        return self._rank_level

    @rank_level.setter
    def rank_level(self, rank_level):
        """Sets the rank_level of this APIRankHistory.

        The level for which this school is ranked (Elementary, Middle, High)

        :param rank_level: The rank_level of this APIRankHistory.
        :type rank_level: str
        """

        self._rank_level = rank_level

    @property
    def rank_of(self):
        """Gets the rank_of of this APIRankHistory.

        Count of schools ranked at this state/level

        :return: The rank_of of this APIRankHistory.
        :rtype: int
        """
        return self._rank_of

    @rank_of.setter
    def rank_of(self, rank_of):
        """Sets the rank_of of this APIRankHistory.

        Count of schools ranked at this state/level

        :param rank_of: The rank_of of this APIRankHistory.
        :type rank_of: int
        """

        self._rank_of = rank_of

    @property
    def rank_stars(self):
        """Gets the rank_stars of this APIRankHistory.

        The number of stars SchoolDigger awarded in the ranking of the school (0-5, 5 is best)

        :return: The rank_stars of this APIRankHistory.
        :rtype: int
        """
        return self._rank_stars

    @rank_stars.setter
    def rank_stars(self, rank_stars):
        """Sets the rank_stars of this APIRankHistory.

        The number of stars SchoolDigger awarded in the ranking of the school (0-5, 5 is best)

        :param rank_stars: The rank_stars of this APIRankHistory.
        :type rank_stars: int
        """

        self._rank_stars = rank_stars

    @property
    def rank_statewide_percentage(self):
        """Gets the rank_statewide_percentage of this APIRankHistory.

        Percentile of this school's rank (e.g. this school performed better than (x)% of this state's elementary schools)

        :return: The rank_statewide_percentage of this APIRankHistory.
        :rtype: float
        """
        return self._rank_statewide_percentage

    @rank_statewide_percentage.setter
    def rank_statewide_percentage(self, rank_statewide_percentage):
        """Sets the rank_statewide_percentage of this APIRankHistory.

        Percentile of this school's rank (e.g. this school performed better than (x)% of this state's elementary schools)

        :param rank_statewide_percentage: The rank_statewide_percentage of this APIRankHistory.
        :type rank_statewide_percentage: float
        """

        self._rank_statewide_percentage = rank_statewide_percentage

    @property
    def year(self):
        """Gets the year of this APIRankHistory.

        School year (2017 - 2016-17)

        :return: The year of this APIRankHistory.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this APIRankHistory.

        School year (2017 - 2016-17)

        :param year: The year of this APIRankHistory.
        :type year: int
        """

        self._year = year
