# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_polyline import APIPolyline
from openapi_server import util


class APIBoundary12(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_boundary: bool=None, polyline_collection: List[APIPolyline]=None, polylines: str=None):
        """APIBoundary12 - a model defined in OpenAPI

        :param has_boundary: The has_boundary of this APIBoundary12.
        :param polyline_collection: The polyline_collection of this APIBoundary12.
        :param polylines: The polylines of this APIBoundary12.
        """
        self.openapi_types = {
            'has_boundary': bool,
            'polyline_collection': List[APIPolyline],
            'polylines': str
        }

        self.attribute_map = {
            'has_boundary': 'hasBoundary',
            'polyline_collection': 'polylineCollection',
            'polylines': 'polylines'
        }

        self._has_boundary = has_boundary
        self._polyline_collection = polyline_collection
        self._polylines = polylines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIBoundary12':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIBoundary12 of this APIBoundary12.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_boundary(self):
        """Gets the has_boundary of this APIBoundary12.

        States whether there is a boundary available

        :return: The has_boundary of this APIBoundary12.
        :rtype: bool
        """
        return self._has_boundary

    @has_boundary.setter
    def has_boundary(self, has_boundary):
        """Sets the has_boundary of this APIBoundary12.

        States whether there is a boundary available

        :param has_boundary: The has_boundary of this APIBoundary12.
        :type has_boundary: bool
        """

        self._has_boundary = has_boundary

    @property
    def polyline_collection(self):
        """Gets the polyline_collection of this APIBoundary12.

        Collection of one or more polylines that can be used to create the boundary on a map. NOTE: this value is JSON encoded. Specifically, backslashes will be returned escaped (two backslashes). Make sure to decode the polyline before you use it

        :return: The polyline_collection of this APIBoundary12.
        :rtype: List[APIPolyline]
        """
        return self._polyline_collection

    @polyline_collection.setter
    def polyline_collection(self, polyline_collection):
        """Sets the polyline_collection of this APIBoundary12.

        Collection of one or more polylines that can be used to create the boundary on a map. NOTE: this value is JSON encoded. Specifically, backslashes will be returned escaped (two backslashes). Make sure to decode the polyline before you use it

        :param polyline_collection: The polyline_collection of this APIBoundary12.
        :type polyline_collection: List[APIPolyline]
        """

        self._polyline_collection = polyline_collection

    @property
    def polylines(self):
        """Gets the polylines of this APIBoundary12.

        Collection of latitude/longitude vertices to form a polygon representing the boundary

        :return: The polylines of this APIBoundary12.
        :rtype: str
        """
        return self._polylines

    @polylines.setter
    def polylines(self, polylines):
        """Sets the polylines of this APIBoundary12.

        Collection of latitude/longitude vertices to form a polygon representing the boundary

        :param polylines: The polylines of this APIBoundary12.
        :type polylines: str
        """

        self._polylines = polylines
