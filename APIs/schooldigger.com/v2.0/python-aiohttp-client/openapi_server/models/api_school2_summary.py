# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_county import APICounty
from openapi_server.models.api_district_sum import APIDistrictSum
from openapi_server.models.api_location import APILocation
from openapi_server.models.api_rank_history import APIRankHistory
from openapi_server.models.api_yearly_demographics import APIYearlyDemographics
from openapi_server import util


class APISchool2Summary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: APILocation=None, county: APICounty=None, distance: float=None, district: APIDistrictSum=None, has_boundary: bool=None, high_grade: str=None, is_charter_school: str=None, is_magnet_school: str=None, is_private: bool=None, is_title_i_school: str=None, is_title_i_schoolwide_school: str=None, is_virtual_school: str=None, locale: str=None, location_is_within_boundary: bool=None, low_grade: str=None, phone: str=None, private_coed: str=None, private_days: int=None, private_has_library: bool=None, private_hours: float=None, private_orientation: str=None, rank_history: List[APIRankHistory]=None, rank_movement: int=None, school_level: str=None, school_name: str=None, school_yearly_details: List[APIYearlyDemographics]=None, schoolid: str=None, url: str=None, url_compare: str=None):
        """APISchool2Summary - a model defined in OpenAPI

        :param address: The address of this APISchool2Summary.
        :param county: The county of this APISchool2Summary.
        :param distance: The distance of this APISchool2Summary.
        :param district: The district of this APISchool2Summary.
        :param has_boundary: The has_boundary of this APISchool2Summary.
        :param high_grade: The high_grade of this APISchool2Summary.
        :param is_charter_school: The is_charter_school of this APISchool2Summary.
        :param is_magnet_school: The is_magnet_school of this APISchool2Summary.
        :param is_private: The is_private of this APISchool2Summary.
        :param is_title_i_school: The is_title_i_school of this APISchool2Summary.
        :param is_title_i_schoolwide_school: The is_title_i_schoolwide_school of this APISchool2Summary.
        :param is_virtual_school: The is_virtual_school of this APISchool2Summary.
        :param locale: The locale of this APISchool2Summary.
        :param location_is_within_boundary: The location_is_within_boundary of this APISchool2Summary.
        :param low_grade: The low_grade of this APISchool2Summary.
        :param phone: The phone of this APISchool2Summary.
        :param private_coed: The private_coed of this APISchool2Summary.
        :param private_days: The private_days of this APISchool2Summary.
        :param private_has_library: The private_has_library of this APISchool2Summary.
        :param private_hours: The private_hours of this APISchool2Summary.
        :param private_orientation: The private_orientation of this APISchool2Summary.
        :param rank_history: The rank_history of this APISchool2Summary.
        :param rank_movement: The rank_movement of this APISchool2Summary.
        :param school_level: The school_level of this APISchool2Summary.
        :param school_name: The school_name of this APISchool2Summary.
        :param school_yearly_details: The school_yearly_details of this APISchool2Summary.
        :param schoolid: The schoolid of this APISchool2Summary.
        :param url: The url of this APISchool2Summary.
        :param url_compare: The url_compare of this APISchool2Summary.
        """
        self.openapi_types = {
            'address': APILocation,
            'county': APICounty,
            'distance': float,
            'district': APIDistrictSum,
            'has_boundary': bool,
            'high_grade': str,
            'is_charter_school': str,
            'is_magnet_school': str,
            'is_private': bool,
            'is_title_i_school': str,
            'is_title_i_schoolwide_school': str,
            'is_virtual_school': str,
            'locale': str,
            'location_is_within_boundary': bool,
            'low_grade': str,
            'phone': str,
            'private_coed': str,
            'private_days': int,
            'private_has_library': bool,
            'private_hours': float,
            'private_orientation': str,
            'rank_history': List[APIRankHistory],
            'rank_movement': int,
            'school_level': str,
            'school_name': str,
            'school_yearly_details': List[APIYearlyDemographics],
            'schoolid': str,
            'url': str,
            'url_compare': str
        }

        self.attribute_map = {
            'address': 'address',
            'county': 'county',
            'distance': 'distance',
            'district': 'district',
            'has_boundary': 'hasBoundary',
            'high_grade': 'highGrade',
            'is_charter_school': 'isCharterSchool',
            'is_magnet_school': 'isMagnetSchool',
            'is_private': 'isPrivate',
            'is_title_i_school': 'isTitleISchool',
            'is_title_i_schoolwide_school': 'isTitleISchoolwideSchool',
            'is_virtual_school': 'isVirtualSchool',
            'locale': 'locale',
            'location_is_within_boundary': 'locationIsWithinBoundary',
            'low_grade': 'lowGrade',
            'phone': 'phone',
            'private_coed': 'privateCoed',
            'private_days': 'privateDays',
            'private_has_library': 'privateHasLibrary',
            'private_hours': 'privateHours',
            'private_orientation': 'privateOrientation',
            'rank_history': 'rankHistory',
            'rank_movement': 'rankMovement',
            'school_level': 'schoolLevel',
            'school_name': 'schoolName',
            'school_yearly_details': 'schoolYearlyDetails',
            'schoolid': 'schoolid',
            'url': 'url',
            'url_compare': 'urlCompare'
        }

        self._address = address
        self._county = county
        self._distance = distance
        self._district = district
        self._has_boundary = has_boundary
        self._high_grade = high_grade
        self._is_charter_school = is_charter_school
        self._is_magnet_school = is_magnet_school
        self._is_private = is_private
        self._is_title_i_school = is_title_i_school
        self._is_title_i_schoolwide_school = is_title_i_schoolwide_school
        self._is_virtual_school = is_virtual_school
        self._locale = locale
        self._location_is_within_boundary = location_is_within_boundary
        self._low_grade = low_grade
        self._phone = phone
        self._private_coed = private_coed
        self._private_days = private_days
        self._private_has_library = private_has_library
        self._private_hours = private_hours
        self._private_orientation = private_orientation
        self._rank_history = rank_history
        self._rank_movement = rank_movement
        self._school_level = school_level
        self._school_name = school_name
        self._school_yearly_details = school_yearly_details
        self._schoolid = schoolid
        self._url = url
        self._url_compare = url_compare

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APISchool2Summary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APISchool2Summary of this APISchool2Summary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this APISchool2Summary.


        :return: The address of this APISchool2Summary.
        :rtype: APILocation
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this APISchool2Summary.


        :param address: The address of this APISchool2Summary.
        :type address: APILocation
        """

        self._address = address

    @property
    def county(self):
        """Gets the county of this APISchool2Summary.


        :return: The county of this APISchool2Summary.
        :rtype: APICounty
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this APISchool2Summary.


        :param county: The county of this APISchool2Summary.
        :type county: APICounty
        """

        self._county = county

    @property
    def distance(self):
        """Gets the distance of this APISchool2Summary.

        Distance from nearLatitude/nearLongitude, boundaryLatitude/boundaryLongitude, or boundaryAddress (if supplied)

        :return: The distance of this APISchool2Summary.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this APISchool2Summary.

        Distance from nearLatitude/nearLongitude, boundaryLatitude/boundaryLongitude, or boundaryAddress (if supplied)

        :param distance: The distance of this APISchool2Summary.
        :type distance: float
        """

        self._distance = distance

    @property
    def district(self):
        """Gets the district of this APISchool2Summary.


        :return: The district of this APISchool2Summary.
        :rtype: APIDistrictSum
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this APISchool2Summary.


        :param district: The district of this APISchool2Summary.
        :type district: APIDistrictSum
        """

        self._district = district

    @property
    def has_boundary(self):
        """Gets the has_boundary of this APISchool2Summary.

        Indicates that an attendance boundary is available for this school.

        :return: The has_boundary of this APISchool2Summary.
        :rtype: bool
        """
        return self._has_boundary

    @has_boundary.setter
    def has_boundary(self, has_boundary):
        """Sets the has_boundary of this APISchool2Summary.

        Indicates that an attendance boundary is available for this school.

        :param has_boundary: The has_boundary of this APISchool2Summary.
        :type has_boundary: bool
        """

        self._has_boundary = has_boundary

    @property
    def high_grade(self):
        """Gets the high_grade of this APISchool2Summary.

        The high grade served by this school

        :return: The high_grade of this APISchool2Summary.
        :rtype: str
        """
        return self._high_grade

    @high_grade.setter
    def high_grade(self, high_grade):
        """Sets the high_grade of this APISchool2Summary.

        The high grade served by this school

        :param high_grade: The high_grade of this APISchool2Summary.
        :type high_grade: str
        """

        self._high_grade = high_grade

    @property
    def is_charter_school(self):
        """Gets the is_charter_school of this APISchool2Summary.

        Indicates if school is a charter school (Yes/No/n-a)

        :return: The is_charter_school of this APISchool2Summary.
        :rtype: str
        """
        return self._is_charter_school

    @is_charter_school.setter
    def is_charter_school(self, is_charter_school):
        """Sets the is_charter_school of this APISchool2Summary.

        Indicates if school is a charter school (Yes/No/n-a)

        :param is_charter_school: The is_charter_school of this APISchool2Summary.
        :type is_charter_school: str
        """

        self._is_charter_school = is_charter_school

    @property
    def is_magnet_school(self):
        """Gets the is_magnet_school of this APISchool2Summary.

        Indicates if school is a magnet school (Yes/No/n-a)

        :return: The is_magnet_school of this APISchool2Summary.
        :rtype: str
        """
        return self._is_magnet_school

    @is_magnet_school.setter
    def is_magnet_school(self, is_magnet_school):
        """Sets the is_magnet_school of this APISchool2Summary.

        Indicates if school is a magnet school (Yes/No/n-a)

        :param is_magnet_school: The is_magnet_school of this APISchool2Summary.
        :type is_magnet_school: str
        """

        self._is_magnet_school = is_magnet_school

    @property
    def is_private(self):
        """Gets the is_private of this APISchool2Summary.

        Indicates if school is a private school (Yes/No)

        :return: The is_private of this APISchool2Summary.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this APISchool2Summary.

        Indicates if school is a private school (Yes/No)

        :param is_private: The is_private of this APISchool2Summary.
        :type is_private: bool
        """

        self._is_private = is_private

    @property
    def is_title_i_school(self):
        """Gets the is_title_i_school of this APISchool2Summary.

        Indicates if school is a Title I school (Yes/No/n-a)

        :return: The is_title_i_school of this APISchool2Summary.
        :rtype: str
        """
        return self._is_title_i_school

    @is_title_i_school.setter
    def is_title_i_school(self, is_title_i_school):
        """Sets the is_title_i_school of this APISchool2Summary.

        Indicates if school is a Title I school (Yes/No/n-a)

        :param is_title_i_school: The is_title_i_school of this APISchool2Summary.
        :type is_title_i_school: str
        """

        self._is_title_i_school = is_title_i_school

    @property
    def is_title_i_schoolwide_school(self):
        """Gets the is_title_i_schoolwide_school of this APISchool2Summary.

        Indicates if a school-wide Title I school (Yes/No/n-a)

        :return: The is_title_i_schoolwide_school of this APISchool2Summary.
        :rtype: str
        """
        return self._is_title_i_schoolwide_school

    @is_title_i_schoolwide_school.setter
    def is_title_i_schoolwide_school(self, is_title_i_schoolwide_school):
        """Sets the is_title_i_schoolwide_school of this APISchool2Summary.

        Indicates if a school-wide Title I school (Yes/No/n-a)

        :param is_title_i_schoolwide_school: The is_title_i_schoolwide_school of this APISchool2Summary.
        :type is_title_i_schoolwide_school: str
        """

        self._is_title_i_schoolwide_school = is_title_i_schoolwide_school

    @property
    def is_virtual_school(self):
        """Gets the is_virtual_school of this APISchool2Summary.

        Indicates if school is a virtual school (Yes/No/n-a)

        :return: The is_virtual_school of this APISchool2Summary.
        :rtype: str
        """
        return self._is_virtual_school

    @is_virtual_school.setter
    def is_virtual_school(self, is_virtual_school):
        """Sets the is_virtual_school of this APISchool2Summary.

        Indicates if school is a virtual school (Yes/No/n-a)

        :param is_virtual_school: The is_virtual_school of this APISchool2Summary.
        :type is_virtual_school: str
        """

        self._is_virtual_school = is_virtual_school

    @property
    def locale(self):
        """Gets the locale of this APISchool2Summary.

        NCES Locale of school (https://nces.ed.gov/ccd/rural_locales.asp)

        :return: The locale of this APISchool2Summary.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this APISchool2Summary.

        NCES Locale of school (https://nces.ed.gov/ccd/rural_locales.asp)

        :param locale: The locale of this APISchool2Summary.
        :type locale: str
        """

        self._locale = locale

    @property
    def location_is_within_boundary(self):
        """Gets the location_is_within_boundary of this APISchool2Summary.

        Indicates whether this school's boundary includes the specified location from boundaryLatitude/boundaryLongitude or boundaryAddress. (School Boundary Add-on Package required)

        :return: The location_is_within_boundary of this APISchool2Summary.
        :rtype: bool
        """
        return self._location_is_within_boundary

    @location_is_within_boundary.setter
    def location_is_within_boundary(self, location_is_within_boundary):
        """Sets the location_is_within_boundary of this APISchool2Summary.

        Indicates whether this school's boundary includes the specified location from boundaryLatitude/boundaryLongitude or boundaryAddress. (School Boundary Add-on Package required)

        :param location_is_within_boundary: The location_is_within_boundary of this APISchool2Summary.
        :type location_is_within_boundary: bool
        """

        self._location_is_within_boundary = location_is_within_boundary

    @property
    def low_grade(self):
        """Gets the low_grade of this APISchool2Summary.

        The low grade served by this school (PK = Prekindergarten, K = Kindergarten)

        :return: The low_grade of this APISchool2Summary.
        :rtype: str
        """
        return self._low_grade

    @low_grade.setter
    def low_grade(self, low_grade):
        """Sets the low_grade of this APISchool2Summary.

        The low grade served by this school (PK = Prekindergarten, K = Kindergarten)

        :param low_grade: The low_grade of this APISchool2Summary.
        :type low_grade: str
        """

        self._low_grade = low_grade

    @property
    def phone(self):
        """Gets the phone of this APISchool2Summary.

        School phone number

        :return: The phone of this APISchool2Summary.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this APISchool2Summary.

        School phone number

        :param phone: The phone of this APISchool2Summary.
        :type phone: str
        """

        self._phone = phone

    @property
    def private_coed(self):
        """Gets the private_coed of this APISchool2Summary.

        Coed/Boys/Girls (private schools only)

        :return: The private_coed of this APISchool2Summary.
        :rtype: str
        """
        return self._private_coed

    @private_coed.setter
    def private_coed(self, private_coed):
        """Sets the private_coed of this APISchool2Summary.

        Coed/Boys/Girls (private schools only)

        :param private_coed: The private_coed of this APISchool2Summary.
        :type private_coed: str
        """

        self._private_coed = private_coed

    @property
    def private_days(self):
        """Gets the private_days of this APISchool2Summary.

        Days in the school year (private schools only)

        :return: The private_days of this APISchool2Summary.
        :rtype: int
        """
        return self._private_days

    @private_days.setter
    def private_days(self, private_days):
        """Sets the private_days of this APISchool2Summary.

        Days in the school year (private schools only)

        :param private_days: The private_days of this APISchool2Summary.
        :type private_days: int
        """

        self._private_days = private_days

    @property
    def private_has_library(self):
        """Gets the private_has_library of this APISchool2Summary.

        Indicates if the school has a library (private schools only)

        :return: The private_has_library of this APISchool2Summary.
        :rtype: bool
        """
        return self._private_has_library

    @private_has_library.setter
    def private_has_library(self, private_has_library):
        """Sets the private_has_library of this APISchool2Summary.

        Indicates if the school has a library (private schools only)

        :param private_has_library: The private_has_library of this APISchool2Summary.
        :type private_has_library: bool
        """

        self._private_has_library = private_has_library

    @property
    def private_hours(self):
        """Gets the private_hours of this APISchool2Summary.

        Hours in the school day (private schools only)

        :return: The private_hours of this APISchool2Summary.
        :rtype: float
        """
        return self._private_hours

    @private_hours.setter
    def private_hours(self, private_hours):
        """Sets the private_hours of this APISchool2Summary.

        Hours in the school day (private schools only)

        :param private_hours: The private_hours of this APISchool2Summary.
        :type private_hours: float
        """

        self._private_hours = private_hours

    @property
    def private_orientation(self):
        """Gets the private_orientation of this APISchool2Summary.

        Affiliation of the school (private schools only)

        :return: The private_orientation of this APISchool2Summary.
        :rtype: str
        """
        return self._private_orientation

    @private_orientation.setter
    def private_orientation(self, private_orientation):
        """Sets the private_orientation of this APISchool2Summary.

        Affiliation of the school (private schools only)

        :param private_orientation: The private_orientation of this APISchool2Summary.
        :type private_orientation: str
        """

        self._private_orientation = private_orientation

    @property
    def rank_history(self):
        """Gets the rank_history of this APISchool2Summary.

        SchoolDigger yearly rank history of the school. To retrieve all years, call /schools/{id}.

        :return: The rank_history of this APISchool2Summary.
        :rtype: List[APIRankHistory]
        """
        return self._rank_history

    @rank_history.setter
    def rank_history(self, rank_history):
        """Sets the rank_history of this APISchool2Summary.

        SchoolDigger yearly rank history of the school. To retrieve all years, call /schools/{id}.

        :param rank_history: The rank_history of this APISchool2Summary.
        :type rank_history: List[APIRankHistory]
        """

        self._rank_history = rank_history

    @property
    def rank_movement(self):
        """Gets the rank_movement of this APISchool2Summary.

        Returns the movement of rank for this school between current and previous year

        :return: The rank_movement of this APISchool2Summary.
        :rtype: int
        """
        return self._rank_movement

    @rank_movement.setter
    def rank_movement(self, rank_movement):
        """Sets the rank_movement of this APISchool2Summary.

        Returns the movement of rank for this school between current and previous year

        :param rank_movement: The rank_movement of this APISchool2Summary.
        :type rank_movement: int
        """

        self._rank_movement = rank_movement

    @property
    def school_level(self):
        """Gets the school_level of this APISchool2Summary.

        The level of school (Elementary, Middle, High, Private, Alternative)

        :return: The school_level of this APISchool2Summary.
        :rtype: str
        """
        return self._school_level

    @school_level.setter
    def school_level(self, school_level):
        """Sets the school_level of this APISchool2Summary.

        The level of school (Elementary, Middle, High, Private, Alternative)

        :param school_level: The school_level of this APISchool2Summary.
        :type school_level: str
        """

        self._school_level = school_level

    @property
    def school_name(self):
        """Gets the school_name of this APISchool2Summary.

        School name

        :return: The school_name of this APISchool2Summary.
        :rtype: str
        """
        return self._school_name

    @school_name.setter
    def school_name(self, school_name):
        """Sets the school_name of this APISchool2Summary.

        School name

        :param school_name: The school_name of this APISchool2Summary.
        :type school_name: str
        """

        self._school_name = school_name

    @property
    def school_yearly_details(self):
        """Gets the school_yearly_details of this APISchool2Summary.

        School Yearly metrics. To retrieve all years, call /schools/{id}.

        :return: The school_yearly_details of this APISchool2Summary.
        :rtype: List[APIYearlyDemographics]
        """
        return self._school_yearly_details

    @school_yearly_details.setter
    def school_yearly_details(self, school_yearly_details):
        """Sets the school_yearly_details of this APISchool2Summary.

        School Yearly metrics. To retrieve all years, call /schools/{id}.

        :param school_yearly_details: The school_yearly_details of this APISchool2Summary.
        :type school_yearly_details: List[APIYearlyDemographics]
        """

        self._school_yearly_details = school_yearly_details

    @property
    def schoolid(self):
        """Gets the schoolid of this APISchool2Summary.

        SchoolDigger School ID Number (12 digits)

        :return: The schoolid of this APISchool2Summary.
        :rtype: str
        """
        return self._schoolid

    @schoolid.setter
    def schoolid(self, schoolid):
        """Sets the schoolid of this APISchool2Summary.

        SchoolDigger School ID Number (12 digits)

        :param schoolid: The schoolid of this APISchool2Summary.
        :type schoolid: str
        """

        self._schoolid = schoolid

    @property
    def url(self):
        """Gets the url of this APISchool2Summary.

        SchoolDigger URL for this school

        :return: The url of this APISchool2Summary.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this APISchool2Summary.

        SchoolDigger URL for this school

        :param url: The url of this APISchool2Summary.
        :type url: str
        """

        self._url = url

    @property
    def url_compare(self):
        """Gets the url_compare of this APISchool2Summary.

        SchoolDigger URL for comparing this school to nearby schools

        :return: The url_compare of this APISchool2Summary.
        :rtype: str
        """
        return self._url_compare

    @url_compare.setter
    def url_compare(self, url_compare):
        """Sets the url_compare of this APISchool2Summary.

        SchoolDigger URL for comparing this school to nearby schools

        :param url_compare: The url_compare of this APISchool2Summary.
        :type url_compare: str
        """

        self._url_compare = url_compare
