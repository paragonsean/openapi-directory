# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APISchoolAC(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, has_boundary: bool=None, high_grade: str=None, latitude: float=None, longitude: float=None, low_grade: str=None, rank: int=None, rank_of: int=None, rank_stars: int=None, school_level: str=None, school_name: str=None, schoolid: str=None, state: str=None, zip: str=None):
        """APISchoolAC - a model defined in OpenAPI

        :param city: The city of this APISchoolAC.
        :param has_boundary: The has_boundary of this APISchoolAC.
        :param high_grade: The high_grade of this APISchoolAC.
        :param latitude: The latitude of this APISchoolAC.
        :param longitude: The longitude of this APISchoolAC.
        :param low_grade: The low_grade of this APISchoolAC.
        :param rank: The rank of this APISchoolAC.
        :param rank_of: The rank_of of this APISchoolAC.
        :param rank_stars: The rank_stars of this APISchoolAC.
        :param school_level: The school_level of this APISchoolAC.
        :param school_name: The school_name of this APISchoolAC.
        :param schoolid: The schoolid of this APISchoolAC.
        :param state: The state of this APISchoolAC.
        :param zip: The zip of this APISchoolAC.
        """
        self.openapi_types = {
            'city': str,
            'has_boundary': bool,
            'high_grade': str,
            'latitude': float,
            'longitude': float,
            'low_grade': str,
            'rank': int,
            'rank_of': int,
            'rank_stars': int,
            'school_level': str,
            'school_name': str,
            'schoolid': str,
            'state': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'city',
            'has_boundary': 'hasBoundary',
            'high_grade': 'highGrade',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'low_grade': 'lowGrade',
            'rank': 'rank',
            'rank_of': 'rankOf',
            'rank_stars': 'rankStars',
            'school_level': 'schoolLevel',
            'school_name': 'schoolName',
            'schoolid': 'schoolid',
            'state': 'state',
            'zip': 'zip'
        }

        self._city = city
        self._has_boundary = has_boundary
        self._high_grade = high_grade
        self._latitude = latitude
        self._longitude = longitude
        self._low_grade = low_grade
        self._rank = rank
        self._rank_of = rank_of
        self._rank_stars = rank_stars
        self._school_level = school_level
        self._school_name = school_name
        self._schoolid = schoolid
        self._state = state
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APISchoolAC':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APISchoolAC of this APISchoolAC.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this APISchoolAC.

        School location city

        :return: The city of this APISchoolAC.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this APISchoolAC.

        School location city

        :param city: The city of this APISchoolAC.
        :type city: str
        """

        self._city = city

    @property
    def has_boundary(self):
        """Gets the has_boundary of this APISchoolAC.

        States whether there is an attendance boundary available for this school

        :return: The has_boundary of this APISchoolAC.
        :rtype: bool
        """
        return self._has_boundary

    @has_boundary.setter
    def has_boundary(self, has_boundary):
        """Sets the has_boundary of this APISchoolAC.

        States whether there is an attendance boundary available for this school

        :param has_boundary: The has_boundary of this APISchoolAC.
        :type has_boundary: bool
        """

        self._has_boundary = has_boundary

    @property
    def high_grade(self):
        """Gets the high_grade of this APISchoolAC.

        The high grade served by this school

        :return: The high_grade of this APISchoolAC.
        :rtype: str
        """
        return self._high_grade

    @high_grade.setter
    def high_grade(self, high_grade):
        """Sets the high_grade of this APISchoolAC.

        The high grade served by this school

        :param high_grade: The high_grade of this APISchoolAC.
        :type high_grade: str
        """

        self._high_grade = high_grade

    @property
    def latitude(self):
        """Gets the latitude of this APISchoolAC.

        School location latitude

        :return: The latitude of this APISchoolAC.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this APISchoolAC.

        School location latitude

        :param latitude: The latitude of this APISchoolAC.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this APISchoolAC.

        School location longitude

        :return: The longitude of this APISchoolAC.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this APISchoolAC.

        School location longitude

        :param longitude: The longitude of this APISchoolAC.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def low_grade(self):
        """Gets the low_grade of this APISchoolAC.

        The low grade served by this school (PK = Prekindergarten, K = Kindergarten)

        :return: The low_grade of this APISchoolAC.
        :rtype: str
        """
        return self._low_grade

    @low_grade.setter
    def low_grade(self, low_grade):
        """Sets the low_grade of this APISchoolAC.

        The low grade served by this school (PK = Prekindergarten, K = Kindergarten)

        :param low_grade: The low_grade of this APISchoolAC.
        :type low_grade: str
        """

        self._low_grade = low_grade

    @property
    def rank(self):
        """Gets the rank of this APISchoolAC.

        Statewide rank of this School

        :return: The rank of this APISchoolAC.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this APISchoolAC.

        Statewide rank of this School

        :param rank: The rank of this APISchoolAC.
        :type rank: int
        """

        self._rank = rank

    @property
    def rank_of(self):
        """Gets the rank_of of this APISchoolAC.

        Count of schools ranked at this state/level

        :return: The rank_of of this APISchoolAC.
        :rtype: int
        """
        return self._rank_of

    @rank_of.setter
    def rank_of(self, rank_of):
        """Sets the rank_of of this APISchoolAC.

        Count of schools ranked at this state/level

        :param rank_of: The rank_of of this APISchoolAC.
        :type rank_of: int
        """

        self._rank_of = rank_of

    @property
    def rank_stars(self):
        """Gets the rank_stars of this APISchoolAC.

        The number of stars SchoolDigger awarded in the ranking of the school (0-5, 5 is best)

        :return: The rank_stars of this APISchoolAC.
        :rtype: int
        """
        return self._rank_stars

    @rank_stars.setter
    def rank_stars(self, rank_stars):
        """Sets the rank_stars of this APISchoolAC.

        The number of stars SchoolDigger awarded in the ranking of the school (0-5, 5 is best)

        :param rank_stars: The rank_stars of this APISchoolAC.
        :type rank_stars: int
        """

        self._rank_stars = rank_stars

    @property
    def school_level(self):
        """Gets the school_level of this APISchoolAC.

        The level of school (Elementary, Middle, High, Private, Alternative)

        :return: The school_level of this APISchoolAC.
        :rtype: str
        """
        return self._school_level

    @school_level.setter
    def school_level(self, school_level):
        """Sets the school_level of this APISchoolAC.

        The level of school (Elementary, Middle, High, Private, Alternative)

        :param school_level: The school_level of this APISchoolAC.
        :type school_level: str
        """

        self._school_level = school_level

    @property
    def school_name(self):
        """Gets the school_name of this APISchoolAC.

        School name

        :return: The school_name of this APISchoolAC.
        :rtype: str
        """
        return self._school_name

    @school_name.setter
    def school_name(self, school_name):
        """Sets the school_name of this APISchoolAC.

        School name

        :param school_name: The school_name of this APISchoolAC.
        :type school_name: str
        """

        self._school_name = school_name

    @property
    def schoolid(self):
        """Gets the schoolid of this APISchoolAC.

        SchoolDigger School ID Number (12 digits). Use /schools/{schoolID} to retrieve the full school record

        :return: The schoolid of this APISchoolAC.
        :rtype: str
        """
        return self._schoolid

    @schoolid.setter
    def schoolid(self, schoolid):
        """Sets the schoolid of this APISchoolAC.

        SchoolDigger School ID Number (12 digits). Use /schools/{schoolID} to retrieve the full school record

        :param schoolid: The schoolid of this APISchoolAC.
        :type schoolid: str
        """

        self._schoolid = schoolid

    @property
    def state(self):
        """Gets the state of this APISchoolAC.

        School location state

        :return: The state of this APISchoolAC.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this APISchoolAC.

        School location state

        :param state: The state of this APISchoolAC.
        :type state: str
        """

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this APISchoolAC.

        School location zip code

        :return: The zip of this APISchoolAC.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this APISchoolAC.

        School location zip code

        :param zip: The zip of this APISchoolAC.
        :type zip: str
        """

        self._zip = zip
