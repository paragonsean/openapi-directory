# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_county import APICounty
from openapi_server.models.apilea_rank_history import APILEARankHistory
from openapi_server.models.apilea_yearly_detail import APILEAYearlyDetail
from openapi_server.models.api_location import APILocation
from openapi_server import util


class APIDistrict2Summary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: APILocation=None, county: APICounty=None, distance: float=None, district_id: str=None, district_name: str=None, district_yearly_details: List[APILEAYearlyDetail]=None, has_boundary: bool=None, high_grade: str=None, is_within_boundary: bool=None, location_is_within_boundary: bool=None, low_grade: str=None, number_alternative_schools: int=None, number_high_schools: int=None, number_middle_schools: int=None, number_primary_schools: int=None, number_total_schools: int=None, phone: str=None, rank_history: List[APILEARankHistory]=None, url: str=None):
        """APIDistrict2Summary - a model defined in OpenAPI

        :param address: The address of this APIDistrict2Summary.
        :param county: The county of this APIDistrict2Summary.
        :param distance: The distance of this APIDistrict2Summary.
        :param district_id: The district_id of this APIDistrict2Summary.
        :param district_name: The district_name of this APIDistrict2Summary.
        :param district_yearly_details: The district_yearly_details of this APIDistrict2Summary.
        :param has_boundary: The has_boundary of this APIDistrict2Summary.
        :param high_grade: The high_grade of this APIDistrict2Summary.
        :param is_within_boundary: The is_within_boundary of this APIDistrict2Summary.
        :param location_is_within_boundary: The location_is_within_boundary of this APIDistrict2Summary.
        :param low_grade: The low_grade of this APIDistrict2Summary.
        :param number_alternative_schools: The number_alternative_schools of this APIDistrict2Summary.
        :param number_high_schools: The number_high_schools of this APIDistrict2Summary.
        :param number_middle_schools: The number_middle_schools of this APIDistrict2Summary.
        :param number_primary_schools: The number_primary_schools of this APIDistrict2Summary.
        :param number_total_schools: The number_total_schools of this APIDistrict2Summary.
        :param phone: The phone of this APIDistrict2Summary.
        :param rank_history: The rank_history of this APIDistrict2Summary.
        :param url: The url of this APIDistrict2Summary.
        """
        self.openapi_types = {
            'address': APILocation,
            'county': APICounty,
            'distance': float,
            'district_id': str,
            'district_name': str,
            'district_yearly_details': List[APILEAYearlyDetail],
            'has_boundary': bool,
            'high_grade': str,
            'is_within_boundary': bool,
            'location_is_within_boundary': bool,
            'low_grade': str,
            'number_alternative_schools': int,
            'number_high_schools': int,
            'number_middle_schools': int,
            'number_primary_schools': int,
            'number_total_schools': int,
            'phone': str,
            'rank_history': List[APILEARankHistory],
            'url': str
        }

        self.attribute_map = {
            'address': 'address',
            'county': 'county',
            'distance': 'distance',
            'district_id': 'districtID',
            'district_name': 'districtName',
            'district_yearly_details': 'districtYearlyDetails',
            'has_boundary': 'hasBoundary',
            'high_grade': 'highGrade',
            'is_within_boundary': 'isWithinBoundary',
            'location_is_within_boundary': 'locationIsWithinBoundary',
            'low_grade': 'lowGrade',
            'number_alternative_schools': 'numberAlternativeSchools',
            'number_high_schools': 'numberHighSchools',
            'number_middle_schools': 'numberMiddleSchools',
            'number_primary_schools': 'numberPrimarySchools',
            'number_total_schools': 'numberTotalSchools',
            'phone': 'phone',
            'rank_history': 'rankHistory',
            'url': 'url'
        }

        self._address = address
        self._county = county
        self._distance = distance
        self._district_id = district_id
        self._district_name = district_name
        self._district_yearly_details = district_yearly_details
        self._has_boundary = has_boundary
        self._high_grade = high_grade
        self._is_within_boundary = is_within_boundary
        self._location_is_within_boundary = location_is_within_boundary
        self._low_grade = low_grade
        self._number_alternative_schools = number_alternative_schools
        self._number_high_schools = number_high_schools
        self._number_middle_schools = number_middle_schools
        self._number_primary_schools = number_primary_schools
        self._number_total_schools = number_total_schools
        self._phone = phone
        self._rank_history = rank_history
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIDistrict2Summary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIDistrict2Summary of this APIDistrict2Summary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this APIDistrict2Summary.


        :return: The address of this APIDistrict2Summary.
        :rtype: APILocation
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this APIDistrict2Summary.


        :param address: The address of this APIDistrict2Summary.
        :type address: APILocation
        """

        self._address = address

    @property
    def county(self):
        """Gets the county of this APIDistrict2Summary.


        :return: The county of this APIDistrict2Summary.
        :rtype: APICounty
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this APIDistrict2Summary.


        :param county: The county of this APIDistrict2Summary.
        :type county: APICounty
        """

        self._county = county

    @property
    def distance(self):
        """Gets the distance of this APIDistrict2Summary.

        Distance from nearLatitude/nearLongitude (if supplied)

        :return: The distance of this APIDistrict2Summary.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this APIDistrict2Summary.

        Distance from nearLatitude/nearLongitude (if supplied)

        :param distance: The distance of this APIDistrict2Summary.
        :type distance: float
        """

        self._distance = distance

    @property
    def district_id(self):
        """Gets the district_id of this APIDistrict2Summary.

        SchoolDigger District ID Number (7 digits). Use /districts/{districtID} to retrieve the entire district record

        :return: The district_id of this APIDistrict2Summary.
        :rtype: str
        """
        return self._district_id

    @district_id.setter
    def district_id(self, district_id):
        """Sets the district_id of this APIDistrict2Summary.

        SchoolDigger District ID Number (7 digits). Use /districts/{districtID} to retrieve the entire district record

        :param district_id: The district_id of this APIDistrict2Summary.
        :type district_id: str
        """

        self._district_id = district_id

    @property
    def district_name(self):
        """Gets the district_name of this APIDistrict2Summary.

        District name

        :return: The district_name of this APIDistrict2Summary.
        :rtype: str
        """
        return self._district_name

    @district_name.setter
    def district_name(self, district_name):
        """Sets the district_name of this APIDistrict2Summary.

        District name

        :param district_name: The district_name of this APIDistrict2Summary.
        :type district_name: str
        """

        self._district_name = district_name

    @property
    def district_yearly_details(self):
        """Gets the district_yearly_details of this APIDistrict2Summary.

        District yearly metrics

        :return: The district_yearly_details of this APIDistrict2Summary.
        :rtype: List[APILEAYearlyDetail]
        """
        return self._district_yearly_details

    @district_yearly_details.setter
    def district_yearly_details(self, district_yearly_details):
        """Sets the district_yearly_details of this APIDistrict2Summary.

        District yearly metrics

        :param district_yearly_details: The district_yearly_details of this APIDistrict2Summary.
        :type district_yearly_details: List[APILEAYearlyDetail]
        """

        self._district_yearly_details = district_yearly_details

    @property
    def has_boundary(self):
        """Gets the has_boundary of this APIDistrict2Summary.

        Indicates that an attendance boundary is available for this district. (To retrieve, look up district with /districts/{id})

        :return: The has_boundary of this APIDistrict2Summary.
        :rtype: bool
        """
        return self._has_boundary

    @has_boundary.setter
    def has_boundary(self, has_boundary):
        """Sets the has_boundary of this APIDistrict2Summary.

        Indicates that an attendance boundary is available for this district. (To retrieve, look up district with /districts/{id})

        :param has_boundary: The has_boundary of this APIDistrict2Summary.
        :type has_boundary: bool
        """

        self._has_boundary = has_boundary

    @property
    def high_grade(self):
        """Gets the high_grade of this APIDistrict2Summary.

        The high grade served by this district

        :return: The high_grade of this APIDistrict2Summary.
        :rtype: str
        """
        return self._high_grade

    @high_grade.setter
    def high_grade(self, high_grade):
        """Sets the high_grade of this APIDistrict2Summary.

        The high grade served by this district

        :param high_grade: The high_grade of this APIDistrict2Summary.
        :type high_grade: str
        """

        self._high_grade = high_grade

    @property
    def is_within_boundary(self):
        """Gets the is_within_boundary of this APIDistrict2Summary.

        Indicates whether this district's boundary includes the specified location from nearLatitude/nearLongitude

        :return: The is_within_boundary of this APIDistrict2Summary.
        :rtype: bool
        """
        return self._is_within_boundary

    @is_within_boundary.setter
    def is_within_boundary(self, is_within_boundary):
        """Sets the is_within_boundary of this APIDistrict2Summary.

        Indicates whether this district's boundary includes the specified location from nearLatitude/nearLongitude

        :param is_within_boundary: The is_within_boundary of this APIDistrict2Summary.
        :type is_within_boundary: bool
        """

        self._is_within_boundary = is_within_boundary

    @property
    def location_is_within_boundary(self):
        """Gets the location_is_within_boundary of this APIDistrict2Summary.

        Indicates whether this school's boundary includes the specified location from nearLatitude/nearLongitude or boundaryAddress (Enterprise API level)

        :return: The location_is_within_boundary of this APIDistrict2Summary.
        :rtype: bool
        """
        return self._location_is_within_boundary

    @location_is_within_boundary.setter
    def location_is_within_boundary(self, location_is_within_boundary):
        """Sets the location_is_within_boundary of this APIDistrict2Summary.

        Indicates whether this school's boundary includes the specified location from nearLatitude/nearLongitude or boundaryAddress (Enterprise API level)

        :param location_is_within_boundary: The location_is_within_boundary of this APIDistrict2Summary.
        :type location_is_within_boundary: bool
        """

        self._location_is_within_boundary = location_is_within_boundary

    @property
    def low_grade(self):
        """Gets the low_grade of this APIDistrict2Summary.

        The low grade served by this district (PK = Prekindergarten, K = Kindergarten)

        :return: The low_grade of this APIDistrict2Summary.
        :rtype: str
        """
        return self._low_grade

    @low_grade.setter
    def low_grade(self, low_grade):
        """Sets the low_grade of this APIDistrict2Summary.

        The low grade served by this district (PK = Prekindergarten, K = Kindergarten)

        :param low_grade: The low_grade of this APIDistrict2Summary.
        :type low_grade: str
        """

        self._low_grade = low_grade

    @property
    def number_alternative_schools(self):
        """Gets the number_alternative_schools of this APIDistrict2Summary.

        Count of schools designated as other/alternative schools

        :return: The number_alternative_schools of this APIDistrict2Summary.
        :rtype: int
        """
        return self._number_alternative_schools

    @number_alternative_schools.setter
    def number_alternative_schools(self, number_alternative_schools):
        """Sets the number_alternative_schools of this APIDistrict2Summary.

        Count of schools designated as other/alternative schools

        :param number_alternative_schools: The number_alternative_schools of this APIDistrict2Summary.
        :type number_alternative_schools: int
        """

        self._number_alternative_schools = number_alternative_schools

    @property
    def number_high_schools(self):
        """Gets the number_high_schools of this APIDistrict2Summary.

        Count of schools designated as high schools

        :return: The number_high_schools of this APIDistrict2Summary.
        :rtype: int
        """
        return self._number_high_schools

    @number_high_schools.setter
    def number_high_schools(self, number_high_schools):
        """Sets the number_high_schools of this APIDistrict2Summary.

        Count of schools designated as high schools

        :param number_high_schools: The number_high_schools of this APIDistrict2Summary.
        :type number_high_schools: int
        """

        self._number_high_schools = number_high_schools

    @property
    def number_middle_schools(self):
        """Gets the number_middle_schools of this APIDistrict2Summary.

        Count of schools designated as middle schools

        :return: The number_middle_schools of this APIDistrict2Summary.
        :rtype: int
        """
        return self._number_middle_schools

    @number_middle_schools.setter
    def number_middle_schools(self, number_middle_schools):
        """Sets the number_middle_schools of this APIDistrict2Summary.

        Count of schools designated as middle schools

        :param number_middle_schools: The number_middle_schools of this APIDistrict2Summary.
        :type number_middle_schools: int
        """

        self._number_middle_schools = number_middle_schools

    @property
    def number_primary_schools(self):
        """Gets the number_primary_schools of this APIDistrict2Summary.

        Count of schools designated as primary schools

        :return: The number_primary_schools of this APIDistrict2Summary.
        :rtype: int
        """
        return self._number_primary_schools

    @number_primary_schools.setter
    def number_primary_schools(self, number_primary_schools):
        """Sets the number_primary_schools of this APIDistrict2Summary.

        Count of schools designated as primary schools

        :param number_primary_schools: The number_primary_schools of this APIDistrict2Summary.
        :type number_primary_schools: int
        """

        self._number_primary_schools = number_primary_schools

    @property
    def number_total_schools(self):
        """Gets the number_total_schools of this APIDistrict2Summary.

        Count of schools in the district

        :return: The number_total_schools of this APIDistrict2Summary.
        :rtype: int
        """
        return self._number_total_schools

    @number_total_schools.setter
    def number_total_schools(self, number_total_schools):
        """Sets the number_total_schools of this APIDistrict2Summary.

        Count of schools in the district

        :param number_total_schools: The number_total_schools of this APIDistrict2Summary.
        :type number_total_schools: int
        """

        self._number_total_schools = number_total_schools

    @property
    def phone(self):
        """Gets the phone of this APIDistrict2Summary.

        District phone number

        :return: The phone of this APIDistrict2Summary.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this APIDistrict2Summary.

        District phone number

        :param phone: The phone of this APIDistrict2Summary.
        :type phone: str
        """

        self._phone = phone

    @property
    def rank_history(self):
        """Gets the rank_history of this APIDistrict2Summary.

        SchoolDigger yearly rank history of the district

        :return: The rank_history of this APIDistrict2Summary.
        :rtype: List[APILEARankHistory]
        """
        return self._rank_history

    @rank_history.setter
    def rank_history(self, rank_history):
        """Sets the rank_history of this APIDistrict2Summary.

        SchoolDigger yearly rank history of the district

        :param rank_history: The rank_history of this APIDistrict2Summary.
        :type rank_history: List[APILEARankHistory]
        """

        self._rank_history = rank_history

    @property
    def url(self):
        """Gets the url of this APIDistrict2Summary.

        SchoolDigger URL for this district

        :return: The url of this APIDistrict2Summary.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this APIDistrict2Summary.

        SchoolDigger URL for this district

        :param url: The url of this APIDistrict2Summary.
        :type url: str
        """

        self._url = url
