/**
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIDistrictListRank2 from '../model/APIDistrictListRank2';
import APISchoolListRank2 from '../model/APISchoolListRank2';

/**
* Rankings service.
* @module api/RankingsApi
* @version v2.0
*/
export default class RankingsApi {

    /**
    * Constructs a new RankingsApi. 
    * @alias module:api/RankingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the rankingsGetRankDistrict operation.
     * @callback module:api/RankingsApi~rankingsGetRankDistrictCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIDistrictListRank2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a SchoolDigger district ranking list
     * @param {String} st Two character state (e.g. 'CA')
     * @param {String} appID Your API app id
     * @param {String} appKey Your API app key
     * @param {Object} opts Optional parameters
     * @param {Number} [year] The ranking year (leave blank for most recent year)
     * @param {Number} [page] Page number to retrieve (optional, default: 1)
     * @param {Number} [perPage] Number of districts to retrieve on a page (50 max) (optional, default: 10)
     * @param {module:api/RankingsApi~rankingsGetRankDistrictCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIDistrictListRank2}
     */
    rankingsGetRankDistrict(st, appID, appKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'st' is set
      if (st === undefined || st === null) {
        throw new Error("Missing the required parameter 'st' when calling rankingsGetRankDistrict");
      }
      // verify the required parameter 'appID' is set
      if (appID === undefined || appID === null) {
        throw new Error("Missing the required parameter 'appID' when calling rankingsGetRankDistrict");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling rankingsGetRankDistrict");
      }

      let pathParams = {
        'st': st
      };
      let queryParams = {
        'year': opts['year'],
        'page': opts['page'],
        'perPage': opts['perPage'],
        'appID': appID,
        'appKey': appKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIDistrictListRank2;
      return this.apiClient.callApi(
        '/v2.0/rankings/districts/{st}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rankingsGetSchoolRank2 operation.
     * @callback module:api/RankingsApi~rankingsGetSchoolRank2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/APISchoolListRank2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a SchoolDigger school ranking list
     * @param {String} st Two character state (e.g. 'CA')
     * @param {String} appID Your API app id
     * @param {String} appKey Your API app key
     * @param {Object} opts Optional parameters
     * @param {Number} [year] The ranking year (leave blank for most recent year)
     * @param {String} [level] Level of ranking: 'Elementary', 'Middle', or 'High'
     * @param {Number} [page] Page number to retrieve (optional, default: 1)
     * @param {Number} [perPage] Number of schools to retrieve on a page (50 max) (optional, default: 10)
     * @param {module:api/RankingsApi~rankingsGetSchoolRank2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APISchoolListRank2}
     */
    rankingsGetSchoolRank2(st, appID, appKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'st' is set
      if (st === undefined || st === null) {
        throw new Error("Missing the required parameter 'st' when calling rankingsGetSchoolRank2");
      }
      // verify the required parameter 'appID' is set
      if (appID === undefined || appID === null) {
        throw new Error("Missing the required parameter 'appID' when calling rankingsGetSchoolRank2");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling rankingsGetSchoolRank2");
      }

      let pathParams = {
        'st': st
      };
      let queryParams = {
        'year': opts['year'],
        'level': opts['level'],
        'page': opts['page'],
        'perPage': opts['perPage'],
        'appID': appID,
        'appKey': appKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APISchoolListRank2;
      return this.apiClient.callApi(
        '/v2.0/rankings/schools/{st}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
