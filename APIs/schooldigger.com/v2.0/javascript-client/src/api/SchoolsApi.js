/**
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APISchool20Full from '../model/APISchool20Full';
import APISchoolList2 from '../model/APISchoolList2';

/**
* Schools service.
* @module api/SchoolsApi
* @version v2.0
*/
export default class SchoolsApi {

    /**
    * Constructs a new SchoolsApi. 
    * @alias module:api/SchoolsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the schoolsGetAllSchools20 operation.
     * @callback module:api/SchoolsApi~schoolsGetAllSchools20Callback
     * @param {String} error Error message, if any.
     * @param {module:model/APISchoolList2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of schools
     * Search the SchoolDigger database for schools. You may use any combination of criteria as query parameters.
     * @param {String} st Two character state (e.g. 'CA') - required
     * @param {String} appID Your API app id
     * @param {String} appKey Your API app key
     * @param {Object} opts Optional parameters
     * @param {String} [q] Search term - note: will match school name or city (optional)
     * @param {Boolean} [qSearchSchoolNameOnly] For parameter 'q', only search school names instead of school and city (optional)
     * @param {String} [districtID] Search for schools within this district (7 digit district id) (optional)
     * @param {String} [level] Search for schools at this level. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Public', 'Private' (optional). 'Public' returns all Elementary, Middle, High and Alternative schools
     * @param {String} [city] Search for schools in this city (optional)
     * @param {String} [zip] Search for schools in this 5-digit zip code (optional)
     * @param {Boolean} [isMagnet] True = return only magnet schools, False = return only non-magnet schools (optional) (Pro, Enterprise API levels only)
     * @param {Boolean} [isCharter] True = return only charter schools, False = return only non-charter schools (optional) (Pro, Enterprise API levels only)
     * @param {Boolean} [isVirtual] True = return only virtual schools, False = return only non-virtual schools (optional) (Pro, Enterprise API levels only)
     * @param {Boolean} [isTitleI] True = return only Title I schools, False = return only non-Title I schools (optional) (Pro, Enterprise API levels only)
     * @param {Boolean} [isTitleISchoolwide] True = return only Title I school-wide schools, False = return only non-Title I school-wide schools (optional) (Pro, Enterprise API levels only)
     * @param {Number} [nearLatitude] Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. 44.982560) (optional) (Pro, Enterprise API levels only.)
     * @param {Number} [nearLongitude] Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. -124.289185) (optional) (Pro, Enterprise API levels only.)
     * @param {String} [nearAddress] Search for schools within (distanceMiles) of this address. Example: '123 Main St. AnyTown CA 90001' (optional) (Pro, Enterprise API level only) IMPORTANT NOTE: If you have the lat/long of the address, use nearLatitude and nearLongitude instead for much faster response times
     * @param {Number} [distanceMiles] Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (Default 5 miles) (optional) (Pro, Enterprise API levels only)
     * @param {Number} [boundaryLatitude] Search for schools that include this (boundaryLatitude)/(boundaryLongitude) in its attendance boundary (e.g. 44.982560) (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit.)
     * @param {Number} [boundaryLongitude] Search for schools that include this (boundaryLatitude)/(boundaryLongitude) in its attendance boundary (e.g. -124.289185) (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit.
     * @param {String} [boundaryAddress] Full U.S. address: flag returned schools that include this address in its attendance boundary. Example: '123 Main St. AnyTown CA 90001' (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit.) IMPORTANT NOTE: If you have the lat/long of the address, use boundaryLatitude and boundaryLongitude instead for much faster response times
     * @param {Boolean} [isInBoundaryOnly] Return only the schools that include given location (boundaryLatitude/boundaryLongitude) or (boundaryAddress) in its attendance boundary (Requires School Boundary API Plan add-on.)
     * @param {Number} [boxLatitudeNW] Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
     * @param {Number} [boxLongitudeNW] Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
     * @param {Number} [boxLatitudeSE] Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
     * @param {Number} [boxLongitudeSE] Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
     * @param {Number} [page] Page number to retrieve (optional, default: 1)
     * @param {Number} [perPage] Number of schools to retrieve on a page (50 max) (optional, default: 10)
     * @param {String} [sortBy] Sort list. Values are: schoolname, distance, rank. For descending order, precede with '-' i.e. -schoolname (optional, default: schoolname)
     * @param {Boolean} [includeUnrankedSchoolsInRankSort] If sortBy is 'rank', this boolean determines if schools with no rank are included in the result (optional, default: false)
     * @param {module:api/SchoolsApi~schoolsGetAllSchools20Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APISchoolList2}
     */
    schoolsGetAllSchools20(st, appID, appKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'st' is set
      if (st === undefined || st === null) {
        throw new Error("Missing the required parameter 'st' when calling schoolsGetAllSchools20");
      }
      // verify the required parameter 'appID' is set
      if (appID === undefined || appID === null) {
        throw new Error("Missing the required parameter 'appID' when calling schoolsGetAllSchools20");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling schoolsGetAllSchools20");
      }

      let pathParams = {
      };
      let queryParams = {
        'st': st,
        'q': opts['q'],
        'qSearchSchoolNameOnly': opts['qSearchSchoolNameOnly'],
        'districtID': opts['districtID'],
        'level': opts['level'],
        'city': opts['city'],
        'zip': opts['zip'],
        'isMagnet': opts['isMagnet'],
        'isCharter': opts['isCharter'],
        'isVirtual': opts['isVirtual'],
        'isTitleI': opts['isTitleI'],
        'isTitleISchoolwide': opts['isTitleISchoolwide'],
        'nearLatitude': opts['nearLatitude'],
        'nearLongitude': opts['nearLongitude'],
        'nearAddress': opts['nearAddress'],
        'distanceMiles': opts['distanceMiles'],
        'boundaryLatitude': opts['boundaryLatitude'],
        'boundaryLongitude': opts['boundaryLongitude'],
        'boundaryAddress': opts['boundaryAddress'],
        'isInBoundaryOnly': opts['isInBoundaryOnly'],
        'boxLatitudeNW': opts['boxLatitudeNW'],
        'boxLongitudeNW': opts['boxLongitudeNW'],
        'boxLatitudeSE': opts['boxLatitudeSE'],
        'boxLongitudeSE': opts['boxLongitudeSE'],
        'page': opts['page'],
        'perPage': opts['perPage'],
        'sortBy': opts['sortBy'],
        'includeUnrankedSchoolsInRankSort': opts['includeUnrankedSchoolsInRankSort'],
        'appID': appID,
        'appKey': appKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APISchoolList2;
      return this.apiClient.callApi(
        '/v2.0/schools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schoolsGetSchool20 operation.
     * @callback module:api/SchoolsApi~schoolsGetSchool20Callback
     * @param {String} error Error message, if any.
     * @param {module:model/APISchool20Full} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a detailed record for one school
     * Retrieve a school record from the SchoolDigger database
     * @param {String} id The 12 digit School ID (e.g. 064215006903)
     * @param {String} appID Your API app id
     * @param {String} appKey Your API app key
     * @param {module:api/SchoolsApi~schoolsGetSchool20Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APISchool20Full}
     */
    schoolsGetSchool20(id, appID, appKey, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling schoolsGetSchool20");
      }
      // verify the required parameter 'appID' is set
      if (appID === undefined || appID === null) {
        throw new Error("Missing the required parameter 'appID' when calling schoolsGetSchool20");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling schoolsGetSchool20");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'appID': appID,
        'appKey': appKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APISchool20Full;
      return this.apiClient.callApi(
        '/v2.0/schools/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
