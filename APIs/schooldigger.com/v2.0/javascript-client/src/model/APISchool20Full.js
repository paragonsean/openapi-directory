/**
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APICounty from './APICounty';
import APIDistrictSum from './APIDistrictSum';
import APILocation from './APILocation';
import APIRankHistory from './APIRankHistory';
import APISchoolFinance from './APISchoolFinance';
import APISchoolReview from './APISchoolReview';
import APITestScoreWrapper from './APITestScoreWrapper';
import APIYearlyDemographics from './APIYearlyDemographics';

/**
 * The APISchool20Full model module.
 * @module model/APISchool20Full
 * @version v2.0
 */
class APISchool20Full {
    /**
     * Constructs a new <code>APISchool20Full</code>.
     * @alias module:model/APISchool20Full
     */
    constructor() { 
        
        APISchool20Full.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>APISchool20Full</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/APISchool20Full} obj Optional instance to populate.
     * @return {module:model/APISchool20Full} The populated <code>APISchool20Full</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new APISchool20Full();

            if (data.hasOwnProperty('address')) {
                obj['address'] = APILocation.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = APICounty.constructFromObject(data['county']);
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = APIDistrictSum.constructFromObject(data['district']);
            }
            if (data.hasOwnProperty('finance')) {
                obj['finance'] = ApiClient.convertToType(data['finance'], [APISchoolFinance]);
            }
            if (data.hasOwnProperty('highGrade')) {
                obj['highGrade'] = ApiClient.convertToType(data['highGrade'], 'String');
            }
            if (data.hasOwnProperty('isCharterSchool')) {
                obj['isCharterSchool'] = ApiClient.convertToType(data['isCharterSchool'], 'String');
            }
            if (data.hasOwnProperty('isMagnetSchool')) {
                obj['isMagnetSchool'] = ApiClient.convertToType(data['isMagnetSchool'], 'String');
            }
            if (data.hasOwnProperty('isPrivate')) {
                obj['isPrivate'] = ApiClient.convertToType(data['isPrivate'], 'Boolean');
            }
            if (data.hasOwnProperty('isTitleISchool')) {
                obj['isTitleISchool'] = ApiClient.convertToType(data['isTitleISchool'], 'String');
            }
            if (data.hasOwnProperty('isTitleISchoolwideSchool')) {
                obj['isTitleISchoolwideSchool'] = ApiClient.convertToType(data['isTitleISchoolwideSchool'], 'String');
            }
            if (data.hasOwnProperty('isVirtualSchool')) {
                obj['isVirtualSchool'] = ApiClient.convertToType(data['isVirtualSchool'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('lowGrade')) {
                obj['lowGrade'] = ApiClient.convertToType(data['lowGrade'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('privateCoed')) {
                obj['privateCoed'] = ApiClient.convertToType(data['privateCoed'], 'String');
            }
            if (data.hasOwnProperty('privateDays')) {
                obj['privateDays'] = ApiClient.convertToType(data['privateDays'], 'Number');
            }
            if (data.hasOwnProperty('privateHasLibrary')) {
                obj['privateHasLibrary'] = ApiClient.convertToType(data['privateHasLibrary'], 'Boolean');
            }
            if (data.hasOwnProperty('privateHours')) {
                obj['privateHours'] = ApiClient.convertToType(data['privateHours'], 'Number');
            }
            if (data.hasOwnProperty('privateOrientation')) {
                obj['privateOrientation'] = ApiClient.convertToType(data['privateOrientation'], 'String');
            }
            if (data.hasOwnProperty('rankHistory')) {
                obj['rankHistory'] = ApiClient.convertToType(data['rankHistory'], [APIRankHistory]);
            }
            if (data.hasOwnProperty('rankMovement')) {
                obj['rankMovement'] = ApiClient.convertToType(data['rankMovement'], 'Number');
            }
            if (data.hasOwnProperty('reviews')) {
                obj['reviews'] = ApiClient.convertToType(data['reviews'], [APISchoolReview]);
            }
            if (data.hasOwnProperty('schoolLevel')) {
                obj['schoolLevel'] = ApiClient.convertToType(data['schoolLevel'], 'String');
            }
            if (data.hasOwnProperty('schoolName')) {
                obj['schoolName'] = ApiClient.convertToType(data['schoolName'], 'String');
            }
            if (data.hasOwnProperty('schoolYearlyDetails')) {
                obj['schoolYearlyDetails'] = ApiClient.convertToType(data['schoolYearlyDetails'], [APIYearlyDemographics]);
            }
            if (data.hasOwnProperty('schoolid')) {
                obj['schoolid'] = ApiClient.convertToType(data['schoolid'], 'String');
            }
            if (data.hasOwnProperty('testScores')) {
                obj['testScores'] = ApiClient.convertToType(data['testScores'], [APITestScoreWrapper]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('urlCompareSchoolDigger')) {
                obj['urlCompareSchoolDigger'] = ApiClient.convertToType(data['urlCompareSchoolDigger'], 'String');
            }
            if (data.hasOwnProperty('urlSchoolDigger')) {
                obj['urlSchoolDigger'] = ApiClient.convertToType(data['urlSchoolDigger'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>APISchool20Full</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>APISchool20Full</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          APILocation.validateJSON(data['address']);
        }
        // validate the optional field `county`
        if (data['county']) { // data not null
          APICounty.validateJSON(data['county']);
        }
        // validate the optional field `district`
        if (data['district']) { // data not null
          APIDistrictSum.validateJSON(data['district']);
        }
        if (data['finance']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['finance'])) {
                throw new Error("Expected the field `finance` to be an array in the JSON data but got " + data['finance']);
            }
            // validate the optional field `finance` (array)
            for (const item of data['finance']) {
                APISchoolFinance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['highGrade'] && !(typeof data['highGrade'] === 'string' || data['highGrade'] instanceof String)) {
            throw new Error("Expected the field `highGrade` to be a primitive type in the JSON string but got " + data['highGrade']);
        }
        // ensure the json data is a string
        if (data['isCharterSchool'] && !(typeof data['isCharterSchool'] === 'string' || data['isCharterSchool'] instanceof String)) {
            throw new Error("Expected the field `isCharterSchool` to be a primitive type in the JSON string but got " + data['isCharterSchool']);
        }
        // ensure the json data is a string
        if (data['isMagnetSchool'] && !(typeof data['isMagnetSchool'] === 'string' || data['isMagnetSchool'] instanceof String)) {
            throw new Error("Expected the field `isMagnetSchool` to be a primitive type in the JSON string but got " + data['isMagnetSchool']);
        }
        // ensure the json data is a string
        if (data['isTitleISchool'] && !(typeof data['isTitleISchool'] === 'string' || data['isTitleISchool'] instanceof String)) {
            throw new Error("Expected the field `isTitleISchool` to be a primitive type in the JSON string but got " + data['isTitleISchool']);
        }
        // ensure the json data is a string
        if (data['isTitleISchoolwideSchool'] && !(typeof data['isTitleISchoolwideSchool'] === 'string' || data['isTitleISchoolwideSchool'] instanceof String)) {
            throw new Error("Expected the field `isTitleISchoolwideSchool` to be a primitive type in the JSON string but got " + data['isTitleISchoolwideSchool']);
        }
        // ensure the json data is a string
        if (data['isVirtualSchool'] && !(typeof data['isVirtualSchool'] === 'string' || data['isVirtualSchool'] instanceof String)) {
            throw new Error("Expected the field `isVirtualSchool` to be a primitive type in the JSON string but got " + data['isVirtualSchool']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['lowGrade'] && !(typeof data['lowGrade'] === 'string' || data['lowGrade'] instanceof String)) {
            throw new Error("Expected the field `lowGrade` to be a primitive type in the JSON string but got " + data['lowGrade']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['privateCoed'] && !(typeof data['privateCoed'] === 'string' || data['privateCoed'] instanceof String)) {
            throw new Error("Expected the field `privateCoed` to be a primitive type in the JSON string but got " + data['privateCoed']);
        }
        // ensure the json data is a string
        if (data['privateOrientation'] && !(typeof data['privateOrientation'] === 'string' || data['privateOrientation'] instanceof String)) {
            throw new Error("Expected the field `privateOrientation` to be a primitive type in the JSON string but got " + data['privateOrientation']);
        }
        if (data['rankHistory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rankHistory'])) {
                throw new Error("Expected the field `rankHistory` to be an array in the JSON data but got " + data['rankHistory']);
            }
            // validate the optional field `rankHistory` (array)
            for (const item of data['rankHistory']) {
                APIRankHistory.validateJSON(item);
            };
        }
        if (data['reviews']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reviews'])) {
                throw new Error("Expected the field `reviews` to be an array in the JSON data but got " + data['reviews']);
            }
            // validate the optional field `reviews` (array)
            for (const item of data['reviews']) {
                APISchoolReview.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['schoolLevel'] && !(typeof data['schoolLevel'] === 'string' || data['schoolLevel'] instanceof String)) {
            throw new Error("Expected the field `schoolLevel` to be a primitive type in the JSON string but got " + data['schoolLevel']);
        }
        // ensure the json data is a string
        if (data['schoolName'] && !(typeof data['schoolName'] === 'string' || data['schoolName'] instanceof String)) {
            throw new Error("Expected the field `schoolName` to be a primitive type in the JSON string but got " + data['schoolName']);
        }
        if (data['schoolYearlyDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['schoolYearlyDetails'])) {
                throw new Error("Expected the field `schoolYearlyDetails` to be an array in the JSON data but got " + data['schoolYearlyDetails']);
            }
            // validate the optional field `schoolYearlyDetails` (array)
            for (const item of data['schoolYearlyDetails']) {
                APIYearlyDemographics.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['schoolid'] && !(typeof data['schoolid'] === 'string' || data['schoolid'] instanceof String)) {
            throw new Error("Expected the field `schoolid` to be a primitive type in the JSON string but got " + data['schoolid']);
        }
        if (data['testScores']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testScores'])) {
                throw new Error("Expected the field `testScores` to be an array in the JSON data but got " + data['testScores']);
            }
            // validate the optional field `testScores` (array)
            for (const item of data['testScores']) {
                APITestScoreWrapper.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['urlCompareSchoolDigger'] && !(typeof data['urlCompareSchoolDigger'] === 'string' || data['urlCompareSchoolDigger'] instanceof String)) {
            throw new Error("Expected the field `urlCompareSchoolDigger` to be a primitive type in the JSON string but got " + data['urlCompareSchoolDigger']);
        }
        // ensure the json data is a string
        if (data['urlSchoolDigger'] && !(typeof data['urlSchoolDigger'] === 'string' || data['urlSchoolDigger'] instanceof String)) {
            throw new Error("Expected the field `urlSchoolDigger` to be a primitive type in the JSON string but got " + data['urlSchoolDigger']);
        }

        return true;
    }


}



/**
 * @member {module:model/APILocation} address
 */
APISchool20Full.prototype['address'] = undefined;

/**
 * @member {module:model/APICounty} county
 */
APISchool20Full.prototype['county'] = undefined;

/**
 * @member {module:model/APIDistrictSum} district
 */
APISchool20Full.prototype['district'] = undefined;

/**
 * School finance (Pro and Enterprise API level only)
 * @member {Array.<module:model/APISchoolFinance>} finance
 */
APISchool20Full.prototype['finance'] = undefined;

/**
 * The high grade served by this school
 * @member {String} highGrade
 */
APISchool20Full.prototype['highGrade'] = undefined;

/**
 * Indicates if school is a charter school (Yes/No/n-a)
 * @member {String} isCharterSchool
 */
APISchool20Full.prototype['isCharterSchool'] = undefined;

/**
 * Indicates if school is a magnet school (Yes/No/n-a)
 * @member {String} isMagnetSchool
 */
APISchool20Full.prototype['isMagnetSchool'] = undefined;

/**
 * Indicates if school is a private school (Yes/No)
 * @member {Boolean} isPrivate
 */
APISchool20Full.prototype['isPrivate'] = undefined;

/**
 * Indicates if school is a Title I school (Yes/No/n-a)
 * @member {String} isTitleISchool
 */
APISchool20Full.prototype['isTitleISchool'] = undefined;

/**
 * Indicates if a school-wide Title I school (Yes/No/n-a)
 * @member {String} isTitleISchoolwideSchool
 */
APISchool20Full.prototype['isTitleISchoolwideSchool'] = undefined;

/**
 * Indicates if school is a virtual school (Yes/No/n-a)
 * @member {String} isVirtualSchool
 */
APISchool20Full.prototype['isVirtualSchool'] = undefined;

/**
 * NCES Locale of school (https://nces.ed.gov/ccd/rural_locales.asp)
 * @member {String} locale
 */
APISchool20Full.prototype['locale'] = undefined;

/**
 * The low grade served by this school (PK = Prekindergarten, K = Kindergarten)
 * @member {String} lowGrade
 */
APISchool20Full.prototype['lowGrade'] = undefined;

/**
 * School phone number
 * @member {String} phone
 */
APISchool20Full.prototype['phone'] = undefined;

/**
 * Coed/Boys/Girls (private schools only)
 * @member {String} privateCoed
 */
APISchool20Full.prototype['privateCoed'] = undefined;

/**
 * Days in the school year (private schools only)
 * @member {Number} privateDays
 */
APISchool20Full.prototype['privateDays'] = undefined;

/**
 * Indicates if the school has a library (private schools only)
 * @member {Boolean} privateHasLibrary
 */
APISchool20Full.prototype['privateHasLibrary'] = undefined;

/**
 * Hours in the school day (private schools only)
 * @member {Number} privateHours
 */
APISchool20Full.prototype['privateHours'] = undefined;

/**
 * Affiliation of the school (private schools only)
 * @member {String} privateOrientation
 */
APISchool20Full.prototype['privateOrientation'] = undefined;

/**
 * SchoolDigger yearly rank history of the school
 * @member {Array.<module:model/APIRankHistory>} rankHistory
 */
APISchool20Full.prototype['rankHistory'] = undefined;

/**
 * Returns the movement of rank for this school between current and previous year
 * @member {Number} rankMovement
 */
APISchool20Full.prototype['rankMovement'] = undefined;

/**
 * List of reviews for this school submitted by SchoolDigger site visitors
 * @member {Array.<module:model/APISchoolReview>} reviews
 */
APISchool20Full.prototype['reviews'] = undefined;

/**
 * The level of school (Elementary, Middle, High, Private, Alternative)
 * @member {String} schoolLevel
 */
APISchool20Full.prototype['schoolLevel'] = undefined;

/**
 * School name
 * @member {String} schoolName
 */
APISchool20Full.prototype['schoolName'] = undefined;

/**
 * School Yearly metrics
 * @member {Array.<module:model/APIYearlyDemographics>} schoolYearlyDetails
 */
APISchool20Full.prototype['schoolYearlyDetails'] = undefined;

/**
 * SchoolDigger School ID Number (12 digits)
 * @member {String} schoolid
 */
APISchool20Full.prototype['schoolid'] = undefined;

/**
 * Test scores (including district and state) -- requires Pro or Enterprise level API subscription
 * @member {Array.<module:model/APITestScoreWrapper>} testScores
 */
APISchool20Full.prototype['testScores'] = undefined;

/**
 * URL of the school's public website
 * @member {String} url
 */
APISchool20Full.prototype['url'] = undefined;

/**
 * SchoolDigger URL for comparing this school to nearby schools
 * @member {String} urlCompareSchoolDigger
 */
APISchool20Full.prototype['urlCompareSchoolDigger'] = undefined;

/**
 * SchoolDigger URL for this school
 * @member {String} urlSchoolDigger
 */
APISchool20Full.prototype['urlSchoolDigger'] = undefined;






export default APISchool20Full;

