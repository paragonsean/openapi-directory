/**
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APITestScore from './APITestScore';

/**
 * The APITestScoreWrapper model module.
 * @module model/APITestScoreWrapper
 * @version v2.0
 */
class APITestScoreWrapper {
    /**
     * Constructs a new <code>APITestScoreWrapper</code>.
     * @alias module:model/APITestScoreWrapper
     */
    constructor() { 
        
        APITestScoreWrapper.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>APITestScoreWrapper</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/APITestScoreWrapper} obj Optional instance to populate.
     * @return {module:model/APITestScoreWrapper} The populated <code>APITestScoreWrapper</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new APITestScoreWrapper();

            if (data.hasOwnProperty('districtTestScore')) {
                obj['districtTestScore'] = APITestScore.constructFromObject(data['districtTestScore']);
            }
            if (data.hasOwnProperty('grade')) {
                obj['grade'] = ApiClient.convertToType(data['grade'], 'String');
            }
            if (data.hasOwnProperty('schoolTestScore')) {
                obj['schoolTestScore'] = APITestScore.constructFromObject(data['schoolTestScore']);
            }
            if (data.hasOwnProperty('stateTestScore')) {
                obj['stateTestScore'] = APITestScore.constructFromObject(data['stateTestScore']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = ApiClient.convertToType(data['test'], 'String');
            }
            if (data.hasOwnProperty('tier1')) {
                obj['tier1'] = ApiClient.convertToType(data['tier1'], 'String');
            }
            if (data.hasOwnProperty('tier2')) {
                obj['tier2'] = ApiClient.convertToType(data['tier2'], 'String');
            }
            if (data.hasOwnProperty('tier3')) {
                obj['tier3'] = ApiClient.convertToType(data['tier3'], 'String');
            }
            if (data.hasOwnProperty('tier4')) {
                obj['tier4'] = ApiClient.convertToType(data['tier4'], 'String');
            }
            if (data.hasOwnProperty('tier5')) {
                obj['tier5'] = ApiClient.convertToType(data['tier5'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>APITestScoreWrapper</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>APITestScoreWrapper</code>.
     */
    static validateJSON(data) {
        // validate the optional field `districtTestScore`
        if (data['districtTestScore']) { // data not null
          APITestScore.validateJSON(data['districtTestScore']);
        }
        // ensure the json data is a string
        if (data['grade'] && !(typeof data['grade'] === 'string' || data['grade'] instanceof String)) {
            throw new Error("Expected the field `grade` to be a primitive type in the JSON string but got " + data['grade']);
        }
        // validate the optional field `schoolTestScore`
        if (data['schoolTestScore']) { // data not null
          APITestScore.validateJSON(data['schoolTestScore']);
        }
        // validate the optional field `stateTestScore`
        if (data['stateTestScore']) { // data not null
          APITestScore.validateJSON(data['stateTestScore']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['test'] && !(typeof data['test'] === 'string' || data['test'] instanceof String)) {
            throw new Error("Expected the field `test` to be a primitive type in the JSON string but got " + data['test']);
        }
        // ensure the json data is a string
        if (data['tier1'] && !(typeof data['tier1'] === 'string' || data['tier1'] instanceof String)) {
            throw new Error("Expected the field `tier1` to be a primitive type in the JSON string but got " + data['tier1']);
        }
        // ensure the json data is a string
        if (data['tier2'] && !(typeof data['tier2'] === 'string' || data['tier2'] instanceof String)) {
            throw new Error("Expected the field `tier2` to be a primitive type in the JSON string but got " + data['tier2']);
        }
        // ensure the json data is a string
        if (data['tier3'] && !(typeof data['tier3'] === 'string' || data['tier3'] instanceof String)) {
            throw new Error("Expected the field `tier3` to be a primitive type in the JSON string but got " + data['tier3']);
        }
        // ensure the json data is a string
        if (data['tier4'] && !(typeof data['tier4'] === 'string' || data['tier4'] instanceof String)) {
            throw new Error("Expected the field `tier4` to be a primitive type in the JSON string but got " + data['tier4']);
        }
        // ensure the json data is a string
        if (data['tier5'] && !(typeof data['tier5'] === 'string' || data['tier5'] instanceof String)) {
            throw new Error("Expected the field `tier5` to be a primitive type in the JSON string but got " + data['tier5']);
        }

        return true;
    }


}



/**
 * @member {module:model/APITestScore} districtTestScore
 */
APITestScoreWrapper.prototype['districtTestScore'] = undefined;

/**
 * @member {String} grade
 */
APITestScoreWrapper.prototype['grade'] = undefined;

/**
 * @member {module:model/APITestScore} schoolTestScore
 */
APITestScoreWrapper.prototype['schoolTestScore'] = undefined;

/**
 * @member {module:model/APITestScore} stateTestScore
 */
APITestScoreWrapper.prototype['stateTestScore'] = undefined;

/**
 * Test subject
 * @member {String} subject
 */
APITestScoreWrapper.prototype['subject'] = undefined;

/**
 * The name of the state-administered test
 * @member {String} test
 */
APITestScoreWrapper.prototype['test'] = undefined;

/**
 * Tier 1 test score description (Enterprise API level only)
 * @member {String} tier1
 */
APITestScoreWrapper.prototype['tier1'] = undefined;

/**
 * Tier 2 test score description (Enterprise API level only)
 * @member {String} tier2
 */
APITestScoreWrapper.prototype['tier2'] = undefined;

/**
 * Tier 3 test score description (Enterprise API level only)
 * @member {String} tier3
 */
APITestScoreWrapper.prototype['tier3'] = undefined;

/**
 * Tier 4 test score description (Enterprise API level only)
 * @member {String} tier4
 */
APITestScoreWrapper.prototype['tier4'] = undefined;

/**
 * Tier 5 test score description (Enterprise API level only)
 * @member {String} tier5
 */
APITestScoreWrapper.prototype['tier5'] = undefined;

/**
 * Year test was administered (2018 = 2017-18)
 * @member {Number} year
 */
APITestScoreWrapper.prototype['year'] = undefined;






export default APITestScoreWrapper;

