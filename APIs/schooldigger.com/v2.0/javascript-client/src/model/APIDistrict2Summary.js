/**
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APICounty from './APICounty';
import APILEARankHistory from './APILEARankHistory';
import APILEAYearlyDetail from './APILEAYearlyDetail';
import APILocation from './APILocation';

/**
 * The APIDistrict2Summary model module.
 * @module model/APIDistrict2Summary
 * @version v2.0
 */
class APIDistrict2Summary {
    /**
     * Constructs a new <code>APIDistrict2Summary</code>.
     * @alias module:model/APIDistrict2Summary
     */
    constructor() { 
        
        APIDistrict2Summary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>APIDistrict2Summary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/APIDistrict2Summary} obj Optional instance to populate.
     * @return {module:model/APIDistrict2Summary} The populated <code>APIDistrict2Summary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new APIDistrict2Summary();

            if (data.hasOwnProperty('address')) {
                obj['address'] = APILocation.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = APICounty.constructFromObject(data['county']);
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('districtID')) {
                obj['districtID'] = ApiClient.convertToType(data['districtID'], 'String');
            }
            if (data.hasOwnProperty('districtName')) {
                obj['districtName'] = ApiClient.convertToType(data['districtName'], 'String');
            }
            if (data.hasOwnProperty('districtYearlyDetails')) {
                obj['districtYearlyDetails'] = ApiClient.convertToType(data['districtYearlyDetails'], [APILEAYearlyDetail]);
            }
            if (data.hasOwnProperty('hasBoundary')) {
                obj['hasBoundary'] = ApiClient.convertToType(data['hasBoundary'], 'Boolean');
            }
            if (data.hasOwnProperty('highGrade')) {
                obj['highGrade'] = ApiClient.convertToType(data['highGrade'], 'String');
            }
            if (data.hasOwnProperty('isWithinBoundary')) {
                obj['isWithinBoundary'] = ApiClient.convertToType(data['isWithinBoundary'], 'Boolean');
            }
            if (data.hasOwnProperty('locationIsWithinBoundary')) {
                obj['locationIsWithinBoundary'] = ApiClient.convertToType(data['locationIsWithinBoundary'], 'Boolean');
            }
            if (data.hasOwnProperty('lowGrade')) {
                obj['lowGrade'] = ApiClient.convertToType(data['lowGrade'], 'String');
            }
            if (data.hasOwnProperty('numberAlternativeSchools')) {
                obj['numberAlternativeSchools'] = ApiClient.convertToType(data['numberAlternativeSchools'], 'Number');
            }
            if (data.hasOwnProperty('numberHighSchools')) {
                obj['numberHighSchools'] = ApiClient.convertToType(data['numberHighSchools'], 'Number');
            }
            if (data.hasOwnProperty('numberMiddleSchools')) {
                obj['numberMiddleSchools'] = ApiClient.convertToType(data['numberMiddleSchools'], 'Number');
            }
            if (data.hasOwnProperty('numberPrimarySchools')) {
                obj['numberPrimarySchools'] = ApiClient.convertToType(data['numberPrimarySchools'], 'Number');
            }
            if (data.hasOwnProperty('numberTotalSchools')) {
                obj['numberTotalSchools'] = ApiClient.convertToType(data['numberTotalSchools'], 'Number');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('rankHistory')) {
                obj['rankHistory'] = ApiClient.convertToType(data['rankHistory'], [APILEARankHistory]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>APIDistrict2Summary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>APIDistrict2Summary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          APILocation.validateJSON(data['address']);
        }
        // validate the optional field `county`
        if (data['county']) { // data not null
          APICounty.validateJSON(data['county']);
        }
        // ensure the json data is a string
        if (data['districtID'] && !(typeof data['districtID'] === 'string' || data['districtID'] instanceof String)) {
            throw new Error("Expected the field `districtID` to be a primitive type in the JSON string but got " + data['districtID']);
        }
        // ensure the json data is a string
        if (data['districtName'] && !(typeof data['districtName'] === 'string' || data['districtName'] instanceof String)) {
            throw new Error("Expected the field `districtName` to be a primitive type in the JSON string but got " + data['districtName']);
        }
        if (data['districtYearlyDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['districtYearlyDetails'])) {
                throw new Error("Expected the field `districtYearlyDetails` to be an array in the JSON data but got " + data['districtYearlyDetails']);
            }
            // validate the optional field `districtYearlyDetails` (array)
            for (const item of data['districtYearlyDetails']) {
                APILEAYearlyDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['highGrade'] && !(typeof data['highGrade'] === 'string' || data['highGrade'] instanceof String)) {
            throw new Error("Expected the field `highGrade` to be a primitive type in the JSON string but got " + data['highGrade']);
        }
        // ensure the json data is a string
        if (data['lowGrade'] && !(typeof data['lowGrade'] === 'string' || data['lowGrade'] instanceof String)) {
            throw new Error("Expected the field `lowGrade` to be a primitive type in the JSON string but got " + data['lowGrade']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        if (data['rankHistory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rankHistory'])) {
                throw new Error("Expected the field `rankHistory` to be an array in the JSON data but got " + data['rankHistory']);
            }
            // validate the optional field `rankHistory` (array)
            for (const item of data['rankHistory']) {
                APILEARankHistory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/APILocation} address
 */
APIDistrict2Summary.prototype['address'] = undefined;

/**
 * @member {module:model/APICounty} county
 */
APIDistrict2Summary.prototype['county'] = undefined;

/**
 * Distance from nearLatitude/nearLongitude (if supplied)
 * @member {Number} distance
 */
APIDistrict2Summary.prototype['distance'] = undefined;

/**
 * SchoolDigger District ID Number (7 digits). Use /districts/{districtID} to retrieve the entire district record
 * @member {String} districtID
 */
APIDistrict2Summary.prototype['districtID'] = undefined;

/**
 * District name
 * @member {String} districtName
 */
APIDistrict2Summary.prototype['districtName'] = undefined;

/**
 * District yearly metrics
 * @member {Array.<module:model/APILEAYearlyDetail>} districtYearlyDetails
 */
APIDistrict2Summary.prototype['districtYearlyDetails'] = undefined;

/**
 * Indicates that an attendance boundary is available for this district. (To retrieve, look up district with /districts/{id})
 * @member {Boolean} hasBoundary
 */
APIDistrict2Summary.prototype['hasBoundary'] = undefined;

/**
 * The high grade served by this district
 * @member {String} highGrade
 */
APIDistrict2Summary.prototype['highGrade'] = undefined;

/**
 * Indicates whether this district's boundary includes the specified location from nearLatitude/nearLongitude
 * @member {Boolean} isWithinBoundary
 */
APIDistrict2Summary.prototype['isWithinBoundary'] = undefined;

/**
 * Indicates whether this school's boundary includes the specified location from nearLatitude/nearLongitude or boundaryAddress (Enterprise API level)
 * @member {Boolean} locationIsWithinBoundary
 */
APIDistrict2Summary.prototype['locationIsWithinBoundary'] = undefined;

/**
 * The low grade served by this district (PK = Prekindergarten, K = Kindergarten)
 * @member {String} lowGrade
 */
APIDistrict2Summary.prototype['lowGrade'] = undefined;

/**
 * Count of schools designated as other/alternative schools
 * @member {Number} numberAlternativeSchools
 */
APIDistrict2Summary.prototype['numberAlternativeSchools'] = undefined;

/**
 * Count of schools designated as high schools
 * @member {Number} numberHighSchools
 */
APIDistrict2Summary.prototype['numberHighSchools'] = undefined;

/**
 * Count of schools designated as middle schools
 * @member {Number} numberMiddleSchools
 */
APIDistrict2Summary.prototype['numberMiddleSchools'] = undefined;

/**
 * Count of schools designated as primary schools
 * @member {Number} numberPrimarySchools
 */
APIDistrict2Summary.prototype['numberPrimarySchools'] = undefined;

/**
 * Count of schools in the district
 * @member {Number} numberTotalSchools
 */
APIDistrict2Summary.prototype['numberTotalSchools'] = undefined;

/**
 * District phone number
 * @member {String} phone
 */
APIDistrict2Summary.prototype['phone'] = undefined;

/**
 * SchoolDigger yearly rank history of the district
 * @member {Array.<module:model/APILEARankHistory>} rankHistory
 */
APIDistrict2Summary.prototype['rankHistory'] = undefined;

/**
 * SchoolDigger URL for this district
 * @member {String} url
 */
APIDistrict2Summary.prototype['url'] = undefined;






export default APIDistrict2Summary;

