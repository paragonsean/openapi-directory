/**
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPITestScoreWrapper.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPITestScoreWrapper::OAIAPITestScoreWrapper(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPITestScoreWrapper::OAIAPITestScoreWrapper() {
    this->initializeModel();
}

OAIAPITestScoreWrapper::~OAIAPITestScoreWrapper() {}

void OAIAPITestScoreWrapper::initializeModel() {

    m_district_test_score_isSet = false;
    m_district_test_score_isValid = false;

    m_grade_isSet = false;
    m_grade_isValid = false;

    m_school_test_score_isSet = false;
    m_school_test_score_isValid = false;

    m_state_test_score_isSet = false;
    m_state_test_score_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_tier1_isSet = false;
    m_tier1_isValid = false;

    m_tier2_isSet = false;
    m_tier2_isValid = false;

    m_tier3_isSet = false;
    m_tier3_isValid = false;

    m_tier4_isSet = false;
    m_tier4_isValid = false;

    m_tier5_isSet = false;
    m_tier5_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIAPITestScoreWrapper::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPITestScoreWrapper::fromJsonObject(QJsonObject json) {

    m_district_test_score_isValid = ::OpenAPI::fromJsonValue(m_district_test_score, json[QString("districtTestScore")]);
    m_district_test_score_isSet = !json[QString("districtTestScore")].isNull() && m_district_test_score_isValid;

    m_grade_isValid = ::OpenAPI::fromJsonValue(m_grade, json[QString("grade")]);
    m_grade_isSet = !json[QString("grade")].isNull() && m_grade_isValid;

    m_school_test_score_isValid = ::OpenAPI::fromJsonValue(m_school_test_score, json[QString("schoolTestScore")]);
    m_school_test_score_isSet = !json[QString("schoolTestScore")].isNull() && m_school_test_score_isValid;

    m_state_test_score_isValid = ::OpenAPI::fromJsonValue(m_state_test_score, json[QString("stateTestScore")]);
    m_state_test_score_isSet = !json[QString("stateTestScore")].isNull() && m_state_test_score_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_tier1_isValid = ::OpenAPI::fromJsonValue(m_tier1, json[QString("tier1")]);
    m_tier1_isSet = !json[QString("tier1")].isNull() && m_tier1_isValid;

    m_tier2_isValid = ::OpenAPI::fromJsonValue(m_tier2, json[QString("tier2")]);
    m_tier2_isSet = !json[QString("tier2")].isNull() && m_tier2_isValid;

    m_tier3_isValid = ::OpenAPI::fromJsonValue(m_tier3, json[QString("tier3")]);
    m_tier3_isSet = !json[QString("tier3")].isNull() && m_tier3_isValid;

    m_tier4_isValid = ::OpenAPI::fromJsonValue(m_tier4, json[QString("tier4")]);
    m_tier4_isSet = !json[QString("tier4")].isNull() && m_tier4_isValid;

    m_tier5_isValid = ::OpenAPI::fromJsonValue(m_tier5, json[QString("tier5")]);
    m_tier5_isSet = !json[QString("tier5")].isNull() && m_tier5_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIAPITestScoreWrapper::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPITestScoreWrapper::asJsonObject() const {
    QJsonObject obj;
    if (m_district_test_score.isSet()) {
        obj.insert(QString("districtTestScore"), ::OpenAPI::toJsonValue(m_district_test_score));
    }
    if (m_grade_isSet) {
        obj.insert(QString("grade"), ::OpenAPI::toJsonValue(m_grade));
    }
    if (m_school_test_score.isSet()) {
        obj.insert(QString("schoolTestScore"), ::OpenAPI::toJsonValue(m_school_test_score));
    }
    if (m_state_test_score.isSet()) {
        obj.insert(QString("stateTestScore"), ::OpenAPI::toJsonValue(m_state_test_score));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_tier1_isSet) {
        obj.insert(QString("tier1"), ::OpenAPI::toJsonValue(m_tier1));
    }
    if (m_tier2_isSet) {
        obj.insert(QString("tier2"), ::OpenAPI::toJsonValue(m_tier2));
    }
    if (m_tier3_isSet) {
        obj.insert(QString("tier3"), ::OpenAPI::toJsonValue(m_tier3));
    }
    if (m_tier4_isSet) {
        obj.insert(QString("tier4"), ::OpenAPI::toJsonValue(m_tier4));
    }
    if (m_tier5_isSet) {
        obj.insert(QString("tier5"), ::OpenAPI::toJsonValue(m_tier5));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

OAIAPITestScore OAIAPITestScoreWrapper::getDistrictTestScore() const {
    return m_district_test_score;
}
void OAIAPITestScoreWrapper::setDistrictTestScore(const OAIAPITestScore &district_test_score) {
    m_district_test_score = district_test_score;
    m_district_test_score_isSet = true;
}

bool OAIAPITestScoreWrapper::is_district_test_score_Set() const{
    return m_district_test_score_isSet;
}

bool OAIAPITestScoreWrapper::is_district_test_score_Valid() const{
    return m_district_test_score_isValid;
}

QString OAIAPITestScoreWrapper::getGrade() const {
    return m_grade;
}
void OAIAPITestScoreWrapper::setGrade(const QString &grade) {
    m_grade = grade;
    m_grade_isSet = true;
}

bool OAIAPITestScoreWrapper::is_grade_Set() const{
    return m_grade_isSet;
}

bool OAIAPITestScoreWrapper::is_grade_Valid() const{
    return m_grade_isValid;
}

OAIAPITestScore OAIAPITestScoreWrapper::getSchoolTestScore() const {
    return m_school_test_score;
}
void OAIAPITestScoreWrapper::setSchoolTestScore(const OAIAPITestScore &school_test_score) {
    m_school_test_score = school_test_score;
    m_school_test_score_isSet = true;
}

bool OAIAPITestScoreWrapper::is_school_test_score_Set() const{
    return m_school_test_score_isSet;
}

bool OAIAPITestScoreWrapper::is_school_test_score_Valid() const{
    return m_school_test_score_isValid;
}

OAIAPITestScore OAIAPITestScoreWrapper::getStateTestScore() const {
    return m_state_test_score;
}
void OAIAPITestScoreWrapper::setStateTestScore(const OAIAPITestScore &state_test_score) {
    m_state_test_score = state_test_score;
    m_state_test_score_isSet = true;
}

bool OAIAPITestScoreWrapper::is_state_test_score_Set() const{
    return m_state_test_score_isSet;
}

bool OAIAPITestScoreWrapper::is_state_test_score_Valid() const{
    return m_state_test_score_isValid;
}

QString OAIAPITestScoreWrapper::getSubject() const {
    return m_subject;
}
void OAIAPITestScoreWrapper::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIAPITestScoreWrapper::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIAPITestScoreWrapper::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIAPITestScoreWrapper::getTest() const {
    return m_test;
}
void OAIAPITestScoreWrapper::setTest(const QString &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIAPITestScoreWrapper::is_test_Set() const{
    return m_test_isSet;
}

bool OAIAPITestScoreWrapper::is_test_Valid() const{
    return m_test_isValid;
}

QString OAIAPITestScoreWrapper::getTier1() const {
    return m_tier1;
}
void OAIAPITestScoreWrapper::setTier1(const QString &tier1) {
    m_tier1 = tier1;
    m_tier1_isSet = true;
}

bool OAIAPITestScoreWrapper::is_tier1_Set() const{
    return m_tier1_isSet;
}

bool OAIAPITestScoreWrapper::is_tier1_Valid() const{
    return m_tier1_isValid;
}

QString OAIAPITestScoreWrapper::getTier2() const {
    return m_tier2;
}
void OAIAPITestScoreWrapper::setTier2(const QString &tier2) {
    m_tier2 = tier2;
    m_tier2_isSet = true;
}

bool OAIAPITestScoreWrapper::is_tier2_Set() const{
    return m_tier2_isSet;
}

bool OAIAPITestScoreWrapper::is_tier2_Valid() const{
    return m_tier2_isValid;
}

QString OAIAPITestScoreWrapper::getTier3() const {
    return m_tier3;
}
void OAIAPITestScoreWrapper::setTier3(const QString &tier3) {
    m_tier3 = tier3;
    m_tier3_isSet = true;
}

bool OAIAPITestScoreWrapper::is_tier3_Set() const{
    return m_tier3_isSet;
}

bool OAIAPITestScoreWrapper::is_tier3_Valid() const{
    return m_tier3_isValid;
}

QString OAIAPITestScoreWrapper::getTier4() const {
    return m_tier4;
}
void OAIAPITestScoreWrapper::setTier4(const QString &tier4) {
    m_tier4 = tier4;
    m_tier4_isSet = true;
}

bool OAIAPITestScoreWrapper::is_tier4_Set() const{
    return m_tier4_isSet;
}

bool OAIAPITestScoreWrapper::is_tier4_Valid() const{
    return m_tier4_isValid;
}

QString OAIAPITestScoreWrapper::getTier5() const {
    return m_tier5;
}
void OAIAPITestScoreWrapper::setTier5(const QString &tier5) {
    m_tier5 = tier5;
    m_tier5_isSet = true;
}

bool OAIAPITestScoreWrapper::is_tier5_Set() const{
    return m_tier5_isSet;
}

bool OAIAPITestScoreWrapper::is_tier5_Valid() const{
    return m_tier5_isValid;
}

qint32 OAIAPITestScoreWrapper::getYear() const {
    return m_year;
}
void OAIAPITestScoreWrapper::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIAPITestScoreWrapper::is_year_Set() const{
    return m_year_isSet;
}

bool OAIAPITestScoreWrapper::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIAPITestScoreWrapper::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_district_test_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_school_test_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_test_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPITestScoreWrapper::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
