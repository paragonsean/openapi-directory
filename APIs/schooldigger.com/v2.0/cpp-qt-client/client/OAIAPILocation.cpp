/**
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPILocation::OAIAPILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPILocation::OAIAPILocation() {
    this->initializeModel();
}

OAIAPILocation::~OAIAPILocation() {}

void OAIAPILocation::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_city_url_isSet = false;
    m_city_url_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_lat_long_isSet = false;
    m_lat_long_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_full_isSet = false;
    m_state_full_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;

    m_zip4_isSet = false;
    m_zip4_isValid = false;

    m_zip_url_isSet = false;
    m_zip_url_isValid = false;
}

void OAIAPILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPILocation::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_city_url_isValid = ::OpenAPI::fromJsonValue(m_city_url, json[QString("cityURL")]);
    m_city_url_isSet = !json[QString("cityURL")].isNull() && m_city_url_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_lat_long_isValid = ::OpenAPI::fromJsonValue(m_lat_long, json[QString("latLong")]);
    m_lat_long_isSet = !json[QString("latLong")].isNull() && m_lat_long_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_full_isValid = ::OpenAPI::fromJsonValue(m_state_full, json[QString("stateFull")]);
    m_state_full_isSet = !json[QString("stateFull")].isNull() && m_state_full_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;

    m_zip4_isValid = ::OpenAPI::fromJsonValue(m_zip4, json[QString("zip4")]);
    m_zip4_isSet = !json[QString("zip4")].isNull() && m_zip4_isValid;

    m_zip_url_isValid = ::OpenAPI::fromJsonValue(m_zip_url, json[QString("zipURL")]);
    m_zip_url_isSet = !json[QString("zipURL")].isNull() && m_zip_url_isValid;
}

QString OAIAPILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_city_url_isSet) {
        obj.insert(QString("cityURL"), ::OpenAPI::toJsonValue(m_city_url));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_lat_long.isSet()) {
        obj.insert(QString("latLong"), ::OpenAPI::toJsonValue(m_lat_long));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_full_isSet) {
        obj.insert(QString("stateFull"), ::OpenAPI::toJsonValue(m_state_full));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    if (m_zip4_isSet) {
        obj.insert(QString("zip4"), ::OpenAPI::toJsonValue(m_zip4));
    }
    if (m_zip_url_isSet) {
        obj.insert(QString("zipURL"), ::OpenAPI::toJsonValue(m_zip_url));
    }
    return obj;
}

QString OAIAPILocation::getCity() const {
    return m_city;
}
void OAIAPILocation::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAPILocation::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAPILocation::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAPILocation::getCityUrl() const {
    return m_city_url;
}
void OAIAPILocation::setCityUrl(const QString &city_url) {
    m_city_url = city_url;
    m_city_url_isSet = true;
}

bool OAIAPILocation::is_city_url_Set() const{
    return m_city_url_isSet;
}

bool OAIAPILocation::is_city_url_Valid() const{
    return m_city_url_isValid;
}

QString OAIAPILocation::getHtml() const {
    return m_html;
}
void OAIAPILocation::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIAPILocation::is_html_Set() const{
    return m_html_isSet;
}

bool OAIAPILocation::is_html_Valid() const{
    return m_html_isValid;
}

OAIAPILatLong OAIAPILocation::getLatLong() const {
    return m_lat_long;
}
void OAIAPILocation::setLatLong(const OAIAPILatLong &lat_long) {
    m_lat_long = lat_long;
    m_lat_long_isSet = true;
}

bool OAIAPILocation::is_lat_long_Set() const{
    return m_lat_long_isSet;
}

bool OAIAPILocation::is_lat_long_Valid() const{
    return m_lat_long_isValid;
}

QString OAIAPILocation::getState() const {
    return m_state;
}
void OAIAPILocation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAPILocation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAPILocation::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAPILocation::getStateFull() const {
    return m_state_full;
}
void OAIAPILocation::setStateFull(const QString &state_full) {
    m_state_full = state_full;
    m_state_full_isSet = true;
}

bool OAIAPILocation::is_state_full_Set() const{
    return m_state_full_isSet;
}

bool OAIAPILocation::is_state_full_Valid() const{
    return m_state_full_isValid;
}

QString OAIAPILocation::getStreet() const {
    return m_street;
}
void OAIAPILocation::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIAPILocation::is_street_Set() const{
    return m_street_isSet;
}

bool OAIAPILocation::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIAPILocation::getZip() const {
    return m_zip;
}
void OAIAPILocation::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIAPILocation::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIAPILocation::is_zip_Valid() const{
    return m_zip_isValid;
}

QString OAIAPILocation::getZip4() const {
    return m_zip4;
}
void OAIAPILocation::setZip4(const QString &zip4) {
    m_zip4 = zip4;
    m_zip4_isSet = true;
}

bool OAIAPILocation::is_zip4_Set() const{
    return m_zip4_isSet;
}

bool OAIAPILocation::is_zip4_Valid() const{
    return m_zip4_isValid;
}

QString OAIAPILocation::getZipUrl() const {
    return m_zip_url;
}
void OAIAPILocation::setZipUrl(const QString &zip_url) {
    m_zip_url = zip_url;
    m_zip_url_isSet = true;
}

bool OAIAPILocation::is_zip_url_Set() const{
    return m_zip_url_isSet;
}

bool OAIAPILocation::is_zip_url_Valid() const{
    return m_zip_url_isValid;
}

bool OAIAPILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_long.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
