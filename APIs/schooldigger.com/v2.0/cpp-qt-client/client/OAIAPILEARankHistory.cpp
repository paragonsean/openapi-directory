/**
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPILEARankHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPILEARankHistory::OAIAPILEARankHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPILEARankHistory::OAIAPILEARankHistory() {
    this->initializeModel();
}

OAIAPILEARankHistory::~OAIAPILEARankHistory() {}

void OAIAPILEARankHistory::initializeModel() {

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_rank_of_isSet = false;
    m_rank_of_isValid = false;

    m_rank_score_isSet = false;
    m_rank_score_isValid = false;

    m_rank_stars_isSet = false;
    m_rank_stars_isValid = false;

    m_rank_statewide_percentage_isSet = false;
    m_rank_statewide_percentage_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIAPILEARankHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPILEARankHistory::fromJsonObject(QJsonObject json) {

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_rank_of_isValid = ::OpenAPI::fromJsonValue(m_rank_of, json[QString("rankOf")]);
    m_rank_of_isSet = !json[QString("rankOf")].isNull() && m_rank_of_isValid;

    m_rank_score_isValid = ::OpenAPI::fromJsonValue(m_rank_score, json[QString("rankScore")]);
    m_rank_score_isSet = !json[QString("rankScore")].isNull() && m_rank_score_isValid;

    m_rank_stars_isValid = ::OpenAPI::fromJsonValue(m_rank_stars, json[QString("rankStars")]);
    m_rank_stars_isSet = !json[QString("rankStars")].isNull() && m_rank_stars_isValid;

    m_rank_statewide_percentage_isValid = ::OpenAPI::fromJsonValue(m_rank_statewide_percentage, json[QString("rankStatewidePercentage")]);
    m_rank_statewide_percentage_isSet = !json[QString("rankStatewidePercentage")].isNull() && m_rank_statewide_percentage_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIAPILEARankHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPILEARankHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_rank_of_isSet) {
        obj.insert(QString("rankOf"), ::OpenAPI::toJsonValue(m_rank_of));
    }
    if (m_rank_score_isSet) {
        obj.insert(QString("rankScore"), ::OpenAPI::toJsonValue(m_rank_score));
    }
    if (m_rank_stars_isSet) {
        obj.insert(QString("rankStars"), ::OpenAPI::toJsonValue(m_rank_stars));
    }
    if (m_rank_statewide_percentage_isSet) {
        obj.insert(QString("rankStatewidePercentage"), ::OpenAPI::toJsonValue(m_rank_statewide_percentage));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAIAPILEARankHistory::getRank() const {
    return m_rank;
}
void OAIAPILEARankHistory::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIAPILEARankHistory::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIAPILEARankHistory::is_rank_Valid() const{
    return m_rank_isValid;
}

qint32 OAIAPILEARankHistory::getRankOf() const {
    return m_rank_of;
}
void OAIAPILEARankHistory::setRankOf(const qint32 &rank_of) {
    m_rank_of = rank_of;
    m_rank_of_isSet = true;
}

bool OAIAPILEARankHistory::is_rank_of_Set() const{
    return m_rank_of_isSet;
}

bool OAIAPILEARankHistory::is_rank_of_Valid() const{
    return m_rank_of_isValid;
}

double OAIAPILEARankHistory::getRankScore() const {
    return m_rank_score;
}
void OAIAPILEARankHistory::setRankScore(const double &rank_score) {
    m_rank_score = rank_score;
    m_rank_score_isSet = true;
}

bool OAIAPILEARankHistory::is_rank_score_Set() const{
    return m_rank_score_isSet;
}

bool OAIAPILEARankHistory::is_rank_score_Valid() const{
    return m_rank_score_isValid;
}

qint32 OAIAPILEARankHistory::getRankStars() const {
    return m_rank_stars;
}
void OAIAPILEARankHistory::setRankStars(const qint32 &rank_stars) {
    m_rank_stars = rank_stars;
    m_rank_stars_isSet = true;
}

bool OAIAPILEARankHistory::is_rank_stars_Set() const{
    return m_rank_stars_isSet;
}

bool OAIAPILEARankHistory::is_rank_stars_Valid() const{
    return m_rank_stars_isValid;
}

double OAIAPILEARankHistory::getRankStatewidePercentage() const {
    return m_rank_statewide_percentage;
}
void OAIAPILEARankHistory::setRankStatewidePercentage(const double &rank_statewide_percentage) {
    m_rank_statewide_percentage = rank_statewide_percentage;
    m_rank_statewide_percentage_isSet = true;
}

bool OAIAPILEARankHistory::is_rank_statewide_percentage_Set() const{
    return m_rank_statewide_percentage_isSet;
}

bool OAIAPILEARankHistory::is_rank_statewide_percentage_Valid() const{
    return m_rank_statewide_percentage_isValid;
}

qint32 OAIAPILEARankHistory::getYear() const {
    return m_year;
}
void OAIAPILEARankHistory::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIAPILEARankHistory::is_year_Set() const{
    return m_year_isSet;
}

bool OAIAPILEARankHistory::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIAPILEARankHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_stars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_statewide_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPILEARankHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
