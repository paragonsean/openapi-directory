/**
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDistrictsApi_H
#define OAI_OAIDistrictsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIDistrict12.h"
#include "OAIAPIDistrictList2.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDistrictsApi : public QObject {
    Q_OBJECT

public:
    OAIDistrictsApi(const int timeOut = 0);
    ~OAIDistrictsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  st QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  near_latitude double [optional]
    * @param[in]  near_longitude double [optional]
    * @param[in]  boundary_address QString [optional]
    * @param[in]  distance_miles qint32 [optional]
    * @param[in]  is_in_boundary_only bool [optional]
    * @param[in]  box_latitude_nw double [optional]
    * @param[in]  box_longitude_nw double [optional]
    * @param[in]  box_latitude_se double [optional]
    * @param[in]  box_longitude_se double [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  include_unranked_districts_in_rank_sort bool [optional]
    */
    virtual void districtsGetAllDistricts2(const QString &st, const QString &app_id, const QString &app_key, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &near_latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &near_longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &boundary_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &distance_miles = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_in_boundary_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &box_latitude_nw = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &box_longitude_nw = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &box_latitude_se = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &box_longitude_se = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_unranked_districts_in_rank_sort = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    */
    virtual void districtsGetDistrict2(const QString &id, const QString &app_id, const QString &app_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void districtsGetAllDistricts2Callback(OAIHttpRequestWorker *worker);
    void districtsGetDistrict2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void districtsGetAllDistricts2Signal(OAIAPIDistrictList2 summary);
    void districtsGetDistrict2Signal(OAIAPIDistrict12 summary);


    void districtsGetAllDistricts2SignalFull(OAIHttpRequestWorker *worker, OAIAPIDistrictList2 summary);
    void districtsGetDistrict2SignalFull(OAIHttpRequestWorker *worker, OAIAPIDistrict12 summary);

    Q_DECL_DEPRECATED_X("Use districtsGetAllDistricts2SignalError() instead")
    void districtsGetAllDistricts2SignalE(OAIAPIDistrictList2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void districtsGetAllDistricts2SignalError(OAIAPIDistrictList2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use districtsGetDistrict2SignalError() instead")
    void districtsGetDistrict2SignalE(OAIAPIDistrict12 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void districtsGetDistrict2SignalError(OAIAPIDistrict12 summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use districtsGetAllDistricts2SignalErrorFull() instead")
    void districtsGetAllDistricts2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void districtsGetAllDistricts2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use districtsGetDistrict2SignalErrorFull() instead")
    void districtsGetDistrict2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void districtsGetDistrict2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
