/*
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APITestScore
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:05.204966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APITestScore {
  public static final String SERIALIZED_NAME_MEAN_SCALED_SCORE = "meanScaledScore";
  @SerializedName(SERIALIZED_NAME_MEAN_SCALED_SCORE)
  private Float meanScaledScore;

  public static final String SERIALIZED_NAME_NUM_TIER1 = "numTier1";
  @SerializedName(SERIALIZED_NAME_NUM_TIER1)
  private Integer numTier1;

  public static final String SERIALIZED_NAME_NUM_TIER2 = "numTier2";
  @SerializedName(SERIALIZED_NAME_NUM_TIER2)
  private Integer numTier2;

  public static final String SERIALIZED_NAME_NUM_TIER3 = "numTier3";
  @SerializedName(SERIALIZED_NAME_NUM_TIER3)
  private Integer numTier3;

  public static final String SERIALIZED_NAME_NUM_TIER4 = "numTier4";
  @SerializedName(SERIALIZED_NAME_NUM_TIER4)
  private Integer numTier4;

  public static final String SERIALIZED_NAME_NUM_TIER5 = "numTier5";
  @SerializedName(SERIALIZED_NAME_NUM_TIER5)
  private Integer numTier5;

  public static final String SERIALIZED_NAME_NUMBER_MET_STANDARD = "numberMetStandard";
  @SerializedName(SERIALIZED_NAME_NUMBER_MET_STANDARD)
  private Float numberMetStandard;

  public static final String SERIALIZED_NAME_PERCENT_MET_STANDARD = "percentMetStandard";
  @SerializedName(SERIALIZED_NAME_PERCENT_MET_STANDARD)
  private Float percentMetStandard;

  public static final String SERIALIZED_NAME_PERCENT_TIER1 = "percentTier1";
  @SerializedName(SERIALIZED_NAME_PERCENT_TIER1)
  private Float percentTier1;

  public static final String SERIALIZED_NAME_PERCENT_TIER2 = "percentTier2";
  @SerializedName(SERIALIZED_NAME_PERCENT_TIER2)
  private Float percentTier2;

  public static final String SERIALIZED_NAME_PERCENT_TIER3 = "percentTier3";
  @SerializedName(SERIALIZED_NAME_PERCENT_TIER3)
  private Float percentTier3;

  public static final String SERIALIZED_NAME_PERCENT_TIER4 = "percentTier4";
  @SerializedName(SERIALIZED_NAME_PERCENT_TIER4)
  private Float percentTier4;

  public static final String SERIALIZED_NAME_PERCENT_TIER5 = "percentTier5";
  @SerializedName(SERIALIZED_NAME_PERCENT_TIER5)
  private Float percentTier5;

  public static final String SERIALIZED_NAME_STUDENTS_ELIGIBLE = "studentsEligible";
  @SerializedName(SERIALIZED_NAME_STUDENTS_ELIGIBLE)
  private Integer studentsEligible;

  public static final String SERIALIZED_NAME_STUDENTS_TESTED = "studentsTested";
  @SerializedName(SERIALIZED_NAME_STUDENTS_TESTED)
  private Integer studentsTested;

  public APITestScore() {
  }

  public APITestScore meanScaledScore(Float meanScaledScore) {
    this.meanScaledScore = meanScaledScore;
    return this;
  }

  /**
   * Mean scale score
   * @return meanScaledScore
   */
  @javax.annotation.Nullable
  public Float getMeanScaledScore() {
    return meanScaledScore;
  }

  public void setMeanScaledScore(Float meanScaledScore) {
    this.meanScaledScore = meanScaledScore;
  }


  public APITestScore numTier1(Integer numTier1) {
    this.numTier1 = numTier1;
    return this;
  }

  /**
   * Count of students performing at tier 1 (Enterprise API level only)
   * @return numTier1
   */
  @javax.annotation.Nullable
  public Integer getNumTier1() {
    return numTier1;
  }

  public void setNumTier1(Integer numTier1) {
    this.numTier1 = numTier1;
  }


  public APITestScore numTier2(Integer numTier2) {
    this.numTier2 = numTier2;
    return this;
  }

  /**
   * Count of students performing at tier 2 (Enterprise API level only)
   * @return numTier2
   */
  @javax.annotation.Nullable
  public Integer getNumTier2() {
    return numTier2;
  }

  public void setNumTier2(Integer numTier2) {
    this.numTier2 = numTier2;
  }


  public APITestScore numTier3(Integer numTier3) {
    this.numTier3 = numTier3;
    return this;
  }

  /**
   * Count of students performing at tier 3 (Enterprise API level only)
   * @return numTier3
   */
  @javax.annotation.Nullable
  public Integer getNumTier3() {
    return numTier3;
  }

  public void setNumTier3(Integer numTier3) {
    this.numTier3 = numTier3;
  }


  public APITestScore numTier4(Integer numTier4) {
    this.numTier4 = numTier4;
    return this;
  }

  /**
   * Count of students performing at tier 4 (Enterprise API level only)
   * @return numTier4
   */
  @javax.annotation.Nullable
  public Integer getNumTier4() {
    return numTier4;
  }

  public void setNumTier4(Integer numTier4) {
    this.numTier4 = numTier4;
  }


  public APITestScore numTier5(Integer numTier5) {
    this.numTier5 = numTier5;
    return this;
  }

  /**
   * Count of students performing at tier 5 (Enterprise API level only)
   * @return numTier5
   */
  @javax.annotation.Nullable
  public Integer getNumTier5() {
    return numTier5;
  }

  public void setNumTier5(Integer numTier5) {
    this.numTier5 = numTier5;
  }


  public APITestScore numberMetStandard(Float numberMetStandard) {
    this.numberMetStandard = numberMetStandard;
    return this;
  }

  /**
   * Count of students meeting state standard
   * @return numberMetStandard
   */
  @javax.annotation.Nullable
  public Float getNumberMetStandard() {
    return numberMetStandard;
  }

  public void setNumberMetStandard(Float numberMetStandard) {
    this.numberMetStandard = numberMetStandard;
  }


  public APITestScore percentMetStandard(Float percentMetStandard) {
    this.percentMetStandard = percentMetStandard;
    return this;
  }

  /**
   * Percent of students meeting state standard
   * @return percentMetStandard
   */
  @javax.annotation.Nullable
  public Float getPercentMetStandard() {
    return percentMetStandard;
  }

  public void setPercentMetStandard(Float percentMetStandard) {
    this.percentMetStandard = percentMetStandard;
  }


  public APITestScore percentTier1(Float percentTier1) {
    this.percentTier1 = percentTier1;
    return this;
  }

  /**
   * Percent of students performing at tier 1 (Enterprise API level only)
   * @return percentTier1
   */
  @javax.annotation.Nullable
  public Float getPercentTier1() {
    return percentTier1;
  }

  public void setPercentTier1(Float percentTier1) {
    this.percentTier1 = percentTier1;
  }


  public APITestScore percentTier2(Float percentTier2) {
    this.percentTier2 = percentTier2;
    return this;
  }

  /**
   * Percent of students performing at tier 2 (Enterprise API level only)
   * @return percentTier2
   */
  @javax.annotation.Nullable
  public Float getPercentTier2() {
    return percentTier2;
  }

  public void setPercentTier2(Float percentTier2) {
    this.percentTier2 = percentTier2;
  }


  public APITestScore percentTier3(Float percentTier3) {
    this.percentTier3 = percentTier3;
    return this;
  }

  /**
   * Percent of students performing at tier 3 (Enterprise API level only)
   * @return percentTier3
   */
  @javax.annotation.Nullable
  public Float getPercentTier3() {
    return percentTier3;
  }

  public void setPercentTier3(Float percentTier3) {
    this.percentTier3 = percentTier3;
  }


  public APITestScore percentTier4(Float percentTier4) {
    this.percentTier4 = percentTier4;
    return this;
  }

  /**
   * Percent of students performing at tier 4 (Enterprise API level only)
   * @return percentTier4
   */
  @javax.annotation.Nullable
  public Float getPercentTier4() {
    return percentTier4;
  }

  public void setPercentTier4(Float percentTier4) {
    this.percentTier4 = percentTier4;
  }


  public APITestScore percentTier5(Float percentTier5) {
    this.percentTier5 = percentTier5;
    return this;
  }

  /**
   * Percent of students performing at tier 5 (Enterprise API level only)
   * @return percentTier5
   */
  @javax.annotation.Nullable
  public Float getPercentTier5() {
    return percentTier5;
  }

  public void setPercentTier5(Float percentTier5) {
    this.percentTier5 = percentTier5;
  }


  public APITestScore studentsEligible(Integer studentsEligible) {
    this.studentsEligible = studentsEligible;
    return this;
  }

  /**
   * Count of students eligible to take test
   * @return studentsEligible
   */
  @javax.annotation.Nullable
  public Integer getStudentsEligible() {
    return studentsEligible;
  }

  public void setStudentsEligible(Integer studentsEligible) {
    this.studentsEligible = studentsEligible;
  }


  public APITestScore studentsTested(Integer studentsTested) {
    this.studentsTested = studentsTested;
    return this;
  }

  /**
   * Count of students tested
   * @return studentsTested
   */
  @javax.annotation.Nullable
  public Integer getStudentsTested() {
    return studentsTested;
  }

  public void setStudentsTested(Integer studentsTested) {
    this.studentsTested = studentsTested;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APITestScore apITestScore = (APITestScore) o;
    return Objects.equals(this.meanScaledScore, apITestScore.meanScaledScore) &&
        Objects.equals(this.numTier1, apITestScore.numTier1) &&
        Objects.equals(this.numTier2, apITestScore.numTier2) &&
        Objects.equals(this.numTier3, apITestScore.numTier3) &&
        Objects.equals(this.numTier4, apITestScore.numTier4) &&
        Objects.equals(this.numTier5, apITestScore.numTier5) &&
        Objects.equals(this.numberMetStandard, apITestScore.numberMetStandard) &&
        Objects.equals(this.percentMetStandard, apITestScore.percentMetStandard) &&
        Objects.equals(this.percentTier1, apITestScore.percentTier1) &&
        Objects.equals(this.percentTier2, apITestScore.percentTier2) &&
        Objects.equals(this.percentTier3, apITestScore.percentTier3) &&
        Objects.equals(this.percentTier4, apITestScore.percentTier4) &&
        Objects.equals(this.percentTier5, apITestScore.percentTier5) &&
        Objects.equals(this.studentsEligible, apITestScore.studentsEligible) &&
        Objects.equals(this.studentsTested, apITestScore.studentsTested);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meanScaledScore, numTier1, numTier2, numTier3, numTier4, numTier5, numberMetStandard, percentMetStandard, percentTier1, percentTier2, percentTier3, percentTier4, percentTier5, studentsEligible, studentsTested);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APITestScore {\n");
    sb.append("    meanScaledScore: ").append(toIndentedString(meanScaledScore)).append("\n");
    sb.append("    numTier1: ").append(toIndentedString(numTier1)).append("\n");
    sb.append("    numTier2: ").append(toIndentedString(numTier2)).append("\n");
    sb.append("    numTier3: ").append(toIndentedString(numTier3)).append("\n");
    sb.append("    numTier4: ").append(toIndentedString(numTier4)).append("\n");
    sb.append("    numTier5: ").append(toIndentedString(numTier5)).append("\n");
    sb.append("    numberMetStandard: ").append(toIndentedString(numberMetStandard)).append("\n");
    sb.append("    percentMetStandard: ").append(toIndentedString(percentMetStandard)).append("\n");
    sb.append("    percentTier1: ").append(toIndentedString(percentTier1)).append("\n");
    sb.append("    percentTier2: ").append(toIndentedString(percentTier2)).append("\n");
    sb.append("    percentTier3: ").append(toIndentedString(percentTier3)).append("\n");
    sb.append("    percentTier4: ").append(toIndentedString(percentTier4)).append("\n");
    sb.append("    percentTier5: ").append(toIndentedString(percentTier5)).append("\n");
    sb.append("    studentsEligible: ").append(toIndentedString(studentsEligible)).append("\n");
    sb.append("    studentsTested: ").append(toIndentedString(studentsTested)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("meanScaledScore");
    openapiFields.add("numTier1");
    openapiFields.add("numTier2");
    openapiFields.add("numTier3");
    openapiFields.add("numTier4");
    openapiFields.add("numTier5");
    openapiFields.add("numberMetStandard");
    openapiFields.add("percentMetStandard");
    openapiFields.add("percentTier1");
    openapiFields.add("percentTier2");
    openapiFields.add("percentTier3");
    openapiFields.add("percentTier4");
    openapiFields.add("percentTier5");
    openapiFields.add("studentsEligible");
    openapiFields.add("studentsTested");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APITestScore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APITestScore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APITestScore is not found in the empty JSON string", APITestScore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APITestScore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APITestScore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APITestScore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APITestScore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APITestScore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APITestScore.class));

       return (TypeAdapter<T>) new TypeAdapter<APITestScore>() {
           @Override
           public void write(JsonWriter out, APITestScore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APITestScore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APITestScore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APITestScore
   * @throws IOException if the JSON string is invalid with respect to APITestScore
   */
  public static APITestScore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APITestScore.class);
  }

  /**
   * Convert an instance of APITestScore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

