/*
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APISchoolReview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:05.204966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APISchoolReview {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_NUMBER_OF_STARS = "numberOfStars";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_STARS)
  private Integer numberOfStars;

  public static final String SERIALIZED_NAME_SUBMIT_DATE = "submitDate";
  @SerializedName(SERIALIZED_NAME_SUBMIT_DATE)
  private String submitDate;

  public static final String SERIALIZED_NAME_SUBMITTED_BY = "submittedBy";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_BY)
  private String submittedBy;

  public APISchoolReview() {
  }

  public APISchoolReview comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment left by reviewer (html encoded)
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public APISchoolReview numberOfStars(Integer numberOfStars) {
    this.numberOfStars = numberOfStars;
    return this;
  }

  /**
   * Number of stars - 1 (poor) to 5 (excellent)
   * @return numberOfStars
   */
  @javax.annotation.Nullable
  public Integer getNumberOfStars() {
    return numberOfStars;
  }

  public void setNumberOfStars(Integer numberOfStars) {
    this.numberOfStars = numberOfStars;
  }


  public APISchoolReview submitDate(String submitDate) {
    this.submitDate = submitDate;
    return this;
  }

  /**
   * The date the review was submitted (mm/dd/yyyy)
   * @return submitDate
   */
  @javax.annotation.Nullable
  public String getSubmitDate() {
    return submitDate;
  }

  public void setSubmitDate(String submitDate) {
    this.submitDate = submitDate;
  }


  public APISchoolReview submittedBy(String submittedBy) {
    this.submittedBy = submittedBy;
    return this;
  }

  /**
   * Reviewer type (parent, student, teacher, principal, citizen)
   * @return submittedBy
   */
  @javax.annotation.Nullable
  public String getSubmittedBy() {
    return submittedBy;
  }

  public void setSubmittedBy(String submittedBy) {
    this.submittedBy = submittedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APISchoolReview apISchoolReview = (APISchoolReview) o;
    return Objects.equals(this.comment, apISchoolReview.comment) &&
        Objects.equals(this.numberOfStars, apISchoolReview.numberOfStars) &&
        Objects.equals(this.submitDate, apISchoolReview.submitDate) &&
        Objects.equals(this.submittedBy, apISchoolReview.submittedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, numberOfStars, submitDate, submittedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APISchoolReview {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    numberOfStars: ").append(toIndentedString(numberOfStars)).append("\n");
    sb.append("    submitDate: ").append(toIndentedString(submitDate)).append("\n");
    sb.append("    submittedBy: ").append(toIndentedString(submittedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("numberOfStars");
    openapiFields.add("submitDate");
    openapiFields.add("submittedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APISchoolReview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APISchoolReview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APISchoolReview is not found in the empty JSON string", APISchoolReview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APISchoolReview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APISchoolReview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("submitDate") != null && !jsonObj.get("submitDate").isJsonNull()) && !jsonObj.get("submitDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitDate").toString()));
      }
      if ((jsonObj.get("submittedBy") != null && !jsonObj.get("submittedBy").isJsonNull()) && !jsonObj.get("submittedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submittedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submittedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APISchoolReview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APISchoolReview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APISchoolReview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APISchoolReview.class));

       return (TypeAdapter<T>) new TypeAdapter<APISchoolReview>() {
           @Override
           public void write(JsonWriter out, APISchoolReview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APISchoolReview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APISchoolReview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APISchoolReview
   * @throws IOException if the JSON string is invalid with respect to APISchoolReview
   */
  public static APISchoolReview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APISchoolReview.class);
  }

  /**
   * Convert an instance of APISchoolReview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

