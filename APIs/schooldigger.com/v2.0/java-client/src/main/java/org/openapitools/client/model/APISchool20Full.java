/*
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.APICounty;
import org.openapitools.client.model.APIDistrictSum;
import org.openapitools.client.model.APILocation;
import org.openapitools.client.model.APIRankHistory;
import org.openapitools.client.model.APISchoolFinance;
import org.openapitools.client.model.APISchoolReview;
import org.openapitools.client.model.APITestScoreWrapper;
import org.openapitools.client.model.APIYearlyDemographics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APISchool20Full
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:05.204966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APISchool20Full {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private APILocation address;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private APICounty county;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private APIDistrictSum district;

  public static final String SERIALIZED_NAME_FINANCE = "finance";
  @SerializedName(SERIALIZED_NAME_FINANCE)
  private List<APISchoolFinance> finance = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIGH_GRADE = "highGrade";
  @SerializedName(SERIALIZED_NAME_HIGH_GRADE)
  private String highGrade;

  public static final String SERIALIZED_NAME_IS_CHARTER_SCHOOL = "isCharterSchool";
  @SerializedName(SERIALIZED_NAME_IS_CHARTER_SCHOOL)
  private String isCharterSchool;

  public static final String SERIALIZED_NAME_IS_MAGNET_SCHOOL = "isMagnetSchool";
  @SerializedName(SERIALIZED_NAME_IS_MAGNET_SCHOOL)
  private String isMagnetSchool;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "isPrivate";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_IS_TITLE_I_SCHOOL = "isTitleISchool";
  @SerializedName(SERIALIZED_NAME_IS_TITLE_I_SCHOOL)
  private String isTitleISchool;

  public static final String SERIALIZED_NAME_IS_TITLE_I_SCHOOLWIDE_SCHOOL = "isTitleISchoolwideSchool";
  @SerializedName(SERIALIZED_NAME_IS_TITLE_I_SCHOOLWIDE_SCHOOL)
  private String isTitleISchoolwideSchool;

  public static final String SERIALIZED_NAME_IS_VIRTUAL_SCHOOL = "isVirtualSchool";
  @SerializedName(SERIALIZED_NAME_IS_VIRTUAL_SCHOOL)
  private String isVirtualSchool;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_LOW_GRADE = "lowGrade";
  @SerializedName(SERIALIZED_NAME_LOW_GRADE)
  private String lowGrade;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_PRIVATE_COED = "privateCoed";
  @SerializedName(SERIALIZED_NAME_PRIVATE_COED)
  private String privateCoed;

  public static final String SERIALIZED_NAME_PRIVATE_DAYS = "privateDays";
  @SerializedName(SERIALIZED_NAME_PRIVATE_DAYS)
  private Integer privateDays;

  public static final String SERIALIZED_NAME_PRIVATE_HAS_LIBRARY = "privateHasLibrary";
  @SerializedName(SERIALIZED_NAME_PRIVATE_HAS_LIBRARY)
  private Boolean privateHasLibrary;

  public static final String SERIALIZED_NAME_PRIVATE_HOURS = "privateHours";
  @SerializedName(SERIALIZED_NAME_PRIVATE_HOURS)
  private Double privateHours;

  public static final String SERIALIZED_NAME_PRIVATE_ORIENTATION = "privateOrientation";
  @SerializedName(SERIALIZED_NAME_PRIVATE_ORIENTATION)
  private String privateOrientation;

  public static final String SERIALIZED_NAME_RANK_HISTORY = "rankHistory";
  @SerializedName(SERIALIZED_NAME_RANK_HISTORY)
  private List<APIRankHistory> rankHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANK_MOVEMENT = "rankMovement";
  @SerializedName(SERIALIZED_NAME_RANK_MOVEMENT)
  private Integer rankMovement;

  public static final String SERIALIZED_NAME_REVIEWS = "reviews";
  @SerializedName(SERIALIZED_NAME_REVIEWS)
  private List<APISchoolReview> reviews = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHOOL_LEVEL = "schoolLevel";
  @SerializedName(SERIALIZED_NAME_SCHOOL_LEVEL)
  private String schoolLevel;

  public static final String SERIALIZED_NAME_SCHOOL_NAME = "schoolName";
  @SerializedName(SERIALIZED_NAME_SCHOOL_NAME)
  private String schoolName;

  public static final String SERIALIZED_NAME_SCHOOL_YEARLY_DETAILS = "schoolYearlyDetails";
  @SerializedName(SERIALIZED_NAME_SCHOOL_YEARLY_DETAILS)
  private List<APIYearlyDemographics> schoolYearlyDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHOOLID = "schoolid";
  @SerializedName(SERIALIZED_NAME_SCHOOLID)
  private String schoolid;

  public static final String SERIALIZED_NAME_TEST_SCORES = "testScores";
  @SerializedName(SERIALIZED_NAME_TEST_SCORES)
  private List<APITestScoreWrapper> testScores = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_COMPARE_SCHOOL_DIGGER = "urlCompareSchoolDigger";
  @SerializedName(SERIALIZED_NAME_URL_COMPARE_SCHOOL_DIGGER)
  private String urlCompareSchoolDigger;

  public static final String SERIALIZED_NAME_URL_SCHOOL_DIGGER = "urlSchoolDigger";
  @SerializedName(SERIALIZED_NAME_URL_SCHOOL_DIGGER)
  private String urlSchoolDigger;

  public APISchool20Full() {
  }

  public APISchool20Full address(APILocation address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public APILocation getAddress() {
    return address;
  }

  public void setAddress(APILocation address) {
    this.address = address;
  }


  public APISchool20Full county(APICounty county) {
    this.county = county;
    return this;
  }

  /**
   * Get county
   * @return county
   */
  @javax.annotation.Nullable
  public APICounty getCounty() {
    return county;
  }

  public void setCounty(APICounty county) {
    this.county = county;
  }


  public APISchool20Full district(APIDistrictSum district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable
  public APIDistrictSum getDistrict() {
    return district;
  }

  public void setDistrict(APIDistrictSum district) {
    this.district = district;
  }


  public APISchool20Full finance(List<APISchoolFinance> finance) {
    this.finance = finance;
    return this;
  }

  public APISchool20Full addFinanceItem(APISchoolFinance financeItem) {
    if (this.finance == null) {
      this.finance = new ArrayList<>();
    }
    this.finance.add(financeItem);
    return this;
  }

  /**
   * School finance (Pro and Enterprise API level only)
   * @return finance
   */
  @javax.annotation.Nullable
  public List<APISchoolFinance> getFinance() {
    return finance;
  }

  public void setFinance(List<APISchoolFinance> finance) {
    this.finance = finance;
  }


  public APISchool20Full highGrade(String highGrade) {
    this.highGrade = highGrade;
    return this;
  }

  /**
   * The high grade served by this school
   * @return highGrade
   */
  @javax.annotation.Nullable
  public String getHighGrade() {
    return highGrade;
  }

  public void setHighGrade(String highGrade) {
    this.highGrade = highGrade;
  }


  public APISchool20Full isCharterSchool(String isCharterSchool) {
    this.isCharterSchool = isCharterSchool;
    return this;
  }

  /**
   * Indicates if school is a charter school (Yes/No/n-a)
   * @return isCharterSchool
   */
  @javax.annotation.Nullable
  public String getIsCharterSchool() {
    return isCharterSchool;
  }

  public void setIsCharterSchool(String isCharterSchool) {
    this.isCharterSchool = isCharterSchool;
  }


  public APISchool20Full isMagnetSchool(String isMagnetSchool) {
    this.isMagnetSchool = isMagnetSchool;
    return this;
  }

  /**
   * Indicates if school is a magnet school (Yes/No/n-a)
   * @return isMagnetSchool
   */
  @javax.annotation.Nullable
  public String getIsMagnetSchool() {
    return isMagnetSchool;
  }

  public void setIsMagnetSchool(String isMagnetSchool) {
    this.isMagnetSchool = isMagnetSchool;
  }


  public APISchool20Full isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * Indicates if school is a private school (Yes/No)
   * @return isPrivate
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivate() {
    return isPrivate;
  }

  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public APISchool20Full isTitleISchool(String isTitleISchool) {
    this.isTitleISchool = isTitleISchool;
    return this;
  }

  /**
   * Indicates if school is a Title I school (Yes/No/n-a)
   * @return isTitleISchool
   */
  @javax.annotation.Nullable
  public String getIsTitleISchool() {
    return isTitleISchool;
  }

  public void setIsTitleISchool(String isTitleISchool) {
    this.isTitleISchool = isTitleISchool;
  }


  public APISchool20Full isTitleISchoolwideSchool(String isTitleISchoolwideSchool) {
    this.isTitleISchoolwideSchool = isTitleISchoolwideSchool;
    return this;
  }

  /**
   * Indicates if a school-wide Title I school (Yes/No/n-a)
   * @return isTitleISchoolwideSchool
   */
  @javax.annotation.Nullable
  public String getIsTitleISchoolwideSchool() {
    return isTitleISchoolwideSchool;
  }

  public void setIsTitleISchoolwideSchool(String isTitleISchoolwideSchool) {
    this.isTitleISchoolwideSchool = isTitleISchoolwideSchool;
  }


  public APISchool20Full isVirtualSchool(String isVirtualSchool) {
    this.isVirtualSchool = isVirtualSchool;
    return this;
  }

  /**
   * Indicates if school is a virtual school (Yes/No/n-a)
   * @return isVirtualSchool
   */
  @javax.annotation.Nullable
  public String getIsVirtualSchool() {
    return isVirtualSchool;
  }

  public void setIsVirtualSchool(String isVirtualSchool) {
    this.isVirtualSchool = isVirtualSchool;
  }


  public APISchool20Full locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * NCES Locale of school (https://nces.ed.gov/ccd/rural_locales.asp)
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public APISchool20Full lowGrade(String lowGrade) {
    this.lowGrade = lowGrade;
    return this;
  }

  /**
   * The low grade served by this school (PK &#x3D; Prekindergarten, K &#x3D; Kindergarten)
   * @return lowGrade
   */
  @javax.annotation.Nullable
  public String getLowGrade() {
    return lowGrade;
  }

  public void setLowGrade(String lowGrade) {
    this.lowGrade = lowGrade;
  }


  public APISchool20Full phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * School phone number
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public APISchool20Full privateCoed(String privateCoed) {
    this.privateCoed = privateCoed;
    return this;
  }

  /**
   * Coed/Boys/Girls (private schools only)
   * @return privateCoed
   */
  @javax.annotation.Nullable
  public String getPrivateCoed() {
    return privateCoed;
  }

  public void setPrivateCoed(String privateCoed) {
    this.privateCoed = privateCoed;
  }


  public APISchool20Full privateDays(Integer privateDays) {
    this.privateDays = privateDays;
    return this;
  }

  /**
   * Days in the school year (private schools only)
   * @return privateDays
   */
  @javax.annotation.Nullable
  public Integer getPrivateDays() {
    return privateDays;
  }

  public void setPrivateDays(Integer privateDays) {
    this.privateDays = privateDays;
  }


  public APISchool20Full privateHasLibrary(Boolean privateHasLibrary) {
    this.privateHasLibrary = privateHasLibrary;
    return this;
  }

  /**
   * Indicates if the school has a library (private schools only)
   * @return privateHasLibrary
   */
  @javax.annotation.Nullable
  public Boolean getPrivateHasLibrary() {
    return privateHasLibrary;
  }

  public void setPrivateHasLibrary(Boolean privateHasLibrary) {
    this.privateHasLibrary = privateHasLibrary;
  }


  public APISchool20Full privateHours(Double privateHours) {
    this.privateHours = privateHours;
    return this;
  }

  /**
   * Hours in the school day (private schools only)
   * @return privateHours
   */
  @javax.annotation.Nullable
  public Double getPrivateHours() {
    return privateHours;
  }

  public void setPrivateHours(Double privateHours) {
    this.privateHours = privateHours;
  }


  public APISchool20Full privateOrientation(String privateOrientation) {
    this.privateOrientation = privateOrientation;
    return this;
  }

  /**
   * Affiliation of the school (private schools only)
   * @return privateOrientation
   */
  @javax.annotation.Nullable
  public String getPrivateOrientation() {
    return privateOrientation;
  }

  public void setPrivateOrientation(String privateOrientation) {
    this.privateOrientation = privateOrientation;
  }


  public APISchool20Full rankHistory(List<APIRankHistory> rankHistory) {
    this.rankHistory = rankHistory;
    return this;
  }

  public APISchool20Full addRankHistoryItem(APIRankHistory rankHistoryItem) {
    if (this.rankHistory == null) {
      this.rankHistory = new ArrayList<>();
    }
    this.rankHistory.add(rankHistoryItem);
    return this;
  }

  /**
   * SchoolDigger yearly rank history of the school
   * @return rankHistory
   */
  @javax.annotation.Nullable
  public List<APIRankHistory> getRankHistory() {
    return rankHistory;
  }

  public void setRankHistory(List<APIRankHistory> rankHistory) {
    this.rankHistory = rankHistory;
  }


  public APISchool20Full rankMovement(Integer rankMovement) {
    this.rankMovement = rankMovement;
    return this;
  }

  /**
   * Returns the movement of rank for this school between current and previous year
   * @return rankMovement
   */
  @javax.annotation.Nullable
  public Integer getRankMovement() {
    return rankMovement;
  }

  public void setRankMovement(Integer rankMovement) {
    this.rankMovement = rankMovement;
  }


  public APISchool20Full reviews(List<APISchoolReview> reviews) {
    this.reviews = reviews;
    return this;
  }

  public APISchool20Full addReviewsItem(APISchoolReview reviewsItem) {
    if (this.reviews == null) {
      this.reviews = new ArrayList<>();
    }
    this.reviews.add(reviewsItem);
    return this;
  }

  /**
   * List of reviews for this school submitted by SchoolDigger site visitors
   * @return reviews
   */
  @javax.annotation.Nullable
  public List<APISchoolReview> getReviews() {
    return reviews;
  }

  public void setReviews(List<APISchoolReview> reviews) {
    this.reviews = reviews;
  }


  public APISchool20Full schoolLevel(String schoolLevel) {
    this.schoolLevel = schoolLevel;
    return this;
  }

  /**
   * The level of school (Elementary, Middle, High, Private, Alternative)
   * @return schoolLevel
   */
  @javax.annotation.Nullable
  public String getSchoolLevel() {
    return schoolLevel;
  }

  public void setSchoolLevel(String schoolLevel) {
    this.schoolLevel = schoolLevel;
  }


  public APISchool20Full schoolName(String schoolName) {
    this.schoolName = schoolName;
    return this;
  }

  /**
   * School name
   * @return schoolName
   */
  @javax.annotation.Nullable
  public String getSchoolName() {
    return schoolName;
  }

  public void setSchoolName(String schoolName) {
    this.schoolName = schoolName;
  }


  public APISchool20Full schoolYearlyDetails(List<APIYearlyDemographics> schoolYearlyDetails) {
    this.schoolYearlyDetails = schoolYearlyDetails;
    return this;
  }

  public APISchool20Full addSchoolYearlyDetailsItem(APIYearlyDemographics schoolYearlyDetailsItem) {
    if (this.schoolYearlyDetails == null) {
      this.schoolYearlyDetails = new ArrayList<>();
    }
    this.schoolYearlyDetails.add(schoolYearlyDetailsItem);
    return this;
  }

  /**
   * School Yearly metrics
   * @return schoolYearlyDetails
   */
  @javax.annotation.Nullable
  public List<APIYearlyDemographics> getSchoolYearlyDetails() {
    return schoolYearlyDetails;
  }

  public void setSchoolYearlyDetails(List<APIYearlyDemographics> schoolYearlyDetails) {
    this.schoolYearlyDetails = schoolYearlyDetails;
  }


  public APISchool20Full schoolid(String schoolid) {
    this.schoolid = schoolid;
    return this;
  }

  /**
   * SchoolDigger School ID Number (12 digits)
   * @return schoolid
   */
  @javax.annotation.Nullable
  public String getSchoolid() {
    return schoolid;
  }

  public void setSchoolid(String schoolid) {
    this.schoolid = schoolid;
  }


  public APISchool20Full testScores(List<APITestScoreWrapper> testScores) {
    this.testScores = testScores;
    return this;
  }

  public APISchool20Full addTestScoresItem(APITestScoreWrapper testScoresItem) {
    if (this.testScores == null) {
      this.testScores = new ArrayList<>();
    }
    this.testScores.add(testScoresItem);
    return this;
  }

  /**
   * Test scores (including district and state) -- requires Pro or Enterprise level API subscription
   * @return testScores
   */
  @javax.annotation.Nullable
  public List<APITestScoreWrapper> getTestScores() {
    return testScores;
  }

  public void setTestScores(List<APITestScoreWrapper> testScores) {
    this.testScores = testScores;
  }


  public APISchool20Full url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL of the school&#39;s public website
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public APISchool20Full urlCompareSchoolDigger(String urlCompareSchoolDigger) {
    this.urlCompareSchoolDigger = urlCompareSchoolDigger;
    return this;
  }

  /**
   * SchoolDigger URL for comparing this school to nearby schools
   * @return urlCompareSchoolDigger
   */
  @javax.annotation.Nullable
  public String getUrlCompareSchoolDigger() {
    return urlCompareSchoolDigger;
  }

  public void setUrlCompareSchoolDigger(String urlCompareSchoolDigger) {
    this.urlCompareSchoolDigger = urlCompareSchoolDigger;
  }


  public APISchool20Full urlSchoolDigger(String urlSchoolDigger) {
    this.urlSchoolDigger = urlSchoolDigger;
    return this;
  }

  /**
   * SchoolDigger URL for this school
   * @return urlSchoolDigger
   */
  @javax.annotation.Nullable
  public String getUrlSchoolDigger() {
    return urlSchoolDigger;
  }

  public void setUrlSchoolDigger(String urlSchoolDigger) {
    this.urlSchoolDigger = urlSchoolDigger;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APISchool20Full apISchool20Full = (APISchool20Full) o;
    return Objects.equals(this.address, apISchool20Full.address) &&
        Objects.equals(this.county, apISchool20Full.county) &&
        Objects.equals(this.district, apISchool20Full.district) &&
        Objects.equals(this.finance, apISchool20Full.finance) &&
        Objects.equals(this.highGrade, apISchool20Full.highGrade) &&
        Objects.equals(this.isCharterSchool, apISchool20Full.isCharterSchool) &&
        Objects.equals(this.isMagnetSchool, apISchool20Full.isMagnetSchool) &&
        Objects.equals(this.isPrivate, apISchool20Full.isPrivate) &&
        Objects.equals(this.isTitleISchool, apISchool20Full.isTitleISchool) &&
        Objects.equals(this.isTitleISchoolwideSchool, apISchool20Full.isTitleISchoolwideSchool) &&
        Objects.equals(this.isVirtualSchool, apISchool20Full.isVirtualSchool) &&
        Objects.equals(this.locale, apISchool20Full.locale) &&
        Objects.equals(this.lowGrade, apISchool20Full.lowGrade) &&
        Objects.equals(this.phone, apISchool20Full.phone) &&
        Objects.equals(this.privateCoed, apISchool20Full.privateCoed) &&
        Objects.equals(this.privateDays, apISchool20Full.privateDays) &&
        Objects.equals(this.privateHasLibrary, apISchool20Full.privateHasLibrary) &&
        Objects.equals(this.privateHours, apISchool20Full.privateHours) &&
        Objects.equals(this.privateOrientation, apISchool20Full.privateOrientation) &&
        Objects.equals(this.rankHistory, apISchool20Full.rankHistory) &&
        Objects.equals(this.rankMovement, apISchool20Full.rankMovement) &&
        Objects.equals(this.reviews, apISchool20Full.reviews) &&
        Objects.equals(this.schoolLevel, apISchool20Full.schoolLevel) &&
        Objects.equals(this.schoolName, apISchool20Full.schoolName) &&
        Objects.equals(this.schoolYearlyDetails, apISchool20Full.schoolYearlyDetails) &&
        Objects.equals(this.schoolid, apISchool20Full.schoolid) &&
        Objects.equals(this.testScores, apISchool20Full.testScores) &&
        Objects.equals(this.url, apISchool20Full.url) &&
        Objects.equals(this.urlCompareSchoolDigger, apISchool20Full.urlCompareSchoolDigger) &&
        Objects.equals(this.urlSchoolDigger, apISchool20Full.urlSchoolDigger);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, county, district, finance, highGrade, isCharterSchool, isMagnetSchool, isPrivate, isTitleISchool, isTitleISchoolwideSchool, isVirtualSchool, locale, lowGrade, phone, privateCoed, privateDays, privateHasLibrary, privateHours, privateOrientation, rankHistory, rankMovement, reviews, schoolLevel, schoolName, schoolYearlyDetails, schoolid, testScores, url, urlCompareSchoolDigger, urlSchoolDigger);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APISchool20Full {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    finance: ").append(toIndentedString(finance)).append("\n");
    sb.append("    highGrade: ").append(toIndentedString(highGrade)).append("\n");
    sb.append("    isCharterSchool: ").append(toIndentedString(isCharterSchool)).append("\n");
    sb.append("    isMagnetSchool: ").append(toIndentedString(isMagnetSchool)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    isTitleISchool: ").append(toIndentedString(isTitleISchool)).append("\n");
    sb.append("    isTitleISchoolwideSchool: ").append(toIndentedString(isTitleISchoolwideSchool)).append("\n");
    sb.append("    isVirtualSchool: ").append(toIndentedString(isVirtualSchool)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    lowGrade: ").append(toIndentedString(lowGrade)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    privateCoed: ").append(toIndentedString(privateCoed)).append("\n");
    sb.append("    privateDays: ").append(toIndentedString(privateDays)).append("\n");
    sb.append("    privateHasLibrary: ").append(toIndentedString(privateHasLibrary)).append("\n");
    sb.append("    privateHours: ").append(toIndentedString(privateHours)).append("\n");
    sb.append("    privateOrientation: ").append(toIndentedString(privateOrientation)).append("\n");
    sb.append("    rankHistory: ").append(toIndentedString(rankHistory)).append("\n");
    sb.append("    rankMovement: ").append(toIndentedString(rankMovement)).append("\n");
    sb.append("    reviews: ").append(toIndentedString(reviews)).append("\n");
    sb.append("    schoolLevel: ").append(toIndentedString(schoolLevel)).append("\n");
    sb.append("    schoolName: ").append(toIndentedString(schoolName)).append("\n");
    sb.append("    schoolYearlyDetails: ").append(toIndentedString(schoolYearlyDetails)).append("\n");
    sb.append("    schoolid: ").append(toIndentedString(schoolid)).append("\n");
    sb.append("    testScores: ").append(toIndentedString(testScores)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlCompareSchoolDigger: ").append(toIndentedString(urlCompareSchoolDigger)).append("\n");
    sb.append("    urlSchoolDigger: ").append(toIndentedString(urlSchoolDigger)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("county");
    openapiFields.add("district");
    openapiFields.add("finance");
    openapiFields.add("highGrade");
    openapiFields.add("isCharterSchool");
    openapiFields.add("isMagnetSchool");
    openapiFields.add("isPrivate");
    openapiFields.add("isTitleISchool");
    openapiFields.add("isTitleISchoolwideSchool");
    openapiFields.add("isVirtualSchool");
    openapiFields.add("locale");
    openapiFields.add("lowGrade");
    openapiFields.add("phone");
    openapiFields.add("privateCoed");
    openapiFields.add("privateDays");
    openapiFields.add("privateHasLibrary");
    openapiFields.add("privateHours");
    openapiFields.add("privateOrientation");
    openapiFields.add("rankHistory");
    openapiFields.add("rankMovement");
    openapiFields.add("reviews");
    openapiFields.add("schoolLevel");
    openapiFields.add("schoolName");
    openapiFields.add("schoolYearlyDetails");
    openapiFields.add("schoolid");
    openapiFields.add("testScores");
    openapiFields.add("url");
    openapiFields.add("urlCompareSchoolDigger");
    openapiFields.add("urlSchoolDigger");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APISchool20Full
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APISchool20Full.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APISchool20Full is not found in the empty JSON string", APISchool20Full.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APISchool20Full.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APISchool20Full` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        APILocation.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `county`
      if (jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) {
        APICounty.validateJsonElement(jsonObj.get("county"));
      }
      // validate the optional field `district`
      if (jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) {
        APIDistrictSum.validateJsonElement(jsonObj.get("district"));
      }
      if (jsonObj.get("finance") != null && !jsonObj.get("finance").isJsonNull()) {
        JsonArray jsonArrayfinance = jsonObj.getAsJsonArray("finance");
        if (jsonArrayfinance != null) {
          // ensure the json data is an array
          if (!jsonObj.get("finance").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `finance` to be an array in the JSON string but got `%s`", jsonObj.get("finance").toString()));
          }

          // validate the optional field `finance` (array)
          for (int i = 0; i < jsonArrayfinance.size(); i++) {
            APISchoolFinance.validateJsonElement(jsonArrayfinance.get(i));
          };
        }
      }
      if ((jsonObj.get("highGrade") != null && !jsonObj.get("highGrade").isJsonNull()) && !jsonObj.get("highGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highGrade").toString()));
      }
      if ((jsonObj.get("isCharterSchool") != null && !jsonObj.get("isCharterSchool").isJsonNull()) && !jsonObj.get("isCharterSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isCharterSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isCharterSchool").toString()));
      }
      if ((jsonObj.get("isMagnetSchool") != null && !jsonObj.get("isMagnetSchool").isJsonNull()) && !jsonObj.get("isMagnetSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isMagnetSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isMagnetSchool").toString()));
      }
      if ((jsonObj.get("isTitleISchool") != null && !jsonObj.get("isTitleISchool").isJsonNull()) && !jsonObj.get("isTitleISchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isTitleISchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isTitleISchool").toString()));
      }
      if ((jsonObj.get("isTitleISchoolwideSchool") != null && !jsonObj.get("isTitleISchoolwideSchool").isJsonNull()) && !jsonObj.get("isTitleISchoolwideSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isTitleISchoolwideSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isTitleISchoolwideSchool").toString()));
      }
      if ((jsonObj.get("isVirtualSchool") != null && !jsonObj.get("isVirtualSchool").isJsonNull()) && !jsonObj.get("isVirtualSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isVirtualSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isVirtualSchool").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("lowGrade") != null && !jsonObj.get("lowGrade").isJsonNull()) && !jsonObj.get("lowGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lowGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lowGrade").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("privateCoed") != null && !jsonObj.get("privateCoed").isJsonNull()) && !jsonObj.get("privateCoed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateCoed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateCoed").toString()));
      }
      if ((jsonObj.get("privateOrientation") != null && !jsonObj.get("privateOrientation").isJsonNull()) && !jsonObj.get("privateOrientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateOrientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateOrientation").toString()));
      }
      if (jsonObj.get("rankHistory") != null && !jsonObj.get("rankHistory").isJsonNull()) {
        JsonArray jsonArrayrankHistory = jsonObj.getAsJsonArray("rankHistory");
        if (jsonArrayrankHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rankHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rankHistory` to be an array in the JSON string but got `%s`", jsonObj.get("rankHistory").toString()));
          }

          // validate the optional field `rankHistory` (array)
          for (int i = 0; i < jsonArrayrankHistory.size(); i++) {
            APIRankHistory.validateJsonElement(jsonArrayrankHistory.get(i));
          };
        }
      }
      if (jsonObj.get("reviews") != null && !jsonObj.get("reviews").isJsonNull()) {
        JsonArray jsonArrayreviews = jsonObj.getAsJsonArray("reviews");
        if (jsonArrayreviews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reviews").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reviews` to be an array in the JSON string but got `%s`", jsonObj.get("reviews").toString()));
          }

          // validate the optional field `reviews` (array)
          for (int i = 0; i < jsonArrayreviews.size(); i++) {
            APISchoolReview.validateJsonElement(jsonArrayreviews.get(i));
          };
        }
      }
      if ((jsonObj.get("schoolLevel") != null && !jsonObj.get("schoolLevel").isJsonNull()) && !jsonObj.get("schoolLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schoolLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schoolLevel").toString()));
      }
      if ((jsonObj.get("schoolName") != null && !jsonObj.get("schoolName").isJsonNull()) && !jsonObj.get("schoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schoolName").toString()));
      }
      if (jsonObj.get("schoolYearlyDetails") != null && !jsonObj.get("schoolYearlyDetails").isJsonNull()) {
        JsonArray jsonArrayschoolYearlyDetails = jsonObj.getAsJsonArray("schoolYearlyDetails");
        if (jsonArrayschoolYearlyDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("schoolYearlyDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `schoolYearlyDetails` to be an array in the JSON string but got `%s`", jsonObj.get("schoolYearlyDetails").toString()));
          }

          // validate the optional field `schoolYearlyDetails` (array)
          for (int i = 0; i < jsonArrayschoolYearlyDetails.size(); i++) {
            APIYearlyDemographics.validateJsonElement(jsonArrayschoolYearlyDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("schoolid") != null && !jsonObj.get("schoolid").isJsonNull()) && !jsonObj.get("schoolid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schoolid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schoolid").toString()));
      }
      if (jsonObj.get("testScores") != null && !jsonObj.get("testScores").isJsonNull()) {
        JsonArray jsonArraytestScores = jsonObj.getAsJsonArray("testScores");
        if (jsonArraytestScores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testScores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testScores` to be an array in the JSON string but got `%s`", jsonObj.get("testScores").toString()));
          }

          // validate the optional field `testScores` (array)
          for (int i = 0; i < jsonArraytestScores.size(); i++) {
            APITestScoreWrapper.validateJsonElement(jsonArraytestScores.get(i));
          };
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("urlCompareSchoolDigger") != null && !jsonObj.get("urlCompareSchoolDigger").isJsonNull()) && !jsonObj.get("urlCompareSchoolDigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlCompareSchoolDigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlCompareSchoolDigger").toString()));
      }
      if ((jsonObj.get("urlSchoolDigger") != null && !jsonObj.get("urlSchoolDigger").isJsonNull()) && !jsonObj.get("urlSchoolDigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlSchoolDigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlSchoolDigger").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APISchool20Full.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APISchool20Full' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APISchool20Full> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APISchool20Full.class));

       return (TypeAdapter<T>) new TypeAdapter<APISchool20Full>() {
           @Override
           public void write(JsonWriter out, APISchool20Full value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APISchool20Full read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APISchool20Full given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APISchool20Full
   * @throws IOException if the JSON string is invalid with respect to APISchool20Full
   */
  public static APISchool20Full fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APISchool20Full.class);
  }

  /**
   * Convert an instance of APISchool20Full to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

