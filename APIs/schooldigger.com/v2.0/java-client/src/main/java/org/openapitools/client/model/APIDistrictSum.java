/*
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * District Summary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:05.204966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APIDistrictSum {
  public static final String SERIALIZED_NAME_DISTRICT_I_D = "districtID";
  @SerializedName(SERIALIZED_NAME_DISTRICT_I_D)
  private String districtID;

  public static final String SERIALIZED_NAME_DISTRICT_NAME = "districtName";
  @SerializedName(SERIALIZED_NAME_DISTRICT_NAME)
  private String districtName;

  public static final String SERIALIZED_NAME_RANK_U_R_L = "rankURL";
  @SerializedName(SERIALIZED_NAME_RANK_U_R_L)
  private String rankURL;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public APIDistrictSum() {
  }

  public APIDistrictSum districtID(String districtID) {
    this.districtID = districtID;
    return this;
  }

  /**
   * The 7 digit SchoolDigger District id number
   * @return districtID
   */
  @javax.annotation.Nullable
  public String getDistrictID() {
    return districtID;
  }

  public void setDistrictID(String districtID) {
    this.districtID = districtID;
  }


  public APIDistrictSum districtName(String districtName) {
    this.districtName = districtName;
    return this;
  }

  /**
   * Get districtName
   * @return districtName
   */
  @javax.annotation.Nullable
  public String getDistrictName() {
    return districtName;
  }

  public void setDistrictName(String districtName) {
    this.districtName = districtName;
  }


  public APIDistrictSum rankURL(String rankURL) {
    this.rankURL = rankURL;
    return this;
  }

  /**
   * The URL to see the district in the SchoolDigger ranking list
   * @return rankURL
   */
  @javax.annotation.Nullable
  public String getRankURL() {
    return rankURL;
  }

  public void setRankURL(String rankURL) {
    this.rankURL = rankURL;
  }


  public APIDistrictSum url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL to see the district details on SchoolDigger
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIDistrictSum apIDistrictSum = (APIDistrictSum) o;
    return Objects.equals(this.districtID, apIDistrictSum.districtID) &&
        Objects.equals(this.districtName, apIDistrictSum.districtName) &&
        Objects.equals(this.rankURL, apIDistrictSum.rankURL) &&
        Objects.equals(this.url, apIDistrictSum.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(districtID, districtName, rankURL, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIDistrictSum {\n");
    sb.append("    districtID: ").append(toIndentedString(districtID)).append("\n");
    sb.append("    districtName: ").append(toIndentedString(districtName)).append("\n");
    sb.append("    rankURL: ").append(toIndentedString(rankURL)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("districtID");
    openapiFields.add("districtName");
    openapiFields.add("rankURL");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIDistrictSum
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIDistrictSum.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIDistrictSum is not found in the empty JSON string", APIDistrictSum.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIDistrictSum.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIDistrictSum` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("districtID") != null && !jsonObj.get("districtID").isJsonNull()) && !jsonObj.get("districtID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `districtID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("districtID").toString()));
      }
      if ((jsonObj.get("districtName") != null && !jsonObj.get("districtName").isJsonNull()) && !jsonObj.get("districtName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `districtName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("districtName").toString()));
      }
      if ((jsonObj.get("rankURL") != null && !jsonObj.get("rankURL").isJsonNull()) && !jsonObj.get("rankURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rankURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rankURL").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIDistrictSum.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIDistrictSum' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIDistrictSum> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIDistrictSum.class));

       return (TypeAdapter<T>) new TypeAdapter<APIDistrictSum>() {
           @Override
           public void write(JsonWriter out, APIDistrictSum value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIDistrictSum read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIDistrictSum given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIDistrictSum
   * @throws IOException if the JSON string is invalid with respect to APIDistrictSum
   */
  public static APIDistrictSum fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIDistrictSum.class);
  }

  /**
   * Convert an instance of APIDistrictSum to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

