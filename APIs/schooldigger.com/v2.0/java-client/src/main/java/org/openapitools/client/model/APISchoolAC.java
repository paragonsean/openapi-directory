/*
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APISchoolAC
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:05.204966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APISchoolAC {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_HAS_BOUNDARY = "hasBoundary";
  @SerializedName(SERIALIZED_NAME_HAS_BOUNDARY)
  private Boolean hasBoundary;

  public static final String SERIALIZED_NAME_HIGH_GRADE = "highGrade";
  @SerializedName(SERIALIZED_NAME_HIGH_GRADE)
  private String highGrade;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_LOW_GRADE = "lowGrade";
  @SerializedName(SERIALIZED_NAME_LOW_GRADE)
  private String lowGrade;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_RANK_OF = "rankOf";
  @SerializedName(SERIALIZED_NAME_RANK_OF)
  private Integer rankOf;

  public static final String SERIALIZED_NAME_RANK_STARS = "rankStars";
  @SerializedName(SERIALIZED_NAME_RANK_STARS)
  private Integer rankStars;

  public static final String SERIALIZED_NAME_SCHOOL_LEVEL = "schoolLevel";
  @SerializedName(SERIALIZED_NAME_SCHOOL_LEVEL)
  private String schoolLevel;

  public static final String SERIALIZED_NAME_SCHOOL_NAME = "schoolName";
  @SerializedName(SERIALIZED_NAME_SCHOOL_NAME)
  private String schoolName;

  public static final String SERIALIZED_NAME_SCHOOLID = "schoolid";
  @SerializedName(SERIALIZED_NAME_SCHOOLID)
  private String schoolid;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public APISchoolAC() {
  }

  public APISchoolAC city(String city) {
    this.city = city;
    return this;
  }

  /**
   * School location city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public APISchoolAC hasBoundary(Boolean hasBoundary) {
    this.hasBoundary = hasBoundary;
    return this;
  }

  /**
   * States whether there is an attendance boundary available for this school
   * @return hasBoundary
   */
  @javax.annotation.Nullable
  public Boolean getHasBoundary() {
    return hasBoundary;
  }

  public void setHasBoundary(Boolean hasBoundary) {
    this.hasBoundary = hasBoundary;
  }


  public APISchoolAC highGrade(String highGrade) {
    this.highGrade = highGrade;
    return this;
  }

  /**
   * The high grade served by this school
   * @return highGrade
   */
  @javax.annotation.Nullable
  public String getHighGrade() {
    return highGrade;
  }

  public void setHighGrade(String highGrade) {
    this.highGrade = highGrade;
  }


  public APISchoolAC latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * School location latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public APISchoolAC longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * School location longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public APISchoolAC lowGrade(String lowGrade) {
    this.lowGrade = lowGrade;
    return this;
  }

  /**
   * The low grade served by this school (PK &#x3D; Prekindergarten, K &#x3D; Kindergarten)
   * @return lowGrade
   */
  @javax.annotation.Nullable
  public String getLowGrade() {
    return lowGrade;
  }

  public void setLowGrade(String lowGrade) {
    this.lowGrade = lowGrade;
  }


  public APISchoolAC rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Statewide rank of this School
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public APISchoolAC rankOf(Integer rankOf) {
    this.rankOf = rankOf;
    return this;
  }

  /**
   * Count of schools ranked at this state/level
   * @return rankOf
   */
  @javax.annotation.Nullable
  public Integer getRankOf() {
    return rankOf;
  }

  public void setRankOf(Integer rankOf) {
    this.rankOf = rankOf;
  }


  public APISchoolAC rankStars(Integer rankStars) {
    this.rankStars = rankStars;
    return this;
  }

  /**
   * The number of stars SchoolDigger awarded in the ranking of the school (0-5, 5 is best)
   * @return rankStars
   */
  @javax.annotation.Nullable
  public Integer getRankStars() {
    return rankStars;
  }

  public void setRankStars(Integer rankStars) {
    this.rankStars = rankStars;
  }


  public APISchoolAC schoolLevel(String schoolLevel) {
    this.schoolLevel = schoolLevel;
    return this;
  }

  /**
   * The level of school (Elementary, Middle, High, Private, Alternative)
   * @return schoolLevel
   */
  @javax.annotation.Nullable
  public String getSchoolLevel() {
    return schoolLevel;
  }

  public void setSchoolLevel(String schoolLevel) {
    this.schoolLevel = schoolLevel;
  }


  public APISchoolAC schoolName(String schoolName) {
    this.schoolName = schoolName;
    return this;
  }

  /**
   * School name
   * @return schoolName
   */
  @javax.annotation.Nullable
  public String getSchoolName() {
    return schoolName;
  }

  public void setSchoolName(String schoolName) {
    this.schoolName = schoolName;
  }


  public APISchoolAC schoolid(String schoolid) {
    this.schoolid = schoolid;
    return this;
  }

  /**
   * SchoolDigger School ID Number (12 digits). Use /schools/{schoolID} to retrieve the full school record
   * @return schoolid
   */
  @javax.annotation.Nullable
  public String getSchoolid() {
    return schoolid;
  }

  public void setSchoolid(String schoolid) {
    this.schoolid = schoolid;
  }


  public APISchoolAC state(String state) {
    this.state = state;
    return this;
  }

  /**
   * School location state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public APISchoolAC zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * School location zip code
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APISchoolAC apISchoolAC = (APISchoolAC) o;
    return Objects.equals(this.city, apISchoolAC.city) &&
        Objects.equals(this.hasBoundary, apISchoolAC.hasBoundary) &&
        Objects.equals(this.highGrade, apISchoolAC.highGrade) &&
        Objects.equals(this.latitude, apISchoolAC.latitude) &&
        Objects.equals(this.longitude, apISchoolAC.longitude) &&
        Objects.equals(this.lowGrade, apISchoolAC.lowGrade) &&
        Objects.equals(this.rank, apISchoolAC.rank) &&
        Objects.equals(this.rankOf, apISchoolAC.rankOf) &&
        Objects.equals(this.rankStars, apISchoolAC.rankStars) &&
        Objects.equals(this.schoolLevel, apISchoolAC.schoolLevel) &&
        Objects.equals(this.schoolName, apISchoolAC.schoolName) &&
        Objects.equals(this.schoolid, apISchoolAC.schoolid) &&
        Objects.equals(this.state, apISchoolAC.state) &&
        Objects.equals(this.zip, apISchoolAC.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, hasBoundary, highGrade, latitude, longitude, lowGrade, rank, rankOf, rankStars, schoolLevel, schoolName, schoolid, state, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APISchoolAC {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    hasBoundary: ").append(toIndentedString(hasBoundary)).append("\n");
    sb.append("    highGrade: ").append(toIndentedString(highGrade)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    lowGrade: ").append(toIndentedString(lowGrade)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    rankOf: ").append(toIndentedString(rankOf)).append("\n");
    sb.append("    rankStars: ").append(toIndentedString(rankStars)).append("\n");
    sb.append("    schoolLevel: ").append(toIndentedString(schoolLevel)).append("\n");
    sb.append("    schoolName: ").append(toIndentedString(schoolName)).append("\n");
    sb.append("    schoolid: ").append(toIndentedString(schoolid)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("hasBoundary");
    openapiFields.add("highGrade");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("lowGrade");
    openapiFields.add("rank");
    openapiFields.add("rankOf");
    openapiFields.add("rankStars");
    openapiFields.add("schoolLevel");
    openapiFields.add("schoolName");
    openapiFields.add("schoolid");
    openapiFields.add("state");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APISchoolAC
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APISchoolAC.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APISchoolAC is not found in the empty JSON string", APISchoolAC.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APISchoolAC.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APISchoolAC` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("highGrade") != null && !jsonObj.get("highGrade").isJsonNull()) && !jsonObj.get("highGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highGrade").toString()));
      }
      if ((jsonObj.get("lowGrade") != null && !jsonObj.get("lowGrade").isJsonNull()) && !jsonObj.get("lowGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lowGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lowGrade").toString()));
      }
      if ((jsonObj.get("schoolLevel") != null && !jsonObj.get("schoolLevel").isJsonNull()) && !jsonObj.get("schoolLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schoolLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schoolLevel").toString()));
      }
      if ((jsonObj.get("schoolName") != null && !jsonObj.get("schoolName").isJsonNull()) && !jsonObj.get("schoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schoolName").toString()));
      }
      if ((jsonObj.get("schoolid") != null && !jsonObj.get("schoolid").isJsonNull()) && !jsonObj.get("schoolid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schoolid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schoolid").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APISchoolAC.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APISchoolAC' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APISchoolAC> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APISchoolAC.class));

       return (TypeAdapter<T>) new TypeAdapter<APISchoolAC>() {
           @Override
           public void write(JsonWriter out, APISchoolAC value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APISchoolAC read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APISchoolAC given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APISchoolAC
   * @throws IOException if the JSON string is invalid with respect to APISchoolAC
   */
  public static APISchoolAC fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APISchoolAC.class);
  }

  /**
   * Convert an instance of APISchoolAC to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

