/*
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APISchool20Full;
import org.openapitools.client.model.APISchoolList2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchoolsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchoolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchoolsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for schoolsGetAllSchools20
     * @param st Two character state (e.g. &#39;CA&#39;) - required (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param q Search term - note: will match school name or city (optional) (optional)
     * @param qSearchSchoolNameOnly For parameter &#39;q&#39;, only search school names instead of school and city (optional) (optional)
     * @param districtID Search for schools within this district (7 digit district id) (optional) (optional)
     * @param level Search for schools at this level. Valid values: &#39;Elementary&#39;, &#39;Middle&#39;, &#39;High&#39;, &#39;Alt&#39;, &#39;Public&#39;, &#39;Private&#39; (optional). &#39;Public&#39; returns all Elementary, Middle, High and Alternative schools (optional)
     * @param city Search for schools in this city (optional) (optional)
     * @param zip Search for schools in this 5-digit zip code (optional) (optional)
     * @param isMagnet True &#x3D; return only magnet schools, False &#x3D; return only non-magnet schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isCharter True &#x3D; return only charter schools, False &#x3D; return only non-charter schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isVirtual True &#x3D; return only virtual schools, False &#x3D; return only non-virtual schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isTitleI True &#x3D; return only Title I schools, False &#x3D; return only non-Title I schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isTitleISchoolwide True &#x3D; return only Title I school-wide schools, False &#x3D; return only non-Title I school-wide schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param nearLatitude Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. 44.982560) (optional) (Pro, Enterprise API levels only.) (optional)
     * @param nearLongitude Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. -124.289185) (optional) (Pro, Enterprise API levels only.) (optional)
     * @param nearAddress Search for schools within (distanceMiles) of this address. Example: &#39;123 Main St. AnyTown CA 90001&#39; (optional) (Pro, Enterprise API level only) IMPORTANT NOTE: If you have the lat/long of the address, use nearLatitude and nearLongitude instead for much faster response times (optional)
     * @param distanceMiles Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (Default 5 miles) (optional) (Pro, Enterprise API levels only) (optional)
     * @param boundaryLatitude Search for schools that include this (boundaryLatitude)/(boundaryLongitude) in its attendance boundary (e.g. 44.982560) (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit.) (optional)
     * @param boundaryLongitude Search for schools that include this (boundaryLatitude)/(boundaryLongitude) in its attendance boundary (e.g. -124.289185) (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit. (optional)
     * @param boundaryAddress Full U.S. address: flag returned schools that include this address in its attendance boundary. Example: &#39;123 Main St. AnyTown CA 90001&#39; (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit.) IMPORTANT NOTE: If you have the lat/long of the address, use boundaryLatitude and boundaryLongitude instead for much faster response times (optional)
     * @param isInBoundaryOnly Return only the schools that include given location (boundaryLatitude/boundaryLongitude) or (boundaryAddress) in its attendance boundary (Requires School Boundary API Plan add-on.) (optional)
     * @param boxLatitudeNW Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLongitudeNW Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLatitudeSE Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLongitudeSE Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of schools to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @param sortBy Sort list. Values are: schoolname, distance, rank. For descending order, precede with &#39;-&#39; i.e. -schoolname (optional, default: schoolname) (optional)
     * @param includeUnrankedSchoolsInRankSort If sortBy is &#39;rank&#39;, this boolean determines if schools with no rank are included in the result (optional, default: false) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schoolsGetAllSchools20Call(String st, String appID, String appKey, String q, Boolean qSearchSchoolNameOnly, String districtID, String level, String city, String zip, Boolean isMagnet, Boolean isCharter, Boolean isVirtual, Boolean isTitleI, Boolean isTitleISchoolwide, Double nearLatitude, Double nearLongitude, String nearAddress, Integer distanceMiles, Double boundaryLatitude, Double boundaryLongitude, String boundaryAddress, Boolean isInBoundaryOnly, Double boxLatitudeNW, Double boxLongitudeNW, Double boxLatitudeSE, Double boxLongitudeSE, Integer page, Integer perPage, String sortBy, Boolean includeUnrankedSchoolsInRankSort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2.0/schools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (st != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("st", st));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (qSearchSchoolNameOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qSearchSchoolNameOnly", qSearchSchoolNameOnly));
        }

        if (districtID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("districtID", districtID));
        }

        if (level != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("level", level));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (isMagnet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMagnet", isMagnet));
        }

        if (isCharter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isCharter", isCharter));
        }

        if (isVirtual != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isVirtual", isVirtual));
        }

        if (isTitleI != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isTitleI", isTitleI));
        }

        if (isTitleISchoolwide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isTitleISchoolwide", isTitleISchoolwide));
        }

        if (nearLatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nearLatitude", nearLatitude));
        }

        if (nearLongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nearLongitude", nearLongitude));
        }

        if (nearAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nearAddress", nearAddress));
        }

        if (distanceMiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceMiles", distanceMiles));
        }

        if (boundaryLatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boundaryLatitude", boundaryLatitude));
        }

        if (boundaryLongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boundaryLongitude", boundaryLongitude));
        }

        if (boundaryAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boundaryAddress", boundaryAddress));
        }

        if (isInBoundaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInBoundaryOnly", isInBoundaryOnly));
        }

        if (boxLatitudeNW != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boxLatitudeNW", boxLatitudeNW));
        }

        if (boxLongitudeNW != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boxLongitudeNW", boxLongitudeNW));
        }

        if (boxLatitudeSE != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boxLatitudeSE", boxLatitudeSE));
        }

        if (boxLongitudeSE != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boxLongitudeSE", boxLongitudeSE));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (includeUnrankedSchoolsInRankSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUnrankedSchoolsInRankSort", includeUnrankedSchoolsInRankSort));
        }

        if (appID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appID", appID));
        }

        if (appKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appKey", appKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schoolsGetAllSchools20ValidateBeforeCall(String st, String appID, String appKey, String q, Boolean qSearchSchoolNameOnly, String districtID, String level, String city, String zip, Boolean isMagnet, Boolean isCharter, Boolean isVirtual, Boolean isTitleI, Boolean isTitleISchoolwide, Double nearLatitude, Double nearLongitude, String nearAddress, Integer distanceMiles, Double boundaryLatitude, Double boundaryLongitude, String boundaryAddress, Boolean isInBoundaryOnly, Double boxLatitudeNW, Double boxLongitudeNW, Double boxLatitudeSE, Double boxLongitudeSE, Integer page, Integer perPage, String sortBy, Boolean includeUnrankedSchoolsInRankSort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'st' is set
        if (st == null) {
            throw new ApiException("Missing the required parameter 'st' when calling schoolsGetAllSchools20(Async)");
        }

        // verify the required parameter 'appID' is set
        if (appID == null) {
            throw new ApiException("Missing the required parameter 'appID' when calling schoolsGetAllSchools20(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling schoolsGetAllSchools20(Async)");
        }

        return schoolsGetAllSchools20Call(st, appID, appKey, q, qSearchSchoolNameOnly, districtID, level, city, zip, isMagnet, isCharter, isVirtual, isTitleI, isTitleISchoolwide, nearLatitude, nearLongitude, nearAddress, distanceMiles, boundaryLatitude, boundaryLongitude, boundaryAddress, isInBoundaryOnly, boxLatitudeNW, boxLongitudeNW, boxLatitudeSE, boxLongitudeSE, page, perPage, sortBy, includeUnrankedSchoolsInRankSort, _callback);

    }

    /**
     * Returns a list of schools
     * Search the SchoolDigger database for schools. You may use any combination of criteria as query parameters.
     * @param st Two character state (e.g. &#39;CA&#39;) - required (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param q Search term - note: will match school name or city (optional) (optional)
     * @param qSearchSchoolNameOnly For parameter &#39;q&#39;, only search school names instead of school and city (optional) (optional)
     * @param districtID Search for schools within this district (7 digit district id) (optional) (optional)
     * @param level Search for schools at this level. Valid values: &#39;Elementary&#39;, &#39;Middle&#39;, &#39;High&#39;, &#39;Alt&#39;, &#39;Public&#39;, &#39;Private&#39; (optional). &#39;Public&#39; returns all Elementary, Middle, High and Alternative schools (optional)
     * @param city Search for schools in this city (optional) (optional)
     * @param zip Search for schools in this 5-digit zip code (optional) (optional)
     * @param isMagnet True &#x3D; return only magnet schools, False &#x3D; return only non-magnet schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isCharter True &#x3D; return only charter schools, False &#x3D; return only non-charter schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isVirtual True &#x3D; return only virtual schools, False &#x3D; return only non-virtual schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isTitleI True &#x3D; return only Title I schools, False &#x3D; return only non-Title I schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isTitleISchoolwide True &#x3D; return only Title I school-wide schools, False &#x3D; return only non-Title I school-wide schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param nearLatitude Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. 44.982560) (optional) (Pro, Enterprise API levels only.) (optional)
     * @param nearLongitude Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. -124.289185) (optional) (Pro, Enterprise API levels only.) (optional)
     * @param nearAddress Search for schools within (distanceMiles) of this address. Example: &#39;123 Main St. AnyTown CA 90001&#39; (optional) (Pro, Enterprise API level only) IMPORTANT NOTE: If you have the lat/long of the address, use nearLatitude and nearLongitude instead for much faster response times (optional)
     * @param distanceMiles Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (Default 5 miles) (optional) (Pro, Enterprise API levels only) (optional)
     * @param boundaryLatitude Search for schools that include this (boundaryLatitude)/(boundaryLongitude) in its attendance boundary (e.g. 44.982560) (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit.) (optional)
     * @param boundaryLongitude Search for schools that include this (boundaryLatitude)/(boundaryLongitude) in its attendance boundary (e.g. -124.289185) (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit. (optional)
     * @param boundaryAddress Full U.S. address: flag returned schools that include this address in its attendance boundary. Example: &#39;123 Main St. AnyTown CA 90001&#39; (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit.) IMPORTANT NOTE: If you have the lat/long of the address, use boundaryLatitude and boundaryLongitude instead for much faster response times (optional)
     * @param isInBoundaryOnly Return only the schools that include given location (boundaryLatitude/boundaryLongitude) or (boundaryAddress) in its attendance boundary (Requires School Boundary API Plan add-on.) (optional)
     * @param boxLatitudeNW Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLongitudeNW Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLatitudeSE Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLongitudeSE Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of schools to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @param sortBy Sort list. Values are: schoolname, distance, rank. For descending order, precede with &#39;-&#39; i.e. -schoolname (optional, default: schoolname) (optional)
     * @param includeUnrankedSchoolsInRankSort If sortBy is &#39;rank&#39;, this boolean determines if schools with no rank are included in the result (optional, default: false) (optional)
     * @return APISchoolList2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APISchoolList2 schoolsGetAllSchools20(String st, String appID, String appKey, String q, Boolean qSearchSchoolNameOnly, String districtID, String level, String city, String zip, Boolean isMagnet, Boolean isCharter, Boolean isVirtual, Boolean isTitleI, Boolean isTitleISchoolwide, Double nearLatitude, Double nearLongitude, String nearAddress, Integer distanceMiles, Double boundaryLatitude, Double boundaryLongitude, String boundaryAddress, Boolean isInBoundaryOnly, Double boxLatitudeNW, Double boxLongitudeNW, Double boxLatitudeSE, Double boxLongitudeSE, Integer page, Integer perPage, String sortBy, Boolean includeUnrankedSchoolsInRankSort) throws ApiException {
        ApiResponse<APISchoolList2> localVarResp = schoolsGetAllSchools20WithHttpInfo(st, appID, appKey, q, qSearchSchoolNameOnly, districtID, level, city, zip, isMagnet, isCharter, isVirtual, isTitleI, isTitleISchoolwide, nearLatitude, nearLongitude, nearAddress, distanceMiles, boundaryLatitude, boundaryLongitude, boundaryAddress, isInBoundaryOnly, boxLatitudeNW, boxLongitudeNW, boxLatitudeSE, boxLongitudeSE, page, perPage, sortBy, includeUnrankedSchoolsInRankSort);
        return localVarResp.getData();
    }

    /**
     * Returns a list of schools
     * Search the SchoolDigger database for schools. You may use any combination of criteria as query parameters.
     * @param st Two character state (e.g. &#39;CA&#39;) - required (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param q Search term - note: will match school name or city (optional) (optional)
     * @param qSearchSchoolNameOnly For parameter &#39;q&#39;, only search school names instead of school and city (optional) (optional)
     * @param districtID Search for schools within this district (7 digit district id) (optional) (optional)
     * @param level Search for schools at this level. Valid values: &#39;Elementary&#39;, &#39;Middle&#39;, &#39;High&#39;, &#39;Alt&#39;, &#39;Public&#39;, &#39;Private&#39; (optional). &#39;Public&#39; returns all Elementary, Middle, High and Alternative schools (optional)
     * @param city Search for schools in this city (optional) (optional)
     * @param zip Search for schools in this 5-digit zip code (optional) (optional)
     * @param isMagnet True &#x3D; return only magnet schools, False &#x3D; return only non-magnet schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isCharter True &#x3D; return only charter schools, False &#x3D; return only non-charter schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isVirtual True &#x3D; return only virtual schools, False &#x3D; return only non-virtual schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isTitleI True &#x3D; return only Title I schools, False &#x3D; return only non-Title I schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isTitleISchoolwide True &#x3D; return only Title I school-wide schools, False &#x3D; return only non-Title I school-wide schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param nearLatitude Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. 44.982560) (optional) (Pro, Enterprise API levels only.) (optional)
     * @param nearLongitude Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. -124.289185) (optional) (Pro, Enterprise API levels only.) (optional)
     * @param nearAddress Search for schools within (distanceMiles) of this address. Example: &#39;123 Main St. AnyTown CA 90001&#39; (optional) (Pro, Enterprise API level only) IMPORTANT NOTE: If you have the lat/long of the address, use nearLatitude and nearLongitude instead for much faster response times (optional)
     * @param distanceMiles Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (Default 5 miles) (optional) (Pro, Enterprise API levels only) (optional)
     * @param boundaryLatitude Search for schools that include this (boundaryLatitude)/(boundaryLongitude) in its attendance boundary (e.g. 44.982560) (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit.) (optional)
     * @param boundaryLongitude Search for schools that include this (boundaryLatitude)/(boundaryLongitude) in its attendance boundary (e.g. -124.289185) (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit. (optional)
     * @param boundaryAddress Full U.S. address: flag returned schools that include this address in its attendance boundary. Example: &#39;123 Main St. AnyTown CA 90001&#39; (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit.) IMPORTANT NOTE: If you have the lat/long of the address, use boundaryLatitude and boundaryLongitude instead for much faster response times (optional)
     * @param isInBoundaryOnly Return only the schools that include given location (boundaryLatitude/boundaryLongitude) or (boundaryAddress) in its attendance boundary (Requires School Boundary API Plan add-on.) (optional)
     * @param boxLatitudeNW Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLongitudeNW Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLatitudeSE Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLongitudeSE Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of schools to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @param sortBy Sort list. Values are: schoolname, distance, rank. For descending order, precede with &#39;-&#39; i.e. -schoolname (optional, default: schoolname) (optional)
     * @param includeUnrankedSchoolsInRankSort If sortBy is &#39;rank&#39;, this boolean determines if schools with no rank are included in the result (optional, default: false) (optional)
     * @return ApiResponse&lt;APISchoolList2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APISchoolList2> schoolsGetAllSchools20WithHttpInfo(String st, String appID, String appKey, String q, Boolean qSearchSchoolNameOnly, String districtID, String level, String city, String zip, Boolean isMagnet, Boolean isCharter, Boolean isVirtual, Boolean isTitleI, Boolean isTitleISchoolwide, Double nearLatitude, Double nearLongitude, String nearAddress, Integer distanceMiles, Double boundaryLatitude, Double boundaryLongitude, String boundaryAddress, Boolean isInBoundaryOnly, Double boxLatitudeNW, Double boxLongitudeNW, Double boxLatitudeSE, Double boxLongitudeSE, Integer page, Integer perPage, String sortBy, Boolean includeUnrankedSchoolsInRankSort) throws ApiException {
        okhttp3.Call localVarCall = schoolsGetAllSchools20ValidateBeforeCall(st, appID, appKey, q, qSearchSchoolNameOnly, districtID, level, city, zip, isMagnet, isCharter, isVirtual, isTitleI, isTitleISchoolwide, nearLatitude, nearLongitude, nearAddress, distanceMiles, boundaryLatitude, boundaryLongitude, boundaryAddress, isInBoundaryOnly, boxLatitudeNW, boxLongitudeNW, boxLatitudeSE, boxLongitudeSE, page, perPage, sortBy, includeUnrankedSchoolsInRankSort, null);
        Type localVarReturnType = new TypeToken<APISchoolList2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of schools (asynchronously)
     * Search the SchoolDigger database for schools. You may use any combination of criteria as query parameters.
     * @param st Two character state (e.g. &#39;CA&#39;) - required (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param q Search term - note: will match school name or city (optional) (optional)
     * @param qSearchSchoolNameOnly For parameter &#39;q&#39;, only search school names instead of school and city (optional) (optional)
     * @param districtID Search for schools within this district (7 digit district id) (optional) (optional)
     * @param level Search for schools at this level. Valid values: &#39;Elementary&#39;, &#39;Middle&#39;, &#39;High&#39;, &#39;Alt&#39;, &#39;Public&#39;, &#39;Private&#39; (optional). &#39;Public&#39; returns all Elementary, Middle, High and Alternative schools (optional)
     * @param city Search for schools in this city (optional) (optional)
     * @param zip Search for schools in this 5-digit zip code (optional) (optional)
     * @param isMagnet True &#x3D; return only magnet schools, False &#x3D; return only non-magnet schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isCharter True &#x3D; return only charter schools, False &#x3D; return only non-charter schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isVirtual True &#x3D; return only virtual schools, False &#x3D; return only non-virtual schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isTitleI True &#x3D; return only Title I schools, False &#x3D; return only non-Title I schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param isTitleISchoolwide True &#x3D; return only Title I school-wide schools, False &#x3D; return only non-Title I school-wide schools (optional) (Pro, Enterprise API levels only) (optional)
     * @param nearLatitude Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. 44.982560) (optional) (Pro, Enterprise API levels only.) (optional)
     * @param nearLongitude Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. -124.289185) (optional) (Pro, Enterprise API levels only.) (optional)
     * @param nearAddress Search for schools within (distanceMiles) of this address. Example: &#39;123 Main St. AnyTown CA 90001&#39; (optional) (Pro, Enterprise API level only) IMPORTANT NOTE: If you have the lat/long of the address, use nearLatitude and nearLongitude instead for much faster response times (optional)
     * @param distanceMiles Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (Default 5 miles) (optional) (Pro, Enterprise API levels only) (optional)
     * @param boundaryLatitude Search for schools that include this (boundaryLatitude)/(boundaryLongitude) in its attendance boundary (e.g. 44.982560) (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit.) (optional)
     * @param boundaryLongitude Search for schools that include this (boundaryLatitude)/(boundaryLongitude) in its attendance boundary (e.g. -124.289185) (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit. (optional)
     * @param boundaryAddress Full U.S. address: flag returned schools that include this address in its attendance boundary. Example: &#39;123 Main St. AnyTown CA 90001&#39; (optional) (Requires School Boundary API Plan add-on. Calls with this parameter supplied will count toward your monthly call limit.) IMPORTANT NOTE: If you have the lat/long of the address, use boundaryLatitude and boundaryLongitude instead for much faster response times (optional)
     * @param isInBoundaryOnly Return only the schools that include given location (boundaryLatitude/boundaryLongitude) or (boundaryAddress) in its attendance boundary (Requires School Boundary API Plan add-on.) (optional)
     * @param boxLatitudeNW Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLongitudeNW Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLatitudeSE Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param boxLongitudeSE Search for schools within a &#39;box&#39; defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional) (optional)
     * @param page Page number to retrieve (optional, default: 1) (optional)
     * @param perPage Number of schools to retrieve on a page (50 max) (optional, default: 10) (optional)
     * @param sortBy Sort list. Values are: schoolname, distance, rank. For descending order, precede with &#39;-&#39; i.e. -schoolname (optional, default: schoolname) (optional)
     * @param includeUnrankedSchoolsInRankSort If sortBy is &#39;rank&#39;, this boolean determines if schools with no rank are included in the result (optional, default: false) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schoolsGetAllSchools20Async(String st, String appID, String appKey, String q, Boolean qSearchSchoolNameOnly, String districtID, String level, String city, String zip, Boolean isMagnet, Boolean isCharter, Boolean isVirtual, Boolean isTitleI, Boolean isTitleISchoolwide, Double nearLatitude, Double nearLongitude, String nearAddress, Integer distanceMiles, Double boundaryLatitude, Double boundaryLongitude, String boundaryAddress, Boolean isInBoundaryOnly, Double boxLatitudeNW, Double boxLongitudeNW, Double boxLatitudeSE, Double boxLongitudeSE, Integer page, Integer perPage, String sortBy, Boolean includeUnrankedSchoolsInRankSort, final ApiCallback<APISchoolList2> _callback) throws ApiException {

        okhttp3.Call localVarCall = schoolsGetAllSchools20ValidateBeforeCall(st, appID, appKey, q, qSearchSchoolNameOnly, districtID, level, city, zip, isMagnet, isCharter, isVirtual, isTitleI, isTitleISchoolwide, nearLatitude, nearLongitude, nearAddress, distanceMiles, boundaryLatitude, boundaryLongitude, boundaryAddress, isInBoundaryOnly, boxLatitudeNW, boxLongitudeNW, boxLatitudeSE, boxLongitudeSE, page, perPage, sortBy, includeUnrankedSchoolsInRankSort, _callback);
        Type localVarReturnType = new TypeToken<APISchoolList2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schoolsGetSchool20
     * @param id The 12 digit School ID (e.g. 064215006903) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schoolsGetSchool20Call(String id, String appID, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2.0/schools/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appID", appID));
        }

        if (appKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appKey", appKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schoolsGetSchool20ValidateBeforeCall(String id, String appID, String appKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling schoolsGetSchool20(Async)");
        }

        // verify the required parameter 'appID' is set
        if (appID == null) {
            throw new ApiException("Missing the required parameter 'appID' when calling schoolsGetSchool20(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling schoolsGetSchool20(Async)");
        }

        return schoolsGetSchool20Call(id, appID, appKey, _callback);

    }

    /**
     * Returns a detailed record for one school
     * Retrieve a school record from the SchoolDigger database
     * @param id The 12 digit School ID (e.g. 064215006903) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @return APISchool20Full
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APISchool20Full schoolsGetSchool20(String id, String appID, String appKey) throws ApiException {
        ApiResponse<APISchool20Full> localVarResp = schoolsGetSchool20WithHttpInfo(id, appID, appKey);
        return localVarResp.getData();
    }

    /**
     * Returns a detailed record for one school
     * Retrieve a school record from the SchoolDigger database
     * @param id The 12 digit School ID (e.g. 064215006903) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @return ApiResponse&lt;APISchool20Full&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APISchool20Full> schoolsGetSchool20WithHttpInfo(String id, String appID, String appKey) throws ApiException {
        okhttp3.Call localVarCall = schoolsGetSchool20ValidateBeforeCall(id, appID, appKey, null);
        Type localVarReturnType = new TypeToken<APISchool20Full>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a detailed record for one school (asynchronously)
     * Retrieve a school record from the SchoolDigger database
     * @param id The 12 digit School ID (e.g. 064215006903) (required)
     * @param appID Your API app id (required)
     * @param appKey Your API app key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schoolsGetSchool20Async(String id, String appID, String appKey, final ApiCallback<APISchool20Full> _callback) throws ApiException {

        okhttp3.Call localVarCall = schoolsGetSchool20ValidateBeforeCall(id, appID, appKey, _callback);
        Type localVarReturnType = new TypeToken<APISchool20Full>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
