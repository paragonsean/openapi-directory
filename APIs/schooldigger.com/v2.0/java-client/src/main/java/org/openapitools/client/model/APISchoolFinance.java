/*
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APISchoolFinance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:05.204966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APISchoolFinance {
  public static final String SERIALIZED_NAME_SPENDING_FEDERAL_NON_PERSONNEL = "spendingFederalNonPersonnel";
  @SerializedName(SERIALIZED_NAME_SPENDING_FEDERAL_NON_PERSONNEL)
  private Float spendingFederalNonPersonnel;

  public static final String SERIALIZED_NAME_SPENDING_FEDERAL_PERSONNEL = "spendingFederalPersonnel";
  @SerializedName(SERIALIZED_NAME_SPENDING_FEDERAL_PERSONNEL)
  private Float spendingFederalPersonnel;

  public static final String SERIALIZED_NAME_SPENDING_PER_STUDENT = "spendingPerStudent";
  @SerializedName(SERIALIZED_NAME_SPENDING_PER_STUDENT)
  private Float spendingPerStudent;

  public static final String SERIALIZED_NAME_SPENDING_PER_STUDENT_FEDERAL = "spendingPerStudentFederal";
  @SerializedName(SERIALIZED_NAME_SPENDING_PER_STUDENT_FEDERAL)
  private Float spendingPerStudentFederal;

  public static final String SERIALIZED_NAME_SPENDING_PER_STUDENT_STATE_LOCAL = "spendingPerStudentStateLocal";
  @SerializedName(SERIALIZED_NAME_SPENDING_PER_STUDENT_STATE_LOCAL)
  private Float spendingPerStudentStateLocal;

  public static final String SERIALIZED_NAME_SPENDING_STATE_LOCAL_NON_PERSONNEL = "spendingStateLocalNonPersonnel";
  @SerializedName(SERIALIZED_NAME_SPENDING_STATE_LOCAL_NON_PERSONNEL)
  private Float spendingStateLocalNonPersonnel;

  public static final String SERIALIZED_NAME_SPENDING_STATE_LOCAL_PERSONNEL = "spendingStateLocalPersonnel";
  @SerializedName(SERIALIZED_NAME_SPENDING_STATE_LOCAL_PERSONNEL)
  private Float spendingStateLocalPersonnel;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public APISchoolFinance() {
  }

  public APISchoolFinance spendingFederalNonPersonnel(Float spendingFederalNonPersonnel) {
    this.spendingFederalNonPersonnel = spendingFederalNonPersonnel;
    return this;
  }

  /**
   * Spending per student for Non-personnel at the Federal Level (Enterprise level only)
   * @return spendingFederalNonPersonnel
   */
  @javax.annotation.Nullable
  public Float getSpendingFederalNonPersonnel() {
    return spendingFederalNonPersonnel;
  }

  public void setSpendingFederalNonPersonnel(Float spendingFederalNonPersonnel) {
    this.spendingFederalNonPersonnel = spendingFederalNonPersonnel;
  }


  public APISchoolFinance spendingFederalPersonnel(Float spendingFederalPersonnel) {
    this.spendingFederalPersonnel = spendingFederalPersonnel;
    return this;
  }

  /**
   * Spending per student for Personnel at the Federal Level (Enterprise level only)
   * @return spendingFederalPersonnel
   */
  @javax.annotation.Nullable
  public Float getSpendingFederalPersonnel() {
    return spendingFederalPersonnel;
  }

  public void setSpendingFederalPersonnel(Float spendingFederalPersonnel) {
    this.spendingFederalPersonnel = spendingFederalPersonnel;
  }


  public APISchoolFinance spendingPerStudent(Float spendingPerStudent) {
    this.spendingPerStudent = spendingPerStudent;
    return this;
  }

  /**
   * Total spending per student from all funds (Pro or Enterprise level only)
   * @return spendingPerStudent
   */
  @javax.annotation.Nullable
  public Float getSpendingPerStudent() {
    return spendingPerStudent;
  }

  public void setSpendingPerStudent(Float spendingPerStudent) {
    this.spendingPerStudent = spendingPerStudent;
  }


  public APISchoolFinance spendingPerStudentFederal(Float spendingPerStudentFederal) {
    this.spendingPerStudentFederal = spendingPerStudentFederal;
    return this;
  }

  /**
   * Spending per student at the Federal Level (Enterprise level only)
   * @return spendingPerStudentFederal
   */
  @javax.annotation.Nullable
  public Float getSpendingPerStudentFederal() {
    return spendingPerStudentFederal;
  }

  public void setSpendingPerStudentFederal(Float spendingPerStudentFederal) {
    this.spendingPerStudentFederal = spendingPerStudentFederal;
  }


  public APISchoolFinance spendingPerStudentStateLocal(Float spendingPerStudentStateLocal) {
    this.spendingPerStudentStateLocal = spendingPerStudentStateLocal;
    return this;
  }

  /**
   * Spending per student at the State and Local Level (Enterprise level only)
   * @return spendingPerStudentStateLocal
   */
  @javax.annotation.Nullable
  public Float getSpendingPerStudentStateLocal() {
    return spendingPerStudentStateLocal;
  }

  public void setSpendingPerStudentStateLocal(Float spendingPerStudentStateLocal) {
    this.spendingPerStudentStateLocal = spendingPerStudentStateLocal;
  }


  public APISchoolFinance spendingStateLocalNonPersonnel(Float spendingStateLocalNonPersonnel) {
    this.spendingStateLocalNonPersonnel = spendingStateLocalNonPersonnel;
    return this;
  }

  /**
   * Spending per student for Non-personnel at the State and Local Level (Enterprise level only)
   * @return spendingStateLocalNonPersonnel
   */
  @javax.annotation.Nullable
  public Float getSpendingStateLocalNonPersonnel() {
    return spendingStateLocalNonPersonnel;
  }

  public void setSpendingStateLocalNonPersonnel(Float spendingStateLocalNonPersonnel) {
    this.spendingStateLocalNonPersonnel = spendingStateLocalNonPersonnel;
  }


  public APISchoolFinance spendingStateLocalPersonnel(Float spendingStateLocalPersonnel) {
    this.spendingStateLocalPersonnel = spendingStateLocalPersonnel;
    return this;
  }

  /**
   * Spending per student for Personnel at the State and Local Level (Enterprise level only)
   * @return spendingStateLocalPersonnel
   */
  @javax.annotation.Nullable
  public Float getSpendingStateLocalPersonnel() {
    return spendingStateLocalPersonnel;
  }

  public void setSpendingStateLocalPersonnel(Float spendingStateLocalPersonnel) {
    this.spendingStateLocalPersonnel = spendingStateLocalPersonnel;
  }


  public APISchoolFinance year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Fiscal School year (2021 &#x3D; 2020-2021 year)
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APISchoolFinance apISchoolFinance = (APISchoolFinance) o;
    return Objects.equals(this.spendingFederalNonPersonnel, apISchoolFinance.spendingFederalNonPersonnel) &&
        Objects.equals(this.spendingFederalPersonnel, apISchoolFinance.spendingFederalPersonnel) &&
        Objects.equals(this.spendingPerStudent, apISchoolFinance.spendingPerStudent) &&
        Objects.equals(this.spendingPerStudentFederal, apISchoolFinance.spendingPerStudentFederal) &&
        Objects.equals(this.spendingPerStudentStateLocal, apISchoolFinance.spendingPerStudentStateLocal) &&
        Objects.equals(this.spendingStateLocalNonPersonnel, apISchoolFinance.spendingStateLocalNonPersonnel) &&
        Objects.equals(this.spendingStateLocalPersonnel, apISchoolFinance.spendingStateLocalPersonnel) &&
        Objects.equals(this.year, apISchoolFinance.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spendingFederalNonPersonnel, spendingFederalPersonnel, spendingPerStudent, spendingPerStudentFederal, spendingPerStudentStateLocal, spendingStateLocalNonPersonnel, spendingStateLocalPersonnel, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APISchoolFinance {\n");
    sb.append("    spendingFederalNonPersonnel: ").append(toIndentedString(spendingFederalNonPersonnel)).append("\n");
    sb.append("    spendingFederalPersonnel: ").append(toIndentedString(spendingFederalPersonnel)).append("\n");
    sb.append("    spendingPerStudent: ").append(toIndentedString(spendingPerStudent)).append("\n");
    sb.append("    spendingPerStudentFederal: ").append(toIndentedString(spendingPerStudentFederal)).append("\n");
    sb.append("    spendingPerStudentStateLocal: ").append(toIndentedString(spendingPerStudentStateLocal)).append("\n");
    sb.append("    spendingStateLocalNonPersonnel: ").append(toIndentedString(spendingStateLocalNonPersonnel)).append("\n");
    sb.append("    spendingStateLocalPersonnel: ").append(toIndentedString(spendingStateLocalPersonnel)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("spendingFederalNonPersonnel");
    openapiFields.add("spendingFederalPersonnel");
    openapiFields.add("spendingPerStudent");
    openapiFields.add("spendingPerStudentFederal");
    openapiFields.add("spendingPerStudentStateLocal");
    openapiFields.add("spendingStateLocalNonPersonnel");
    openapiFields.add("spendingStateLocalPersonnel");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APISchoolFinance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APISchoolFinance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APISchoolFinance is not found in the empty JSON string", APISchoolFinance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APISchoolFinance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APISchoolFinance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APISchoolFinance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APISchoolFinance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APISchoolFinance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APISchoolFinance.class));

       return (TypeAdapter<T>) new TypeAdapter<APISchoolFinance>() {
           @Override
           public void write(JsonWriter out, APISchoolFinance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APISchoolFinance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APISchoolFinance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APISchoolFinance
   * @throws IOException if the JSON string is invalid with respect to APISchoolFinance
   */
  public static APISchoolFinance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APISchoolFinance.class);
  }

  /**
   * Convert an instance of APISchoolFinance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

