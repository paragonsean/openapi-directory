/*
 * SchoolDigger API V2.0
 * Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics
 *
 * The version of the OpenAPI document: v2.0
 * Contact: api@schooldigger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.APISchool2Summary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APISchoolListRank2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:05.204966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APISchoolListRank2 {
  public static final String SERIALIZED_NAME_NUMBER_OF_PAGES = "numberOfPages";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PAGES)
  private Integer numberOfPages;

  public static final String SERIALIZED_NAME_NUMBER_OF_SCHOOLS = "numberOfSchools";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_SCHOOLS)
  private Integer numberOfSchools;

  public static final String SERIALIZED_NAME_RANK_YEAR = "rankYear";
  @SerializedName(SERIALIZED_NAME_RANK_YEAR)
  private Integer rankYear;

  public static final String SERIALIZED_NAME_RANK_YEAR_COMPARE = "rankYearCompare";
  @SerializedName(SERIALIZED_NAME_RANK_YEAR_COMPARE)
  private Integer rankYearCompare;

  public static final String SERIALIZED_NAME_RANK_YEARS_AVAILABLE = "rankYearsAvailable";
  @SerializedName(SERIALIZED_NAME_RANK_YEARS_AVAILABLE)
  private List<Integer> rankYearsAvailable = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHOOL_LIST = "schoolList";
  @SerializedName(SERIALIZED_NAME_SCHOOL_LIST)
  private List<APISchool2Summary> schoolList = new ArrayList<>();

  public APISchoolListRank2() {
  }

  public APISchoolListRank2 numberOfPages(Integer numberOfPages) {
    this.numberOfPages = numberOfPages;
    return this;
  }

  /**
   * The total count of pages this ranking list based on given per_page value
   * @return numberOfPages
   */
  @javax.annotation.Nullable
  public Integer getNumberOfPages() {
    return numberOfPages;
  }

  public void setNumberOfPages(Integer numberOfPages) {
    this.numberOfPages = numberOfPages;
  }


  public APISchoolListRank2 numberOfSchools(Integer numberOfSchools) {
    this.numberOfSchools = numberOfSchools;
    return this;
  }

  /**
   * The total count of schools in this ranking list
   * @return numberOfSchools
   */
  @javax.annotation.Nullable
  public Integer getNumberOfSchools() {
    return numberOfSchools;
  }

  public void setNumberOfSchools(Integer numberOfSchools) {
    this.numberOfSchools = numberOfSchools;
  }


  public APISchoolListRank2 rankYear(Integer rankYear) {
    this.rankYear = rankYear;
    return this;
  }

  /**
   * Year this ranking list represents (2018 &#x3D; 2017-18)
   * @return rankYear
   */
  @javax.annotation.Nullable
  public Integer getRankYear() {
    return rankYear;
  }

  public void setRankYear(Integer rankYear) {
    this.rankYear = rankYear;
  }


  public APISchoolListRank2 rankYearCompare(Integer rankYearCompare) {
    this.rankYearCompare = rankYearCompare;
    return this;
  }

  /**
   * Year rankings returned for comparison (2018 &#x3D; 2017-18)
   * @return rankYearCompare
   */
  @javax.annotation.Nullable
  public Integer getRankYearCompare() {
    return rankYearCompare;
  }

  public void setRankYearCompare(Integer rankYearCompare) {
    this.rankYearCompare = rankYearCompare;
  }


  public APISchoolListRank2 rankYearsAvailable(List<Integer> rankYearsAvailable) {
    this.rankYearsAvailable = rankYearsAvailable;
    return this;
  }

  public APISchoolListRank2 addRankYearsAvailableItem(Integer rankYearsAvailableItem) {
    if (this.rankYearsAvailable == null) {
      this.rankYearsAvailable = new ArrayList<>();
    }
    this.rankYearsAvailable.add(rankYearsAvailableItem);
    return this;
  }

  /**
   * The years for which SchoolDigger rankings are available for this state and level
   * @return rankYearsAvailable
   */
  @javax.annotation.Nullable
  public List<Integer> getRankYearsAvailable() {
    return rankYearsAvailable;
  }

  public void setRankYearsAvailable(List<Integer> rankYearsAvailable) {
    this.rankYearsAvailable = rankYearsAvailable;
  }


  public APISchoolListRank2 schoolList(List<APISchool2Summary> schoolList) {
    this.schoolList = schoolList;
    return this;
  }

  public APISchoolListRank2 addSchoolListItem(APISchool2Summary schoolListItem) {
    if (this.schoolList == null) {
      this.schoolList = new ArrayList<>();
    }
    this.schoolList.add(schoolListItem);
    return this;
  }

  /**
   * The schools in the ranking list
   * @return schoolList
   */
  @javax.annotation.Nullable
  public List<APISchool2Summary> getSchoolList() {
    return schoolList;
  }

  public void setSchoolList(List<APISchool2Summary> schoolList) {
    this.schoolList = schoolList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APISchoolListRank2 apISchoolListRank2 = (APISchoolListRank2) o;
    return Objects.equals(this.numberOfPages, apISchoolListRank2.numberOfPages) &&
        Objects.equals(this.numberOfSchools, apISchoolListRank2.numberOfSchools) &&
        Objects.equals(this.rankYear, apISchoolListRank2.rankYear) &&
        Objects.equals(this.rankYearCompare, apISchoolListRank2.rankYearCompare) &&
        Objects.equals(this.rankYearsAvailable, apISchoolListRank2.rankYearsAvailable) &&
        Objects.equals(this.schoolList, apISchoolListRank2.schoolList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numberOfPages, numberOfSchools, rankYear, rankYearCompare, rankYearsAvailable, schoolList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APISchoolListRank2 {\n");
    sb.append("    numberOfPages: ").append(toIndentedString(numberOfPages)).append("\n");
    sb.append("    numberOfSchools: ").append(toIndentedString(numberOfSchools)).append("\n");
    sb.append("    rankYear: ").append(toIndentedString(rankYear)).append("\n");
    sb.append("    rankYearCompare: ").append(toIndentedString(rankYearCompare)).append("\n");
    sb.append("    rankYearsAvailable: ").append(toIndentedString(rankYearsAvailable)).append("\n");
    sb.append("    schoolList: ").append(toIndentedString(schoolList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numberOfPages");
    openapiFields.add("numberOfSchools");
    openapiFields.add("rankYear");
    openapiFields.add("rankYearCompare");
    openapiFields.add("rankYearsAvailable");
    openapiFields.add("schoolList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APISchoolListRank2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APISchoolListRank2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APISchoolListRank2 is not found in the empty JSON string", APISchoolListRank2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APISchoolListRank2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APISchoolListRank2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("rankYearsAvailable") != null && !jsonObj.get("rankYearsAvailable").isJsonNull() && !jsonObj.get("rankYearsAvailable").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rankYearsAvailable` to be an array in the JSON string but got `%s`", jsonObj.get("rankYearsAvailable").toString()));
      }
      if (jsonObj.get("schoolList") != null && !jsonObj.get("schoolList").isJsonNull()) {
        JsonArray jsonArrayschoolList = jsonObj.getAsJsonArray("schoolList");
        if (jsonArrayschoolList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("schoolList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `schoolList` to be an array in the JSON string but got `%s`", jsonObj.get("schoolList").toString()));
          }

          // validate the optional field `schoolList` (array)
          for (int i = 0; i < jsonArrayschoolList.size(); i++) {
            APISchool2Summary.validateJsonElement(jsonArrayschoolList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APISchoolListRank2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APISchoolListRank2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APISchoolListRank2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APISchoolListRank2.class));

       return (TypeAdapter<T>) new TypeAdapter<APISchoolListRank2>() {
           @Override
           public void write(JsonWriter out, APISchoolListRank2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APISchoolListRank2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APISchoolListRank2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APISchoolListRank2
   * @throws IOException if the JSON string is invalid with respect to APISchoolListRank2
   */
  public static APISchoolListRank2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APISchoolListRank2.class);
  }

  /**
   * Convert an instance of APISchoolListRank2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

