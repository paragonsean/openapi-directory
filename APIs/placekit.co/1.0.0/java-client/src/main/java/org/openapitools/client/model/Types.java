/*
 * PlaceKit API Reference
 * PlaceKit OpenAPI Specifications ([repository](https://github.com/placekit/api-reference))
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets types
 */
@JsonAdapter(Types.Adapter.class)
public enum Types {
  
  AIRPORT("airport"),
  
  _AIRPORT("-airport"),
  
  BUS("bus"),
  
  _BUS("-bus"),
  
  CITY("city"),
  
  _CITY("-city"),
  
  COUNTRY("country"),
  
  _COUNTRY("-country"),
  
  STREET("street"),
  
  _STREET("-street"),
  
  TOURISM("tourism"),
  
  _TOURISM("-tourism"),
  
  TOWNHALL("townhall"),
  
  _TOWNHALL("-townhall"),
  
  TRAIN("train"),
  
  _TRAIN("-train");

  private String value;

  Types(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Types fromValue(String value) {
    for (Types b : Types.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Types> {
    @Override
    public void write(final JsonWriter jsonWriter, final Types enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Types read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Types.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Types.fromValue(value);
  }
}

