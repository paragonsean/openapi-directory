/**
 * PlaceKit API Reference
 * PlaceKit OpenAPI Specifications ([repository](https://github.com/placekit/api-reference))
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidationError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidationError::OAIValidationError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidationError::OAIValidationError() {
    this->initializeModel();
}

OAIValidationError::~OAIValidationError() {}

void OAIValidationError::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_msg_isSet = false;
    m_msg_isValid = false;

    m_param_isSet = false;
    m_param_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIValidationError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidationError::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_msg_isValid = ::OpenAPI::fromJsonValue(m_msg, json[QString("msg")]);
    m_msg_isSet = !json[QString("msg")].isNull() && m_msg_isValid;

    m_param_isValid = ::OpenAPI::fromJsonValue(m_param, json[QString("param")]);
    m_param_isSet = !json[QString("param")].isNull() && m_param_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIValidationError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidationError::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_msg_isSet) {
        obj.insert(QString("msg"), ::OpenAPI::toJsonValue(m_msg));
    }
    if (m_param_isSet) {
        obj.insert(QString("param"), ::OpenAPI::toJsonValue(m_param));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIValidationError::getLocation() const {
    return m_location;
}
void OAIValidationError::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIValidationError::is_location_Set() const{
    return m_location_isSet;
}

bool OAIValidationError::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIValidationError::getMsg() const {
    return m_msg;
}
void OAIValidationError::setMsg(const QString &msg) {
    m_msg = msg;
    m_msg_isSet = true;
}

bool OAIValidationError::is_msg_Set() const{
    return m_msg_isSet;
}

bool OAIValidationError::is_msg_Valid() const{
    return m_msg_isValid;
}

QString OAIValidationError::getParam() const {
    return m_param;
}
void OAIValidationError::setParam(const QString &param) {
    m_param = param;
    m_param_isSet = true;
}

bool OAIValidationError::is_param_Set() const{
    return m_param_isSet;
}

bool OAIValidationError::is_param_Valid() const{
    return m_param_isValid;
}

QString OAIValidationError::getValue() const {
    return m_value;
}
void OAIValidationError::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIValidationError::is_value_Set() const{
    return m_value_isSet;
}

bool OAIValidationError::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIValidationError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_param_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidationError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
