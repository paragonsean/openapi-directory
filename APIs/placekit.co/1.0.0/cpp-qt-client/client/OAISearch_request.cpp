/**
 * PlaceKit API Reference
 * PlaceKit OpenAPI Specifications ([repository](https://github.com/placekit/api-reference))
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_request::OAISearch_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_request::OAISearch_request() {
    this->initializeModel();
}

OAISearch_request::~OAISearch_request() {}

void OAISearch_request::initializeModel() {

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_country_by_ip_isSet = false;
    m_country_by_ip_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAISearch_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_request::fromJsonObject(QJsonObject json) {

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_country_by_ip_isValid = ::OpenAPI::fromJsonValue(m_country_by_ip, json[QString("countryByIP")]);
    m_country_by_ip_isSet = !json[QString("countryByIP")].isNull() && m_country_by_ip_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAISearch_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_request::asJsonObject() const {
    QJsonObject obj;
    if (m_coordinates_isSet) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_country_by_ip_isSet) {
        obj.insert(QString("countryByIP"), ::OpenAPI::toJsonValue(m_country_by_ip));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

QString OAISearch_request::getCoordinates() const {
    return m_coordinates;
}
void OAISearch_request::setCoordinates(const QString &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAISearch_request::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAISearch_request::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

QList<QString> OAISearch_request::getCountries() const {
    return m_countries;
}
void OAISearch_request::setCountries(const QList<QString> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAISearch_request::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAISearch_request::is_countries_Valid() const{
    return m_countries_isValid;
}

bool OAISearch_request::isCountryByIp() const {
    return m_country_by_ip;
}
void OAISearch_request::setCountryByIp(const bool &country_by_ip) {
    m_country_by_ip = country_by_ip;
    m_country_by_ip_isSet = true;
}

bool OAISearch_request::is_country_by_ip_Set() const{
    return m_country_by_ip_isSet;
}

bool OAISearch_request::is_country_by_ip_Valid() const{
    return m_country_by_ip_isValid;
}

QString OAISearch_request::getLanguage() const {
    return m_language;
}
void OAISearch_request::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISearch_request::is_language_Set() const{
    return m_language_isSet;
}

bool OAISearch_request::is_language_Valid() const{
    return m_language_isValid;
}

qint32 OAISearch_request::getMaxResults() const {
    return m_max_results;
}
void OAISearch_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearch_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearch_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QList<OAITypes> OAISearch_request::getTypes() const {
    return m_types;
}
void OAISearch_request::setTypes(const QList<OAITypes> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAISearch_request::is_types_Set() const{
    return m_types_isSet;
}

bool OAISearch_request::is_types_Valid() const{
    return m_types_isValid;
}

QString OAISearch_request::getQuery() const {
    return m_query;
}
void OAISearch_request::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISearch_request::is_query_Set() const{
    return m_query_isSet;
}

bool OAISearch_request::is_query_Valid() const{
    return m_query_isValid;
}

bool OAISearch_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coordinates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_by_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
