/**
 * PlaceKit API Reference
 * PlaceKit OpenAPI Specifications ([repository](https://github.com/placekit/api-reference))
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntity::OAIEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntity::OAIEntity() {
    this->initializeModel();
}

OAIEntity::~OAIEntity() {}

void OAIEntity::initializeModel() {

    m_administrative_isSet = false;
    m_administrative_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_countrycode_isSet = false;
    m_countrycode_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_highlight_isSet = false;
    m_highlight_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_population_isSet = false;
    m_population_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_zipcode_isSet = false;
    m_zipcode_isValid = false;
}

void OAIEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntity::fromJsonObject(QJsonObject json) {

    m_administrative_isValid = ::OpenAPI::fromJsonValue(m_administrative, json[QString("administrative")]);
    m_administrative_isSet = !json[QString("administrative")].isNull() && m_administrative_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_countrycode_isValid = ::OpenAPI::fromJsonValue(m_countrycode, json[QString("countrycode")]);
    m_countrycode_isSet = !json[QString("countrycode")].isNull() && m_countrycode_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_highlight_isValid = ::OpenAPI::fromJsonValue(m_highlight, json[QString("highlight")]);
    m_highlight_isSet = !json[QString("highlight")].isNull() && m_highlight_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_population_isValid = ::OpenAPI::fromJsonValue(m_population, json[QString("population")]);
    m_population_isSet = !json[QString("population")].isNull() && m_population_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_zipcode_isValid = ::OpenAPI::fromJsonValue(m_zipcode, json[QString("zipcode")]);
    m_zipcode_isSet = !json[QString("zipcode")].isNull() && m_zipcode_isValid;
}

QString OAIEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_administrative_isSet) {
        obj.insert(QString("administrative"), ::OpenAPI::toJsonValue(m_administrative));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_countrycode_isSet) {
        obj.insert(QString("countrycode"), ::OpenAPI::toJsonValue(m_countrycode));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_highlight_isSet) {
        obj.insert(QString("highlight"), ::OpenAPI::toJsonValue(m_highlight));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_population_isSet) {
        obj.insert(QString("population"), ::OpenAPI::toJsonValue(m_population));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_zipcode.size() > 0) {
        obj.insert(QString("zipcode"), ::OpenAPI::toJsonValue(m_zipcode));
    }
    return obj;
}

QString OAIEntity::getAdministrative() const {
    return m_administrative;
}
void OAIEntity::setAdministrative(const QString &administrative) {
    m_administrative = administrative;
    m_administrative_isSet = true;
}

bool OAIEntity::is_administrative_Set() const{
    return m_administrative_isSet;
}

bool OAIEntity::is_administrative_Valid() const{
    return m_administrative_isValid;
}

QString OAIEntity::getCity() const {
    return m_city;
}
void OAIEntity::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIEntity::is_city_Set() const{
    return m_city_isSet;
}

bool OAIEntity::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIEntity::getCountry() const {
    return m_country;
}
void OAIEntity::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIEntity::is_country_Set() const{
    return m_country_isSet;
}

bool OAIEntity::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIEntity::getCountrycode() const {
    return m_countrycode;
}
void OAIEntity::setCountrycode(const QString &countrycode) {
    m_countrycode = countrycode;
    m_countrycode_isSet = true;
}

bool OAIEntity::is_countrycode_Set() const{
    return m_countrycode_isSet;
}

bool OAIEntity::is_countrycode_Valid() const{
    return m_countrycode_isValid;
}

QString OAIEntity::getCounty() const {
    return m_county;
}
void OAIEntity::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIEntity::is_county_Set() const{
    return m_county_isSet;
}

bool OAIEntity::is_county_Valid() const{
    return m_county_isValid;
}

QString OAIEntity::getHighlight() const {
    return m_highlight;
}
void OAIEntity::setHighlight(const QString &highlight) {
    m_highlight = highlight;
    m_highlight_isSet = true;
}

bool OAIEntity::is_highlight_Set() const{
    return m_highlight_isSet;
}

bool OAIEntity::is_highlight_Valid() const{
    return m_highlight_isValid;
}

double OAIEntity::getLat() const {
    return m_lat;
}
void OAIEntity::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIEntity::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIEntity::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIEntity::getLng() const {
    return m_lng;
}
void OAIEntity::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIEntity::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIEntity::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIEntity::getName() const {
    return m_name;
}
void OAIEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEntity::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIEntity::getPopulation() const {
    return m_population;
}
void OAIEntity::setPopulation(const qint32 &population) {
    m_population = population;
    m_population_isSet = true;
}

bool OAIEntity::is_population_Set() const{
    return m_population_isSet;
}

bool OAIEntity::is_population_Valid() const{
    return m_population_isValid;
}

QString OAIEntity::getType() const {
    return m_type;
}
void OAIEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEntity::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIEntity::getZipcode() const {
    return m_zipcode;
}
void OAIEntity::setZipcode(const QList<QString> &zipcode) {
    m_zipcode = zipcode;
    m_zipcode_isSet = true;
}

bool OAIEntity::is_zipcode_Set() const{
    return m_zipcode_isSet;
}

bool OAIEntity::is_zipcode_Valid() const{
    return m_zipcode_isValid;
}

bool OAIEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administrative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_countrycode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_population_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zipcode.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
