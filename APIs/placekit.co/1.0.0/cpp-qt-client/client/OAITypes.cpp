/**
 * PlaceKit API Reference
 * PlaceKit OpenAPI Specifications ([repository](https://github.com/placekit/api-reference))
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypes::OAITypes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypes::OAITypes() {
    this->initializeModel();
}

OAITypes::~OAITypes() {}

void OAITypes::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITypes::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITypes::fromJson(QString jsonString) {
    
    if ( jsonString.compare("airport", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::AIRPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("-airport", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::_AIRPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bus", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::BUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("-bus", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::_BUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("city", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::CITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("-city", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::_CITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("country", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::COUNTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("-country", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::_COUNTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("street", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::STREET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("-street", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::_STREET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tourism", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::TOURISM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("-tourism", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::_TOURISM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("townhall", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::TOWNHALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("-townhall", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::_TOWNHALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("train", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::TRAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("-train", Qt::CaseInsensitive) == 0) {
        m_value = eOAITypes::_TRAIN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITypes::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITypes::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITypes::AIRPORT:
            val = "airport";
            break;
        case eOAITypes::_AIRPORT:
            val = "-airport";
            break;
        case eOAITypes::BUS:
            val = "bus";
            break;
        case eOAITypes::_BUS:
            val = "-bus";
            break;
        case eOAITypes::CITY:
            val = "city";
            break;
        case eOAITypes::_CITY:
            val = "-city";
            break;
        case eOAITypes::COUNTRY:
            val = "country";
            break;
        case eOAITypes::_COUNTRY:
            val = "-country";
            break;
        case eOAITypes::STREET:
            val = "street";
            break;
        case eOAITypes::_STREET:
            val = "-street";
            break;
        case eOAITypes::TOURISM:
            val = "tourism";
            break;
        case eOAITypes::_TOURISM:
            val = "-tourism";
            break;
        case eOAITypes::TOWNHALL:
            val = "townhall";
            break;
        case eOAITypes::_TOWNHALL:
            val = "-townhall";
            break;
        case eOAITypes::TRAIN:
            val = "train";
            break;
        case eOAITypes::_TRAIN:
            val = "-train";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITypes::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITypes::eOAITypes OAITypes::getValue() const {
    return m_value;
}

void OAITypes::setValue(const OAITypes::eOAITypes& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITypes::isSet() const {
    
    return m_value_isSet;
}

bool OAITypes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
