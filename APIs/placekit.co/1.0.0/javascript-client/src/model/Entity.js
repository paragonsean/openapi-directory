/**
 * PlaceKit API Reference
 * PlaceKit OpenAPI Specifications ([repository](https://github.com/placekit/api-reference))
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Entity model module.
 * @module model/Entity
 * @version 1.0.0
 */
class Entity {
    /**
     * Constructs a new <code>Entity</code>.
     * @alias module:model/Entity
     */
    constructor() { 
        
        Entity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Entity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Entity} obj Optional instance to populate.
     * @return {module:model/Entity} The populated <code>Entity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Entity();

            if (data.hasOwnProperty('administrative')) {
                obj['administrative'] = ApiClient.convertToType(data['administrative'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('countrycode')) {
                obj['countrycode'] = ApiClient.convertToType(data['countrycode'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('highlight')) {
                obj['highlight'] = ApiClient.convertToType(data['highlight'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('population')) {
                obj['population'] = ApiClient.convertToType(data['population'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('zipcode')) {
                obj['zipcode'] = ApiClient.convertToType(data['zipcode'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Entity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Entity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['administrative'] && !(typeof data['administrative'] === 'string' || data['administrative'] instanceof String)) {
            throw new Error("Expected the field `administrative` to be a primitive type in the JSON string but got " + data['administrative']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['countrycode'] && !(typeof data['countrycode'] === 'string' || data['countrycode'] instanceof String)) {
            throw new Error("Expected the field `countrycode` to be a primitive type in the JSON string but got " + data['countrycode']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['highlight'] && !(typeof data['highlight'] === 'string' || data['highlight'] instanceof String)) {
            throw new Error("Expected the field `highlight` to be a primitive type in the JSON string but got " + data['highlight']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['zipcode'])) {
            throw new Error("Expected the field `zipcode` to be an array in the JSON data but got " + data['zipcode']);
        }

        return true;
    }


}



/**
 * Administrative name (region).
 * @member {String} administrative
 */
Entity.prototype['administrative'] = undefined;

/**
 * City name.
 * @member {String} city
 */
Entity.prototype['city'] = undefined;

/**
 * Country name.
 * @member {String} country
 */
Entity.prototype['country'] = undefined;

/**
 * [Two-letter ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). 
 * @member {String} countrycode
 */
Entity.prototype['countrycode'] = undefined;

/**
 * County name (department).
 * @member {String} county
 */
Entity.prototype['county'] = undefined;

/**
 * Name of the current entity with highlighted matched words.
 * @member {String} highlight
 */
Entity.prototype['highlight'] = undefined;

/**
 * Latitude.
 * @member {Number} lat
 */
Entity.prototype['lat'] = undefined;

/**
 * Longitude.
 * @member {Number} lng
 */
Entity.prototype['lng'] = undefined;

/**
 * Name of the current entity.
 * @member {String} name
 */
Entity.prototype['name'] = undefined;

/**
 * Population number of the entity city.
 * @member {Number} population
 */
Entity.prototype['population'] = undefined;

/**
 * Type of the entity.
 * @member {module:model/Entity.TypeEnum} type
 */
Entity.prototype['type'] = undefined;

/**
 * Postcodes associated with the entity.
 * @member {Array.<String>} zipcode
 */
Entity.prototype['zipcode'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Entity['TypeEnum'] = {

    /**
     * value: "airport"
     * @const
     */
    "airport": "airport",

    /**
     * value: "bus"
     * @const
     */
    "bus": "bus",

    /**
     * value: "city"
     * @const
     */
    "city": "city",

    /**
     * value: "country"
     * @const
     */
    "country": "country",

    /**
     * value: "street"
     * @const
     */
    "street": "street",

    /**
     * value: "tourism"
     * @const
     */
    "tourism": "tourism",

    /**
     * value: "townhall"
     * @const
     */
    "townhall": "townhall",

    /**
     * value: "train"
     * @const
     */
    "train": "train"
};



export default Entity;

