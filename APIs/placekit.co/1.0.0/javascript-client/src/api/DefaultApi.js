/**
 * PlaceKit API Reference
 * PlaceKit OpenAPI Specifications ([repository](https://github.com/placekit/api-reference))
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Results from '../model/Results';
import ReverseRequest from '../model/ReverseRequest';
import SearchRequest from '../model/SearchRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reverse operation.
     * @callback module:api/DefaultApi~reverseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Results} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverse geocoding
     * Performs a reverse geocoding search.  It will return the closest results around `coordinates`.\\ If `coordinates` are not set, it will use the user's IP to approximate its coordinates but results will be less accurate (city level accuracy instead of street level accuracy). 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReverseRequest} [payload] Request parameters
     * @param {module:api/DefaultApi~reverseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Results}
     */
    reverse(opts, callback) {
      opts = opts || {};
      let postBody = opts['payload'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Results;
      return this.apiClient.callApi(
        '/reverse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/DefaultApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Results} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for addresses
     * Performs a forward geocoding search.  It will return results around `coordinates` (if provided) and the best matching textual relevance.  **It is highly recommended** to set the `countries` parameter with the country you need results from for the best accuracy and revelance possible. 
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchRequest} [payload] Request parameters
     * @param {module:api/DefaultApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Results}
     */
    search(opts, callback) {
      opts = opts || {};
      let postBody = opts['payload'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Results;
      return this.apiClient.callApi(
        '/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
