# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.types import Types
from openapi_server import util


class ReverseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coordinates: str=None, countries: List[str]=None, country_by_ip: bool=True, language: str=None, max_results: int=5, types: List[Types]=None):
        """ReverseRequest - a model defined in OpenAPI

        :param coordinates: The coordinates of this ReverseRequest.
        :param countries: The countries of this ReverseRequest.
        :param country_by_ip: The country_by_ip of this ReverseRequest.
        :param language: The language of this ReverseRequest.
        :param max_results: The max_results of this ReverseRequest.
        :param types: The types of this ReverseRequest.
        """
        self.openapi_types = {
            'coordinates': str,
            'countries': List[str],
            'country_by_ip': bool,
            'language': str,
            'max_results': int,
            'types': List[Types]
        }

        self.attribute_map = {
            'coordinates': 'coordinates',
            'countries': 'countries',
            'country_by_ip': 'countryByIP',
            'language': 'language',
            'max_results': 'maxResults',
            'types': 'types'
        }

        self._coordinates = coordinates
        self._countries = countries
        self._country_by_ip = country_by_ip
        self._language = language
        self._max_results = max_results
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReverseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reverse_request of this ReverseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coordinates(self):
        """Gets the coordinates of this ReverseRequest.

        GPS coordinates latitude and longitude.\\ Used to improve relevancy of results around the given area. 

        :return: The coordinates of this ReverseRequest.
        :rtype: str
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this ReverseRequest.

        GPS coordinates latitude and longitude.\\ Used to improve relevancy of results around the given area. 

        :param coordinates: The coordinates of this ReverseRequest.
        :type coordinates: str
        """

        self._coordinates = coordinates

    @property
    def countries(self):
        """Gets the countries of this ReverseRequest.

        Array of [two-letter ISO 3166-1 alpha-2 country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\ Limit the results to given countries.\\ Select only one country for the best results. 

        :return: The countries of this ReverseRequest.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this ReverseRequest.

        Array of [two-letter ISO 3166-1 alpha-2 country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\ Limit the results to given countries.\\ Select only one country for the best results. 

        :param countries: The countries of this ReverseRequest.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def country_by_ip(self):
        """Gets the country_by_ip of this ReverseRequest.

        Automatically select the country to search in via the user IP's detected location.\\ Returned results will be coming from the user's country's IP.\\ If set to `true`, the parameter `countries` acts as a fallback. 

        :return: The country_by_ip of this ReverseRequest.
        :rtype: bool
        """
        return self._country_by_ip

    @country_by_ip.setter
    def country_by_ip(self, country_by_ip):
        """Sets the country_by_ip of this ReverseRequest.

        Automatically select the country to search in via the user IP's detected location.\\ Returned results will be coming from the user's country's IP.\\ If set to `true`, the parameter `countries` acts as a fallback. 

        :param country_by_ip: The country_by_ip of this ReverseRequest.
        :type country_by_ip: bool
        """

        self._country_by_ip = country_by_ip

    @property
    def language(self):
        """Gets the language of this ReverseRequest.

        [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\\ Default results are in their original language.\\ By setting this parameter, you can change the language of the results, if the translation is available.\\ Contact us if you need other languages. 

        :return: The language of this ReverseRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ReverseRequest.

        [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\\ Default results are in their original language.\\ By setting this parameter, you can change the language of the results, if the translation is available.\\ Contact us if you need other languages. 

        :param language: The language of this ReverseRequest.
        :type language: str
        """
        allowed_values = ["en", "fr"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def max_results(self):
        """Gets the max_results of this ReverseRequest.

        Maximum number of results to return.

        :return: The max_results of this ReverseRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ReverseRequest.

        Maximum number of results to return.

        :param max_results: The max_results of this ReverseRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 20:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `20`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def types(self):
        """Gets the types of this ReverseRequest.

        Select the types of record to return.\\ Prepend with `-` to omit a type.\\ Returns all types by default. 

        :return: The types of this ReverseRequest.
        :rtype: List[Types]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this ReverseRequest.

        Select the types of record to return.\\ Prepend with `-` to omit a type.\\ Returns all types by default. 

        :param types: The types of this ReverseRequest.
        :type types: List[Types]
        """

        self._types = types
