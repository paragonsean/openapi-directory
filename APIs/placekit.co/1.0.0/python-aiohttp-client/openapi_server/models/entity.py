# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Entity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrative: str=None, city: str=None, country: str=None, countrycode: str=None, county: str=None, highlight: str=None, lat: float=None, lng: float=None, name: str=None, population: int=None, type: str=None, zipcode: List[str]=None):
        """Entity - a model defined in OpenAPI

        :param administrative: The administrative of this Entity.
        :param city: The city of this Entity.
        :param country: The country of this Entity.
        :param countrycode: The countrycode of this Entity.
        :param county: The county of this Entity.
        :param highlight: The highlight of this Entity.
        :param lat: The lat of this Entity.
        :param lng: The lng of this Entity.
        :param name: The name of this Entity.
        :param population: The population of this Entity.
        :param type: The type of this Entity.
        :param zipcode: The zipcode of this Entity.
        """
        self.openapi_types = {
            'administrative': str,
            'city': str,
            'country': str,
            'countrycode': str,
            'county': str,
            'highlight': str,
            'lat': float,
            'lng': float,
            'name': str,
            'population': int,
            'type': str,
            'zipcode': List[str]
        }

        self.attribute_map = {
            'administrative': 'administrative',
            'city': 'city',
            'country': 'country',
            'countrycode': 'countrycode',
            'county': 'county',
            'highlight': 'highlight',
            'lat': 'lat',
            'lng': 'lng',
            'name': 'name',
            'population': 'population',
            'type': 'type',
            'zipcode': 'zipcode'
        }

        self._administrative = administrative
        self._city = city
        self._country = country
        self._countrycode = countrycode
        self._county = county
        self._highlight = highlight
        self._lat = lat
        self._lng = lng
        self._name = name
        self._population = population
        self._type = type
        self._zipcode = zipcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The entity of this Entity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrative(self):
        """Gets the administrative of this Entity.

        Administrative name (region).

        :return: The administrative of this Entity.
        :rtype: str
        """
        return self._administrative

    @administrative.setter
    def administrative(self, administrative):
        """Sets the administrative of this Entity.

        Administrative name (region).

        :param administrative: The administrative of this Entity.
        :type administrative: str
        """

        self._administrative = administrative

    @property
    def city(self):
        """Gets the city of this Entity.

        City name.

        :return: The city of this Entity.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Entity.

        City name.

        :param city: The city of this Entity.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Entity.

        Country name.

        :return: The country of this Entity.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Entity.

        Country name.

        :param country: The country of this Entity.
        :type country: str
        """

        self._country = country

    @property
    def countrycode(self):
        """Gets the countrycode of this Entity.

        [Two-letter ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). 

        :return: The countrycode of this Entity.
        :rtype: str
        """
        return self._countrycode

    @countrycode.setter
    def countrycode(self, countrycode):
        """Sets the countrycode of this Entity.

        [Two-letter ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). 

        :param countrycode: The countrycode of this Entity.
        :type countrycode: str
        """

        self._countrycode = countrycode

    @property
    def county(self):
        """Gets the county of this Entity.

        County name (department).

        :return: The county of this Entity.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Entity.

        County name (department).

        :param county: The county of this Entity.
        :type county: str
        """

        self._county = county

    @property
    def highlight(self):
        """Gets the highlight of this Entity.

        Name of the current entity with highlighted matched words.

        :return: The highlight of this Entity.
        :rtype: str
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this Entity.

        Name of the current entity with highlighted matched words.

        :param highlight: The highlight of this Entity.
        :type highlight: str
        """

        self._highlight = highlight

    @property
    def lat(self):
        """Gets the lat of this Entity.

        Latitude.

        :return: The lat of this Entity.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Entity.

        Latitude.

        :param lat: The lat of this Entity.
        :type lat: float
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this Entity.

        Longitude.

        :return: The lng of this Entity.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this Entity.

        Longitude.

        :param lng: The lng of this Entity.
        :type lng: float
        """

        self._lng = lng

    @property
    def name(self):
        """Gets the name of this Entity.

        Name of the current entity.

        :return: The name of this Entity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Entity.

        Name of the current entity.

        :param name: The name of this Entity.
        :type name: str
        """

        self._name = name

    @property
    def population(self):
        """Gets the population of this Entity.

        Population number of the entity city.

        :return: The population of this Entity.
        :rtype: int
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this Entity.

        Population number of the entity city.

        :param population: The population of this Entity.
        :type population: int
        """

        self._population = population

    @property
    def type(self):
        """Gets the type of this Entity.

        Type of the entity.

        :return: The type of this Entity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entity.

        Type of the entity.

        :param type: The type of this Entity.
        :type type: str
        """
        allowed_values = ["airport", "bus", "city", "country", "street", "tourism", "townhall", "train"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def zipcode(self):
        """Gets the zipcode of this Entity.

        Postcodes associated with the entity.

        :return: The zipcode of this Entity.
        :rtype: List[str]
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this Entity.

        Postcodes associated with the entity.

        :param zipcode: The zipcode of this Entity.
        :type zipcode: List[str]
        """

        self._zipcode = zipcode
