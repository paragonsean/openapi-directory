/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBurnTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBurnTokenRequest::OAIBurnTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBurnTokenRequest::OAIBurnTokenRequest() {
    this->initializeModel();
}

OAIBurnTokenRequest::~OAIBurnTokenRequest() {}

void OAIBurnTokenRequest::initializeModel() {

    m_burn_isSet = false;
    m_burn_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_transfer_isSet = false;
    m_transfer_isValid = false;
}

void OAIBurnTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBurnTokenRequest::fromJsonObject(QJsonObject json) {

    m_burn_isValid = ::OpenAPI::fromJsonValue(m_burn, json[QString("burn")]);
    m_burn_isSet = !json[QString("burn")].isNull() && m_burn_isValid;

    m_fee_isValid = ::OpenAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_transfer_isValid = ::OpenAPI::fromJsonValue(m_transfer, json[QString("transfer")]);
    m_transfer_isSet = !json[QString("transfer")].isNull() && m_transfer_isValid;
}

QString OAIBurnTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBurnTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_burn.size() > 0) {
        obj.insert(QString("burn"), ::OpenAPI::toJsonValue(m_burn));
    }
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::OpenAPI::toJsonValue(m_fee));
    }
    if (m_from.size() > 0) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_transfer.size() > 0) {
        obj.insert(QString("transfer"), ::OpenAPI::toJsonValue(m_transfer));
    }
    return obj;
}

QList<OAIBurnTokenRequest_burn_inner> OAIBurnTokenRequest::getBurn() const {
    return m_burn;
}
void OAIBurnTokenRequest::setBurn(const QList<OAIBurnTokenRequest_burn_inner> &burn) {
    m_burn = burn;
    m_burn_isSet = true;
}

bool OAIBurnTokenRequest::is_burn_Set() const{
    return m_burn_isSet;
}

bool OAIBurnTokenRequest::is_burn_Valid() const{
    return m_burn_isValid;
}

double OAIBurnTokenRequest::getFee() const {
    return m_fee;
}
void OAIBurnTokenRequest::setFee(const double &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool OAIBurnTokenRequest::is_fee_Set() const{
    return m_fee_isSet;
}

bool OAIBurnTokenRequest::is_fee_Valid() const{
    return m_fee_isValid;
}

QList<QString> OAIBurnTokenRequest::getFrom() const {
    return m_from;
}
void OAIBurnTokenRequest::setFrom(const QList<QString> &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIBurnTokenRequest::is_from_Set() const{
    return m_from_isSet;
}

bool OAIBurnTokenRequest::is_from_Valid() const{
    return m_from_isValid;
}

QList<OAIBurnTokenRequest_transfer_inner> OAIBurnTokenRequest::getTransfer() const {
    return m_transfer;
}
void OAIBurnTokenRequest::setTransfer(const QList<OAIBurnTokenRequest_transfer_inner> &transfer) {
    m_transfer = transfer;
    m_transfer_isSet = true;
}

bool OAIBurnTokenRequest::is_transfer_Set() const{
    return m_transfer_isSet;
}

bool OAIBurnTokenRequest::is_transfer_Valid() const{
    return m_transfer_isValid;
}

bool OAIBurnTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_burn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBurnTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_burn_isValid && m_fee_isValid && true;
}

} // namespace OpenAPI
