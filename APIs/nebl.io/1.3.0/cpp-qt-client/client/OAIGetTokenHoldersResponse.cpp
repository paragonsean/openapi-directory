/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTokenHoldersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTokenHoldersResponse::OAIGetTokenHoldersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTokenHoldersResponse::OAIGetTokenHoldersResponse() {
    this->initializeModel();
}

OAIGetTokenHoldersResponse::~OAIGetTokenHoldersResponse() {}

void OAIGetTokenHoldersResponse::initializeModel() {

    m_aggregation_policy_isSet = false;
    m_aggregation_policy_isValid = false;

    m_divibility_isSet = false;
    m_divibility_isValid = false;

    m_holders_isSet = false;
    m_holders_isValid = false;

    m_lock_status_isSet = false;
    m_lock_status_isValid = false;

    m_some_utxo_isSet = false;
    m_some_utxo_isValid = false;

    m_token_id_isSet = false;
    m_token_id_isValid = false;
}

void OAIGetTokenHoldersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTokenHoldersResponse::fromJsonObject(QJsonObject json) {

    m_aggregation_policy_isValid = ::OpenAPI::fromJsonValue(m_aggregation_policy, json[QString("aggregationPolicy")]);
    m_aggregation_policy_isSet = !json[QString("aggregationPolicy")].isNull() && m_aggregation_policy_isValid;

    m_divibility_isValid = ::OpenAPI::fromJsonValue(m_divibility, json[QString("divibility")]);
    m_divibility_isSet = !json[QString("divibility")].isNull() && m_divibility_isValid;

    m_holders_isValid = ::OpenAPI::fromJsonValue(m_holders, json[QString("holders")]);
    m_holders_isSet = !json[QString("holders")].isNull() && m_holders_isValid;

    m_lock_status_isValid = ::OpenAPI::fromJsonValue(m_lock_status, json[QString("lockStatus")]);
    m_lock_status_isSet = !json[QString("lockStatus")].isNull() && m_lock_status_isValid;

    m_some_utxo_isValid = ::OpenAPI::fromJsonValue(m_some_utxo, json[QString("someUtxo")]);
    m_some_utxo_isSet = !json[QString("someUtxo")].isNull() && m_some_utxo_isValid;

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("tokenId")]);
    m_token_id_isSet = !json[QString("tokenId")].isNull() && m_token_id_isValid;
}

QString OAIGetTokenHoldersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTokenHoldersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_policy_isSet) {
        obj.insert(QString("aggregationPolicy"), ::OpenAPI::toJsonValue(m_aggregation_policy));
    }
    if (m_divibility_isSet) {
        obj.insert(QString("divibility"), ::OpenAPI::toJsonValue(m_divibility));
    }
    if (m_holders.size() > 0) {
        obj.insert(QString("holders"), ::OpenAPI::toJsonValue(m_holders));
    }
    if (m_lock_status_isSet) {
        obj.insert(QString("lockStatus"), ::OpenAPI::toJsonValue(m_lock_status));
    }
    if (m_some_utxo_isSet) {
        obj.insert(QString("someUtxo"), ::OpenAPI::toJsonValue(m_some_utxo));
    }
    if (m_token_id_isSet) {
        obj.insert(QString("tokenId"), ::OpenAPI::toJsonValue(m_token_id));
    }
    return obj;
}

QString OAIGetTokenHoldersResponse::getAggregationPolicy() const {
    return m_aggregation_policy;
}
void OAIGetTokenHoldersResponse::setAggregationPolicy(const QString &aggregation_policy) {
    m_aggregation_policy = aggregation_policy;
    m_aggregation_policy_isSet = true;
}

bool OAIGetTokenHoldersResponse::is_aggregation_policy_Set() const{
    return m_aggregation_policy_isSet;
}

bool OAIGetTokenHoldersResponse::is_aggregation_policy_Valid() const{
    return m_aggregation_policy_isValid;
}

double OAIGetTokenHoldersResponse::getDivibility() const {
    return m_divibility;
}
void OAIGetTokenHoldersResponse::setDivibility(const double &divibility) {
    m_divibility = divibility;
    m_divibility_isSet = true;
}

bool OAIGetTokenHoldersResponse::is_divibility_Set() const{
    return m_divibility_isSet;
}

bool OAIGetTokenHoldersResponse::is_divibility_Valid() const{
    return m_divibility_isValid;
}

QList<OAIGetTokenHoldersResponse_holders_inner> OAIGetTokenHoldersResponse::getHolders() const {
    return m_holders;
}
void OAIGetTokenHoldersResponse::setHolders(const QList<OAIGetTokenHoldersResponse_holders_inner> &holders) {
    m_holders = holders;
    m_holders_isSet = true;
}

bool OAIGetTokenHoldersResponse::is_holders_Set() const{
    return m_holders_isSet;
}

bool OAIGetTokenHoldersResponse::is_holders_Valid() const{
    return m_holders_isValid;
}

bool OAIGetTokenHoldersResponse::isLockStatus() const {
    return m_lock_status;
}
void OAIGetTokenHoldersResponse::setLockStatus(const bool &lock_status) {
    m_lock_status = lock_status;
    m_lock_status_isSet = true;
}

bool OAIGetTokenHoldersResponse::is_lock_status_Set() const{
    return m_lock_status_isSet;
}

bool OAIGetTokenHoldersResponse::is_lock_status_Valid() const{
    return m_lock_status_isValid;
}

QString OAIGetTokenHoldersResponse::getSomeUtxo() const {
    return m_some_utxo;
}
void OAIGetTokenHoldersResponse::setSomeUtxo(const QString &some_utxo) {
    m_some_utxo = some_utxo;
    m_some_utxo_isSet = true;
}

bool OAIGetTokenHoldersResponse::is_some_utxo_Set() const{
    return m_some_utxo_isSet;
}

bool OAIGetTokenHoldersResponse::is_some_utxo_Valid() const{
    return m_some_utxo_isValid;
}

QString OAIGetTokenHoldersResponse::getTokenId() const {
    return m_token_id;
}
void OAIGetTokenHoldersResponse::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAIGetTokenHoldersResponse::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAIGetTokenHoldersResponse::is_token_id_Valid() const{
    return m_token_id_isValid;
}

bool OAIGetTokenHoldersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_divibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_some_utxo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTokenHoldersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
