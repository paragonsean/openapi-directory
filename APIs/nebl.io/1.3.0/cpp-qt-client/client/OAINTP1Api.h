/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINTP1Api_H
#define OAI_OAINTP1Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBroadcastTxRequest.h"
#include "OAIBroadcastTxResponse.h"
#include "OAIBurnTokenRequest.h"
#include "OAIBurnTokenResponse.h"
#include "OAIError.h"
#include "OAIGetAddressInfoResponse.h"
#include "OAIGetTokenHoldersResponse.h"
#include "OAIGetTokenIdResponse.h"
#include "OAIGetTokenMetadataResponse.h"
#include "OAIGetTransactionInfoResponse.h"
#include "OAIIssueTokenRequest.h"
#include "OAIIssueTokenResponse.h"
#include "OAISendTokenRequest.h"
#include "OAISendTokenResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINTP1Api : public QObject {
    Q_OBJECT

public:
    OAINTP1Api(const int timeOut = 0);
    ~OAINTP1Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_broadcast_tx_request OAIBroadcastTxRequest [required]
    */
    virtual void broadcastTx(const OAIBroadcastTxRequest &oai_broadcast_tx_request);

    /**
    * @param[in]  oai_burn_token_request OAIBurnTokenRequest [required]
    */
    virtual void burnToken(const OAIBurnTokenRequest &oai_burn_token_request);

    /**
    * @param[in]  address QString [required]
    */
    virtual void getAddressInfo(const QString &address);

    /**
    * @param[in]  tokenid QString [required]
    */
    virtual void getTokenHolders(const QString &tokenid);

    /**
    * @param[in]  tokensymbol QString [required]
    */
    virtual void getTokenId(const QString &tokensymbol);

    /**
    * @param[in]  tokenid QString [required]
    * @param[in]  verbosity double [optional]
    */
    virtual void getTokenMetadata(const QString &tokenid, const ::OpenAPI::OptionalParam<double> &verbosity = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  tokenid QString [required]
    * @param[in]  utxo QString [required]
    * @param[in]  verbosity double [optional]
    */
    virtual void getTokenMetadataOfUtxo(const QString &tokenid, const QString &utxo, const ::OpenAPI::OptionalParam<double> &verbosity = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  txid QString [required]
    */
    virtual void getTransactionInfo(const QString &txid);

    /**
    * @param[in]  oai_issue_token_request OAIIssueTokenRequest [required]
    */
    virtual void issueToken(const OAIIssueTokenRequest &oai_issue_token_request);

    /**
    * @param[in]  oai_send_token_request OAISendTokenRequest [required]
    */
    virtual void sendToken(const OAISendTokenRequest &oai_send_token_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void broadcastTxCallback(OAIHttpRequestWorker *worker);
    void burnTokenCallback(OAIHttpRequestWorker *worker);
    void getAddressInfoCallback(OAIHttpRequestWorker *worker);
    void getTokenHoldersCallback(OAIHttpRequestWorker *worker);
    void getTokenIdCallback(OAIHttpRequestWorker *worker);
    void getTokenMetadataCallback(OAIHttpRequestWorker *worker);
    void getTokenMetadataOfUtxoCallback(OAIHttpRequestWorker *worker);
    void getTransactionInfoCallback(OAIHttpRequestWorker *worker);
    void issueTokenCallback(OAIHttpRequestWorker *worker);
    void sendTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void broadcastTxSignal(OAIBroadcastTxResponse summary);
    void burnTokenSignal(OAIBurnTokenResponse summary);
    void getAddressInfoSignal(OAIGetAddressInfoResponse summary);
    void getTokenHoldersSignal(OAIGetTokenHoldersResponse summary);
    void getTokenIdSignal(OAIGetTokenIdResponse summary);
    void getTokenMetadataSignal(OAIGetTokenMetadataResponse summary);
    void getTokenMetadataOfUtxoSignal(OAIGetTokenMetadataResponse summary);
    void getTransactionInfoSignal(OAIGetTransactionInfoResponse summary);
    void issueTokenSignal(OAIIssueTokenResponse summary);
    void sendTokenSignal(OAISendTokenResponse summary);


    void broadcastTxSignalFull(OAIHttpRequestWorker *worker, OAIBroadcastTxResponse summary);
    void burnTokenSignalFull(OAIHttpRequestWorker *worker, OAIBurnTokenResponse summary);
    void getAddressInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetAddressInfoResponse summary);
    void getTokenHoldersSignalFull(OAIHttpRequestWorker *worker, OAIGetTokenHoldersResponse summary);
    void getTokenIdSignalFull(OAIHttpRequestWorker *worker, OAIGetTokenIdResponse summary);
    void getTokenMetadataSignalFull(OAIHttpRequestWorker *worker, OAIGetTokenMetadataResponse summary);
    void getTokenMetadataOfUtxoSignalFull(OAIHttpRequestWorker *worker, OAIGetTokenMetadataResponse summary);
    void getTransactionInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetTransactionInfoResponse summary);
    void issueTokenSignalFull(OAIHttpRequestWorker *worker, OAIIssueTokenResponse summary);
    void sendTokenSignalFull(OAIHttpRequestWorker *worker, OAISendTokenResponse summary);

    Q_DECL_DEPRECATED_X("Use broadcastTxSignalError() instead")
    void broadcastTxSignalE(OAIBroadcastTxResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void broadcastTxSignalError(OAIBroadcastTxResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use burnTokenSignalError() instead")
    void burnTokenSignalE(OAIBurnTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void burnTokenSignalError(OAIBurnTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressInfoSignalError() instead")
    void getAddressInfoSignalE(OAIGetAddressInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressInfoSignalError(OAIGetAddressInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenHoldersSignalError() instead")
    void getTokenHoldersSignalE(OAIGetTokenHoldersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenHoldersSignalError(OAIGetTokenHoldersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenIdSignalError() instead")
    void getTokenIdSignalE(OAIGetTokenIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenIdSignalError(OAIGetTokenIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenMetadataSignalError() instead")
    void getTokenMetadataSignalE(OAIGetTokenMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenMetadataSignalError(OAIGetTokenMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenMetadataOfUtxoSignalError() instead")
    void getTokenMetadataOfUtxoSignalE(OAIGetTokenMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenMetadataOfUtxoSignalError(OAIGetTokenMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionInfoSignalError() instead")
    void getTransactionInfoSignalE(OAIGetTransactionInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionInfoSignalError(OAIGetTransactionInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueTokenSignalError() instead")
    void issueTokenSignalE(OAIIssueTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueTokenSignalError(OAIIssueTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendTokenSignalError() instead")
    void sendTokenSignalE(OAISendTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendTokenSignalError(OAISendTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use broadcastTxSignalErrorFull() instead")
    void broadcastTxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void broadcastTxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use burnTokenSignalErrorFull() instead")
    void burnTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void burnTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressInfoSignalErrorFull() instead")
    void getAddressInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenHoldersSignalErrorFull() instead")
    void getTokenHoldersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenHoldersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenIdSignalErrorFull() instead")
    void getTokenIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenMetadataSignalErrorFull() instead")
    void getTokenMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenMetadataOfUtxoSignalErrorFull() instead")
    void getTokenMetadataOfUtxoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenMetadataOfUtxoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionInfoSignalErrorFull() instead")
    void getTransactionInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueTokenSignalErrorFull() instead")
    void issueTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendTokenSignalErrorFull() instead")
    void sendTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
