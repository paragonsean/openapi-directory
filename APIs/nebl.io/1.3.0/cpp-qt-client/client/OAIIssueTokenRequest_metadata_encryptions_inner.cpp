/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueTokenRequest_metadata_encryptions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueTokenRequest_metadata_encryptions_inner::OAIIssueTokenRequest_metadata_encryptions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueTokenRequest_metadata_encryptions_inner::OAIIssueTokenRequest_metadata_encryptions_inner() {
    this->initializeModel();
}

OAIIssueTokenRequest_metadata_encryptions_inner::~OAIIssueTokenRequest_metadata_encryptions_inner() {}

void OAIIssueTokenRequest_metadata_encryptions_inner::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_pubkey_isSet = false;
    m_pubkey_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIssueTokenRequest_metadata_encryptions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueTokenRequest_metadata_encryptions_inner::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_pubkey_isValid = ::OpenAPI::fromJsonValue(m_pubkey, json[QString("pubkey")]);
    m_pubkey_isSet = !json[QString("pubkey")].isNull() && m_pubkey_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIssueTokenRequest_metadata_encryptions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueTokenRequest_metadata_encryptions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_pubkey_isSet) {
        obj.insert(QString("pubkey"), ::OpenAPI::toJsonValue(m_pubkey));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIIssueTokenRequest_metadata_encryptions_inner::getFormat() const {
    return m_format;
}
void OAIIssueTokenRequest_metadata_encryptions_inner::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIIssueTokenRequest_metadata_encryptions_inner::is_format_Set() const{
    return m_format_isSet;
}

bool OAIIssueTokenRequest_metadata_encryptions_inner::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIIssueTokenRequest_metadata_encryptions_inner::getKey() const {
    return m_key;
}
void OAIIssueTokenRequest_metadata_encryptions_inner::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIIssueTokenRequest_metadata_encryptions_inner::is_key_Set() const{
    return m_key_isSet;
}

bool OAIIssueTokenRequest_metadata_encryptions_inner::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIIssueTokenRequest_metadata_encryptions_inner::getPubkey() const {
    return m_pubkey;
}
void OAIIssueTokenRequest_metadata_encryptions_inner::setPubkey(const QString &pubkey) {
    m_pubkey = pubkey;
    m_pubkey_isSet = true;
}

bool OAIIssueTokenRequest_metadata_encryptions_inner::is_pubkey_Set() const{
    return m_pubkey_isSet;
}

bool OAIIssueTokenRequest_metadata_encryptions_inner::is_pubkey_Valid() const{
    return m_pubkey_isValid;
}

QString OAIIssueTokenRequest_metadata_encryptions_inner::getType() const {
    return m_type;
}
void OAIIssueTokenRequest_metadata_encryptions_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIssueTokenRequest_metadata_encryptions_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIssueTokenRequest_metadata_encryptions_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIssueTokenRequest_metadata_encryptions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pubkey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueTokenRequest_metadata_encryptions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
