/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTokenMetadataResponse.h
 *
 * 
 */

#ifndef OAIGetTokenMetadataResponse_H
#define OAIGetTokenMetadataResponse_H

#include <QJsonObject>

#include "OAIGetTokenMetadataResponse_metadataOfIssuance.h"
#include "OAIGetTokenMetadataResponse_metadataOfUtxo.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetTokenMetadataResponse_metadataOfIssuance;
class OAIGetTokenMetadataResponse_metadataOfUtxo;

class OAIGetTokenMetadataResponse : public OAIObject {
public:
    OAIGetTokenMetadataResponse();
    OAIGetTokenMetadataResponse(QString json);
    ~OAIGetTokenMetadataResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAggregationPolicy() const;
    void setAggregationPolicy(const QString &aggregation_policy);
    bool is_aggregation_policy_Set() const;
    bool is_aggregation_policy_Valid() const;

    double getDivisibility() const;
    void setDivisibility(const double &divisibility);
    bool is_divisibility_Set() const;
    bool is_divisibility_Valid() const;

    double getFirstBlock() const;
    void setFirstBlock(const double &first_block);
    bool is_first_block_Set() const;
    bool is_first_block_Valid() const;

    double getInitialIssuanceAmount() const;
    void setInitialIssuanceAmount(const double &initial_issuance_amount);
    bool is_initial_issuance_amount_Set() const;
    bool is_initial_issuance_amount_Valid() const;

    QString getIssuanceTxid() const;
    void setIssuanceTxid(const QString &issuance_txid);
    bool is_issuance_txid_Set() const;
    bool is_issuance_txid_Valid() const;

    QString getIssueAddress() const;
    void setIssueAddress(const QString &issue_address);
    bool is_issue_address_Set() const;
    bool is_issue_address_Valid() const;

    bool isLockStatus() const;
    void setLockStatus(const bool &lock_status);
    bool is_lock_status_Set() const;
    bool is_lock_status_Valid() const;

    OAIGetTokenMetadataResponse_metadataOfIssuance getMetadataOfIssuance() const;
    void setMetadataOfIssuance(const OAIGetTokenMetadataResponse_metadataOfIssuance &metadata_of_issuance);
    bool is_metadata_of_issuance_Set() const;
    bool is_metadata_of_issuance_Valid() const;

    OAIGetTokenMetadataResponse_metadataOfUtxo getMetadataOfUtxo() const;
    void setMetadataOfUtxo(const OAIGetTokenMetadataResponse_metadataOfUtxo &metadata_of_utxo);
    bool is_metadata_of_utxo_Set() const;
    bool is_metadata_of_utxo_Valid() const;

    double getNumOfBurns() const;
    void setNumOfBurns(const double &num_of_burns);
    bool is_num_of_burns_Set() const;
    bool is_num_of_burns_Valid() const;

    double getNumOfHolders() const;
    void setNumOfHolders(const double &num_of_holders);
    bool is_num_of_holders_Set() const;
    bool is_num_of_holders_Valid() const;

    double getNumOfIssuance() const;
    void setNumOfIssuance(const double &num_of_issuance);
    bool is_num_of_issuance_Set() const;
    bool is_num_of_issuance_Valid() const;

    double getNumOfTransfers() const;
    void setNumOfTransfers(const double &num_of_transfers);
    bool is_num_of_transfers_Set() const;
    bool is_num_of_transfers_Valid() const;

    QString getSomeUtxo() const;
    void setSomeUtxo(const QString &some_utxo);
    bool is_some_utxo_Set() const;
    bool is_some_utxo_Valid() const;

    QString getTokenId() const;
    void setTokenId(const QString &token_id);
    bool is_token_id_Set() const;
    bool is_token_id_Valid() const;

    double getTotalSupply() const;
    void setTotalSupply(const double &total_supply);
    bool is_total_supply_Set() const;
    bool is_total_supply_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aggregation_policy;
    bool m_aggregation_policy_isSet;
    bool m_aggregation_policy_isValid;

    double m_divisibility;
    bool m_divisibility_isSet;
    bool m_divisibility_isValid;

    double m_first_block;
    bool m_first_block_isSet;
    bool m_first_block_isValid;

    double m_initial_issuance_amount;
    bool m_initial_issuance_amount_isSet;
    bool m_initial_issuance_amount_isValid;

    QString m_issuance_txid;
    bool m_issuance_txid_isSet;
    bool m_issuance_txid_isValid;

    QString m_issue_address;
    bool m_issue_address_isSet;
    bool m_issue_address_isValid;

    bool m_lock_status;
    bool m_lock_status_isSet;
    bool m_lock_status_isValid;

    OAIGetTokenMetadataResponse_metadataOfIssuance m_metadata_of_issuance;
    bool m_metadata_of_issuance_isSet;
    bool m_metadata_of_issuance_isValid;

    OAIGetTokenMetadataResponse_metadataOfUtxo m_metadata_of_utxo;
    bool m_metadata_of_utxo_isSet;
    bool m_metadata_of_utxo_isValid;

    double m_num_of_burns;
    bool m_num_of_burns_isSet;
    bool m_num_of_burns_isValid;

    double m_num_of_holders;
    bool m_num_of_holders_isSet;
    bool m_num_of_holders_isValid;

    double m_num_of_issuance;
    bool m_num_of_issuance_isSet;
    bool m_num_of_issuance_isValid;

    double m_num_of_transfers;
    bool m_num_of_transfers_isSet;
    bool m_num_of_transfers_isValid;

    QString m_some_utxo;
    bool m_some_utxo_isSet;
    bool m_some_utxo_isValid;

    QString m_token_id;
    bool m_token_id_isSet;
    bool m_token_id_isValid;

    double m_total_supply;
    bool m_total_supply_isSet;
    bool m_total_supply_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTokenMetadataResponse)

#endif // OAIGetTokenMetadataResponse_H
