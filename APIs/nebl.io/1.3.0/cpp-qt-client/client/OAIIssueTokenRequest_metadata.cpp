/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueTokenRequest_metadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueTokenRequest_metadata::OAIIssueTokenRequest_metadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueTokenRequest_metadata::OAIIssueTokenRequest_metadata() {
    this->initializeModel();
}

OAIIssueTokenRequest_metadata::~OAIIssueTokenRequest_metadata() {}

void OAIIssueTokenRequest_metadata::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_encryptions_isSet = false;
    m_encryptions_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_token_name_isSet = false;
    m_token_name_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_user_data_isSet = false;
    m_user_data_isValid = false;
}

void OAIIssueTokenRequest_metadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueTokenRequest_metadata::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_encryptions_isValid = ::OpenAPI::fromJsonValue(m_encryptions, json[QString("encryptions")]);
    m_encryptions_isSet = !json[QString("encryptions")].isNull() && m_encryptions_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_token_name_isValid = ::OpenAPI::fromJsonValue(m_token_name, json[QString("tokenName")]);
    m_token_name_isSet = !json[QString("tokenName")].isNull() && m_token_name_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;

    m_user_data_isValid = ::OpenAPI::fromJsonValue(m_user_data, json[QString("userData")]);
    m_user_data_isSet = !json[QString("userData")].isNull() && m_user_data_isValid;
}

QString OAIIssueTokenRequest_metadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueTokenRequest_metadata::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_encryptions.size() > 0) {
        obj.insert(QString("encryptions"), ::OpenAPI::toJsonValue(m_encryptions));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_token_name_isSet) {
        obj.insert(QString("tokenName"), ::OpenAPI::toJsonValue(m_token_name));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_user_data.isSet()) {
        obj.insert(QString("userData"), ::OpenAPI::toJsonValue(m_user_data));
    }
    return obj;
}

QString OAIIssueTokenRequest_metadata::getDescription() const {
    return m_description;
}
void OAIIssueTokenRequest_metadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIssueTokenRequest_metadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIssueTokenRequest_metadata::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIIssueTokenRequest_metadata_encryptions_inner> OAIIssueTokenRequest_metadata::getEncryptions() const {
    return m_encryptions;
}
void OAIIssueTokenRequest_metadata::setEncryptions(const QList<OAIIssueTokenRequest_metadata_encryptions_inner> &encryptions) {
    m_encryptions = encryptions;
    m_encryptions_isSet = true;
}

bool OAIIssueTokenRequest_metadata::is_encryptions_Set() const{
    return m_encryptions_isSet;
}

bool OAIIssueTokenRequest_metadata::is_encryptions_Valid() const{
    return m_encryptions_isValid;
}

QString OAIIssueTokenRequest_metadata::getIssuer() const {
    return m_issuer;
}
void OAIIssueTokenRequest_metadata::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIIssueTokenRequest_metadata::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIIssueTokenRequest_metadata::is_issuer_Valid() const{
    return m_issuer_isValid;
}

OAIIssueTokenRequest_metadata_rules OAIIssueTokenRequest_metadata::getRules() const {
    return m_rules;
}
void OAIIssueTokenRequest_metadata::setRules(const OAIIssueTokenRequest_metadata_rules &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIIssueTokenRequest_metadata::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIIssueTokenRequest_metadata::is_rules_Valid() const{
    return m_rules_isValid;
}

QString OAIIssueTokenRequest_metadata::getTokenName() const {
    return m_token_name;
}
void OAIIssueTokenRequest_metadata::setTokenName(const QString &token_name) {
    m_token_name = token_name;
    m_token_name_isSet = true;
}

bool OAIIssueTokenRequest_metadata::is_token_name_Set() const{
    return m_token_name_isSet;
}

bool OAIIssueTokenRequest_metadata::is_token_name_Valid() const{
    return m_token_name_isValid;
}

QList<OAIIssueTokenRequest_metadata_urls_inner> OAIIssueTokenRequest_metadata::getUrls() const {
    return m_urls;
}
void OAIIssueTokenRequest_metadata::setUrls(const QList<OAIIssueTokenRequest_metadata_urls_inner> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIIssueTokenRequest_metadata::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIIssueTokenRequest_metadata::is_urls_Valid() const{
    return m_urls_isValid;
}

OAIGetTokenMetadataResponse_metadataOfIssuance_data_userData OAIIssueTokenRequest_metadata::getUserData() const {
    return m_user_data;
}
void OAIIssueTokenRequest_metadata::setUserData(const OAIGetTokenMetadataResponse_metadataOfIssuance_data_userData &user_data) {
    m_user_data = user_data;
    m_user_data_isSet = true;
}

bool OAIIssueTokenRequest_metadata::is_user_data_Set() const{
    return m_user_data_isSet;
}

bool OAIIssueTokenRequest_metadata::is_user_data_Valid() const{
    return m_user_data_isValid;
}

bool OAIIssueTokenRequest_metadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueTokenRequest_metadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
