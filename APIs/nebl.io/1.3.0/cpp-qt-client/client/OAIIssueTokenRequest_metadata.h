/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIssueTokenRequest_metadata.h
 *
 * Object representing all metadata at token issuance
 */

#ifndef OAIIssueTokenRequest_metadata_H
#define OAIIssueTokenRequest_metadata_H

#include <QJsonObject>

#include "OAIGetTokenMetadataResponse_metadataOfIssuance_data_userData.h"
#include "OAIIssueTokenRequest_metadata_encryptions_inner.h"
#include "OAIIssueTokenRequest_metadata_rules.h"
#include "OAIIssueTokenRequest_metadata_urls_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIssueTokenRequest_metadata_encryptions_inner;
class OAIIssueTokenRequest_metadata_rules;
class OAIIssueTokenRequest_metadata_urls_inner;
class OAIGetTokenMetadataResponse_metadataOfIssuance_data_userData;

class OAIIssueTokenRequest_metadata : public OAIObject {
public:
    OAIIssueTokenRequest_metadata();
    OAIIssueTokenRequest_metadata(QString json);
    ~OAIIssueTokenRequest_metadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<OAIIssueTokenRequest_metadata_encryptions_inner> getEncryptions() const;
    void setEncryptions(const QList<OAIIssueTokenRequest_metadata_encryptions_inner> &encryptions);
    bool is_encryptions_Set() const;
    bool is_encryptions_Valid() const;

    QString getIssuer() const;
    void setIssuer(const QString &issuer);
    bool is_issuer_Set() const;
    bool is_issuer_Valid() const;

    OAIIssueTokenRequest_metadata_rules getRules() const;
    void setRules(const OAIIssueTokenRequest_metadata_rules &rules);
    bool is_rules_Set() const;
    bool is_rules_Valid() const;

    QString getTokenName() const;
    void setTokenName(const QString &token_name);
    bool is_token_name_Set() const;
    bool is_token_name_Valid() const;

    QList<OAIIssueTokenRequest_metadata_urls_inner> getUrls() const;
    void setUrls(const QList<OAIIssueTokenRequest_metadata_urls_inner> &urls);
    bool is_urls_Set() const;
    bool is_urls_Valid() const;

    OAIGetTokenMetadataResponse_metadataOfIssuance_data_userData getUserData() const;
    void setUserData(const OAIGetTokenMetadataResponse_metadataOfIssuance_data_userData &user_data);
    bool is_user_data_Set() const;
    bool is_user_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<OAIIssueTokenRequest_metadata_encryptions_inner> m_encryptions;
    bool m_encryptions_isSet;
    bool m_encryptions_isValid;

    QString m_issuer;
    bool m_issuer_isSet;
    bool m_issuer_isValid;

    OAIIssueTokenRequest_metadata_rules m_rules;
    bool m_rules_isSet;
    bool m_rules_isValid;

    QString m_token_name;
    bool m_token_name_isSet;
    bool m_token_name_isValid;

    QList<OAIIssueTokenRequest_metadata_urls_inner> m_urls;
    bool m_urls_isSet;
    bool m_urls_isValid;

    OAIGetTokenMetadataResponse_metadataOfIssuance_data_userData m_user_data;
    bool m_user_data_isSet;
    bool m_user_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIssueTokenRequest_metadata)

#endif // OAIIssueTokenRequest_metadata_H
