/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendTokenRequest::OAISendTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendTokenRequest::OAISendTokenRequest() {
    this->initializeModel();
}

OAISendTokenRequest::~OAISendTokenRequest() {}

void OAISendTokenRequest::initializeModel() {

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_sendutxo_isSet = false;
    m_sendutxo_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAISendTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendTokenRequest::fromJsonObject(QJsonObject json) {

    m_fee_isValid = ::OpenAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_sendutxo_isValid = ::OpenAPI::fromJsonValue(m_sendutxo, json[QString("sendutxo")]);
    m_sendutxo_isSet = !json[QString("sendutxo")].isNull() && m_sendutxo_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAISendTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::OpenAPI::toJsonValue(m_fee));
    }
    if (m_flags.isSet()) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_from.size() > 0) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_sendutxo.size() > 0) {
        obj.insert(QString("sendutxo"), ::OpenAPI::toJsonValue(m_sendutxo));
    }
    if (m_to.size() > 0) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

double OAISendTokenRequest::getFee() const {
    return m_fee;
}
void OAISendTokenRequest::setFee(const double &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool OAISendTokenRequest::is_fee_Set() const{
    return m_fee_isSet;
}

bool OAISendTokenRequest::is_fee_Valid() const{
    return m_fee_isValid;
}

OAIIssueTokenRequest_flags OAISendTokenRequest::getFlags() const {
    return m_flags;
}
void OAISendTokenRequest::setFlags(const OAIIssueTokenRequest_flags &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAISendTokenRequest::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAISendTokenRequest::is_flags_Valid() const{
    return m_flags_isValid;
}

QList<QString> OAISendTokenRequest::getFrom() const {
    return m_from;
}
void OAISendTokenRequest::setFrom(const QList<QString> &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAISendTokenRequest::is_from_Set() const{
    return m_from_isSet;
}

bool OAISendTokenRequest::is_from_Valid() const{
    return m_from_isValid;
}

OAIIssueTokenRequest_metadata OAISendTokenRequest::getMetadata() const {
    return m_metadata;
}
void OAISendTokenRequest::setMetadata(const OAIIssueTokenRequest_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISendTokenRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISendTokenRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<QString> OAISendTokenRequest::getSendutxo() const {
    return m_sendutxo;
}
void OAISendTokenRequest::setSendutxo(const QList<QString> &sendutxo) {
    m_sendutxo = sendutxo;
    m_sendutxo_isSet = true;
}

bool OAISendTokenRequest::is_sendutxo_Set() const{
    return m_sendutxo_isSet;
}

bool OAISendTokenRequest::is_sendutxo_Valid() const{
    return m_sendutxo_isValid;
}

QList<OAIBurnTokenRequest_transfer_inner> OAISendTokenRequest::getTo() const {
    return m_to;
}
void OAISendTokenRequest::setTo(const QList<OAIBurnTokenRequest_transfer_inner> &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAISendTokenRequest::is_to_Set() const{
    return m_to_isSet;
}

bool OAISendTokenRequest::is_to_Valid() const{
    return m_to_isValid;
}

bool OAISendTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sendutxo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fee_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
