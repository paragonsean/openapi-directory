/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTokenIdResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTokenIdResponse::OAIGetTokenIdResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTokenIdResponse::OAIGetTokenIdResponse() {
    this->initializeModel();
}

OAIGetTokenIdResponse::~OAIGetTokenIdResponse() {}

void OAIGetTokenIdResponse::initializeModel() {

    m_token_id_isSet = false;
    m_token_id_isValid = false;

    m_token_name_isSet = false;
    m_token_name_isValid = false;
}

void OAIGetTokenIdResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTokenIdResponse::fromJsonObject(QJsonObject json) {

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("tokenId")]);
    m_token_id_isSet = !json[QString("tokenId")].isNull() && m_token_id_isValid;

    m_token_name_isValid = ::OpenAPI::fromJsonValue(m_token_name, json[QString("tokenName")]);
    m_token_name_isSet = !json[QString("tokenName")].isNull() && m_token_name_isValid;
}

QString OAIGetTokenIdResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTokenIdResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_token_id_isSet) {
        obj.insert(QString("tokenId"), ::OpenAPI::toJsonValue(m_token_id));
    }
    if (m_token_name_isSet) {
        obj.insert(QString("tokenName"), ::OpenAPI::toJsonValue(m_token_name));
    }
    return obj;
}

QString OAIGetTokenIdResponse::getTokenId() const {
    return m_token_id;
}
void OAIGetTokenIdResponse::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAIGetTokenIdResponse::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAIGetTokenIdResponse::is_token_id_Valid() const{
    return m_token_id_isValid;
}

QString OAIGetTokenIdResponse::getTokenName() const {
    return m_token_name;
}
void OAIGetTokenIdResponse::setTokenName(const QString &token_name) {
    m_token_name = token_name;
    m_token_name_isSet = true;
}

bool OAIGetTokenIdResponse::is_token_name_Set() const{
    return m_token_name_isSet;
}

bool OAIGetTokenIdResponse::is_token_name_Valid() const{
    return m_token_name_isValid;
}

bool OAIGetTokenIdResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTokenIdResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
