/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITestnetInsightApi_H
#define OAI_OAITestnetInsightApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBroadcastTxResponse.h"
#include "OAIError.h"
#include "OAIGetAddressResponse.h"
#include "OAIGetAddressUtxosResponse_inner.h"
#include "OAIGetBlockIndexResponse.h"
#include "OAIGetBlockResponse.h"
#include "OAIGetRawTxResponse.h"
#include "OAIGetSyncResponse.h"
#include "OAIGetTxResponse.h"
#include "OAIGetTxsResponse.h"
#include "OAIObject.h"
#include "OAISendTxRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITestnetInsightApi : public QObject {
    Q_OBJECT

public:
    OAITestnetInsightApi(const int timeOut = 0);
    ~OAITestnetInsightApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  address QString [required]
    */
    virtual void testnetGetAddress(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void testnetGetAddressBalance(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void testnetGetAddressTotalReceived(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void testnetGetAddressTotalSent(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void testnetGetAddressUnconfirmedBalance(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void testnetGetAddressUtxos(const QString &address);

    /**
    * @param[in]  blockhash QString [required]
    */
    virtual void testnetGetBlock(const QString &blockhash);

    /**
    * @param[in]  blockindex double [required]
    */
    virtual void testnetGetBlockIndex(const double &blockindex);

    /**
    * @param[in]  txid QString [required]
    */
    virtual void testnetGetRawTx(const QString &txid);

    /**
    * @param[in]  q QString [optional]
    */
    virtual void testnetGetStatus(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());


    virtual void testnetGetSync();

    /**
    * @param[in]  txid QString [required]
    */
    virtual void testnetGetTx(const QString &txid);

    /**
    * @param[in]  address QString [optional]
    * @param[in]  block QString [optional]
    * @param[in]  page_num double [optional]
    */
    virtual void testnetGetTxs(const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &block = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page_num = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  oai_send_tx_request OAISendTxRequest [required]
    */
    virtual void testnetSendTx(const OAISendTxRequest &oai_send_tx_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void testnetGetAddressCallback(OAIHttpRequestWorker *worker);
    void testnetGetAddressBalanceCallback(OAIHttpRequestWorker *worker);
    void testnetGetAddressTotalReceivedCallback(OAIHttpRequestWorker *worker);
    void testnetGetAddressTotalSentCallback(OAIHttpRequestWorker *worker);
    void testnetGetAddressUnconfirmedBalanceCallback(OAIHttpRequestWorker *worker);
    void testnetGetAddressUtxosCallback(OAIHttpRequestWorker *worker);
    void testnetGetBlockCallback(OAIHttpRequestWorker *worker);
    void testnetGetBlockIndexCallback(OAIHttpRequestWorker *worker);
    void testnetGetRawTxCallback(OAIHttpRequestWorker *worker);
    void testnetGetStatusCallback(OAIHttpRequestWorker *worker);
    void testnetGetSyncCallback(OAIHttpRequestWorker *worker);
    void testnetGetTxCallback(OAIHttpRequestWorker *worker);
    void testnetGetTxsCallback(OAIHttpRequestWorker *worker);
    void testnetSendTxCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void testnetGetAddressSignal(OAIGetAddressResponse summary);
    void testnetGetAddressBalanceSignal(double summary);
    void testnetGetAddressTotalReceivedSignal(double summary);
    void testnetGetAddressTotalSentSignal(double summary);
    void testnetGetAddressUnconfirmedBalanceSignal(double summary);
    void testnetGetAddressUtxosSignal(QList<OAIGetAddressUtxosResponse_inner> summary);
    void testnetGetBlockSignal(OAIGetBlockResponse summary);
    void testnetGetBlockIndexSignal(OAIGetBlockIndexResponse summary);
    void testnetGetRawTxSignal(OAIGetRawTxResponse summary);
    void testnetGetStatusSignal(OAIObject summary);
    void testnetGetSyncSignal(OAIGetSyncResponse summary);
    void testnetGetTxSignal(OAIGetTxResponse summary);
    void testnetGetTxsSignal(OAIGetTxsResponse summary);
    void testnetSendTxSignal(OAIBroadcastTxResponse summary);


    void testnetGetAddressSignalFull(OAIHttpRequestWorker *worker, OAIGetAddressResponse summary);
    void testnetGetAddressBalanceSignalFull(OAIHttpRequestWorker *worker, double summary);
    void testnetGetAddressTotalReceivedSignalFull(OAIHttpRequestWorker *worker, double summary);
    void testnetGetAddressTotalSentSignalFull(OAIHttpRequestWorker *worker, double summary);
    void testnetGetAddressUnconfirmedBalanceSignalFull(OAIHttpRequestWorker *worker, double summary);
    void testnetGetAddressUtxosSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetAddressUtxosResponse_inner> summary);
    void testnetGetBlockSignalFull(OAIHttpRequestWorker *worker, OAIGetBlockResponse summary);
    void testnetGetBlockIndexSignalFull(OAIHttpRequestWorker *worker, OAIGetBlockIndexResponse summary);
    void testnetGetRawTxSignalFull(OAIHttpRequestWorker *worker, OAIGetRawTxResponse summary);
    void testnetGetStatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void testnetGetSyncSignalFull(OAIHttpRequestWorker *worker, OAIGetSyncResponse summary);
    void testnetGetTxSignalFull(OAIHttpRequestWorker *worker, OAIGetTxResponse summary);
    void testnetGetTxsSignalFull(OAIHttpRequestWorker *worker, OAIGetTxsResponse summary);
    void testnetSendTxSignalFull(OAIHttpRequestWorker *worker, OAIBroadcastTxResponse summary);

    Q_DECL_DEPRECATED_X("Use testnetGetAddressSignalError() instead")
    void testnetGetAddressSignalE(OAIGetAddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressSignalError(OAIGetAddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressBalanceSignalError() instead")
    void testnetGetAddressBalanceSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressBalanceSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressTotalReceivedSignalError() instead")
    void testnetGetAddressTotalReceivedSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressTotalReceivedSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressTotalSentSignalError() instead")
    void testnetGetAddressTotalSentSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressTotalSentSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressUnconfirmedBalanceSignalError() instead")
    void testnetGetAddressUnconfirmedBalanceSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressUnconfirmedBalanceSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressUtxosSignalError() instead")
    void testnetGetAddressUtxosSignalE(QList<OAIGetAddressUtxosResponse_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressUtxosSignalError(QList<OAIGetAddressUtxosResponse_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetBlockSignalError() instead")
    void testnetGetBlockSignalE(OAIGetBlockResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetBlockSignalError(OAIGetBlockResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetBlockIndexSignalError() instead")
    void testnetGetBlockIndexSignalE(OAIGetBlockIndexResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetBlockIndexSignalError(OAIGetBlockIndexResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetRawTxSignalError() instead")
    void testnetGetRawTxSignalE(OAIGetRawTxResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetRawTxSignalError(OAIGetRawTxResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetStatusSignalError() instead")
    void testnetGetStatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetStatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetSyncSignalError() instead")
    void testnetGetSyncSignalE(OAIGetSyncResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetSyncSignalError(OAIGetSyncResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTxSignalError() instead")
    void testnetGetTxSignalE(OAIGetTxResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTxSignalError(OAIGetTxResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTxsSignalError() instead")
    void testnetGetTxsSignalE(OAIGetTxsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTxsSignalError(OAIGetTxsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetSendTxSignalError() instead")
    void testnetSendTxSignalE(OAIBroadcastTxResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetSendTxSignalError(OAIBroadcastTxResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use testnetGetAddressSignalErrorFull() instead")
    void testnetGetAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressBalanceSignalErrorFull() instead")
    void testnetGetAddressBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressTotalReceivedSignalErrorFull() instead")
    void testnetGetAddressTotalReceivedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressTotalReceivedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressTotalSentSignalErrorFull() instead")
    void testnetGetAddressTotalSentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressTotalSentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressUnconfirmedBalanceSignalErrorFull() instead")
    void testnetGetAddressUnconfirmedBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressUnconfirmedBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressUtxosSignalErrorFull() instead")
    void testnetGetAddressUtxosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressUtxosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetBlockSignalErrorFull() instead")
    void testnetGetBlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetBlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetBlockIndexSignalErrorFull() instead")
    void testnetGetBlockIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetBlockIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetRawTxSignalErrorFull() instead")
    void testnetGetRawTxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetRawTxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetStatusSignalErrorFull() instead")
    void testnetGetStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetSyncSignalErrorFull() instead")
    void testnetGetSyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetSyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTxSignalErrorFull() instead")
    void testnetGetTxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTxsSignalErrorFull() instead")
    void testnetGetTxsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTxsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetSendTxSignalErrorFull() instead")
    void testnetSendTxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetSendTxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
