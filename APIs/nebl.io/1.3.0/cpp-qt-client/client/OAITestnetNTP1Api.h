/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITestnetNTP1Api_H
#define OAI_OAITestnetNTP1Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBroadcastTxRequest.h"
#include "OAIBroadcastTxResponse.h"
#include "OAIBurnTokenRequest.h"
#include "OAIBurnTokenResponse.h"
#include "OAIError.h"
#include "OAIGetAddressInfoResponse.h"
#include "OAIGetTokenHoldersResponse.h"
#include "OAIGetTokenIdResponse.h"
#include "OAIGetTokenMetadataResponse.h"
#include "OAIGetTransactionInfoResponse.h"
#include "OAIIssueTokenRequest.h"
#include "OAIIssueTokenResponse.h"
#include "OAISendTokenRequest.h"
#include "OAISendTokenResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITestnetNTP1Api : public QObject {
    Q_OBJECT

public:
    OAITestnetNTP1Api(const int timeOut = 0);
    ~OAITestnetNTP1Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_broadcast_tx_request OAIBroadcastTxRequest [required]
    */
    virtual void testnetBroadcastTx(const OAIBroadcastTxRequest &oai_broadcast_tx_request);

    /**
    * @param[in]  oai_burn_token_request OAIBurnTokenRequest [required]
    */
    virtual void testnetBurnToken(const OAIBurnTokenRequest &oai_burn_token_request);

    /**
    * @param[in]  address QString [required]
    */
    virtual void testnetGetAddressInfo(const QString &address);

    /**
    * @param[in]  tokenid QString [required]
    */
    virtual void testnetGetTokenHolders(const QString &tokenid);

    /**
    * @param[in]  tokensymbol QString [required]
    */
    virtual void testnetGetTokenId(const QString &tokensymbol);

    /**
    * @param[in]  tokenid QString [required]
    * @param[in]  verbosity double [optional]
    */
    virtual void testnetGetTokenMetadata(const QString &tokenid, const ::OpenAPI::OptionalParam<double> &verbosity = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  tokenid QString [required]
    * @param[in]  utxo QString [required]
    * @param[in]  verbosity double [optional]
    */
    virtual void testnetGetTokenMetadataOfUtxo(const QString &tokenid, const QString &utxo, const ::OpenAPI::OptionalParam<double> &verbosity = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  txid QString [required]
    */
    virtual void testnetGetTransactionInfo(const QString &txid);

    /**
    * @param[in]  oai_issue_token_request OAIIssueTokenRequest [required]
    */
    virtual void testnetIssueToken(const OAIIssueTokenRequest &oai_issue_token_request);

    /**
    * @param[in]  oai_send_token_request OAISendTokenRequest [required]
    */
    virtual void testnetSendToken(const OAISendTokenRequest &oai_send_token_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void testnetBroadcastTxCallback(OAIHttpRequestWorker *worker);
    void testnetBurnTokenCallback(OAIHttpRequestWorker *worker);
    void testnetGetAddressInfoCallback(OAIHttpRequestWorker *worker);
    void testnetGetTokenHoldersCallback(OAIHttpRequestWorker *worker);
    void testnetGetTokenIdCallback(OAIHttpRequestWorker *worker);
    void testnetGetTokenMetadataCallback(OAIHttpRequestWorker *worker);
    void testnetGetTokenMetadataOfUtxoCallback(OAIHttpRequestWorker *worker);
    void testnetGetTransactionInfoCallback(OAIHttpRequestWorker *worker);
    void testnetIssueTokenCallback(OAIHttpRequestWorker *worker);
    void testnetSendTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void testnetBroadcastTxSignal(OAIBroadcastTxResponse summary);
    void testnetBurnTokenSignal(OAIBurnTokenResponse summary);
    void testnetGetAddressInfoSignal(OAIGetAddressInfoResponse summary);
    void testnetGetTokenHoldersSignal(OAIGetTokenHoldersResponse summary);
    void testnetGetTokenIdSignal(OAIGetTokenIdResponse summary);
    void testnetGetTokenMetadataSignal(OAIGetTokenMetadataResponse summary);
    void testnetGetTokenMetadataOfUtxoSignal(OAIGetTokenMetadataResponse summary);
    void testnetGetTransactionInfoSignal(OAIGetTransactionInfoResponse summary);
    void testnetIssueTokenSignal(OAIIssueTokenResponse summary);
    void testnetSendTokenSignal(OAISendTokenResponse summary);


    void testnetBroadcastTxSignalFull(OAIHttpRequestWorker *worker, OAIBroadcastTxResponse summary);
    void testnetBurnTokenSignalFull(OAIHttpRequestWorker *worker, OAIBurnTokenResponse summary);
    void testnetGetAddressInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetAddressInfoResponse summary);
    void testnetGetTokenHoldersSignalFull(OAIHttpRequestWorker *worker, OAIGetTokenHoldersResponse summary);
    void testnetGetTokenIdSignalFull(OAIHttpRequestWorker *worker, OAIGetTokenIdResponse summary);
    void testnetGetTokenMetadataSignalFull(OAIHttpRequestWorker *worker, OAIGetTokenMetadataResponse summary);
    void testnetGetTokenMetadataOfUtxoSignalFull(OAIHttpRequestWorker *worker, OAIGetTokenMetadataResponse summary);
    void testnetGetTransactionInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetTransactionInfoResponse summary);
    void testnetIssueTokenSignalFull(OAIHttpRequestWorker *worker, OAIIssueTokenResponse summary);
    void testnetSendTokenSignalFull(OAIHttpRequestWorker *worker, OAISendTokenResponse summary);

    Q_DECL_DEPRECATED_X("Use testnetBroadcastTxSignalError() instead")
    void testnetBroadcastTxSignalE(OAIBroadcastTxResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetBroadcastTxSignalError(OAIBroadcastTxResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetBurnTokenSignalError() instead")
    void testnetBurnTokenSignalE(OAIBurnTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetBurnTokenSignalError(OAIBurnTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressInfoSignalError() instead")
    void testnetGetAddressInfoSignalE(OAIGetAddressInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressInfoSignalError(OAIGetAddressInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTokenHoldersSignalError() instead")
    void testnetGetTokenHoldersSignalE(OAIGetTokenHoldersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTokenHoldersSignalError(OAIGetTokenHoldersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTokenIdSignalError() instead")
    void testnetGetTokenIdSignalE(OAIGetTokenIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTokenIdSignalError(OAIGetTokenIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTokenMetadataSignalError() instead")
    void testnetGetTokenMetadataSignalE(OAIGetTokenMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTokenMetadataSignalError(OAIGetTokenMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTokenMetadataOfUtxoSignalError() instead")
    void testnetGetTokenMetadataOfUtxoSignalE(OAIGetTokenMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTokenMetadataOfUtxoSignalError(OAIGetTokenMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTransactionInfoSignalError() instead")
    void testnetGetTransactionInfoSignalE(OAIGetTransactionInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTransactionInfoSignalError(OAIGetTransactionInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetIssueTokenSignalError() instead")
    void testnetIssueTokenSignalE(OAIIssueTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetIssueTokenSignalError(OAIIssueTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetSendTokenSignalError() instead")
    void testnetSendTokenSignalE(OAISendTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetSendTokenSignalError(OAISendTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use testnetBroadcastTxSignalErrorFull() instead")
    void testnetBroadcastTxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetBroadcastTxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetBurnTokenSignalErrorFull() instead")
    void testnetBurnTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetBurnTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetAddressInfoSignalErrorFull() instead")
    void testnetGetAddressInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetAddressInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTokenHoldersSignalErrorFull() instead")
    void testnetGetTokenHoldersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTokenHoldersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTokenIdSignalErrorFull() instead")
    void testnetGetTokenIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTokenIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTokenMetadataSignalErrorFull() instead")
    void testnetGetTokenMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTokenMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTokenMetadataOfUtxoSignalErrorFull() instead")
    void testnetGetTokenMetadataOfUtxoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTokenMetadataOfUtxoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetGetTransactionInfoSignalErrorFull() instead")
    void testnetGetTransactionInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetGetTransactionInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetIssueTokenSignalErrorFull() instead")
    void testnetIssueTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetIssueTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testnetSendTokenSignalErrorFull() instead")
    void testnetSendTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testnetSendTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
