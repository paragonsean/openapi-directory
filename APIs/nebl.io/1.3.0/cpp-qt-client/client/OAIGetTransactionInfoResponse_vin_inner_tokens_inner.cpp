/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTransactionInfoResponse_vin_inner_tokens_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTransactionInfoResponse_vin_inner_tokens_inner::OAIGetTransactionInfoResponse_vin_inner_tokens_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTransactionInfoResponse_vin_inner_tokens_inner::OAIGetTransactionInfoResponse_vin_inner_tokens_inner() {
    this->initializeModel();
}

OAIGetTransactionInfoResponse_vin_inner_tokens_inner::~OAIGetTransactionInfoResponse_vin_inner_tokens_inner() {}

void OAIGetTransactionInfoResponse_vin_inner_tokens_inner::initializeModel() {

    m_aggregation_policy_isSet = false;
    m_aggregation_policy_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_divisibility_isSet = false;
    m_divisibility_isValid = false;

    m_issue_txid_isSet = false;
    m_issue_txid_isValid = false;

    m_lock_status_isSet = false;
    m_lock_status_isValid = false;

    m_token_id_isSet = false;
    m_token_id_isValid = false;
}

void OAIGetTransactionInfoResponse_vin_inner_tokens_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTransactionInfoResponse_vin_inner_tokens_inner::fromJsonObject(QJsonObject json) {

    m_aggregation_policy_isValid = ::OpenAPI::fromJsonValue(m_aggregation_policy, json[QString("aggregationPolicy")]);
    m_aggregation_policy_isSet = !json[QString("aggregationPolicy")].isNull() && m_aggregation_policy_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_divisibility_isValid = ::OpenAPI::fromJsonValue(m_divisibility, json[QString("divisibility")]);
    m_divisibility_isSet = !json[QString("divisibility")].isNull() && m_divisibility_isValid;

    m_issue_txid_isValid = ::OpenAPI::fromJsonValue(m_issue_txid, json[QString("issueTxid")]);
    m_issue_txid_isSet = !json[QString("issueTxid")].isNull() && m_issue_txid_isValid;

    m_lock_status_isValid = ::OpenAPI::fromJsonValue(m_lock_status, json[QString("lockStatus")]);
    m_lock_status_isSet = !json[QString("lockStatus")].isNull() && m_lock_status_isValid;

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("tokenId")]);
    m_token_id_isSet = !json[QString("tokenId")].isNull() && m_token_id_isValid;
}

QString OAIGetTransactionInfoResponse_vin_inner_tokens_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTransactionInfoResponse_vin_inner_tokens_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_policy_isSet) {
        obj.insert(QString("aggregationPolicy"), ::OpenAPI::toJsonValue(m_aggregation_policy));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_divisibility_isSet) {
        obj.insert(QString("divisibility"), ::OpenAPI::toJsonValue(m_divisibility));
    }
    if (m_issue_txid_isSet) {
        obj.insert(QString("issueTxid"), ::OpenAPI::toJsonValue(m_issue_txid));
    }
    if (m_lock_status_isSet) {
        obj.insert(QString("lockStatus"), ::OpenAPI::toJsonValue(m_lock_status));
    }
    if (m_token_id_isSet) {
        obj.insert(QString("tokenId"), ::OpenAPI::toJsonValue(m_token_id));
    }
    return obj;
}

QString OAIGetTransactionInfoResponse_vin_inner_tokens_inner::getAggregationPolicy() const {
    return m_aggregation_policy;
}
void OAIGetTransactionInfoResponse_vin_inner_tokens_inner::setAggregationPolicy(const QString &aggregation_policy) {
    m_aggregation_policy = aggregation_policy;
    m_aggregation_policy_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_aggregation_policy_Set() const{
    return m_aggregation_policy_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_aggregation_policy_Valid() const{
    return m_aggregation_policy_isValid;
}

double OAIGetTransactionInfoResponse_vin_inner_tokens_inner::getAmount() const {
    return m_amount;
}
void OAIGetTransactionInfoResponse_vin_inner_tokens_inner::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAIGetTransactionInfoResponse_vin_inner_tokens_inner::getDivisibility() const {
    return m_divisibility;
}
void OAIGetTransactionInfoResponse_vin_inner_tokens_inner::setDivisibility(const double &divisibility) {
    m_divisibility = divisibility;
    m_divisibility_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_divisibility_Set() const{
    return m_divisibility_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_divisibility_Valid() const{
    return m_divisibility_isValid;
}

QString OAIGetTransactionInfoResponse_vin_inner_tokens_inner::getIssueTxid() const {
    return m_issue_txid;
}
void OAIGetTransactionInfoResponse_vin_inner_tokens_inner::setIssueTxid(const QString &issue_txid) {
    m_issue_txid = issue_txid;
    m_issue_txid_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_issue_txid_Set() const{
    return m_issue_txid_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_issue_txid_Valid() const{
    return m_issue_txid_isValid;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::isLockStatus() const {
    return m_lock_status;
}
void OAIGetTransactionInfoResponse_vin_inner_tokens_inner::setLockStatus(const bool &lock_status) {
    m_lock_status = lock_status;
    m_lock_status_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_lock_status_Set() const{
    return m_lock_status_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_lock_status_Valid() const{
    return m_lock_status_isValid;
}

QString OAIGetTransactionInfoResponse_vin_inner_tokens_inner::getTokenId() const {
    return m_token_id;
}
void OAIGetTransactionInfoResponse_vin_inner_tokens_inner::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::is_token_id_Valid() const{
    return m_token_id_isValid;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_divisibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_txid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTransactionInfoResponse_vin_inner_tokens_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
