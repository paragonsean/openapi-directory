/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTxResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTxResponse::OAIGetTxResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTxResponse::OAIGetTxResponse() {
    this->initializeModel();
}

OAIGetTxResponse::~OAIGetTxResponse() {}

void OAIGetTxResponse::initializeModel() {

    m_blockhash_isSet = false;
    m_blockhash_isValid = false;

    m_blockheight_isSet = false;
    m_blockheight_isValid = false;

    m_blocktime_isSet = false;
    m_blocktime_isValid = false;

    m_confirmations_isSet = false;
    m_confirmations_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_fees_isSet = false;
    m_fees_isValid = false;

    m_locktime_isSet = false;
    m_locktime_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_totalsent_isSet = false;
    m_totalsent_isValid = false;

    m_txid_isSet = false;
    m_txid_isValid = false;

    m_value_in_isSet = false;
    m_value_in_isValid = false;

    m_value_out_isSet = false;
    m_value_out_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_vin_isSet = false;
    m_vin_isValid = false;

    m_vout_isSet = false;
    m_vout_isValid = false;
}

void OAIGetTxResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTxResponse::fromJsonObject(QJsonObject json) {

    m_blockhash_isValid = ::OpenAPI::fromJsonValue(m_blockhash, json[QString("blockhash")]);
    m_blockhash_isSet = !json[QString("blockhash")].isNull() && m_blockhash_isValid;

    m_blockheight_isValid = ::OpenAPI::fromJsonValue(m_blockheight, json[QString("blockheight")]);
    m_blockheight_isSet = !json[QString("blockheight")].isNull() && m_blockheight_isValid;

    m_blocktime_isValid = ::OpenAPI::fromJsonValue(m_blocktime, json[QString("blocktime")]);
    m_blocktime_isSet = !json[QString("blocktime")].isNull() && m_blocktime_isValid;

    m_confirmations_isValid = ::OpenAPI::fromJsonValue(m_confirmations, json[QString("confirmations")]);
    m_confirmations_isSet = !json[QString("confirmations")].isNull() && m_confirmations_isValid;

    m_fee_isValid = ::OpenAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_fees_isValid = ::OpenAPI::fromJsonValue(m_fees, json[QString("fees")]);
    m_fees_isSet = !json[QString("fees")].isNull() && m_fees_isValid;

    m_locktime_isValid = ::OpenAPI::fromJsonValue(m_locktime, json[QString("locktime")]);
    m_locktime_isSet = !json[QString("locktime")].isNull() && m_locktime_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_totalsent_isValid = ::OpenAPI::fromJsonValue(m_totalsent, json[QString("totalsent")]);
    m_totalsent_isSet = !json[QString("totalsent")].isNull() && m_totalsent_isValid;

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;

    m_value_in_isValid = ::OpenAPI::fromJsonValue(m_value_in, json[QString("valueIn")]);
    m_value_in_isSet = !json[QString("valueIn")].isNull() && m_value_in_isValid;

    m_value_out_isValid = ::OpenAPI::fromJsonValue(m_value_out, json[QString("valueOut")]);
    m_value_out_isSet = !json[QString("valueOut")].isNull() && m_value_out_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_vin_isValid = ::OpenAPI::fromJsonValue(m_vin, json[QString("vin")]);
    m_vin_isSet = !json[QString("vin")].isNull() && m_vin_isValid;

    m_vout_isValid = ::OpenAPI::fromJsonValue(m_vout, json[QString("vout")]);
    m_vout_isSet = !json[QString("vout")].isNull() && m_vout_isValid;
}

QString OAIGetTxResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTxResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_blockhash_isSet) {
        obj.insert(QString("blockhash"), ::OpenAPI::toJsonValue(m_blockhash));
    }
    if (m_blockheight_isSet) {
        obj.insert(QString("blockheight"), ::OpenAPI::toJsonValue(m_blockheight));
    }
    if (m_blocktime_isSet) {
        obj.insert(QString("blocktime"), ::OpenAPI::toJsonValue(m_blocktime));
    }
    if (m_confirmations_isSet) {
        obj.insert(QString("confirmations"), ::OpenAPI::toJsonValue(m_confirmations));
    }
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::OpenAPI::toJsonValue(m_fee));
    }
    if (m_fees_isSet) {
        obj.insert(QString("fees"), ::OpenAPI::toJsonValue(m_fees));
    }
    if (m_locktime_isSet) {
        obj.insert(QString("locktime"), ::OpenAPI::toJsonValue(m_locktime));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_totalsent_isSet) {
        obj.insert(QString("totalsent"), ::OpenAPI::toJsonValue(m_totalsent));
    }
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    if (m_value_in_isSet) {
        obj.insert(QString("valueIn"), ::OpenAPI::toJsonValue(m_value_in));
    }
    if (m_value_out_isSet) {
        obj.insert(QString("valueOut"), ::OpenAPI::toJsonValue(m_value_out));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_vin.size() > 0) {
        obj.insert(QString("vin"), ::OpenAPI::toJsonValue(m_vin));
    }
    if (m_vout.size() > 0) {
        obj.insert(QString("vout"), ::OpenAPI::toJsonValue(m_vout));
    }
    return obj;
}

QString OAIGetTxResponse::getBlockhash() const {
    return m_blockhash;
}
void OAIGetTxResponse::setBlockhash(const QString &blockhash) {
    m_blockhash = blockhash;
    m_blockhash_isSet = true;
}

bool OAIGetTxResponse::is_blockhash_Set() const{
    return m_blockhash_isSet;
}

bool OAIGetTxResponse::is_blockhash_Valid() const{
    return m_blockhash_isValid;
}

double OAIGetTxResponse::getBlockheight() const {
    return m_blockheight;
}
void OAIGetTxResponse::setBlockheight(const double &blockheight) {
    m_blockheight = blockheight;
    m_blockheight_isSet = true;
}

bool OAIGetTxResponse::is_blockheight_Set() const{
    return m_blockheight_isSet;
}

bool OAIGetTxResponse::is_blockheight_Valid() const{
    return m_blockheight_isValid;
}

double OAIGetTxResponse::getBlocktime() const {
    return m_blocktime;
}
void OAIGetTxResponse::setBlocktime(const double &blocktime) {
    m_blocktime = blocktime;
    m_blocktime_isSet = true;
}

bool OAIGetTxResponse::is_blocktime_Set() const{
    return m_blocktime_isSet;
}

bool OAIGetTxResponse::is_blocktime_Valid() const{
    return m_blocktime_isValid;
}

double OAIGetTxResponse::getConfirmations() const {
    return m_confirmations;
}
void OAIGetTxResponse::setConfirmations(const double &confirmations) {
    m_confirmations = confirmations;
    m_confirmations_isSet = true;
}

bool OAIGetTxResponse::is_confirmations_Set() const{
    return m_confirmations_isSet;
}

bool OAIGetTxResponse::is_confirmations_Valid() const{
    return m_confirmations_isValid;
}

double OAIGetTxResponse::getFee() const {
    return m_fee;
}
void OAIGetTxResponse::setFee(const double &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool OAIGetTxResponse::is_fee_Set() const{
    return m_fee_isSet;
}

bool OAIGetTxResponse::is_fee_Valid() const{
    return m_fee_isValid;
}

double OAIGetTxResponse::getFees() const {
    return m_fees;
}
void OAIGetTxResponse::setFees(const double &fees) {
    m_fees = fees;
    m_fees_isSet = true;
}

bool OAIGetTxResponse::is_fees_Set() const{
    return m_fees_isSet;
}

bool OAIGetTxResponse::is_fees_Valid() const{
    return m_fees_isValid;
}

double OAIGetTxResponse::getLocktime() const {
    return m_locktime;
}
void OAIGetTxResponse::setLocktime(const double &locktime) {
    m_locktime = locktime;
    m_locktime_isSet = true;
}

bool OAIGetTxResponse::is_locktime_Set() const{
    return m_locktime_isSet;
}

bool OAIGetTxResponse::is_locktime_Valid() const{
    return m_locktime_isValid;
}

double OAIGetTxResponse::getSize() const {
    return m_size;
}
void OAIGetTxResponse::setSize(const double &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIGetTxResponse::is_size_Set() const{
    return m_size_isSet;
}

bool OAIGetTxResponse::is_size_Valid() const{
    return m_size_isValid;
}

double OAIGetTxResponse::getTime() const {
    return m_time;
}
void OAIGetTxResponse::setTime(const double &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIGetTxResponse::is_time_Set() const{
    return m_time_isSet;
}

bool OAIGetTxResponse::is_time_Valid() const{
    return m_time_isValid;
}

double OAIGetTxResponse::getTotalsent() const {
    return m_totalsent;
}
void OAIGetTxResponse::setTotalsent(const double &totalsent) {
    m_totalsent = totalsent;
    m_totalsent_isSet = true;
}

bool OAIGetTxResponse::is_totalsent_Set() const{
    return m_totalsent_isSet;
}

bool OAIGetTxResponse::is_totalsent_Valid() const{
    return m_totalsent_isValid;
}

QString OAIGetTxResponse::getTxid() const {
    return m_txid;
}
void OAIGetTxResponse::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAIGetTxResponse::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAIGetTxResponse::is_txid_Valid() const{
    return m_txid_isValid;
}

double OAIGetTxResponse::getValueIn() const {
    return m_value_in;
}
void OAIGetTxResponse::setValueIn(const double &value_in) {
    m_value_in = value_in;
    m_value_in_isSet = true;
}

bool OAIGetTxResponse::is_value_in_Set() const{
    return m_value_in_isSet;
}

bool OAIGetTxResponse::is_value_in_Valid() const{
    return m_value_in_isValid;
}

double OAIGetTxResponse::getValueOut() const {
    return m_value_out;
}
void OAIGetTxResponse::setValueOut(const double &value_out) {
    m_value_out = value_out;
    m_value_out_isSet = true;
}

bool OAIGetTxResponse::is_value_out_Set() const{
    return m_value_out_isSet;
}

bool OAIGetTxResponse::is_value_out_Valid() const{
    return m_value_out_isValid;
}

double OAIGetTxResponse::getVersion() const {
    return m_version;
}
void OAIGetTxResponse::setVersion(const double &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetTxResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetTxResponse::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAIGetTxResponse_vin_inner> OAIGetTxResponse::getVin() const {
    return m_vin;
}
void OAIGetTxResponse::setVin(const QList<OAIGetTxResponse_vin_inner> &vin) {
    m_vin = vin;
    m_vin_isSet = true;
}

bool OAIGetTxResponse::is_vin_Set() const{
    return m_vin_isSet;
}

bool OAIGetTxResponse::is_vin_Valid() const{
    return m_vin_isValid;
}

QList<OAIGetTxResponse_vout_inner> OAIGetTxResponse::getVout() const {
    return m_vout;
}
void OAIGetTxResponse::setVout(const QList<OAIGetTxResponse_vout_inner> &vout) {
    m_vout = vout;
    m_vout_isSet = true;
}

bool OAIGetTxResponse::is_vout_Set() const{
    return m_vout_isSet;
}

bool OAIGetTxResponse::is_vout_Valid() const{
    return m_vout_isValid;
}

bool OAIGetTxResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blockhash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blockheight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocktime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locktime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totalsent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vin.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vout.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTxResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
