/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueTokenRequest_metadata_urls_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueTokenRequest_metadata_urls_inner::OAIIssueTokenRequest_metadata_urls_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueTokenRequest_metadata_urls_inner::OAIIssueTokenRequest_metadata_urls_inner() {
    this->initializeModel();
}

OAIIssueTokenRequest_metadata_urls_inner::~OAIIssueTokenRequest_metadata_urls_inner() {}

void OAIIssueTokenRequest_metadata_urls_inner::initializeModel() {

    m_data_hash_isSet = false;
    m_data_hash_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIIssueTokenRequest_metadata_urls_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueTokenRequest_metadata_urls_inner::fromJsonObject(QJsonObject json) {

    m_data_hash_isValid = ::OpenAPI::fromJsonValue(m_data_hash, json[QString("dataHash")]);
    m_data_hash_isSet = !json[QString("dataHash")].isNull() && m_data_hash_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIIssueTokenRequest_metadata_urls_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueTokenRequest_metadata_urls_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_data_hash_isSet) {
        obj.insert(QString("dataHash"), ::OpenAPI::toJsonValue(m_data_hash));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIIssueTokenRequest_metadata_urls_inner::getDataHash() const {
    return m_data_hash;
}
void OAIIssueTokenRequest_metadata_urls_inner::setDataHash(const QString &data_hash) {
    m_data_hash = data_hash;
    m_data_hash_isSet = true;
}

bool OAIIssueTokenRequest_metadata_urls_inner::is_data_hash_Set() const{
    return m_data_hash_isSet;
}

bool OAIIssueTokenRequest_metadata_urls_inner::is_data_hash_Valid() const{
    return m_data_hash_isValid;
}

QString OAIIssueTokenRequest_metadata_urls_inner::getMimeType() const {
    return m_mime_type;
}
void OAIIssueTokenRequest_metadata_urls_inner::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIIssueTokenRequest_metadata_urls_inner::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIIssueTokenRequest_metadata_urls_inner::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIIssueTokenRequest_metadata_urls_inner::getName() const {
    return m_name;
}
void OAIIssueTokenRequest_metadata_urls_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIssueTokenRequest_metadata_urls_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIssueTokenRequest_metadata_urls_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIssueTokenRequest_metadata_urls_inner::getUrl() const {
    return m_url;
}
void OAIIssueTokenRequest_metadata_urls_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIssueTokenRequest_metadata_urls_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIssueTokenRequest_metadata_urls_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIIssueTokenRequest_metadata_urls_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueTokenRequest_metadata_urls_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
