/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAddressResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAddressResponse::OAIGetAddressResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAddressResponse::OAIGetAddressResponse() {
    this->initializeModel();
}

OAIGetAddressResponse::~OAIGetAddressResponse() {}

void OAIGetAddressResponse::initializeModel() {

    m_addr_str_isSet = false;
    m_addr_str_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_balance_sat_isSet = false;
    m_balance_sat_isValid = false;

    m_total_received_isSet = false;
    m_total_received_isValid = false;

    m_total_received_sat_isSet = false;
    m_total_received_sat_isValid = false;

    m_total_sent_isSet = false;
    m_total_sent_isValid = false;

    m_total_sent_sat_isSet = false;
    m_total_sent_sat_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;

    m_tx_appearances_isSet = false;
    m_tx_appearances_isValid = false;

    m_unconfirmed_balance_isSet = false;
    m_unconfirmed_balance_isValid = false;

    m_unconfirmed_balance_sat_isSet = false;
    m_unconfirmed_balance_sat_isValid = false;

    m_unconfirmed_tx_appearances_isSet = false;
    m_unconfirmed_tx_appearances_isValid = false;
}

void OAIGetAddressResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAddressResponse::fromJsonObject(QJsonObject json) {

    m_addr_str_isValid = ::OpenAPI::fromJsonValue(m_addr_str, json[QString("addrStr")]);
    m_addr_str_isSet = !json[QString("addrStr")].isNull() && m_addr_str_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_balance_sat_isValid = ::OpenAPI::fromJsonValue(m_balance_sat, json[QString("balanceSat")]);
    m_balance_sat_isSet = !json[QString("balanceSat")].isNull() && m_balance_sat_isValid;

    m_total_received_isValid = ::OpenAPI::fromJsonValue(m_total_received, json[QString("totalReceived")]);
    m_total_received_isSet = !json[QString("totalReceived")].isNull() && m_total_received_isValid;

    m_total_received_sat_isValid = ::OpenAPI::fromJsonValue(m_total_received_sat, json[QString("totalReceivedSat")]);
    m_total_received_sat_isSet = !json[QString("totalReceivedSat")].isNull() && m_total_received_sat_isValid;

    m_total_sent_isValid = ::OpenAPI::fromJsonValue(m_total_sent, json[QString("totalSent")]);
    m_total_sent_isSet = !json[QString("totalSent")].isNull() && m_total_sent_isValid;

    m_total_sent_sat_isValid = ::OpenAPI::fromJsonValue(m_total_sent_sat, json[QString("totalSentSat")]);
    m_total_sent_sat_isSet = !json[QString("totalSentSat")].isNull() && m_total_sent_sat_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;

    m_tx_appearances_isValid = ::OpenAPI::fromJsonValue(m_tx_appearances, json[QString("txAppearances")]);
    m_tx_appearances_isSet = !json[QString("txAppearances")].isNull() && m_tx_appearances_isValid;

    m_unconfirmed_balance_isValid = ::OpenAPI::fromJsonValue(m_unconfirmed_balance, json[QString("unconfirmedBalance")]);
    m_unconfirmed_balance_isSet = !json[QString("unconfirmedBalance")].isNull() && m_unconfirmed_balance_isValid;

    m_unconfirmed_balance_sat_isValid = ::OpenAPI::fromJsonValue(m_unconfirmed_balance_sat, json[QString("unconfirmedBalanceSat")]);
    m_unconfirmed_balance_sat_isSet = !json[QString("unconfirmedBalanceSat")].isNull() && m_unconfirmed_balance_sat_isValid;

    m_unconfirmed_tx_appearances_isValid = ::OpenAPI::fromJsonValue(m_unconfirmed_tx_appearances, json[QString("unconfirmedTxAppearances")]);
    m_unconfirmed_tx_appearances_isSet = !json[QString("unconfirmedTxAppearances")].isNull() && m_unconfirmed_tx_appearances_isValid;
}

QString OAIGetAddressResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAddressResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_addr_str_isSet) {
        obj.insert(QString("addrStr"), ::OpenAPI::toJsonValue(m_addr_str));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_balance_sat_isSet) {
        obj.insert(QString("balanceSat"), ::OpenAPI::toJsonValue(m_balance_sat));
    }
    if (m_total_received_isSet) {
        obj.insert(QString("totalReceived"), ::OpenAPI::toJsonValue(m_total_received));
    }
    if (m_total_received_sat_isSet) {
        obj.insert(QString("totalReceivedSat"), ::OpenAPI::toJsonValue(m_total_received_sat));
    }
    if (m_total_sent_isSet) {
        obj.insert(QString("totalSent"), ::OpenAPI::toJsonValue(m_total_sent));
    }
    if (m_total_sent_sat_isSet) {
        obj.insert(QString("totalSentSat"), ::OpenAPI::toJsonValue(m_total_sent_sat));
    }
    if (m_transactions.size() > 0) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    if (m_tx_appearances_isSet) {
        obj.insert(QString("txAppearances"), ::OpenAPI::toJsonValue(m_tx_appearances));
    }
    if (m_unconfirmed_balance_isSet) {
        obj.insert(QString("unconfirmedBalance"), ::OpenAPI::toJsonValue(m_unconfirmed_balance));
    }
    if (m_unconfirmed_balance_sat_isSet) {
        obj.insert(QString("unconfirmedBalanceSat"), ::OpenAPI::toJsonValue(m_unconfirmed_balance_sat));
    }
    if (m_unconfirmed_tx_appearances_isSet) {
        obj.insert(QString("unconfirmedTxAppearances"), ::OpenAPI::toJsonValue(m_unconfirmed_tx_appearances));
    }
    return obj;
}

QString OAIGetAddressResponse::getAddrStr() const {
    return m_addr_str;
}
void OAIGetAddressResponse::setAddrStr(const QString &addr_str) {
    m_addr_str = addr_str;
    m_addr_str_isSet = true;
}

bool OAIGetAddressResponse::is_addr_str_Set() const{
    return m_addr_str_isSet;
}

bool OAIGetAddressResponse::is_addr_str_Valid() const{
    return m_addr_str_isValid;
}

double OAIGetAddressResponse::getBalance() const {
    return m_balance;
}
void OAIGetAddressResponse::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIGetAddressResponse::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIGetAddressResponse::is_balance_Valid() const{
    return m_balance_isValid;
}

double OAIGetAddressResponse::getBalanceSat() const {
    return m_balance_sat;
}
void OAIGetAddressResponse::setBalanceSat(const double &balance_sat) {
    m_balance_sat = balance_sat;
    m_balance_sat_isSet = true;
}

bool OAIGetAddressResponse::is_balance_sat_Set() const{
    return m_balance_sat_isSet;
}

bool OAIGetAddressResponse::is_balance_sat_Valid() const{
    return m_balance_sat_isValid;
}

double OAIGetAddressResponse::getTotalReceived() const {
    return m_total_received;
}
void OAIGetAddressResponse::setTotalReceived(const double &total_received) {
    m_total_received = total_received;
    m_total_received_isSet = true;
}

bool OAIGetAddressResponse::is_total_received_Set() const{
    return m_total_received_isSet;
}

bool OAIGetAddressResponse::is_total_received_Valid() const{
    return m_total_received_isValid;
}

double OAIGetAddressResponse::getTotalReceivedSat() const {
    return m_total_received_sat;
}
void OAIGetAddressResponse::setTotalReceivedSat(const double &total_received_sat) {
    m_total_received_sat = total_received_sat;
    m_total_received_sat_isSet = true;
}

bool OAIGetAddressResponse::is_total_received_sat_Set() const{
    return m_total_received_sat_isSet;
}

bool OAIGetAddressResponse::is_total_received_sat_Valid() const{
    return m_total_received_sat_isValid;
}

double OAIGetAddressResponse::getTotalSent() const {
    return m_total_sent;
}
void OAIGetAddressResponse::setTotalSent(const double &total_sent) {
    m_total_sent = total_sent;
    m_total_sent_isSet = true;
}

bool OAIGetAddressResponse::is_total_sent_Set() const{
    return m_total_sent_isSet;
}

bool OAIGetAddressResponse::is_total_sent_Valid() const{
    return m_total_sent_isValid;
}

double OAIGetAddressResponse::getTotalSentSat() const {
    return m_total_sent_sat;
}
void OAIGetAddressResponse::setTotalSentSat(const double &total_sent_sat) {
    m_total_sent_sat = total_sent_sat;
    m_total_sent_sat_isSet = true;
}

bool OAIGetAddressResponse::is_total_sent_sat_Set() const{
    return m_total_sent_sat_isSet;
}

bool OAIGetAddressResponse::is_total_sent_sat_Valid() const{
    return m_total_sent_sat_isValid;
}

QList<QString> OAIGetAddressResponse::getTransactions() const {
    return m_transactions;
}
void OAIGetAddressResponse::setTransactions(const QList<QString> &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIGetAddressResponse::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIGetAddressResponse::is_transactions_Valid() const{
    return m_transactions_isValid;
}

double OAIGetAddressResponse::getTxAppearances() const {
    return m_tx_appearances;
}
void OAIGetAddressResponse::setTxAppearances(const double &tx_appearances) {
    m_tx_appearances = tx_appearances;
    m_tx_appearances_isSet = true;
}

bool OAIGetAddressResponse::is_tx_appearances_Set() const{
    return m_tx_appearances_isSet;
}

bool OAIGetAddressResponse::is_tx_appearances_Valid() const{
    return m_tx_appearances_isValid;
}

double OAIGetAddressResponse::getUnconfirmedBalance() const {
    return m_unconfirmed_balance;
}
void OAIGetAddressResponse::setUnconfirmedBalance(const double &unconfirmed_balance) {
    m_unconfirmed_balance = unconfirmed_balance;
    m_unconfirmed_balance_isSet = true;
}

bool OAIGetAddressResponse::is_unconfirmed_balance_Set() const{
    return m_unconfirmed_balance_isSet;
}

bool OAIGetAddressResponse::is_unconfirmed_balance_Valid() const{
    return m_unconfirmed_balance_isValid;
}

double OAIGetAddressResponse::getUnconfirmedBalanceSat() const {
    return m_unconfirmed_balance_sat;
}
void OAIGetAddressResponse::setUnconfirmedBalanceSat(const double &unconfirmed_balance_sat) {
    m_unconfirmed_balance_sat = unconfirmed_balance_sat;
    m_unconfirmed_balance_sat_isSet = true;
}

bool OAIGetAddressResponse::is_unconfirmed_balance_sat_Set() const{
    return m_unconfirmed_balance_sat_isSet;
}

bool OAIGetAddressResponse::is_unconfirmed_balance_sat_Valid() const{
    return m_unconfirmed_balance_sat_isValid;
}

double OAIGetAddressResponse::getUnconfirmedTxAppearances() const {
    return m_unconfirmed_tx_appearances;
}
void OAIGetAddressResponse::setUnconfirmedTxAppearances(const double &unconfirmed_tx_appearances) {
    m_unconfirmed_tx_appearances = unconfirmed_tx_appearances;
    m_unconfirmed_tx_appearances_isSet = true;
}

bool OAIGetAddressResponse::is_unconfirmed_tx_appearances_Set() const{
    return m_unconfirmed_tx_appearances_isSet;
}

bool OAIGetAddressResponse::is_unconfirmed_tx_appearances_Valid() const{
    return m_unconfirmed_tx_appearances_isValid;
}

bool OAIGetAddressResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addr_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_sat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_received_sat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_sent_sat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tx_appearances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unconfirmed_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unconfirmed_balance_sat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unconfirmed_tx_appearances_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAddressResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
