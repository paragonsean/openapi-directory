/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSyncResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSyncResponse::OAIGetSyncResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSyncResponse::OAIGetSyncResponse() {
    this->initializeModel();
}

OAIGetSyncResponse::~OAIGetSyncResponse() {}

void OAIGetSyncResponse::initializeModel() {

    m_block_chain_height_isSet = false;
    m_block_chain_height_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sync_percentage_isSet = false;
    m_sync_percentage_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGetSyncResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSyncResponse::fromJsonObject(QJsonObject json) {

    m_block_chain_height_isValid = ::OpenAPI::fromJsonValue(m_block_chain_height, json[QString("blockChainHeight")]);
    m_block_chain_height_isSet = !json[QString("blockChainHeight")].isNull() && m_block_chain_height_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sync_percentage_isValid = ::OpenAPI::fromJsonValue(m_sync_percentage, json[QString("syncPercentage")]);
    m_sync_percentage_isSet = !json[QString("syncPercentage")].isNull() && m_sync_percentage_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGetSyncResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSyncResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_block_chain_height_isSet) {
        obj.insert(QString("blockChainHeight"), ::OpenAPI::toJsonValue(m_block_chain_height));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sync_percentage_isSet) {
        obj.insert(QString("syncPercentage"), ::OpenAPI::toJsonValue(m_sync_percentage));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAIGetSyncResponse::getBlockChainHeight() const {
    return m_block_chain_height;
}
void OAIGetSyncResponse::setBlockChainHeight(const double &block_chain_height) {
    m_block_chain_height = block_chain_height;
    m_block_chain_height_isSet = true;
}

bool OAIGetSyncResponse::is_block_chain_height_Set() const{
    return m_block_chain_height_isSet;
}

bool OAIGetSyncResponse::is_block_chain_height_Valid() const{
    return m_block_chain_height_isValid;
}

QString OAIGetSyncResponse::getError() const {
    return m_error;
}
void OAIGetSyncResponse::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGetSyncResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGetSyncResponse::is_error_Valid() const{
    return m_error_isValid;
}

double OAIGetSyncResponse::getHeight() const {
    return m_height;
}
void OAIGetSyncResponse::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIGetSyncResponse::is_height_Set() const{
    return m_height_isSet;
}

bool OAIGetSyncResponse::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIGetSyncResponse::getStatus() const {
    return m_status;
}
void OAIGetSyncResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetSyncResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetSyncResponse::is_status_Valid() const{
    return m_status_isValid;
}

double OAIGetSyncResponse::getSyncPercentage() const {
    return m_sync_percentage;
}
void OAIGetSyncResponse::setSyncPercentage(const double &sync_percentage) {
    m_sync_percentage = sync_percentage;
    m_sync_percentage_isSet = true;
}

bool OAIGetSyncResponse::is_sync_percentage_Set() const{
    return m_sync_percentage_isSet;
}

bool OAIGetSyncResponse::is_sync_percentage_Valid() const{
    return m_sync_percentage_isValid;
}

QString OAIGetSyncResponse::getType() const {
    return m_type;
}
void OAIGetSyncResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetSyncResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetSyncResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGetSyncResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_chain_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSyncResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
