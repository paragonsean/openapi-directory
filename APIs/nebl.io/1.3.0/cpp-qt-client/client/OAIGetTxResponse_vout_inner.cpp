/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTxResponse_vout_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTxResponse_vout_inner::OAIGetTxResponse_vout_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTxResponse_vout_inner::OAIGetTxResponse_vout_inner() {
    this->initializeModel();
}

OAIGetTxResponse_vout_inner::~OAIGetTxResponse_vout_inner() {}

void OAIGetTxResponse_vout_inner::initializeModel() {

    m_blockheight_isSet = false;
    m_blockheight_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;

    m_script_pub_key_isSet = false;
    m_script_pub_key_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;

    m_used_blockheight_isSet = false;
    m_used_blockheight_isValid = false;

    m_used_txid_isSet = false;
    m_used_txid_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGetTxResponse_vout_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTxResponse_vout_inner::fromJsonObject(QJsonObject json) {

    m_blockheight_isValid = ::OpenAPI::fromJsonValue(m_blockheight, json[QString("blockheight")]);
    m_blockheight_isSet = !json[QString("blockheight")].isNull() && m_blockheight_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(m_n, json[QString("n")]);
    m_n_isSet = !json[QString("n")].isNull() && m_n_isValid;

    m_script_pub_key_isValid = ::OpenAPI::fromJsonValue(m_script_pub_key, json[QString("scriptPubKey")]);
    m_script_pub_key_isSet = !json[QString("scriptPubKey")].isNull() && m_script_pub_key_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("used")]);
    m_used_isSet = !json[QString("used")].isNull() && m_used_isValid;

    m_used_blockheight_isValid = ::OpenAPI::fromJsonValue(m_used_blockheight, json[QString("usedBlockheight")]);
    m_used_blockheight_isSet = !json[QString("usedBlockheight")].isNull() && m_used_blockheight_isValid;

    m_used_txid_isValid = ::OpenAPI::fromJsonValue(m_used_txid, json[QString("usedTxid")]);
    m_used_txid_isSet = !json[QString("usedTxid")].isNull() && m_used_txid_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGetTxResponse_vout_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTxResponse_vout_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_blockheight_isSet) {
        obj.insert(QString("blockheight"), ::OpenAPI::toJsonValue(m_blockheight));
    }
    if (m_n_isSet) {
        obj.insert(QString("n"), ::OpenAPI::toJsonValue(m_n));
    }
    if (m_script_pub_key.isSet()) {
        obj.insert(QString("scriptPubKey"), ::OpenAPI::toJsonValue(m_script_pub_key));
    }
    if (m_used_isSet) {
        obj.insert(QString("used"), ::OpenAPI::toJsonValue(m_used));
    }
    if (m_used_blockheight_isSet) {
        obj.insert(QString("usedBlockheight"), ::OpenAPI::toJsonValue(m_used_blockheight));
    }
    if (m_used_txid_isSet) {
        obj.insert(QString("usedTxid"), ::OpenAPI::toJsonValue(m_used_txid));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

double OAIGetTxResponse_vout_inner::getBlockheight() const {
    return m_blockheight;
}
void OAIGetTxResponse_vout_inner::setBlockheight(const double &blockheight) {
    m_blockheight = blockheight;
    m_blockheight_isSet = true;
}

bool OAIGetTxResponse_vout_inner::is_blockheight_Set() const{
    return m_blockheight_isSet;
}

bool OAIGetTxResponse_vout_inner::is_blockheight_Valid() const{
    return m_blockheight_isValid;
}

double OAIGetTxResponse_vout_inner::getN() const {
    return m_n;
}
void OAIGetTxResponse_vout_inner::setN(const double &n) {
    m_n = n;
    m_n_isSet = true;
}

bool OAIGetTxResponse_vout_inner::is_n_Set() const{
    return m_n_isSet;
}

bool OAIGetTxResponse_vout_inner::is_n_Valid() const{
    return m_n_isValid;
}

OAIGetTransactionInfoResponse_vin_inner_previousOutput OAIGetTxResponse_vout_inner::getScriptPubKey() const {
    return m_script_pub_key;
}
void OAIGetTxResponse_vout_inner::setScriptPubKey(const OAIGetTransactionInfoResponse_vin_inner_previousOutput &script_pub_key) {
    m_script_pub_key = script_pub_key;
    m_script_pub_key_isSet = true;
}

bool OAIGetTxResponse_vout_inner::is_script_pub_key_Set() const{
    return m_script_pub_key_isSet;
}

bool OAIGetTxResponse_vout_inner::is_script_pub_key_Valid() const{
    return m_script_pub_key_isValid;
}

bool OAIGetTxResponse_vout_inner::isUsed() const {
    return m_used;
}
void OAIGetTxResponse_vout_inner::setUsed(const bool &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIGetTxResponse_vout_inner::is_used_Set() const{
    return m_used_isSet;
}

bool OAIGetTxResponse_vout_inner::is_used_Valid() const{
    return m_used_isValid;
}

double OAIGetTxResponse_vout_inner::getUsedBlockheight() const {
    return m_used_blockheight;
}
void OAIGetTxResponse_vout_inner::setUsedBlockheight(const double &used_blockheight) {
    m_used_blockheight = used_blockheight;
    m_used_blockheight_isSet = true;
}

bool OAIGetTxResponse_vout_inner::is_used_blockheight_Set() const{
    return m_used_blockheight_isSet;
}

bool OAIGetTxResponse_vout_inner::is_used_blockheight_Valid() const{
    return m_used_blockheight_isValid;
}

QString OAIGetTxResponse_vout_inner::getUsedTxid() const {
    return m_used_txid;
}
void OAIGetTxResponse_vout_inner::setUsedTxid(const QString &used_txid) {
    m_used_txid = used_txid;
    m_used_txid_isSet = true;
}

bool OAIGetTxResponse_vout_inner::is_used_txid_Set() const{
    return m_used_txid_isSet;
}

bool OAIGetTxResponse_vout_inner::is_used_txid_Valid() const{
    return m_used_txid_isValid;
}

double OAIGetTxResponse_vout_inner::getValue() const {
    return m_value;
}
void OAIGetTxResponse_vout_inner::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGetTxResponse_vout_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGetTxResponse_vout_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGetTxResponse_vout_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blockheight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_pub_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_blockheight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_txid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTxResponse_vout_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
