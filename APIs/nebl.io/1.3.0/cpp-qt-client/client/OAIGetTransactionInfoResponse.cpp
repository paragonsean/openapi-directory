/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTransactionInfoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTransactionInfoResponse::OAIGetTransactionInfoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTransactionInfoResponse::OAIGetTransactionInfoResponse() {
    this->initializeModel();
}

OAIGetTransactionInfoResponse::~OAIGetTransactionInfoResponse() {}

void OAIGetTransactionInfoResponse::initializeModel() {

    m_blockhash_isSet = false;
    m_blockhash_isValid = false;

    m_blockheight_isSet = false;
    m_blockheight_isValid = false;

    m_blocktime_isSet = false;
    m_blocktime_isValid = false;

    m_confirmations_isSet = false;
    m_confirmations_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_hex_isSet = false;
    m_hex_isValid = false;

    m_locktime_isSet = false;
    m_locktime_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_totalsent_isSet = false;
    m_totalsent_isValid = false;

    m_txid_isSet = false;
    m_txid_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_vin_isSet = false;
    m_vin_isValid = false;

    m_vout_isSet = false;
    m_vout_isValid = false;
}

void OAIGetTransactionInfoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTransactionInfoResponse::fromJsonObject(QJsonObject json) {

    m_blockhash_isValid = ::OpenAPI::fromJsonValue(m_blockhash, json[QString("blockhash")]);
    m_blockhash_isSet = !json[QString("blockhash")].isNull() && m_blockhash_isValid;

    m_blockheight_isValid = ::OpenAPI::fromJsonValue(m_blockheight, json[QString("blockheight")]);
    m_blockheight_isSet = !json[QString("blockheight")].isNull() && m_blockheight_isValid;

    m_blocktime_isValid = ::OpenAPI::fromJsonValue(m_blocktime, json[QString("blocktime")]);
    m_blocktime_isSet = !json[QString("blocktime")].isNull() && m_blocktime_isValid;

    m_confirmations_isValid = ::OpenAPI::fromJsonValue(m_confirmations, json[QString("confirmations")]);
    m_confirmations_isSet = !json[QString("confirmations")].isNull() && m_confirmations_isValid;

    m_fee_isValid = ::OpenAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_hex_isValid = ::OpenAPI::fromJsonValue(m_hex, json[QString("hex")]);
    m_hex_isSet = !json[QString("hex")].isNull() && m_hex_isValid;

    m_locktime_isValid = ::OpenAPI::fromJsonValue(m_locktime, json[QString("locktime")]);
    m_locktime_isSet = !json[QString("locktime")].isNull() && m_locktime_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_totalsent_isValid = ::OpenAPI::fromJsonValue(m_totalsent, json[QString("totalsent")]);
    m_totalsent_isSet = !json[QString("totalsent")].isNull() && m_totalsent_isValid;

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_vin_isValid = ::OpenAPI::fromJsonValue(m_vin, json[QString("vin")]);
    m_vin_isSet = !json[QString("vin")].isNull() && m_vin_isValid;

    m_vout_isValid = ::OpenAPI::fromJsonValue(m_vout, json[QString("vout")]);
    m_vout_isSet = !json[QString("vout")].isNull() && m_vout_isValid;
}

QString OAIGetTransactionInfoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTransactionInfoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_blockhash_isSet) {
        obj.insert(QString("blockhash"), ::OpenAPI::toJsonValue(m_blockhash));
    }
    if (m_blockheight_isSet) {
        obj.insert(QString("blockheight"), ::OpenAPI::toJsonValue(m_blockheight));
    }
    if (m_blocktime_isSet) {
        obj.insert(QString("blocktime"), ::OpenAPI::toJsonValue(m_blocktime));
    }
    if (m_confirmations_isSet) {
        obj.insert(QString("confirmations"), ::OpenAPI::toJsonValue(m_confirmations));
    }
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::OpenAPI::toJsonValue(m_fee));
    }
    if (m_hex_isSet) {
        obj.insert(QString("hex"), ::OpenAPI::toJsonValue(m_hex));
    }
    if (m_locktime_isSet) {
        obj.insert(QString("locktime"), ::OpenAPI::toJsonValue(m_locktime));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_totalsent_isSet) {
        obj.insert(QString("totalsent"), ::OpenAPI::toJsonValue(m_totalsent));
    }
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_vin.size() > 0) {
        obj.insert(QString("vin"), ::OpenAPI::toJsonValue(m_vin));
    }
    if (m_vout.size() > 0) {
        obj.insert(QString("vout"), ::OpenAPI::toJsonValue(m_vout));
    }
    return obj;
}

QString OAIGetTransactionInfoResponse::getBlockhash() const {
    return m_blockhash;
}
void OAIGetTransactionInfoResponse::setBlockhash(const QString &blockhash) {
    m_blockhash = blockhash;
    m_blockhash_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_blockhash_Set() const{
    return m_blockhash_isSet;
}

bool OAIGetTransactionInfoResponse::is_blockhash_Valid() const{
    return m_blockhash_isValid;
}

double OAIGetTransactionInfoResponse::getBlockheight() const {
    return m_blockheight;
}
void OAIGetTransactionInfoResponse::setBlockheight(const double &blockheight) {
    m_blockheight = blockheight;
    m_blockheight_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_blockheight_Set() const{
    return m_blockheight_isSet;
}

bool OAIGetTransactionInfoResponse::is_blockheight_Valid() const{
    return m_blockheight_isValid;
}

double OAIGetTransactionInfoResponse::getBlocktime() const {
    return m_blocktime;
}
void OAIGetTransactionInfoResponse::setBlocktime(const double &blocktime) {
    m_blocktime = blocktime;
    m_blocktime_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_blocktime_Set() const{
    return m_blocktime_isSet;
}

bool OAIGetTransactionInfoResponse::is_blocktime_Valid() const{
    return m_blocktime_isValid;
}

double OAIGetTransactionInfoResponse::getConfirmations() const {
    return m_confirmations;
}
void OAIGetTransactionInfoResponse::setConfirmations(const double &confirmations) {
    m_confirmations = confirmations;
    m_confirmations_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_confirmations_Set() const{
    return m_confirmations_isSet;
}

bool OAIGetTransactionInfoResponse::is_confirmations_Valid() const{
    return m_confirmations_isValid;
}

double OAIGetTransactionInfoResponse::getFee() const {
    return m_fee;
}
void OAIGetTransactionInfoResponse::setFee(const double &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_fee_Set() const{
    return m_fee_isSet;
}

bool OAIGetTransactionInfoResponse::is_fee_Valid() const{
    return m_fee_isValid;
}

QString OAIGetTransactionInfoResponse::getHex() const {
    return m_hex;
}
void OAIGetTransactionInfoResponse::setHex(const QString &hex) {
    m_hex = hex;
    m_hex_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_hex_Set() const{
    return m_hex_isSet;
}

bool OAIGetTransactionInfoResponse::is_hex_Valid() const{
    return m_hex_isValid;
}

double OAIGetTransactionInfoResponse::getLocktime() const {
    return m_locktime;
}
void OAIGetTransactionInfoResponse::setLocktime(const double &locktime) {
    m_locktime = locktime;
    m_locktime_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_locktime_Set() const{
    return m_locktime_isSet;
}

bool OAIGetTransactionInfoResponse::is_locktime_Valid() const{
    return m_locktime_isValid;
}

double OAIGetTransactionInfoResponse::getTime() const {
    return m_time;
}
void OAIGetTransactionInfoResponse::setTime(const double &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_time_Set() const{
    return m_time_isSet;
}

bool OAIGetTransactionInfoResponse::is_time_Valid() const{
    return m_time_isValid;
}

double OAIGetTransactionInfoResponse::getTotalsent() const {
    return m_totalsent;
}
void OAIGetTransactionInfoResponse::setTotalsent(const double &totalsent) {
    m_totalsent = totalsent;
    m_totalsent_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_totalsent_Set() const{
    return m_totalsent_isSet;
}

bool OAIGetTransactionInfoResponse::is_totalsent_Valid() const{
    return m_totalsent_isValid;
}

QString OAIGetTransactionInfoResponse::getTxid() const {
    return m_txid;
}
void OAIGetTransactionInfoResponse::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAIGetTransactionInfoResponse::is_txid_Valid() const{
    return m_txid_isValid;
}

double OAIGetTransactionInfoResponse::getVersion() const {
    return m_version;
}
void OAIGetTransactionInfoResponse::setVersion(const double &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetTransactionInfoResponse::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAIGetTransactionInfoResponse_vin_inner> OAIGetTransactionInfoResponse::getVin() const {
    return m_vin;
}
void OAIGetTransactionInfoResponse::setVin(const QList<OAIGetTransactionInfoResponse_vin_inner> &vin) {
    m_vin = vin;
    m_vin_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_vin_Set() const{
    return m_vin_isSet;
}

bool OAIGetTransactionInfoResponse::is_vin_Valid() const{
    return m_vin_isValid;
}

QList<OAIGetTransactionInfoResponse_vout_inner> OAIGetTransactionInfoResponse::getVout() const {
    return m_vout;
}
void OAIGetTransactionInfoResponse::setVout(const QList<OAIGetTransactionInfoResponse_vout_inner> &vout) {
    m_vout = vout;
    m_vout_isSet = true;
}

bool OAIGetTransactionInfoResponse::is_vout_Set() const{
    return m_vout_isSet;
}

bool OAIGetTransactionInfoResponse::is_vout_Valid() const{
    return m_vout_isValid;
}

bool OAIGetTransactionInfoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blockhash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blockheight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocktime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locktime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totalsent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vin.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vout.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTransactionInfoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
