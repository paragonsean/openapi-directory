/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetBlockResponse.h
 *
 * 
 */

#ifndef OAIGetBlockResponse_H
#define OAIGetBlockResponse_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetBlockResponse : public OAIObject {
public:
    OAIGetBlockResponse();
    OAIGetBlockResponse(QString json);
    ~OAIGetBlockResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBits() const;
    void setBits(const QString &bits);
    bool is_bits_Set() const;
    bool is_bits_Valid() const;

    double getConfirmations() const;
    void setConfirmations(const double &confirmations);
    bool is_confirmations_Set() const;
    bool is_confirmations_Valid() const;

    double getDifficulty() const;
    void setDifficulty(const double &difficulty);
    bool is_difficulty_Set() const;
    bool is_difficulty_Valid() const;

    QString getHash() const;
    void setHash(const QString &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    double getHeight() const;
    void setHeight(const double &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    QString getMerkleroot() const;
    void setMerkleroot(const QString &merkleroot);
    bool is_merkleroot_Set() const;
    bool is_merkleroot_Valid() const;

    QString getNextblockhash() const;
    void setNextblockhash(const QString &nextblockhash);
    bool is_nextblockhash_Set() const;
    bool is_nextblockhash_Valid() const;

    double getNonce() const;
    void setNonce(const double &nonce);
    bool is_nonce_Set() const;
    bool is_nonce_Valid() const;

    QString getPreviousblockhash() const;
    void setPreviousblockhash(const QString &previousblockhash);
    bool is_previousblockhash_Set() const;
    bool is_previousblockhash_Valid() const;

    double getReward() const;
    void setReward(const double &reward);
    bool is_reward_Set() const;
    bool is_reward_Valid() const;

    double getSize() const;
    void setSize(const double &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    double getTime() const;
    void setTime(const double &time);
    bool is_time_Set() const;
    bool is_time_Valid() const;

    QList<QString> getTx() const;
    void setTx(const QList<QString> &tx);
    bool is_tx_Set() const;
    bool is_tx_Valid() const;

    double getVersion() const;
    void setVersion(const double &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bits;
    bool m_bits_isSet;
    bool m_bits_isValid;

    double m_confirmations;
    bool m_confirmations_isSet;
    bool m_confirmations_isValid;

    double m_difficulty;
    bool m_difficulty_isSet;
    bool m_difficulty_isValid;

    QString m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    double m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    QString m_merkleroot;
    bool m_merkleroot_isSet;
    bool m_merkleroot_isValid;

    QString m_nextblockhash;
    bool m_nextblockhash_isSet;
    bool m_nextblockhash_isValid;

    double m_nonce;
    bool m_nonce_isSet;
    bool m_nonce_isValid;

    QString m_previousblockhash;
    bool m_previousblockhash_isSet;
    bool m_previousblockhash_isValid;

    double m_reward;
    bool m_reward_isSet;
    bool m_reward_isValid;

    double m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    double m_time;
    bool m_time_isSet;
    bool m_time_isValid;

    QList<QString> m_tx;
    bool m_tx_isSet;
    bool m_tx_isValid;

    double m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetBlockResponse)

#endif // OAIGetBlockResponse_H
