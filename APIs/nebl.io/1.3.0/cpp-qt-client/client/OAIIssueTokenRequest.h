/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIssueTokenRequest.h
 *
 * 
 */

#ifndef OAIIssueTokenRequest_H
#define OAIIssueTokenRequest_H

#include <QJsonObject>

#include "OAIIssueTokenRequest_flags.h"
#include "OAIIssueTokenRequest_metadata.h"
#include "OAIIssueTokenRequest_transfer_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIssueTokenRequest_flags;
class OAIIssueTokenRequest_metadata;
class OAIIssueTokenRequest_transfer_inner;

class OAIIssueTokenRequest : public OAIObject {
public:
    OAIIssueTokenRequest();
    OAIIssueTokenRequest(QString json);
    ~OAIIssueTokenRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAmount() const;
    void setAmount(const double &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    double getDivisibility() const;
    void setDivisibility(const double &divisibility);
    bool is_divisibility_Set() const;
    bool is_divisibility_Valid() const;

    double getFee() const;
    void setFee(const double &fee);
    bool is_fee_Set() const;
    bool is_fee_Valid() const;

    OAIIssueTokenRequest_flags getFlags() const;
    void setFlags(const OAIIssueTokenRequest_flags &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    QString getIssueAddress() const;
    void setIssueAddress(const QString &issue_address);
    bool is_issue_address_Set() const;
    bool is_issue_address_Valid() const;

    OAIIssueTokenRequest_metadata getMetadata() const;
    void setMetadata(const OAIIssueTokenRequest_metadata &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    bool isReissuable() const;
    void setReissuable(const bool &reissuable);
    bool is_reissuable_Set() const;
    bool is_reissuable_Valid() const;

    QList<OAIIssueTokenRequest_transfer_inner> getTransfer() const;
    void setTransfer(const QList<OAIIssueTokenRequest_transfer_inner> &transfer);
    bool is_transfer_Set() const;
    bool is_transfer_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    double m_divisibility;
    bool m_divisibility_isSet;
    bool m_divisibility_isValid;

    double m_fee;
    bool m_fee_isSet;
    bool m_fee_isValid;

    OAIIssueTokenRequest_flags m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    QString m_issue_address;
    bool m_issue_address_isSet;
    bool m_issue_address_isValid;

    OAIIssueTokenRequest_metadata m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    bool m_reissuable;
    bool m_reissuable_isSet;
    bool m_reissuable_isValid;

    QList<OAIIssueTokenRequest_transfer_inner> m_transfer;
    bool m_transfer_isSet;
    bool m_transfer_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIssueTokenRequest)

#endif // OAIIssueTokenRequest_H
