/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAddressUtxosResponse_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAddressUtxosResponse_inner::OAIGetAddressUtxosResponse_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAddressUtxosResponse_inner::OAIGetAddressUtxosResponse_inner() {
    this->initializeModel();
}

OAIGetAddressUtxosResponse_inner::~OAIGetAddressUtxosResponse_inner() {}

void OAIGetAddressUtxosResponse_inner::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_confirmations_isSet = false;
    m_confirmations_isValid = false;

    m_script_pub_key_isSet = false;
    m_script_pub_key_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_txid_isSet = false;
    m_txid_isValid = false;

    m_vout_isSet = false;
    m_vout_isValid = false;
}

void OAIGetAddressUtxosResponse_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAddressUtxosResponse_inner::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_confirmations_isValid = ::OpenAPI::fromJsonValue(m_confirmations, json[QString("confirmations")]);
    m_confirmations_isSet = !json[QString("confirmations")].isNull() && m_confirmations_isValid;

    m_script_pub_key_isValid = ::OpenAPI::fromJsonValue(m_script_pub_key, json[QString("scriptPubKey")]);
    m_script_pub_key_isSet = !json[QString("scriptPubKey")].isNull() && m_script_pub_key_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;

    m_vout_isValid = ::OpenAPI::fromJsonValue(m_vout, json[QString("vout")]);
    m_vout_isSet = !json[QString("vout")].isNull() && m_vout_isValid;
}

QString OAIGetAddressUtxosResponse_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAddressUtxosResponse_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_confirmations_isSet) {
        obj.insert(QString("confirmations"), ::OpenAPI::toJsonValue(m_confirmations));
    }
    if (m_script_pub_key_isSet) {
        obj.insert(QString("scriptPubKey"), ::OpenAPI::toJsonValue(m_script_pub_key));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    if (m_vout_isSet) {
        obj.insert(QString("vout"), ::OpenAPI::toJsonValue(m_vout));
    }
    return obj;
}

QString OAIGetAddressUtxosResponse_inner::getAddress() const {
    return m_address;
}
void OAIGetAddressUtxosResponse_inner::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIGetAddressUtxosResponse_inner::is_address_Set() const{
    return m_address_isSet;
}

bool OAIGetAddressUtxosResponse_inner::is_address_Valid() const{
    return m_address_isValid;
}

double OAIGetAddressUtxosResponse_inner::getAmount() const {
    return m_amount;
}
void OAIGetAddressUtxosResponse_inner::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIGetAddressUtxosResponse_inner::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIGetAddressUtxosResponse_inner::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAIGetAddressUtxosResponse_inner::getConfirmations() const {
    return m_confirmations;
}
void OAIGetAddressUtxosResponse_inner::setConfirmations(const double &confirmations) {
    m_confirmations = confirmations;
    m_confirmations_isSet = true;
}

bool OAIGetAddressUtxosResponse_inner::is_confirmations_Set() const{
    return m_confirmations_isSet;
}

bool OAIGetAddressUtxosResponse_inner::is_confirmations_Valid() const{
    return m_confirmations_isValid;
}

QString OAIGetAddressUtxosResponse_inner::getScriptPubKey() const {
    return m_script_pub_key;
}
void OAIGetAddressUtxosResponse_inner::setScriptPubKey(const QString &script_pub_key) {
    m_script_pub_key = script_pub_key;
    m_script_pub_key_isSet = true;
}

bool OAIGetAddressUtxosResponse_inner::is_script_pub_key_Set() const{
    return m_script_pub_key_isSet;
}

bool OAIGetAddressUtxosResponse_inner::is_script_pub_key_Valid() const{
    return m_script_pub_key_isValid;
}

double OAIGetAddressUtxosResponse_inner::getTs() const {
    return m_ts;
}
void OAIGetAddressUtxosResponse_inner::setTs(const double &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIGetAddressUtxosResponse_inner::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIGetAddressUtxosResponse_inner::is_ts_Valid() const{
    return m_ts_isValid;
}

QString OAIGetAddressUtxosResponse_inner::getTxid() const {
    return m_txid;
}
void OAIGetAddressUtxosResponse_inner::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAIGetAddressUtxosResponse_inner::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAIGetAddressUtxosResponse_inner::is_txid_Valid() const{
    return m_txid_isValid;
}

double OAIGetAddressUtxosResponse_inner::getVout() const {
    return m_vout;
}
void OAIGetAddressUtxosResponse_inner::setVout(const double &vout) {
    m_vout = vout;
    m_vout_isSet = true;
}

bool OAIGetAddressUtxosResponse_inner::is_vout_Set() const{
    return m_vout_isSet;
}

bool OAIGetAddressUtxosResponse_inner::is_vout_Valid() const{
    return m_vout_isValid;
}

bool OAIGetAddressUtxosResponse_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_pub_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAddressUtxosResponse_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
