/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTransactionInfoResponse_vin_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTransactionInfoResponse_vin_inner::OAIGetTransactionInfoResponse_vin_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTransactionInfoResponse_vin_inner::OAIGetTransactionInfoResponse_vin_inner() {
    this->initializeModel();
}

OAIGetTransactionInfoResponse_vin_inner::~OAIGetTransactionInfoResponse_vin_inner() {}

void OAIGetTransactionInfoResponse_vin_inner::initializeModel() {

    m_previous_output_isSet = false;
    m_previous_output_isValid = false;

    m_script_sig_isSet = false;
    m_script_sig_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_tokens_isSet = false;
    m_tokens_isValid = false;

    m_txid_isSet = false;
    m_txid_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_vout_isSet = false;
    m_vout_isValid = false;
}

void OAIGetTransactionInfoResponse_vin_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTransactionInfoResponse_vin_inner::fromJsonObject(QJsonObject json) {

    m_previous_output_isValid = ::OpenAPI::fromJsonValue(m_previous_output, json[QString("previousOutput")]);
    m_previous_output_isSet = !json[QString("previousOutput")].isNull() && m_previous_output_isValid;

    m_script_sig_isValid = ::OpenAPI::fromJsonValue(m_script_sig, json[QString("scriptSig")]);
    m_script_sig_isSet = !json[QString("scriptSig")].isNull() && m_script_sig_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_tokens_isValid = ::OpenAPI::fromJsonValue(m_tokens, json[QString("tokens")]);
    m_tokens_isSet = !json[QString("tokens")].isNull() && m_tokens_isValid;

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_vout_isValid = ::OpenAPI::fromJsonValue(m_vout, json[QString("vout")]);
    m_vout_isSet = !json[QString("vout")].isNull() && m_vout_isValid;
}

QString OAIGetTransactionInfoResponse_vin_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTransactionInfoResponse_vin_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_previous_output.isSet()) {
        obj.insert(QString("previousOutput"), ::OpenAPI::toJsonValue(m_previous_output));
    }
    if (m_script_sig.isSet()) {
        obj.insert(QString("scriptSig"), ::OpenAPI::toJsonValue(m_script_sig));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_tokens.size() > 0) {
        obj.insert(QString("tokens"), ::OpenAPI::toJsonValue(m_tokens));
    }
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_vout_isSet) {
        obj.insert(QString("vout"), ::OpenAPI::toJsonValue(m_vout));
    }
    return obj;
}

OAIGetTransactionInfoResponse_vin_inner_previousOutput OAIGetTransactionInfoResponse_vin_inner::getPreviousOutput() const {
    return m_previous_output;
}
void OAIGetTransactionInfoResponse_vin_inner::setPreviousOutput(const OAIGetTransactionInfoResponse_vin_inner_previousOutput &previous_output) {
    m_previous_output = previous_output;
    m_previous_output_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_previous_output_Set() const{
    return m_previous_output_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_previous_output_Valid() const{
    return m_previous_output_isValid;
}

OAIGetTransactionInfoResponse_vin_inner_scriptSig OAIGetTransactionInfoResponse_vin_inner::getScriptSig() const {
    return m_script_sig;
}
void OAIGetTransactionInfoResponse_vin_inner::setScriptSig(const OAIGetTransactionInfoResponse_vin_inner_scriptSig &script_sig) {
    m_script_sig = script_sig;
    m_script_sig_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_script_sig_Set() const{
    return m_script_sig_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_script_sig_Valid() const{
    return m_script_sig_isValid;
}

double OAIGetTransactionInfoResponse_vin_inner::getSequence() const {
    return m_sequence;
}
void OAIGetTransactionInfoResponse_vin_inner::setSequence(const double &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_sequence_Valid() const{
    return m_sequence_isValid;
}

QList<OAIGetTransactionInfoResponse_vin_inner_tokens_inner> OAIGetTransactionInfoResponse_vin_inner::getTokens() const {
    return m_tokens;
}
void OAIGetTransactionInfoResponse_vin_inner::setTokens(const QList<OAIGetTransactionInfoResponse_vin_inner_tokens_inner> &tokens) {
    m_tokens = tokens;
    m_tokens_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_tokens_Set() const{
    return m_tokens_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_tokens_Valid() const{
    return m_tokens_isValid;
}

QString OAIGetTransactionInfoResponse_vin_inner::getTxid() const {
    return m_txid;
}
void OAIGetTransactionInfoResponse_vin_inner::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_txid_Valid() const{
    return m_txid_isValid;
}

double OAIGetTransactionInfoResponse_vin_inner::getValue() const {
    return m_value;
}
void OAIGetTransactionInfoResponse_vin_inner::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_value_Valid() const{
    return m_value_isValid;
}

double OAIGetTransactionInfoResponse_vin_inner::getVout() const {
    return m_vout;
}
void OAIGetTransactionInfoResponse_vin_inner::setVout(const double &vout) {
    m_vout = vout;
    m_vout_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_vout_Set() const{
    return m_vout_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner::is_vout_Valid() const{
    return m_vout_isValid;
}

bool OAIGetTransactionInfoResponse_vin_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_previous_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_sig.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTransactionInfoResponse_vin_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
