/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueTokenResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueTokenResponse::OAIIssueTokenResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueTokenResponse::OAIIssueTokenResponse() {
    this->initializeModel();
}

OAIIssueTokenResponse::~OAIIssueTokenResponse() {}

void OAIIssueTokenResponse::initializeModel() {

    m_token_id_isSet = false;
    m_token_id_isValid = false;

    m_tx_hex_isSet = false;
    m_tx_hex_isValid = false;
}

void OAIIssueTokenResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueTokenResponse::fromJsonObject(QJsonObject json) {

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("tokenId")]);
    m_token_id_isSet = !json[QString("tokenId")].isNull() && m_token_id_isValid;

    m_tx_hex_isValid = ::OpenAPI::fromJsonValue(m_tx_hex, json[QString("txHex")]);
    m_tx_hex_isSet = !json[QString("txHex")].isNull() && m_tx_hex_isValid;
}

QString OAIIssueTokenResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueTokenResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_token_id_isSet) {
        obj.insert(QString("tokenId"), ::OpenAPI::toJsonValue(m_token_id));
    }
    if (m_tx_hex_isSet) {
        obj.insert(QString("txHex"), ::OpenAPI::toJsonValue(m_tx_hex));
    }
    return obj;
}

QString OAIIssueTokenResponse::getTokenId() const {
    return m_token_id;
}
void OAIIssueTokenResponse::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAIIssueTokenResponse::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAIIssueTokenResponse::is_token_id_Valid() const{
    return m_token_id_isValid;
}

QString OAIIssueTokenResponse::getTxHex() const {
    return m_tx_hex;
}
void OAIIssueTokenResponse::setTxHex(const QString &tx_hex) {
    m_tx_hex = tx_hex;
    m_tx_hex_isSet = true;
}

bool OAIIssueTokenResponse::is_tx_hex_Set() const{
    return m_tx_hex_isSet;
}

bool OAIIssueTokenResponse::is_tx_hex_Valid() const{
    return m_tx_hex_isValid;
}

bool OAIIssueTokenResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tx_hex_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueTokenResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
