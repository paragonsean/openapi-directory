/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTransactionInfoResponse_vin_inner_scriptSig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTransactionInfoResponse_vin_inner_scriptSig::OAIGetTransactionInfoResponse_vin_inner_scriptSig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTransactionInfoResponse_vin_inner_scriptSig::OAIGetTransactionInfoResponse_vin_inner_scriptSig() {
    this->initializeModel();
}

OAIGetTransactionInfoResponse_vin_inner_scriptSig::~OAIGetTransactionInfoResponse_vin_inner_scriptSig() {}

void OAIGetTransactionInfoResponse_vin_inner_scriptSig::initializeModel() {

    m_r_asm_isSet = false;
    m_r_asm_isValid = false;

    m_hex_isSet = false;
    m_hex_isValid = false;
}

void OAIGetTransactionInfoResponse_vin_inner_scriptSig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTransactionInfoResponse_vin_inner_scriptSig::fromJsonObject(QJsonObject json) {

    m_r_asm_isValid = ::OpenAPI::fromJsonValue(m_r_asm, json[QString("asm")]);
    m_r_asm_isSet = !json[QString("asm")].isNull() && m_r_asm_isValid;

    m_hex_isValid = ::OpenAPI::fromJsonValue(m_hex, json[QString("hex")]);
    m_hex_isSet = !json[QString("hex")].isNull() && m_hex_isValid;
}

QString OAIGetTransactionInfoResponse_vin_inner_scriptSig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTransactionInfoResponse_vin_inner_scriptSig::asJsonObject() const {
    QJsonObject obj;
    if (m_r_asm_isSet) {
        obj.insert(QString("asm"), ::OpenAPI::toJsonValue(m_r_asm));
    }
    if (m_hex_isSet) {
        obj.insert(QString("hex"), ::OpenAPI::toJsonValue(m_hex));
    }
    return obj;
}

QString OAIGetTransactionInfoResponse_vin_inner_scriptSig::getRAsm() const {
    return m_r_asm;
}
void OAIGetTransactionInfoResponse_vin_inner_scriptSig::setRAsm(const QString &r_asm) {
    m_r_asm = r_asm;
    m_r_asm_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner_scriptSig::is_r_asm_Set() const{
    return m_r_asm_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner_scriptSig::is_r_asm_Valid() const{
    return m_r_asm_isValid;
}

QString OAIGetTransactionInfoResponse_vin_inner_scriptSig::getHex() const {
    return m_hex;
}
void OAIGetTransactionInfoResponse_vin_inner_scriptSig::setHex(const QString &hex) {
    m_hex = hex;
    m_hex_isSet = true;
}

bool OAIGetTransactionInfoResponse_vin_inner_scriptSig::is_hex_Set() const{
    return m_hex_isSet;
}

bool OAIGetTransactionInfoResponse_vin_inner_scriptSig::is_hex_Valid() const{
    return m_hex_isValid;
}

bool OAIGetTransactionInfoResponse_vin_inner_scriptSig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_asm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTransactionInfoResponse_vin_inner_scriptSig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
