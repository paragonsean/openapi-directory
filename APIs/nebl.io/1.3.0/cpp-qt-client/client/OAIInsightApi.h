/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInsightApi_H
#define OAI_OAIInsightApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBroadcastTxResponse.h"
#include "OAIError.h"
#include "OAIGetAddressResponse.h"
#include "OAIGetAddressUtxosResponse_inner.h"
#include "OAIGetBlockIndexResponse.h"
#include "OAIGetBlockResponse.h"
#include "OAIGetRawTxResponse.h"
#include "OAIGetSyncResponse.h"
#include "OAIGetTxResponse.h"
#include "OAIGetTxsResponse.h"
#include "OAIObject.h"
#include "OAISendTxRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInsightApi : public QObject {
    Q_OBJECT

public:
    OAIInsightApi(const int timeOut = 0);
    ~OAIInsightApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  address QString [required]
    */
    virtual void getAddress(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void getAddressBalance(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void getAddressTotalReceived(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void getAddressTotalSent(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void getAddressUnconfirmedBalance(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void getAddressUtxos(const QString &address);

    /**
    * @param[in]  blockhash QString [required]
    */
    virtual void getBlock(const QString &blockhash);

    /**
    * @param[in]  blockindex double [required]
    */
    virtual void getBlockIndex(const double &blockindex);

    /**
    * @param[in]  txid QString [required]
    */
    virtual void getRawTx(const QString &txid);

    /**
    * @param[in]  q QString [optional]
    */
    virtual void getStatus(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());


    virtual void getSync();

    /**
    * @param[in]  txid QString [required]
    */
    virtual void getTx(const QString &txid);

    /**
    * @param[in]  address QString [optional]
    * @param[in]  block QString [optional]
    * @param[in]  page_num double [optional]
    */
    virtual void getTxs(const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &block = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page_num = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  oai_send_tx_request OAISendTxRequest [required]
    */
    virtual void sendTx(const OAISendTxRequest &oai_send_tx_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAddressCallback(OAIHttpRequestWorker *worker);
    void getAddressBalanceCallback(OAIHttpRequestWorker *worker);
    void getAddressTotalReceivedCallback(OAIHttpRequestWorker *worker);
    void getAddressTotalSentCallback(OAIHttpRequestWorker *worker);
    void getAddressUnconfirmedBalanceCallback(OAIHttpRequestWorker *worker);
    void getAddressUtxosCallback(OAIHttpRequestWorker *worker);
    void getBlockCallback(OAIHttpRequestWorker *worker);
    void getBlockIndexCallback(OAIHttpRequestWorker *worker);
    void getRawTxCallback(OAIHttpRequestWorker *worker);
    void getStatusCallback(OAIHttpRequestWorker *worker);
    void getSyncCallback(OAIHttpRequestWorker *worker);
    void getTxCallback(OAIHttpRequestWorker *worker);
    void getTxsCallback(OAIHttpRequestWorker *worker);
    void sendTxCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAddressSignal(OAIGetAddressResponse summary);
    void getAddressBalanceSignal(double summary);
    void getAddressTotalReceivedSignal(double summary);
    void getAddressTotalSentSignal(double summary);
    void getAddressUnconfirmedBalanceSignal(double summary);
    void getAddressUtxosSignal(QList<OAIGetAddressUtxosResponse_inner> summary);
    void getBlockSignal(OAIGetBlockResponse summary);
    void getBlockIndexSignal(OAIGetBlockIndexResponse summary);
    void getRawTxSignal(OAIGetRawTxResponse summary);
    void getStatusSignal(OAIObject summary);
    void getSyncSignal(OAIGetSyncResponse summary);
    void getTxSignal(OAIGetTxResponse summary);
    void getTxsSignal(OAIGetTxsResponse summary);
    void sendTxSignal(OAIBroadcastTxResponse summary);


    void getAddressSignalFull(OAIHttpRequestWorker *worker, OAIGetAddressResponse summary);
    void getAddressBalanceSignalFull(OAIHttpRequestWorker *worker, double summary);
    void getAddressTotalReceivedSignalFull(OAIHttpRequestWorker *worker, double summary);
    void getAddressTotalSentSignalFull(OAIHttpRequestWorker *worker, double summary);
    void getAddressUnconfirmedBalanceSignalFull(OAIHttpRequestWorker *worker, double summary);
    void getAddressUtxosSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetAddressUtxosResponse_inner> summary);
    void getBlockSignalFull(OAIHttpRequestWorker *worker, OAIGetBlockResponse summary);
    void getBlockIndexSignalFull(OAIHttpRequestWorker *worker, OAIGetBlockIndexResponse summary);
    void getRawTxSignalFull(OAIHttpRequestWorker *worker, OAIGetRawTxResponse summary);
    void getStatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getSyncSignalFull(OAIHttpRequestWorker *worker, OAIGetSyncResponse summary);
    void getTxSignalFull(OAIHttpRequestWorker *worker, OAIGetTxResponse summary);
    void getTxsSignalFull(OAIHttpRequestWorker *worker, OAIGetTxsResponse summary);
    void sendTxSignalFull(OAIHttpRequestWorker *worker, OAIBroadcastTxResponse summary);

    Q_DECL_DEPRECATED_X("Use getAddressSignalError() instead")
    void getAddressSignalE(OAIGetAddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressSignalError(OAIGetAddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressBalanceSignalError() instead")
    void getAddressBalanceSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressBalanceSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressTotalReceivedSignalError() instead")
    void getAddressTotalReceivedSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressTotalReceivedSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressTotalSentSignalError() instead")
    void getAddressTotalSentSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressTotalSentSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressUnconfirmedBalanceSignalError() instead")
    void getAddressUnconfirmedBalanceSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressUnconfirmedBalanceSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressUtxosSignalError() instead")
    void getAddressUtxosSignalE(QList<OAIGetAddressUtxosResponse_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressUtxosSignalError(QList<OAIGetAddressUtxosResponse_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBlockSignalError() instead")
    void getBlockSignalE(OAIGetBlockResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBlockSignalError(OAIGetBlockResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBlockIndexSignalError() instead")
    void getBlockIndexSignalE(OAIGetBlockIndexResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBlockIndexSignalError(OAIGetBlockIndexResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawTxSignalError() instead")
    void getRawTxSignalE(OAIGetRawTxResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawTxSignalError(OAIGetRawTxResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusSignalError() instead")
    void getStatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSyncSignalError() instead")
    void getSyncSignalE(OAIGetSyncResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSyncSignalError(OAIGetSyncResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTxSignalError() instead")
    void getTxSignalE(OAIGetTxResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTxSignalError(OAIGetTxResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTxsSignalError() instead")
    void getTxsSignalE(OAIGetTxsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTxsSignalError(OAIGetTxsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendTxSignalError() instead")
    void sendTxSignalE(OAIBroadcastTxResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendTxSignalError(OAIBroadcastTxResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAddressSignalErrorFull() instead")
    void getAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressBalanceSignalErrorFull() instead")
    void getAddressBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressTotalReceivedSignalErrorFull() instead")
    void getAddressTotalReceivedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressTotalReceivedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressTotalSentSignalErrorFull() instead")
    void getAddressTotalSentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressTotalSentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressUnconfirmedBalanceSignalErrorFull() instead")
    void getAddressUnconfirmedBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressUnconfirmedBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressUtxosSignalErrorFull() instead")
    void getAddressUtxosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressUtxosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBlockSignalErrorFull() instead")
    void getBlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBlockIndexSignalErrorFull() instead")
    void getBlockIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBlockIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRawTxSignalErrorFull() instead")
    void getRawTxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawTxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusSignalErrorFull() instead")
    void getStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSyncSignalErrorFull() instead")
    void getSyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTxSignalErrorFull() instead")
    void getTxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTxsSignalErrorFull() instead")
    void getTxsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTxsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendTxSignalErrorFull() instead")
    void sendTxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendTxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
