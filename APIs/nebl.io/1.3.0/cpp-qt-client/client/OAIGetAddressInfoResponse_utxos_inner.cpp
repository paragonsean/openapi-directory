/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAddressInfoResponse_utxos_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAddressInfoResponse_utxos_inner::OAIGetAddressInfoResponse_utxos_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAddressInfoResponse_utxos_inner::OAIGetAddressInfoResponse_utxos_inner() {
    this->initializeModel();
}

OAIGetAddressInfoResponse_utxos_inner::~OAIGetAddressInfoResponse_utxos_inner() {}

void OAIGetAddressInfoResponse_utxos_inner::initializeModel() {

    m_blockheight_isSet = false;
    m_blockheight_isValid = false;

    m_blocktime_isSet = false;
    m_blocktime_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_script_pub_key_isSet = false;
    m_script_pub_key_isValid = false;

    m_tokens_isSet = false;
    m_tokens_isValid = false;

    m_txid_isSet = false;
    m_txid_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGetAddressInfoResponse_utxos_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAddressInfoResponse_utxos_inner::fromJsonObject(QJsonObject json) {

    m_blockheight_isValid = ::OpenAPI::fromJsonValue(m_blockheight, json[QString("blockheight")]);
    m_blockheight_isSet = !json[QString("blockheight")].isNull() && m_blockheight_isValid;

    m_blocktime_isValid = ::OpenAPI::fromJsonValue(m_blocktime, json[QString("blocktime")]);
    m_blocktime_isSet = !json[QString("blocktime")].isNull() && m_blocktime_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_script_pub_key_isValid = ::OpenAPI::fromJsonValue(m_script_pub_key, json[QString("scriptPubKey")]);
    m_script_pub_key_isSet = !json[QString("scriptPubKey")].isNull() && m_script_pub_key_isValid;

    m_tokens_isValid = ::OpenAPI::fromJsonValue(m_tokens, json[QString("tokens")]);
    m_tokens_isSet = !json[QString("tokens")].isNull() && m_tokens_isValid;

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("used")]);
    m_used_isSet = !json[QString("used")].isNull() && m_used_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGetAddressInfoResponse_utxos_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAddressInfoResponse_utxos_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_blockheight_isSet) {
        obj.insert(QString("blockheight"), ::OpenAPI::toJsonValue(m_blockheight));
    }
    if (m_blocktime_isSet) {
        obj.insert(QString("blocktime"), ::OpenAPI::toJsonValue(m_blocktime));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_script_pub_key_isSet) {
        obj.insert(QString("scriptPubKey"), ::OpenAPI::toJsonValue(m_script_pub_key));
    }
    if (m_tokens.size() > 0) {
        obj.insert(QString("tokens"), ::OpenAPI::toJsonValue(m_tokens));
    }
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    if (m_used_isSet) {
        obj.insert(QString("used"), ::OpenAPI::toJsonValue(m_used));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

double OAIGetAddressInfoResponse_utxos_inner::getBlockheight() const {
    return m_blockheight;
}
void OAIGetAddressInfoResponse_utxos_inner::setBlockheight(const double &blockheight) {
    m_blockheight = blockheight;
    m_blockheight_isSet = true;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_blockheight_Set() const{
    return m_blockheight_isSet;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_blockheight_Valid() const{
    return m_blockheight_isValid;
}

double OAIGetAddressInfoResponse_utxos_inner::getBlocktime() const {
    return m_blocktime;
}
void OAIGetAddressInfoResponse_utxos_inner::setBlocktime(const double &blocktime) {
    m_blocktime = blocktime;
    m_blocktime_isSet = true;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_blocktime_Set() const{
    return m_blocktime_isSet;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_blocktime_Valid() const{
    return m_blocktime_isValid;
}

double OAIGetAddressInfoResponse_utxos_inner::getIndex() const {
    return m_index;
}
void OAIGetAddressInfoResponse_utxos_inner::setIndex(const double &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_index_Set() const{
    return m_index_isSet;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_index_Valid() const{
    return m_index_isValid;
}

OAIObject OAIGetAddressInfoResponse_utxos_inner::getScriptPubKey() const {
    return m_script_pub_key;
}
void OAIGetAddressInfoResponse_utxos_inner::setScriptPubKey(const OAIObject &script_pub_key) {
    m_script_pub_key = script_pub_key;
    m_script_pub_key_isSet = true;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_script_pub_key_Set() const{
    return m_script_pub_key_isSet;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_script_pub_key_Valid() const{
    return m_script_pub_key_isValid;
}

QList<OAIGetAddressInfoResponse_utxos_inner_tokens_inner> OAIGetAddressInfoResponse_utxos_inner::getTokens() const {
    return m_tokens;
}
void OAIGetAddressInfoResponse_utxos_inner::setTokens(const QList<OAIGetAddressInfoResponse_utxos_inner_tokens_inner> &tokens) {
    m_tokens = tokens;
    m_tokens_isSet = true;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_tokens_Set() const{
    return m_tokens_isSet;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_tokens_Valid() const{
    return m_tokens_isValid;
}

QString OAIGetAddressInfoResponse_utxos_inner::getTxid() const {
    return m_txid;
}
void OAIGetAddressInfoResponse_utxos_inner::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_txid_Valid() const{
    return m_txid_isValid;
}

bool OAIGetAddressInfoResponse_utxos_inner::isUsed() const {
    return m_used;
}
void OAIGetAddressInfoResponse_utxos_inner::setUsed(const bool &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_used_Set() const{
    return m_used_isSet;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_used_Valid() const{
    return m_used_isValid;
}

double OAIGetAddressInfoResponse_utxos_inner::getValue() const {
    return m_value;
}
void OAIGetAddressInfoResponse_utxos_inner::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGetAddressInfoResponse_utxos_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGetAddressInfoResponse_utxos_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blockheight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocktime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_pub_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAddressInfoResponse_utxos_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
