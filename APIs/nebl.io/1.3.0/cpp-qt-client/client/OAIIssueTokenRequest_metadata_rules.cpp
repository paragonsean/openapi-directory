/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueTokenRequest_metadata_rules.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueTokenRequest_metadata_rules::OAIIssueTokenRequest_metadata_rules(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueTokenRequest_metadata_rules::OAIIssueTokenRequest_metadata_rules() {
    this->initializeModel();
}

OAIIssueTokenRequest_metadata_rules::~OAIIssueTokenRequest_metadata_rules() {}

void OAIIssueTokenRequest_metadata_rules::initializeModel() {

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_fees_isSet = false;
    m_fees_isValid = false;

    m_holders_isSet = false;
    m_holders_isValid = false;
}

void OAIIssueTokenRequest_metadata_rules::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueTokenRequest_metadata_rules::fromJsonObject(QJsonObject json) {

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_fees_isValid = ::OpenAPI::fromJsonValue(m_fees, json[QString("fees")]);
    m_fees_isSet = !json[QString("fees")].isNull() && m_fees_isValid;

    m_holders_isValid = ::OpenAPI::fromJsonValue(m_holders, json[QString("holders")]);
    m_holders_isSet = !json[QString("holders")].isNull() && m_holders_isValid;
}

QString OAIIssueTokenRequest_metadata_rules::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueTokenRequest_metadata_rules::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration.isSet()) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_fees.isSet()) {
        obj.insert(QString("fees"), ::OpenAPI::toJsonValue(m_fees));
    }
    if (m_holders.size() > 0) {
        obj.insert(QString("holders"), ::OpenAPI::toJsonValue(m_holders));
    }
    return obj;
}

OAIIssueTokenRequest_metadata_rules_expiration OAIIssueTokenRequest_metadata_rules::getExpiration() const {
    return m_expiration;
}
void OAIIssueTokenRequest_metadata_rules::setExpiration(const OAIIssueTokenRequest_metadata_rules_expiration &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIIssueTokenRequest_metadata_rules::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIIssueTokenRequest_metadata_rules::is_expiration_Valid() const{
    return m_expiration_isValid;
}

OAIIssueTokenRequest_metadata_rules_fees OAIIssueTokenRequest_metadata_rules::getFees() const {
    return m_fees;
}
void OAIIssueTokenRequest_metadata_rules::setFees(const OAIIssueTokenRequest_metadata_rules_fees &fees) {
    m_fees = fees;
    m_fees_isSet = true;
}

bool OAIIssueTokenRequest_metadata_rules::is_fees_Set() const{
    return m_fees_isSet;
}

bool OAIIssueTokenRequest_metadata_rules::is_fees_Valid() const{
    return m_fees_isValid;
}

QList<OAIIssueTokenRequest_metadata_rules_holders_inner> OAIIssueTokenRequest_metadata_rules::getHolders() const {
    return m_holders;
}
void OAIIssueTokenRequest_metadata_rules::setHolders(const QList<OAIIssueTokenRequest_metadata_rules_holders_inner> &holders) {
    m_holders = holders;
    m_holders_isSet = true;
}

bool OAIIssueTokenRequest_metadata_rules::is_holders_Set() const{
    return m_holders_isSet;
}

bool OAIIssueTokenRequest_metadata_rules::is_holders_Valid() const{
    return m_holders_isValid;
}

bool OAIIssueTokenRequest_metadata_rules::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fees.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_holders.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueTokenRequest_metadata_rules::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
