/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestnetNTP1Api.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITestnetNTP1Api::OAITestnetNTP1Api(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITestnetNTP1Api::~OAITestnetNTP1Api() {
}

void OAITestnetNTP1Api::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://ntp1node.nebl.io/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("testnetBroadcastTx", defaultConf);
    _serverIndices.insert("testnetBroadcastTx", 0);
    _serverConfigs.insert("testnetBurnToken", defaultConf);
    _serverIndices.insert("testnetBurnToken", 0);
    _serverConfigs.insert("testnetGetAddressInfo", defaultConf);
    _serverIndices.insert("testnetGetAddressInfo", 0);
    _serverConfigs.insert("testnetGetTokenHolders", defaultConf);
    _serverIndices.insert("testnetGetTokenHolders", 0);
    _serverConfigs.insert("testnetGetTokenId", defaultConf);
    _serverIndices.insert("testnetGetTokenId", 0);
    _serverConfigs.insert("testnetGetTokenMetadata", defaultConf);
    _serverIndices.insert("testnetGetTokenMetadata", 0);
    _serverConfigs.insert("testnetGetTokenMetadataOfUtxo", defaultConf);
    _serverIndices.insert("testnetGetTokenMetadataOfUtxo", 0);
    _serverConfigs.insert("testnetGetTransactionInfo", defaultConf);
    _serverIndices.insert("testnetGetTransactionInfo", 0);
    _serverConfigs.insert("testnetIssueToken", defaultConf);
    _serverIndices.insert("testnetIssueToken", 0);
    _serverConfigs.insert("testnetSendToken", defaultConf);
    _serverIndices.insert("testnetSendToken", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITestnetNTP1Api::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITestnetNTP1Api::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITestnetNTP1Api::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITestnetNTP1Api::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITestnetNTP1Api::setUsername(const QString &username) {
    _username = username;
}

void OAITestnetNTP1Api::setPassword(const QString &password) {
    _password = password;
}


void OAITestnetNTP1Api::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITestnetNTP1Api::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITestnetNTP1Api::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITestnetNTP1Api::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITestnetNTP1Api::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITestnetNTP1Api::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITestnetNTP1Api::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITestnetNTP1Api::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITestnetNTP1Api::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITestnetNTP1Api::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITestnetNTP1Api::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITestnetNTP1Api::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITestnetNTP1Api::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITestnetNTP1Api::testnetBroadcastTx(const OAIBroadcastTxRequest &oai_broadcast_tx_request) {
    QString fullPath = QString(_serverConfigs["testnetBroadcastTx"][_serverIndices.value("testnetBroadcastTx")].URL()+"/testnet/ntp1/broadcast");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_broadcast_tx_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestnetNTP1Api::testnetBroadcastTxCallback);
    connect(this, &OAITestnetNTP1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestnetNTP1Api::testnetBroadcastTxCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBroadcastTxResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testnetBroadcastTxSignal(output);
        Q_EMIT testnetBroadcastTxSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testnetBroadcastTxSignalE(output, error_type, error_str);
        Q_EMIT testnetBroadcastTxSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testnetBroadcastTxSignalError(output, error_type, error_str);
        Q_EMIT testnetBroadcastTxSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestnetNTP1Api::testnetBurnToken(const OAIBurnTokenRequest &oai_burn_token_request) {
    QString fullPath = QString(_serverConfigs["testnetBurnToken"][_serverIndices.value("testnetBurnToken")].URL()+"/testnet/ntp1/burntoken");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_burn_token_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestnetNTP1Api::testnetBurnTokenCallback);
    connect(this, &OAITestnetNTP1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestnetNTP1Api::testnetBurnTokenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBurnTokenResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testnetBurnTokenSignal(output);
        Q_EMIT testnetBurnTokenSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testnetBurnTokenSignalE(output, error_type, error_str);
        Q_EMIT testnetBurnTokenSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testnetBurnTokenSignalError(output, error_type, error_str);
        Q_EMIT testnetBurnTokenSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestnetNTP1Api::testnetGetAddressInfo(const QString &address) {
    QString fullPath = QString(_serverConfigs["testnetGetAddressInfo"][_serverIndices.value("testnetGetAddressInfo")].URL()+"/testnet/ntp1/addressinfo/{address}");
    
    
    {
        QString addressPathParam("{");
        addressPathParam.append("address").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "address", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"address"+pathSuffix : pathPrefix;
        fullPath.replace(addressPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(address)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestnetNTP1Api::testnetGetAddressInfoCallback);
    connect(this, &OAITestnetNTP1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestnetNTP1Api::testnetGetAddressInfoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetAddressInfoResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testnetGetAddressInfoSignal(output);
        Q_EMIT testnetGetAddressInfoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testnetGetAddressInfoSignalE(output, error_type, error_str);
        Q_EMIT testnetGetAddressInfoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testnetGetAddressInfoSignalError(output, error_type, error_str);
        Q_EMIT testnetGetAddressInfoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestnetNTP1Api::testnetGetTokenHolders(const QString &tokenid) {
    QString fullPath = QString(_serverConfigs["testnetGetTokenHolders"][_serverIndices.value("testnetGetTokenHolders")].URL()+"/testnet/ntp1/stakeholders/{tokenid}");
    
    
    {
        QString tokenidPathParam("{");
        tokenidPathParam.append("tokenid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tokenid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tokenid"+pathSuffix : pathPrefix;
        fullPath.replace(tokenidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tokenid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestnetNTP1Api::testnetGetTokenHoldersCallback);
    connect(this, &OAITestnetNTP1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestnetNTP1Api::testnetGetTokenHoldersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetTokenHoldersResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testnetGetTokenHoldersSignal(output);
        Q_EMIT testnetGetTokenHoldersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testnetGetTokenHoldersSignalE(output, error_type, error_str);
        Q_EMIT testnetGetTokenHoldersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testnetGetTokenHoldersSignalError(output, error_type, error_str);
        Q_EMIT testnetGetTokenHoldersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestnetNTP1Api::testnetGetTokenId(const QString &tokensymbol) {
    QString fullPath = QString(_serverConfigs["testnetGetTokenId"][_serverIndices.value("testnetGetTokenId")].URL()+"/testnet/ntp1/tokenid/{tokensymbol}");
    
    
    {
        QString tokensymbolPathParam("{");
        tokensymbolPathParam.append("tokensymbol").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tokensymbol", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tokensymbol"+pathSuffix : pathPrefix;
        fullPath.replace(tokensymbolPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tokensymbol)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestnetNTP1Api::testnetGetTokenIdCallback);
    connect(this, &OAITestnetNTP1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestnetNTP1Api::testnetGetTokenIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetTokenIdResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testnetGetTokenIdSignal(output);
        Q_EMIT testnetGetTokenIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testnetGetTokenIdSignalE(output, error_type, error_str);
        Q_EMIT testnetGetTokenIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testnetGetTokenIdSignalError(output, error_type, error_str);
        Q_EMIT testnetGetTokenIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestnetNTP1Api::testnetGetTokenMetadata(const QString &tokenid, const ::OpenAPI::OptionalParam<double> &verbosity) {
    QString fullPath = QString(_serverConfigs["testnetGetTokenMetadata"][_serverIndices.value("testnetGetTokenMetadata")].URL()+"/testnet/ntp1/tokenmetadata/{tokenid}");
    
    
    {
        QString tokenidPathParam("{");
        tokenidPathParam.append("tokenid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tokenid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tokenid"+pathSuffix : pathPrefix;
        fullPath.replace(tokenidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tokenid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (verbosity.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "verbosity", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("verbosity")).append(querySuffix).append(QUrl::toPercentEncoding(verbosity.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestnetNTP1Api::testnetGetTokenMetadataCallback);
    connect(this, &OAITestnetNTP1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestnetNTP1Api::testnetGetTokenMetadataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetTokenMetadataResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testnetGetTokenMetadataSignal(output);
        Q_EMIT testnetGetTokenMetadataSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testnetGetTokenMetadataSignalE(output, error_type, error_str);
        Q_EMIT testnetGetTokenMetadataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testnetGetTokenMetadataSignalError(output, error_type, error_str);
        Q_EMIT testnetGetTokenMetadataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestnetNTP1Api::testnetGetTokenMetadataOfUtxo(const QString &tokenid, const QString &utxo, const ::OpenAPI::OptionalParam<double> &verbosity) {
    QString fullPath = QString(_serverConfigs["testnetGetTokenMetadataOfUtxo"][_serverIndices.value("testnetGetTokenMetadataOfUtxo")].URL()+"/testnet/ntp1/tokenmetadata/{tokenid}/{utxo}");
    
    
    {
        QString tokenidPathParam("{");
        tokenidPathParam.append("tokenid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tokenid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tokenid"+pathSuffix : pathPrefix;
        fullPath.replace(tokenidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tokenid)));
    }
    
    {
        QString utxoPathParam("{");
        utxoPathParam.append("utxo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "utxo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"utxo"+pathSuffix : pathPrefix;
        fullPath.replace(utxoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(utxo)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (verbosity.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "verbosity", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("verbosity")).append(querySuffix).append(QUrl::toPercentEncoding(verbosity.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestnetNTP1Api::testnetGetTokenMetadataOfUtxoCallback);
    connect(this, &OAITestnetNTP1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestnetNTP1Api::testnetGetTokenMetadataOfUtxoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetTokenMetadataResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testnetGetTokenMetadataOfUtxoSignal(output);
        Q_EMIT testnetGetTokenMetadataOfUtxoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testnetGetTokenMetadataOfUtxoSignalE(output, error_type, error_str);
        Q_EMIT testnetGetTokenMetadataOfUtxoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testnetGetTokenMetadataOfUtxoSignalError(output, error_type, error_str);
        Q_EMIT testnetGetTokenMetadataOfUtxoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestnetNTP1Api::testnetGetTransactionInfo(const QString &txid) {
    QString fullPath = QString(_serverConfigs["testnetGetTransactionInfo"][_serverIndices.value("testnetGetTransactionInfo")].URL()+"/testnet/ntp1/transactioninfo/{txid}");
    
    
    {
        QString txidPathParam("{");
        txidPathParam.append("txid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "txid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"txid"+pathSuffix : pathPrefix;
        fullPath.replace(txidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(txid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestnetNTP1Api::testnetGetTransactionInfoCallback);
    connect(this, &OAITestnetNTP1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestnetNTP1Api::testnetGetTransactionInfoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetTransactionInfoResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testnetGetTransactionInfoSignal(output);
        Q_EMIT testnetGetTransactionInfoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testnetGetTransactionInfoSignalE(output, error_type, error_str);
        Q_EMIT testnetGetTransactionInfoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testnetGetTransactionInfoSignalError(output, error_type, error_str);
        Q_EMIT testnetGetTransactionInfoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestnetNTP1Api::testnetIssueToken(const OAIIssueTokenRequest &oai_issue_token_request) {
    QString fullPath = QString(_serverConfigs["testnetIssueToken"][_serverIndices.value("testnetIssueToken")].URL()+"/testnet/ntp1/issue");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_issue_token_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestnetNTP1Api::testnetIssueTokenCallback);
    connect(this, &OAITestnetNTP1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestnetNTP1Api::testnetIssueTokenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIIssueTokenResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testnetIssueTokenSignal(output);
        Q_EMIT testnetIssueTokenSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testnetIssueTokenSignalE(output, error_type, error_str);
        Q_EMIT testnetIssueTokenSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testnetIssueTokenSignalError(output, error_type, error_str);
        Q_EMIT testnetIssueTokenSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestnetNTP1Api::testnetSendToken(const OAISendTokenRequest &oai_send_token_request) {
    QString fullPath = QString(_serverConfigs["testnetSendToken"][_serverIndices.value("testnetSendToken")].URL()+"/testnet/ntp1/sendtoken");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_token_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestnetNTP1Api::testnetSendTokenCallback);
    connect(this, &OAITestnetNTP1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestnetNTP1Api::testnetSendTokenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISendTokenResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testnetSendTokenSignal(output);
        Q_EMIT testnetSendTokenSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testnetSendTokenSignalE(output, error_type, error_str);
        Q_EMIT testnetSendTokenSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testnetSendTokenSignalError(output, error_type, error_str);
        Q_EMIT testnetSendTokenSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestnetNTP1Api::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
