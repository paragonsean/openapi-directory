/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTokenMetadataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTokenMetadataResponse::OAIGetTokenMetadataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTokenMetadataResponse::OAIGetTokenMetadataResponse() {
    this->initializeModel();
}

OAIGetTokenMetadataResponse::~OAIGetTokenMetadataResponse() {}

void OAIGetTokenMetadataResponse::initializeModel() {

    m_aggregation_policy_isSet = false;
    m_aggregation_policy_isValid = false;

    m_divisibility_isSet = false;
    m_divisibility_isValid = false;

    m_first_block_isSet = false;
    m_first_block_isValid = false;

    m_initial_issuance_amount_isSet = false;
    m_initial_issuance_amount_isValid = false;

    m_issuance_txid_isSet = false;
    m_issuance_txid_isValid = false;

    m_issue_address_isSet = false;
    m_issue_address_isValid = false;

    m_lock_status_isSet = false;
    m_lock_status_isValid = false;

    m_metadata_of_issuance_isSet = false;
    m_metadata_of_issuance_isValid = false;

    m_metadata_of_utxo_isSet = false;
    m_metadata_of_utxo_isValid = false;

    m_num_of_burns_isSet = false;
    m_num_of_burns_isValid = false;

    m_num_of_holders_isSet = false;
    m_num_of_holders_isValid = false;

    m_num_of_issuance_isSet = false;
    m_num_of_issuance_isValid = false;

    m_num_of_transfers_isSet = false;
    m_num_of_transfers_isValid = false;

    m_some_utxo_isSet = false;
    m_some_utxo_isValid = false;

    m_token_id_isSet = false;
    m_token_id_isValid = false;

    m_total_supply_isSet = false;
    m_total_supply_isValid = false;
}

void OAIGetTokenMetadataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTokenMetadataResponse::fromJsonObject(QJsonObject json) {

    m_aggregation_policy_isValid = ::OpenAPI::fromJsonValue(m_aggregation_policy, json[QString("aggregationPolicy")]);
    m_aggregation_policy_isSet = !json[QString("aggregationPolicy")].isNull() && m_aggregation_policy_isValid;

    m_divisibility_isValid = ::OpenAPI::fromJsonValue(m_divisibility, json[QString("divisibility")]);
    m_divisibility_isSet = !json[QString("divisibility")].isNull() && m_divisibility_isValid;

    m_first_block_isValid = ::OpenAPI::fromJsonValue(m_first_block, json[QString("firstBlock")]);
    m_first_block_isSet = !json[QString("firstBlock")].isNull() && m_first_block_isValid;

    m_initial_issuance_amount_isValid = ::OpenAPI::fromJsonValue(m_initial_issuance_amount, json[QString("initialIssuanceAmount")]);
    m_initial_issuance_amount_isSet = !json[QString("initialIssuanceAmount")].isNull() && m_initial_issuance_amount_isValid;

    m_issuance_txid_isValid = ::OpenAPI::fromJsonValue(m_issuance_txid, json[QString("issuanceTxid")]);
    m_issuance_txid_isSet = !json[QString("issuanceTxid")].isNull() && m_issuance_txid_isValid;

    m_issue_address_isValid = ::OpenAPI::fromJsonValue(m_issue_address, json[QString("issueAddress")]);
    m_issue_address_isSet = !json[QString("issueAddress")].isNull() && m_issue_address_isValid;

    m_lock_status_isValid = ::OpenAPI::fromJsonValue(m_lock_status, json[QString("lockStatus")]);
    m_lock_status_isSet = !json[QString("lockStatus")].isNull() && m_lock_status_isValid;

    m_metadata_of_issuance_isValid = ::OpenAPI::fromJsonValue(m_metadata_of_issuance, json[QString("metadataOfIssuance")]);
    m_metadata_of_issuance_isSet = !json[QString("metadataOfIssuance")].isNull() && m_metadata_of_issuance_isValid;

    m_metadata_of_utxo_isValid = ::OpenAPI::fromJsonValue(m_metadata_of_utxo, json[QString("metadataOfUtxo")]);
    m_metadata_of_utxo_isSet = !json[QString("metadataOfUtxo")].isNull() && m_metadata_of_utxo_isValid;

    m_num_of_burns_isValid = ::OpenAPI::fromJsonValue(m_num_of_burns, json[QString("numOfBurns")]);
    m_num_of_burns_isSet = !json[QString("numOfBurns")].isNull() && m_num_of_burns_isValid;

    m_num_of_holders_isValid = ::OpenAPI::fromJsonValue(m_num_of_holders, json[QString("numOfHolders")]);
    m_num_of_holders_isSet = !json[QString("numOfHolders")].isNull() && m_num_of_holders_isValid;

    m_num_of_issuance_isValid = ::OpenAPI::fromJsonValue(m_num_of_issuance, json[QString("numOfIssuance")]);
    m_num_of_issuance_isSet = !json[QString("numOfIssuance")].isNull() && m_num_of_issuance_isValid;

    m_num_of_transfers_isValid = ::OpenAPI::fromJsonValue(m_num_of_transfers, json[QString("numOfTransfers")]);
    m_num_of_transfers_isSet = !json[QString("numOfTransfers")].isNull() && m_num_of_transfers_isValid;

    m_some_utxo_isValid = ::OpenAPI::fromJsonValue(m_some_utxo, json[QString("someUtxo")]);
    m_some_utxo_isSet = !json[QString("someUtxo")].isNull() && m_some_utxo_isValid;

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("tokenId")]);
    m_token_id_isSet = !json[QString("tokenId")].isNull() && m_token_id_isValid;

    m_total_supply_isValid = ::OpenAPI::fromJsonValue(m_total_supply, json[QString("totalSupply")]);
    m_total_supply_isSet = !json[QString("totalSupply")].isNull() && m_total_supply_isValid;
}

QString OAIGetTokenMetadataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTokenMetadataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_policy_isSet) {
        obj.insert(QString("aggregationPolicy"), ::OpenAPI::toJsonValue(m_aggregation_policy));
    }
    if (m_divisibility_isSet) {
        obj.insert(QString("divisibility"), ::OpenAPI::toJsonValue(m_divisibility));
    }
    if (m_first_block_isSet) {
        obj.insert(QString("firstBlock"), ::OpenAPI::toJsonValue(m_first_block));
    }
    if (m_initial_issuance_amount_isSet) {
        obj.insert(QString("initialIssuanceAmount"), ::OpenAPI::toJsonValue(m_initial_issuance_amount));
    }
    if (m_issuance_txid_isSet) {
        obj.insert(QString("issuanceTxid"), ::OpenAPI::toJsonValue(m_issuance_txid));
    }
    if (m_issue_address_isSet) {
        obj.insert(QString("issueAddress"), ::OpenAPI::toJsonValue(m_issue_address));
    }
    if (m_lock_status_isSet) {
        obj.insert(QString("lockStatus"), ::OpenAPI::toJsonValue(m_lock_status));
    }
    if (m_metadata_of_issuance.isSet()) {
        obj.insert(QString("metadataOfIssuance"), ::OpenAPI::toJsonValue(m_metadata_of_issuance));
    }
    if (m_metadata_of_utxo.isSet()) {
        obj.insert(QString("metadataOfUtxo"), ::OpenAPI::toJsonValue(m_metadata_of_utxo));
    }
    if (m_num_of_burns_isSet) {
        obj.insert(QString("numOfBurns"), ::OpenAPI::toJsonValue(m_num_of_burns));
    }
    if (m_num_of_holders_isSet) {
        obj.insert(QString("numOfHolders"), ::OpenAPI::toJsonValue(m_num_of_holders));
    }
    if (m_num_of_issuance_isSet) {
        obj.insert(QString("numOfIssuance"), ::OpenAPI::toJsonValue(m_num_of_issuance));
    }
    if (m_num_of_transfers_isSet) {
        obj.insert(QString("numOfTransfers"), ::OpenAPI::toJsonValue(m_num_of_transfers));
    }
    if (m_some_utxo_isSet) {
        obj.insert(QString("someUtxo"), ::OpenAPI::toJsonValue(m_some_utxo));
    }
    if (m_token_id_isSet) {
        obj.insert(QString("tokenId"), ::OpenAPI::toJsonValue(m_token_id));
    }
    if (m_total_supply_isSet) {
        obj.insert(QString("totalSupply"), ::OpenAPI::toJsonValue(m_total_supply));
    }
    return obj;
}

QString OAIGetTokenMetadataResponse::getAggregationPolicy() const {
    return m_aggregation_policy;
}
void OAIGetTokenMetadataResponse::setAggregationPolicy(const QString &aggregation_policy) {
    m_aggregation_policy = aggregation_policy;
    m_aggregation_policy_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_aggregation_policy_Set() const{
    return m_aggregation_policy_isSet;
}

bool OAIGetTokenMetadataResponse::is_aggregation_policy_Valid() const{
    return m_aggregation_policy_isValid;
}

double OAIGetTokenMetadataResponse::getDivisibility() const {
    return m_divisibility;
}
void OAIGetTokenMetadataResponse::setDivisibility(const double &divisibility) {
    m_divisibility = divisibility;
    m_divisibility_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_divisibility_Set() const{
    return m_divisibility_isSet;
}

bool OAIGetTokenMetadataResponse::is_divisibility_Valid() const{
    return m_divisibility_isValid;
}

double OAIGetTokenMetadataResponse::getFirstBlock() const {
    return m_first_block;
}
void OAIGetTokenMetadataResponse::setFirstBlock(const double &first_block) {
    m_first_block = first_block;
    m_first_block_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_first_block_Set() const{
    return m_first_block_isSet;
}

bool OAIGetTokenMetadataResponse::is_first_block_Valid() const{
    return m_first_block_isValid;
}

double OAIGetTokenMetadataResponse::getInitialIssuanceAmount() const {
    return m_initial_issuance_amount;
}
void OAIGetTokenMetadataResponse::setInitialIssuanceAmount(const double &initial_issuance_amount) {
    m_initial_issuance_amount = initial_issuance_amount;
    m_initial_issuance_amount_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_initial_issuance_amount_Set() const{
    return m_initial_issuance_amount_isSet;
}

bool OAIGetTokenMetadataResponse::is_initial_issuance_amount_Valid() const{
    return m_initial_issuance_amount_isValid;
}

QString OAIGetTokenMetadataResponse::getIssuanceTxid() const {
    return m_issuance_txid;
}
void OAIGetTokenMetadataResponse::setIssuanceTxid(const QString &issuance_txid) {
    m_issuance_txid = issuance_txid;
    m_issuance_txid_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_issuance_txid_Set() const{
    return m_issuance_txid_isSet;
}

bool OAIGetTokenMetadataResponse::is_issuance_txid_Valid() const{
    return m_issuance_txid_isValid;
}

QString OAIGetTokenMetadataResponse::getIssueAddress() const {
    return m_issue_address;
}
void OAIGetTokenMetadataResponse::setIssueAddress(const QString &issue_address) {
    m_issue_address = issue_address;
    m_issue_address_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_issue_address_Set() const{
    return m_issue_address_isSet;
}

bool OAIGetTokenMetadataResponse::is_issue_address_Valid() const{
    return m_issue_address_isValid;
}

bool OAIGetTokenMetadataResponse::isLockStatus() const {
    return m_lock_status;
}
void OAIGetTokenMetadataResponse::setLockStatus(const bool &lock_status) {
    m_lock_status = lock_status;
    m_lock_status_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_lock_status_Set() const{
    return m_lock_status_isSet;
}

bool OAIGetTokenMetadataResponse::is_lock_status_Valid() const{
    return m_lock_status_isValid;
}

OAIGetTokenMetadataResponse_metadataOfIssuance OAIGetTokenMetadataResponse::getMetadataOfIssuance() const {
    return m_metadata_of_issuance;
}
void OAIGetTokenMetadataResponse::setMetadataOfIssuance(const OAIGetTokenMetadataResponse_metadataOfIssuance &metadata_of_issuance) {
    m_metadata_of_issuance = metadata_of_issuance;
    m_metadata_of_issuance_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_metadata_of_issuance_Set() const{
    return m_metadata_of_issuance_isSet;
}

bool OAIGetTokenMetadataResponse::is_metadata_of_issuance_Valid() const{
    return m_metadata_of_issuance_isValid;
}

OAIGetTokenMetadataResponse_metadataOfUtxo OAIGetTokenMetadataResponse::getMetadataOfUtxo() const {
    return m_metadata_of_utxo;
}
void OAIGetTokenMetadataResponse::setMetadataOfUtxo(const OAIGetTokenMetadataResponse_metadataOfUtxo &metadata_of_utxo) {
    m_metadata_of_utxo = metadata_of_utxo;
    m_metadata_of_utxo_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_metadata_of_utxo_Set() const{
    return m_metadata_of_utxo_isSet;
}

bool OAIGetTokenMetadataResponse::is_metadata_of_utxo_Valid() const{
    return m_metadata_of_utxo_isValid;
}

double OAIGetTokenMetadataResponse::getNumOfBurns() const {
    return m_num_of_burns;
}
void OAIGetTokenMetadataResponse::setNumOfBurns(const double &num_of_burns) {
    m_num_of_burns = num_of_burns;
    m_num_of_burns_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_num_of_burns_Set() const{
    return m_num_of_burns_isSet;
}

bool OAIGetTokenMetadataResponse::is_num_of_burns_Valid() const{
    return m_num_of_burns_isValid;
}

double OAIGetTokenMetadataResponse::getNumOfHolders() const {
    return m_num_of_holders;
}
void OAIGetTokenMetadataResponse::setNumOfHolders(const double &num_of_holders) {
    m_num_of_holders = num_of_holders;
    m_num_of_holders_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_num_of_holders_Set() const{
    return m_num_of_holders_isSet;
}

bool OAIGetTokenMetadataResponse::is_num_of_holders_Valid() const{
    return m_num_of_holders_isValid;
}

double OAIGetTokenMetadataResponse::getNumOfIssuance() const {
    return m_num_of_issuance;
}
void OAIGetTokenMetadataResponse::setNumOfIssuance(const double &num_of_issuance) {
    m_num_of_issuance = num_of_issuance;
    m_num_of_issuance_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_num_of_issuance_Set() const{
    return m_num_of_issuance_isSet;
}

bool OAIGetTokenMetadataResponse::is_num_of_issuance_Valid() const{
    return m_num_of_issuance_isValid;
}

double OAIGetTokenMetadataResponse::getNumOfTransfers() const {
    return m_num_of_transfers;
}
void OAIGetTokenMetadataResponse::setNumOfTransfers(const double &num_of_transfers) {
    m_num_of_transfers = num_of_transfers;
    m_num_of_transfers_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_num_of_transfers_Set() const{
    return m_num_of_transfers_isSet;
}

bool OAIGetTokenMetadataResponse::is_num_of_transfers_Valid() const{
    return m_num_of_transfers_isValid;
}

QString OAIGetTokenMetadataResponse::getSomeUtxo() const {
    return m_some_utxo;
}
void OAIGetTokenMetadataResponse::setSomeUtxo(const QString &some_utxo) {
    m_some_utxo = some_utxo;
    m_some_utxo_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_some_utxo_Set() const{
    return m_some_utxo_isSet;
}

bool OAIGetTokenMetadataResponse::is_some_utxo_Valid() const{
    return m_some_utxo_isValid;
}

QString OAIGetTokenMetadataResponse::getTokenId() const {
    return m_token_id;
}
void OAIGetTokenMetadataResponse::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAIGetTokenMetadataResponse::is_token_id_Valid() const{
    return m_token_id_isValid;
}

double OAIGetTokenMetadataResponse::getTotalSupply() const {
    return m_total_supply;
}
void OAIGetTokenMetadataResponse::setTotalSupply(const double &total_supply) {
    m_total_supply = total_supply;
    m_total_supply_isSet = true;
}

bool OAIGetTokenMetadataResponse::is_total_supply_Set() const{
    return m_total_supply_isSet;
}

bool OAIGetTokenMetadataResponse::is_total_supply_Valid() const{
    return m_total_supply_isValid;
}

bool OAIGetTokenMetadataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_divisibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_issuance_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuance_txid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_of_issuance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_of_utxo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_of_burns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_of_holders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_of_issuance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_of_transfers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_some_utxo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_supply_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTokenMetadataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
