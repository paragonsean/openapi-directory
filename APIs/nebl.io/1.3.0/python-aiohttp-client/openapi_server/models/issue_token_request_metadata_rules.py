# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue_token_request_metadata_rules_expiration import IssueTokenRequestMetadataRulesExpiration
from openapi_server.models.issue_token_request_metadata_rules_fees import IssueTokenRequestMetadataRulesFees
from openapi_server.models.issue_token_request_metadata_rules_holders_inner import IssueTokenRequestMetadataRulesHoldersInner
from openapi_server import util


class IssueTokenRequestMetadataRules(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration: IssueTokenRequestMetadataRulesExpiration=None, fees: IssueTokenRequestMetadataRulesFees=None, holders: List[IssueTokenRequestMetadataRulesHoldersInner]=None):
        """IssueTokenRequestMetadataRules - a model defined in OpenAPI

        :param expiration: The expiration of this IssueTokenRequestMetadataRules.
        :param fees: The fees of this IssueTokenRequestMetadataRules.
        :param holders: The holders of this IssueTokenRequestMetadataRules.
        """
        self.openapi_types = {
            'expiration': IssueTokenRequestMetadataRulesExpiration,
            'fees': IssueTokenRequestMetadataRulesFees,
            'holders': List[IssueTokenRequestMetadataRulesHoldersInner]
        }

        self.attribute_map = {
            'expiration': 'expiration',
            'fees': 'fees',
            'holders': 'holders'
        }

        self._expiration = expiration
        self._fees = fees
        self._holders = holders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTokenRequestMetadataRules':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issueTokenRequest_metadata_rules of this IssueTokenRequestMetadataRules.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration(self):
        """Gets the expiration of this IssueTokenRequestMetadataRules.


        :return: The expiration of this IssueTokenRequestMetadataRules.
        :rtype: IssueTokenRequestMetadataRulesExpiration
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this IssueTokenRequestMetadataRules.


        :param expiration: The expiration of this IssueTokenRequestMetadataRules.
        :type expiration: IssueTokenRequestMetadataRulesExpiration
        """

        self._expiration = expiration

    @property
    def fees(self):
        """Gets the fees of this IssueTokenRequestMetadataRules.


        :return: The fees of this IssueTokenRequestMetadataRules.
        :rtype: IssueTokenRequestMetadataRulesFees
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this IssueTokenRequestMetadataRules.


        :param fees: The fees of this IssueTokenRequestMetadataRules.
        :type fees: IssueTokenRequestMetadataRulesFees
        """

        self._fees = fees

    @property
    def holders(self):
        """Gets the holders of this IssueTokenRequestMetadataRules.

        Array of objects describing what addresses can hold the token

        :return: The holders of this IssueTokenRequestMetadataRules.
        :rtype: List[IssueTokenRequestMetadataRulesHoldersInner]
        """
        return self._holders

    @holders.setter
    def holders(self, holders):
        """Sets the holders of this IssueTokenRequestMetadataRules.

        Array of objects describing what addresses can hold the token

        :param holders: The holders of this IssueTokenRequestMetadataRules.
        :type holders: List[IssueTokenRequestMetadataRulesHoldersInner]
        """

        self._holders = holders
