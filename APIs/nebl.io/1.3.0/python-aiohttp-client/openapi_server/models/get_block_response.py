# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetBlockResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bits: str=None, confirmations: float=None, difficulty: float=None, hash: str=None, height: float=None, merkleroot: str=None, nextblockhash: str=None, nonce: float=None, previousblockhash: str=None, reward: float=None, size: float=None, time: float=None, tx: List[str]=None, version: float=None):
        """GetBlockResponse - a model defined in OpenAPI

        :param bits: The bits of this GetBlockResponse.
        :param confirmations: The confirmations of this GetBlockResponse.
        :param difficulty: The difficulty of this GetBlockResponse.
        :param hash: The hash of this GetBlockResponse.
        :param height: The height of this GetBlockResponse.
        :param merkleroot: The merkleroot of this GetBlockResponse.
        :param nextblockhash: The nextblockhash of this GetBlockResponse.
        :param nonce: The nonce of this GetBlockResponse.
        :param previousblockhash: The previousblockhash of this GetBlockResponse.
        :param reward: The reward of this GetBlockResponse.
        :param size: The size of this GetBlockResponse.
        :param time: The time of this GetBlockResponse.
        :param tx: The tx of this GetBlockResponse.
        :param version: The version of this GetBlockResponse.
        """
        self.openapi_types = {
            'bits': str,
            'confirmations': float,
            'difficulty': float,
            'hash': str,
            'height': float,
            'merkleroot': str,
            'nextblockhash': str,
            'nonce': float,
            'previousblockhash': str,
            'reward': float,
            'size': float,
            'time': float,
            'tx': List[str],
            'version': float
        }

        self.attribute_map = {
            'bits': 'bits',
            'confirmations': 'confirmations',
            'difficulty': 'difficulty',
            'hash': 'hash',
            'height': 'height',
            'merkleroot': 'merkleroot',
            'nextblockhash': 'nextblockhash',
            'nonce': 'nonce',
            'previousblockhash': 'previousblockhash',
            'reward': 'reward',
            'size': 'size',
            'time': 'time',
            'tx': 'tx',
            'version': 'version'
        }

        self._bits = bits
        self._confirmations = confirmations
        self._difficulty = difficulty
        self._hash = hash
        self._height = height
        self._merkleroot = merkleroot
        self._nextblockhash = nextblockhash
        self._nonce = nonce
        self._previousblockhash = previousblockhash
        self._reward = reward
        self._size = size
        self._time = time
        self._tx = tx
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetBlockResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getBlockResponse of this GetBlockResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bits(self):
        """Gets the bits of this GetBlockResponse.

        Block bits

        :return: The bits of this GetBlockResponse.
        :rtype: str
        """
        return self._bits

    @bits.setter
    def bits(self, bits):
        """Sets the bits of this GetBlockResponse.

        Block bits

        :param bits: The bits of this GetBlockResponse.
        :type bits: str
        """

        self._bits = bits

    @property
    def confirmations(self):
        """Gets the confirmations of this GetBlockResponse.

        Number of confirmations block has

        :return: The confirmations of this GetBlockResponse.
        :rtype: float
        """
        return self._confirmations

    @confirmations.setter
    def confirmations(self, confirmations):
        """Sets the confirmations of this GetBlockResponse.

        Number of confirmations block has

        :param confirmations: The confirmations of this GetBlockResponse.
        :type confirmations: float
        """

        self._confirmations = confirmations

    @property
    def difficulty(self):
        """Gets the difficulty of this GetBlockResponse.

        Block difficulty

        :return: The difficulty of this GetBlockResponse.
        :rtype: float
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this GetBlockResponse.

        Block difficulty

        :param difficulty: The difficulty of this GetBlockResponse.
        :type difficulty: float
        """

        self._difficulty = difficulty

    @property
    def hash(self):
        """Gets the hash of this GetBlockResponse.

        Block hash

        :return: The hash of this GetBlockResponse.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this GetBlockResponse.

        Block hash

        :param hash: The hash of this GetBlockResponse.
        :type hash: str
        """

        self._hash = hash

    @property
    def height(self):
        """Gets the height of this GetBlockResponse.

        Block height

        :return: The height of this GetBlockResponse.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this GetBlockResponse.

        Block height

        :param height: The height of this GetBlockResponse.
        :type height: float
        """

        self._height = height

    @property
    def merkleroot(self):
        """Gets the merkleroot of this GetBlockResponse.

        Merkleroot of block

        :return: The merkleroot of this GetBlockResponse.
        :rtype: str
        """
        return self._merkleroot

    @merkleroot.setter
    def merkleroot(self, merkleroot):
        """Sets the merkleroot of this GetBlockResponse.

        Merkleroot of block

        :param merkleroot: The merkleroot of this GetBlockResponse.
        :type merkleroot: str
        """

        self._merkleroot = merkleroot

    @property
    def nextblockhash(self):
        """Gets the nextblockhash of this GetBlockResponse.

        Hash of the next block on the chain

        :return: The nextblockhash of this GetBlockResponse.
        :rtype: str
        """
        return self._nextblockhash

    @nextblockhash.setter
    def nextblockhash(self, nextblockhash):
        """Sets the nextblockhash of this GetBlockResponse.

        Hash of the next block on the chain

        :param nextblockhash: The nextblockhash of this GetBlockResponse.
        :type nextblockhash: str
        """

        self._nextblockhash = nextblockhash

    @property
    def nonce(self):
        """Gets the nonce of this GetBlockResponse.

        Block nonce

        :return: The nonce of this GetBlockResponse.
        :rtype: float
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this GetBlockResponse.

        Block nonce

        :param nonce: The nonce of this GetBlockResponse.
        :type nonce: float
        """

        self._nonce = nonce

    @property
    def previousblockhash(self):
        """Gets the previousblockhash of this GetBlockResponse.

        Hash of the previous block on the chain

        :return: The previousblockhash of this GetBlockResponse.
        :rtype: str
        """
        return self._previousblockhash

    @previousblockhash.setter
    def previousblockhash(self, previousblockhash):
        """Sets the previousblockhash of this GetBlockResponse.

        Hash of the previous block on the chain

        :param previousblockhash: The previousblockhash of this GetBlockResponse.
        :type previousblockhash: str
        """

        self._previousblockhash = previousblockhash

    @property
    def reward(self):
        """Gets the reward of this GetBlockResponse.

        Number of NEBL awarded in this block

        :return: The reward of this GetBlockResponse.
        :rtype: float
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this GetBlockResponse.

        Number of NEBL awarded in this block

        :param reward: The reward of this GetBlockResponse.
        :type reward: float
        """

        self._reward = reward

    @property
    def size(self):
        """Gets the size of this GetBlockResponse.

        Block size in bytes

        :return: The size of this GetBlockResponse.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GetBlockResponse.

        Block size in bytes

        :param size: The size of this GetBlockResponse.
        :type size: float
        """

        self._size = size

    @property
    def time(self):
        """Gets the time of this GetBlockResponse.

        Block time relative to epoch

        :return: The time of this GetBlockResponse.
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this GetBlockResponse.

        Block time relative to epoch

        :param time: The time of this GetBlockResponse.
        :type time: float
        """

        self._time = time

    @property
    def tx(self):
        """Gets the tx of this GetBlockResponse.

        Array of tx ids in the block

        :return: The tx of this GetBlockResponse.
        :rtype: List[str]
        """
        return self._tx

    @tx.setter
    def tx(self, tx):
        """Sets the tx of this GetBlockResponse.

        Array of tx ids in the block

        :param tx: The tx of this GetBlockResponse.
        :type tx: List[str]
        """

        self._tx = tx

    @property
    def version(self):
        """Gets the version of this GetBlockResponse.

        Block version

        :return: The version of this GetBlockResponse.
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GetBlockResponse.

        Block version

        :param version: The version of this GetBlockResponse.
        :type version: float
        """

        self._version = version
