# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueTokenRequestFlags(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, split_change: bool=None):
        """IssueTokenRequestFlags - a model defined in OpenAPI

        :param split_change: The split_change of this IssueTokenRequestFlags.
        """
        self.openapi_types = {
            'split_change': bool
        }

        self.attribute_map = {
            'split_change': 'splitChange'
        }

        self._split_change = split_change

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTokenRequestFlags':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issueTokenRequest_flags of this IssueTokenRequestFlags.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def split_change(self):
        """Gets the split_change of this IssueTokenRequestFlags.

        If true change will be split into 2 outputs, one for NEBL change and one for NTP1 change (recommended)

        :return: The split_change of this IssueTokenRequestFlags.
        :rtype: bool
        """
        return self._split_change

    @split_change.setter
    def split_change(self, split_change):
        """Sets the split_change of this IssueTokenRequestFlags.

        If true change will be split into 2 outputs, one for NEBL change and one for NTP1 change (recommended)

        :param split_change: The split_change of this IssueTokenRequestFlags.
        :type split_change: bool
        """

        self._split_change = split_change
