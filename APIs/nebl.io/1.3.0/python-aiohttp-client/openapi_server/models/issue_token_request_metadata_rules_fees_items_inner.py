# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueTokenRequestMetadataRulesFeesItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, token_id: str=None, value: str=None):
        """IssueTokenRequestMetadataRulesFeesItemsInner - a model defined in OpenAPI

        :param address: The address of this IssueTokenRequestMetadataRulesFeesItemsInner.
        :param token_id: The token_id of this IssueTokenRequestMetadataRulesFeesItemsInner.
        :param value: The value of this IssueTokenRequestMetadataRulesFeesItemsInner.
        """
        self.openapi_types = {
            'address': str,
            'token_id': str,
            'value': str
        }

        self.attribute_map = {
            'address': 'address',
            'token_id': 'tokenId',
            'value': 'value'
        }

        self._address = address
        self._token_id = token_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTokenRequestMetadataRulesFeesItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issueTokenRequest_metadata_rules_fees_items_inner of this IssueTokenRequestMetadataRulesFeesItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this IssueTokenRequestMetadataRulesFeesItemsInner.

        Address fee is auto sent to

        :return: The address of this IssueTokenRequestMetadataRulesFeesItemsInner.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IssueTokenRequestMetadataRulesFeesItemsInner.

        Address fee is auto sent to

        :param address: The address of this IssueTokenRequestMetadataRulesFeesItemsInner.
        :type address: str
        """

        self._address = address

    @property
    def token_id(self):
        """Gets the token_id of this IssueTokenRequestMetadataRulesFeesItemsInner.

        How fee should be paid, either with a tokenId, or with NEBL if null

        :return: The token_id of this IssueTokenRequestMetadataRulesFeesItemsInner.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this IssueTokenRequestMetadataRulesFeesItemsInner.

        How fee should be paid, either with a tokenId, or with NEBL if null

        :param token_id: The token_id of this IssueTokenRequestMetadataRulesFeesItemsInner.
        :type token_id: str
        """

        self._token_id = token_id

    @property
    def value(self):
        """Gets the value of this IssueTokenRequestMetadataRulesFeesItemsInner.

        Amount of NTP1 token, or NEBL (in satoshi) to pay as fee

        :return: The value of this IssueTokenRequestMetadataRulesFeesItemsInner.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IssueTokenRequestMetadataRulesFeesItemsInner.

        Amount of NTP1 token, or NEBL (in satoshi) to pay as fee

        :param value: The value of this IssueTokenRequestMetadataRulesFeesItemsInner.
        :type value: str
        """

        self._value = value
