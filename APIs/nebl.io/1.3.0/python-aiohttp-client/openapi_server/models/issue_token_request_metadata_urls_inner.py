# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueTokenRequestMetadataUrlsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_hash: str=None, mime_type: str=None, name: str=None, url: str=None):
        """IssueTokenRequestMetadataUrlsInner - a model defined in OpenAPI

        :param data_hash: The data_hash of this IssueTokenRequestMetadataUrlsInner.
        :param mime_type: The mime_type of this IssueTokenRequestMetadataUrlsInner.
        :param name: The name of this IssueTokenRequestMetadataUrlsInner.
        :param url: The url of this IssueTokenRequestMetadataUrlsInner.
        """
        self.openapi_types = {
            'data_hash': str,
            'mime_type': str,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'data_hash': 'dataHash',
            'mime_type': 'mimeType',
            'name': 'name',
            'url': 'url'
        }

        self._data_hash = data_hash
        self._mime_type = mime_type
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTokenRequestMetadataUrlsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issueTokenRequest_metadata_urls_inner of this IssueTokenRequestMetadataUrlsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_hash(self):
        """Gets the data_hash of this IssueTokenRequestMetadataUrlsInner.

        Hash of data at the URL, used for verification

        :return: The data_hash of this IssueTokenRequestMetadataUrlsInner.
        :rtype: str
        """
        return self._data_hash

    @data_hash.setter
    def data_hash(self, data_hash):
        """Sets the data_hash of this IssueTokenRequestMetadataUrlsInner.

        Hash of data at the URL, used for verification

        :param data_hash: The data_hash of this IssueTokenRequestMetadataUrlsInner.
        :type data_hash: str
        """

        self._data_hash = data_hash

    @property
    def mime_type(self):
        """Gets the mime_type of this IssueTokenRequestMetadataUrlsInner.

        mimeType of URL content

        :return: The mime_type of this IssueTokenRequestMetadataUrlsInner.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this IssueTokenRequestMetadataUrlsInner.

        mimeType of URL content

        :param mime_type: The mime_type of this IssueTokenRequestMetadataUrlsInner.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this IssueTokenRequestMetadataUrlsInner.

        Name of the URL

        :return: The name of this IssueTokenRequestMetadataUrlsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueTokenRequestMetadataUrlsInner.

        Name of the URL

        :param name: The name of this IssueTokenRequestMetadataUrlsInner.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this IssueTokenRequestMetadataUrlsInner.

        Actual URL

        :return: The url of this IssueTokenRequestMetadataUrlsInner.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IssueTokenRequestMetadataUrlsInner.

        Actual URL

        :param url: The url of this IssueTokenRequestMetadataUrlsInner.
        :type url: str
        """

        self._url = url
