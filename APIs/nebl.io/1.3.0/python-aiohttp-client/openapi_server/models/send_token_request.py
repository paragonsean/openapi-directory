# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.burn_token_request_transfer_inner import BurnTokenRequestTransferInner
from openapi_server.models.issue_token_request_flags import IssueTokenRequestFlags
from openapi_server.models.issue_token_request_metadata import IssueTokenRequestMetadata
from openapi_server import util


class SendTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fee: float=None, flags: IssueTokenRequestFlags=None, _from: List[str]=None, metadata: IssueTokenRequestMetadata=None, sendutxo: List[str]=None, to: List[BurnTokenRequestTransferInner]=None):
        """SendTokenRequest - a model defined in OpenAPI

        :param fee: The fee of this SendTokenRequest.
        :param flags: The flags of this SendTokenRequest.
        :param _from: The _from of this SendTokenRequest.
        :param metadata: The metadata of this SendTokenRequest.
        :param sendutxo: The sendutxo of this SendTokenRequest.
        :param to: The to of this SendTokenRequest.
        """
        self.openapi_types = {
            'fee': float,
            'flags': IssueTokenRequestFlags,
            '_from': List[str],
            'metadata': IssueTokenRequestMetadata,
            'sendutxo': List[str],
            'to': List[BurnTokenRequestTransferInner]
        }

        self.attribute_map = {
            'fee': 'fee',
            'flags': 'flags',
            '_from': 'from',
            'metadata': 'metadata',
            'sendutxo': 'sendutxo',
            'to': 'to'
        }

        self._fee = fee
        self._flags = flags
        self.__from = _from
        self._metadata = metadata
        self._sendutxo = sendutxo
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sendTokenRequest of this SendTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fee(self):
        """Gets the fee of this SendTokenRequest.

        Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)

        :return: The fee of this SendTokenRequest.
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this SendTokenRequest.

        Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)

        :param fee: The fee of this SendTokenRequest.
        :type fee: float
        """
        if fee is None:
            raise ValueError("Invalid value for `fee`, must not be `None`")

        self._fee = fee

    @property
    def flags(self):
        """Gets the flags of this SendTokenRequest.


        :return: The flags of this SendTokenRequest.
        :rtype: IssueTokenRequestFlags
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this SendTokenRequest.


        :param flags: The flags of this SendTokenRequest.
        :type flags: IssueTokenRequestFlags
        """

        self._flags = flags

    @property
    def _from(self):
        """Gets the _from of this SendTokenRequest.

        Array of addresses to send the token from

        :return: The _from of this SendTokenRequest.
        :rtype: List[str]
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SendTokenRequest.

        Array of addresses to send the token from

        :param _from: The _from of this SendTokenRequest.
        :type _from: List[str]
        """

        self.__from = _from

    @property
    def metadata(self):
        """Gets the metadata of this SendTokenRequest.


        :return: The metadata of this SendTokenRequest.
        :rtype: IssueTokenRequestMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SendTokenRequest.


        :param metadata: The metadata of this SendTokenRequest.
        :type metadata: IssueTokenRequestMetadata
        """

        self._metadata = metadata

    @property
    def sendutxo(self):
        """Gets the sendutxo of this SendTokenRequest.

        Array of UTXOs to send the token from

        :return: The sendutxo of this SendTokenRequest.
        :rtype: List[str]
        """
        return self._sendutxo

    @sendutxo.setter
    def sendutxo(self, sendutxo):
        """Sets the sendutxo of this SendTokenRequest.

        Array of UTXOs to send the token from

        :param sendutxo: The sendutxo of this SendTokenRequest.
        :type sendutxo: List[str]
        """

        self._sendutxo = sendutxo

    @property
    def to(self):
        """Gets the to of this SendTokenRequest.


        :return: The to of this SendTokenRequest.
        :rtype: List[BurnTokenRequestTransferInner]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendTokenRequest.


        :param to: The to of this SendTokenRequest.
        :type to: List[BurnTokenRequestTransferInner]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
