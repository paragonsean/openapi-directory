# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BroadcastTxRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tx_hex: str=None):
        """BroadcastTxRequest - a model defined in OpenAPI

        :param tx_hex: The tx_hex of this BroadcastTxRequest.
        """
        self.openapi_types = {
            'tx_hex': str
        }

        self.attribute_map = {
            'tx_hex': 'txHex'
        }

        self._tx_hex = tx_hex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BroadcastTxRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The broadcastTxRequest of this BroadcastTxRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tx_hex(self):
        """Gets the tx_hex of this BroadcastTxRequest.

        Signed raw tx hex to broadcast

        :return: The tx_hex of this BroadcastTxRequest.
        :rtype: str
        """
        return self._tx_hex

    @tx_hex.setter
    def tx_hex(self, tx_hex):
        """Sets the tx_hex of this BroadcastTxRequest.

        Signed raw tx hex to broadcast

        :param tx_hex: The tx_hex of this BroadcastTxRequest.
        :type tx_hex: str
        """
        if tx_hex is None:
            raise ValueError("Invalid value for `tx_hex`, must not be `None`")

        self._tx_hex = tx_hex
