# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_token_metadata_response_metadata_of_issuance import GetTokenMetadataResponseMetadataOfIssuance
from openapi_server.models.get_token_metadata_response_metadata_of_utxo import GetTokenMetadataResponseMetadataOfUtxo
from openapi_server import util


class GetTokenMetadataResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_policy: str=None, divisibility: float=None, first_block: float=None, initial_issuance_amount: float=None, issuance_txid: str=None, issue_address: str=None, lock_status: bool=None, metadata_of_issuance: GetTokenMetadataResponseMetadataOfIssuance=None, metadata_of_utxo: GetTokenMetadataResponseMetadataOfUtxo=None, num_of_burns: float=None, num_of_holders: float=None, num_of_issuance: float=None, num_of_transfers: float=None, some_utxo: str=None, token_id: str=None, total_supply: float=None):
        """GetTokenMetadataResponse - a model defined in OpenAPI

        :param aggregation_policy: The aggregation_policy of this GetTokenMetadataResponse.
        :param divisibility: The divisibility of this GetTokenMetadataResponse.
        :param first_block: The first_block of this GetTokenMetadataResponse.
        :param initial_issuance_amount: The initial_issuance_amount of this GetTokenMetadataResponse.
        :param issuance_txid: The issuance_txid of this GetTokenMetadataResponse.
        :param issue_address: The issue_address of this GetTokenMetadataResponse.
        :param lock_status: The lock_status of this GetTokenMetadataResponse.
        :param metadata_of_issuance: The metadata_of_issuance of this GetTokenMetadataResponse.
        :param metadata_of_utxo: The metadata_of_utxo of this GetTokenMetadataResponse.
        :param num_of_burns: The num_of_burns of this GetTokenMetadataResponse.
        :param num_of_holders: The num_of_holders of this GetTokenMetadataResponse.
        :param num_of_issuance: The num_of_issuance of this GetTokenMetadataResponse.
        :param num_of_transfers: The num_of_transfers of this GetTokenMetadataResponse.
        :param some_utxo: The some_utxo of this GetTokenMetadataResponse.
        :param token_id: The token_id of this GetTokenMetadataResponse.
        :param total_supply: The total_supply of this GetTokenMetadataResponse.
        """
        self.openapi_types = {
            'aggregation_policy': str,
            'divisibility': float,
            'first_block': float,
            'initial_issuance_amount': float,
            'issuance_txid': str,
            'issue_address': str,
            'lock_status': bool,
            'metadata_of_issuance': GetTokenMetadataResponseMetadataOfIssuance,
            'metadata_of_utxo': GetTokenMetadataResponseMetadataOfUtxo,
            'num_of_burns': float,
            'num_of_holders': float,
            'num_of_issuance': float,
            'num_of_transfers': float,
            'some_utxo': str,
            'token_id': str,
            'total_supply': float
        }

        self.attribute_map = {
            'aggregation_policy': 'aggregationPolicy',
            'divisibility': 'divisibility',
            'first_block': 'firstBlock',
            'initial_issuance_amount': 'initialIssuanceAmount',
            'issuance_txid': 'issuanceTxid',
            'issue_address': 'issueAddress',
            'lock_status': 'lockStatus',
            'metadata_of_issuance': 'metadataOfIssuance',
            'metadata_of_utxo': 'metadataOfUtxo',
            'num_of_burns': 'numOfBurns',
            'num_of_holders': 'numOfHolders',
            'num_of_issuance': 'numOfIssuance',
            'num_of_transfers': 'numOfTransfers',
            'some_utxo': 'someUtxo',
            'token_id': 'tokenId',
            'total_supply': 'totalSupply'
        }

        self._aggregation_policy = aggregation_policy
        self._divisibility = divisibility
        self._first_block = first_block
        self._initial_issuance_amount = initial_issuance_amount
        self._issuance_txid = issuance_txid
        self._issue_address = issue_address
        self._lock_status = lock_status
        self._metadata_of_issuance = metadata_of_issuance
        self._metadata_of_utxo = metadata_of_utxo
        self._num_of_burns = num_of_burns
        self._num_of_holders = num_of_holders
        self._num_of_issuance = num_of_issuance
        self._num_of_transfers = num_of_transfers
        self._some_utxo = some_utxo
        self._token_id = token_id
        self._total_supply = total_supply

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTokenMetadataResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getTokenMetadataResponse of this GetTokenMetadataResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_policy(self):
        """Gets the aggregation_policy of this GetTokenMetadataResponse.

        Whether the tokens are aggregatable

        :return: The aggregation_policy of this GetTokenMetadataResponse.
        :rtype: str
        """
        return self._aggregation_policy

    @aggregation_policy.setter
    def aggregation_policy(self, aggregation_policy):
        """Sets the aggregation_policy of this GetTokenMetadataResponse.

        Whether the tokens are aggregatable

        :param aggregation_policy: The aggregation_policy of this GetTokenMetadataResponse.
        :type aggregation_policy: str
        """

        self._aggregation_policy = aggregation_policy

    @property
    def divisibility(self):
        """Gets the divisibility of this GetTokenMetadataResponse.

        Decimal places the token is divisible to

        :return: The divisibility of this GetTokenMetadataResponse.
        :rtype: float
        """
        return self._divisibility

    @divisibility.setter
    def divisibility(self, divisibility):
        """Sets the divisibility of this GetTokenMetadataResponse.

        Decimal places the token is divisible to

        :param divisibility: The divisibility of this GetTokenMetadataResponse.
        :type divisibility: float
        """

        self._divisibility = divisibility

    @property
    def first_block(self):
        """Gets the first_block of this GetTokenMetadataResponse.

        Block number token was issued in

        :return: The first_block of this GetTokenMetadataResponse.
        :rtype: float
        """
        return self._first_block

    @first_block.setter
    def first_block(self, first_block):
        """Sets the first_block of this GetTokenMetadataResponse.

        Block number token was issued in

        :param first_block: The first_block of this GetTokenMetadataResponse.
        :type first_block: float
        """

        self._first_block = first_block

    @property
    def initial_issuance_amount(self):
        """Gets the initial_issuance_amount of this GetTokenMetadataResponse.

        Total tokens issued in initial issuance

        :return: The initial_issuance_amount of this GetTokenMetadataResponse.
        :rtype: float
        """
        return self._initial_issuance_amount

    @initial_issuance_amount.setter
    def initial_issuance_amount(self, initial_issuance_amount):
        """Sets the initial_issuance_amount of this GetTokenMetadataResponse.

        Total tokens issued in initial issuance

        :param initial_issuance_amount: The initial_issuance_amount of this GetTokenMetadataResponse.
        :type initial_issuance_amount: float
        """

        self._initial_issuance_amount = initial_issuance_amount

    @property
    def issuance_txid(self):
        """Gets the issuance_txid of this GetTokenMetadataResponse.

        TXID the token was issued with

        :return: The issuance_txid of this GetTokenMetadataResponse.
        :rtype: str
        """
        return self._issuance_txid

    @issuance_txid.setter
    def issuance_txid(self, issuance_txid):
        """Sets the issuance_txid of this GetTokenMetadataResponse.

        TXID the token was issued with

        :param issuance_txid: The issuance_txid of this GetTokenMetadataResponse.
        :type issuance_txid: str
        """

        self._issuance_txid = issuance_txid

    @property
    def issue_address(self):
        """Gets the issue_address of this GetTokenMetadataResponse.

        Address that issued the tokens

        :return: The issue_address of this GetTokenMetadataResponse.
        :rtype: str
        """
        return self._issue_address

    @issue_address.setter
    def issue_address(self, issue_address):
        """Sets the issue_address of this GetTokenMetadataResponse.

        Address that issued the tokens

        :param issue_address: The issue_address of this GetTokenMetadataResponse.
        :type issue_address: str
        """

        self._issue_address = issue_address

    @property
    def lock_status(self):
        """Gets the lock_status of this GetTokenMetadataResponse.

        Whether issuance of more tokens is locked

        :return: The lock_status of this GetTokenMetadataResponse.
        :rtype: bool
        """
        return self._lock_status

    @lock_status.setter
    def lock_status(self, lock_status):
        """Sets the lock_status of this GetTokenMetadataResponse.

        Whether issuance of more tokens is locked

        :param lock_status: The lock_status of this GetTokenMetadataResponse.
        :type lock_status: bool
        """

        self._lock_status = lock_status

    @property
    def metadata_of_issuance(self):
        """Gets the metadata_of_issuance of this GetTokenMetadataResponse.


        :return: The metadata_of_issuance of this GetTokenMetadataResponse.
        :rtype: GetTokenMetadataResponseMetadataOfIssuance
        """
        return self._metadata_of_issuance

    @metadata_of_issuance.setter
    def metadata_of_issuance(self, metadata_of_issuance):
        """Sets the metadata_of_issuance of this GetTokenMetadataResponse.


        :param metadata_of_issuance: The metadata_of_issuance of this GetTokenMetadataResponse.
        :type metadata_of_issuance: GetTokenMetadataResponseMetadataOfIssuance
        """

        self._metadata_of_issuance = metadata_of_issuance

    @property
    def metadata_of_utxo(self):
        """Gets the metadata_of_utxo of this GetTokenMetadataResponse.


        :return: The metadata_of_utxo of this GetTokenMetadataResponse.
        :rtype: GetTokenMetadataResponseMetadataOfUtxo
        """
        return self._metadata_of_utxo

    @metadata_of_utxo.setter
    def metadata_of_utxo(self, metadata_of_utxo):
        """Sets the metadata_of_utxo of this GetTokenMetadataResponse.


        :param metadata_of_utxo: The metadata_of_utxo of this GetTokenMetadataResponse.
        :type metadata_of_utxo: GetTokenMetadataResponseMetadataOfUtxo
        """

        self._metadata_of_utxo = metadata_of_utxo

    @property
    def num_of_burns(self):
        """Gets the num_of_burns of this GetTokenMetadataResponse.

        Number of times tokens have been burned

        :return: The num_of_burns of this GetTokenMetadataResponse.
        :rtype: float
        """
        return self._num_of_burns

    @num_of_burns.setter
    def num_of_burns(self, num_of_burns):
        """Sets the num_of_burns of this GetTokenMetadataResponse.

        Number of times tokens have been burned

        :param num_of_burns: The num_of_burns of this GetTokenMetadataResponse.
        :type num_of_burns: float
        """

        self._num_of_burns = num_of_burns

    @property
    def num_of_holders(self):
        """Gets the num_of_holders of this GetTokenMetadataResponse.

        Total number of addresses this token is held at

        :return: The num_of_holders of this GetTokenMetadataResponse.
        :rtype: float
        """
        return self._num_of_holders

    @num_of_holders.setter
    def num_of_holders(self, num_of_holders):
        """Sets the num_of_holders of this GetTokenMetadataResponse.

        Total number of addresses this token is held at

        :param num_of_holders: The num_of_holders of this GetTokenMetadataResponse.
        :type num_of_holders: float
        """

        self._num_of_holders = num_of_holders

    @property
    def num_of_issuance(self):
        """Gets the num_of_issuance of this GetTokenMetadataResponse.

        Total number of times this token has been issued

        :return: The num_of_issuance of this GetTokenMetadataResponse.
        :rtype: float
        """
        return self._num_of_issuance

    @num_of_issuance.setter
    def num_of_issuance(self, num_of_issuance):
        """Sets the num_of_issuance of this GetTokenMetadataResponse.

        Total number of times this token has been issued

        :param num_of_issuance: The num_of_issuance of this GetTokenMetadataResponse.
        :type num_of_issuance: float
        """

        self._num_of_issuance = num_of_issuance

    @property
    def num_of_transfers(self):
        """Gets the num_of_transfers of this GetTokenMetadataResponse.

        Total number of transactions of this token

        :return: The num_of_transfers of this GetTokenMetadataResponse.
        :rtype: float
        """
        return self._num_of_transfers

    @num_of_transfers.setter
    def num_of_transfers(self, num_of_transfers):
        """Sets the num_of_transfers of this GetTokenMetadataResponse.

        Total number of transactions of this token

        :param num_of_transfers: The num_of_transfers of this GetTokenMetadataResponse.
        :type num_of_transfers: float
        """

        self._num_of_transfers = num_of_transfers

    @property
    def some_utxo(self):
        """Gets the some_utxo of this GetTokenMetadataResponse.

        Example UTXO containing this token.

        :return: The some_utxo of this GetTokenMetadataResponse.
        :rtype: str
        """
        return self._some_utxo

    @some_utxo.setter
    def some_utxo(self, some_utxo):
        """Sets the some_utxo of this GetTokenMetadataResponse.

        Example UTXO containing this token.

        :param some_utxo: The some_utxo of this GetTokenMetadataResponse.
        :type some_utxo: str
        """

        self._some_utxo = some_utxo

    @property
    def token_id(self):
        """Gets the token_id of this GetTokenMetadataResponse.

        ID of the token

        :return: The token_id of this GetTokenMetadataResponse.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this GetTokenMetadataResponse.

        ID of the token

        :param token_id: The token_id of this GetTokenMetadataResponse.
        :type token_id: str
        """

        self._token_id = token_id

    @property
    def total_supply(self):
        """Gets the total_supply of this GetTokenMetadataResponse.

        Total number of tokens in supply

        :return: The total_supply of this GetTokenMetadataResponse.
        :rtype: float
        """
        return self._total_supply

    @total_supply.setter
    def total_supply(self, total_supply):
        """Sets the total_supply of this GetTokenMetadataResponse.

        Total number of tokens in supply

        :param total_supply: The total_supply of this GetTokenMetadataResponse.
        :type total_supply: float
        """

        self._total_supply = total_supply
