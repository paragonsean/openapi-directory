# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue_token_request_flags import IssueTokenRequestFlags
from openapi_server.models.issue_token_request_metadata import IssueTokenRequestMetadata
from openapi_server.models.issue_token_request_transfer_inner import IssueTokenRequestTransferInner
from openapi_server import util


class IssueTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, divisibility: float=None, fee: float=None, flags: IssueTokenRequestFlags=None, issue_address: str=None, metadata: IssueTokenRequestMetadata=None, reissuable: bool=None, transfer: List[IssueTokenRequestTransferInner]=None):
        """IssueTokenRequest - a model defined in OpenAPI

        :param amount: The amount of this IssueTokenRequest.
        :param divisibility: The divisibility of this IssueTokenRequest.
        :param fee: The fee of this IssueTokenRequest.
        :param flags: The flags of this IssueTokenRequest.
        :param issue_address: The issue_address of this IssueTokenRequest.
        :param metadata: The metadata of this IssueTokenRequest.
        :param reissuable: The reissuable of this IssueTokenRequest.
        :param transfer: The transfer of this IssueTokenRequest.
        """
        self.openapi_types = {
            'amount': float,
            'divisibility': float,
            'fee': float,
            'flags': IssueTokenRequestFlags,
            'issue_address': str,
            'metadata': IssueTokenRequestMetadata,
            'reissuable': bool,
            'transfer': List[IssueTokenRequestTransferInner]
        }

        self.attribute_map = {
            'amount': 'amount',
            'divisibility': 'divisibility',
            'fee': 'fee',
            'flags': 'flags',
            'issue_address': 'issueAddress',
            'metadata': 'metadata',
            'reissuable': 'reissuable',
            'transfer': 'transfer'
        }

        self._amount = amount
        self._divisibility = divisibility
        self._fee = fee
        self._flags = flags
        self._issue_address = issue_address
        self._metadata = metadata
        self._reissuable = reissuable
        self._transfer = transfer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issueTokenRequest of this IssueTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this IssueTokenRequest.

        Number of tokens to issue

        :return: The amount of this IssueTokenRequest.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this IssueTokenRequest.

        Number of tokens to issue

        :param amount: The amount of this IssueTokenRequest.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def divisibility(self):
        """Gets the divisibility of this IssueTokenRequest.

        Number of decimal places the token should be divisble by (0-7)

        :return: The divisibility of this IssueTokenRequest.
        :rtype: float
        """
        return self._divisibility

    @divisibility.setter
    def divisibility(self, divisibility):
        """Sets the divisibility of this IssueTokenRequest.

        Number of decimal places the token should be divisble by (0-7)

        :param divisibility: The divisibility of this IssueTokenRequest.
        :type divisibility: float
        """
        if divisibility is None:
            raise ValueError("Invalid value for `divisibility`, must not be `None`")

        self._divisibility = divisibility

    @property
    def fee(self):
        """Gets the fee of this IssueTokenRequest.

        Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)

        :return: The fee of this IssueTokenRequest.
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this IssueTokenRequest.

        Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)

        :param fee: The fee of this IssueTokenRequest.
        :type fee: float
        """
        if fee is None:
            raise ValueError("Invalid value for `fee`, must not be `None`")

        self._fee = fee

    @property
    def flags(self):
        """Gets the flags of this IssueTokenRequest.


        :return: The flags of this IssueTokenRequest.
        :rtype: IssueTokenRequestFlags
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this IssueTokenRequest.


        :param flags: The flags of this IssueTokenRequest.
        :type flags: IssueTokenRequestFlags
        """

        self._flags = flags

    @property
    def issue_address(self):
        """Gets the issue_address of this IssueTokenRequest.

        Address issuing the token

        :return: The issue_address of this IssueTokenRequest.
        :rtype: str
        """
        return self._issue_address

    @issue_address.setter
    def issue_address(self, issue_address):
        """Sets the issue_address of this IssueTokenRequest.

        Address issuing the token

        :param issue_address: The issue_address of this IssueTokenRequest.
        :type issue_address: str
        """
        if issue_address is None:
            raise ValueError("Invalid value for `issue_address`, must not be `None`")

        self._issue_address = issue_address

    @property
    def metadata(self):
        """Gets the metadata of this IssueTokenRequest.


        :return: The metadata of this IssueTokenRequest.
        :rtype: IssueTokenRequestMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IssueTokenRequest.


        :param metadata: The metadata of this IssueTokenRequest.
        :type metadata: IssueTokenRequestMetadata
        """

        self._metadata = metadata

    @property
    def reissuable(self):
        """Gets the reissuable of this IssueTokenRequest.

        whether the token should be reissuable

        :return: The reissuable of this IssueTokenRequest.
        :rtype: bool
        """
        return self._reissuable

    @reissuable.setter
    def reissuable(self, reissuable):
        """Sets the reissuable of this IssueTokenRequest.

        whether the token should be reissuable

        :param reissuable: The reissuable of this IssueTokenRequest.
        :type reissuable: bool
        """
        if reissuable is None:
            raise ValueError("Invalid value for `reissuable`, must not be `None`")

        self._reissuable = reissuable

    @property
    def transfer(self):
        """Gets the transfer of this IssueTokenRequest.


        :return: The transfer of this IssueTokenRequest.
        :rtype: List[IssueTokenRequestTransferInner]
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this IssueTokenRequest.


        :param transfer: The transfer of this IssueTokenRequest.
        :type transfer: List[IssueTokenRequestTransferInner]
        """
        if transfer is None:
            raise ValueError("Invalid value for `transfer`, must not be `None`")

        self._transfer = transfer
