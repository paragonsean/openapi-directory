# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetTransactionInfoResponseVinInnerTokensInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_policy: str=None, amount: float=None, divisibility: float=None, issue_txid: str=None, lock_status: bool=None, token_id: str=None):
        """GetTransactionInfoResponseVinInnerTokensInner - a model defined in OpenAPI

        :param aggregation_policy: The aggregation_policy of this GetTransactionInfoResponseVinInnerTokensInner.
        :param amount: The amount of this GetTransactionInfoResponseVinInnerTokensInner.
        :param divisibility: The divisibility of this GetTransactionInfoResponseVinInnerTokensInner.
        :param issue_txid: The issue_txid of this GetTransactionInfoResponseVinInnerTokensInner.
        :param lock_status: The lock_status of this GetTransactionInfoResponseVinInnerTokensInner.
        :param token_id: The token_id of this GetTransactionInfoResponseVinInnerTokensInner.
        """
        self.openapi_types = {
            'aggregation_policy': str,
            'amount': float,
            'divisibility': float,
            'issue_txid': str,
            'lock_status': bool,
            'token_id': str
        }

        self.attribute_map = {
            'aggregation_policy': 'aggregationPolicy',
            'amount': 'amount',
            'divisibility': 'divisibility',
            'issue_txid': 'issueTxid',
            'lock_status': 'lockStatus',
            'token_id': 'tokenId'
        }

        self._aggregation_policy = aggregation_policy
        self._amount = amount
        self._divisibility = divisibility
        self._issue_txid = issue_txid
        self._lock_status = lock_status
        self._token_id = token_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTransactionInfoResponseVinInnerTokensInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getTransactionInfoResponse_vin_inner_tokens_inner of this GetTransactionInfoResponseVinInnerTokensInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_policy(self):
        """Gets the aggregation_policy of this GetTransactionInfoResponseVinInnerTokensInner.

        Whether the tokens are aggregatable

        :return: The aggregation_policy of this GetTransactionInfoResponseVinInnerTokensInner.
        :rtype: str
        """
        return self._aggregation_policy

    @aggregation_policy.setter
    def aggregation_policy(self, aggregation_policy):
        """Sets the aggregation_policy of this GetTransactionInfoResponseVinInnerTokensInner.

        Whether the tokens are aggregatable

        :param aggregation_policy: The aggregation_policy of this GetTransactionInfoResponseVinInnerTokensInner.
        :type aggregation_policy: str
        """

        self._aggregation_policy = aggregation_policy

    @property
    def amount(self):
        """Gets the amount of this GetTransactionInfoResponseVinInnerTokensInner.

        Number of tokens

        :return: The amount of this GetTransactionInfoResponseVinInnerTokensInner.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetTransactionInfoResponseVinInnerTokensInner.

        Number of tokens

        :param amount: The amount of this GetTransactionInfoResponseVinInnerTokensInner.
        :type amount: float
        """

        self._amount = amount

    @property
    def divisibility(self):
        """Gets the divisibility of this GetTransactionInfoResponseVinInnerTokensInner.

        Decimal places the token is divisible to

        :return: The divisibility of this GetTransactionInfoResponseVinInnerTokensInner.
        :rtype: float
        """
        return self._divisibility

    @divisibility.setter
    def divisibility(self, divisibility):
        """Sets the divisibility of this GetTransactionInfoResponseVinInnerTokensInner.

        Decimal places the token is divisible to

        :param divisibility: The divisibility of this GetTransactionInfoResponseVinInnerTokensInner.
        :type divisibility: float
        """

        self._divisibility = divisibility

    @property
    def issue_txid(self):
        """Gets the issue_txid of this GetTransactionInfoResponseVinInnerTokensInner.

        TXID the token was issued in

        :return: The issue_txid of this GetTransactionInfoResponseVinInnerTokensInner.
        :rtype: str
        """
        return self._issue_txid

    @issue_txid.setter
    def issue_txid(self, issue_txid):
        """Sets the issue_txid of this GetTransactionInfoResponseVinInnerTokensInner.

        TXID the token was issued in

        :param issue_txid: The issue_txid of this GetTransactionInfoResponseVinInnerTokensInner.
        :type issue_txid: str
        """

        self._issue_txid = issue_txid

    @property
    def lock_status(self):
        """Gets the lock_status of this GetTransactionInfoResponseVinInnerTokensInner.

        Whether issuance of more tokens is locked

        :return: The lock_status of this GetTransactionInfoResponseVinInnerTokensInner.
        :rtype: bool
        """
        return self._lock_status

    @lock_status.setter
    def lock_status(self, lock_status):
        """Sets the lock_status of this GetTransactionInfoResponseVinInnerTokensInner.

        Whether issuance of more tokens is locked

        :param lock_status: The lock_status of this GetTransactionInfoResponseVinInnerTokensInner.
        :type lock_status: bool
        """

        self._lock_status = lock_status

    @property
    def token_id(self):
        """Gets the token_id of this GetTransactionInfoResponseVinInnerTokensInner.

        ID of the token

        :return: The token_id of this GetTransactionInfoResponseVinInnerTokensInner.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this GetTransactionInfoResponseVinInnerTokensInner.

        ID of the token

        :param token_id: The token_id of this GetTransactionInfoResponseVinInnerTokensInner.
        :type token_id: str
        """

        self._token_id = token_id
