# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueTokenRequestTransferInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, amount: float=None):
        """IssueTokenRequestTransferInner - a model defined in OpenAPI

        :param address: The address of this IssueTokenRequestTransferInner.
        :param amount: The amount of this IssueTokenRequestTransferInner.
        """
        self.openapi_types = {
            'address': str,
            'amount': float
        }

        self.attribute_map = {
            'address': 'address',
            'amount': 'amount'
        }

        self._address = address
        self._amount = amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTokenRequestTransferInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issueTokenRequest_transfer_inner of this IssueTokenRequestTransferInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this IssueTokenRequestTransferInner.

        Address to send the amount of issued tokens to

        :return: The address of this IssueTokenRequestTransferInner.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IssueTokenRequestTransferInner.

        Address to send the amount of issued tokens to

        :param address: The address of this IssueTokenRequestTransferInner.
        :type address: str
        """

        self._address = address

    @property
    def amount(self):
        """Gets the amount of this IssueTokenRequestTransferInner.


        :return: The amount of this IssueTokenRequestTransferInner.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this IssueTokenRequestTransferInner.


        :param amount: The amount of this IssueTokenRequestTransferInner.
        :type amount: float
        """

        self._amount = amount
