# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendTxRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rawtx: str=None):
        """SendTxRequest - a model defined in OpenAPI

        :param rawtx: The rawtx of this SendTxRequest.
        """
        self.openapi_types = {
            'rawtx': str
        }

        self.attribute_map = {
            'rawtx': 'rawtx'
        }

        self._rawtx = rawtx

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendTxRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sendTxRequest of this SendTxRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rawtx(self):
        """Gets the rawtx of this SendTxRequest.

        Signed raw tx hex to broadcast

        :return: The rawtx of this SendTxRequest.
        :rtype: str
        """
        return self._rawtx

    @rawtx.setter
    def rawtx(self, rawtx):
        """Sets the rawtx of this SendTxRequest.

        Signed raw tx hex to broadcast

        :param rawtx: The rawtx of this SendTxRequest.
        :type rawtx: str
        """
        if rawtx is None:
            raise ValueError("Invalid value for `rawtx`, must not be `None`")

        self._rawtx = rawtx
