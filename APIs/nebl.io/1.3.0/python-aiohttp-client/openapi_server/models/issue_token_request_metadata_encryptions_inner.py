# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueTokenRequestMetadataEncryptionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: str=None, key: str=None, pubkey: str=None, type: str=None):
        """IssueTokenRequestMetadataEncryptionsInner - a model defined in OpenAPI

        :param format: The format of this IssueTokenRequestMetadataEncryptionsInner.
        :param key: The key of this IssueTokenRequestMetadataEncryptionsInner.
        :param pubkey: The pubkey of this IssueTokenRequestMetadataEncryptionsInner.
        :param type: The type of this IssueTokenRequestMetadataEncryptionsInner.
        """
        self.openapi_types = {
            'format': str,
            'key': str,
            'pubkey': str,
            'type': str
        }

        self.attribute_map = {
            'format': 'format',
            'key': 'key',
            'pubkey': 'pubkey',
            'type': 'type'
        }

        self._format = format
        self._key = key
        self._pubkey = pubkey
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTokenRequestMetadataEncryptionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issueTokenRequest_metadata_encryptions_inner of this IssueTokenRequestMetadataEncryptionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this IssueTokenRequestMetadataEncryptionsInner.

        key format (pem or der)

        :return: The format of this IssueTokenRequestMetadataEncryptionsInner.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this IssueTokenRequestMetadataEncryptionsInner.

        key format (pem or der)

        :param format: The format of this IssueTokenRequestMetadataEncryptionsInner.
        :type format: str
        """

        self._format = format

    @property
    def key(self):
        """Gets the key of this IssueTokenRequestMetadataEncryptionsInner.

        userData key to encrypt

        :return: The key of this IssueTokenRequestMetadataEncryptionsInner.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this IssueTokenRequestMetadataEncryptionsInner.

        userData key to encrypt

        :param key: The key of this IssueTokenRequestMetadataEncryptionsInner.
        :type key: str
        """

        self._key = key

    @property
    def pubkey(self):
        """Gets the pubkey of this IssueTokenRequestMetadataEncryptionsInner.

        RSA public key used for encryption

        :return: The pubkey of this IssueTokenRequestMetadataEncryptionsInner.
        :rtype: str
        """
        return self._pubkey

    @pubkey.setter
    def pubkey(self, pubkey):
        """Sets the pubkey of this IssueTokenRequestMetadataEncryptionsInner.

        RSA public key used for encryption

        :param pubkey: The pubkey of this IssueTokenRequestMetadataEncryptionsInner.
        :type pubkey: str
        """

        self._pubkey = pubkey

    @property
    def type(self):
        """Gets the type of this IssueTokenRequestMetadataEncryptionsInner.

        pkcs1 or pkcs8

        :return: The type of this IssueTokenRequestMetadataEncryptionsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IssueTokenRequestMetadataEncryptionsInner.

        pkcs1 or pkcs8

        :param type: The type of this IssueTokenRequestMetadataEncryptionsInner.
        :type type: str
        """

        self._type = type
