# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.burn_token_request_burn_inner import BurnTokenRequestBurnInner
from openapi_server.models.burn_token_request_transfer_inner import BurnTokenRequestTransferInner
from openapi_server import util


class BurnTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, burn: List[BurnTokenRequestBurnInner]=None, fee: float=None, _from: List[str]=None, transfer: List[BurnTokenRequestTransferInner]=None):
        """BurnTokenRequest - a model defined in OpenAPI

        :param burn: The burn of this BurnTokenRequest.
        :param fee: The fee of this BurnTokenRequest.
        :param _from: The _from of this BurnTokenRequest.
        :param transfer: The transfer of this BurnTokenRequest.
        """
        self.openapi_types = {
            'burn': List[BurnTokenRequestBurnInner],
            'fee': float,
            '_from': List[str],
            'transfer': List[BurnTokenRequestTransferInner]
        }

        self.attribute_map = {
            'burn': 'burn',
            'fee': 'fee',
            '_from': 'from',
            'transfer': 'transfer'
        }

        self._burn = burn
        self._fee = fee
        self.__from = _from
        self._transfer = transfer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BurnTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The burnTokenRequest of this BurnTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def burn(self):
        """Gets the burn of this BurnTokenRequest.

        Array of objects representing tokens to be burned

        :return: The burn of this BurnTokenRequest.
        :rtype: List[BurnTokenRequestBurnInner]
        """
        return self._burn

    @burn.setter
    def burn(self, burn):
        """Sets the burn of this BurnTokenRequest.

        Array of objects representing tokens to be burned

        :param burn: The burn of this BurnTokenRequest.
        :type burn: List[BurnTokenRequestBurnInner]
        """
        if burn is None:
            raise ValueError("Invalid value for `burn`, must not be `None`")

        self._burn = burn

    @property
    def fee(self):
        """Gets the fee of this BurnTokenRequest.

        Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)

        :return: The fee of this BurnTokenRequest.
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this BurnTokenRequest.

        Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)

        :param fee: The fee of this BurnTokenRequest.
        :type fee: float
        """
        if fee is None:
            raise ValueError("Invalid value for `fee`, must not be `None`")

        self._fee = fee

    @property
    def _from(self):
        """Gets the _from of this BurnTokenRequest.

        Array of addresses to send the token from

        :return: The _from of this BurnTokenRequest.
        :rtype: List[str]
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this BurnTokenRequest.

        Array of addresses to send the token from

        :param _from: The _from of this BurnTokenRequest.
        :type _from: List[str]
        """

        self.__from = _from

    @property
    def transfer(self):
        """Gets the transfer of this BurnTokenRequest.


        :return: The transfer of this BurnTokenRequest.
        :rtype: List[BurnTokenRequestTransferInner]
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this BurnTokenRequest.


        :param transfer: The transfer of this BurnTokenRequest.
        :type transfer: List[BurnTokenRequestTransferInner]
        """

        self._transfer = transfer
