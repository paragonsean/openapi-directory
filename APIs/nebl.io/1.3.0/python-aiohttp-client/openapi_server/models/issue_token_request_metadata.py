# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_token_metadata_response_metadata_of_issuance_data_user_data import GetTokenMetadataResponseMetadataOfIssuanceDataUserData
from openapi_server.models.issue_token_request_metadata_encryptions_inner import IssueTokenRequestMetadataEncryptionsInner
from openapi_server.models.issue_token_request_metadata_rules import IssueTokenRequestMetadataRules
from openapi_server.models.issue_token_request_metadata_urls_inner import IssueTokenRequestMetadataUrlsInner
from openapi_server import util


class IssueTokenRequestMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, encryptions: List[IssueTokenRequestMetadataEncryptionsInner]=None, issuer: str=None, rules: IssueTokenRequestMetadataRules=None, token_name: str=None, urls: List[IssueTokenRequestMetadataUrlsInner]=None, user_data: GetTokenMetadataResponseMetadataOfIssuanceDataUserData=None):
        """IssueTokenRequestMetadata - a model defined in OpenAPI

        :param description: The description of this IssueTokenRequestMetadata.
        :param encryptions: The encryptions of this IssueTokenRequestMetadata.
        :param issuer: The issuer of this IssueTokenRequestMetadata.
        :param rules: The rules of this IssueTokenRequestMetadata.
        :param token_name: The token_name of this IssueTokenRequestMetadata.
        :param urls: The urls of this IssueTokenRequestMetadata.
        :param user_data: The user_data of this IssueTokenRequestMetadata.
        """
        self.openapi_types = {
            'description': str,
            'encryptions': List[IssueTokenRequestMetadataEncryptionsInner],
            'issuer': str,
            'rules': IssueTokenRequestMetadataRules,
            'token_name': str,
            'urls': List[IssueTokenRequestMetadataUrlsInner],
            'user_data': GetTokenMetadataResponseMetadataOfIssuanceDataUserData
        }

        self.attribute_map = {
            'description': 'description',
            'encryptions': 'encryptions',
            'issuer': 'issuer',
            'rules': 'rules',
            'token_name': 'tokenName',
            'urls': 'urls',
            'user_data': 'userData'
        }

        self._description = description
        self._encryptions = encryptions
        self._issuer = issuer
        self._rules = rules
        self._token_name = token_name
        self._urls = urls
        self._user_data = user_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTokenRequestMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issueTokenRequest_metadata of this IssueTokenRequestMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this IssueTokenRequestMetadata.

        Long name or description of token (ex. Nibble)

        :return: The description of this IssueTokenRequestMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssueTokenRequestMetadata.

        Long name or description of token (ex. Nibble)

        :param description: The description of this IssueTokenRequestMetadata.
        :type description: str
        """

        self._description = description

    @property
    def encryptions(self):
        """Gets the encryptions of this IssueTokenRequestMetadata.

        Array of encryption instruction objects for encrypting userData

        :return: The encryptions of this IssueTokenRequestMetadata.
        :rtype: List[IssueTokenRequestMetadataEncryptionsInner]
        """
        return self._encryptions

    @encryptions.setter
    def encryptions(self, encryptions):
        """Sets the encryptions of this IssueTokenRequestMetadata.

        Array of encryption instruction objects for encrypting userData

        :param encryptions: The encryptions of this IssueTokenRequestMetadata.
        :type encryptions: List[IssueTokenRequestMetadataEncryptionsInner]
        """

        self._encryptions = encryptions

    @property
    def issuer(self):
        """Gets the issuer of this IssueTokenRequestMetadata.

        Name of token issuer

        :return: The issuer of this IssueTokenRequestMetadata.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this IssueTokenRequestMetadata.

        Name of token issuer

        :param issuer: The issuer of this IssueTokenRequestMetadata.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def rules(self):
        """Gets the rules of this IssueTokenRequestMetadata.


        :return: The rules of this IssueTokenRequestMetadata.
        :rtype: IssueTokenRequestMetadataRules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this IssueTokenRequestMetadata.


        :param rules: The rules of this IssueTokenRequestMetadata.
        :type rules: IssueTokenRequestMetadataRules
        """

        self._rules = rules

    @property
    def token_name(self):
        """Gets the token_name of this IssueTokenRequestMetadata.

        Token Symbol it will be identified by (ex. NIBBL)

        :return: The token_name of this IssueTokenRequestMetadata.
        :rtype: str
        """
        return self._token_name

    @token_name.setter
    def token_name(self, token_name):
        """Sets the token_name of this IssueTokenRequestMetadata.

        Token Symbol it will be identified by (ex. NIBBL)

        :param token_name: The token_name of this IssueTokenRequestMetadata.
        :type token_name: str
        """

        self._token_name = token_name

    @property
    def urls(self):
        """Gets the urls of this IssueTokenRequestMetadata.


        :return: The urls of this IssueTokenRequestMetadata.
        :rtype: List[IssueTokenRequestMetadataUrlsInner]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this IssueTokenRequestMetadata.


        :param urls: The urls of this IssueTokenRequestMetadata.
        :type urls: List[IssueTokenRequestMetadataUrlsInner]
        """

        self._urls = urls

    @property
    def user_data(self):
        """Gets the user_data of this IssueTokenRequestMetadata.


        :return: The user_data of this IssueTokenRequestMetadata.
        :rtype: GetTokenMetadataResponseMetadataOfIssuanceDataUserData
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this IssueTokenRequestMetadata.


        :param user_data: The user_data of this IssueTokenRequestMetadata.
        :type user_data: GetTokenMetadataResponseMetadataOfIssuanceDataUserData
        """

        self._user_data = user_data
