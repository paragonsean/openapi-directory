# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_token_holders_response_holders_inner import GetTokenHoldersResponseHoldersInner
from openapi_server import util


class GetTokenHoldersResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_policy: str=None, divibility: float=None, holders: List[GetTokenHoldersResponseHoldersInner]=None, lock_status: bool=None, some_utxo: str=None, token_id: str=None):
        """GetTokenHoldersResponse - a model defined in OpenAPI

        :param aggregation_policy: The aggregation_policy of this GetTokenHoldersResponse.
        :param divibility: The divibility of this GetTokenHoldersResponse.
        :param holders: The holders of this GetTokenHoldersResponse.
        :param lock_status: The lock_status of this GetTokenHoldersResponse.
        :param some_utxo: The some_utxo of this GetTokenHoldersResponse.
        :param token_id: The token_id of this GetTokenHoldersResponse.
        """
        self.openapi_types = {
            'aggregation_policy': str,
            'divibility': float,
            'holders': List[GetTokenHoldersResponseHoldersInner],
            'lock_status': bool,
            'some_utxo': str,
            'token_id': str
        }

        self.attribute_map = {
            'aggregation_policy': 'aggregationPolicy',
            'divibility': 'divibility',
            'holders': 'holders',
            'lock_status': 'lockStatus',
            'some_utxo': 'someUtxo',
            'token_id': 'tokenId'
        }

        self._aggregation_policy = aggregation_policy
        self._divibility = divibility
        self._holders = holders
        self._lock_status = lock_status
        self._some_utxo = some_utxo
        self._token_id = token_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTokenHoldersResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getTokenHoldersResponse of this GetTokenHoldersResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_policy(self):
        """Gets the aggregation_policy of this GetTokenHoldersResponse.

        Whether the tokesn are aggregatable

        :return: The aggregation_policy of this GetTokenHoldersResponse.
        :rtype: str
        """
        return self._aggregation_policy

    @aggregation_policy.setter
    def aggregation_policy(self, aggregation_policy):
        """Sets the aggregation_policy of this GetTokenHoldersResponse.

        Whether the tokesn are aggregatable

        :param aggregation_policy: The aggregation_policy of this GetTokenHoldersResponse.
        :type aggregation_policy: str
        """

        self._aggregation_policy = aggregation_policy

    @property
    def divibility(self):
        """Gets the divibility of this GetTokenHoldersResponse.

        How many decimal points the token is divisble to

        :return: The divibility of this GetTokenHoldersResponse.
        :rtype: float
        """
        return self._divibility

    @divibility.setter
    def divibility(self, divibility):
        """Sets the divibility of this GetTokenHoldersResponse.

        How many decimal points the token is divisble to

        :param divibility: The divibility of this GetTokenHoldersResponse.
        :type divibility: float
        """

        self._divibility = divibility

    @property
    def holders(self):
        """Gets the holders of this GetTokenHoldersResponse.


        :return: The holders of this GetTokenHoldersResponse.
        :rtype: List[GetTokenHoldersResponseHoldersInner]
        """
        return self._holders

    @holders.setter
    def holders(self, holders):
        """Sets the holders of this GetTokenHoldersResponse.


        :param holders: The holders of this GetTokenHoldersResponse.
        :type holders: List[GetTokenHoldersResponseHoldersInner]
        """

        self._holders = holders

    @property
    def lock_status(self):
        """Gets the lock_status of this GetTokenHoldersResponse.

        Whether new issuances of this token are locked

        :return: The lock_status of this GetTokenHoldersResponse.
        :rtype: bool
        """
        return self._lock_status

    @lock_status.setter
    def lock_status(self, lock_status):
        """Sets the lock_status of this GetTokenHoldersResponse.

        Whether new issuances of this token are locked

        :param lock_status: The lock_status of this GetTokenHoldersResponse.
        :type lock_status: bool
        """

        self._lock_status = lock_status

    @property
    def some_utxo(self):
        """Gets the some_utxo of this GetTokenHoldersResponse.

        A UTXO of this token

        :return: The some_utxo of this GetTokenHoldersResponse.
        :rtype: str
        """
        return self._some_utxo

    @some_utxo.setter
    def some_utxo(self, some_utxo):
        """Sets the some_utxo of this GetTokenHoldersResponse.

        A UTXO of this token

        :param some_utxo: The some_utxo of this GetTokenHoldersResponse.
        :type some_utxo: str
        """

        self._some_utxo = some_utxo

    @property
    def token_id(self):
        """Gets the token_id of this GetTokenHoldersResponse.

        TokenId of the token

        :return: The token_id of this GetTokenHoldersResponse.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this GetTokenHoldersResponse.

        TokenId of the token

        :param token_id: The token_id of this GetTokenHoldersResponse.
        :type token_id: str
        """

        self._token_id = token_id
