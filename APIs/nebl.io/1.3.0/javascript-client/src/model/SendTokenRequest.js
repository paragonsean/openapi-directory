/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BurnTokenRequestTransferInner from './BurnTokenRequestTransferInner';
import IssueTokenRequestFlags from './IssueTokenRequestFlags';
import IssueTokenRequestMetadata from './IssueTokenRequestMetadata';

/**
 * The SendTokenRequest model module.
 * @module model/SendTokenRequest
 * @version 1.3.0
 */
class SendTokenRequest {
    /**
     * Constructs a new <code>SendTokenRequest</code>.
     * @alias module:model/SendTokenRequest
     * @param fee {Number} Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)
     * @param to {Array.<module:model/BurnTokenRequestTransferInner>} 
     */
    constructor(fee, to) { 
        
        SendTokenRequest.initialize(this, fee, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fee, to) { 
        obj['fee'] = fee;
        obj['to'] = to;
    }

    /**
     * Constructs a <code>SendTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendTokenRequest} obj Optional instance to populate.
     * @return {module:model/SendTokenRequest} The populated <code>SendTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendTokenRequest();

            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = IssueTokenRequestFlags.constructFromObject(data['flags']);
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = IssueTokenRequestMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('sendutxo')) {
                obj['sendutxo'] = ApiClient.convertToType(data['sendutxo'], ['String']);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], [BurnTokenRequestTransferInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendTokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendTokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `flags`
        if (data['flags']) { // data not null
          IssueTokenRequestFlags.validateJSON(data['flags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['from'])) {
            throw new Error("Expected the field `from` to be an array in the JSON data but got " + data['from']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          IssueTokenRequestMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sendutxo'])) {
            throw new Error("Expected the field `sendutxo` to be an array in the JSON data but got " + data['sendutxo']);
        }
        if (data['to']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['to'])) {
                throw new Error("Expected the field `to` to be an array in the JSON data but got " + data['to']);
            }
            // validate the optional field `to` (array)
            for (const item of data['to']) {
                BurnTokenRequestTransferInner.validateJSON(item);
            };
        }

        return true;
    }


}

SendTokenRequest.RequiredProperties = ["fee", "to"];

/**
 * Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)
 * @member {Number} fee
 */
SendTokenRequest.prototype['fee'] = undefined;

/**
 * @member {module:model/IssueTokenRequestFlags} flags
 */
SendTokenRequest.prototype['flags'] = undefined;

/**
 * Array of addresses to send the token from
 * @member {Array.<String>} from
 */
SendTokenRequest.prototype['from'] = undefined;

/**
 * @member {module:model/IssueTokenRequestMetadata} metadata
 */
SendTokenRequest.prototype['metadata'] = undefined;

/**
 * Array of UTXOs to send the token from
 * @member {Array.<String>} sendutxo
 */
SendTokenRequest.prototype['sendutxo'] = undefined;

/**
 * @member {Array.<module:model/BurnTokenRequestTransferInner>} to
 */
SendTokenRequest.prototype['to'] = undefined;






export default SendTokenRequest;

