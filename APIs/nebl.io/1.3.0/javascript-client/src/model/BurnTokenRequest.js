/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BurnTokenRequestBurnInner from './BurnTokenRequestBurnInner';
import BurnTokenRequestTransferInner from './BurnTokenRequestTransferInner';

/**
 * The BurnTokenRequest model module.
 * @module model/BurnTokenRequest
 * @version 1.3.0
 */
class BurnTokenRequest {
    /**
     * Constructs a new <code>BurnTokenRequest</code>.
     * @alias module:model/BurnTokenRequest
     * @param burn {Array.<module:model/BurnTokenRequestBurnInner>} Array of objects representing tokens to be burned
     * @param fee {Number} Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)
     */
    constructor(burn, fee) { 
        
        BurnTokenRequest.initialize(this, burn, fee);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, burn, fee) { 
        obj['burn'] = burn;
        obj['fee'] = fee;
    }

    /**
     * Constructs a <code>BurnTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BurnTokenRequest} obj Optional instance to populate.
     * @return {module:model/BurnTokenRequest} The populated <code>BurnTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BurnTokenRequest();

            if (data.hasOwnProperty('burn')) {
                obj['burn'] = ApiClient.convertToType(data['burn'], [BurnTokenRequestBurnInner]);
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], ['String']);
            }
            if (data.hasOwnProperty('transfer')) {
                obj['transfer'] = ApiClient.convertToType(data['transfer'], [BurnTokenRequestTransferInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BurnTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BurnTokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BurnTokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['burn']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['burn'])) {
                throw new Error("Expected the field `burn` to be an array in the JSON data but got " + data['burn']);
            }
            // validate the optional field `burn` (array)
            for (const item of data['burn']) {
                BurnTokenRequestBurnInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['from'])) {
            throw new Error("Expected the field `from` to be an array in the JSON data but got " + data['from']);
        }
        if (data['transfer']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transfer'])) {
                throw new Error("Expected the field `transfer` to be an array in the JSON data but got " + data['transfer']);
            }
            // validate the optional field `transfer` (array)
            for (const item of data['transfer']) {
                BurnTokenRequestTransferInner.validateJSON(item);
            };
        }

        return true;
    }


}

BurnTokenRequest.RequiredProperties = ["burn", "fee"];

/**
 * Array of objects representing tokens to be burned
 * @member {Array.<module:model/BurnTokenRequestBurnInner>} burn
 */
BurnTokenRequest.prototype['burn'] = undefined;

/**
 * Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)
 * @member {Number} fee
 */
BurnTokenRequest.prototype['fee'] = undefined;

/**
 * Array of addresses to send the token from
 * @member {Array.<String>} from
 */
BurnTokenRequest.prototype['from'] = undefined;

/**
 * @member {Array.<module:model/BurnTokenRequestTransferInner>} transfer
 */
BurnTokenRequest.prototype['transfer'] = undefined;






export default BurnTokenRequest;

