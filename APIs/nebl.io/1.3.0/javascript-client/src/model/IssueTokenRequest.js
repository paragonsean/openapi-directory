/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IssueTokenRequestFlags from './IssueTokenRequestFlags';
import IssueTokenRequestMetadata from './IssueTokenRequestMetadata';
import IssueTokenRequestTransferInner from './IssueTokenRequestTransferInner';

/**
 * The IssueTokenRequest model module.
 * @module model/IssueTokenRequest
 * @version 1.3.0
 */
class IssueTokenRequest {
    /**
     * Constructs a new <code>IssueTokenRequest</code>.
     * @alias module:model/IssueTokenRequest
     * @param amount {Number} Number of tokens to issue
     * @param divisibility {Number} Number of decimal places the token should be divisble by (0-7)
     * @param fee {Number} Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)
     * @param issueAddress {String} Address issuing the token
     * @param reissuable {Boolean} whether the token should be reissuable
     * @param transfer {Array.<module:model/IssueTokenRequestTransferInner>} 
     */
    constructor(amount, divisibility, fee, issueAddress, reissuable, transfer) { 
        
        IssueTokenRequest.initialize(this, amount, divisibility, fee, issueAddress, reissuable, transfer);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, divisibility, fee, issueAddress, reissuable, transfer) { 
        obj['amount'] = amount;
        obj['divisibility'] = divisibility;
        obj['fee'] = fee;
        obj['issueAddress'] = issueAddress;
        obj['reissuable'] = reissuable;
        obj['transfer'] = transfer;
    }

    /**
     * Constructs a <code>IssueTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueTokenRequest} obj Optional instance to populate.
     * @return {module:model/IssueTokenRequest} The populated <code>IssueTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueTokenRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('divisibility')) {
                obj['divisibility'] = ApiClient.convertToType(data['divisibility'], 'Number');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = IssueTokenRequestFlags.constructFromObject(data['flags']);
            }
            if (data.hasOwnProperty('issueAddress')) {
                obj['issueAddress'] = ApiClient.convertToType(data['issueAddress'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = IssueTokenRequestMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('reissuable')) {
                obj['reissuable'] = ApiClient.convertToType(data['reissuable'], 'Boolean');
            }
            if (data.hasOwnProperty('transfer')) {
                obj['transfer'] = ApiClient.convertToType(data['transfer'], [IssueTokenRequestTransferInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueTokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IssueTokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `flags`
        if (data['flags']) { // data not null
          IssueTokenRequestFlags.validateJSON(data['flags']);
        }
        // ensure the json data is a string
        if (data['issueAddress'] && !(typeof data['issueAddress'] === 'string' || data['issueAddress'] instanceof String)) {
            throw new Error("Expected the field `issueAddress` to be a primitive type in the JSON string but got " + data['issueAddress']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          IssueTokenRequestMetadata.validateJSON(data['metadata']);
        }
        if (data['transfer']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transfer'])) {
                throw new Error("Expected the field `transfer` to be an array in the JSON data but got " + data['transfer']);
            }
            // validate the optional field `transfer` (array)
            for (const item of data['transfer']) {
                IssueTokenRequestTransferInner.validateJSON(item);
            };
        }

        return true;
    }


}

IssueTokenRequest.RequiredProperties = ["amount", "divisibility", "fee", "issueAddress", "reissuable", "transfer"];

/**
 * Number of tokens to issue
 * @member {Number} amount
 */
IssueTokenRequest.prototype['amount'] = undefined;

/**
 * Number of decimal places the token should be divisble by (0-7)
 * @member {Number} divisibility
 */
IssueTokenRequest.prototype['divisibility'] = undefined;

/**
 * Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)
 * @member {Number} fee
 */
IssueTokenRequest.prototype['fee'] = undefined;

/**
 * @member {module:model/IssueTokenRequestFlags} flags
 */
IssueTokenRequest.prototype['flags'] = undefined;

/**
 * Address issuing the token
 * @member {String} issueAddress
 */
IssueTokenRequest.prototype['issueAddress'] = undefined;

/**
 * @member {module:model/IssueTokenRequestMetadata} metadata
 */
IssueTokenRequest.prototype['metadata'] = undefined;

/**
 * whether the token should be reissuable
 * @member {Boolean} reissuable
 */
IssueTokenRequest.prototype['reissuable'] = undefined;

/**
 * @member {Array.<module:model/IssueTokenRequestTransferInner>} transfer
 */
IssueTokenRequest.prototype['transfer'] = undefined;






export default IssueTokenRequest;

