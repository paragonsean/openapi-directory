/**
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetTokenMetadataResponseMetadataOfIssuanceDataUserData from './GetTokenMetadataResponseMetadataOfIssuanceDataUserData';
import IssueTokenRequestMetadataEncryptionsInner from './IssueTokenRequestMetadataEncryptionsInner';
import IssueTokenRequestMetadataRules from './IssueTokenRequestMetadataRules';
import IssueTokenRequestMetadataUrlsInner from './IssueTokenRequestMetadataUrlsInner';

/**
 * The IssueTokenRequestMetadata model module.
 * @module model/IssueTokenRequestMetadata
 * @version 1.3.0
 */
class IssueTokenRequestMetadata {
    /**
     * Constructs a new <code>IssueTokenRequestMetadata</code>.
     * Object representing all metadata at token issuance
     * @alias module:model/IssueTokenRequestMetadata
     */
    constructor() { 
        
        IssueTokenRequestMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssueTokenRequestMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueTokenRequestMetadata} obj Optional instance to populate.
     * @return {module:model/IssueTokenRequestMetadata} The populated <code>IssueTokenRequestMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueTokenRequestMetadata();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('encryptions')) {
                obj['encryptions'] = ApiClient.convertToType(data['encryptions'], [IssueTokenRequestMetadataEncryptionsInner]);
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = IssueTokenRequestMetadataRules.constructFromObject(data['rules']);
            }
            if (data.hasOwnProperty('tokenName')) {
                obj['tokenName'] = ApiClient.convertToType(data['tokenName'], 'String');
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], [IssueTokenRequestMetadataUrlsInner]);
            }
            if (data.hasOwnProperty('userData')) {
                obj['userData'] = GetTokenMetadataResponseMetadataOfIssuanceDataUserData.constructFromObject(data['userData']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueTokenRequestMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueTokenRequestMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['encryptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['encryptions'])) {
                throw new Error("Expected the field `encryptions` to be an array in the JSON data but got " + data['encryptions']);
            }
            // validate the optional field `encryptions` (array)
            for (const item of data['encryptions']) {
                IssueTokenRequestMetadataEncryptionsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // validate the optional field `rules`
        if (data['rules']) { // data not null
          IssueTokenRequestMetadataRules.validateJSON(data['rules']);
        }
        // ensure the json data is a string
        if (data['tokenName'] && !(typeof data['tokenName'] === 'string' || data['tokenName'] instanceof String)) {
            throw new Error("Expected the field `tokenName` to be a primitive type in the JSON string but got " + data['tokenName']);
        }
        if (data['urls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['urls'])) {
                throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
            }
            // validate the optional field `urls` (array)
            for (const item of data['urls']) {
                IssueTokenRequestMetadataUrlsInner.validateJSON(item);
            };
        }
        // validate the optional field `userData`
        if (data['userData']) { // data not null
          GetTokenMetadataResponseMetadataOfIssuanceDataUserData.validateJSON(data['userData']);
        }

        return true;
    }


}



/**
 * Long name or description of token (ex. Nibble)
 * @member {String} description
 */
IssueTokenRequestMetadata.prototype['description'] = undefined;

/**
 * Array of encryption instruction objects for encrypting userData
 * @member {Array.<module:model/IssueTokenRequestMetadataEncryptionsInner>} encryptions
 */
IssueTokenRequestMetadata.prototype['encryptions'] = undefined;

/**
 * Name of token issuer
 * @member {String} issuer
 */
IssueTokenRequestMetadata.prototype['issuer'] = undefined;

/**
 * @member {module:model/IssueTokenRequestMetadataRules} rules
 */
IssueTokenRequestMetadata.prototype['rules'] = undefined;

/**
 * Token Symbol it will be identified by (ex. NIBBL)
 * @member {String} tokenName
 */
IssueTokenRequestMetadata.prototype['tokenName'] = undefined;

/**
 * @member {Array.<module:model/IssueTokenRequestMetadataUrlsInner>} urls
 */
IssueTokenRequestMetadata.prototype['urls'] = undefined;

/**
 * @member {module:model/GetTokenMetadataResponseMetadataOfIssuanceDataUserData} userData
 */
IssueTokenRequestMetadata.prototype['userData'] = undefined;






export default IssueTokenRequestMetadata;

