/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.BroadcastTxRequest;
import org.openapitools.client.model.BroadcastTxResponse;
import org.openapitools.client.model.BurnTokenRequest;
import org.openapitools.client.model.BurnTokenResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetAddressInfoResponse;
import org.openapitools.client.model.GetTokenHoldersResponse;
import org.openapitools.client.model.GetTokenIdResponse;
import org.openapitools.client.model.GetTokenMetadataResponse;
import org.openapitools.client.model.GetTransactionInfoResponse;
import org.openapitools.client.model.IssueTokenRequest;
import org.openapitools.client.model.IssueTokenResponse;
import org.openapitools.client.model.SendTokenRequest;
import org.openapitools.client.model.SendTokenResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestnetNtp1Api
 */
@Disabled
public class TestnetNtp1ApiTest {

    private final TestnetNtp1Api api = new TestnetNtp1Api();

    /**
     * Broadcasts a signed raw transaction to the network
     *
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testnetBroadcastTxTest() throws ApiException {
        BroadcastTxRequest broadcastTxRequest = null;
        BroadcastTxResponse response = api.testnetBroadcastTx(broadcastTxRequest);
        // TODO: test validations
    }

    /**
     * Builds a transaction that burns an NTP1 Token
     *
     * Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testnetBurnTokenTest() throws ApiException {
        BurnTokenRequest burnTokenRequest = null;
        BurnTokenResponse response = api.testnetBurnToken(burnTokenRequest);
        // TODO: test validations
    }

    /**
     * Information On a Neblio Address
     *
     * Returns both NEBL and NTP1 token UTXOs held at the given address. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testnetGetAddressInfoTest() throws ApiException {
        String address = null;
        GetAddressInfoResponse response = api.testnetGetAddressInfo(address);
        // TODO: test validations
    }

    /**
     * Get Addresses Holding a Token
     *
     * Returns the the the addresses holding a token and how many tokens are held 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testnetGetTokenHoldersTest() throws ApiException {
        String tokenid = null;
        GetTokenHoldersResponse response = api.testnetGetTokenHolders(tokenid);
        // TODO: test validations
    }

    /**
     * Returns the tokenId representing a token
     *
     * Translates a token symbol to a tokenId if a token exists with that symbol on the network 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testnetGetTokenIdTest() throws ApiException {
        String tokensymbol = null;
        GetTokenIdResponse response = api.testnetGetTokenId(tokensymbol);
        // TODO: test validations
    }

    /**
     * Get Metadata of Token
     *
     * Returns the metadata associated with a token. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testnetGetTokenMetadataTest() throws ApiException {
        String tokenid = null;
        BigDecimal verbosity = null;
        GetTokenMetadataResponse response = api.testnetGetTokenMetadata(tokenid, verbosity);
        // TODO: test validations
    }

    /**
     * Get UTXO Metadata of Token
     *
     * Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testnetGetTokenMetadataOfUtxoTest() throws ApiException {
        String tokenid = null;
        String utxo = null;
        BigDecimal verbosity = null;
        GetTokenMetadataResponse response = api.testnetGetTokenMetadataOfUtxo(tokenid, utxo, verbosity);
        // TODO: test validations
    }

    /**
     * Information On an NTP1 Transaction
     *
     * Returns detailed information regarding an NTP1 transaction. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testnetGetTransactionInfoTest() throws ApiException {
        String txid = null;
        GetTransactionInfoResponse response = api.testnetGetTransactionInfo(txid);
        // TODO: test validations
    }

    /**
     * Builds a transaction that issues a new NTP1 Token
     *
     * Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testnetIssueTokenTest() throws ApiException {
        IssueTokenRequest issueTokenRequest = null;
        IssueTokenResponse response = api.testnetIssueToken(issueTokenRequest);
        // TODO: test validations
    }

    /**
     * Builds a transaction that sends an NTP1 Token
     *
     * Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testnetSendTokenTest() throws ApiException {
        SendTokenRequest sendTokenRequest = null;
        SendTokenResponse response = api.testnetSendToken(sendTokenRequest);
        // TODO: test validations
    }

}
