/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetTokenMetadataResponseMetadataOfIssuanceDataUserData;
import org.openapitools.client.model.IssueTokenRequestMetadataEncryptionsInner;
import org.openapitools.client.model.IssueTokenRequestMetadataRules;
import org.openapitools.client.model.IssueTokenRequestMetadataUrlsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object representing all metadata at token issuance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:38.969239-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IssueTokenRequestMetadata {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENCRYPTIONS = "encryptions";
  @SerializedName(SERIALIZED_NAME_ENCRYPTIONS)
  private List<IssueTokenRequestMetadataEncryptionsInner> encryptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private IssueTokenRequestMetadataRules rules;

  public static final String SERIALIZED_NAME_TOKEN_NAME = "tokenName";
  @SerializedName(SERIALIZED_NAME_TOKEN_NAME)
  private String tokenName;

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private List<IssueTokenRequestMetadataUrlsInner> urls = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_DATA = "userData";
  @SerializedName(SERIALIZED_NAME_USER_DATA)
  private GetTokenMetadataResponseMetadataOfIssuanceDataUserData userData;

  public IssueTokenRequestMetadata() {
  }

  public IssueTokenRequestMetadata description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Long name or description of token (ex. Nibble)
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public IssueTokenRequestMetadata encryptions(List<IssueTokenRequestMetadataEncryptionsInner> encryptions) {
    this.encryptions = encryptions;
    return this;
  }

  public IssueTokenRequestMetadata addEncryptionsItem(IssueTokenRequestMetadataEncryptionsInner encryptionsItem) {
    if (this.encryptions == null) {
      this.encryptions = new ArrayList<>();
    }
    this.encryptions.add(encryptionsItem);
    return this;
  }

  /**
   * Array of encryption instruction objects for encrypting userData
   * @return encryptions
   */
  @javax.annotation.Nullable
  public List<IssueTokenRequestMetadataEncryptionsInner> getEncryptions() {
    return encryptions;
  }

  public void setEncryptions(List<IssueTokenRequestMetadataEncryptionsInner> encryptions) {
    this.encryptions = encryptions;
  }


  public IssueTokenRequestMetadata issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Name of token issuer
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public IssueTokenRequestMetadata rules(IssueTokenRequestMetadataRules rules) {
    this.rules = rules;
    return this;
  }

  /**
   * Get rules
   * @return rules
   */
  @javax.annotation.Nullable
  public IssueTokenRequestMetadataRules getRules() {
    return rules;
  }

  public void setRules(IssueTokenRequestMetadataRules rules) {
    this.rules = rules;
  }


  public IssueTokenRequestMetadata tokenName(String tokenName) {
    this.tokenName = tokenName;
    return this;
  }

  /**
   * Token Symbol it will be identified by (ex. NIBBL)
   * @return tokenName
   */
  @javax.annotation.Nullable
  public String getTokenName() {
    return tokenName;
  }

  public void setTokenName(String tokenName) {
    this.tokenName = tokenName;
  }


  public IssueTokenRequestMetadata urls(List<IssueTokenRequestMetadataUrlsInner> urls) {
    this.urls = urls;
    return this;
  }

  public IssueTokenRequestMetadata addUrlsItem(IssueTokenRequestMetadataUrlsInner urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<>();
    }
    this.urls.add(urlsItem);
    return this;
  }

  /**
   * Get urls
   * @return urls
   */
  @javax.annotation.Nullable
  public List<IssueTokenRequestMetadataUrlsInner> getUrls() {
    return urls;
  }

  public void setUrls(List<IssueTokenRequestMetadataUrlsInner> urls) {
    this.urls = urls;
  }


  public IssueTokenRequestMetadata userData(GetTokenMetadataResponseMetadataOfIssuanceDataUserData userData) {
    this.userData = userData;
    return this;
  }

  /**
   * Get userData
   * @return userData
   */
  @javax.annotation.Nullable
  public GetTokenMetadataResponseMetadataOfIssuanceDataUserData getUserData() {
    return userData;
  }

  public void setUserData(GetTokenMetadataResponseMetadataOfIssuanceDataUserData userData) {
    this.userData = userData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueTokenRequestMetadata issueTokenRequestMetadata = (IssueTokenRequestMetadata) o;
    return Objects.equals(this.description, issueTokenRequestMetadata.description) &&
        Objects.equals(this.encryptions, issueTokenRequestMetadata.encryptions) &&
        Objects.equals(this.issuer, issueTokenRequestMetadata.issuer) &&
        Objects.equals(this.rules, issueTokenRequestMetadata.rules) &&
        Objects.equals(this.tokenName, issueTokenRequestMetadata.tokenName) &&
        Objects.equals(this.urls, issueTokenRequestMetadata.urls) &&
        Objects.equals(this.userData, issueTokenRequestMetadata.userData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, encryptions, issuer, rules, tokenName, urls, userData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueTokenRequestMetadata {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    encryptions: ").append(toIndentedString(encryptions)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    tokenName: ").append(toIndentedString(tokenName)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("encryptions");
    openapiFields.add("issuer");
    openapiFields.add("rules");
    openapiFields.add("tokenName");
    openapiFields.add("urls");
    openapiFields.add("userData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssueTokenRequestMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssueTokenRequestMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueTokenRequestMetadata is not found in the empty JSON string", IssueTokenRequestMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssueTokenRequestMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueTokenRequestMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("encryptions") != null && !jsonObj.get("encryptions").isJsonNull()) {
        JsonArray jsonArrayencryptions = jsonObj.getAsJsonArray("encryptions");
        if (jsonArrayencryptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("encryptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `encryptions` to be an array in the JSON string but got `%s`", jsonObj.get("encryptions").toString()));
          }

          // validate the optional field `encryptions` (array)
          for (int i = 0; i < jsonArrayencryptions.size(); i++) {
            IssueTokenRequestMetadataEncryptionsInner.validateJsonElement(jsonArrayencryptions.get(i));
          };
        }
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      // validate the optional field `rules`
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        IssueTokenRequestMetadataRules.validateJsonElement(jsonObj.get("rules"));
      }
      if ((jsonObj.get("tokenName") != null && !jsonObj.get("tokenName").isJsonNull()) && !jsonObj.get("tokenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenName").toString()));
      }
      if (jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonNull()) {
        JsonArray jsonArrayurls = jsonObj.getAsJsonArray("urls");
        if (jsonArrayurls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("urls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `urls` to be an array in the JSON string but got `%s`", jsonObj.get("urls").toString()));
          }

          // validate the optional field `urls` (array)
          for (int i = 0; i < jsonArrayurls.size(); i++) {
            IssueTokenRequestMetadataUrlsInner.validateJsonElement(jsonArrayurls.get(i));
          };
        }
      }
      // validate the optional field `userData`
      if (jsonObj.get("userData") != null && !jsonObj.get("userData").isJsonNull()) {
        GetTokenMetadataResponseMetadataOfIssuanceDataUserData.validateJsonElement(jsonObj.get("userData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueTokenRequestMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueTokenRequestMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueTokenRequestMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueTokenRequestMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueTokenRequestMetadata>() {
           @Override
           public void write(JsonWriter out, IssueTokenRequestMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueTokenRequestMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssueTokenRequestMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssueTokenRequestMetadata
   * @throws IOException if the JSON string is invalid with respect to IssueTokenRequestMetadata
   */
  public static IssueTokenRequestMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueTokenRequestMetadata.class);
  }

  /**
   * Convert an instance of IssueTokenRequestMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

