/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BurnTokenResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:38.969239-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BurnTokenResponse {
  public static final String SERIALIZED_NAME_MULTISIG_OUTPUTS = "multisigOutputs";
  @SerializedName(SERIALIZED_NAME_MULTISIG_OUTPUTS)
  private List<BigDecimal> multisigOutputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NTP1_OUTPUT_INDEXES = "ntp1OutputIndexes";
  @SerializedName(SERIALIZED_NAME_NTP1_OUTPUT_INDEXES)
  private List<BigDecimal> ntp1OutputIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TX_HEX = "txHex";
  @SerializedName(SERIALIZED_NAME_TX_HEX)
  private String txHex;

  public BurnTokenResponse() {
  }

  public BurnTokenResponse multisigOutputs(List<BigDecimal> multisigOutputs) {
    this.multisigOutputs = multisigOutputs;
    return this;
  }

  public BurnTokenResponse addMultisigOutputsItem(BigDecimal multisigOutputsItem) {
    if (this.multisigOutputs == null) {
      this.multisigOutputs = new ArrayList<>();
    }
    this.multisigOutputs.add(multisigOutputsItem);
    return this;
  }

  /**
   * Array of indexes of multisig outputs
   * @return multisigOutputs
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getMultisigOutputs() {
    return multisigOutputs;
  }

  public void setMultisigOutputs(List<BigDecimal> multisigOutputs) {
    this.multisigOutputs = multisigOutputs;
  }


  public BurnTokenResponse ntp1OutputIndexes(List<BigDecimal> ntp1OutputIndexes) {
    this.ntp1OutputIndexes = ntp1OutputIndexes;
    return this;
  }

  public BurnTokenResponse addNtp1OutputIndexesItem(BigDecimal ntp1OutputIndexesItem) {
    if (this.ntp1OutputIndexes == null) {
      this.ntp1OutputIndexes = new ArrayList<>();
    }
    this.ntp1OutputIndexes.add(ntp1OutputIndexesItem);
    return this;
  }

  /**
   * Array of indexes transfering NTP1 tokens
   * @return ntp1OutputIndexes
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getNtp1OutputIndexes() {
    return ntp1OutputIndexes;
  }

  public void setNtp1OutputIndexes(List<BigDecimal> ntp1OutputIndexes) {
    this.ntp1OutputIndexes = ntp1OutputIndexes;
  }


  public BurnTokenResponse txHex(String txHex) {
    this.txHex = txHex;
    return this;
  }

  /**
   * Unsigned, raw transaction hex of the transaction to burn the token
   * @return txHex
   */
  @javax.annotation.Nullable
  public String getTxHex() {
    return txHex;
  }

  public void setTxHex(String txHex) {
    this.txHex = txHex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BurnTokenResponse burnTokenResponse = (BurnTokenResponse) o;
    return Objects.equals(this.multisigOutputs, burnTokenResponse.multisigOutputs) &&
        Objects.equals(this.ntp1OutputIndexes, burnTokenResponse.ntp1OutputIndexes) &&
        Objects.equals(this.txHex, burnTokenResponse.txHex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(multisigOutputs, ntp1OutputIndexes, txHex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BurnTokenResponse {\n");
    sb.append("    multisigOutputs: ").append(toIndentedString(multisigOutputs)).append("\n");
    sb.append("    ntp1OutputIndexes: ").append(toIndentedString(ntp1OutputIndexes)).append("\n");
    sb.append("    txHex: ").append(toIndentedString(txHex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("multisigOutputs");
    openapiFields.add("ntp1OutputIndexes");
    openapiFields.add("txHex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BurnTokenResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BurnTokenResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BurnTokenResponse is not found in the empty JSON string", BurnTokenResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BurnTokenResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BurnTokenResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("multisigOutputs") != null && !jsonObj.get("multisigOutputs").isJsonNull() && !jsonObj.get("multisigOutputs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `multisigOutputs` to be an array in the JSON string but got `%s`", jsonObj.get("multisigOutputs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ntp1OutputIndexes") != null && !jsonObj.get("ntp1OutputIndexes").isJsonNull() && !jsonObj.get("ntp1OutputIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ntp1OutputIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("ntp1OutputIndexes").toString()));
      }
      if ((jsonObj.get("txHex") != null && !jsonObj.get("txHex").isJsonNull()) && !jsonObj.get("txHex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txHex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txHex").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BurnTokenResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BurnTokenResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BurnTokenResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BurnTokenResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BurnTokenResponse>() {
           @Override
           public void write(JsonWriter out, BurnTokenResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BurnTokenResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BurnTokenResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BurnTokenResponse
   * @throws IOException if the JSON string is invalid with respect to BurnTokenResponse
   */
  public static BurnTokenResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BurnTokenResponse.class);
  }

  /**
   * Convert an instance of BurnTokenResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

