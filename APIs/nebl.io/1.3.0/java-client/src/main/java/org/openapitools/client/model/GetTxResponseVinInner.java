/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.GetTransactionInfoResponseVinInnerScriptSig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTxResponseVinInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:38.969239-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTxResponseVinInner {
  public static final String SERIALIZED_NAME_N = "n";
  @SerializedName(SERIALIZED_NAME_N)
  private BigDecimal n;

  public static final String SERIALIZED_NAME_SCRIPT_SIG = "scriptSig";
  @SerializedName(SERIALIZED_NAME_SCRIPT_SIG)
  private GetTransactionInfoResponseVinInnerScriptSig scriptSig;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private BigDecimal sequence;

  public static final String SERIALIZED_NAME_TXID = "txid";
  @SerializedName(SERIALIZED_NAME_TXID)
  private String txid;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private BigDecimal value;

  public static final String SERIALIZED_NAME_VALUE_SAT = "valueSat";
  @SerializedName(SERIALIZED_NAME_VALUE_SAT)
  private BigDecimal valueSat;

  public static final String SERIALIZED_NAME_VOUT = "vout";
  @SerializedName(SERIALIZED_NAME_VOUT)
  private BigDecimal vout;

  public GetTxResponseVinInner() {
  }

  public GetTxResponseVinInner n(BigDecimal n) {
    this.n = n;
    return this;
  }

  /**
   * input index
   * @return n
   */
  @javax.annotation.Nullable
  public BigDecimal getN() {
    return n;
  }

  public void setN(BigDecimal n) {
    this.n = n;
  }


  public GetTxResponseVinInner scriptSig(GetTransactionInfoResponseVinInnerScriptSig scriptSig) {
    this.scriptSig = scriptSig;
    return this;
  }

  /**
   * Get scriptSig
   * @return scriptSig
   */
  @javax.annotation.Nullable
  public GetTransactionInfoResponseVinInnerScriptSig getScriptSig() {
    return scriptSig;
  }

  public void setScriptSig(GetTransactionInfoResponseVinInnerScriptSig scriptSig) {
    this.scriptSig = scriptSig;
  }


  public GetTxResponseVinInner sequence(BigDecimal sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Get sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public BigDecimal getSequence() {
    return sequence;
  }

  public void setSequence(BigDecimal sequence) {
    this.sequence = sequence;
  }


  public GetTxResponseVinInner txid(String txid) {
    this.txid = txid;
    return this;
  }

  /**
   * TXID of the input
   * @return txid
   */
  @javax.annotation.Nullable
  public String getTxid() {
    return txid;
  }

  public void setTxid(String txid) {
    this.txid = txid;
  }


  public GetTxResponseVinInner value(BigDecimal value) {
    this.value = value;
    return this;
  }

  /**
   * Value of input in NEBL
   * @return value
   */
  @javax.annotation.Nullable
  public BigDecimal getValue() {
    return value;
  }

  public void setValue(BigDecimal value) {
    this.value = value;
  }


  public GetTxResponseVinInner valueSat(BigDecimal valueSat) {
    this.valueSat = valueSat;
    return this;
  }

  /**
   * Value of input in NEBL satoshi
   * @return valueSat
   */
  @javax.annotation.Nullable
  public BigDecimal getValueSat() {
    return valueSat;
  }

  public void setValueSat(BigDecimal valueSat) {
    this.valueSat = valueSat;
  }


  public GetTxResponseVinInner vout(BigDecimal vout) {
    this.vout = vout;
    return this;
  }

  /**
   * output index
   * @return vout
   */
  @javax.annotation.Nullable
  public BigDecimal getVout() {
    return vout;
  }

  public void setVout(BigDecimal vout) {
    this.vout = vout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTxResponseVinInner getTxResponseVinInner = (GetTxResponseVinInner) o;
    return Objects.equals(this.n, getTxResponseVinInner.n) &&
        Objects.equals(this.scriptSig, getTxResponseVinInner.scriptSig) &&
        Objects.equals(this.sequence, getTxResponseVinInner.sequence) &&
        Objects.equals(this.txid, getTxResponseVinInner.txid) &&
        Objects.equals(this.value, getTxResponseVinInner.value) &&
        Objects.equals(this.valueSat, getTxResponseVinInner.valueSat) &&
        Objects.equals(this.vout, getTxResponseVinInner.vout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(n, scriptSig, sequence, txid, value, valueSat, vout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTxResponseVinInner {\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    scriptSig: ").append(toIndentedString(scriptSig)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    txid: ").append(toIndentedString(txid)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueSat: ").append(toIndentedString(valueSat)).append("\n");
    sb.append("    vout: ").append(toIndentedString(vout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("n");
    openapiFields.add("scriptSig");
    openapiFields.add("sequence");
    openapiFields.add("txid");
    openapiFields.add("value");
    openapiFields.add("valueSat");
    openapiFields.add("vout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTxResponseVinInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTxResponseVinInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTxResponseVinInner is not found in the empty JSON string", GetTxResponseVinInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTxResponseVinInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTxResponseVinInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `scriptSig`
      if (jsonObj.get("scriptSig") != null && !jsonObj.get("scriptSig").isJsonNull()) {
        GetTransactionInfoResponseVinInnerScriptSig.validateJsonElement(jsonObj.get("scriptSig"));
      }
      if ((jsonObj.get("txid") != null && !jsonObj.get("txid").isJsonNull()) && !jsonObj.get("txid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTxResponseVinInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTxResponseVinInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTxResponseVinInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTxResponseVinInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTxResponseVinInner>() {
           @Override
           public void write(JsonWriter out, GetTxResponseVinInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTxResponseVinInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTxResponseVinInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTxResponseVinInner
   * @throws IOException if the JSON string is invalid with respect to GetTxResponseVinInner
   */
  public static GetTxResponseVinInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTxResponseVinInner.class);
  }

  /**
   * Convert an instance of GetTxResponseVinInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

