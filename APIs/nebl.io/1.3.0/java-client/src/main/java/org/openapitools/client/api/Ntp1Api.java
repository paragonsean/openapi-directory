/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.BroadcastTxRequest;
import org.openapitools.client.model.BroadcastTxResponse;
import org.openapitools.client.model.BurnTokenRequest;
import org.openapitools.client.model.BurnTokenResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetAddressInfoResponse;
import org.openapitools.client.model.GetTokenHoldersResponse;
import org.openapitools.client.model.GetTokenIdResponse;
import org.openapitools.client.model.GetTokenMetadataResponse;
import org.openapitools.client.model.GetTransactionInfoResponse;
import org.openapitools.client.model.IssueTokenRequest;
import org.openapitools.client.model.IssueTokenResponse;
import org.openapitools.client.model.SendTokenRequest;
import org.openapitools.client.model.SendTokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Ntp1Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Ntp1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Ntp1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for broadcastTx
     * @param broadcastTxRequest Object representing a transaction to broadcast (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call broadcastTxCall(BroadcastTxRequest broadcastTxRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = broadcastTxRequest;

        // create path and map variables
        String localVarPath = "/ntp1/broadcast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call broadcastTxValidateBeforeCall(BroadcastTxRequest broadcastTxRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'broadcastTxRequest' is set
        if (broadcastTxRequest == null) {
            throw new ApiException("Missing the required parameter 'broadcastTxRequest' when calling broadcastTx(Async)");
        }

        return broadcastTxCall(broadcastTxRequest, _callback);

    }

    /**
     * Broadcasts a signed raw transaction to the network
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param broadcastTxRequest Object representing a transaction to broadcast (required)
     * @return BroadcastTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BroadcastTxResponse broadcastTx(BroadcastTxRequest broadcastTxRequest) throws ApiException {
        ApiResponse<BroadcastTxResponse> localVarResp = broadcastTxWithHttpInfo(broadcastTxRequest);
        return localVarResp.getData();
    }

    /**
     * Broadcasts a signed raw transaction to the network
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param broadcastTxRequest Object representing a transaction to broadcast (required)
     * @return ApiResponse&lt;BroadcastTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BroadcastTxResponse> broadcastTxWithHttpInfo(BroadcastTxRequest broadcastTxRequest) throws ApiException {
        okhttp3.Call localVarCall = broadcastTxValidateBeforeCall(broadcastTxRequest, null);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Broadcasts a signed raw transaction to the network (asynchronously)
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param broadcastTxRequest Object representing a transaction to broadcast (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call broadcastTxAsync(BroadcastTxRequest broadcastTxRequest, final ApiCallback<BroadcastTxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = broadcastTxValidateBeforeCall(broadcastTxRequest, _callback);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for burnToken
     * @param burnTokenRequest Object representing the token to be burned (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the tx to burn the token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call burnTokenCall(BurnTokenRequest burnTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = burnTokenRequest;

        // create path and map variables
        String localVarPath = "/ntp1/burntoken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call burnTokenValidateBeforeCall(BurnTokenRequest burnTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'burnTokenRequest' is set
        if (burnTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'burnTokenRequest' when calling burnToken(Async)");
        }

        return burnTokenCall(burnTokenRequest, _callback);

    }

    /**
     * Builds a transaction that burns an NTP1 Token
     * Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
     * @param burnTokenRequest Object representing the token to be burned (required)
     * @return BurnTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the tx to burn the token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BurnTokenResponse burnToken(BurnTokenRequest burnTokenRequest) throws ApiException {
        ApiResponse<BurnTokenResponse> localVarResp = burnTokenWithHttpInfo(burnTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Builds a transaction that burns an NTP1 Token
     * Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
     * @param burnTokenRequest Object representing the token to be burned (required)
     * @return ApiResponse&lt;BurnTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the tx to burn the token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BurnTokenResponse> burnTokenWithHttpInfo(BurnTokenRequest burnTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = burnTokenValidateBeforeCall(burnTokenRequest, null);
        Type localVarReturnType = new TypeToken<BurnTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Builds a transaction that burns an NTP1 Token (asynchronously)
     * Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
     * @param burnTokenRequest Object representing the token to be burned (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the tx to burn the token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call burnTokenAsync(BurnTokenRequest burnTokenRequest, final ApiCallback<BurnTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = burnTokenValidateBeforeCall(burnTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<BurnTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAddressInfo
     * @param address Neblio Address to get information on. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of UTXOs for this address </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressInfoCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ntp1/addressinfo/{address}"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressInfoValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getAddressInfo(Async)");
        }

        return getAddressInfoCall(address, _callback);

    }

    /**
     * Information On a Neblio Address
     * Returns both NEBL and NTP1 token UTXOs held at the given address. 
     * @param address Neblio Address to get information on. (required)
     * @return GetAddressInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of UTXOs for this address </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetAddressInfoResponse getAddressInfo(String address) throws ApiException {
        ApiResponse<GetAddressInfoResponse> localVarResp = getAddressInfoWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Information On a Neblio Address
     * Returns both NEBL and NTP1 token UTXOs held at the given address. 
     * @param address Neblio Address to get information on. (required)
     * @return ApiResponse&lt;GetAddressInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of UTXOs for this address </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAddressInfoResponse> getAddressInfoWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = getAddressInfoValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<GetAddressInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Information On a Neblio Address (asynchronously)
     * Returns both NEBL and NTP1 token UTXOs held at the given address. 
     * @param address Neblio Address to get information on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of UTXOs for this address </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressInfoAsync(String address, final ApiCallback<GetAddressInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressInfoValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<GetAddressInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokenHolders
     * @param tokenid TokenId to request metadata for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all of the addresses holding a token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenHoldersCall(String tokenid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ntp1/stakeholders/{tokenid}"
            .replace("{" + "tokenid" + "}", localVarApiClient.escapeString(tokenid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenHoldersValidateBeforeCall(String tokenid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenid' is set
        if (tokenid == null) {
            throw new ApiException("Missing the required parameter 'tokenid' when calling getTokenHolders(Async)");
        }

        return getTokenHoldersCall(tokenid, _callback);

    }

    /**
     * Get Addresses Holding a Token
     * Returns the the the addresses holding a token and how many tokens are held 
     * @param tokenid TokenId to request metadata for (required)
     * @return GetTokenHoldersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all of the addresses holding a token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenHoldersResponse getTokenHolders(String tokenid) throws ApiException {
        ApiResponse<GetTokenHoldersResponse> localVarResp = getTokenHoldersWithHttpInfo(tokenid);
        return localVarResp.getData();
    }

    /**
     * Get Addresses Holding a Token
     * Returns the the the addresses holding a token and how many tokens are held 
     * @param tokenid TokenId to request metadata for (required)
     * @return ApiResponse&lt;GetTokenHoldersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all of the addresses holding a token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTokenHoldersResponse> getTokenHoldersWithHttpInfo(String tokenid) throws ApiException {
        okhttp3.Call localVarCall = getTokenHoldersValidateBeforeCall(tokenid, null);
        Type localVarReturnType = new TypeToken<GetTokenHoldersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Addresses Holding a Token (asynchronously)
     * Returns the the the addresses holding a token and how many tokens are held 
     * @param tokenid TokenId to request metadata for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all of the addresses holding a token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenHoldersAsync(String tokenid, final ApiCallback<GetTokenHoldersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenHoldersValidateBeforeCall(tokenid, _callback);
        Type localVarReturnType = new TypeToken<GetTokenHoldersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokenId
     * @param tokensymbol Token symbol (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenIdCall(String tokensymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ntp1/tokenid/{tokensymbol}"
            .replace("{" + "tokensymbol" + "}", localVarApiClient.escapeString(tokensymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenIdValidateBeforeCall(String tokensymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokensymbol' is set
        if (tokensymbol == null) {
            throw new ApiException("Missing the required parameter 'tokensymbol' when calling getTokenId(Async)");
        }

        return getTokenIdCall(tokensymbol, _callback);

    }

    /**
     * Returns the tokenId representing a token
     * Translates a token symbol to a tokenId if a token exists with that symbol on the network 
     * @param tokensymbol Token symbol (required)
     * @return GetTokenIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenIdResponse getTokenId(String tokensymbol) throws ApiException {
        ApiResponse<GetTokenIdResponse> localVarResp = getTokenIdWithHttpInfo(tokensymbol);
        return localVarResp.getData();
    }

    /**
     * Returns the tokenId representing a token
     * Translates a token symbol to a tokenId if a token exists with that symbol on the network 
     * @param tokensymbol Token symbol (required)
     * @return ApiResponse&lt;GetTokenIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTokenIdResponse> getTokenIdWithHttpInfo(String tokensymbol) throws ApiException {
        okhttp3.Call localVarCall = getTokenIdValidateBeforeCall(tokensymbol, null);
        Type localVarReturnType = new TypeToken<GetTokenIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the tokenId representing a token (asynchronously)
     * Translates a token symbol to a tokenId if a token exists with that symbol on the network 
     * @param tokensymbol Token symbol (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenIdAsync(String tokensymbol, final ApiCallback<GetTokenIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenIdValidateBeforeCall(tokensymbol, _callback);
        Type localVarReturnType = new TypeToken<GetTokenIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokenMetadata
     * @param tokenid TokenId to request metadata for (required)
     * @param verbosity 0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the metadata of a token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenMetadataCall(String tokenid, BigDecimal verbosity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ntp1/tokenmetadata/{tokenid}"
            .replace("{" + "tokenid" + "}", localVarApiClient.escapeString(tokenid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (verbosity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verbosity", verbosity));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenMetadataValidateBeforeCall(String tokenid, BigDecimal verbosity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenid' is set
        if (tokenid == null) {
            throw new ApiException("Missing the required parameter 'tokenid' when calling getTokenMetadata(Async)");
        }

        return getTokenMetadataCall(tokenid, verbosity, _callback);

    }

    /**
     * Get Metadata of Token
     * Returns the metadata associated with a token. 
     * @param tokenid TokenId to request metadata for (required)
     * @param verbosity 0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses (optional)
     * @return GetTokenMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the metadata of a token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenMetadataResponse getTokenMetadata(String tokenid, BigDecimal verbosity) throws ApiException {
        ApiResponse<GetTokenMetadataResponse> localVarResp = getTokenMetadataWithHttpInfo(tokenid, verbosity);
        return localVarResp.getData();
    }

    /**
     * Get Metadata of Token
     * Returns the metadata associated with a token. 
     * @param tokenid TokenId to request metadata for (required)
     * @param verbosity 0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses (optional)
     * @return ApiResponse&lt;GetTokenMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the metadata of a token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTokenMetadataResponse> getTokenMetadataWithHttpInfo(String tokenid, BigDecimal verbosity) throws ApiException {
        okhttp3.Call localVarCall = getTokenMetadataValidateBeforeCall(tokenid, verbosity, null);
        Type localVarReturnType = new TypeToken<GetTokenMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Metadata of Token (asynchronously)
     * Returns the metadata associated with a token. 
     * @param tokenid TokenId to request metadata for (required)
     * @param verbosity 0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the metadata of a token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenMetadataAsync(String tokenid, BigDecimal verbosity, final ApiCallback<GetTokenMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenMetadataValidateBeforeCall(tokenid, verbosity, _callback);
        Type localVarReturnType = new TypeToken<GetTokenMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokenMetadataOfUtxo
     * @param tokenid TokenId to request metadata for (required)
     * @param utxo Specific UTXO to request metadata for (required)
     * @param verbosity 0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the metadata of a token for a UTXO </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenMetadataOfUtxoCall(String tokenid, String utxo, BigDecimal verbosity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ntp1/tokenmetadata/{tokenid}/{utxo}"
            .replace("{" + "tokenid" + "}", localVarApiClient.escapeString(tokenid.toString()))
            .replace("{" + "utxo" + "}", localVarApiClient.escapeString(utxo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (verbosity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verbosity", verbosity));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenMetadataOfUtxoValidateBeforeCall(String tokenid, String utxo, BigDecimal verbosity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenid' is set
        if (tokenid == null) {
            throw new ApiException("Missing the required parameter 'tokenid' when calling getTokenMetadataOfUtxo(Async)");
        }

        // verify the required parameter 'utxo' is set
        if (utxo == null) {
            throw new ApiException("Missing the required parameter 'utxo' when calling getTokenMetadataOfUtxo(Async)");
        }

        return getTokenMetadataOfUtxoCall(tokenid, utxo, verbosity, _callback);

    }

    /**
     * Get UTXO Metadata of Token
     * Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
     * @param tokenid TokenId to request metadata for (required)
     * @param utxo Specific UTXO to request metadata for (required)
     * @param verbosity 0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses (optional)
     * @return GetTokenMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the metadata of a token for a UTXO </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenMetadataResponse getTokenMetadataOfUtxo(String tokenid, String utxo, BigDecimal verbosity) throws ApiException {
        ApiResponse<GetTokenMetadataResponse> localVarResp = getTokenMetadataOfUtxoWithHttpInfo(tokenid, utxo, verbosity);
        return localVarResp.getData();
    }

    /**
     * Get UTXO Metadata of Token
     * Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
     * @param tokenid TokenId to request metadata for (required)
     * @param utxo Specific UTXO to request metadata for (required)
     * @param verbosity 0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses (optional)
     * @return ApiResponse&lt;GetTokenMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the metadata of a token for a UTXO </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTokenMetadataResponse> getTokenMetadataOfUtxoWithHttpInfo(String tokenid, String utxo, BigDecimal verbosity) throws ApiException {
        okhttp3.Call localVarCall = getTokenMetadataOfUtxoValidateBeforeCall(tokenid, utxo, verbosity, null);
        Type localVarReturnType = new TypeToken<GetTokenMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get UTXO Metadata of Token (asynchronously)
     * Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
     * @param tokenid TokenId to request metadata for (required)
     * @param utxo Specific UTXO to request metadata for (required)
     * @param verbosity 0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the metadata of a token for a UTXO </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenMetadataOfUtxoAsync(String tokenid, String utxo, BigDecimal verbosity, final ApiCallback<GetTokenMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenMetadataOfUtxoValidateBeforeCall(tokenid, utxo, verbosity, _callback);
        Type localVarReturnType = new TypeToken<GetTokenMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionInfo
     * @param txid Neblio txid to get information on. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object represending this transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionInfoCall(String txid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ntp1/transactioninfo/{txid}"
            .replace("{" + "txid" + "}", localVarApiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionInfoValidateBeforeCall(String txid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling getTransactionInfo(Async)");
        }

        return getTransactionInfoCall(txid, _callback);

    }

    /**
     * Information On an NTP1 Transaction
     * Returns detailed information regarding an NTP1 transaction. 
     * @param txid Neblio txid to get information on. (required)
     * @return GetTransactionInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object represending this transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetTransactionInfoResponse getTransactionInfo(String txid) throws ApiException {
        ApiResponse<GetTransactionInfoResponse> localVarResp = getTransactionInfoWithHttpInfo(txid);
        return localVarResp.getData();
    }

    /**
     * Information On an NTP1 Transaction
     * Returns detailed information regarding an NTP1 transaction. 
     * @param txid Neblio txid to get information on. (required)
     * @return ApiResponse&lt;GetTransactionInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object represending this transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTransactionInfoResponse> getTransactionInfoWithHttpInfo(String txid) throws ApiException {
        okhttp3.Call localVarCall = getTransactionInfoValidateBeforeCall(txid, null);
        Type localVarReturnType = new TypeToken<GetTransactionInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Information On an NTP1 Transaction (asynchronously)
     * Returns detailed information regarding an NTP1 transaction. 
     * @param txid Neblio txid to get information on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object represending this transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionInfoAsync(String txid, final ApiCallback<GetTransactionInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionInfoValidateBeforeCall(txid, _callback);
        Type localVarReturnType = new TypeToken<GetTransactionInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueToken
     * @param issueTokenRequest Object representing the token to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the token created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueTokenCall(IssueTokenRequest issueTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTokenRequest;

        // create path and map variables
        String localVarPath = "/ntp1/issue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueTokenValidateBeforeCall(IssueTokenRequest issueTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTokenRequest' is set
        if (issueTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'issueTokenRequest' when calling issueToken(Async)");
        }

        return issueTokenCall(issueTokenRequest, _callback);

    }

    /**
     * Builds a transaction that issues a new NTP1 Token
     * Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
     * @param issueTokenRequest Object representing the token to be created (required)
     * @return IssueTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the token created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public IssueTokenResponse issueToken(IssueTokenRequest issueTokenRequest) throws ApiException {
        ApiResponse<IssueTokenResponse> localVarResp = issueTokenWithHttpInfo(issueTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Builds a transaction that issues a new NTP1 Token
     * Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
     * @param issueTokenRequest Object representing the token to be created (required)
     * @return ApiResponse&lt;IssueTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the token created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IssueTokenResponse> issueTokenWithHttpInfo(IssueTokenRequest issueTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = issueTokenValidateBeforeCall(issueTokenRequest, null);
        Type localVarReturnType = new TypeToken<IssueTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Builds a transaction that issues a new NTP1 Token (asynchronously)
     * Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
     * @param issueTokenRequest Object representing the token to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the token created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueTokenAsync(IssueTokenRequest issueTokenRequest, final ApiCallback<IssueTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueTokenValidateBeforeCall(issueTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<IssueTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendToken
     * @param sendTokenRequest Object representing the token to be sent (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the tx to send the token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTokenCall(SendTokenRequest sendTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendTokenRequest;

        // create path and map variables
        String localVarPath = "/ntp1/sendtoken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTokenValidateBeforeCall(SendTokenRequest sendTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendTokenRequest' is set
        if (sendTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'sendTokenRequest' when calling sendToken(Async)");
        }

        return sendTokenCall(sendTokenRequest, _callback);

    }

    /**
     * Builds a transaction that sends an NTP1 Token
     * Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
     * @param sendTokenRequest Object representing the token to be sent (required)
     * @return SendTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the tx to send the token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SendTokenResponse sendToken(SendTokenRequest sendTokenRequest) throws ApiException {
        ApiResponse<SendTokenResponse> localVarResp = sendTokenWithHttpInfo(sendTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Builds a transaction that sends an NTP1 Token
     * Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
     * @param sendTokenRequest Object representing the token to be sent (required)
     * @return ApiResponse&lt;SendTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the tx to send the token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendTokenResponse> sendTokenWithHttpInfo(SendTokenRequest sendTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = sendTokenValidateBeforeCall(sendTokenRequest, null);
        Type localVarReturnType = new TypeToken<SendTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Builds a transaction that sends an NTP1 Token (asynchronously)
     * Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
     * @param sendTokenRequest Object representing the token to be sent (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object representing the tx to send the token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTokenAsync(SendTokenRequest sendTokenRequest, final ApiCallback<SendTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTokenValidateBeforeCall(sendTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<SendTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
