/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBlockResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:38.969239-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBlockResponse {
  public static final String SERIALIZED_NAME_BITS = "bits";
  @SerializedName(SERIALIZED_NAME_BITS)
  private String bits;

  public static final String SERIALIZED_NAME_CONFIRMATIONS = "confirmations";
  @SerializedName(SERIALIZED_NAME_CONFIRMATIONS)
  private BigDecimal confirmations;

  public static final String SERIALIZED_NAME_DIFFICULTY = "difficulty";
  @SerializedName(SERIALIZED_NAME_DIFFICULTY)
  private BigDecimal difficulty;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_MERKLEROOT = "merkleroot";
  @SerializedName(SERIALIZED_NAME_MERKLEROOT)
  private String merkleroot;

  public static final String SERIALIZED_NAME_NEXTBLOCKHASH = "nextblockhash";
  @SerializedName(SERIALIZED_NAME_NEXTBLOCKHASH)
  private String nextblockhash;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private BigDecimal nonce;

  public static final String SERIALIZED_NAME_PREVIOUSBLOCKHASH = "previousblockhash";
  @SerializedName(SERIALIZED_NAME_PREVIOUSBLOCKHASH)
  private String previousblockhash;

  public static final String SERIALIZED_NAME_REWARD = "reward";
  @SerializedName(SERIALIZED_NAME_REWARD)
  private BigDecimal reward;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private BigDecimal size;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private BigDecimal time;

  public static final String SERIALIZED_NAME_TX = "tx";
  @SerializedName(SERIALIZED_NAME_TX)
  private List<String> tx = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private BigDecimal version;

  public GetBlockResponse() {
  }

  public GetBlockResponse bits(String bits) {
    this.bits = bits;
    return this;
  }

  /**
   * Block bits
   * @return bits
   */
  @javax.annotation.Nullable
  public String getBits() {
    return bits;
  }

  public void setBits(String bits) {
    this.bits = bits;
  }


  public GetBlockResponse confirmations(BigDecimal confirmations) {
    this.confirmations = confirmations;
    return this;
  }

  /**
   * Number of confirmations block has
   * @return confirmations
   */
  @javax.annotation.Nullable
  public BigDecimal getConfirmations() {
    return confirmations;
  }

  public void setConfirmations(BigDecimal confirmations) {
    this.confirmations = confirmations;
  }


  public GetBlockResponse difficulty(BigDecimal difficulty) {
    this.difficulty = difficulty;
    return this;
  }

  /**
   * Block difficulty
   * @return difficulty
   */
  @javax.annotation.Nullable
  public BigDecimal getDifficulty() {
    return difficulty;
  }

  public void setDifficulty(BigDecimal difficulty) {
    this.difficulty = difficulty;
  }


  public GetBlockResponse hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Block hash
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public GetBlockResponse height(BigDecimal height) {
    this.height = height;
    return this;
  }

  /**
   * Block height
   * @return height
   */
  @javax.annotation.Nullable
  public BigDecimal getHeight() {
    return height;
  }

  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public GetBlockResponse merkleroot(String merkleroot) {
    this.merkleroot = merkleroot;
    return this;
  }

  /**
   * Merkleroot of block
   * @return merkleroot
   */
  @javax.annotation.Nullable
  public String getMerkleroot() {
    return merkleroot;
  }

  public void setMerkleroot(String merkleroot) {
    this.merkleroot = merkleroot;
  }


  public GetBlockResponse nextblockhash(String nextblockhash) {
    this.nextblockhash = nextblockhash;
    return this;
  }

  /**
   * Hash of the next block on the chain
   * @return nextblockhash
   */
  @javax.annotation.Nullable
  public String getNextblockhash() {
    return nextblockhash;
  }

  public void setNextblockhash(String nextblockhash) {
    this.nextblockhash = nextblockhash;
  }


  public GetBlockResponse nonce(BigDecimal nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Block nonce
   * @return nonce
   */
  @javax.annotation.Nullable
  public BigDecimal getNonce() {
    return nonce;
  }

  public void setNonce(BigDecimal nonce) {
    this.nonce = nonce;
  }


  public GetBlockResponse previousblockhash(String previousblockhash) {
    this.previousblockhash = previousblockhash;
    return this;
  }

  /**
   * Hash of the previous block on the chain
   * @return previousblockhash
   */
  @javax.annotation.Nullable
  public String getPreviousblockhash() {
    return previousblockhash;
  }

  public void setPreviousblockhash(String previousblockhash) {
    this.previousblockhash = previousblockhash;
  }


  public GetBlockResponse reward(BigDecimal reward) {
    this.reward = reward;
    return this;
  }

  /**
   * Number of NEBL awarded in this block
   * @return reward
   */
  @javax.annotation.Nullable
  public BigDecimal getReward() {
    return reward;
  }

  public void setReward(BigDecimal reward) {
    this.reward = reward;
  }


  public GetBlockResponse size(BigDecimal size) {
    this.size = size;
    return this;
  }

  /**
   * Block size in bytes
   * @return size
   */
  @javax.annotation.Nullable
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }


  public GetBlockResponse time(BigDecimal time) {
    this.time = time;
    return this;
  }

  /**
   * Block time relative to epoch
   * @return time
   */
  @javax.annotation.Nullable
  public BigDecimal getTime() {
    return time;
  }

  public void setTime(BigDecimal time) {
    this.time = time;
  }


  public GetBlockResponse tx(List<String> tx) {
    this.tx = tx;
    return this;
  }

  public GetBlockResponse addTxItem(String txItem) {
    if (this.tx == null) {
      this.tx = new ArrayList<>();
    }
    this.tx.add(txItem);
    return this;
  }

  /**
   * Array of tx ids in the block
   * @return tx
   */
  @javax.annotation.Nullable
  public List<String> getTx() {
    return tx;
  }

  public void setTx(List<String> tx) {
    this.tx = tx;
  }


  public GetBlockResponse version(BigDecimal version) {
    this.version = version;
    return this;
  }

  /**
   * Block version
   * @return version
   */
  @javax.annotation.Nullable
  public BigDecimal getVersion() {
    return version;
  }

  public void setVersion(BigDecimal version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBlockResponse getBlockResponse = (GetBlockResponse) o;
    return Objects.equals(this.bits, getBlockResponse.bits) &&
        Objects.equals(this.confirmations, getBlockResponse.confirmations) &&
        Objects.equals(this.difficulty, getBlockResponse.difficulty) &&
        Objects.equals(this.hash, getBlockResponse.hash) &&
        Objects.equals(this.height, getBlockResponse.height) &&
        Objects.equals(this.merkleroot, getBlockResponse.merkleroot) &&
        Objects.equals(this.nextblockhash, getBlockResponse.nextblockhash) &&
        Objects.equals(this.nonce, getBlockResponse.nonce) &&
        Objects.equals(this.previousblockhash, getBlockResponse.previousblockhash) &&
        Objects.equals(this.reward, getBlockResponse.reward) &&
        Objects.equals(this.size, getBlockResponse.size) &&
        Objects.equals(this.time, getBlockResponse.time) &&
        Objects.equals(this.tx, getBlockResponse.tx) &&
        Objects.equals(this.version, getBlockResponse.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bits, confirmations, difficulty, hash, height, merkleroot, nextblockhash, nonce, previousblockhash, reward, size, time, tx, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBlockResponse {\n");
    sb.append("    bits: ").append(toIndentedString(bits)).append("\n");
    sb.append("    confirmations: ").append(toIndentedString(confirmations)).append("\n");
    sb.append("    difficulty: ").append(toIndentedString(difficulty)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    merkleroot: ").append(toIndentedString(merkleroot)).append("\n");
    sb.append("    nextblockhash: ").append(toIndentedString(nextblockhash)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    previousblockhash: ").append(toIndentedString(previousblockhash)).append("\n");
    sb.append("    reward: ").append(toIndentedString(reward)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    tx: ").append(toIndentedString(tx)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bits");
    openapiFields.add("confirmations");
    openapiFields.add("difficulty");
    openapiFields.add("hash");
    openapiFields.add("height");
    openapiFields.add("merkleroot");
    openapiFields.add("nextblockhash");
    openapiFields.add("nonce");
    openapiFields.add("previousblockhash");
    openapiFields.add("reward");
    openapiFields.add("size");
    openapiFields.add("time");
    openapiFields.add("tx");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBlockResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBlockResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBlockResponse is not found in the empty JSON string", GetBlockResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBlockResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBlockResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bits") != null && !jsonObj.get("bits").isJsonNull()) && !jsonObj.get("bits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bits").toString()));
      }
      if ((jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if ((jsonObj.get("merkleroot") != null && !jsonObj.get("merkleroot").isJsonNull()) && !jsonObj.get("merkleroot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merkleroot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merkleroot").toString()));
      }
      if ((jsonObj.get("nextblockhash") != null && !jsonObj.get("nextblockhash").isJsonNull()) && !jsonObj.get("nextblockhash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextblockhash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextblockhash").toString()));
      }
      if ((jsonObj.get("previousblockhash") != null && !jsonObj.get("previousblockhash").isJsonNull()) && !jsonObj.get("previousblockhash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousblockhash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousblockhash").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tx") != null && !jsonObj.get("tx").isJsonNull() && !jsonObj.get("tx").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tx` to be an array in the JSON string but got `%s`", jsonObj.get("tx").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBlockResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBlockResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBlockResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBlockResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBlockResponse>() {
           @Override
           public void write(JsonWriter out, GetBlockResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBlockResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBlockResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBlockResponse
   * @throws IOException if the JSON string is invalid with respect to GetBlockResponse
   */
  public static GetBlockResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBlockResponse.class);
  }

  /**
   * Convert an instance of GetBlockResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

