/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetTxResponseVinInner;
import org.openapitools.client.model.GetTxResponseVoutInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTxResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:38.969239-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTxResponse {
  public static final String SERIALIZED_NAME_BLOCKHASH = "blockhash";
  @SerializedName(SERIALIZED_NAME_BLOCKHASH)
  private String blockhash;

  public static final String SERIALIZED_NAME_BLOCKHEIGHT = "blockheight";
  @SerializedName(SERIALIZED_NAME_BLOCKHEIGHT)
  private BigDecimal blockheight;

  public static final String SERIALIZED_NAME_BLOCKTIME = "blocktime";
  @SerializedName(SERIALIZED_NAME_BLOCKTIME)
  private BigDecimal blocktime;

  public static final String SERIALIZED_NAME_CONFIRMATIONS = "confirmations";
  @SerializedName(SERIALIZED_NAME_CONFIRMATIONS)
  private BigDecimal confirmations;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private BigDecimal fee;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private BigDecimal fees;

  public static final String SERIALIZED_NAME_LOCKTIME = "locktime";
  @SerializedName(SERIALIZED_NAME_LOCKTIME)
  private BigDecimal locktime;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private BigDecimal size;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private BigDecimal time;

  public static final String SERIALIZED_NAME_TOTALSENT = "totalsent";
  @SerializedName(SERIALIZED_NAME_TOTALSENT)
  private BigDecimal totalsent;

  public static final String SERIALIZED_NAME_TXID = "txid";
  @SerializedName(SERIALIZED_NAME_TXID)
  private String txid;

  public static final String SERIALIZED_NAME_VALUE_IN = "valueIn";
  @SerializedName(SERIALIZED_NAME_VALUE_IN)
  private BigDecimal valueIn;

  public static final String SERIALIZED_NAME_VALUE_OUT = "valueOut";
  @SerializedName(SERIALIZED_NAME_VALUE_OUT)
  private BigDecimal valueOut;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private BigDecimal version;

  public static final String SERIALIZED_NAME_VIN = "vin";
  @SerializedName(SERIALIZED_NAME_VIN)
  private List<GetTxResponseVinInner> vin = new ArrayList<>();

  public static final String SERIALIZED_NAME_VOUT = "vout";
  @SerializedName(SERIALIZED_NAME_VOUT)
  private List<GetTxResponseVoutInner> vout = new ArrayList<>();

  public GetTxResponse() {
  }

  public GetTxResponse blockhash(String blockhash) {
    this.blockhash = blockhash;
    return this;
  }

  /**
   * Hash of the block this transaction is in
   * @return blockhash
   */
  @javax.annotation.Nullable
  public String getBlockhash() {
    return blockhash;
  }

  public void setBlockhash(String blockhash) {
    this.blockhash = blockhash;
  }


  public GetTxResponse blockheight(BigDecimal blockheight) {
    this.blockheight = blockheight;
    return this;
  }

  /**
   * Block height of this transaction
   * @return blockheight
   */
  @javax.annotation.Nullable
  public BigDecimal getBlockheight() {
    return blockheight;
  }

  public void setBlockheight(BigDecimal blockheight) {
    this.blockheight = blockheight;
  }


  public GetTxResponse blocktime(BigDecimal blocktime) {
    this.blocktime = blocktime;
    return this;
  }

  /**
   * Block time of this transaction
   * @return blocktime
   */
  @javax.annotation.Nullable
  public BigDecimal getBlocktime() {
    return blocktime;
  }

  public void setBlocktime(BigDecimal blocktime) {
    this.blocktime = blocktime;
  }


  public GetTxResponse confirmations(BigDecimal confirmations) {
    this.confirmations = confirmations;
    return this;
  }

  /**
   * Number of transaction confirmations
   * @return confirmations
   */
  @javax.annotation.Nullable
  public BigDecimal getConfirmations() {
    return confirmations;
  }

  public void setConfirmations(BigDecimal confirmations) {
    this.confirmations = confirmations;
  }


  public GetTxResponse fee(BigDecimal fee) {
    this.fee = fee;
    return this;
  }

  /**
   * Total NEBL used as fee for this transcation in satoshis
   * @return fee
   */
  @javax.annotation.Nullable
  public BigDecimal getFee() {
    return fee;
  }

  public void setFee(BigDecimal fee) {
    this.fee = fee;
  }


  public GetTxResponse fees(BigDecimal fees) {
    this.fees = fees;
    return this;
  }

  /**
   * Total NEBL used in fees for this transaction
   * @return fees
   */
  @javax.annotation.Nullable
  public BigDecimal getFees() {
    return fees;
  }

  public void setFees(BigDecimal fees) {
    this.fees = fees;
  }


  public GetTxResponse locktime(BigDecimal locktime) {
    this.locktime = locktime;
    return this;
  }

  /**
   * Transaction locktime
   * @return locktime
   */
  @javax.annotation.Nullable
  public BigDecimal getLocktime() {
    return locktime;
  }

  public void setLocktime(BigDecimal locktime) {
    this.locktime = locktime;
  }


  public GetTxResponse size(BigDecimal size) {
    this.size = size;
    return this;
  }

  /**
   * Transcation size in bytes
   * @return size
   */
  @javax.annotation.Nullable
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }


  public GetTxResponse time(BigDecimal time) {
    this.time = time;
    return this;
  }

  /**
   * Transaction time
   * @return time
   */
  @javax.annotation.Nullable
  public BigDecimal getTime() {
    return time;
  }

  public void setTime(BigDecimal time) {
    this.time = time;
  }


  public GetTxResponse totalsent(BigDecimal totalsent) {
    this.totalsent = totalsent;
    return this;
  }

  /**
   * Total NEBL sent in this transaction in satoshis
   * @return totalsent
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalsent() {
    return totalsent;
  }

  public void setTotalsent(BigDecimal totalsent) {
    this.totalsent = totalsent;
  }


  public GetTxResponse txid(String txid) {
    this.txid = txid;
    return this;
  }

  /**
   * TXID of transaction
   * @return txid
   */
  @javax.annotation.Nullable
  public String getTxid() {
    return txid;
  }

  public void setTxid(String txid) {
    this.txid = txid;
  }


  public GetTxResponse valueIn(BigDecimal valueIn) {
    this.valueIn = valueIn;
    return this;
  }

  /**
   * Total NEBL input in this transaction
   * @return valueIn
   */
  @javax.annotation.Nullable
  public BigDecimal getValueIn() {
    return valueIn;
  }

  public void setValueIn(BigDecimal valueIn) {
    this.valueIn = valueIn;
  }


  public GetTxResponse valueOut(BigDecimal valueOut) {
    this.valueOut = valueOut;
    return this;
  }

  /**
   * Total NEBL output in this transaction
   * @return valueOut
   */
  @javax.annotation.Nullable
  public BigDecimal getValueOut() {
    return valueOut;
  }

  public void setValueOut(BigDecimal valueOut) {
    this.valueOut = valueOut;
  }


  public GetTxResponse version(BigDecimal version) {
    this.version = version;
    return this;
  }

  /**
   * Transaction version
   * @return version
   */
  @javax.annotation.Nullable
  public BigDecimal getVersion() {
    return version;
  }

  public void setVersion(BigDecimal version) {
    this.version = version;
  }


  public GetTxResponse vin(List<GetTxResponseVinInner> vin) {
    this.vin = vin;
    return this;
  }

  public GetTxResponse addVinItem(GetTxResponseVinInner vinItem) {
    if (this.vin == null) {
      this.vin = new ArrayList<>();
    }
    this.vin.add(vinItem);
    return this;
  }

  /**
   * Array of transaction inputs
   * @return vin
   */
  @javax.annotation.Nullable
  public List<GetTxResponseVinInner> getVin() {
    return vin;
  }

  public void setVin(List<GetTxResponseVinInner> vin) {
    this.vin = vin;
  }


  public GetTxResponse vout(List<GetTxResponseVoutInner> vout) {
    this.vout = vout;
    return this;
  }

  public GetTxResponse addVoutItem(GetTxResponseVoutInner voutItem) {
    if (this.vout == null) {
      this.vout = new ArrayList<>();
    }
    this.vout.add(voutItem);
    return this;
  }

  /**
   * Array of transaction outputs
   * @return vout
   */
  @javax.annotation.Nullable
  public List<GetTxResponseVoutInner> getVout() {
    return vout;
  }

  public void setVout(List<GetTxResponseVoutInner> vout) {
    this.vout = vout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTxResponse getTxResponse = (GetTxResponse) o;
    return Objects.equals(this.blockhash, getTxResponse.blockhash) &&
        Objects.equals(this.blockheight, getTxResponse.blockheight) &&
        Objects.equals(this.blocktime, getTxResponse.blocktime) &&
        Objects.equals(this.confirmations, getTxResponse.confirmations) &&
        Objects.equals(this.fee, getTxResponse.fee) &&
        Objects.equals(this.fees, getTxResponse.fees) &&
        Objects.equals(this.locktime, getTxResponse.locktime) &&
        Objects.equals(this.size, getTxResponse.size) &&
        Objects.equals(this.time, getTxResponse.time) &&
        Objects.equals(this.totalsent, getTxResponse.totalsent) &&
        Objects.equals(this.txid, getTxResponse.txid) &&
        Objects.equals(this.valueIn, getTxResponse.valueIn) &&
        Objects.equals(this.valueOut, getTxResponse.valueOut) &&
        Objects.equals(this.version, getTxResponse.version) &&
        Objects.equals(this.vin, getTxResponse.vin) &&
        Objects.equals(this.vout, getTxResponse.vout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockhash, blockheight, blocktime, confirmations, fee, fees, locktime, size, time, totalsent, txid, valueIn, valueOut, version, vin, vout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTxResponse {\n");
    sb.append("    blockhash: ").append(toIndentedString(blockhash)).append("\n");
    sb.append("    blockheight: ").append(toIndentedString(blockheight)).append("\n");
    sb.append("    blocktime: ").append(toIndentedString(blocktime)).append("\n");
    sb.append("    confirmations: ").append(toIndentedString(confirmations)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    locktime: ").append(toIndentedString(locktime)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    totalsent: ").append(toIndentedString(totalsent)).append("\n");
    sb.append("    txid: ").append(toIndentedString(txid)).append("\n");
    sb.append("    valueIn: ").append(toIndentedString(valueIn)).append("\n");
    sb.append("    valueOut: ").append(toIndentedString(valueOut)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    vin: ").append(toIndentedString(vin)).append("\n");
    sb.append("    vout: ").append(toIndentedString(vout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockhash");
    openapiFields.add("blockheight");
    openapiFields.add("blocktime");
    openapiFields.add("confirmations");
    openapiFields.add("fee");
    openapiFields.add("fees");
    openapiFields.add("locktime");
    openapiFields.add("size");
    openapiFields.add("time");
    openapiFields.add("totalsent");
    openapiFields.add("txid");
    openapiFields.add("valueIn");
    openapiFields.add("valueOut");
    openapiFields.add("version");
    openapiFields.add("vin");
    openapiFields.add("vout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTxResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTxResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTxResponse is not found in the empty JSON string", GetTxResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTxResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTxResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blockhash") != null && !jsonObj.get("blockhash").isJsonNull()) && !jsonObj.get("blockhash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockhash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockhash").toString()));
      }
      if ((jsonObj.get("txid") != null && !jsonObj.get("txid").isJsonNull()) && !jsonObj.get("txid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txid").toString()));
      }
      if (jsonObj.get("vin") != null && !jsonObj.get("vin").isJsonNull()) {
        JsonArray jsonArrayvin = jsonObj.getAsJsonArray("vin");
        if (jsonArrayvin != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vin").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vin` to be an array in the JSON string but got `%s`", jsonObj.get("vin").toString()));
          }

          // validate the optional field `vin` (array)
          for (int i = 0; i < jsonArrayvin.size(); i++) {
            GetTxResponseVinInner.validateJsonElement(jsonArrayvin.get(i));
          };
        }
      }
      if (jsonObj.get("vout") != null && !jsonObj.get("vout").isJsonNull()) {
        JsonArray jsonArrayvout = jsonObj.getAsJsonArray("vout");
        if (jsonArrayvout != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vout").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vout` to be an array in the JSON string but got `%s`", jsonObj.get("vout").toString()));
          }

          // validate the optional field `vout` (array)
          for (int i = 0; i < jsonArrayvout.size(); i++) {
            GetTxResponseVoutInner.validateJsonElement(jsonArrayvout.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTxResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTxResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTxResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTxResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTxResponse>() {
           @Override
           public void write(JsonWriter out, GetTxResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTxResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTxResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTxResponse
   * @throws IOException if the JSON string is invalid with respect to GetTxResponse
   */
  public static GetTxResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTxResponse.class);
  }

  /**
   * Convert an instance of GetTxResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

