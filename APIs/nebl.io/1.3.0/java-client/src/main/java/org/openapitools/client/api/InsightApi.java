/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.BroadcastTxResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetAddressResponse;
import org.openapitools.client.model.GetAddressUtxosResponseInner;
import org.openapitools.client.model.GetBlockIndexResponse;
import org.openapitools.client.model.GetBlockResponse;
import org.openapitools.client.model.GetRawTxResponse;
import org.openapitools.client.model.GetSyncResponse;
import org.openapitools.client.model.GetTxResponse;
import org.openapitools.client.model.GetTxsResponse;
import org.openapitools.client.model.SendTxRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsightApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InsightApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InsightApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAddress
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing address info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/addr/{address}"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getAddress(Async)");
        }

        return getAddressCall(address, _callback);

    }

    /**
     * Returns address object
     * Returns NEBL address object containing information on a specific address
     * @param address Address (required)
     * @return GetAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing address info </td><td>  -  </td></tr>
     </table>
     */
    public GetAddressResponse getAddress(String address) throws ApiException {
        ApiResponse<GetAddressResponse> localVarResp = getAddressWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns address object
     * Returns NEBL address object containing information on a specific address
     * @param address Address (required)
     * @return ApiResponse&lt;GetAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing address info </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAddressResponse> getAddressWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = getAddressValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<GetAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns address object (asynchronously)
     * Returns NEBL address object containing information on a specific address
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing address info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressAsync(String address, final ApiCallback<GetAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<GetAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAddressBalance
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address balance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressBalanceCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/addr/{address}/balance"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressBalanceValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getAddressBalance(Async)");
        }

        return getAddressBalanceCall(address, _callback);

    }

    /**
     * Returns address balance in sats
     * Returns NEBL address balance in satoshis
     * @param address Address (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address balance </td><td>  -  </td></tr>
     </table>
     */
    public BigDecimal getAddressBalance(String address) throws ApiException {
        ApiResponse<BigDecimal> localVarResp = getAddressBalanceWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns address balance in sats
     * Returns NEBL address balance in satoshis
     * @param address Address (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address balance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigDecimal> getAddressBalanceWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = getAddressBalanceValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns address balance in sats (asynchronously)
     * Returns NEBL address balance in satoshis
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address balance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressBalanceAsync(String address, final ApiCallback<BigDecimal> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressBalanceValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAddressTotalReceived
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total received by address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressTotalReceivedCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/addr/{address}/totalReceived"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressTotalReceivedValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getAddressTotalReceived(Async)");
        }

        return getAddressTotalReceivedCall(address, _callback);

    }

    /**
     * Returns total received by address in sats
     * Returns total NEBL received by address in satoshis
     * @param address Address (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total received by address </td><td>  -  </td></tr>
     </table>
     */
    public BigDecimal getAddressTotalReceived(String address) throws ApiException {
        ApiResponse<BigDecimal> localVarResp = getAddressTotalReceivedWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns total received by address in sats
     * Returns total NEBL received by address in satoshis
     * @param address Address (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total received by address </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigDecimal> getAddressTotalReceivedWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = getAddressTotalReceivedValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns total received by address in sats (asynchronously)
     * Returns total NEBL received by address in satoshis
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total received by address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressTotalReceivedAsync(String address, final ApiCallback<BigDecimal> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressTotalReceivedValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAddressTotalSent
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total sent by address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressTotalSentCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/addr/{address}/totalSent"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressTotalSentValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getAddressTotalSent(Async)");
        }

        return getAddressTotalSentCall(address, _callback);

    }

    /**
     * Returns total sent by address in sats
     * Returns total NEBL sent by address in satoshis
     * @param address Address (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total sent by address </td><td>  -  </td></tr>
     </table>
     */
    public BigDecimal getAddressTotalSent(String address) throws ApiException {
        ApiResponse<BigDecimal> localVarResp = getAddressTotalSentWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns total sent by address in sats
     * Returns total NEBL sent by address in satoshis
     * @param address Address (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total sent by address </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigDecimal> getAddressTotalSentWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = getAddressTotalSentValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns total sent by address in sats (asynchronously)
     * Returns total NEBL sent by address in satoshis
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total sent by address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressTotalSentAsync(String address, final ApiCallback<BigDecimal> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressTotalSentValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAddressUnconfirmedBalance
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address unconfirmed balance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressUnconfirmedBalanceCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/addr/{address}/unconfirmedBalance"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressUnconfirmedBalanceValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getAddressUnconfirmedBalance(Async)");
        }

        return getAddressUnconfirmedBalanceCall(address, _callback);

    }

    /**
     * Returns address unconfirmed balance in sats
     * Returns NEBL address unconfirmed balance in satoshis
     * @param address Address (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address unconfirmed balance </td><td>  -  </td></tr>
     </table>
     */
    public BigDecimal getAddressUnconfirmedBalance(String address) throws ApiException {
        ApiResponse<BigDecimal> localVarResp = getAddressUnconfirmedBalanceWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns address unconfirmed balance in sats
     * Returns NEBL address unconfirmed balance in satoshis
     * @param address Address (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address unconfirmed balance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigDecimal> getAddressUnconfirmedBalanceWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = getAddressUnconfirmedBalanceValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns address unconfirmed balance in sats (asynchronously)
     * Returns NEBL address unconfirmed balance in satoshis
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address unconfirmed balance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressUnconfirmedBalanceAsync(String address, final ApiCallback<BigDecimal> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressUnconfirmedBalanceValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAddressUtxos
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UTXOs at an address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressUtxosCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/addr/{address}/utxo"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressUtxosValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getAddressUtxos(Async)");
        }

        return getAddressUtxosCall(address, _callback);

    }

    /**
     * Returns all UTXOs at a given address
     * Returns information on each Unspent Transaction Output contained at an address
     * @param address Address (required)
     * @return List&lt;GetAddressUtxosResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UTXOs at an address </td><td>  -  </td></tr>
     </table>
     */
    public List<GetAddressUtxosResponseInner> getAddressUtxos(String address) throws ApiException {
        ApiResponse<List<GetAddressUtxosResponseInner>> localVarResp = getAddressUtxosWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns all UTXOs at a given address
     * Returns information on each Unspent Transaction Output contained at an address
     * @param address Address (required)
     * @return ApiResponse&lt;List&lt;GetAddressUtxosResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UTXOs at an address </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetAddressUtxosResponseInner>> getAddressUtxosWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = getAddressUtxosValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<List<GetAddressUtxosResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all UTXOs at a given address (asynchronously)
     * Returns information on each Unspent Transaction Output contained at an address
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UTXOs at an address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressUtxosAsync(String address, final ApiCallback<List<GetAddressUtxosResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressUtxosValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<List<GetAddressUtxosResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBlock
     * @param blockhash Block Hash (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing all information on a blockchain block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockCall(String blockhash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/block/{blockhash}"
            .replace("{" + "blockhash" + "}", localVarApiClient.escapeString(blockhash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBlockValidateBeforeCall(String blockhash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockhash' is set
        if (blockhash == null) {
            throw new ApiException("Missing the required parameter 'blockhash' when calling getBlock(Async)");
        }

        return getBlockCall(blockhash, _callback);

    }

    /**
     * Returns information regarding a Neblio block
     * Returns blockchain data for a given block based upon the block hash
     * @param blockhash Block Hash (required)
     * @return GetBlockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing all information on a blockchain block </td><td>  -  </td></tr>
     </table>
     */
    public GetBlockResponse getBlock(String blockhash) throws ApiException {
        ApiResponse<GetBlockResponse> localVarResp = getBlockWithHttpInfo(blockhash);
        return localVarResp.getData();
    }

    /**
     * Returns information regarding a Neblio block
     * Returns blockchain data for a given block based upon the block hash
     * @param blockhash Block Hash (required)
     * @return ApiResponse&lt;GetBlockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing all information on a blockchain block </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBlockResponse> getBlockWithHttpInfo(String blockhash) throws ApiException {
        okhttp3.Call localVarCall = getBlockValidateBeforeCall(blockhash, null);
        Type localVarReturnType = new TypeToken<GetBlockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns information regarding a Neblio block (asynchronously)
     * Returns blockchain data for a given block based upon the block hash
     * @param blockhash Block Hash (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing all information on a blockchain block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockAsync(String blockhash, final ApiCallback<GetBlockResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBlockValidateBeforeCall(blockhash, _callback);
        Type localVarReturnType = new TypeToken<GetBlockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBlockIndex
     * @param blockindex Block Index (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing block hash </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockIndexCall(BigDecimal blockindex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/block-index/{blockindex}"
            .replace("{" + "blockindex" + "}", localVarApiClient.escapeString(blockindex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBlockIndexValidateBeforeCall(BigDecimal blockindex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockindex' is set
        if (blockindex == null) {
            throw new ApiException("Missing the required parameter 'blockindex' when calling getBlockIndex(Async)");
        }

        return getBlockIndexCall(blockindex, _callback);

    }

    /**
     * Returns block hash of block
     * Returns the block hash of a block at a given block index
     * @param blockindex Block Index (required)
     * @return GetBlockIndexResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing block hash </td><td>  -  </td></tr>
     </table>
     */
    public GetBlockIndexResponse getBlockIndex(BigDecimal blockindex) throws ApiException {
        ApiResponse<GetBlockIndexResponse> localVarResp = getBlockIndexWithHttpInfo(blockindex);
        return localVarResp.getData();
    }

    /**
     * Returns block hash of block
     * Returns the block hash of a block at a given block index
     * @param blockindex Block Index (required)
     * @return ApiResponse&lt;GetBlockIndexResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing block hash </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBlockIndexResponse> getBlockIndexWithHttpInfo(BigDecimal blockindex) throws ApiException {
        okhttp3.Call localVarCall = getBlockIndexValidateBeforeCall(blockindex, null);
        Type localVarReturnType = new TypeToken<GetBlockIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns block hash of block (asynchronously)
     * Returns the block hash of a block at a given block index
     * @param blockindex Block Index (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing block hash </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockIndexAsync(BigDecimal blockindex, final ApiCallback<GetBlockIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBlockIndexValidateBeforeCall(blockindex, _callback);
        Type localVarReturnType = new TypeToken<GetBlockIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRawTx
     * @param txid Transaction ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing raw hex of transaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawTxCall(String txid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/rawtx/{txid}"
            .replace("{" + "txid" + "}", localVarApiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawTxValidateBeforeCall(String txid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling getRawTx(Async)");
        }

        return getRawTxCall(txid, _callback);

    }

    /**
     * Returns raw transaction hex
     * Returns raw transaction hex representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @return GetRawTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing raw hex of transaction </td><td>  -  </td></tr>
     </table>
     */
    public GetRawTxResponse getRawTx(String txid) throws ApiException {
        ApiResponse<GetRawTxResponse> localVarResp = getRawTxWithHttpInfo(txid);
        return localVarResp.getData();
    }

    /**
     * Returns raw transaction hex
     * Returns raw transaction hex representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @return ApiResponse&lt;GetRawTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing raw hex of transaction </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRawTxResponse> getRawTxWithHttpInfo(String txid) throws ApiException {
        okhttp3.Call localVarCall = getRawTxValidateBeforeCall(txid, null);
        Type localVarReturnType = new TypeToken<GetRawTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns raw transaction hex (asynchronously)
     * Returns raw transaction hex representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing raw hex of transaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawTxAsync(String txid, final ApiCallback<GetRawTxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawTxValidateBeforeCall(txid, _callback);
        Type localVarReturnType = new TypeToken<GetRawTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatus
     * @param q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatusCall(String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        return getStatusCall(q, _callback);

    }

    /**
     * Utility API for calling several blockchain node functions
     * Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
     * @param q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function Response </td><td>  -  </td></tr>
     </table>
     */
    public Object getStatus(String q) throws ApiException {
        ApiResponse<Object> localVarResp = getStatusWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * Utility API for calling several blockchain node functions
     * Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
     * @param q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getStatusWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = getStatusValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Utility API for calling several blockchain node functions (asynchronously)
     * Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
     * @param q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatusAsync(String q, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSync
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sync Info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSyncCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSyncValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSyncCall(_callback);

    }

    /**
     * Get node sync status
     * Returns information on the node&#39;s sync progress
     * @return GetSyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sync Info </td><td>  -  </td></tr>
     </table>
     */
    public GetSyncResponse getSync() throws ApiException {
        ApiResponse<GetSyncResponse> localVarResp = getSyncWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get node sync status
     * Returns information on the node&#39;s sync progress
     * @return ApiResponse&lt;GetSyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sync Info </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSyncResponse> getSyncWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSyncValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetSyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get node sync status (asynchronously)
     * Returns information on the node&#39;s sync progress
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sync Info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSyncAsync(final ApiCallback<GetSyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSyncValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetSyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTx
     * @param txid Transaction ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing transaction info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTxCall(String txid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/tx/{txid}"
            .replace("{" + "txid" + "}", localVarApiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTxValidateBeforeCall(String txid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling getTx(Async)");
        }

        return getTxCall(txid, _callback);

    }

    /**
     * Returns transaction object
     * Returns NEBL transaction object representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @return GetTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing transaction info </td><td>  -  </td></tr>
     </table>
     */
    public GetTxResponse getTx(String txid) throws ApiException {
        ApiResponse<GetTxResponse> localVarResp = getTxWithHttpInfo(txid);
        return localVarResp.getData();
    }

    /**
     * Returns transaction object
     * Returns NEBL transaction object representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @return ApiResponse&lt;GetTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing transaction info </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTxResponse> getTxWithHttpInfo(String txid) throws ApiException {
        okhttp3.Call localVarCall = getTxValidateBeforeCall(txid, null);
        Type localVarReturnType = new TypeToken<GetTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns transaction object (asynchronously)
     * Returns NEBL transaction object representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing transaction info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTxAsync(String txid, final ApiCallback<GetTxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTxValidateBeforeCall(txid, _callback);
        Type localVarReturnType = new TypeToken<GetTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTxs
     * @param address Address (optional)
     * @param block Block Hash (optional)
     * @param pageNum Page number to display (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTxsCall(String address, String block, BigDecimal pageNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ins/txs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (block != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("block", block));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNum", pageNum));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTxsValidateBeforeCall(String address, String block, BigDecimal pageNum, final ApiCallback _callback) throws ApiException {
        return getTxsCall(address, block, pageNum, _callback);

    }

    /**
     * Get transactions by block or address
     * Returns all transactions by block or address
     * @param address Address (optional)
     * @param block Block Hash (optional)
     * @param pageNum Page number to display (optional)
     * @return GetTxsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
     </table>
     */
    public GetTxsResponse getTxs(String address, String block, BigDecimal pageNum) throws ApiException {
        ApiResponse<GetTxsResponse> localVarResp = getTxsWithHttpInfo(address, block, pageNum);
        return localVarResp.getData();
    }

    /**
     * Get transactions by block or address
     * Returns all transactions by block or address
     * @param address Address (optional)
     * @param block Block Hash (optional)
     * @param pageNum Page number to display (optional)
     * @return ApiResponse&lt;GetTxsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTxsResponse> getTxsWithHttpInfo(String address, String block, BigDecimal pageNum) throws ApiException {
        okhttp3.Call localVarCall = getTxsValidateBeforeCall(address, block, pageNum, null);
        Type localVarReturnType = new TypeToken<GetTxsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transactions by block or address (asynchronously)
     * Returns all transactions by block or address
     * @param address Address (optional)
     * @param block Block Hash (optional)
     * @param pageNum Page number to display (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTxsAsync(String address, String block, BigDecimal pageNum, final ApiCallback<GetTxsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTxsValidateBeforeCall(address, block, pageNum, _callback);
        Type localVarReturnType = new TypeToken<GetTxsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendTx
     * @param sendTxRequest Object representing a transaction to broadcast (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTxCall(SendTxRequest sendTxRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendTxRequest;

        // create path and map variables
        String localVarPath = "/ins/tx/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTxValidateBeforeCall(SendTxRequest sendTxRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendTxRequest' is set
        if (sendTxRequest == null) {
            throw new ApiException("Missing the required parameter 'sendTxRequest' when calling sendTx(Async)");
        }

        return sendTxCall(sendTxRequest, _callback);

    }

    /**
     * Broadcasts a signed raw transaction to the network (not NTP1 specific)
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param sendTxRequest Object representing a transaction to broadcast (required)
     * @return BroadcastTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BroadcastTxResponse sendTx(SendTxRequest sendTxRequest) throws ApiException {
        ApiResponse<BroadcastTxResponse> localVarResp = sendTxWithHttpInfo(sendTxRequest);
        return localVarResp.getData();
    }

    /**
     * Broadcasts a signed raw transaction to the network (not NTP1 specific)
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param sendTxRequest Object representing a transaction to broadcast (required)
     * @return ApiResponse&lt;BroadcastTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BroadcastTxResponse> sendTxWithHttpInfo(SendTxRequest sendTxRequest) throws ApiException {
        okhttp3.Call localVarCall = sendTxValidateBeforeCall(sendTxRequest, null);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Broadcasts a signed raw transaction to the network (not NTP1 specific) (asynchronously)
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param sendTxRequest Object representing a transaction to broadcast (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTxAsync(SendTxRequest sendTxRequest, final ApiCallback<BroadcastTxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTxValidateBeforeCall(sendTxRequest, _callback);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
