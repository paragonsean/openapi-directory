/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IssueTokenRequestFlags;
import org.openapitools.client.model.IssueTokenRequestMetadata;
import org.openapitools.client.model.IssueTokenRequestTransferInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IssueTokenRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:38.969239-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IssueTokenRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_DIVISIBILITY = "divisibility";
  @SerializedName(SERIALIZED_NAME_DIVISIBILITY)
  private BigDecimal divisibility;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private BigDecimal fee;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private IssueTokenRequestFlags flags;

  public static final String SERIALIZED_NAME_ISSUE_ADDRESS = "issueAddress";
  @SerializedName(SERIALIZED_NAME_ISSUE_ADDRESS)
  private String issueAddress;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private IssueTokenRequestMetadata metadata;

  public static final String SERIALIZED_NAME_REISSUABLE = "reissuable";
  @SerializedName(SERIALIZED_NAME_REISSUABLE)
  private Boolean reissuable;

  public static final String SERIALIZED_NAME_TRANSFER = "transfer";
  @SerializedName(SERIALIZED_NAME_TRANSFER)
  private List<IssueTokenRequestTransferInner> transfer = new ArrayList<>();

  public IssueTokenRequest() {
  }

  public IssueTokenRequest amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Number of tokens to issue
   * @return amount
   */
  @javax.annotation.Nonnull
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public IssueTokenRequest divisibility(BigDecimal divisibility) {
    this.divisibility = divisibility;
    return this;
  }

  /**
   * Number of decimal places the token should be divisble by (0-7)
   * @return divisibility
   */
  @javax.annotation.Nonnull
  public BigDecimal getDivisibility() {
    return divisibility;
  }

  public void setDivisibility(BigDecimal divisibility) {
    this.divisibility = divisibility;
  }


  public IssueTokenRequest fee(BigDecimal fee) {
    this.fee = fee;
    return this;
  }

  /**
   * Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)
   * @return fee
   */
  @javax.annotation.Nonnull
  public BigDecimal getFee() {
    return fee;
  }

  public void setFee(BigDecimal fee) {
    this.fee = fee;
  }


  public IssueTokenRequest flags(IssueTokenRequestFlags flags) {
    this.flags = flags;
    return this;
  }

  /**
   * Get flags
   * @return flags
   */
  @javax.annotation.Nullable
  public IssueTokenRequestFlags getFlags() {
    return flags;
  }

  public void setFlags(IssueTokenRequestFlags flags) {
    this.flags = flags;
  }


  public IssueTokenRequest issueAddress(String issueAddress) {
    this.issueAddress = issueAddress;
    return this;
  }

  /**
   * Address issuing the token
   * @return issueAddress
   */
  @javax.annotation.Nonnull
  public String getIssueAddress() {
    return issueAddress;
  }

  public void setIssueAddress(String issueAddress) {
    this.issueAddress = issueAddress;
  }


  public IssueTokenRequest metadata(IssueTokenRequestMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public IssueTokenRequestMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(IssueTokenRequestMetadata metadata) {
    this.metadata = metadata;
  }


  public IssueTokenRequest reissuable(Boolean reissuable) {
    this.reissuable = reissuable;
    return this;
  }

  /**
   * whether the token should be reissuable
   * @return reissuable
   */
  @javax.annotation.Nonnull
  public Boolean getReissuable() {
    return reissuable;
  }

  public void setReissuable(Boolean reissuable) {
    this.reissuable = reissuable;
  }


  public IssueTokenRequest transfer(List<IssueTokenRequestTransferInner> transfer) {
    this.transfer = transfer;
    return this;
  }

  public IssueTokenRequest addTransferItem(IssueTokenRequestTransferInner transferItem) {
    if (this.transfer == null) {
      this.transfer = new ArrayList<>();
    }
    this.transfer.add(transferItem);
    return this;
  }

  /**
   * Get transfer
   * @return transfer
   */
  @javax.annotation.Nonnull
  public List<IssueTokenRequestTransferInner> getTransfer() {
    return transfer;
  }

  public void setTransfer(List<IssueTokenRequestTransferInner> transfer) {
    this.transfer = transfer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueTokenRequest issueTokenRequest = (IssueTokenRequest) o;
    return Objects.equals(this.amount, issueTokenRequest.amount) &&
        Objects.equals(this.divisibility, issueTokenRequest.divisibility) &&
        Objects.equals(this.fee, issueTokenRequest.fee) &&
        Objects.equals(this.flags, issueTokenRequest.flags) &&
        Objects.equals(this.issueAddress, issueTokenRequest.issueAddress) &&
        Objects.equals(this.metadata, issueTokenRequest.metadata) &&
        Objects.equals(this.reissuable, issueTokenRequest.reissuable) &&
        Objects.equals(this.transfer, issueTokenRequest.transfer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, divisibility, fee, flags, issueAddress, metadata, reissuable, transfer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueTokenRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    divisibility: ").append(toIndentedString(divisibility)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    issueAddress: ").append(toIndentedString(issueAddress)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    reissuable: ").append(toIndentedString(reissuable)).append("\n");
    sb.append("    transfer: ").append(toIndentedString(transfer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("divisibility");
    openapiFields.add("fee");
    openapiFields.add("flags");
    openapiFields.add("issueAddress");
    openapiFields.add("metadata");
    openapiFields.add("reissuable");
    openapiFields.add("transfer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("divisibility");
    openapiRequiredFields.add("fee");
    openapiRequiredFields.add("issueAddress");
    openapiRequiredFields.add("reissuable");
    openapiRequiredFields.add("transfer");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssueTokenRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssueTokenRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueTokenRequest is not found in the empty JSON string", IssueTokenRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssueTokenRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueTokenRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IssueTokenRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `flags`
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) {
        IssueTokenRequestFlags.validateJsonElement(jsonObj.get("flags"));
      }
      if (!jsonObj.get("issueAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueAddress").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        IssueTokenRequestMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("transfer").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer` to be an array in the JSON string but got `%s`", jsonObj.get("transfer").toString()));
      }

      JsonArray jsonArraytransfer = jsonObj.getAsJsonArray("transfer");
      // validate the required field `transfer` (array)
      for (int i = 0; i < jsonArraytransfer.size(); i++) {
        IssueTokenRequestTransferInner.validateJsonElement(jsonArraytransfer.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueTokenRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueTokenRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueTokenRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueTokenRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueTokenRequest>() {
           @Override
           public void write(JsonWriter out, IssueTokenRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueTokenRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssueTokenRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssueTokenRequest
   * @throws IOException if the JSON string is invalid with respect to IssueTokenRequest
   */
  public static IssueTokenRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueTokenRequest.class);
  }

  /**
   * Convert an instance of IssueTokenRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

