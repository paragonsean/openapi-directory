/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.BroadcastTxResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetAddressResponse;
import org.openapitools.client.model.GetAddressUtxosResponseInner;
import org.openapitools.client.model.GetBlockIndexResponse;
import org.openapitools.client.model.GetBlockResponse;
import org.openapitools.client.model.GetRawTxResponse;
import org.openapitools.client.model.GetSyncResponse;
import org.openapitools.client.model.GetTxResponse;
import org.openapitools.client.model.GetTxsResponse;
import org.openapitools.client.model.SendTxRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestnetInsightApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TestnetInsightApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestnetInsightApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for testnetGetAddress
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing address info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/addr/{address}"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetAddressValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling testnetGetAddress(Async)");
        }

        return testnetGetAddressCall(address, _callback);

    }

    /**
     * Returns address object
     * Returns NEBL address object containing information on a specific address
     * @param address Address (required)
     * @return GetAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing address info </td><td>  -  </td></tr>
     </table>
     */
    public GetAddressResponse testnetGetAddress(String address) throws ApiException {
        ApiResponse<GetAddressResponse> localVarResp = testnetGetAddressWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns address object
     * Returns NEBL address object containing information on a specific address
     * @param address Address (required)
     * @return ApiResponse&lt;GetAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing address info </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAddressResponse> testnetGetAddressWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = testnetGetAddressValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<GetAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns address object (asynchronously)
     * Returns NEBL address object containing information on a specific address
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing address info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressAsync(String address, final ApiCallback<GetAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetAddressValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<GetAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetAddressBalance
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address balance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressBalanceCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/addr/{address}/balance"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetAddressBalanceValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling testnetGetAddressBalance(Async)");
        }

        return testnetGetAddressBalanceCall(address, _callback);

    }

    /**
     * Returns address balance in sats
     * Returns NEBL address balance in satoshis
     * @param address Address (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address balance </td><td>  -  </td></tr>
     </table>
     */
    public BigDecimal testnetGetAddressBalance(String address) throws ApiException {
        ApiResponse<BigDecimal> localVarResp = testnetGetAddressBalanceWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns address balance in sats
     * Returns NEBL address balance in satoshis
     * @param address Address (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address balance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigDecimal> testnetGetAddressBalanceWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = testnetGetAddressBalanceValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns address balance in sats (asynchronously)
     * Returns NEBL address balance in satoshis
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address balance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressBalanceAsync(String address, final ApiCallback<BigDecimal> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetAddressBalanceValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetAddressTotalReceived
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total received by address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressTotalReceivedCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/addr/{address}/totalReceived"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetAddressTotalReceivedValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling testnetGetAddressTotalReceived(Async)");
        }

        return testnetGetAddressTotalReceivedCall(address, _callback);

    }

    /**
     * Returns total received by address in sats
     * Returns total NEBL received by address in satoshis
     * @param address Address (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total received by address </td><td>  -  </td></tr>
     </table>
     */
    public BigDecimal testnetGetAddressTotalReceived(String address) throws ApiException {
        ApiResponse<BigDecimal> localVarResp = testnetGetAddressTotalReceivedWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns total received by address in sats
     * Returns total NEBL received by address in satoshis
     * @param address Address (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total received by address </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigDecimal> testnetGetAddressTotalReceivedWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = testnetGetAddressTotalReceivedValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns total received by address in sats (asynchronously)
     * Returns total NEBL received by address in satoshis
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total received by address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressTotalReceivedAsync(String address, final ApiCallback<BigDecimal> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetAddressTotalReceivedValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetAddressTotalSent
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total sent by address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressTotalSentCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/addr/{address}/totalSent"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetAddressTotalSentValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling testnetGetAddressTotalSent(Async)");
        }

        return testnetGetAddressTotalSentCall(address, _callback);

    }

    /**
     * Returns total sent by address in sats
     * Returns total NEBL sent by address in satoshis
     * @param address Address (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total sent by address </td><td>  -  </td></tr>
     </table>
     */
    public BigDecimal testnetGetAddressTotalSent(String address) throws ApiException {
        ApiResponse<BigDecimal> localVarResp = testnetGetAddressTotalSentWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns total sent by address in sats
     * Returns total NEBL sent by address in satoshis
     * @param address Address (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total sent by address </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigDecimal> testnetGetAddressTotalSentWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = testnetGetAddressTotalSentValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns total sent by address in sats (asynchronously)
     * Returns total NEBL sent by address in satoshis
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Total sent by address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressTotalSentAsync(String address, final ApiCallback<BigDecimal> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetAddressTotalSentValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetAddressUnconfirmedBalance
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address unconfirmed balance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressUnconfirmedBalanceCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/addr/{address}/unconfirmedBalance"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetAddressUnconfirmedBalanceValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling testnetGetAddressUnconfirmedBalance(Async)");
        }

        return testnetGetAddressUnconfirmedBalanceCall(address, _callback);

    }

    /**
     * Returns address unconfirmed balance in sats
     * Returns NEBL address unconfirmed balance in satoshis
     * @param address Address (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address unconfirmed balance </td><td>  -  </td></tr>
     </table>
     */
    public BigDecimal testnetGetAddressUnconfirmedBalance(String address) throws ApiException {
        ApiResponse<BigDecimal> localVarResp = testnetGetAddressUnconfirmedBalanceWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns address unconfirmed balance in sats
     * Returns NEBL address unconfirmed balance in satoshis
     * @param address Address (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address unconfirmed balance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigDecimal> testnetGetAddressUnconfirmedBalanceWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = testnetGetAddressUnconfirmedBalanceValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns address unconfirmed balance in sats (asynchronously)
     * Returns NEBL address unconfirmed balance in satoshis
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address unconfirmed balance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressUnconfirmedBalanceAsync(String address, final ApiCallback<BigDecimal> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetAddressUnconfirmedBalanceValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetAddressUtxos
     * @param address Address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UTXOs at an address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressUtxosCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/addr/{address}/utxo"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetAddressUtxosValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling testnetGetAddressUtxos(Async)");
        }

        return testnetGetAddressUtxosCall(address, _callback);

    }

    /**
     * Returns all UTXOs at a given address
     * Returns information on each Unspent Transaction Output contained at an address
     * @param address Address (required)
     * @return List&lt;GetAddressUtxosResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UTXOs at an address </td><td>  -  </td></tr>
     </table>
     */
    public List<GetAddressUtxosResponseInner> testnetGetAddressUtxos(String address) throws ApiException {
        ApiResponse<List<GetAddressUtxosResponseInner>> localVarResp = testnetGetAddressUtxosWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Returns all UTXOs at a given address
     * Returns information on each Unspent Transaction Output contained at an address
     * @param address Address (required)
     * @return ApiResponse&lt;List&lt;GetAddressUtxosResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UTXOs at an address </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetAddressUtxosResponseInner>> testnetGetAddressUtxosWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = testnetGetAddressUtxosValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<List<GetAddressUtxosResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all UTXOs at a given address (asynchronously)
     * Returns information on each Unspent Transaction Output contained at an address
     * @param address Address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UTXOs at an address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetAddressUtxosAsync(String address, final ApiCallback<List<GetAddressUtxosResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetAddressUtxosValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<List<GetAddressUtxosResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetBlock
     * @param blockhash Block Hash (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing all information on a blockchain block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetBlockCall(String blockhash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/block/{blockhash}"
            .replace("{" + "blockhash" + "}", localVarApiClient.escapeString(blockhash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetBlockValidateBeforeCall(String blockhash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockhash' is set
        if (blockhash == null) {
            throw new ApiException("Missing the required parameter 'blockhash' when calling testnetGetBlock(Async)");
        }

        return testnetGetBlockCall(blockhash, _callback);

    }

    /**
     * Returns information regarding a Neblio block
     * Returns blockchain data for a given block based upon the block hash
     * @param blockhash Block Hash (required)
     * @return GetBlockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing all information on a blockchain block </td><td>  -  </td></tr>
     </table>
     */
    public GetBlockResponse testnetGetBlock(String blockhash) throws ApiException {
        ApiResponse<GetBlockResponse> localVarResp = testnetGetBlockWithHttpInfo(blockhash);
        return localVarResp.getData();
    }

    /**
     * Returns information regarding a Neblio block
     * Returns blockchain data for a given block based upon the block hash
     * @param blockhash Block Hash (required)
     * @return ApiResponse&lt;GetBlockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing all information on a blockchain block </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBlockResponse> testnetGetBlockWithHttpInfo(String blockhash) throws ApiException {
        okhttp3.Call localVarCall = testnetGetBlockValidateBeforeCall(blockhash, null);
        Type localVarReturnType = new TypeToken<GetBlockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns information regarding a Neblio block (asynchronously)
     * Returns blockchain data for a given block based upon the block hash
     * @param blockhash Block Hash (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing all information on a blockchain block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetBlockAsync(String blockhash, final ApiCallback<GetBlockResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetBlockValidateBeforeCall(blockhash, _callback);
        Type localVarReturnType = new TypeToken<GetBlockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetBlockIndex
     * @param blockindex Block Index (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing block hash </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetBlockIndexCall(BigDecimal blockindex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/block-index/{blockindex}"
            .replace("{" + "blockindex" + "}", localVarApiClient.escapeString(blockindex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetBlockIndexValidateBeforeCall(BigDecimal blockindex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockindex' is set
        if (blockindex == null) {
            throw new ApiException("Missing the required parameter 'blockindex' when calling testnetGetBlockIndex(Async)");
        }

        return testnetGetBlockIndexCall(blockindex, _callback);

    }

    /**
     * Returns block hash of block
     * Returns the block hash of a block at a given block index
     * @param blockindex Block Index (required)
     * @return GetBlockIndexResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing block hash </td><td>  -  </td></tr>
     </table>
     */
    public GetBlockIndexResponse testnetGetBlockIndex(BigDecimal blockindex) throws ApiException {
        ApiResponse<GetBlockIndexResponse> localVarResp = testnetGetBlockIndexWithHttpInfo(blockindex);
        return localVarResp.getData();
    }

    /**
     * Returns block hash of block
     * Returns the block hash of a block at a given block index
     * @param blockindex Block Index (required)
     * @return ApiResponse&lt;GetBlockIndexResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing block hash </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBlockIndexResponse> testnetGetBlockIndexWithHttpInfo(BigDecimal blockindex) throws ApiException {
        okhttp3.Call localVarCall = testnetGetBlockIndexValidateBeforeCall(blockindex, null);
        Type localVarReturnType = new TypeToken<GetBlockIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns block hash of block (asynchronously)
     * Returns the block hash of a block at a given block index
     * @param blockindex Block Index (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing block hash </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetBlockIndexAsync(BigDecimal blockindex, final ApiCallback<GetBlockIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetBlockIndexValidateBeforeCall(blockindex, _callback);
        Type localVarReturnType = new TypeToken<GetBlockIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetRawTx
     * @param txid Transaction ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing raw hex of transaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetRawTxCall(String txid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/rawtx/{txid}"
            .replace("{" + "txid" + "}", localVarApiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetRawTxValidateBeforeCall(String txid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling testnetGetRawTx(Async)");
        }

        return testnetGetRawTxCall(txid, _callback);

    }

    /**
     * Returns raw transaction hex
     * Returns raw transaction hex representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @return GetRawTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing raw hex of transaction </td><td>  -  </td></tr>
     </table>
     */
    public GetRawTxResponse testnetGetRawTx(String txid) throws ApiException {
        ApiResponse<GetRawTxResponse> localVarResp = testnetGetRawTxWithHttpInfo(txid);
        return localVarResp.getData();
    }

    /**
     * Returns raw transaction hex
     * Returns raw transaction hex representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @return ApiResponse&lt;GetRawTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing raw hex of transaction </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRawTxResponse> testnetGetRawTxWithHttpInfo(String txid) throws ApiException {
        okhttp3.Call localVarCall = testnetGetRawTxValidateBeforeCall(txid, null);
        Type localVarReturnType = new TypeToken<GetRawTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns raw transaction hex (asynchronously)
     * Returns raw transaction hex representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing raw hex of transaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetRawTxAsync(String txid, final ApiCallback<GetRawTxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetRawTxValidateBeforeCall(txid, _callback);
        Type localVarReturnType = new TypeToken<GetRawTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetStatus
     * @param q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetStatusCall(String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetStatusValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        return testnetGetStatusCall(q, _callback);

    }

    /**
     * Utility API for calling several blockchain node functions
     * Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
     * @param q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function Response </td><td>  -  </td></tr>
     </table>
     */
    public Object testnetGetStatus(String q) throws ApiException {
        ApiResponse<Object> localVarResp = testnetGetStatusWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * Utility API for calling several blockchain node functions
     * Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
     * @param q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> testnetGetStatusWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = testnetGetStatusValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Utility API for calling several blockchain node functions (asynchronously)
     * Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
     * @param q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetStatusAsync(String q, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetStatusValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetSync
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sync Info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetSyncCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetSyncValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return testnetGetSyncCall(_callback);

    }

    /**
     * Get node sync status
     * Returns information on the node&#39;s sync progress
     * @return GetSyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sync Info </td><td>  -  </td></tr>
     </table>
     */
    public GetSyncResponse testnetGetSync() throws ApiException {
        ApiResponse<GetSyncResponse> localVarResp = testnetGetSyncWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get node sync status
     * Returns information on the node&#39;s sync progress
     * @return ApiResponse&lt;GetSyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sync Info </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSyncResponse> testnetGetSyncWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = testnetGetSyncValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetSyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get node sync status (asynchronously)
     * Returns information on the node&#39;s sync progress
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sync Info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetSyncAsync(final ApiCallback<GetSyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetSyncValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetSyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetTx
     * @param txid Transaction ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing transaction info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetTxCall(String txid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/tx/{txid}"
            .replace("{" + "txid" + "}", localVarApiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetTxValidateBeforeCall(String txid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling testnetGetTx(Async)");
        }

        return testnetGetTxCall(txid, _callback);

    }

    /**
     * Returns transaction object
     * Returns NEBL transaction object representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @return GetTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing transaction info </td><td>  -  </td></tr>
     </table>
     */
    public GetTxResponse testnetGetTx(String txid) throws ApiException {
        ApiResponse<GetTxResponse> localVarResp = testnetGetTxWithHttpInfo(txid);
        return localVarResp.getData();
    }

    /**
     * Returns transaction object
     * Returns NEBL transaction object representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @return ApiResponse&lt;GetTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing transaction info </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTxResponse> testnetGetTxWithHttpInfo(String txid) throws ApiException {
        okhttp3.Call localVarCall = testnetGetTxValidateBeforeCall(txid, null);
        Type localVarReturnType = new TypeToken<GetTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns transaction object (asynchronously)
     * Returns NEBL transaction object representing a NEBL transaction
     * @param txid Transaction ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object containing transaction info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetTxAsync(String txid, final ApiCallback<GetTxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetTxValidateBeforeCall(txid, _callback);
        Type localVarReturnType = new TypeToken<GetTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetGetTxs
     * @param address Address (optional)
     * @param block Block Hash (optional)
     * @param pageNum Page number to display (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetTxsCall(String address, String block, BigDecimal pageNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testnet/ins/txs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (block != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("block", block));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNum", pageNum));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetGetTxsValidateBeforeCall(String address, String block, BigDecimal pageNum, final ApiCallback _callback) throws ApiException {
        return testnetGetTxsCall(address, block, pageNum, _callback);

    }

    /**
     * Get transactions by block or address
     * Returns all transactions by block or address
     * @param address Address (optional)
     * @param block Block Hash (optional)
     * @param pageNum Page number to display (optional)
     * @return GetTxsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
     </table>
     */
    public GetTxsResponse testnetGetTxs(String address, String block, BigDecimal pageNum) throws ApiException {
        ApiResponse<GetTxsResponse> localVarResp = testnetGetTxsWithHttpInfo(address, block, pageNum);
        return localVarResp.getData();
    }

    /**
     * Get transactions by block or address
     * Returns all transactions by block or address
     * @param address Address (optional)
     * @param block Block Hash (optional)
     * @param pageNum Page number to display (optional)
     * @return ApiResponse&lt;GetTxsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTxsResponse> testnetGetTxsWithHttpInfo(String address, String block, BigDecimal pageNum) throws ApiException {
        okhttp3.Call localVarCall = testnetGetTxsValidateBeforeCall(address, block, pageNum, null);
        Type localVarReturnType = new TypeToken<GetTxsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transactions by block or address (asynchronously)
     * Returns all transactions by block or address
     * @param address Address (optional)
     * @param block Block Hash (optional)
     * @param pageNum Page number to display (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetGetTxsAsync(String address, String block, BigDecimal pageNum, final ApiCallback<GetTxsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetGetTxsValidateBeforeCall(address, block, pageNum, _callback);
        Type localVarReturnType = new TypeToken<GetTxsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testnetSendTx
     * @param sendTxRequest Object representing a transaction to broadcast (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetSendTxCall(SendTxRequest sendTxRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendTxRequest;

        // create path and map variables
        String localVarPath = "/testnet/ins/tx/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testnetSendTxValidateBeforeCall(SendTxRequest sendTxRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendTxRequest' is set
        if (sendTxRequest == null) {
            throw new ApiException("Missing the required parameter 'sendTxRequest' when calling testnetSendTx(Async)");
        }

        return testnetSendTxCall(sendTxRequest, _callback);

    }

    /**
     * Broadcasts a signed raw transaction to the network (not NTP1 specific)
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param sendTxRequest Object representing a transaction to broadcast (required)
     * @return BroadcastTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BroadcastTxResponse testnetSendTx(SendTxRequest sendTxRequest) throws ApiException {
        ApiResponse<BroadcastTxResponse> localVarResp = testnetSendTxWithHttpInfo(sendTxRequest);
        return localVarResp.getData();
    }

    /**
     * Broadcasts a signed raw transaction to the network (not NTP1 specific)
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param sendTxRequest Object representing a transaction to broadcast (required)
     * @return ApiResponse&lt;BroadcastTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BroadcastTxResponse> testnetSendTxWithHttpInfo(SendTxRequest sendTxRequest) throws ApiException {
        okhttp3.Call localVarCall = testnetSendTxValidateBeforeCall(sendTxRequest, null);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Broadcasts a signed raw transaction to the network (not NTP1 specific) (asynchronously)
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param sendTxRequest Object representing a transaction to broadcast (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing the TXID if the broadcast was successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testnetSendTxAsync(SendTxRequest sendTxRequest, final ApiCallback<BroadcastTxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testnetSendTxValidateBeforeCall(sendTxRequest, _callback);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
