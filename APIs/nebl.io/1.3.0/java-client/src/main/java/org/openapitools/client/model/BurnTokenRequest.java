/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BurnTokenRequestBurnInner;
import org.openapitools.client.model.BurnTokenRequestTransferInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BurnTokenRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:38.969239-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BurnTokenRequest {
  public static final String SERIALIZED_NAME_BURN = "burn";
  @SerializedName(SERIALIZED_NAME_BURN)
  private List<BurnTokenRequestBurnInner> burn = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private BigDecimal fee;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private List<String> from = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFER = "transfer";
  @SerializedName(SERIALIZED_NAME_TRANSFER)
  private List<BurnTokenRequestTransferInner> transfer = new ArrayList<>();

  public BurnTokenRequest() {
  }

  public BurnTokenRequest burn(List<BurnTokenRequestBurnInner> burn) {
    this.burn = burn;
    return this;
  }

  public BurnTokenRequest addBurnItem(BurnTokenRequestBurnInner burnItem) {
    if (this.burn == null) {
      this.burn = new ArrayList<>();
    }
    this.burn.add(burnItem);
    return this;
  }

  /**
   * Array of objects representing tokens to be burned
   * @return burn
   */
  @javax.annotation.Nonnull
  public List<BurnTokenRequestBurnInner> getBurn() {
    return burn;
  }

  public void setBurn(List<BurnTokenRequestBurnInner> burn) {
    this.burn = burn;
  }


  public BurnTokenRequest fee(BigDecimal fee) {
    this.fee = fee;
    return this;
  }

  /**
   * Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)
   * @return fee
   */
  @javax.annotation.Nonnull
  public BigDecimal getFee() {
    return fee;
  }

  public void setFee(BigDecimal fee) {
    this.fee = fee;
  }


  public BurnTokenRequest from(List<String> from) {
    this.from = from;
    return this;
  }

  public BurnTokenRequest addFromItem(String fromItem) {
    if (this.from == null) {
      this.from = new ArrayList<>();
    }
    this.from.add(fromItem);
    return this;
  }

  /**
   * Array of addresses to send the token from
   * @return from
   */
  @javax.annotation.Nullable
  public List<String> getFrom() {
    return from;
  }

  public void setFrom(List<String> from) {
    this.from = from;
  }


  public BurnTokenRequest transfer(List<BurnTokenRequestTransferInner> transfer) {
    this.transfer = transfer;
    return this;
  }

  public BurnTokenRequest addTransferItem(BurnTokenRequestTransferInner transferItem) {
    if (this.transfer == null) {
      this.transfer = new ArrayList<>();
    }
    this.transfer.add(transferItem);
    return this;
  }

  /**
   * Get transfer
   * @return transfer
   */
  @javax.annotation.Nullable
  public List<BurnTokenRequestTransferInner> getTransfer() {
    return transfer;
  }

  public void setTransfer(List<BurnTokenRequestTransferInner> transfer) {
    this.transfer = transfer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BurnTokenRequest burnTokenRequest = (BurnTokenRequest) o;
    return Objects.equals(this.burn, burnTokenRequest.burn) &&
        Objects.equals(this.fee, burnTokenRequest.fee) &&
        Objects.equals(this.from, burnTokenRequest.from) &&
        Objects.equals(this.transfer, burnTokenRequest.transfer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(burn, fee, from, transfer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BurnTokenRequest {\n");
    sb.append("    burn: ").append(toIndentedString(burn)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    transfer: ").append(toIndentedString(transfer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("burn");
    openapiFields.add("fee");
    openapiFields.add("from");
    openapiFields.add("transfer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("burn");
    openapiRequiredFields.add("fee");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BurnTokenRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BurnTokenRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BurnTokenRequest is not found in the empty JSON string", BurnTokenRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BurnTokenRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BurnTokenRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BurnTokenRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("burn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `burn` to be an array in the JSON string but got `%s`", jsonObj.get("burn").toString()));
      }

      JsonArray jsonArrayburn = jsonObj.getAsJsonArray("burn");
      // validate the required field `burn` (array)
      for (int i = 0; i < jsonArrayburn.size(); i++) {
        BurnTokenRequestBurnInner.validateJsonElement(jsonArrayburn.get(i));
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull() && !jsonObj.get("from").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be an array in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if (jsonObj.get("transfer") != null && !jsonObj.get("transfer").isJsonNull()) {
        JsonArray jsonArraytransfer = jsonObj.getAsJsonArray("transfer");
        if (jsonArraytransfer != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transfer").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transfer` to be an array in the JSON string but got `%s`", jsonObj.get("transfer").toString()));
          }

          // validate the optional field `transfer` (array)
          for (int i = 0; i < jsonArraytransfer.size(); i++) {
            BurnTokenRequestTransferInner.validateJsonElement(jsonArraytransfer.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BurnTokenRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BurnTokenRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BurnTokenRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BurnTokenRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BurnTokenRequest>() {
           @Override
           public void write(JsonWriter out, BurnTokenRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BurnTokenRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BurnTokenRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BurnTokenRequest
   * @throws IOException if the JSON string is invalid with respect to BurnTokenRequest
   */
  public static BurnTokenRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BurnTokenRequest.class);
  }

  /**
   * Convert an instance of BurnTokenRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

