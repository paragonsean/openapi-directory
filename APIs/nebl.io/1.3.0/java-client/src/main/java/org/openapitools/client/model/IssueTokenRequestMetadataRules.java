/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IssueTokenRequestMetadataRulesExpiration;
import org.openapitools.client.model.IssueTokenRequestMetadataRulesFees;
import org.openapitools.client.model.IssueTokenRequestMetadataRulesHoldersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object describing token rules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:38.969239-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IssueTokenRequestMetadataRules {
  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private IssueTokenRequestMetadataRulesExpiration expiration;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private IssueTokenRequestMetadataRulesFees fees;

  public static final String SERIALIZED_NAME_HOLDERS = "holders";
  @SerializedName(SERIALIZED_NAME_HOLDERS)
  private List<IssueTokenRequestMetadataRulesHoldersInner> holders = new ArrayList<>();

  public IssueTokenRequestMetadataRules() {
  }

  public IssueTokenRequestMetadataRules expiration(IssueTokenRequestMetadataRulesExpiration expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * Get expiration
   * @return expiration
   */
  @javax.annotation.Nullable
  public IssueTokenRequestMetadataRulesExpiration getExpiration() {
    return expiration;
  }

  public void setExpiration(IssueTokenRequestMetadataRulesExpiration expiration) {
    this.expiration = expiration;
  }


  public IssueTokenRequestMetadataRules fees(IssueTokenRequestMetadataRulesFees fees) {
    this.fees = fees;
    return this;
  }

  /**
   * Get fees
   * @return fees
   */
  @javax.annotation.Nullable
  public IssueTokenRequestMetadataRulesFees getFees() {
    return fees;
  }

  public void setFees(IssueTokenRequestMetadataRulesFees fees) {
    this.fees = fees;
  }


  public IssueTokenRequestMetadataRules holders(List<IssueTokenRequestMetadataRulesHoldersInner> holders) {
    this.holders = holders;
    return this;
  }

  public IssueTokenRequestMetadataRules addHoldersItem(IssueTokenRequestMetadataRulesHoldersInner holdersItem) {
    if (this.holders == null) {
      this.holders = new ArrayList<>();
    }
    this.holders.add(holdersItem);
    return this;
  }

  /**
   * Array of objects describing what addresses can hold the token
   * @return holders
   */
  @javax.annotation.Nullable
  public List<IssueTokenRequestMetadataRulesHoldersInner> getHolders() {
    return holders;
  }

  public void setHolders(List<IssueTokenRequestMetadataRulesHoldersInner> holders) {
    this.holders = holders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueTokenRequestMetadataRules issueTokenRequestMetadataRules = (IssueTokenRequestMetadataRules) o;
    return Objects.equals(this.expiration, issueTokenRequestMetadataRules.expiration) &&
        Objects.equals(this.fees, issueTokenRequestMetadataRules.fees) &&
        Objects.equals(this.holders, issueTokenRequestMetadataRules.holders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiration, fees, holders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueTokenRequestMetadataRules {\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    holders: ").append(toIndentedString(holders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expiration");
    openapiFields.add("fees");
    openapiFields.add("holders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssueTokenRequestMetadataRules
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssueTokenRequestMetadataRules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueTokenRequestMetadataRules is not found in the empty JSON string", IssueTokenRequestMetadataRules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssueTokenRequestMetadataRules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueTokenRequestMetadataRules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `expiration`
      if (jsonObj.get("expiration") != null && !jsonObj.get("expiration").isJsonNull()) {
        IssueTokenRequestMetadataRulesExpiration.validateJsonElement(jsonObj.get("expiration"));
      }
      // validate the optional field `fees`
      if (jsonObj.get("fees") != null && !jsonObj.get("fees").isJsonNull()) {
        IssueTokenRequestMetadataRulesFees.validateJsonElement(jsonObj.get("fees"));
      }
      if (jsonObj.get("holders") != null && !jsonObj.get("holders").isJsonNull()) {
        JsonArray jsonArrayholders = jsonObj.getAsJsonArray("holders");
        if (jsonArrayholders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("holders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `holders` to be an array in the JSON string but got `%s`", jsonObj.get("holders").toString()));
          }

          // validate the optional field `holders` (array)
          for (int i = 0; i < jsonArrayholders.size(); i++) {
            IssueTokenRequestMetadataRulesHoldersInner.validateJsonElement(jsonArrayholders.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueTokenRequestMetadataRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueTokenRequestMetadataRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueTokenRequestMetadataRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueTokenRequestMetadataRules.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueTokenRequestMetadataRules>() {
           @Override
           public void write(JsonWriter out, IssueTokenRequestMetadataRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueTokenRequestMetadataRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssueTokenRequestMetadataRules given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssueTokenRequestMetadataRules
   * @throws IOException if the JSON string is invalid with respect to IssueTokenRequestMetadataRules
   */
  public static IssueTokenRequestMetadataRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueTokenRequestMetadataRules.class);
  }

  /**
   * Convert an instance of IssueTokenRequestMetadataRules to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

