/**
 * BC Laws
 * BC Laws is an electronic library providing free public access to the laws of British Columbia. BC Laws is hosted by the Queen's Printer of British Columbia and published in partnership with the Ministry of Justice and the Law Clerk of the Legislative Assembly.BC Laws contains a comprehensive collection of BC legislation and related materials. It is available on the internet in two forms:First: The library is available as a web site in which users can browse and search the laws of British Columbia.Second: The library is available as a portal to legislation in raw XML data format, accessible via the BC Laws API2. This direct access to raw data is intended to enable third parties to build or add their own custom applications based on the structure of the data and all the associated search functionality inherent in that structure. The BC Laws website itself is an example of one such application.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDocumentApi::OAIDocumentApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDocumentApi::~OAIDocumentApi() {
}

void OAIDocumentApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://www.bclaws.ca/civix"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://www.bclaws.ca/civix"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("documentIdAspectIdCivixIndexIdCivixDocumentIdGet", defaultConf);
    _serverIndices.insert("documentIdAspectIdCivixIndexIdCivixDocumentIdGet", 0);
    _serverConfigs.insert("documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet", defaultConf);
    _serverIndices.insert("documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet", 0);
    _serverConfigs.insert("documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet", defaultConf);
    _serverIndices.insert("documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet", 0);
    _serverConfigs.insert("documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet", defaultConf);
    _serverIndices.insert("documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDocumentApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDocumentApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDocumentApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDocumentApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDocumentApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDocumentApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDocumentApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDocumentApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDocumentApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDocumentApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDocumentApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDocumentApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDocumentApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDocumentApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDocumentApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDocumentApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDocumentApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDocumentApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDocumentApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdGet(const QString &aspect_id, const QString &civix_index_id, const QString &civix_document_id) {
    QString fullPath = QString(_serverConfigs["documentIdAspectIdCivixIndexIdCivixDocumentIdGet"][_serverIndices.value("documentIdAspectIdCivixIndexIdCivixDocumentIdGet")].URL()+"/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}");
    
    
    {
        QString aspect_idPathParam("{");
        aspect_idPathParam.append("aspectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "aspectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"aspectId"+pathSuffix : pathPrefix;
        fullPath.replace(aspect_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(aspect_id)));
    }
    
    {
        QString civix_index_idPathParam("{");
        civix_index_idPathParam.append("civixIndexId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "civixIndexId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"civixIndexId"+pathSuffix : pathPrefix;
        fullPath.replace(civix_index_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(civix_index_id)));
    }
    
    {
        QString civix_document_idPathParam("{");
        civix_document_idPathParam.append("civixDocumentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "civixDocumentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"civixDocumentId"+pathSuffix : pathPrefix;
        fullPath.replace(civix_document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(civix_document_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdGetCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignal();
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalE(error_type, error_str);
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalError(error_type, error_str);
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet(const QString &aspect_id, const QString &civix_index_id, const QString &civix_document_id, const QString &search_string) {
    QString fullPath = QString(_serverConfigs["documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet"][_serverIndices.value("documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet")].URL()+"/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/search/{searchString}");
    
    
    {
        QString aspect_idPathParam("{");
        aspect_idPathParam.append("aspectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "aspectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"aspectId"+pathSuffix : pathPrefix;
        fullPath.replace(aspect_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(aspect_id)));
    }
    
    {
        QString civix_index_idPathParam("{");
        civix_index_idPathParam.append("civixIndexId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "civixIndexId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"civixIndexId"+pathSuffix : pathPrefix;
        fullPath.replace(civix_index_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(civix_index_id)));
    }
    
    {
        QString civix_document_idPathParam("{");
        civix_document_idPathParam.append("civixDocumentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "civixDocumentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"civixDocumentId"+pathSuffix : pathPrefix;
        fullPath.replace(civix_document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(civix_document_id)));
    }
    
    {
        QString search_stringPathParam("{");
        search_stringPathParam.append("searchString").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "searchString", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"searchString"+pathSuffix : pathPrefix;
        fullPath.replace(search_stringPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(search_string)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignal();
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalE(error_type, error_str);
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalError(error_type, error_str);
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet(const QString &aspect_id, const QString &civix_index_id, const QString &civix_document_id) {
    QString fullPath = QString(_serverConfigs["documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet"][_serverIndices.value("documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet")].URL()+"/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/xml");
    
    
    {
        QString aspect_idPathParam("{");
        aspect_idPathParam.append("aspectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "aspectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"aspectId"+pathSuffix : pathPrefix;
        fullPath.replace(aspect_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(aspect_id)));
    }
    
    {
        QString civix_index_idPathParam("{");
        civix_index_idPathParam.append("civixIndexId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "civixIndexId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"civixIndexId"+pathSuffix : pathPrefix;
        fullPath.replace(civix_index_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(civix_index_id)));
    }
    
    {
        QString civix_document_idPathParam("{");
        civix_document_idPathParam.append("civixDocumentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "civixDocumentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"civixDocumentId"+pathSuffix : pathPrefix;
        fullPath.replace(civix_document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(civix_document_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignal();
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalE(error_type, error_str);
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalError(error_type, error_str);
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet(const QString &aspect_id, const QString &civix_index_id, const QString &civix_document_id, const QString &search_string) {
    QString fullPath = QString(_serverConfigs["documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet"][_serverIndices.value("documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet")].URL()+"/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/xml/search/{searchString}");
    
    
    {
        QString aspect_idPathParam("{");
        aspect_idPathParam.append("aspectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "aspectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"aspectId"+pathSuffix : pathPrefix;
        fullPath.replace(aspect_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(aspect_id)));
    }
    
    {
        QString civix_index_idPathParam("{");
        civix_index_idPathParam.append("civixIndexId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "civixIndexId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"civixIndexId"+pathSuffix : pathPrefix;
        fullPath.replace(civix_index_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(civix_index_id)));
    }
    
    {
        QString civix_document_idPathParam("{");
        civix_document_idPathParam.append("civixDocumentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "civixDocumentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"civixDocumentId"+pathSuffix : pathPrefix;
        fullPath.replace(civix_document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(civix_document_id)));
    }
    
    {
        QString search_stringPathParam("{");
        search_stringPathParam.append("searchString").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "searchString", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"searchString"+pathSuffix : pathPrefix;
        fullPath.replace(search_stringPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(search_string)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignal();
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalE(error_type, error_str);
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalError(error_type, error_str);
        Q_EMIT documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
