/**
 * BC Laws
 * BC Laws is an electronic library providing free public access to the laws of British Columbia. BC Laws is hosted by the Queen's Printer of British Columbia and published in partnership with the Ministry of Justice and the Law Clerk of the Legislative Assembly.BC Laws contains a comprehensive collection of BC legislation and related materials. It is available on the internet in two forms:First: The library is available as a web site in which users can browse and search the laws of British Columbia.Second: The library is available as a portal to legislation in raw XML data format, accessible via the BC Laws API2. This direct access to raw data is intended to enable third parties to build or add their own custom applications based on the structure of the data and all the associated search functionality inherent in that structure. The BC Laws website itself is an example of one such application.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentApi_H
#define OAI_OAIDocumentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentApi(const int timeOut = 0);
    ~OAIDocumentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  aspect_id QString [required]
    * @param[in]  civix_index_id QString [required]
    * @param[in]  civix_document_id QString [required]
    */
    virtual void documentIdAspectIdCivixIndexIdCivixDocumentIdGet(const QString &aspect_id, const QString &civix_index_id, const QString &civix_document_id);

    /**
    * @param[in]  aspect_id QString [required]
    * @param[in]  civix_index_id QString [required]
    * @param[in]  civix_document_id QString [required]
    * @param[in]  search_string QString [required]
    */
    virtual void documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet(const QString &aspect_id, const QString &civix_index_id, const QString &civix_document_id, const QString &search_string);

    /**
    * @param[in]  aspect_id QString [required]
    * @param[in]  civix_index_id QString [required]
    * @param[in]  civix_document_id QString [required]
    */
    virtual void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet(const QString &aspect_id, const QString &civix_index_id, const QString &civix_document_id);

    /**
    * @param[in]  aspect_id QString [required]
    * @param[in]  civix_index_id QString [required]
    * @param[in]  civix_document_id QString [required]
    * @param[in]  search_string QString [required]
    */
    virtual void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet(const QString &aspect_id, const QString &civix_index_id, const QString &civix_document_id, const QString &search_string);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void documentIdAspectIdCivixIndexIdCivixDocumentIdGetCallback(OAIHttpRequestWorker *worker);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetCallback(OAIHttpRequestWorker *worker);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetCallback(OAIHttpRequestWorker *worker);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignal();
    void documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignal();
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignal();
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignal();


    void documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalFull(OAIHttpRequestWorker *worker);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalFull(OAIHttpRequestWorker *worker);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalFull(OAIHttpRequestWorker *worker);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalError() instead")
    void documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalError() instead")
    void documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalError() instead")
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalError() instead")
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalErrorFull() instead")
    void documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalErrorFull() instead")
    void documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalErrorFull() instead")
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalErrorFull() instead")
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
