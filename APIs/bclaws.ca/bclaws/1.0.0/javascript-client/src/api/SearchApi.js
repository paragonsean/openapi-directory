/**
 * BC Laws
 * BC Laws is an electronic library providing free public access to the laws of British Columbia. BC Laws is hosted by the Queen's Printer of British Columbia and published in partnership with the Ministry of Justice and the Law Clerk of the Legislative Assembly.BC Laws contains a comprehensive collection of BC legislation and related materials. It is available on the internet in two forms:First: The library is available as a web site in which users can browse and search the laws of British Columbia.Second: The library is available as a portal to legislation in raw XML data format, accessible via the BC Laws API2. This direct access to raw data is intended to enable third parties to build or add their own custom applications based on the structure of the data and all the associated search functionality inherent in that structure. The BC Laws website itself is an example of one such application.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Search service.
* @module api/SearchApi
* @version 1.0.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchAspectIdFullsearchGet operation.
     * @callback module:api/SearchApi~searchAspectIdFullsearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A listing of metadata available for the specified aspect and search term from the BCLaws legislative repository
     * @param {module:model/String} aspectId The identifier of the 'aspect' (content group) to search
     * @param {String} q query term
     * @param {String} s first hit (start index)
     * @param {Number} e last hit (end index)
     * @param {Number} nFrag number of fragment snippets to return (< 10)
     * @param {Number} lFrag length of fragment snippets (< 200)
     * @param {module:api/SearchApi~searchAspectIdFullsearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchAspectIdFullsearchGet(aspectId, q, s, e, nFrag, lFrag, callback) {
      let postBody = null;
      // verify the required parameter 'aspectId' is set
      if (aspectId === undefined || aspectId === null) {
        throw new Error("Missing the required parameter 'aspectId' when calling searchAspectIdFullsearchGet");
      }
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchAspectIdFullsearchGet");
      }
      // verify the required parameter 's' is set
      if (s === undefined || s === null) {
        throw new Error("Missing the required parameter 's' when calling searchAspectIdFullsearchGet");
      }
      // verify the required parameter 'e' is set
      if (e === undefined || e === null) {
        throw new Error("Missing the required parameter 'e' when calling searchAspectIdFullsearchGet");
      }
      // verify the required parameter 'nFrag' is set
      if (nFrag === undefined || nFrag === null) {
        throw new Error("Missing the required parameter 'nFrag' when calling searchAspectIdFullsearchGet");
      }
      // verify the required parameter 'lFrag' is set
      if (lFrag === undefined || lFrag === null) {
        throw new Error("Missing the required parameter 'lFrag' when calling searchAspectIdFullsearchGet");
      }

      let pathParams = {
        'aspectId': aspectId
      };
      let queryParams = {
        'q': q,
        's': s,
        'e': e,
        'nFrag': nFrag,
        'lFrag': lFrag
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{aspectId}/fullsearch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
