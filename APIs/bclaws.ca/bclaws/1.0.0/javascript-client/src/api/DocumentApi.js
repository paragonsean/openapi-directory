/**
 * BC Laws
 * BC Laws is an electronic library providing free public access to the laws of British Columbia. BC Laws is hosted by the Queen's Printer of British Columbia and published in partnership with the Ministry of Justice and the Law Clerk of the Legislative Assembly.BC Laws contains a comprehensive collection of BC legislation and related materials. It is available on the internet in two forms:First: The library is available as a web site in which users can browse and search the laws of British Columbia.Second: The library is available as a portal to legislation in raw XML data format, accessible via the BC Laws API2. This direct access to raw data is intended to enable third parties to build or add their own custom applications based on the structure of the data and all the associated search functionality inherent in that structure. The BC Laws website itself is an example of one such application.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Document service.
* @module api/DocumentApi
* @version 1.0.0
*/
export default class DocumentApi {

    /**
    * Constructs a new DocumentApi. 
    * @alias module:api/DocumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the documentIdAspectIdCivixIndexIdCivixDocumentIdGet operation.
     * @callback module:api/DocumentApi~documentIdAspectIdCivixIndexIdCivixDocumentIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific document from the BCLaws legislative repository (HTML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param {module:model/String} aspectId The identifier of the 'aspect' (content group) to search
     * @param {String} civixIndexId Index identification code
     * @param {String} civixDocumentId The document identification code for an index or directory
     * @param {module:api/DocumentApi~documentIdAspectIdCivixIndexIdCivixDocumentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentIdAspectIdCivixIndexIdCivixDocumentIdGet(aspectId, civixIndexId, civixDocumentId, callback) {
      let postBody = null;
      // verify the required parameter 'aspectId' is set
      if (aspectId === undefined || aspectId === null) {
        throw new Error("Missing the required parameter 'aspectId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdGet");
      }
      // verify the required parameter 'civixIndexId' is set
      if (civixIndexId === undefined || civixIndexId === null) {
        throw new Error("Missing the required parameter 'civixIndexId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdGet");
      }
      // verify the required parameter 'civixDocumentId' is set
      if (civixDocumentId === undefined || civixDocumentId === null) {
        throw new Error("Missing the required parameter 'civixDocumentId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdGet");
      }

      let pathParams = {
        'aspectId': aspectId,
        'civixIndexId': civixIndexId,
        'civixDocumentId': civixDocumentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet operation.
     * @callback module:api/DocumentApi~documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific document from the BCLaws legislative repository with search text highlighted (HTML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param {module:model/String} aspectId The identifier of the 'aspect' (content group) to search
     * @param {String} civixIndexId Index identification code
     * @param {String} civixDocumentId The document identification code for an index or directory
     * @param {String} searchString The text to search for within the document
     * @param {module:api/DocumentApi~documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet(aspectId, civixIndexId, civixDocumentId, searchString, callback) {
      let postBody = null;
      // verify the required parameter 'aspectId' is set
      if (aspectId === undefined || aspectId === null) {
        throw new Error("Missing the required parameter 'aspectId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet");
      }
      // verify the required parameter 'civixIndexId' is set
      if (civixIndexId === undefined || civixIndexId === null) {
        throw new Error("Missing the required parameter 'civixIndexId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet");
      }
      // verify the required parameter 'civixDocumentId' is set
      if (civixDocumentId === undefined || civixDocumentId === null) {
        throw new Error("Missing the required parameter 'civixDocumentId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet");
      }
      // verify the required parameter 'searchString' is set
      if (searchString === undefined || searchString === null) {
        throw new Error("Missing the required parameter 'searchString' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet");
      }

      let pathParams = {
        'aspectId': aspectId,
        'civixIndexId': civixIndexId,
        'civixDocumentId': civixDocumentId,
        'searchString': searchString
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/search/{searchString}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet operation.
     * @callback module:api/DocumentApi~documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific document from the BCLaws legislative repository (XML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param {module:model/String} aspectId The identifier of the 'aspect' (content group) to search
     * @param {String} civixIndexId Index identification code
     * @param {String} civixDocumentId The document identification code for an index or directory
     * @param {module:api/DocumentApi~documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet(aspectId, civixIndexId, civixDocumentId, callback) {
      let postBody = null;
      // verify the required parameter 'aspectId' is set
      if (aspectId === undefined || aspectId === null) {
        throw new Error("Missing the required parameter 'aspectId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet");
      }
      // verify the required parameter 'civixIndexId' is set
      if (civixIndexId === undefined || civixIndexId === null) {
        throw new Error("Missing the required parameter 'civixIndexId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet");
      }
      // verify the required parameter 'civixDocumentId' is set
      if (civixDocumentId === undefined || civixDocumentId === null) {
        throw new Error("Missing the required parameter 'civixDocumentId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet");
      }

      let pathParams = {
        'aspectId': aspectId,
        'civixIndexId': civixIndexId,
        'civixDocumentId': civixDocumentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet operation.
     * @callback module:api/DocumentApi~documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific document from the BCLaws legislative repository with search text highlighted (XML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param {module:model/String} aspectId The identifier of the 'aspect' (content group) to search
     * @param {String} civixIndexId Index identification code
     * @param {String} civixDocumentId The document identification code for an index or directory
     * @param {String} searchString The text to search for within the document
     * @param {module:api/DocumentApi~documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet(aspectId, civixIndexId, civixDocumentId, searchString, callback) {
      let postBody = null;
      // verify the required parameter 'aspectId' is set
      if (aspectId === undefined || aspectId === null) {
        throw new Error("Missing the required parameter 'aspectId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet");
      }
      // verify the required parameter 'civixIndexId' is set
      if (civixIndexId === undefined || civixIndexId === null) {
        throw new Error("Missing the required parameter 'civixIndexId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet");
      }
      // verify the required parameter 'civixDocumentId' is set
      if (civixDocumentId === undefined || civixDocumentId === null) {
        throw new Error("Missing the required parameter 'civixDocumentId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet");
      }
      // verify the required parameter 'searchString' is set
      if (searchString === undefined || searchString === null) {
        throw new Error("Missing the required parameter 'searchString' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet");
      }

      let pathParams = {
        'aspectId': aspectId,
        'civixIndexId': civixIndexId,
        'civixDocumentId': civixDocumentId,
        'searchString': searchString
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/xml/search/{searchString}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
