/*
 * BC Laws
 * BC Laws is an electronic library providing free public access to the laws of British Columbia. BC Laws is hosted by the Queen's Printer of British Columbia and published in partnership with the Ministry of Justice and the Law Clerk of the Legislative Assembly.BC Laws contains a comprehensive collection of BC legislation and related materials. It is available on the internet in two forms:First: The library is available as a web site in which users can browse and search the laws of British Columbia.Second: The library is available as a portal to legislation in raw XML data format, accessible via the BC Laws API2. This direct access to raw data is intended to enable third parties to build or add their own custom applications based on the structure of the data and all the associated search functionality inherent in that structure. The BC Laws website itself is an example of one such application.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchAspectIdFullsearchGet
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param q query term (required)
     * @param s first hit (start index) (required)
     * @param e last hit (end index) (required)
     * @param nFrag number of fragment snippets to return (&lt; 10) (required)
     * @param lFrag length of fragment snippets (&lt; 200) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of metadata available for the specified aspect and search term </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAspectIdFullsearchGetCall(String aspectId, String q, String s, Integer e, Integer nFrag, Integer lFrag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{aspectId}/fullsearch"
            .replace("{" + "aspectId" + "}", localVarApiClient.escapeString(aspectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (s != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("s", s));
        }

        if (e != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("e", e));
        }

        if (nFrag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nFrag", nFrag));
        }

        if (lFrag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lFrag", lFrag));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAspectIdFullsearchGetValidateBeforeCall(String aspectId, String q, String s, Integer e, Integer nFrag, Integer lFrag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aspectId' is set
        if (aspectId == null) {
            throw new ApiException("Missing the required parameter 'aspectId' when calling searchAspectIdFullsearchGet(Async)");
        }

        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchAspectIdFullsearchGet(Async)");
        }

        // verify the required parameter 's' is set
        if (s == null) {
            throw new ApiException("Missing the required parameter 's' when calling searchAspectIdFullsearchGet(Async)");
        }

        // verify the required parameter 'e' is set
        if (e == null) {
            throw new ApiException("Missing the required parameter 'e' when calling searchAspectIdFullsearchGet(Async)");
        }

        // verify the required parameter 'nFrag' is set
        if (nFrag == null) {
            throw new ApiException("Missing the required parameter 'nFrag' when calling searchAspectIdFullsearchGet(Async)");
        }

        // verify the required parameter 'lFrag' is set
        if (lFrag == null) {
            throw new ApiException("Missing the required parameter 'lFrag' when calling searchAspectIdFullsearchGet(Async)");
        }

        return searchAspectIdFullsearchGetCall(aspectId, q, s, e, nFrag, lFrag, _callback);

    }

    /**
     * A listing of metadata available for the specified aspect and search term from the BCLaws legislative repository
     * 
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param q query term (required)
     * @param s first hit (start index) (required)
     * @param e last hit (end index) (required)
     * @param nFrag number of fragment snippets to return (&lt; 10) (required)
     * @param lFrag length of fragment snippets (&lt; 200) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of metadata available for the specified aspect and search term </td><td>  -  </td></tr>
     </table>
     */
    public void searchAspectIdFullsearchGet(String aspectId, String q, String s, Integer e, Integer nFrag, Integer lFrag) throws ApiException {
        searchAspectIdFullsearchGetWithHttpInfo(aspectId, q, s, e, nFrag, lFrag);
    }

    /**
     * A listing of metadata available for the specified aspect and search term from the BCLaws legislative repository
     * 
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param q query term (required)
     * @param s first hit (start index) (required)
     * @param e last hit (end index) (required)
     * @param nFrag number of fragment snippets to return (&lt; 10) (required)
     * @param lFrag length of fragment snippets (&lt; 200) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of metadata available for the specified aspect and search term </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchAspectIdFullsearchGetWithHttpInfo(String aspectId, String q, String s, Integer e, Integer nFrag, Integer lFrag) throws ApiException {
        okhttp3.Call localVarCall = searchAspectIdFullsearchGetValidateBeforeCall(aspectId, q, s, e, nFrag, lFrag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * A listing of metadata available for the specified aspect and search term from the BCLaws legislative repository (asynchronously)
     * 
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param q query term (required)
     * @param s first hit (start index) (required)
     * @param e last hit (end index) (required)
     * @param nFrag number of fragment snippets to return (&lt; 10) (required)
     * @param lFrag length of fragment snippets (&lt; 200) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of metadata available for the specified aspect and search term </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAspectIdFullsearchGetAsync(String aspectId, String q, String s, Integer e, Integer nFrag, Integer lFrag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAspectIdFullsearchGetValidateBeforeCall(aspectId, q, s, e, nFrag, lFrag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
