/*
 * BC Laws
 * BC Laws is an electronic library providing free public access to the laws of British Columbia. BC Laws is hosted by the Queen's Printer of British Columbia and published in partnership with the Ministry of Justice and the Law Clerk of the Legislative Assembly.BC Laws contains a comprehensive collection of BC legislation and related materials. It is available on the internet in two forms:First: The library is available as a web site in which users can browse and search the laws of British Columbia.Second: The library is available as a portal to legislation in raw XML data format, accessible via the BC Laws API2. This direct access to raw data is intended to enable third parties to build or add their own custom applications based on the structure of the data and all the associated search functionality inherent in that structure. The BC Laws website itself is an example of one such application.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for documentIdAspectIdCivixIndexIdCivixDocumentIdGet
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdGetCall(String aspectId, String civixIndexId, String civixDocumentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}"
            .replace("{" + "aspectId" + "}", localVarApiClient.escapeString(aspectId.toString()))
            .replace("{" + "civixIndexId" + "}", localVarApiClient.escapeString(civixIndexId.toString()))
            .replace("{" + "civixDocumentId" + "}", localVarApiClient.escapeString(civixDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdGetValidateBeforeCall(String aspectId, String civixIndexId, String civixDocumentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aspectId' is set
        if (aspectId == null) {
            throw new ApiException("Missing the required parameter 'aspectId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdGet(Async)");
        }

        // verify the required parameter 'civixIndexId' is set
        if (civixIndexId == null) {
            throw new ApiException("Missing the required parameter 'civixIndexId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdGet(Async)");
        }

        // verify the required parameter 'civixDocumentId' is set
        if (civixDocumentId == null) {
            throw new ApiException("Missing the required parameter 'civixDocumentId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdGet(Async)");
        }

        return documentIdAspectIdCivixIndexIdCivixDocumentIdGetCall(aspectId, civixIndexId, civixDocumentId, _callback);

    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository (HTML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public void documentIdAspectIdCivixIndexIdCivixDocumentIdGet(String aspectId, String civixIndexId, String civixDocumentId) throws ApiException {
        documentIdAspectIdCivixIndexIdCivixDocumentIdGetWithHttpInfo(aspectId, civixIndexId, civixDocumentId);
    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository (HTML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentIdAspectIdCivixIndexIdCivixDocumentIdGetWithHttpInfo(String aspectId, String civixIndexId, String civixDocumentId) throws ApiException {
        okhttp3.Call localVarCall = documentIdAspectIdCivixIndexIdCivixDocumentIdGetValidateBeforeCall(aspectId, civixIndexId, civixDocumentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository (HTML format) (asynchronously)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdGetAsync(String aspectId, String civixIndexId, String civixDocumentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentIdAspectIdCivixIndexIdCivixDocumentIdGetValidateBeforeCall(aspectId, civixIndexId, civixDocumentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param searchString The text to search for within the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetCall(String aspectId, String civixIndexId, String civixDocumentId, String searchString, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/search/{searchString}"
            .replace("{" + "aspectId" + "}", localVarApiClient.escapeString(aspectId.toString()))
            .replace("{" + "civixIndexId" + "}", localVarApiClient.escapeString(civixIndexId.toString()))
            .replace("{" + "civixDocumentId" + "}", localVarApiClient.escapeString(civixDocumentId.toString()))
            .replace("{" + "searchString" + "}", localVarApiClient.escapeString(searchString.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetValidateBeforeCall(String aspectId, String civixIndexId, String civixDocumentId, String searchString, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aspectId' is set
        if (aspectId == null) {
            throw new ApiException("Missing the required parameter 'aspectId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet(Async)");
        }

        // verify the required parameter 'civixIndexId' is set
        if (civixIndexId == null) {
            throw new ApiException("Missing the required parameter 'civixIndexId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet(Async)");
        }

        // verify the required parameter 'civixDocumentId' is set
        if (civixDocumentId == null) {
            throw new ApiException("Missing the required parameter 'civixDocumentId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet(Async)");
        }

        // verify the required parameter 'searchString' is set
        if (searchString == null) {
            throw new ApiException("Missing the required parameter 'searchString' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet(Async)");
        }

        return documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetCall(aspectId, civixIndexId, civixDocumentId, searchString, _callback);

    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository with search text highlighted (HTML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param searchString The text to search for within the document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public void documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGet(String aspectId, String civixIndexId, String civixDocumentId, String searchString) throws ApiException {
        documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetWithHttpInfo(aspectId, civixIndexId, civixDocumentId, searchString);
    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository with search text highlighted (HTML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param searchString The text to search for within the document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetWithHttpInfo(String aspectId, String civixIndexId, String civixDocumentId, String searchString) throws ApiException {
        okhttp3.Call localVarCall = documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetValidateBeforeCall(aspectId, civixIndexId, civixDocumentId, searchString, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository with search text highlighted (HTML format) (asynchronously)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param searchString The text to search for within the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetAsync(String aspectId, String civixIndexId, String civixDocumentId, String searchString, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentIdAspectIdCivixIndexIdCivixDocumentIdSearchSearchStringGetValidateBeforeCall(aspectId, civixIndexId, civixDocumentId, searchString, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetCall(String aspectId, String civixIndexId, String civixDocumentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/xml"
            .replace("{" + "aspectId" + "}", localVarApiClient.escapeString(aspectId.toString()))
            .replace("{" + "civixIndexId" + "}", localVarApiClient.escapeString(civixIndexId.toString()))
            .replace("{" + "civixDocumentId" + "}", localVarApiClient.escapeString(civixDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetValidateBeforeCall(String aspectId, String civixIndexId, String civixDocumentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aspectId' is set
        if (aspectId == null) {
            throw new ApiException("Missing the required parameter 'aspectId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet(Async)");
        }

        // verify the required parameter 'civixIndexId' is set
        if (civixIndexId == null) {
            throw new ApiException("Missing the required parameter 'civixIndexId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet(Async)");
        }

        // verify the required parameter 'civixDocumentId' is set
        if (civixDocumentId == null) {
            throw new ApiException("Missing the required parameter 'civixDocumentId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet(Async)");
        }

        return documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetCall(aspectId, civixIndexId, civixDocumentId, _callback);

    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository (XML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGet(String aspectId, String civixIndexId, String civixDocumentId) throws ApiException {
        documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetWithHttpInfo(aspectId, civixIndexId, civixDocumentId);
    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository (XML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetWithHttpInfo(String aspectId, String civixIndexId, String civixDocumentId) throws ApiException {
        okhttp3.Call localVarCall = documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetValidateBeforeCall(aspectId, civixIndexId, civixDocumentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository (XML format) (asynchronously)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetAsync(String aspectId, String civixIndexId, String civixDocumentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentIdAspectIdCivixIndexIdCivixDocumentIdXmlGetValidateBeforeCall(aspectId, civixIndexId, civixDocumentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param searchString The text to search for within the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetCall(String aspectId, String civixIndexId, String civixDocumentId, String searchString, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/xml/search/{searchString}"
            .replace("{" + "aspectId" + "}", localVarApiClient.escapeString(aspectId.toString()))
            .replace("{" + "civixIndexId" + "}", localVarApiClient.escapeString(civixIndexId.toString()))
            .replace("{" + "civixDocumentId" + "}", localVarApiClient.escapeString(civixDocumentId.toString()))
            .replace("{" + "searchString" + "}", localVarApiClient.escapeString(searchString.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetValidateBeforeCall(String aspectId, String civixIndexId, String civixDocumentId, String searchString, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aspectId' is set
        if (aspectId == null) {
            throw new ApiException("Missing the required parameter 'aspectId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet(Async)");
        }

        // verify the required parameter 'civixIndexId' is set
        if (civixIndexId == null) {
            throw new ApiException("Missing the required parameter 'civixIndexId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet(Async)");
        }

        // verify the required parameter 'civixDocumentId' is set
        if (civixDocumentId == null) {
            throw new ApiException("Missing the required parameter 'civixDocumentId' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet(Async)");
        }

        // verify the required parameter 'searchString' is set
        if (searchString == null) {
            throw new ApiException("Missing the required parameter 'searchString' when calling documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet(Async)");
        }

        return documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetCall(aspectId, civixIndexId, civixDocumentId, searchString, _callback);

    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository with search text highlighted (XML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param searchString The text to search for within the document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public void documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGet(String aspectId, String civixIndexId, String civixDocumentId, String searchString) throws ApiException {
        documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetWithHttpInfo(aspectId, civixIndexId, civixDocumentId, searchString);
    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository with search text highlighted (XML format)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param searchString The text to search for within the document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetWithHttpInfo(String aspectId, String civixIndexId, String civixDocumentId, String searchString) throws ApiException {
        okhttp3.Call localVarCall = documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetValidateBeforeCall(aspectId, civixIndexId, civixDocumentId, searchString, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieves a specific document from the BCLaws legislative repository with search text highlighted (XML format) (asynchronously)
     * The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
     * @param aspectId The identifier of the &#39;aspect&#39; (content group) to search (required)
     * @param civixIndexId Index identification code (required)
     * @param civixDocumentId The document identification code for an index or directory (required)
     * @param searchString The text to search for within the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List documents and directories within the aspect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetAsync(String aspectId, String civixIndexId, String civixDocumentId, String searchString, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentIdAspectIdCivixIndexIdCivixDocumentIdXmlSearchSearchStringGetValidateBeforeCall(aspectId, civixIndexId, civixDocumentId, searchString, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
