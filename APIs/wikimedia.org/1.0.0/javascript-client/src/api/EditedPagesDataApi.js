/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EditedPages from '../model/EditedPages';
import NewPages from '../model/NewPages';
import Problem from '../model/Problem';
import TopEditedPagesByAbsBytesDiff from '../model/TopEditedPagesByAbsBytesDiff';
import TopEditedPagesByEdits from '../model/TopEditedPagesByEdits';
import TopEditedPagesByNetBytesDiff from '../model/TopEditedPagesByNetBytesDiff';

/**
* EditedPagesData service.
* @module api/EditedPagesDataApi
* @version 1.0.0
*/
export default class EditedPagesDataApi {

    /**
    * Constructs a new EditedPagesDataApi. 
    * @alias module:api/EditedPagesDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet operation.
     * @callback module:api/EditedPagesDataApi~metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditedPages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get edited-pages counts for a project.
     * Given a Mediawiki project and a date range, returns a timeseries of its edited-pages counts. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user), page-type (all-page-types, content or non-content) or activity-level (1..4-edits, 5..24-edits, 25..99-edits, 100..-edits). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
     * @param {module:model/String} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
     * @param {module:model/String} pageType If you want to filter by page-type, use one of content (edited-pages in content namespaces) or non-content (edited-pages in non-content namespaces). If you are interested in edited-pages regardless of their page-type, use all-page-types. 
     * @param {module:model/String} activityLevel If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits, 25..99-edits or 100..-edits. If you are interested in edited-pages regardless of their activity level, use all-activity-levels. 
     * @param {module:model/String} granularity The time unit for the response data. As of today, supported values are daily and monthly. 
     * @param {String} start The date of the first day to include, in YYYYMMDD format
     * @param {String} end The date of the last day to include, in YYYYMMDD format
     * @param {module:api/EditedPagesDataApi~metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditedPages}
     */
    metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet(project, editorType, pageType, activityLevel, granularity, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet");
      }
      // verify the required parameter 'editorType' is set
      if (editorType === undefined || editorType === null) {
        throw new Error("Missing the required parameter 'editorType' when calling metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet");
      }
      // verify the required parameter 'pageType' is set
      if (pageType === undefined || pageType === null) {
        throw new Error("Missing the required parameter 'pageType' when calling metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet");
      }
      // verify the required parameter 'activityLevel' is set
      if (activityLevel === undefined || activityLevel === null) {
        throw new Error("Missing the required parameter 'activityLevel' when calling metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet");
      }

      let pathParams = {
        'project': project,
        'editor-type': editorType,
        'page-type': pageType,
        'activity-level': activityLevel,
        'granularity': granularity,
        'start': start,
        'end': end
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = EditedPages;
      return this.apiClient.callApi(
        '/metrics/edited-pages/aggregate/{project}/{editor-type}/{page-type}/{activity-level}/{granularity}/{start}/{end}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGet operation.
     * @callback module:api/EditedPagesDataApi~metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewPages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get new pages counts for a project.
     * Given a Mediawiki project and a date range, returns a timeseries of its new pages counts. You can filter by editor type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you're interested in the aggregation of all projects, use all-projects. 
     * @param {module:model/String} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
     * @param {module:model/String} pageType If you want to filter by page-type, use one of content (new pages in content namespaces) or non-content (new pages in non-content namespaces). If you are interested in new-articles regardless of their page-type, use all-page-types. 
     * @param {module:model/String} granularity The time unit for the response data. As of today, supported values are daily and monthly. 
     * @param {String} start The date of the first day to include, in YYYYMMDD format
     * @param {String} end The date of the last day to include, in YYYYMMDD format
     * @param {module:api/EditedPagesDataApi~metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewPages}
     */
    metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGet(project, editorType, pageType, granularity, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'editorType' is set
      if (editorType === undefined || editorType === null) {
        throw new Error("Missing the required parameter 'editorType' when calling metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'pageType' is set
      if (pageType === undefined || pageType === null) {
        throw new Error("Missing the required parameter 'pageType' when calling metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGet");
      }

      let pathParams = {
        'project': project,
        'editor-type': editorType,
        'page-type': pageType,
        'granularity': granularity,
        'start': start,
        'end': end
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = NewPages;
      return this.apiClient.callApi(
        '/metrics/edited-pages/new/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet operation.
     * @callback module:api/EditedPagesDataApi~metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopEditedPagesByAbsBytesDiff} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get top 100 edited-pages by absolute bytes-difference.
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by absolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
     * @param {module:model/String} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
     * @param {module:model/String} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
     * @param {String} year The year of the date for which to retrieve top edited-pages, in YYYY format.
     * @param {String} month The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
     * @param {String} day The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
     * @param {module:api/EditedPagesDataApi~metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopEditedPagesByAbsBytesDiff}
     */
    metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet(project, editorType, pageType, year, month, day, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'editorType' is set
      if (editorType === undefined || editorType === null) {
        throw new Error("Missing the required parameter 'editorType' when calling metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'pageType' is set
      if (pageType === undefined || pageType === null) {
        throw new Error("Missing the required parameter 'pageType' when calling metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }

      let pathParams = {
        'project': project,
        'editor-type': editorType,
        'page-type': pageType,
        'year': year,
        'month': month,
        'day': day
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = TopEditedPagesByAbsBytesDiff;
      return this.apiClient.callApi(
        '/metrics/edited-pages/top-by-absolute-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGet operation.
     * @callback module:api/EditedPagesDataApi~metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopEditedPagesByEdits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get top 100 edited-pages by edits count.
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by edits count. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
     * @param {module:model/String} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
     * @param {module:model/String} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
     * @param {String} year The year of the date for which to retrieve top edited-pages, in YYYY format.
     * @param {String} month The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
     * @param {String} day The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
     * @param {module:api/EditedPagesDataApi~metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopEditedPagesByEdits}
     */
    metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGet(project, editorType, pageType, year, month, day, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'editorType' is set
      if (editorType === undefined || editorType === null) {
        throw new Error("Missing the required parameter 'editorType' when calling metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'pageType' is set
      if (pageType === undefined || pageType === null) {
        throw new Error("Missing the required parameter 'pageType' when calling metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGet");
      }

      let pathParams = {
        'project': project,
        'editor-type': editorType,
        'page-type': pageType,
        'year': year,
        'month': month,
        'day': day
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = TopEditedPagesByEdits;
      return this.apiClient.callApi(
        '/metrics/edited-pages/top-by-edits/{project}/{editor-type}/{page-type}/{year}/{month}/{day}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet operation.
     * @callback module:api/EditedPagesDataApi~metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopEditedPagesByNetBytesDiff} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get top 100 edited-pages by net bytes-difference.
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
     * @param {module:model/String} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
     * @param {module:model/String} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
     * @param {String} year The year of the date for which to retrieve top edited-pages, in YYYY format.
     * @param {String} month The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
     * @param {String} day The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
     * @param {module:api/EditedPagesDataApi~metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopEditedPagesByNetBytesDiff}
     */
    metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet(project, editorType, pageType, year, month, day, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'editorType' is set
      if (editorType === undefined || editorType === null) {
        throw new Error("Missing the required parameter 'editorType' when calling metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'pageType' is set
      if (pageType === undefined || pageType === null) {
        throw new Error("Missing the required parameter 'pageType' when calling metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet");
      }

      let pathParams = {
        'project': project,
        'editor-type': editorType,
        'page-type': pageType,
        'year': year,
        'month': month,
        'day': day
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = TopEditedPagesByNetBytesDiff;
      return this.apiClient.callApi(
        '/metrics/edited-pages/top-by-net-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
