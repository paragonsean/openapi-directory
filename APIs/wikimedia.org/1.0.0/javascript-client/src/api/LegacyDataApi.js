/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PagecountsProject from '../model/PagecountsProject';
import Problem from '../model/Problem';

/**
* LegacyData service.
* @module api/LegacyDataApi
* @version 1.0.0
*/
export default class LegacyDataApi {

    /**
    * Constructs a new LegacyDataApi. 
    * @alias module:api/LegacyDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the metricsLegacyPagecountsAggregateProjectAccessSiteGranularityStartEndGet operation.
     * @callback module:api/LegacyDataApi~metricsLegacyPagecountsAggregateProjectAccessSiteGranularityStartEndGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagecountsProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a project and a date range, returns a timeseries of pagecounts. You can filter by access site (mobile or desktop) and you can choose between monthly, daily and hourly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. 
     * @param {module:model/String} accessSite If you want to filter by access site, use one of desktop-site or mobile-site. If you are interested in pagecounts regardless of access site use all-sites.
     * @param {module:model/String} granularity The time unit for the response data. As of today, the supported granularities for this endpoint are hourly, daily and monthly. 
     * @param {String} start The timestamp of the first hour/day/month to include, in YYYYMMDDHH format.
     * @param {String} end The timestamp of the last hour/day/month to include, in YYYYMMDDHH format. In hourly and daily granularities this value is inclusive, in the monthly granularity this value is exclusive. 
     * @param {module:api/LegacyDataApi~metricsLegacyPagecountsAggregateProjectAccessSiteGranularityStartEndGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagecountsProject}
     */
    metricsLegacyPagecountsAggregateProjectAccessSiteGranularityStartEndGet(project, accessSite, granularity, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsLegacyPagecountsAggregateProjectAccessSiteGranularityStartEndGet");
      }
      // verify the required parameter 'accessSite' is set
      if (accessSite === undefined || accessSite === null) {
        throw new Error("Missing the required parameter 'accessSite' when calling metricsLegacyPagecountsAggregateProjectAccessSiteGranularityStartEndGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling metricsLegacyPagecountsAggregateProjectAccessSiteGranularityStartEndGet");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metricsLegacyPagecountsAggregateProjectAccessSiteGranularityStartEndGet");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling metricsLegacyPagecountsAggregateProjectAccessSiteGranularityStartEndGet");
      }

      let pathParams = {
        'project': project,
        'access-site': accessSite,
        'granularity': granularity,
        'start': start,
        'end': end
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = PagecountsProject;
      return this.apiClient.callApi(
        '/metrics/legacy/pagecounts/aggregate/{project}/{access-site}/{granularity}/{start}/{end}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
