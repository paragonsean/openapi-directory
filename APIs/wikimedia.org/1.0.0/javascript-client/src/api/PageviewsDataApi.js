/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ByCountry from '../model/ByCountry';
import PageviewArticle from '../model/PageviewArticle';
import PageviewProject from '../model/PageviewProject';
import PageviewTops from '../model/PageviewTops';
import Problem from '../model/Problem';

/**
* PageviewsData service.
* @module api/PageviewsDataApi
* @version 1.0.0
*/
export default class PageviewsDataApi {

    /**
    * Constructs a new PageviewsDataApi. 
    * @alias module:api/PageviewsDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the metricsPageviewsAggregateProjectAccessAgentGranularityStartEndGet operation.
     * @callback module:api/PageviewsDataApi~metricsPageviewsAggregateProjectAccessAgentGranularityStartEndGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageviewProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pageview counts for a project.
     * Given a date range, returns a timeseries of pageview counts. You can filter by project, access method and/or agent type. You can choose between daily and hourly granularity as well.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project If you want to filter by project, use the domain of any Wikimedia project, for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'. If you are interested in all pageviews regardless of project, use all-projects. 
     * @param {module:model/String} access If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
     * @param {module:model/String} agent If you want to filter by agent type, use one of user or spider. If you are interested in pageviews regardless of agent type, use all-agents. 
     * @param {module:model/String} granularity The time unit for the response data. As of today, the supported granularities for this endpoint are hourly, daily, and monthly. 
     * @param {String} start The timestamp of the first hour/day/month to include, in YYYYMMDDHH format
     * @param {String} end The timestamp of the last hour/day/month to include, in YYYYMMDDHH format
     * @param {module:api/PageviewsDataApi~metricsPageviewsAggregateProjectAccessAgentGranularityStartEndGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageviewProject}
     */
    metricsPageviewsAggregateProjectAccessAgentGranularityStartEndGet(project, access, agent, granularity, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsPageviewsAggregateProjectAccessAgentGranularityStartEndGet");
      }
      // verify the required parameter 'access' is set
      if (access === undefined || access === null) {
        throw new Error("Missing the required parameter 'access' when calling metricsPageviewsAggregateProjectAccessAgentGranularityStartEndGet");
      }
      // verify the required parameter 'agent' is set
      if (agent === undefined || agent === null) {
        throw new Error("Missing the required parameter 'agent' when calling metricsPageviewsAggregateProjectAccessAgentGranularityStartEndGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling metricsPageviewsAggregateProjectAccessAgentGranularityStartEndGet");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metricsPageviewsAggregateProjectAccessAgentGranularityStartEndGet");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling metricsPageviewsAggregateProjectAccessAgentGranularityStartEndGet");
      }

      let pathParams = {
        'project': project,
        'access': access,
        'agent': agent,
        'granularity': granularity,
        'start': start,
        'end': end
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = PageviewProject;
      return this.apiClient.callApi(
        '/metrics/pageviews/aggregate/{project}/{access}/{agent}/{granularity}/{start}/{end}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsPageviewsPerArticleProjectAccessAgentArticleGranularityStartEndGet operation.
     * @callback module:api/PageviewsDataApi~metricsPageviewsPerArticleProjectAccessAgentArticleGranularityStartEndGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageviewArticle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pageview counts for a page.
     * Given a Mediawiki article and a date range, returns a daily timeseries of its pageview counts. You can also filter by access method and/or agent type.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project If you want to filter by project, use the domain of any Wikimedia project, for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'. 
     * @param {module:model/String} access If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
     * @param {module:model/String} agent If you want to filter by agent type, use one of user, bot or spider. If you are interested in pageviews regardless of agent type, use all-agents. 
     * @param {String} article 'The title of any article in the specified project. Any spaces should be replaced with underscores. It also should be URI-encoded, so that non-URI-safe characters like %, / or ? are accepted. Example: Are_You_the_One%3F'. 
     * @param {module:model/String} granularity The time unit for the response data. As of today, the only supported granularity for this endpoint is daily and monthly. 
     * @param {String} start The date of the first day to include, in YYYYMMDD or YYYYMMDDHH format
     * @param {String} end The date of the last day to include, in YYYYMMDD or YYYYMMDDHH format
     * @param {module:api/PageviewsDataApi~metricsPageviewsPerArticleProjectAccessAgentArticleGranularityStartEndGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageviewArticle}
     */
    metricsPageviewsPerArticleProjectAccessAgentArticleGranularityStartEndGet(project, access, agent, article, granularity, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsPageviewsPerArticleProjectAccessAgentArticleGranularityStartEndGet");
      }
      // verify the required parameter 'access' is set
      if (access === undefined || access === null) {
        throw new Error("Missing the required parameter 'access' when calling metricsPageviewsPerArticleProjectAccessAgentArticleGranularityStartEndGet");
      }
      // verify the required parameter 'agent' is set
      if (agent === undefined || agent === null) {
        throw new Error("Missing the required parameter 'agent' when calling metricsPageviewsPerArticleProjectAccessAgentArticleGranularityStartEndGet");
      }
      // verify the required parameter 'article' is set
      if (article === undefined || article === null) {
        throw new Error("Missing the required parameter 'article' when calling metricsPageviewsPerArticleProjectAccessAgentArticleGranularityStartEndGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling metricsPageviewsPerArticleProjectAccessAgentArticleGranularityStartEndGet");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metricsPageviewsPerArticleProjectAccessAgentArticleGranularityStartEndGet");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling metricsPageviewsPerArticleProjectAccessAgentArticleGranularityStartEndGet");
      }

      let pathParams = {
        'project': project,
        'access': access,
        'agent': agent,
        'article': article,
        'granularity': granularity,
        'start': start,
        'end': end
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = PageviewArticle;
      return this.apiClient.callApi(
        '/metrics/pageviews/per-article/{project}/{access}/{agent}/{article}/{granularity}/{start}/{end}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsPageviewsTopByCountryProjectAccessYearMonthGet operation.
     * @callback module:api/PageviewsDataApi~metricsPageviewsTopByCountryProjectAccessYearMonthGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ByCountry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pageviews by country and access method.
     * Lists the pageviews to this project, split by country of origin for a given month. Because of privacy reasons, pageviews are given in a bucketed format, and countries with less than 100 views do not get reported. Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project If you want to filter by project, use the domain of any Wikimedia project, for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'. 
     * @param {module:model/String} access If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
     * @param {String} year The year of the date for which to retrieve top countries, in YYYY format.
     * @param {String} month The month of the date for which to retrieve top countries, in MM format. 
     * @param {module:api/PageviewsDataApi~metricsPageviewsTopByCountryProjectAccessYearMonthGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ByCountry}
     */
    metricsPageviewsTopByCountryProjectAccessYearMonthGet(project, access, year, month, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsPageviewsTopByCountryProjectAccessYearMonthGet");
      }
      // verify the required parameter 'access' is set
      if (access === undefined || access === null) {
        throw new Error("Missing the required parameter 'access' when calling metricsPageviewsTopByCountryProjectAccessYearMonthGet");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling metricsPageviewsTopByCountryProjectAccessYearMonthGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling metricsPageviewsTopByCountryProjectAccessYearMonthGet");
      }

      let pathParams = {
        'project': project,
        'access': access,
        'year': year,
        'month': month
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ByCountry;
      return this.apiClient.callApi(
        '/metrics/pageviews/top-by-country/{project}/{access}/{year}/{month}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsPageviewsTopProjectAccessYearMonthDayGet operation.
     * @callback module:api/PageviewsDataApi~metricsPageviewsTopProjectAccessYearMonthDayGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageviewTops} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the most viewed articles for a project.
     * Lists the 1000 most viewed articles for a given project and timespan (month or day). You can filter by access method.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project If you want to filter by project, use the domain of any Wikimedia project, for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'. 
     * @param {module:model/String} access If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
     * @param {String} year The year of the date for which to retrieve top articles, in YYYY format.
     * @param {String} month The month of the date for which to retrieve top articles, in MM format. If you want to get the top articles of a whole month, the day parameter should be all-days. 
     * @param {String} day The day of the date for which to retrieve top articles, in DD format.
     * @param {module:api/PageviewsDataApi~metricsPageviewsTopProjectAccessYearMonthDayGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageviewTops}
     */
    metricsPageviewsTopProjectAccessYearMonthDayGet(project, access, year, month, day, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsPageviewsTopProjectAccessYearMonthDayGet");
      }
      // verify the required parameter 'access' is set
      if (access === undefined || access === null) {
        throw new Error("Missing the required parameter 'access' when calling metricsPageviewsTopProjectAccessYearMonthDayGet");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling metricsPageviewsTopProjectAccessYearMonthDayGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling metricsPageviewsTopProjectAccessYearMonthDayGet");
      }
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling metricsPageviewsTopProjectAccessYearMonthDayGet");
      }

      let pathParams = {
        'project': project,
        'access': access,
        'year': year,
        'month': month,
        'day': day
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = PageviewTops;
      return this.apiClient.callApi(
        '/metrics/pageviews/top/{project}/{access}/{year}/{month}/{day}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
