/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NewRegisteredUsers from '../model/NewRegisteredUsers';
import Problem from '../model/Problem';

/**
* RegisteredUsersData service.
* @module api/RegisteredUsersDataApi
* @version 1.0.0
*/
export default class RegisteredUsersDataApi {

    /**
    * Constructs a new RegisteredUsersDataApi. 
    * @alias module:api/RegisteredUsersDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the metricsRegisteredUsersNewProjectGranularityStartEndGet operation.
     * @callback module:api/RegisteredUsersDataApi~metricsRegisteredUsersNewProjectGranularityStartEndGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewRegisteredUsers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get newly registered users counts for a project.
     * Given a Mediawiki project and a date range, returns a timeseries of its newly registered users counts. You can choose between daily and monthly granularity. The newly registered users value is computed with self-created users only, not auto-login created ones.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you're interested in the aggregation of all projects, use all. 
     * @param {module:model/String} granularity The time unit for the response data. As of today, supported values are daily and monthly. 
     * @param {String} start The date of the first day to include, in YYYYMMDD format
     * @param {String} end The date of the last day to include, in YYYYMMDD format
     * @param {module:api/RegisteredUsersDataApi~metricsRegisteredUsersNewProjectGranularityStartEndGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewRegisteredUsers}
     */
    metricsRegisteredUsersNewProjectGranularityStartEndGet(project, granularity, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsRegisteredUsersNewProjectGranularityStartEndGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling metricsRegisteredUsersNewProjectGranularityStartEndGet");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metricsRegisteredUsersNewProjectGranularityStartEndGet");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling metricsRegisteredUsersNewProjectGranularityStartEndGet");
      }

      let pathParams = {
        'project': project,
        'granularity': granularity,
        'start': start,
        'end': end
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = NewRegisteredUsers;
      return this.apiClient.callApi(
        '/metrics/registered-users/new/{project}/{granularity}/{start}/{end}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
