/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CxDict from '../model/CxDict';
import CxLanguagepairs from '../model/CxLanguagepairs';
import CxListTools from '../model/CxListTools';
import CxMt from '../model/CxMt';
import Problem from '../model/Problem';

/**
* Transform service.
* @module api/TransformApi
* @version 1.0.0
*/
export default class TransformApi {

    /**
    * Constructs a new TransformApi. 
    * @alias module:api/TransformApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the transformHtmlFromFromLangToToLangPost operation.
     * @callback module:api/TransformApi~transformHtmlFromFromLangToToLangPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CxMt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Machine-translate content
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param {String} fromLang The source language code
     * @param {String} toLang The target language code
     * @param {String} html The HTML content to translate
     * @param {module:api/TransformApi~transformHtmlFromFromLangToToLangPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CxMt}
     */
    transformHtmlFromFromLangToToLangPost(fromLang, toLang, html, callback) {
      let postBody = null;
      // verify the required parameter 'fromLang' is set
      if (fromLang === undefined || fromLang === null) {
        throw new Error("Missing the required parameter 'fromLang' when calling transformHtmlFromFromLangToToLangPost");
      }
      // verify the required parameter 'toLang' is set
      if (toLang === undefined || toLang === null) {
        throw new Error("Missing the required parameter 'toLang' when calling transformHtmlFromFromLangToToLangPost");
      }
      // verify the required parameter 'html' is set
      if (html === undefined || html === null) {
        throw new Error("Missing the required parameter 'html' when calling transformHtmlFromFromLangToToLangPost");
      }

      let pathParams = {
        'from_lang': fromLang,
        'to_lang': toLang
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'html': html
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = CxMt;
      return this.apiClient.callApi(
        '/transform/html/from/{from_lang}/to/{to_lang}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformHtmlFromFromLangToToLangProviderPost operation.
     * @callback module:api/TransformApi~transformHtmlFromFromLangToToLangProviderPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CxMt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Machine-translate content
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param {String} fromLang The source language code
     * @param {String} toLang The target language code
     * @param {module:model/String} provider The machine translation provider id
     * @param {String} html The HTML content to translate
     * @param {module:api/TransformApi~transformHtmlFromFromLangToToLangProviderPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CxMt}
     */
    transformHtmlFromFromLangToToLangProviderPost(fromLang, toLang, provider, html, callback) {
      let postBody = null;
      // verify the required parameter 'fromLang' is set
      if (fromLang === undefined || fromLang === null) {
        throw new Error("Missing the required parameter 'fromLang' when calling transformHtmlFromFromLangToToLangProviderPost");
      }
      // verify the required parameter 'toLang' is set
      if (toLang === undefined || toLang === null) {
        throw new Error("Missing the required parameter 'toLang' when calling transformHtmlFromFromLangToToLangProviderPost");
      }
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling transformHtmlFromFromLangToToLangProviderPost");
      }
      // verify the required parameter 'html' is set
      if (html === undefined || html === null) {
        throw new Error("Missing the required parameter 'html' when calling transformHtmlFromFromLangToToLangProviderPost");
      }

      let pathParams = {
        'from_lang': fromLang,
        'to_lang': toLang,
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'html': html
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = CxMt;
      return this.apiClient.callApi(
        '/transform/html/from/{from_lang}/to/{to_lang}/{provider}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformListLanguagepairsGet operation.
     * @callback module:api/TransformApi~transformListLanguagepairsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CxLanguagepairs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the language pairs supported by the back-end
     * Fetches the list of language pairs the back-end service can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param {module:api/TransformApi~transformListLanguagepairsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CxLanguagepairs}
     */
    transformListLanguagepairsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CxLanguagepairs;
      return this.apiClient.callApi(
        '/transform/list/languagepairs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformListPairFromToGet operation.
     * @callback module:api/TransformApi~transformListPairFromToGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CxListTools} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tools available for a language pair
     * Fetches the list of tools that are available for the given pair of languages.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param {String} from The source language code
     * @param {String} to The target language code
     * @param {module:api/TransformApi~transformListPairFromToGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CxListTools}
     */
    transformListPairFromToGet(from, to, callback) {
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling transformListPairFromToGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling transformListPairFromToGet");
      }

      let pathParams = {
        'from': from,
        'to': to
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = CxListTools;
      return this.apiClient.callApi(
        '/transform/list/pair/{from}/{to}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformListToolToolFromGet operation.
     * @callback module:api/TransformApi~transformListToolToolFromGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param {module:model/String} tool The tool category to list tools and language pairs for
     * @param {String} from The source language code
     * @param {module:api/TransformApi~transformListToolToolFromGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transformListToolToolFromGet(tool, from, callback) {
      let postBody = null;
      // verify the required parameter 'tool' is set
      if (tool === undefined || tool === null) {
        throw new Error("Missing the required parameter 'tool' when calling transformListToolToolFromGet");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling transformListToolToolFromGet");
      }

      let pathParams = {
        'tool': tool,
        'from': from
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/transform/list/tool/{tool}/{from}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformListToolToolFromToGet operation.
     * @callback module:api/TransformApi~transformListToolToolFromToGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param {module:model/String} tool The tool category to list tools and language pairs for
     * @param {String} from The source language code
     * @param {String} to The target language code
     * @param {module:api/TransformApi~transformListToolToolFromToGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transformListToolToolFromToGet(tool, from, to, callback) {
      let postBody = null;
      // verify the required parameter 'tool' is set
      if (tool === undefined || tool === null) {
        throw new Error("Missing the required parameter 'tool' when calling transformListToolToolFromToGet");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling transformListToolToolFromToGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling transformListToolToolFromToGet");
      }

      let pathParams = {
        'tool': tool,
        'from': from,
        'to': to
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/transform/list/tool/{tool}/{from}/{to}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformListToolToolGet operation.
     * @callback module:api/TransformApi~transformListToolToolGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param {module:model/String} tool The tool category to list tools and language pairs for
     * @param {module:api/TransformApi~transformListToolToolGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transformListToolToolGet(tool, callback) {
      let postBody = null;
      // verify the required parameter 'tool' is set
      if (tool === undefined || tool === null) {
        throw new Error("Missing the required parameter 'tool' when calling transformListToolToolGet");
      }

      let pathParams = {
        'tool': tool
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/transform/list/tool/{tool}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformWordFromFromLangToToLangWordGet operation.
     * @callback module:api/TransformApi~transformWordFromFromLangToToLangWordGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CxDict} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the dictionary meaning of a word
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param {String} fromLang The source language code
     * @param {String} toLang The target language code
     * @param {String} word The word to lookup
     * @param {module:api/TransformApi~transformWordFromFromLangToToLangWordGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CxDict}
     */
    transformWordFromFromLangToToLangWordGet(fromLang, toLang, word, callback) {
      let postBody = null;
      // verify the required parameter 'fromLang' is set
      if (fromLang === undefined || fromLang === null) {
        throw new Error("Missing the required parameter 'fromLang' when calling transformWordFromFromLangToToLangWordGet");
      }
      // verify the required parameter 'toLang' is set
      if (toLang === undefined || toLang === null) {
        throw new Error("Missing the required parameter 'toLang' when calling transformWordFromFromLangToToLangWordGet");
      }
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling transformWordFromFromLangToToLangWordGet");
      }

      let pathParams = {
        'from_lang': fromLang,
        'to_lang': toLang,
        'word': word
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = CxDict;
      return this.apiClient.callApi(
        '/transform/word/from/{from_lang}/to/{to_lang}/{word}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformWordFromFromLangToToLangWordProviderGet operation.
     * @callback module:api/TransformApi~transformWordFromFromLangToToLangWordProviderGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CxDict} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the dictionary meaning of a word
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param {String} fromLang The source language code
     * @param {String} toLang The target language code
     * @param {String} word The word to lookup
     * @param {module:model/String} provider The dictionary provider id
     * @param {module:api/TransformApi~transformWordFromFromLangToToLangWordProviderGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CxDict}
     */
    transformWordFromFromLangToToLangWordProviderGet(fromLang, toLang, word, provider, callback) {
      let postBody = null;
      // verify the required parameter 'fromLang' is set
      if (fromLang === undefined || fromLang === null) {
        throw new Error("Missing the required parameter 'fromLang' when calling transformWordFromFromLangToToLangWordProviderGet");
      }
      // verify the required parameter 'toLang' is set
      if (toLang === undefined || toLang === null) {
        throw new Error("Missing the required parameter 'toLang' when calling transformWordFromFromLangToToLangWordProviderGet");
      }
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling transformWordFromFromLangToToLangWordProviderGet");
      }
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling transformWordFromFromLangToToLangWordProviderGet");
      }

      let pathParams = {
        'from_lang': fromLang,
        'to_lang': toLang,
        'word': word,
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = CxDict;
      return this.apiClient.callApi(
        '/transform/word/from/{from_lang}/to/{to_lang}/{word}/{provider}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
