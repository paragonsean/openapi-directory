/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AbsoluteBytesDifference from '../model/AbsoluteBytesDifference';
import AbsoluteBytesDifferencePerPage from '../model/AbsoluteBytesDifferencePerPage';
import NetBytesDifference from '../model/NetBytesDifference';
import NetBytesDifferencePerPage from '../model/NetBytesDifferencePerPage';
import Problem from '../model/Problem';

/**
* BytesDifferenceData service.
* @module api/BytesDifferenceDataApi
* @version 1.0.0
*/
export default class BytesDifferenceDataApi {

    /**
    * Constructs a new BytesDifferenceDataApi. 
    * @alias module:api/BytesDifferenceDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the metricsBytesDifferenceAbsoluteAggregateProjectEditorTypePageTypeGranularityStartEndGet operation.
     * @callback module:api/BytesDifferenceDataApi~metricsBytesDifferenceAbsoluteAggregateProjectEditorTypePageTypeGranularityStartEndGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AbsoluteBytesDifference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sum of absolute value of text bytes difference between current edit and previous one. 
     * Given a Mediawiki project and a date range, returns a timeseries of absolute bytes difference sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user) and page-type (all-page-types, content, non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you're interested in the aggregation of all projects, use all-projects. 
     * @param {module:model/String} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
     * @param {module:model/String} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
     * @param {module:model/String} granularity Time unit for the response data. As of today, supported values are daily and monthly 
     * @param {String} start The date of the first day to include, in YYYYMMDD format
     * @param {String} end The date of the last day to include, in YYYYMMDD format
     * @param {module:api/BytesDifferenceDataApi~metricsBytesDifferenceAbsoluteAggregateProjectEditorTypePageTypeGranularityStartEndGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AbsoluteBytesDifference}
     */
    metricsBytesDifferenceAbsoluteAggregateProjectEditorTypePageTypeGranularityStartEndGet(project, editorType, pageType, granularity, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsBytesDifferenceAbsoluteAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'editorType' is set
      if (editorType === undefined || editorType === null) {
        throw new Error("Missing the required parameter 'editorType' when calling metricsBytesDifferenceAbsoluteAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'pageType' is set
      if (pageType === undefined || pageType === null) {
        throw new Error("Missing the required parameter 'pageType' when calling metricsBytesDifferenceAbsoluteAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling metricsBytesDifferenceAbsoluteAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metricsBytesDifferenceAbsoluteAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling metricsBytesDifferenceAbsoluteAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }

      let pathParams = {
        'project': project,
        'editor-type': editorType,
        'page-type': pageType,
        'granularity': granularity,
        'start': start,
        'end': end
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = AbsoluteBytesDifference;
      return this.apiClient.callApi(
        '/metrics/bytes-difference/absolute/aggregate/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsBytesDifferenceAbsolutePerPageProjectPageTitleEditorTypeGranularityStartEndGet operation.
     * @callback module:api/BytesDifferenceDataApi~metricsBytesDifferenceAbsolutePerPageProjectPageTitleEditorTypeGranularityStartEndGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AbsoluteBytesDifferencePerPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sum of absolute text bytes difference per page.
     * Given a Mediawiki project, a page-title prefixed with canonical namespace (for instance 'User:Jimbo_Wales') and a date range, returns a timeseries of bytes difference absolute sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
     * @param {String} pageTitle The page-title to request absolute bytes-difference for. Should be prefixed with the page canonical namespace. 
     * @param {module:model/String} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
     * @param {module:model/String} granularity Time unit for the response data. As of today, supported values are daily and monthly 
     * @param {String} start The date of the first day to include, in YYYYMMDD format
     * @param {String} end The date of the last day to include, in YYYYMMDD format
     * @param {module:api/BytesDifferenceDataApi~metricsBytesDifferenceAbsolutePerPageProjectPageTitleEditorTypeGranularityStartEndGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AbsoluteBytesDifferencePerPage}
     */
    metricsBytesDifferenceAbsolutePerPageProjectPageTitleEditorTypeGranularityStartEndGet(project, pageTitle, editorType, granularity, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsBytesDifferenceAbsolutePerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }
      // verify the required parameter 'pageTitle' is set
      if (pageTitle === undefined || pageTitle === null) {
        throw new Error("Missing the required parameter 'pageTitle' when calling metricsBytesDifferenceAbsolutePerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }
      // verify the required parameter 'editorType' is set
      if (editorType === undefined || editorType === null) {
        throw new Error("Missing the required parameter 'editorType' when calling metricsBytesDifferenceAbsolutePerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling metricsBytesDifferenceAbsolutePerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metricsBytesDifferenceAbsolutePerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling metricsBytesDifferenceAbsolutePerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }

      let pathParams = {
        'project': project,
        'page-title': pageTitle,
        'editor-type': editorType,
        'granularity': granularity,
        'start': start,
        'end': end
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = AbsoluteBytesDifferencePerPage;
      return this.apiClient.callApi(
        '/metrics/bytes-difference/absolute/per-page/{project}/{page-title}/{editor-type}/{granularity}/{start}/{end}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsBytesDifferenceNetAggregateProjectEditorTypePageTypeGranularityStartEndGet operation.
     * @callback module:api/BytesDifferenceDataApi~metricsBytesDifferenceNetAggregateProjectEditorTypePageTypeGranularityStartEndGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetBytesDifference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sum of net text bytes difference between current edit and previous one.
     * Given a Mediawiki project and a date range, returns a timeseries of bytes difference net sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user) and page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you're interested in the aggregation of all projects, use all-projects. 
     * @param {module:model/String} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
     * @param {module:model/String} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
     * @param {module:model/String} granularity Time unit for the response data. As of today, supported values are daily and monthly 
     * @param {String} start The date of the first day to include, in YYYYMMDD format
     * @param {String} end The date of the last day to include, in YYYYMMDD format
     * @param {module:api/BytesDifferenceDataApi~metricsBytesDifferenceNetAggregateProjectEditorTypePageTypeGranularityStartEndGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetBytesDifference}
     */
    metricsBytesDifferenceNetAggregateProjectEditorTypePageTypeGranularityStartEndGet(project, editorType, pageType, granularity, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsBytesDifferenceNetAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'editorType' is set
      if (editorType === undefined || editorType === null) {
        throw new Error("Missing the required parameter 'editorType' when calling metricsBytesDifferenceNetAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'pageType' is set
      if (pageType === undefined || pageType === null) {
        throw new Error("Missing the required parameter 'pageType' when calling metricsBytesDifferenceNetAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling metricsBytesDifferenceNetAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metricsBytesDifferenceNetAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling metricsBytesDifferenceNetAggregateProjectEditorTypePageTypeGranularityStartEndGet");
      }

      let pathParams = {
        'project': project,
        'editor-type': editorType,
        'page-type': pageType,
        'granularity': granularity,
        'start': start,
        'end': end
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = NetBytesDifference;
      return this.apiClient.callApi(
        '/metrics/bytes-difference/net/aggregate/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsBytesDifferenceNetPerPageProjectPageTitleEditorTypeGranularityStartEndGet operation.
     * @callback module:api/BytesDifferenceDataApi~metricsBytesDifferenceNetPerPageProjectPageTitleEditorTypeGranularityStartEndGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetBytesDifferencePerPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sum of net text bytes difference per page.
     * Given a Mediawiki project, a page-title prefixed with canonical namespace (for instance 'User:Jimbo_Wales') and a date range, returns a timeseries of bytes difference net sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param {String} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
     * @param {String} pageTitle The page-title to request net bytes-difference for. Should be prefixed with the page canonical namespace. 
     * @param {module:model/String} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
     * @param {module:model/String} granularity Time unit for the response data. As of today, supported values are daily and monthly 
     * @param {String} start The date of the first day to include, in YYYYMMDD format
     * @param {String} end The date of the last day to include, in YYYYMMDD format
     * @param {module:api/BytesDifferenceDataApi~metricsBytesDifferenceNetPerPageProjectPageTitleEditorTypeGranularityStartEndGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetBytesDifferencePerPage}
     */
    metricsBytesDifferenceNetPerPageProjectPageTitleEditorTypeGranularityStartEndGet(project, pageTitle, editorType, granularity, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling metricsBytesDifferenceNetPerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }
      // verify the required parameter 'pageTitle' is set
      if (pageTitle === undefined || pageTitle === null) {
        throw new Error("Missing the required parameter 'pageTitle' when calling metricsBytesDifferenceNetPerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }
      // verify the required parameter 'editorType' is set
      if (editorType === undefined || editorType === null) {
        throw new Error("Missing the required parameter 'editorType' when calling metricsBytesDifferenceNetPerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling metricsBytesDifferenceNetPerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metricsBytesDifferenceNetPerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling metricsBytesDifferenceNetPerPageProjectPageTitleEditorTypeGranularityStartEndGet");
      }

      let pathParams = {
        'project': project,
        'page-title': pageTitle,
        'editor-type': editorType,
        'granularity': granularity,
        'start': start,
        'end': end
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = NetBytesDifferencePerPage;
      return this.apiClient.callApi(
        '/metrics/bytes-difference/net/per-page/{project}/{page-title}/{editor-type}/{granularity}/{start}/{end}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
