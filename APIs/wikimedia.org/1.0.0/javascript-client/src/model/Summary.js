/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Originalimage from './Originalimage';
import SummaryCoordinates from './SummaryCoordinates';
import Thumbnail from './Thumbnail';

/**
 * The Summary model module.
 * @module model/Summary
 * @version 1.0.0
 */
class Summary {
    /**
     * Constructs a new <code>Summary</code>.
     * @alias module:model/Summary
     * @param dir {String} The page language direction code
     * @param extract {String} First several sentences of an article in plain text
     * @param lang {String} The page language code
     * @param title {String} The page title
     */
    constructor(dir, extract, lang, title) { 
        
        Summary.initialize(this, dir, extract, lang, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dir, extract, lang, title) { 
        obj['dir'] = dir;
        obj['extract'] = extract;
        obj['lang'] = lang;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Summary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Summary} obj Optional instance to populate.
     * @return {module:model/Summary} The populated <code>Summary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Summary();

            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = SummaryCoordinates.constructFromObject(data['coordinates']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dir')) {
                obj['dir'] = ApiClient.convertToType(data['dir'], 'String');
            }
            if (data.hasOwnProperty('displaytitle')) {
                obj['displaytitle'] = ApiClient.convertToType(data['displaytitle'], 'String');
            }
            if (data.hasOwnProperty('extract')) {
                obj['extract'] = ApiClient.convertToType(data['extract'], 'String');
            }
            if (data.hasOwnProperty('extract_html')) {
                obj['extract_html'] = ApiClient.convertToType(data['extract_html'], 'String');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('originalimage')) {
                obj['originalimage'] = Originalimage.constructFromObject(data['originalimage']);
            }
            if (data.hasOwnProperty('pageid')) {
                obj['pageid'] = ApiClient.convertToType(data['pageid'], 'Number');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = Thumbnail.constructFromObject(data['thumbnail']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Summary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Summary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Summary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `coordinates`
        if (data['coordinates']) { // data not null
          SummaryCoordinates.validateJSON(data['coordinates']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['dir'] && !(typeof data['dir'] === 'string' || data['dir'] instanceof String)) {
            throw new Error("Expected the field `dir` to be a primitive type in the JSON string but got " + data['dir']);
        }
        // ensure the json data is a string
        if (data['displaytitle'] && !(typeof data['displaytitle'] === 'string' || data['displaytitle'] instanceof String)) {
            throw new Error("Expected the field `displaytitle` to be a primitive type in the JSON string but got " + data['displaytitle']);
        }
        // ensure the json data is a string
        if (data['extract'] && !(typeof data['extract'] === 'string' || data['extract'] instanceof String)) {
            throw new Error("Expected the field `extract` to be a primitive type in the JSON string but got " + data['extract']);
        }
        // ensure the json data is a string
        if (data['extract_html'] && !(typeof data['extract_html'] === 'string' || data['extract_html'] instanceof String)) {
            throw new Error("Expected the field `extract_html` to be a primitive type in the JSON string but got " + data['extract_html']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // validate the optional field `originalimage`
        if (data['originalimage']) { // data not null
          Originalimage.validateJSON(data['originalimage']);
        }
        // validate the optional field `thumbnail`
        if (data['thumbnail']) { // data not null
          Thumbnail.validateJSON(data['thumbnail']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Summary.RequiredProperties = ["dir", "extract", "lang", "title"];

/**
 * @member {module:model/SummaryCoordinates} coordinates
 */
Summary.prototype['coordinates'] = undefined;

/**
 * Wikidata description for the page
 * @member {String} description
 */
Summary.prototype['description'] = undefined;

/**
 * The page language direction code
 * @member {String} dir
 */
Summary.prototype['dir'] = undefined;

/**
 * The page title how it should be shown to the user
 * @member {String} displaytitle
 */
Summary.prototype['displaytitle'] = undefined;

/**
 * First several sentences of an article in plain text
 * @member {String} extract
 */
Summary.prototype['extract'] = undefined;

/**
 * First several sentences of an article in simple HTML format
 * @member {String} extract_html
 */
Summary.prototype['extract_html'] = undefined;

/**
 * The page language code
 * @member {String} lang
 */
Summary.prototype['lang'] = undefined;

/**
 * @member {module:model/Originalimage} originalimage
 */
Summary.prototype['originalimage'] = undefined;

/**
 * The page ID
 * @member {Number} pageid
 */
Summary.prototype['pageid'] = undefined;

/**
 * @member {module:model/Thumbnail} thumbnail
 */
Summary.prototype['thumbnail'] = undefined;

/**
 * The time when the page was last editted in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
 * @member {String} timestamp
 */
Summary.prototype['timestamp'] = undefined;

/**
 * The page title
 * @member {String} title
 */
Summary.prototype['title'] = undefined;






export default Summary;

