/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Availability model module.
 * @module model/Availability
 * @version 1.0.0
 */
class Availability {
    /**
     * Constructs a new <code>Availability</code>.
     * @alias module:model/Availability
     * @param inTheNews {Array.<String>} domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
     * @param mostRead {Array.<String>} domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
     * @param onThisDay {Array.<String>} domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
     * @param pictureOfTheDay {Array.<String>} domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
     * @param todaysFeaturedArticle {Array.<String>} domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
     */
    constructor(inTheNews, mostRead, onThisDay, pictureOfTheDay, todaysFeaturedArticle) { 
        
        Availability.initialize(this, inTheNews, mostRead, onThisDay, pictureOfTheDay, todaysFeaturedArticle);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inTheNews, mostRead, onThisDay, pictureOfTheDay, todaysFeaturedArticle) { 
        obj['in_the_news'] = inTheNews;
        obj['most_read'] = mostRead;
        obj['on_this_day'] = onThisDay;
        obj['picture_of_the_day'] = pictureOfTheDay;
        obj['todays_featured_article'] = todaysFeaturedArticle;
    }

    /**
     * Constructs a <code>Availability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Availability} obj Optional instance to populate.
     * @return {module:model/Availability} The populated <code>Availability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Availability();

            if (data.hasOwnProperty('in_the_news')) {
                obj['in_the_news'] = ApiClient.convertToType(data['in_the_news'], ['String']);
            }
            if (data.hasOwnProperty('most_read')) {
                obj['most_read'] = ApiClient.convertToType(data['most_read'], ['String']);
            }
            if (data.hasOwnProperty('on_this_day')) {
                obj['on_this_day'] = ApiClient.convertToType(data['on_this_day'], ['String']);
            }
            if (data.hasOwnProperty('picture_of_the_day')) {
                obj['picture_of_the_day'] = ApiClient.convertToType(data['picture_of_the_day'], ['String']);
            }
            if (data.hasOwnProperty('todays_featured_article')) {
                obj['todays_featured_article'] = ApiClient.convertToType(data['todays_featured_article'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Availability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Availability</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Availability.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['in_the_news'])) {
            throw new Error("Expected the field `in_the_news` to be an array in the JSON data but got " + data['in_the_news']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['most_read'])) {
            throw new Error("Expected the field `most_read` to be an array in the JSON data but got " + data['most_read']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['on_this_day'])) {
            throw new Error("Expected the field `on_this_day` to be an array in the JSON data but got " + data['on_this_day']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['picture_of_the_day'])) {
            throw new Error("Expected the field `picture_of_the_day` to be an array in the JSON data but got " + data['picture_of_the_day']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['todays_featured_article'])) {
            throw new Error("Expected the field `todays_featured_article` to be an array in the JSON data but got " + data['todays_featured_article']);
        }

        return true;
    }


}

Availability.RequiredProperties = ["in_the_news", "most_read", "on_this_day", "picture_of_the_day", "todays_featured_article"];

/**
 * domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
 * @member {Array.<String>} in_the_news
 */
Availability.prototype['in_the_news'] = undefined;

/**
 * domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
 * @member {Array.<String>} most_read
 */
Availability.prototype['most_read'] = undefined;

/**
 * domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
 * @member {Array.<String>} on_this_day
 */
Availability.prototype['on_this_day'] = undefined;

/**
 * domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
 * @member {Array.<String>} picture_of_the_day
 */
Availability.prototype['picture_of_the_day'] = undefined;

/**
 * domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
 * @member {Array.<String>} todays_featured_article
 */
Availability.prototype['todays_featured_article'] = undefined;






export default Availability;

