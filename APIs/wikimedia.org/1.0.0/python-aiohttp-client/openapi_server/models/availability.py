# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Availability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, in_the_news: List[str]=None, most_read: List[str]=None, on_this_day: List[str]=None, picture_of_the_day: List[str]=None, todays_featured_article: List[str]=None):
        """Availability - a model defined in OpenAPI

        :param in_the_news: The in_the_news of this Availability.
        :param most_read: The most_read of this Availability.
        :param on_this_day: The on_this_day of this Availability.
        :param picture_of_the_day: The picture_of_the_day of this Availability.
        :param todays_featured_article: The todays_featured_article of this Availability.
        """
        self.openapi_types = {
            'in_the_news': List[str],
            'most_read': List[str],
            'on_this_day': List[str],
            'picture_of_the_day': List[str],
            'todays_featured_article': List[str]
        }

        self.attribute_map = {
            'in_the_news': 'in_the_news',
            'most_read': 'most_read',
            'on_this_day': 'on_this_day',
            'picture_of_the_day': 'picture_of_the_day',
            'todays_featured_article': 'todays_featured_article'
        }

        self._in_the_news = in_the_news
        self._most_read = most_read
        self._on_this_day = on_this_day
        self._picture_of_the_day = picture_of_the_day
        self._todays_featured_article = todays_featured_article

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Availability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The availability of this Availability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def in_the_news(self):
        """Gets the in_the_news of this Availability.

        domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project

        :return: The in_the_news of this Availability.
        :rtype: List[str]
        """
        return self._in_the_news

    @in_the_news.setter
    def in_the_news(self, in_the_news):
        """Sets the in_the_news of this Availability.

        domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project

        :param in_the_news: The in_the_news of this Availability.
        :type in_the_news: List[str]
        """
        if in_the_news is None:
            raise ValueError("Invalid value for `in_the_news`, must not be `None`")

        self._in_the_news = in_the_news

    @property
    def most_read(self):
        """Gets the most_read of this Availability.

        domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project

        :return: The most_read of this Availability.
        :rtype: List[str]
        """
        return self._most_read

    @most_read.setter
    def most_read(self, most_read):
        """Sets the most_read of this Availability.

        domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project

        :param most_read: The most_read of this Availability.
        :type most_read: List[str]
        """
        if most_read is None:
            raise ValueError("Invalid value for `most_read`, must not be `None`")

        self._most_read = most_read

    @property
    def on_this_day(self):
        """Gets the on_this_day of this Availability.

        domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project

        :return: The on_this_day of this Availability.
        :rtype: List[str]
        """
        return self._on_this_day

    @on_this_day.setter
    def on_this_day(self, on_this_day):
        """Sets the on_this_day of this Availability.

        domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project

        :param on_this_day: The on_this_day of this Availability.
        :type on_this_day: List[str]
        """
        if on_this_day is None:
            raise ValueError("Invalid value for `on_this_day`, must not be `None`")

        self._on_this_day = on_this_day

    @property
    def picture_of_the_day(self):
        """Gets the picture_of_the_day of this Availability.

        domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project

        :return: The picture_of_the_day of this Availability.
        :rtype: List[str]
        """
        return self._picture_of_the_day

    @picture_of_the_day.setter
    def picture_of_the_day(self, picture_of_the_day):
        """Sets the picture_of_the_day of this Availability.

        domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project

        :param picture_of_the_day: The picture_of_the_day of this Availability.
        :type picture_of_the_day: List[str]
        """
        if picture_of_the_day is None:
            raise ValueError("Invalid value for `picture_of_the_day`, must not be `None`")

        self._picture_of_the_day = picture_of_the_day

    @property
    def todays_featured_article(self):
        """Gets the todays_featured_article of this Availability.

        domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project

        :return: The todays_featured_article of this Availability.
        :rtype: List[str]
        """
        return self._todays_featured_article

    @todays_featured_article.setter
    def todays_featured_article(self, todays_featured_article):
        """Sets the todays_featured_article of this Availability.

        domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project

        :param todays_featured_article: The todays_featured_article of this Availability.
        :type todays_featured_article: List[str]
        """
        if todays_featured_article is None:
            raise ValueError("Invalid value for `todays_featured_article`, must not be `None`")

        self._todays_featured_article = todays_featured_article
