# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.originalimage import Originalimage
from openapi_server.models.summary_coordinates import SummaryCoordinates
from openapi_server.models.thumbnail import Thumbnail
from openapi_server import util


class Summary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coordinates: SummaryCoordinates=None, description: str=None, dir: str=None, displaytitle: str=None, extract: str=None, extract_html: str=None, lang: str=None, originalimage: Originalimage=None, pageid: int=None, thumbnail: Thumbnail=None, timestamp: str=None, title: str=None):
        """Summary - a model defined in OpenAPI

        :param coordinates: The coordinates of this Summary.
        :param description: The description of this Summary.
        :param dir: The dir of this Summary.
        :param displaytitle: The displaytitle of this Summary.
        :param extract: The extract of this Summary.
        :param extract_html: The extract_html of this Summary.
        :param lang: The lang of this Summary.
        :param originalimage: The originalimage of this Summary.
        :param pageid: The pageid of this Summary.
        :param thumbnail: The thumbnail of this Summary.
        :param timestamp: The timestamp of this Summary.
        :param title: The title of this Summary.
        """
        self.openapi_types = {
            'coordinates': SummaryCoordinates,
            'description': str,
            'dir': str,
            'displaytitle': str,
            'extract': str,
            'extract_html': str,
            'lang': str,
            'originalimage': Originalimage,
            'pageid': int,
            'thumbnail': Thumbnail,
            'timestamp': str,
            'title': str
        }

        self.attribute_map = {
            'coordinates': 'coordinates',
            'description': 'description',
            'dir': 'dir',
            'displaytitle': 'displaytitle',
            'extract': 'extract',
            'extract_html': 'extract_html',
            'lang': 'lang',
            'originalimage': 'originalimage',
            'pageid': 'pageid',
            'thumbnail': 'thumbnail',
            'timestamp': 'timestamp',
            'title': 'title'
        }

        self._coordinates = coordinates
        self._description = description
        self._dir = dir
        self._displaytitle = displaytitle
        self._extract = extract
        self._extract_html = extract_html
        self._lang = lang
        self._originalimage = originalimage
        self._pageid = pageid
        self._thumbnail = thumbnail
        self._timestamp = timestamp
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Summary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The summary of this Summary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coordinates(self):
        """Gets the coordinates of this Summary.


        :return: The coordinates of this Summary.
        :rtype: SummaryCoordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Summary.


        :param coordinates: The coordinates of this Summary.
        :type coordinates: SummaryCoordinates
        """

        self._coordinates = coordinates

    @property
    def description(self):
        """Gets the description of this Summary.

        Wikidata description for the page

        :return: The description of this Summary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Summary.

        Wikidata description for the page

        :param description: The description of this Summary.
        :type description: str
        """

        self._description = description

    @property
    def dir(self):
        """Gets the dir of this Summary.

        The page language direction code

        :return: The dir of this Summary.
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this Summary.

        The page language direction code

        :param dir: The dir of this Summary.
        :type dir: str
        """
        if dir is None:
            raise ValueError("Invalid value for `dir`, must not be `None`")

        self._dir = dir

    @property
    def displaytitle(self):
        """Gets the displaytitle of this Summary.

        The page title how it should be shown to the user

        :return: The displaytitle of this Summary.
        :rtype: str
        """
        return self._displaytitle

    @displaytitle.setter
    def displaytitle(self, displaytitle):
        """Sets the displaytitle of this Summary.

        The page title how it should be shown to the user

        :param displaytitle: The displaytitle of this Summary.
        :type displaytitle: str
        """

        self._displaytitle = displaytitle

    @property
    def extract(self):
        """Gets the extract of this Summary.

        First several sentences of an article in plain text

        :return: The extract of this Summary.
        :rtype: str
        """
        return self._extract

    @extract.setter
    def extract(self, extract):
        """Sets the extract of this Summary.

        First several sentences of an article in plain text

        :param extract: The extract of this Summary.
        :type extract: str
        """
        if extract is None:
            raise ValueError("Invalid value for `extract`, must not be `None`")

        self._extract = extract

    @property
    def extract_html(self):
        """Gets the extract_html of this Summary.

        First several sentences of an article in simple HTML format

        :return: The extract_html of this Summary.
        :rtype: str
        """
        return self._extract_html

    @extract_html.setter
    def extract_html(self, extract_html):
        """Sets the extract_html of this Summary.

        First several sentences of an article in simple HTML format

        :param extract_html: The extract_html of this Summary.
        :type extract_html: str
        """

        self._extract_html = extract_html

    @property
    def lang(self):
        """Gets the lang of this Summary.

        The page language code

        :return: The lang of this Summary.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Summary.

        The page language code

        :param lang: The lang of this Summary.
        :type lang: str
        """
        if lang is None:
            raise ValueError("Invalid value for `lang`, must not be `None`")

        self._lang = lang

    @property
    def originalimage(self):
        """Gets the originalimage of this Summary.


        :return: The originalimage of this Summary.
        :rtype: Originalimage
        """
        return self._originalimage

    @originalimage.setter
    def originalimage(self, originalimage):
        """Sets the originalimage of this Summary.


        :param originalimage: The originalimage of this Summary.
        :type originalimage: Originalimage
        """

        self._originalimage = originalimage

    @property
    def pageid(self):
        """Gets the pageid of this Summary.

        The page ID

        :return: The pageid of this Summary.
        :rtype: int
        """
        return self._pageid

    @pageid.setter
    def pageid(self, pageid):
        """Sets the pageid of this Summary.

        The page ID

        :param pageid: The pageid of this Summary.
        :type pageid: int
        """

        self._pageid = pageid

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Summary.


        :return: The thumbnail of this Summary.
        :rtype: Thumbnail
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Summary.


        :param thumbnail: The thumbnail of this Summary.
        :type thumbnail: Thumbnail
        """

        self._thumbnail = thumbnail

    @property
    def timestamp(self):
        """Gets the timestamp of this Summary.

        The time when the page was last editted in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format

        :return: The timestamp of this Summary.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Summary.

        The time when the page was last editted in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format

        :param timestamp: The timestamp of this Summary.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def title(self):
        """Gets the title of this Summary.

        The page title

        :return: The title of this Summary.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Summary.

        The page title

        :param title: The title of this Summary.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
