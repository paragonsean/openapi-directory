openapi: 3.0.1
info:
  contact:
    name: the Wikimedia Services team
    url: http://mediawiki.org/wiki/REST_API
  description: |
    This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.
    ### Global Rules
    - Limit your clients to no more than 200 requests/s to this API.
      Each API endpoint's documentation may detail more specific usage limits.
    - Set a unique `User-Agent` or `Api-User-Agent` header that
      allows us to contact you quickly. Email addresses or URLs
      of contact pages work well.

    By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.
    ### Endpoint documentation
    Please consult each endpoint's documentation for details on:
    - Licensing information for the specific type of content
      and data served via the endpoint.
    - Stability markers to inform you about development status and
      change policy, according to
      [our API version policy](https://www.mediawiki.org/wiki/API_versioning).
    - Endpoint specific usage limits.
  license:
    name: Software available under the Apache 2 license
    url: http://www.apache.org/licenses/LICENSE-2.0
  termsOfService: https://wikimediafoundation.org/wiki/Terms_of_Use
  title: Wikimedia
  version: 1.0.0
  x-apisguru-categories:
  - media
  x-logo:
    url: https://twitter.com/Wikipedia/profile_image?size=original
  x-origin:
  - format: swagger
    url: https://wikimedia.org/api/rest_v1/?spec
    version: "2.0"
  x-providerName: wikimedia.org
servers:
- url: https://wikimedia.org/api/rest_v1
tags:
- description: formula rendering
  name: Math
paths:
  /feed/availability:
    get:
      description: |
        Gets availability of featured feed content for the apps by wiki domain.

        Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
      operationId: feed_availability_get
      responses:
        "200":
          content:
            application/json; charset=utf-8; profile="https://www.mediawiki.org/wiki/Specs/Availability/1.0.1":
              schema:
                $ref: '#/components/schemas/availability'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/availability'
          description: JSON containing lists of wiki domains for which feed content
            is available.
        default:
          content:
            application/json; charset=utf-8; profile="https://www.mediawiki.org/wiki/Specs/Availability/1.0.1":
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Gets availability of featured feed content for the apps by wiki domain.
      tags:
      - Feed content availability
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.feed_content_availability_controller
  /media/math/check/{type}:
    post:
      description: |
        Checks the supplied TeX formula for correctness and returns the
        normalised formula representation as well as information about
        identifiers. Available types are tex and inline-tex. The response
        contains the `x-resource-location` header which can be used to retrieve
        the render of the checked formula in one of the supported rendering
        formats. Just append the value of the header to `/media/math/{format}/`
        and perform a GET request against that URL.

        Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
      operationId: media_math_check_type_post
      parameters:
      - description: The input type of the given formula; can be tex or inline-tex
        in: path
        name: type
        required: true
        schema:
          enum:
          - tex
          - inline-tex
          - chem
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/_media_math_check__type__post_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content: {}
          description: Information about the checked formula
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Invalid type
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Check and normalize a TeX formula.
      tags:
      - Math
      x-amples:
      - request:
          body:
            q: "E=mc^{2}"
          params:
            domain: wikimedia.org
            type: tex
        response:
          body:
            checked: /.+/
            success: true
          headers:
            cache-control: no-cache
            content-type: /^application\/json/
            x-resource-location: /.+/
          status: 200
        title: Mathoid - check test formula
      x-monitor: true
      x-openapi-router-controller: openapi_server.controllers.math_controller
      x-codegen-request-body-name: body
  /media/math/formula/{hash}:
    get:
      description: |
        Returns the previously-stored formula via `/media/math/check/{type}` for
        the given hash.

        Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
      operationId: media_math_formula_hash_get
      parameters:
      - description: The hash string of the previous POST data
        in: path
        name: hash
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        "200":
          content: {}
          description: Information about the checked formula
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Data for the given hash cannot be found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get a previously-stored formula
      tags:
      - Math
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.math_controller
  /media/math/render/{format}/{hash}:
    get:
      description: |
        Given a request hash, renders a TeX formula into its mathematic
        representation in the given format. When a request is issued to the
        `/media/math/check/{format}` POST endpoint, the response contains the
        `x-resource-location` header denoting the hash ID of the POST data. Once
        obtained, this endpoint has to be used to obtain the actual render.

        Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
      operationId: media_math_render_format_hash_get
      parameters:
      - description: The output format; can be svg or mml
        in: path
        name: format
        required: true
        schema:
          enum:
          - svg
          - mml
          - png
          type: string
      - description: The hash string of the previous POST data
        in: path
        name: hash
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        "200":
          content: {}
          description: The rendered formula
        "404":
          content:
            image/svg+xml:
              schema:
                $ref: '#/components/schemas/problem'
            application/mathml+xml:
              schema:
                $ref: '#/components/schemas/problem'
            image/png:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Unknown format or hash ID
        default:
          content:
            image/svg+xml:
              schema:
                $ref: '#/components/schemas/problem'
            application/mathml+xml:
              schema:
                $ref: '#/components/schemas/problem'
            image/png:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get rendered formula in the given format.
      tags:
      - Math
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.math_controller
  /metrics/bytes-difference/absolute/aggregate/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a Mediawiki project and a date range, returns a timeseries of absolute bytes
        difference sums. You can filter by editors-type (all-editor-types, anonymous, group-bot,
        name-bot, user) and page-type (all-page-types, content, non-content). You can choose
        between daily and monthly granularity as well.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_bytes_difference_absolute_aggregate_project_editor_type_page_type_granularity_start_end_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia. For
          projects like www.mediawiki.org, you can use that full string, or just use mediawiki
          or mediawiki.org. If you're interested in the aggregation of all projects, use
          all-projects.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (edits on pages in content
          namespaces) or non-content (edits on pages in non-content namespaces). If you are
          interested in edits regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: |
          Time unit for the response data. As of today, supported values are daily and monthly
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The date of the first day to include, in YYYYMMDD format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The date of the last day to include, in YYYYMMDD format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/absolute-bytes-difference'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/absolute-bytes-difference'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: |
        Get the sum of absolute value of text bytes difference between current edit and
        previous one.
      tags:
      - Bytes difference data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.bytes_difference_data_controller
  /metrics/bytes-difference/absolute/per-page/{project}/{page-title}/{editor-type}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a Mediawiki project, a page-title prefixed with canonical namespace (for
        instance 'User:Jimbo_Wales') and a date range, returns a timeseries of bytes
        difference absolute sums. You can filter by editors-type (all-editor-types, anonymous,
        group-bot, name-bot, user). You can choose between daily and monthly granularity as well.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_bytes_difference_absolute_per_page_project_page_title_editor_type_granularity_start_end_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia. For
          projects like www.mediawiki.org, you can use that full string, or just use mediawiki
          or mediawiki.org.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          The page-title to request absolute bytes-difference for. Should be prefixed with the
          page canonical namespace.
        in: path
        name: page-title
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          Time unit for the response data. As of today, supported values are daily and monthly
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The date of the first day to include, in YYYYMMDD format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The date of the last day to include, in YYYYMMDD format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/absolute-bytes-difference-per-page'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/absolute-bytes-difference-per-page'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get the sum of absolute text bytes difference per page.
      tags:
      - Bytes difference data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.bytes_difference_data_controller
  /metrics/bytes-difference/net/aggregate/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a Mediawiki project and a date range, returns a timeseries of bytes difference net
        sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot,
        user) and page-type (all-page-types, content or non-content). You can choose between
        daily and monthly granularity as well.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_bytes_difference_net_aggregate_project_editor_type_page_type_granularity_start_end_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia. For
          projects like www.mediawiki.org, you can use that full string, or just use mediawiki
          or mediawiki.org. If you're interested in the aggregation of all projects, use
          all-projects.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (edits on pages in content
          namespaces) or non-content (edits on pages in non-content namespaces). If you are
          interested in edits regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: |
          Time unit for the response data. As of today, supported values are daily and monthly
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The date of the first day to include, in YYYYMMDD format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The date of the last day to include, in YYYYMMDD format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/net-bytes-difference'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/net-bytes-difference'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get the sum of net text bytes difference between current edit and previous
        one.
      tags:
      - Bytes difference data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.bytes_difference_data_controller
  /metrics/bytes-difference/net/per-page/{project}/{page-title}/{editor-type}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a Mediawiki project, a page-title prefixed with canonical namespace (for
        instance 'User:Jimbo_Wales') and a date range, returns a timeseries of bytes
        difference net sums. You can filter by editors-type (all-editor-types, anonymous,
        group-bot, name-bot, user). You can choose between daily and monthly granularity as well.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_bytes_difference_net_per_page_project_page_title_editor_type_granularity_start_end_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia. For
          projects like www.mediawiki.org, you can use that full string, or just use mediawiki
          or mediawiki.org.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          The page-title to request net bytes-difference for. Should be prefixed with the
          page canonical namespace.
        in: path
        name: page-title
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          Time unit for the response data. As of today, supported values are daily and monthly
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The date of the first day to include, in YYYYMMDD format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The date of the last day to include, in YYYYMMDD format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/net-bytes-difference-per-page'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/net-bytes-difference-per-page'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get the sum of net text bytes difference per page.
      tags:
      - Bytes difference data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.bytes_difference_data_controller
  /metrics/edited-pages/aggregate/{project}/{editor-type}/{page-type}/{activity-level}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a Mediawiki project and a date range, returns a timeseries of its edited-pages counts.
        You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user),
        page-type (all-page-types, content or non-content) or activity-level (1..4-edits,
        5..24-edits, 25..99-edits, 100..-edits). You can choose between daily and monthly
        granularity as well.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_edited_pages_aggregate_project_editor_type_page_type_activity_level_granularity_start_end_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off.  For projects like commons without language codes, use commons.wikimedia.
          For projects like www.mediawiki.org, you can use that full string, or just use
          mediawiki or mediawiki.org.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (edited-pages in content
          namespaces) or non-content (edited-pages in non-content namespaces). If you are
          interested in edited-pages regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: |
          If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits,
          25..99-edits or 100..-edits. If you are interested in edited-pages regardless
          of their activity level, use all-activity-levels.
        in: path
        name: activity-level
        required: true
        schema:
          enum:
          - all-activity-levels
          - 1..4-edits
          - 5..24-edits
          - 25..99-edits
          - 100..-edits
          type: string
      - description: |
          The time unit for the response data. As of today, supported values are
          daily and monthly.
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The date of the first day to include, in YYYYMMDD format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The date of the last day to include, in YYYYMMDD format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/edited-pages'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/edited-pages'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get edited-pages counts for a project.
      tags:
      - Edited pages data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.edited_pages_data_controller
  /metrics/edited-pages/new/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a Mediawiki project and a date range, returns a timeseries of its new pages counts.
        You can filter by editor type (all-editor-types, anonymous, group-bot, name-bot, user)
        or page-type (all-page-types, content or non-content). You can choose between daily and
        monthly granularity as well.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_edited_pages_new_project_editor_type_page_type_granularity_start_end_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off.  For projects like commons without language codes, use commons.wikimedia.
          For projects like www.mediawiki.org, you can use that full string, or just use
          mediawiki or mediawiki.org. If you're interested in the aggregation of all
          projects, use all-projects.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging
          to the bot group but having bot-like names) or user (registered account not in bot
          group nor having bot-like name). If you are interested in edits regardless of
          their editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (new pages in content
          namespaces) or non-content (new pages in non-content namespaces). If you are
          interested in new-articles regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: |
          The time unit for the response data. As of today, supported values are
          daily and monthly.
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The date of the first day to include, in YYYYMMDD format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The date of the last day to include, in YYYYMMDD format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/new-pages'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/new-pages'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get new pages counts for a project.
      tags:
      - Edited pages data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.edited_pages_data_controller
  /metrics/edited-pages/top-by-absolute-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}:
    get:
      description: |
        Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
        edited-pages by absolute bytes-difference. You can filter by editor-type (all-editor-types,
        anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_edited_pages_top_by_absolute_bytes_difference_project_editor_type_page_type_year_month_day_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia. For
          projects like www.mediawiki.org, you can use that full string, or just use mediawiki
          or mediawiki.org.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (edits on pages in content
          namespaces) or non-content (edits on pages in non-content namespaces). If you are
          interested in edits regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: "The year of the date for which to retrieve top edited-pages,\
          \ in YYYY format."
        in: path
        name: year
        required: true
        schema:
          type: string
      - description: "The month of the date for which to retrieve top edited-pages,\
          \ in MM format. If you want to get the top edited-pages of a whole month,\
          \ the day parameter should be all-days."
        in: path
        name: month
        required: true
        schema:
          type: string
      - description: "The day of the date for which to retrieve top edited-pages,\
          \ in DD format, or all-days for a monthly value."
        in: path
        name: day
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/top-edited-pages-by-abs-bytes-diff'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/top-edited-pages-by-abs-bytes-diff'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get top 100 edited-pages by absolute bytes-difference.
      tags:
      - Edited pages data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.edited_pages_data_controller
  /metrics/edited-pages/top-by-edits/{project}/{editor-type}/{page-type}/{year}/{month}/{day}:
    get:
      description: |
        Given a Mediawiki project and a date (day or month), returns a timeseries of the top
        100 edited-pages by edits count. You can filter by editor-type (all-editor-types,
        anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or
        non-content).

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_edited_pages_top_by_edits_project_editor_type_page_type_year_month_day_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia. For
          projects like www.mediawiki.org, you can use that full string, or just use mediawiki
          or mediawiki.org.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (edits on pages in content
          namespaces) or non-content (edits on pages in non-content namespaces). If you are
          interested in edits regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: "The year of the date for which to retrieve top edited-pages,\
          \ in YYYY format."
        in: path
        name: year
        required: true
        schema:
          type: string
      - description: "The month of the date for which to retrieve top edited-pages,\
          \ in MM format. If you want to get the top edited-pages of a whole month,\
          \ the day parameter should be all-days."
        in: path
        name: month
        required: true
        schema:
          type: string
      - description: "The day of the date for which to retrieve top edited-pages,\
          \ in DD format, or all-days for a monthly value."
        in: path
        name: day
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/top-edited-pages-by-edits'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/top-edited-pages-by-edits'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get top 100 edited-pages by edits count.
      tags:
      - Edited pages data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.edited_pages_data_controller
  /metrics/edited-pages/top-by-net-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}:
    get:
      description: |
        Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
        edited-pages by net bytes-difference. You can filter by editor-type (all-editor-types,
        anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_edited_pages_top_by_net_bytes_difference_project_editor_type_page_type_year_month_day_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia. For
          projects like www.mediawiki.org, you can use that full string, or just use mediawiki
          or mediawiki.org.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (edits on pages in content
          namespaces) or non-content (edits on pages in non-content namespaces). If you are
          interested in edits regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: "The year of the date for which to retrieve top edited-pages,\
          \ in YYYY format."
        in: path
        name: year
        required: true
        schema:
          type: string
      - description: "The month of the date for which to retrieve top edited-pages,\
          \ in MM format. If you want to get the top edited-pages of a whole month,\
          \ the day parameter should be all-days."
        in: path
        name: month
        required: true
        schema:
          type: string
      - description: "The day of the date for which to retrieve top edited-pages,\
          \ in DD format, or all-days for a monthly value."
        in: path
        name: day
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/top-edited-pages-by-net-bytes-diff'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/top-edited-pages-by-net-bytes-diff'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get top 100 edited-pages by net bytes-difference.
      tags:
      - Edited pages data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.edited_pages_data_controller
  /metrics/editors/aggregate/{project}/{editor-type}/{page-type}/{activity-level}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a Mediawiki project and a date range, returns a timeseries of its editors counts.
        You can filter by editory-type (all-editor-types, anonymous, group-bot, name-bot, user),
        page-type (all-page-types, content or non-content) or activity-level (1..4-edits,
        5..24-edits, 25..99-edits or 100..-edits). You can choose between daily and monthly
        granularity as well.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_editors_aggregate_project_editor_type_page_type_activity_level_granularity_start_end_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off.  For projects like commons without language codes, use commons.wikimedia.
          For projects like www.mediawiki.org, you can use that full string, or just use
          mediawiki or mediawiki.org.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging
          to the bot group but having bot-like names) or user (registered account not in bot
          group nor having bot-like name). If you are interested in edits regardless
          of their editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (edits made in content
          namespaces) or non-content (edits made in non-content namespaces). If you are
          interested in editors regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: |
          If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits,
          25..99-edits or 100..-edits. If you are interested in editors regardless
          of their activity-level, use all-activity-levels.
        in: path
        name: activity-level
        required: true
        schema:
          enum:
          - all-activity-levels
          - 1..4-edits
          - 5..24-edits
          - 25..99-edits
          - 100..-edits
          type: string
      - description: |
          The time unit for the response data. As of today, supported values are
          daily and monthly.
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The date of the first day to include, in YYYYMMDD format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The date of the last day to include, in YYYYMMDD format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/editors'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/editors'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get editors counts for a project.
      tags:
      - Editors data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.editors_data_controller
  /metrics/editors/top-by-absolute-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}:
    get:
      description: |
        Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
        editors by absolute bytes-difference. You can filter by editor-type (all-editor-types,
        anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).
        The user_text returned is either the mediawiki user_text if the user is registered, or
        null if user is anonymous.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_editors_top_by_absolute_bytes_difference_project_editor_type_page_type_year_month_day_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia. For
          projects like www.mediawiki.org, you can use that full string, or just use mediawiki
          or mediawiki.org.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (edits on pages in content
          namespaces) or non-content (edits on pages in non-content namespaces). If you are
          interested in edits regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: "The year of the date for which to retrieve top editors, in YYYY\
          \ format."
        in: path
        name: year
        required: true
        schema:
          type: string
      - description: "The month of the date for which to retrieve top editors, in\
          \ MM format. If you want to get the top editors of a whole month, the day\
          \ parameter should be all-days."
        in: path
        name: month
        required: true
        schema:
          type: string
      - description: "The day of the date for which to retrieve top editors, in DD\
          \ format, or all-days for a monthly value."
        in: path
        name: day
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/top-editors-by-abs-bytes-diff'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/top-editors-by-abs-bytes-diff'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get top 100 editors by absolute bytes-difference.
      tags:
      - Editors data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.editors_data_controller
  /metrics/editors/top-by-edits/{project}/{editor-type}/{page-type}/{year}/{month}/{day}:
    get:
      description: |
        Given a Mediawiki project and a date (day or month), returns a timeseries of the top
        100 editors by edits count. You can filter by editor-type (all-editor-types,
        anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or
        non-content). The user_text returned is either the mediawiki user_text if the user is
        registered, or null if user is anonymous.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_editors_top_by_edits_project_editor_type_page_type_year_month_day_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia. For
          projects like www.mediawiki.org, you can use that full string, or just use mediawiki
          or mediawiki.org.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (edits on pages in content
          namespaces) or non-content (edits on pages in non-content namespaces). If you are
          interested in edits regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: "The year of the date for which to retrieve top editors, in YYYY\
          \ format."
        in: path
        name: year
        required: true
        schema:
          type: string
      - description: "The month of the date for which to retrieve top editors, in\
          \ MM format. If you want to get the top editors of a whole month, the day\
          \ parameter should be all-days."
        in: path
        name: month
        required: true
        schema:
          type: string
      - description: "The day of the date for which to retrieve top editors, in DD\
          \ format, or all-days for a monthly value."
        in: path
        name: day
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/top-editors-by-edits'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/top-editors-by-edits'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get top 100 editors by edits count.
      tags:
      - Editors data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.editors_data_controller
  /metrics/editors/top-by-net-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}:
    get:
      description: |
        Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
        editors by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous,
        group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The
        user_text returned is either the mediawiki user_text if the user is registered, or
        "Anonymous Editor" if user is anonymous.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_editors_top_by_net_bytes_difference_project_editor_type_page_type_year_month_day_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia. For
          projects like www.mediawiki.org, you can use that full string, or just use mediawiki
          or mediawiki.org.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (edits on pages in content
          namespaces) or non-content (edits on pages in non-content namespaces). If you are
          interested in edits regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: "The year of the date for which to retrieve top editors, in YYYY\
          \ format."
        in: path
        name: year
        required: true
        schema:
          type: string
      - description: "The month of the date for which to retrieve top editors, in\
          \ MM format. If you want to get the top editors of a whole month, the day\
          \ parameter should be all-days."
        in: path
        name: month
        required: true
        schema:
          type: string
      - description: "The day of the date for which to retrieve top editors, in DD\
          \ format, or all-days for a monthly value."
        in: path
        name: day
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/top-editors-by-net-bytes-diff'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/top-editors-by-net-bytes-diff'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get top 100 editors by net bytes-difference.
      tags:
      - Editors data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.editors_data_controller
  /metrics/edits/aggregate/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a Mediawiki project and a date range, returns a timeseries of edits counts.
        You can filter by editors-type (all-editor-types, anonymous, bot, registered) and
        page-type (all-page-types, content or non-content). You can choose between daily and
        monthly granularity as well.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_edits_aggregate_project_editor_type_page_type_granularity_start_end_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off.  For projects like commons without language codes, use commons.wikimedia.
          For projects like www.mediawiki.org, you can use that full string, or just use
          mediawiki or mediawiki.org. If you're interested in the aggregation of
          all projects, use all-projects.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging
          to the bot group but having bot-like names) or user (registered account not in bot
          group nor having bot-like name). If you are interested in edits regardless
          of their editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          If you want to filter by page-type, use one of content (edits on pages in content
          namespaces) or non-content (edits on pages in non-content namespaces). If you are
          interested in edits regardless of their page-type, use all-page-types.
        in: path
        name: page-type
        required: true
        schema:
          enum:
          - all-page-types
          - content
          - non-content
          type: string
      - description: |
          The time unit for the response data. As of today, supported values are
          daily and monthly.
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The date of the first day to include, in YYYYMMDD format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The date of the last day to include, in YYYYMMDD format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/edits'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/edits'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get edits counts for a project.
      tags:
      - Edits data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.edits_data_controller
  /metrics/edits/per-page/{project}/{page-title}/{editor-type}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a Mediawiki project, a page-title prefixed with its canonical namespace (for
        instance 'User:Jimbo_Wales') and a date range, returns a timeseries of edit counts.
        You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user).
        You can choose between daily and monthly granularity as well.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_edits_per_page_project_page_title_editor_type_granularity_start_end_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia. For
          projects like www.mediawiki.org, you can use that full string, or just use mediawiki
          or mediawiki.org.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          The page-title to request edits for. It should be prefixed with canonical namespace.
          Spaces will be converted to underscores.
        in: path
        name: page-title
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by editor-type, use one of anonymous, group-bot (registered
          accounts belonging to the bot group), name-bot (registered accounts not belonging to
          the bot group but having bot-like names) or user (registered account not in bot group
          nor having bot-like name). If you are interested in edits regardless of their
          editor-type, use all-editor-types.
        in: path
        name: editor-type
        required: true
        schema:
          enum:
          - all-editor-types
          - anonymous
          - group-bot
          - name-bot
          - user
          type: string
      - description: |
          Time unit for the response data. As of today, supported values are daily and monthly
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The date of the first day to include, in YYYYMMDD format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The date of the last day to include, in YYYYMMDD format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/edits-per-page'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/edits-per-page'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get edit counts for a page in a project.
      tags:
      - Edits data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.edits_data_controller
  /metrics/legacy/pagecounts/aggregate/{project}/{access-site}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a project and a date range, returns a timeseries of pagecounts.
        You can filter by access site (mobile or desktop) and you can choose between monthly,
        daily and hourly granularity as well.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 100 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_legacy_pagecounts_aggregate_project_access_site_granularity_start_end_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off. For projects like commons without language codes, use commons.wikimedia.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: "If you want to filter by access site, use one of desktop-site\
          \ or mobile-site. If you are interested in pagecounts regardless of access\
          \ site use all-sites."
        in: path
        name: access-site
        required: true
        schema:
          enum:
          - all-sites
          - desktop-site
          - mobile-site
          type: string
      - description: |
          The time unit for the response data. As of today, the supported granularities for
          this endpoint are hourly, daily and monthly.
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - hourly
          - daily
          - monthly
          type: string
      - description: "The timestamp of the first hour/day/month to include, in YYYYMMDDHH\
          \ format."
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: |
          The timestamp of the last hour/day/month to include, in YYYYMMDDHH format.
          In hourly and daily granularities this value is inclusive, in the monthly granularity
          this value is exclusive.
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagecounts-project'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/pagecounts-project'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      tags:
      - Legacy data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.legacy_data_controller
  /metrics/pageviews/aggregate/{project}/{access}/{agent}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a date range, returns a timeseries of pageview counts. You can filter by project,
        access method and/or agent type. You can choose between daily and hourly granularity
        as well.

        - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
        - Rate limit: 100 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_pageviews_aggregate_project_access_agent_granularity_start_end_get
      parameters:
      - description: |
          If you want to filter by project, use the domain of any Wikimedia project,
          for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
          If you are interested in all pageviews regardless of project, use all-projects.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by access method, use one of desktop, mobile-app or mobile-web.
          If you are interested in pageviews regardless of access method, use all-access.
        in: path
        name: access
        required: true
        schema:
          enum:
          - all-access
          - desktop
          - mobile-app
          - mobile-web
          type: string
      - description: |
          If you want to filter by agent type, use one of user or spider. If you are interested
          in pageviews regardless of agent type, use all-agents.
        in: path
        name: agent
        required: true
        schema:
          enum:
          - all-agents
          - user
          - spider
          type: string
      - description: |
          The time unit for the response data. As of today, the supported granularities for this
          endpoint are hourly, daily, and monthly.
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - hourly
          - daily
          - monthly
          type: string
      - description: "The timestamp of the first hour/day/month to include, in YYYYMMDDHH\
          \ format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The timestamp of the last hour/day/month to include, in YYYYMMDDHH\
          \ format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageview-project'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/pageview-project'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get pageview counts for a project.
      tags:
      - Pageviews data
      x-amples:
      - request:
          params:
            access: all-access
            agent: all-agents
            domain: wikimedia.org
            end: 1970010100
            granularity: hourly
            project: en.wikipedia
            start: 1970010100
        response:
          body:
            items:
            - access: all-access
              agent: all-agents
              granularity: hourly
              project: en.wikipedia
              timestamp: 1970010100
              views: 0
          headers:
            content-type: application/json
          status: 200
        title: Get aggregate page views
      x-monitor: true
      x-openapi-router-controller: openapi_server.controllers.pageviews_data_controller
  /metrics/pageviews/per-article/{project}/{access}/{agent}/{article}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a Mediawiki article and a date range, returns a daily timeseries of its pageview
        counts. You can also filter by access method and/or agent type.

        - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
        - Rate limit: 100 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_pageviews_per_article_project_access_agent_article_granularity_start_end_get
      parameters:
      - description: |
          If you want to filter by project, use the domain of any Wikimedia project,
          for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by access method, use one of desktop, mobile-app
          or mobile-web. If you are interested in pageviews regardless of access method,
          use all-access.
        in: path
        name: access
        required: true
        schema:
          enum:
          - all-access
          - desktop
          - mobile-app
          - mobile-web
          type: string
      - description: |
          If you want to filter by agent type, use one of user, bot or spider. If you are
          interested in pageviews regardless of agent type, use all-agents.
        in: path
        name: agent
        required: true
        schema:
          enum:
          - all-agents
          - user
          - spider
          - bot
          type: string
      - description: |
          'The title of any article in the specified project. Any spaces should be replaced
          with underscores. It also should be URI-encoded, so that non-URI-safe characters like
          %, / or ? are accepted. Example: Are_You_the_One%3F'.
        in: path
        name: article
        required: true
        schema:
          type: string
      - description: |
          The time unit for the response data. As of today, the only supported granularity for
          this endpoint is daily and monthly.
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The date of the first day to include, in YYYYMMDD or YYYYMMDDHH\
          \ format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The date of the last day to include, in YYYYMMDD or YYYYMMDDHH\
          \ format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageview-article'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/pageview-article'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get pageview counts for a page.
      tags:
      - Pageviews data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.pageviews_data_controller
  /metrics/pageviews/top-by-country/{project}/{access}/{year}/{month}:
    get:
      description: |
        Lists the pageviews to this project, split by country of origin for a given month.
        Because of privacy reasons, pageviews are given in a bucketed format, and countries
        with less than 100 views do not get reported.
        Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 100 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_pageviews_top_by_country_project_access_year_month_get
      parameters:
      - description: |
          If you want to filter by project, use the domain of any Wikimedia project,
          for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by access method, use one of desktop, mobile-app or mobile-web.
          If you are interested in pageviews regardless of access method, use all-access.
        in: path
        name: access
        required: true
        schema:
          enum:
          - all-access
          - desktop
          - mobile-app
          - mobile-web
          type: string
      - description: "The year of the date for which to retrieve top countries, in\
          \ YYYY format."
        in: path
        name: year
        required: true
        schema:
          type: string
      - description: |
          The month of the date for which to retrieve top countries, in MM format.
        in: path
        name: month
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/by-country'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/by-country'
          description: The list of top countries by pageviews in the project
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get pageviews by country and access method.
      tags:
      - Pageviews data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.pageviews_data_controller
  /metrics/pageviews/top/{project}/{access}/{year}/{month}/{day}:
    get:
      description: |
        Lists the 1000 most viewed articles for a given project and timespan (month or day).
        You can filter by access method.

        - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
        - Rate limit: 100 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_pageviews_top_project_access_year_month_day_get
      parameters:
      - description: |
          If you want to filter by project, use the domain of any Wikimedia project,
          for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by access method, use one of desktop, mobile-app or mobile-web.
          If you are interested in pageviews regardless of access method, use all-access.
        in: path
        name: access
        required: true
        schema:
          enum:
          - all-access
          - desktop
          - mobile-app
          - mobile-web
          type: string
      - description: "The year of the date for which to retrieve top articles, in\
          \ YYYY format."
        in: path
        name: year
        required: true
        schema:
          type: string
      - description: |
          The month of the date for which to retrieve top articles, in MM format. If you want
          to get the top articles of a whole month, the day parameter should be all-days.
        in: path
        name: month
        required: true
        schema:
          type: string
      - description: "The day of the date for which to retrieve top articles, in DD\
          \ format."
        in: path
        name: day
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageview-tops'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/pageview-tops'
          description: The list of top articles in the project
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get the most viewed articles for a project.
      tags:
      - Pageviews data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.pageviews_data_controller
  /metrics/registered-users/new/{project}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a Mediawiki project and a date range, returns a timeseries of its newly registered
        users counts. You can choose between daily and monthly granularity. The newly registered
        users value is computed with self-created users only, not auto-login created ones.

        - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
        - Rate limit: 25 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_registered_users_new_project_granularity_start_end_get
      parameters:
      - description: |
          The name of any Wikimedia project formatted like {language code}.{project name},
          for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
          off.  For projects like commons without language codes, use commons.wikimedia.
          For projects like www.mediawiki.org, you can use that full string, or just use
          mediawiki or mediawiki.org. If you're interested in the aggregation of
          all projects, use all.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          The time unit for the response data. As of today, supported values are
          daily and monthly.
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The date of the first day to include, in YYYYMMDD format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The date of the last day to include, in YYYYMMDD format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/new-registered-users'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/new-registered-users'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get newly registered users counts for a project.
      tags:
      - Registered users data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.registered_users_data_controller
  /metrics/unique-devices/{project}/{access-site}/{granularity}/{start}/{end}:
    get:
      description: |
        Given a project and a date range, returns a timeseries of unique devices counts.
        You need to specify a project, and can filter by accessed site (mobile or desktop).
        You can choose between daily and hourly granularity as well.

        - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
        - Rate limit: 100 req/s
        - License: Data accessible via this endpoint is available under the
          [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
      operationId: metrics_unique_devices_project_access_site_granularity_start_end_get
      parameters:
      - description: |
          If you want to filter by project, use the domain of any Wikimedia project,
          for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
        in: path
        name: project
        required: true
        schema:
          type: string
      - description: |
          If you want to filter by accessed site, use one of desktop-site or mobile-site.
          If you are interested in unique devices regardless of accessed site, use or all-sites.
        in: path
        name: access-site
        required: true
        schema:
          enum:
          - all-sites
          - desktop-site
          - mobile-site
          type: string
      - description: |
          The time unit for the response data. As of today, the supported granularities
          for this endpoint are daily and monthly.
        in: path
        name: granularity
        required: true
        schema:
          enum:
          - daily
          - monthly
          type: string
      - description: "The timestamp of the first day/month to include, in YYYYMMDD\
          \ format"
        in: path
        name: start
        required: true
        schema:
          type: string
      - description: "The timestamp of the last day/month to include, in YYYYMMDD\
          \ format"
        in: path
        name: end
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unique-devices'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/unique-devices'
          description: The list of values
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Get unique devices count per project
      tags:
      - Unique devices data
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.unique_devices_data_controller
  /transform/html/from/{from_lang}/to/{to_lang}:
    post:
      description: |
        Fetches the machine translation for the posted content from the source
        to the destination language.

        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
      operationId: transform_html_from_from_lang_to_to_lang_post
      parameters:
      - description: The source language code
        in: path
        name: from_lang
        required: true
        schema:
          type: string
      - description: The target language code
        in: path
        name: to_lang
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/_transform_html_from__from_lang__to__to_lang__post_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cx_mt'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/cx_mt'
          description: The translated content
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Machine-translate content
      tags:
      - Transform
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.transform_controller
      x-codegen-request-body-name: body
  /transform/html/from/{from_lang}/to/{to_lang}/{provider}:
    post:
      description: |
        Fetches the machine translation for the posted content from the source
        to the destination language.

        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
      operationId: transform_html_from_from_lang_to_to_lang_provider_post
      parameters:
      - description: The source language code
        in: path
        name: from_lang
        required: true
        schema:
          type: string
      - description: The target language code
        in: path
        name: to_lang
        required: true
        schema:
          type: string
      - description: The machine translation provider id
        in: path
        name: provider
        required: true
        schema:
          enum:
          - Apertium
          - Yandex
          - Youdao
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/_transform_html_from__from_lang__to__to_lang__post_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cx_mt'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/cx_mt'
          description: The translated content
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Machine-translate content
      tags:
      - Transform
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.transform_controller
      x-codegen-request-body-name: body
  /transform/list/languagepairs/:
    get:
      description: |
        Fetches the list of language pairs the back-end service can translate

        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
      operationId: transform_list_languagepairs_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cx_languagepairs'
          description: the list of source and target languages supported by the API
      summary: Lists the language pairs supported by the back-end
      tags:
      - Transform
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.transform_controller
  /transform/list/pair/{from}/{to}/:
    get:
      description: |
        Fetches the list of tools that are available for the given pair of languages.

        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
      operationId: transform_list_pair_from_to_get
      parameters:
      - description: The source language code
        in: path
        name: from
        required: true
        schema:
          type: string
      - description: The target language code
        in: path
        name: to
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cx_list_tools'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/cx_list_tools'
          description: the list of tools available for the language pair
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Lists the tools available for a language pair
      tags:
      - Transform
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.transform_controller
  /transform/list/tool/{tool}:
    get:
      description: |
        Fetches the list of tools and all of the language pairs it can translate

        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
      operationId: transform_list_tool_tool_get
      parameters:
      - description: The tool category to list tools and language pairs for
        in: path
        name: tool
        required: true
        schema:
          enum:
          - mt
          - dictionary
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cx_list_pairs_for_tool'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/cx_list_pairs_for_tool'
          description: the list of language pairs available for a given translation
            tool
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Lists the tools and language pairs available for the given tool category
      tags:
      - Transform
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.transform_controller
  /transform/list/tool/{tool}/{from}:
    get:
      description: |
        Fetches the list of tools and all of the language pairs it can translate

        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
      operationId: transform_list_tool_tool_from_get
      parameters:
      - description: The tool category to list tools and language pairs for
        in: path
        name: tool
        required: true
        schema:
          enum:
          - mt
          - dictionary
          type: string
      - description: The source language code
        in: path
        name: from
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cx_list_pairs_for_tool'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/cx_list_pairs_for_tool'
          description: the list of language pairs available for a given translation
            tool
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Lists the tools and language pairs available for the given tool category
      tags:
      - Transform
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.transform_controller
  /transform/list/tool/{tool}/{from}/{to}:
    get:
      description: |
        Fetches the list of tools and all of the language pairs it can translate

        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
      operationId: transform_list_tool_tool_from_to_get
      parameters:
      - description: The tool category to list tools and language pairs for
        in: path
        name: tool
        required: true
        schema:
          enum:
          - mt
          - dictionary
          type: string
      - description: The source language code
        in: path
        name: from
        required: true
        schema:
          type: string
      - description: The target language code
        in: path
        name: to
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cx_list_pairs_for_tool'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/cx_list_pairs_for_tool'
          description: the list of language pairs available for a given translation
            tool
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Lists the tools and language pairs available for the given tool category
      tags:
      - Transform
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.transform_controller
  /transform/word/from/{from_lang}/to/{to_lang}/{word}:
    get:
      description: |
        Fetches the dictionary meaning of a word from a language and displays
        it in the target language.

        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
      operationId: transform_word_from_from_lang_to_to_lang_word_get
      parameters:
      - description: The source language code
        in: path
        name: from_lang
        required: true
        schema:
          type: string
      - description: The target language code
        in: path
        name: to_lang
        required: true
        schema:
          type: string
      - description: The word to lookup
        in: path
        name: word
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cx_dict'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/cx_dict'
          description: the dictionary translation for the given word
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Fetch the dictionary meaning of a word
      tags:
      - Transform
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.transform_controller
  /transform/word/from/{from_lang}/to/{to_lang}/{word}/{provider}:
    get:
      description: |
        Fetches the dictionary meaning of a word from a language and displays
        it in the target language.

        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
      operationId: transform_word_from_from_lang_to_to_lang_word_provider_get
      parameters:
      - description: The source language code
        in: path
        name: from_lang
        required: true
        schema:
          type: string
      - description: The target language code
        in: path
        name: to_lang
        required: true
        schema:
          type: string
      - description: The word to lookup
        in: path
        name: word
        required: true
        schema:
          type: string
      - description: The dictionary provider id
        in: path
        name: provider
        required: true
        schema:
          enum:
          - JsonDict
          - Dictd
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cx_dict'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/cx_dict'
          description: the dictionary translation for the given word
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/problem'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problem'
          description: Error
      summary: Fetch the dictionary meaning of a word
      tags:
      - Transform
      x-monitor: false
      x-openapi-router-controller: openapi_server.controllers.transform_controller
components:
  schemas:
    absolute-bytes-difference:
      example:
        items:
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - abs_bytes_diff: 0
            timestamp: timestamp
          - abs_bytes_diff: 0
            timestamp: timestamp
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - abs_bytes_diff: 0
            timestamp: timestamp
          - abs_bytes_diff: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/absolute_bytes_difference_items_inner'
          title: items
          type: array
      title: absolute-bytes-difference
      type: object
    absolute-bytes-difference-per-editor:
      properties:
        items:
          items:
            $ref: '#/components/schemas/absolute_bytes_difference_per_editor_items_inner'
          type: array
      type: object
    absolute-bytes-difference-per-page:
      example:
        items:
        - granularity: granularity
          page-title: page-title
          project: project
          editor-type: editor-type
          results:
          - abs_bytes_diff: 0
            timestamp: timestamp
          - abs_bytes_diff: 0
            timestamp: timestamp
        - granularity: granularity
          page-title: page-title
          project: project
          editor-type: editor-type
          results:
          - abs_bytes_diff: 0
            timestamp: timestamp
          - abs_bytes_diff: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/absolute_bytes_difference_per_page_items_inner'
          title: items
          type: array
      title: absolute-bytes-difference-per-page
      type: object
    availability:
      additionalProperties: false
      example:
        on_this_day:
        - on_this_day
        - on_this_day
        in_the_news:
        - in_the_news
        - in_the_news
        most_read:
        - most_read
        - most_read
        picture_of_the_day:
        - picture_of_the_day
        - picture_of_the_day
        todays_featured_article:
        - todays_featured_article
        - todays_featured_article
      properties:
        in_the_news:
          description: "domains for wikis with this feature enabled, or [ '*.<project>.org'\
            \ ] for all wikis in a project"
          items:
            type: string
          title: in_the_news
          type: array
        most_read:
          description: "domains for wikis with this feature enabled, or [ '*.<project>.org'\
            \ ] for all wikis in a project"
          items:
            type: string
          title: most_read
          type: array
        on_this_day:
          description: "domains for wikis with this feature enabled, or [ '*.<project>.org'\
            \ ] for all wikis in a project"
          items:
            type: string
          title: on_this_day
          type: array
        picture_of_the_day:
          description: "domains for wikis with this feature enabled, or [ '*.<project>.org'\
            \ ] for all wikis in a project"
          items:
            type: string
          title: picture_of_the_day
          type: array
        todays_featured_article:
          description: "domains for wikis with this feature enabled, or [ '*.<project>.org'\
            \ ] for all wikis in a project"
          items:
            type: string
          title: todays_featured_article
          type: array
      required:
      - in_the_news
      - most_read
      - on_this_day
      - picture_of_the_day
      - todays_featured_article
      title: availability
      type: object
    by-country:
      example:
        items:
        - access: access
          month: month
          year: year
          project: project
          countries:
          - country: country
            rank: 0
            views: 6
          - country: country
            rank: 0
            views: 6
        - access: access
          month: month
          year: year
          project: project
          countries:
          - country: country
            rank: 0
            views: 6
          - country: country
            rank: 0
            views: 6
      properties:
        items:
          items:
            $ref: '#/components/schemas/by_country_items_inner'
          title: items
          type: array
      title: by-country
      type: object
    cx_dict:
      example:
        translations:
        - phrase: phrase
          sources: sources
          info: info
        - phrase: phrase
          sources: sources
          info: info
        source: source
      properties:
        source:
          description: the original word to look up
          title: source
          type: string
        translations:
          description: the translations found
          items:
            $ref: '#/components/schemas/cx_dict_translations_inner'
          title: translations
          type: array
      title: cx_dict
      type: object
    cx_languagepairs:
      example:
        source:
        - source
        - source
        target:
        - target
        - target
      properties:
        source:
          description: the list of available source languages
          items:
            description: one source language
            type: string
          title: source
          type: array
        target:
          description: the list of available destination languages
          items:
            description: one destination language
            type: string
          title: target
          type: array
      title: cx_languagepairs
      type: object
    cx_list_pairs_for_tool:
      type: object
    cx_list_tools:
      example:
        tools:
        - tools
        - tools
      properties:
        tools:
          description: the list of tools available for the given language pair
          items:
            description: the tool available
            type: string
          title: tools
          type: array
      title: cx_list_tools
      type: object
    cx_mt:
      example:
        contents: contents
      properties:
        contents:
          description: the translated content
          title: contents
          type: string
      title: cx_mt
      type: object
    edited-pages:
      example:
        items:
        - activity-level: activity-level
          granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - edited_pages: 0
            timestamp: timestamp
          - edited_pages: 0
            timestamp: timestamp
        - activity-level: activity-level
          granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - edited_pages: 0
            timestamp: timestamp
          - edited_pages: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/edited_pages_items_inner'
          title: items
          type: array
      title: edited-pages
      type: object
    editors:
      example:
        items:
        - activity-level: activity-level
          granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - editors: 0
            timestamp: timestamp
          - editors: 0
            timestamp: timestamp
        - activity-level: activity-level
          granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - editors: 0
            timestamp: timestamp
          - editors: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/editors_items_inner'
          title: items
          type: array
      title: editors
      type: object
    edits:
      example:
        items:
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - edits: 0
            timestamp: timestamp
          - edits: 0
            timestamp: timestamp
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - edits: 0
            timestamp: timestamp
          - edits: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/edits_items_inner'
          title: items
          type: array
      title: edits
      type: object
    edits-per-editor:
      properties:
        items:
          items:
            $ref: '#/components/schemas/edits_per_editor_items_inner'
          type: array
      type: object
    edits-per-page:
      example:
        items:
        - granularity: granularity
          page-title: page-title
          project: project
          editor-type: editor-type
          results:
          - edits: 0
            timestamp: timestamp
          - edits: 0
            timestamp: timestamp
        - granularity: granularity
          page-title: page-title
          project: project
          editor-type: editor-type
          results:
          - edits: 0
            timestamp: timestamp
          - edits: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/edits_per_page_items_inner'
          title: items
          type: array
      title: edits-per-page
      type: object
    listing:
      description: The result format for listings
      properties:
        items:
          items:
            type: string
          type: array
      required:
      - items
      type: object
    net-bytes-difference:
      example:
        items:
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - net_bytes_diff: 0
            timestamp: timestamp
          - net_bytes_diff: 0
            timestamp: timestamp
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - net_bytes_diff: 0
            timestamp: timestamp
          - net_bytes_diff: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/net_bytes_difference_items_inner'
          title: items
          type: array
      title: net-bytes-difference
      type: object
    net-bytes-difference-per-editor:
      properties:
        items:
          items:
            $ref: '#/components/schemas/net_bytes_difference_per_editor_items_inner'
          type: array
      type: object
    net-bytes-difference-per-page:
      example:
        items:
        - granularity: granularity
          page-title: page-title
          project: project
          editor-type: editor-type
          results:
          - net_bytes_diff: 0
            timestamp: timestamp
          - net_bytes_diff: 0
            timestamp: timestamp
        - granularity: granularity
          page-title: page-title
          project: project
          editor-type: editor-type
          results:
          - net_bytes_diff: 0
            timestamp: timestamp
          - net_bytes_diff: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/net_bytes_difference_per_page_items_inner'
          title: items
          type: array
      title: net-bytes-difference-per-page
      type: object
    new-pages:
      example:
        items:
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - new_pages: 0
            timestamp: timestamp
          - new_pages: 0
            timestamp: timestamp
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - new_pages: 0
            timestamp: timestamp
          - new_pages: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/new_pages_items_inner'
          title: items
          type: array
      title: new-pages
      type: object
    new-registered-users:
      example:
        items:
        - granularity: granularity
          project: project
          results:
          - new_registered_users: 0
            timestamp: timestamp
          - new_registered_users: 0
            timestamp: timestamp
        - granularity: granularity
          project: project
          results:
          - new_registered_users: 0
            timestamp: timestamp
          - new_registered_users: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/new_registered_users_items_inner'
          title: items
          type: array
      title: new-registered-users
      type: object
    originalimage:
      properties:
        height:
          description: Original image height
          title: height
          type: integer
        source:
          description: Original image URI
          title: source
          type: string
        width:
          description: Original image width
          title: width
          type: integer
      required:
      - height
      - source
      - width
      title: originalimage
      type: object
    pagecounts-project:
      example:
        items:
        - access-site: access-site
          granularity: granularity
          count: 0
          project: project
          timestamp: timestamp
        - access-site: access-site
          granularity: granularity
          count: 0
          project: project
          timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/pagecounts_project_items_inner'
          title: items
          type: array
      title: pagecounts-project
      type: object
    pageview-article:
      example:
        items:
        - agent: agent
          access: access
          granularity: granularity
          project: project
          article: article
          views: 0
          timestamp: timestamp
        - agent: agent
          access: access
          granularity: granularity
          project: project
          article: article
          views: 0
          timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/pageview_article_items_inner'
          title: items
          type: array
      title: pageview-article
      type: object
    pageview-project:
      example:
        items:
        - agent: agent
          access: access
          granularity: granularity
          project: project
          views: 0
          timestamp: timestamp
        - agent: agent
          access: access
          granularity: granularity
          project: project
          views: 0
          timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/pageview_project_items_inner'
          title: items
          type: array
      title: pageview-project
      type: object
    pageview-tops:
      example:
        items:
        - access: access
          month: month
          year: year
          project: project
          articles:
          - rank: 0
            article: article
            views: 6
          - rank: 0
            article: article
            views: 6
          day: day
        - access: access
          month: month
          year: year
          project: project
          articles:
          - rank: 0
            article: article
            views: 6
          - rank: 0
            article: article
            views: 6
          day: day
      properties:
        items:
          items:
            $ref: '#/components/schemas/pageview_tops_items_inner'
          title: items
          type: array
      title: pageview-tops
      type: object
    problem:
      example:
        method: method
        detail: detail
        title: title
        type: type
        uri: uri
        status: 0
      properties:
        detail:
          title: detail
          type: string
        method:
          title: method
          type: string
        status:
          title: status
          type: integer
        title:
          title: title
          type: string
        type:
          title: type
          type: string
        uri:
          title: uri
          type: string
      required:
      - type
      title: problem
      type: object
    summary:
      properties:
        coordinates:
          $ref: '#/components/schemas/summary_coordinates'
        description:
          description: Wikidata description for the page
          example: American poet
          type: string
        dir:
          description: The page language direction code
          example: ltr
          type: string
        displaytitle:
          description: The page title how it should be shown to the user
          type: string
        extract:
          description: First several sentences of an article in plain text
          type: string
        extract_html:
          description: First several sentences of an article in simple HTML format
          type: string
        lang:
          description: The page language code
          example: en
          type: string
        originalimage:
          $ref: '#/components/schemas/originalimage'
        pageid:
          description: The page ID
          type: integer
        thumbnail:
          $ref: '#/components/schemas/thumbnail'
        timestamp:
          description: "The time when the page was last editted in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)\
            \ format"
          example: 1970-01-01T00:00:00.000Z
          type: string
        title:
          description: The page title
          type: string
      required:
      - dir
      - extract
      - lang
      - title
      type: object
    thumbnail:
      properties:
        height:
          description: Thumnail height
          title: height
          type: integer
        source:
          description: Thumbnail image URI
          title: source
          type: string
        width:
          description: Thumbnail width
          title: width
          type: integer
      required:
      - height
      - source
      - width
      title: thumbnail
      type: object
    top-edited-pages-by-abs-bytes-diff:
      example:
        items:
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - page_title: page_title
              rank: 6
              abs_bytes_diff: 0
            - page_title: page_title
              rank: 6
              abs_bytes_diff: 0
            timestamp: timestamp
          - top:
            - page_title: page_title
              rank: 6
              abs_bytes_diff: 0
            - page_title: page_title
              rank: 6
              abs_bytes_diff: 0
            timestamp: timestamp
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - page_title: page_title
              rank: 6
              abs_bytes_diff: 0
            - page_title: page_title
              rank: 6
              abs_bytes_diff: 0
            timestamp: timestamp
          - top:
            - page_title: page_title
              rank: 6
              abs_bytes_diff: 0
            - page_title: page_title
              rank: 6
              abs_bytes_diff: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/top_edited_pages_by_abs_bytes_diff_items_inner'
          title: items
          type: array
      title: top-edited-pages-by-abs-bytes-diff
      type: object
    top-edited-pages-by-edits:
      example:
        items:
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - page_title: page_title
              edits: 0
              rank: 6
            - page_title: page_title
              edits: 0
              rank: 6
            timestamp: timestamp
          - top:
            - page_title: page_title
              edits: 0
              rank: 6
            - page_title: page_title
              edits: 0
              rank: 6
            timestamp: timestamp
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - page_title: page_title
              edits: 0
              rank: 6
            - page_title: page_title
              edits: 0
              rank: 6
            timestamp: timestamp
          - top:
            - page_title: page_title
              edits: 0
              rank: 6
            - page_title: page_title
              edits: 0
              rank: 6
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/top_edited_pages_by_edits_items_inner'
          title: items
          type: array
      title: top-edited-pages-by-edits
      type: object
    top-edited-pages-by-net-bytes-diff:
      example:
        items:
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - page_title: page_title
              rank: 6
              net_bytes_diff: 0
            - page_title: page_title
              rank: 6
              net_bytes_diff: 0
            timestamp: timestamp
          - top:
            - page_title: page_title
              rank: 6
              net_bytes_diff: 0
            - page_title: page_title
              rank: 6
              net_bytes_diff: 0
            timestamp: timestamp
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - page_title: page_title
              rank: 6
              net_bytes_diff: 0
            - page_title: page_title
              rank: 6
              net_bytes_diff: 0
            timestamp: timestamp
          - top:
            - page_title: page_title
              rank: 6
              net_bytes_diff: 0
            - page_title: page_title
              rank: 6
              net_bytes_diff: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/top_edited_pages_by_net_bytes_diff_items_inner'
          title: items
          type: array
      title: top-edited-pages-by-net-bytes-diff
      type: object
    top-editors-by-abs-bytes-diff:
      example:
        items:
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - rank: 6
              user_text: user_text
              abs_bytes_diff: 0
            - rank: 6
              user_text: user_text
              abs_bytes_diff: 0
            timestamp: timestamp
          - top:
            - rank: 6
              user_text: user_text
              abs_bytes_diff: 0
            - rank: 6
              user_text: user_text
              abs_bytes_diff: 0
            timestamp: timestamp
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - rank: 6
              user_text: user_text
              abs_bytes_diff: 0
            - rank: 6
              user_text: user_text
              abs_bytes_diff: 0
            timestamp: timestamp
          - top:
            - rank: 6
              user_text: user_text
              abs_bytes_diff: 0
            - rank: 6
              user_text: user_text
              abs_bytes_diff: 0
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/top_editors_by_abs_bytes_diff_items_inner'
          title: items
          type: array
      title: top-editors-by-abs-bytes-diff
      type: object
    top-editors-by-edits:
      example:
        items:
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - edits: 0
              rank: 6
              user_text: user_text
            - edits: 0
              rank: 6
              user_text: user_text
            timestamp: timestamp
          - top:
            - edits: 0
              rank: 6
              user_text: user_text
            - edits: 0
              rank: 6
              user_text: user_text
            timestamp: timestamp
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - edits: 0
              rank: 6
              user_text: user_text
            - edits: 0
              rank: 6
              user_text: user_text
            timestamp: timestamp
          - top:
            - edits: 0
              rank: 6
              user_text: user_text
            - edits: 0
              rank: 6
              user_text: user_text
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/top_editors_by_edits_items_inner'
          title: items
          type: array
      title: top-editors-by-edits
      type: object
    top-editors-by-net-bytes-diff:
      example:
        items:
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - rank: 6
              net_bytes_diff: 0
              user_text: user_text
            - rank: 6
              net_bytes_diff: 0
              user_text: user_text
            timestamp: timestamp
          - top:
            - rank: 6
              net_bytes_diff: 0
              user_text: user_text
            - rank: 6
              net_bytes_diff: 0
              user_text: user_text
            timestamp: timestamp
        - granularity: granularity
          page-type: page-type
          project: project
          editor-type: editor-type
          results:
          - top:
            - rank: 6
              net_bytes_diff: 0
              user_text: user_text
            - rank: 6
              net_bytes_diff: 0
              user_text: user_text
            timestamp: timestamp
          - top:
            - rank: 6
              net_bytes_diff: 0
              user_text: user_text
            - rank: 6
              net_bytes_diff: 0
              user_text: user_text
            timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/top_editors_by_net_bytes_diff_items_inner'
          title: items
          type: array
      title: top-editors-by-net-bytes-diff
      type: object
    unique-devices:
      example:
        items:
        - devices: 0
          access-site: access-site
          granularity: granularity
          project: project
          timestamp: timestamp
        - devices: 0
          access-site: access-site
          granularity: granularity
          project: project
          timestamp: timestamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/unique_devices_items_inner'
          title: items
          type: array
      title: unique-devices
      type: object
    _media_math_check__type__post_request:
      properties:
        q:
          description: The formula to check
          type: string
      required:
      - q
      type: object
    _transform_html_from__from_lang__to__to_lang__post_request:
      properties:
        html:
          description: The HTML content to translate
          type: string
          x-textarea: true
      required:
      - html
      type: object
    absolute_bytes_difference_items_inner_results_inner:
      example:
        abs_bytes_diff: 0
        timestamp: timestamp
      properties:
        abs_bytes_diff:
          format: int64
          title: abs_bytes_diff
          type: integer
        timestamp:
          title: timestamp
          type: string
      title: absolute_bytes_difference_items_inner_results_inner
      type: object
    absolute_bytes_difference_items_inner:
      example:
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - abs_bytes_diff: 0
          timestamp: timestamp
        - abs_bytes_diff: 0
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/absolute_bytes_difference_items_inner_results_inner'
          title: results
          type: array
      title: absolute_bytes_difference_items_inner
      type: object
    absolute_bytes_difference_per_editor_items_inner:
      properties:
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/absolute_bytes_difference_items_inner_results_inner'
          title: results
          type: array
        user-text:
          title: user-text
          type: string
      title: absolute_bytes_difference_per_editor_items_inner
      type: object
    absolute_bytes_difference_per_page_items_inner:
      example:
        granularity: granularity
        page-title: page-title
        project: project
        editor-type: editor-type
        results:
        - abs_bytes_diff: 0
          timestamp: timestamp
        - abs_bytes_diff: 0
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-title:
          title: page-title
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/absolute_bytes_difference_items_inner_results_inner'
          title: results
          type: array
      title: absolute_bytes_difference_per_page_items_inner
      type: object
    by_country_items_inner_countries_inner:
      example:
        country: country
        rank: 0
        views: 6
      properties:
        country:
          title: country
          type: string
        rank:
          format: int32
          title: rank
          type: integer
        views:
          format: int64
          title: views
          type: integer
      title: by_country_items_inner_countries_inner
      type: object
    by_country_items_inner:
      example:
        access: access
        month: month
        year: year
        project: project
        countries:
        - country: country
          rank: 0
          views: 6
        - country: country
          rank: 0
          views: 6
      properties:
        access:
          title: access
          type: string
        countries:
          items:
            $ref: '#/components/schemas/by_country_items_inner_countries_inner'
          title: countries
          type: array
        month:
          title: month
          type: string
        project:
          title: project
          type: string
        year:
          title: year
          type: string
      title: by_country_items_inner
      type: object
    cx_dict_translations_inner:
      example:
        phrase: phrase
        sources: sources
        info: info
      properties:
        info:
          description: extra information about the phrase
          title: info
          type: string
        phrase:
          description: the translated phrase
          title: phrase
          type: string
        sources:
          description: the source dictionary used for the translation
          title: sources
          type: string
      title: cx_dict_translations_inner
      type: object
    edited_pages_items_inner_results_inner:
      example:
        edited_pages: 0
        timestamp: timestamp
      properties:
        edited_pages:
          format: int32
          title: edited_pages
          type: integer
        timestamp:
          title: timestamp
          type: string
      title: edited_pages_items_inner_results_inner
      type: object
    edited_pages_items_inner:
      example:
        activity-level: activity-level
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - edited_pages: 0
          timestamp: timestamp
        - edited_pages: 0
          timestamp: timestamp
      properties:
        activity-level:
          title: activity-level
          type: string
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/edited_pages_items_inner_results_inner'
          title: results
          type: array
      title: edited_pages_items_inner
      type: object
    editors_items_inner_results_inner:
      example:
        editors: 0
        timestamp: timestamp
      properties:
        editors:
          format: int32
          title: editors
          type: integer
        timestamp:
          title: timestamp
          type: string
      title: editors_items_inner_results_inner
      type: object
    editors_items_inner:
      example:
        activity-level: activity-level
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - editors: 0
          timestamp: timestamp
        - editors: 0
          timestamp: timestamp
      properties:
        activity-level:
          title: activity-level
          type: string
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/editors_items_inner_results_inner'
          title: results
          type: array
      title: editors_items_inner
      type: object
    edits_items_inner_results_inner:
      example:
        edits: 0
        timestamp: timestamp
      properties:
        edits:
          format: int64
          title: edits
          type: integer
        timestamp:
          title: timestamp
          type: string
      title: edits_items_inner_results_inner
      type: object
    edits_items_inner:
      example:
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - edits: 0
          timestamp: timestamp
        - edits: 0
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/edits_items_inner_results_inner'
          title: results
          type: array
      title: edits_items_inner
      type: object
    edits_per_editor_items_inner:
      properties:
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/edits_items_inner_results_inner'
          title: results
          type: array
        user-text:
          title: user-text
          type: string
      title: edits_per_editor_items_inner
      type: object
    edits_per_page_items_inner:
      example:
        granularity: granularity
        page-title: page-title
        project: project
        editor-type: editor-type
        results:
        - edits: 0
          timestamp: timestamp
        - edits: 0
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-title:
          title: page-title
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/edits_items_inner_results_inner'
          title: results
          type: array
      title: edits_per_page_items_inner
      type: object
    net_bytes_difference_items_inner_results_inner:
      example:
        net_bytes_diff: 0
        timestamp: timestamp
      properties:
        net_bytes_diff:
          format: int64
          title: net_bytes_diff
          type: integer
        timestamp:
          title: timestamp
          type: string
      title: net_bytes_difference_items_inner_results_inner
      type: object
    net_bytes_difference_items_inner:
      example:
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - net_bytes_diff: 0
          timestamp: timestamp
        - net_bytes_diff: 0
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/net_bytes_difference_items_inner_results_inner'
          title: results
          type: array
      title: net_bytes_difference_items_inner
      type: object
    net_bytes_difference_per_editor_items_inner:
      properties:
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/net_bytes_difference_items_inner_results_inner'
          title: results
          type: array
        user-text:
          title: user-text
          type: string
      title: net_bytes_difference_per_editor_items_inner
      type: object
    net_bytes_difference_per_page_items_inner:
      example:
        granularity: granularity
        page-title: page-title
        project: project
        editor-type: editor-type
        results:
        - net_bytes_diff: 0
          timestamp: timestamp
        - net_bytes_diff: 0
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-title:
          title: page-title
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/net_bytes_difference_items_inner_results_inner'
          title: results
          type: array
      title: net_bytes_difference_per_page_items_inner
      type: object
    new_pages_items_inner_results_inner:
      example:
        new_pages: 0
        timestamp: timestamp
      properties:
        new_pages:
          format: int32
          title: new_pages
          type: integer
        timestamp:
          title: timestamp
          type: string
      title: new_pages_items_inner_results_inner
      type: object
    new_pages_items_inner:
      example:
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - new_pages: 0
          timestamp: timestamp
        - new_pages: 0
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/new_pages_items_inner_results_inner'
          title: results
          type: array
      title: new_pages_items_inner
      type: object
    new_registered_users_items_inner_results_inner:
      example:
        new_registered_users: 0
        timestamp: timestamp
      properties:
        new_registered_users:
          format: int32
          title: new_registered_users
          type: integer
        timestamp:
          title: timestamp
          type: string
      title: new_registered_users_items_inner_results_inner
      type: object
    new_registered_users_items_inner:
      example:
        granularity: granularity
        project: project
        results:
        - new_registered_users: 0
          timestamp: timestamp
        - new_registered_users: 0
          timestamp: timestamp
      properties:
        granularity:
          title: granularity
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/new_registered_users_items_inner_results_inner'
          title: results
          type: array
      title: new_registered_users_items_inner
      type: object
    pagecounts_project_items_inner:
      example:
        access-site: access-site
        granularity: granularity
        count: 0
        project: project
        timestamp: timestamp
      properties:
        access-site:
          title: access-site
          type: string
        count:
          format: int64
          title: count
          type: integer
        granularity:
          title: granularity
          type: string
        project:
          title: project
          type: string
        timestamp:
          title: timestamp
          type: string
      title: pagecounts_project_items_inner
      type: object
    pageview_article_items_inner:
      example:
        agent: agent
        access: access
        granularity: granularity
        project: project
        article: article
        views: 0
        timestamp: timestamp
      properties:
        access:
          title: access
          type: string
        agent:
          title: agent
          type: string
        article:
          title: article
          type: string
        granularity:
          title: granularity
          type: string
        project:
          title: project
          type: string
        timestamp:
          title: timestamp
          type: string
        views:
          format: int64
          title: views
          type: integer
      title: pageview_article_items_inner
      type: object
    pageview_project_items_inner:
      example:
        agent: agent
        access: access
        granularity: granularity
        project: project
        views: 0
        timestamp: timestamp
      properties:
        access:
          title: access
          type: string
        agent:
          title: agent
          type: string
        granularity:
          title: granularity
          type: string
        project:
          title: project
          type: string
        timestamp:
          title: timestamp
          type: string
        views:
          format: int64
          title: views
          type: integer
      title: pageview_project_items_inner
      type: object
    pageview_tops_items_inner_articles_inner:
      example:
        rank: 0
        article: article
        views: 6
      properties:
        article:
          title: article
          type: string
        rank:
          format: int32
          title: rank
          type: integer
        views:
          format: int64
          title: views
          type: integer
      title: pageview_tops_items_inner_articles_inner
      type: object
    pageview_tops_items_inner:
      example:
        access: access
        month: month
        year: year
        project: project
        articles:
        - rank: 0
          article: article
          views: 6
        - rank: 0
          article: article
          views: 6
        day: day
      properties:
        access:
          title: access
          type: string
        articles:
          items:
            $ref: '#/components/schemas/pageview_tops_items_inner_articles_inner'
          title: articles
          type: array
        day:
          title: day
          type: string
        month:
          title: month
          type: string
        project:
          title: project
          type: string
        year:
          title: year
          type: string
      title: pageview_tops_items_inner
      type: object
    summary_coordinates:
      description: The coordinates of the item
      properties:
        lat:
          description: The latitude
          title: lat
          type: number
        lon:
          description: The longitude
          title: lon
          type: number
      required:
      - lat
      - lon
      title: summary_coordinates
      type: object
    top_edited_pages_by_abs_bytes_diff_items_inner_results_inner_top_inner:
      example:
        page_title: page_title
        rank: 6
        abs_bytes_diff: 0
      properties:
        abs_bytes_diff:
          format: int64
          title: abs_bytes_diff
          type: integer
        page_title:
          title: page_title
          type: string
        rank:
          format: int32
          title: rank
          type: integer
      title: top_edited_pages_by_abs_bytes_diff_items_inner_results_inner_top_inner
      type: object
    top_edited_pages_by_abs_bytes_diff_items_inner_results_inner:
      example:
        top:
        - page_title: page_title
          rank: 6
          abs_bytes_diff: 0
        - page_title: page_title
          rank: 6
          abs_bytes_diff: 0
        timestamp: timestamp
      properties:
        timestamp:
          title: timestamp
          type: string
        top:
          items:
            $ref: '#/components/schemas/top_edited_pages_by_abs_bytes_diff_items_inner_results_inner_top_inner'
          title: top
          type: array
      title: top_edited_pages_by_abs_bytes_diff_items_inner_results_inner
      type: object
    top_edited_pages_by_abs_bytes_diff_items_inner:
      example:
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - top:
          - page_title: page_title
            rank: 6
            abs_bytes_diff: 0
          - page_title: page_title
            rank: 6
            abs_bytes_diff: 0
          timestamp: timestamp
        - top:
          - page_title: page_title
            rank: 6
            abs_bytes_diff: 0
          - page_title: page_title
            rank: 6
            abs_bytes_diff: 0
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/top_edited_pages_by_abs_bytes_diff_items_inner_results_inner'
          title: results
          type: array
      title: top_edited_pages_by_abs_bytes_diff_items_inner
      type: object
    top_edited_pages_by_edits_items_inner_results_inner_top_inner:
      example:
        page_title: page_title
        edits: 0
        rank: 6
      properties:
        edits:
          format: int64
          title: edits
          type: integer
        page_title:
          title: page_title
          type: string
        rank:
          format: int32
          title: rank
          type: integer
      title: top_edited_pages_by_edits_items_inner_results_inner_top_inner
      type: object
    top_edited_pages_by_edits_items_inner_results_inner:
      example:
        top:
        - page_title: page_title
          edits: 0
          rank: 6
        - page_title: page_title
          edits: 0
          rank: 6
        timestamp: timestamp
      properties:
        timestamp:
          title: timestamp
          type: string
        top:
          items:
            $ref: '#/components/schemas/top_edited_pages_by_edits_items_inner_results_inner_top_inner'
          title: top
          type: array
      title: top_edited_pages_by_edits_items_inner_results_inner
      type: object
    top_edited_pages_by_edits_items_inner:
      example:
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - top:
          - page_title: page_title
            edits: 0
            rank: 6
          - page_title: page_title
            edits: 0
            rank: 6
          timestamp: timestamp
        - top:
          - page_title: page_title
            edits: 0
            rank: 6
          - page_title: page_title
            edits: 0
            rank: 6
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/top_edited_pages_by_edits_items_inner_results_inner'
          title: results
          type: array
      title: top_edited_pages_by_edits_items_inner
      type: object
    top_edited_pages_by_net_bytes_diff_items_inner_results_inner_top_inner:
      example:
        page_title: page_title
        rank: 6
        net_bytes_diff: 0
      properties:
        net_bytes_diff:
          format: int64
          title: net_bytes_diff
          type: integer
        page_title:
          title: page_title
          type: string
        rank:
          format: int32
          title: rank
          type: integer
      title: top_edited_pages_by_net_bytes_diff_items_inner_results_inner_top_inner
      type: object
    top_edited_pages_by_net_bytes_diff_items_inner_results_inner:
      example:
        top:
        - page_title: page_title
          rank: 6
          net_bytes_diff: 0
        - page_title: page_title
          rank: 6
          net_bytes_diff: 0
        timestamp: timestamp
      properties:
        timestamp:
          title: timestamp
          type: string
        top:
          items:
            $ref: '#/components/schemas/top_edited_pages_by_net_bytes_diff_items_inner_results_inner_top_inner'
          title: top
          type: array
      title: top_edited_pages_by_net_bytes_diff_items_inner_results_inner
      type: object
    top_edited_pages_by_net_bytes_diff_items_inner:
      example:
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - top:
          - page_title: page_title
            rank: 6
            net_bytes_diff: 0
          - page_title: page_title
            rank: 6
            net_bytes_diff: 0
          timestamp: timestamp
        - top:
          - page_title: page_title
            rank: 6
            net_bytes_diff: 0
          - page_title: page_title
            rank: 6
            net_bytes_diff: 0
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/top_edited_pages_by_net_bytes_diff_items_inner_results_inner'
          title: results
          type: array
      title: top_edited_pages_by_net_bytes_diff_items_inner
      type: object
    top_editors_by_abs_bytes_diff_items_inner_results_inner_top_inner:
      example:
        rank: 6
        user_text: user_text
        abs_bytes_diff: 0
      properties:
        abs_bytes_diff:
          format: int64
          title: abs_bytes_diff
          type: integer
        rank:
          format: int32
          title: rank
          type: integer
        user_text:
          title: user_text
          type: string
      title: top_editors_by_abs_bytes_diff_items_inner_results_inner_top_inner
      type: object
    top_editors_by_abs_bytes_diff_items_inner_results_inner:
      example:
        top:
        - rank: 6
          user_text: user_text
          abs_bytes_diff: 0
        - rank: 6
          user_text: user_text
          abs_bytes_diff: 0
        timestamp: timestamp
      properties:
        timestamp:
          title: timestamp
          type: string
        top:
          items:
            $ref: '#/components/schemas/top_editors_by_abs_bytes_diff_items_inner_results_inner_top_inner'
          title: top
          type: array
      title: top_editors_by_abs_bytes_diff_items_inner_results_inner
      type: object
    top_editors_by_abs_bytes_diff_items_inner:
      example:
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - top:
          - rank: 6
            user_text: user_text
            abs_bytes_diff: 0
          - rank: 6
            user_text: user_text
            abs_bytes_diff: 0
          timestamp: timestamp
        - top:
          - rank: 6
            user_text: user_text
            abs_bytes_diff: 0
          - rank: 6
            user_text: user_text
            abs_bytes_diff: 0
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/top_editors_by_abs_bytes_diff_items_inner_results_inner'
          title: results
          type: array
      title: top_editors_by_abs_bytes_diff_items_inner
      type: object
    top_editors_by_edits_items_inner_results_inner_top_inner:
      example:
        edits: 0
        rank: 6
        user_text: user_text
      properties:
        edits:
          format: int64
          title: edits
          type: integer
        rank:
          format: int32
          title: rank
          type: integer
        user_text:
          title: user_text
          type: string
      title: top_editors_by_edits_items_inner_results_inner_top_inner
      type: object
    top_editors_by_edits_items_inner_results_inner:
      example:
        top:
        - edits: 0
          rank: 6
          user_text: user_text
        - edits: 0
          rank: 6
          user_text: user_text
        timestamp: timestamp
      properties:
        timestamp:
          title: timestamp
          type: string
        top:
          items:
            $ref: '#/components/schemas/top_editors_by_edits_items_inner_results_inner_top_inner'
          title: top
          type: array
      title: top_editors_by_edits_items_inner_results_inner
      type: object
    top_editors_by_edits_items_inner:
      example:
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - top:
          - edits: 0
            rank: 6
            user_text: user_text
          - edits: 0
            rank: 6
            user_text: user_text
          timestamp: timestamp
        - top:
          - edits: 0
            rank: 6
            user_text: user_text
          - edits: 0
            rank: 6
            user_text: user_text
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/top_editors_by_edits_items_inner_results_inner'
          title: results
          type: array
      title: top_editors_by_edits_items_inner
      type: object
    top_editors_by_net_bytes_diff_items_inner_results_inner_top_inner:
      example:
        rank: 6
        net_bytes_diff: 0
        user_text: user_text
      properties:
        net_bytes_diff:
          format: int64
          title: net_bytes_diff
          type: integer
        rank:
          format: int32
          title: rank
          type: integer
        user_text:
          title: user_text
          type: string
      title: top_editors_by_net_bytes_diff_items_inner_results_inner_top_inner
      type: object
    top_editors_by_net_bytes_diff_items_inner_results_inner:
      example:
        top:
        - rank: 6
          net_bytes_diff: 0
          user_text: user_text
        - rank: 6
          net_bytes_diff: 0
          user_text: user_text
        timestamp: timestamp
      properties:
        timestamp:
          title: timestamp
          type: string
        top:
          items:
            $ref: '#/components/schemas/top_editors_by_net_bytes_diff_items_inner_results_inner_top_inner'
          title: top
          type: array
      title: top_editors_by_net_bytes_diff_items_inner_results_inner
      type: object
    top_editors_by_net_bytes_diff_items_inner:
      example:
        granularity: granularity
        page-type: page-type
        project: project
        editor-type: editor-type
        results:
        - top:
          - rank: 6
            net_bytes_diff: 0
            user_text: user_text
          - rank: 6
            net_bytes_diff: 0
            user_text: user_text
          timestamp: timestamp
        - top:
          - rank: 6
            net_bytes_diff: 0
            user_text: user_text
          - rank: 6
            net_bytes_diff: 0
            user_text: user_text
          timestamp: timestamp
      properties:
        editor-type:
          title: editor-type
          type: string
        granularity:
          title: granularity
          type: string
        page-type:
          title: page-type
          type: string
        project:
          title: project
          type: string
        results:
          items:
            $ref: '#/components/schemas/top_editors_by_net_bytes_diff_items_inner_results_inner'
          title: results
          type: array
      title: top_editors_by_net_bytes_diff_items_inner
      type: object
    unique_devices_items_inner:
      example:
        devices: 0
        access-site: access-site
        granularity: granularity
        project: project
        timestamp: timestamp
      properties:
        access-site:
          title: access-site
          type: string
        devices:
          format: int64
          title: devices
          type: integer
        granularity:
          title: granularity
          type: string
        project:
          title: project
          type: string
        timestamp:
          title: timestamp
          type: string
      title: unique_devices_items_inner
      type: object
  securitySchemes:
    mediawiki_auth:
      description: Checks permissions using MW api
      in: header
      name: cookie
      type: apiKey
      x-internal-request-whitelist:
      - "/http:\\/\\/[a-zA-Z0-9\\.]+\\/w\\/api\\.php/"
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_mediawiki_auth
x-default-params: {}
x-host-basePath: /api/rest_v1
x-original-swagger-version: "2.0"
