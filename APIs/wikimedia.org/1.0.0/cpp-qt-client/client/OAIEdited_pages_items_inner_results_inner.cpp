/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdited_pages_items_inner_results_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdited_pages_items_inner_results_inner::OAIEdited_pages_items_inner_results_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdited_pages_items_inner_results_inner::OAIEdited_pages_items_inner_results_inner() {
    this->initializeModel();
}

OAIEdited_pages_items_inner_results_inner::~OAIEdited_pages_items_inner_results_inner() {}

void OAIEdited_pages_items_inner_results_inner::initializeModel() {

    m_edited_pages_isSet = false;
    m_edited_pages_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIEdited_pages_items_inner_results_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdited_pages_items_inner_results_inner::fromJsonObject(QJsonObject json) {

    m_edited_pages_isValid = ::OpenAPI::fromJsonValue(m_edited_pages, json[QString("edited_pages")]);
    m_edited_pages_isSet = !json[QString("edited_pages")].isNull() && m_edited_pages_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIEdited_pages_items_inner_results_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdited_pages_items_inner_results_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_edited_pages_isSet) {
        obj.insert(QString("edited_pages"), ::OpenAPI::toJsonValue(m_edited_pages));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

qint32 OAIEdited_pages_items_inner_results_inner::getEditedPages() const {
    return m_edited_pages;
}
void OAIEdited_pages_items_inner_results_inner::setEditedPages(const qint32 &edited_pages) {
    m_edited_pages = edited_pages;
    m_edited_pages_isSet = true;
}

bool OAIEdited_pages_items_inner_results_inner::is_edited_pages_Set() const{
    return m_edited_pages_isSet;
}

bool OAIEdited_pages_items_inner_results_inner::is_edited_pages_Valid() const{
    return m_edited_pages_isValid;
}

QString OAIEdited_pages_items_inner_results_inner::getTimestamp() const {
    return m_timestamp;
}
void OAIEdited_pages_items_inner_results_inner::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIEdited_pages_items_inner_results_inner::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIEdited_pages_items_inner_results_inner::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIEdited_pages_items_inner_results_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_edited_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdited_pages_items_inner_results_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
