/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEditedPagesDataApi_H
#define OAI_OAIEditedPagesDataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEdited_pages.h"
#include "OAINew_pages.h"
#include "OAIProblem.h"
#include "OAITop_edited_pages_by_abs_bytes_diff.h"
#include "OAITop_edited_pages_by_edits.h"
#include "OAITop_edited_pages_by_net_bytes_diff.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEditedPagesDataApi : public QObject {
    Q_OBJECT

public:
    OAIEditedPagesDataApi(const int timeOut = 0);
    ~OAIEditedPagesDataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project QString [required]
    * @param[in]  editor_type QString [required]
    * @param[in]  page_type QString [required]
    * @param[in]  activity_level QString [required]
    * @param[in]  granularity QString [required]
    * @param[in]  start QString [required]
    * @param[in]  end QString [required]
    */
    virtual void metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet(const QString &project, const QString &editor_type, const QString &page_type, const QString &activity_level, const QString &granularity, const QString &start, const QString &end);

    /**
    * @param[in]  project QString [required]
    * @param[in]  editor_type QString [required]
    * @param[in]  page_type QString [required]
    * @param[in]  granularity QString [required]
    * @param[in]  start QString [required]
    * @param[in]  end QString [required]
    */
    virtual void metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGet(const QString &project, const QString &editor_type, const QString &page_type, const QString &granularity, const QString &start, const QString &end);

    /**
    * @param[in]  project QString [required]
    * @param[in]  editor_type QString [required]
    * @param[in]  page_type QString [required]
    * @param[in]  year QString [required]
    * @param[in]  month QString [required]
    * @param[in]  day QString [required]
    */
    virtual void metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet(const QString &project, const QString &editor_type, const QString &page_type, const QString &year, const QString &month, const QString &day);

    /**
    * @param[in]  project QString [required]
    * @param[in]  editor_type QString [required]
    * @param[in]  page_type QString [required]
    * @param[in]  year QString [required]
    * @param[in]  month QString [required]
    * @param[in]  day QString [required]
    */
    virtual void metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGet(const QString &project, const QString &editor_type, const QString &page_type, const QString &year, const QString &month, const QString &day);

    /**
    * @param[in]  project QString [required]
    * @param[in]  editor_type QString [required]
    * @param[in]  page_type QString [required]
    * @param[in]  year QString [required]
    * @param[in]  month QString [required]
    * @param[in]  day QString [required]
    */
    virtual void metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet(const QString &project, const QString &editor_type, const QString &page_type, const QString &year, const QString &month, const QString &day);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetCallback(OAIHttpRequestWorker *worker);
    void metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGetCallback(OAIHttpRequestWorker *worker);
    void metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetCallback(OAIHttpRequestWorker *worker);
    void metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGetCallback(OAIHttpRequestWorker *worker);
    void metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignal(OAIEdited_pages summary);
    void metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGetSignal(OAINew_pages summary);
    void metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignal(OAITop_edited_pages_by_abs_bytes_diff summary);
    void metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignal(OAITop_edited_pages_by_edits summary);
    void metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignal(OAITop_edited_pages_by_net_bytes_diff summary);


    void metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalFull(OAIHttpRequestWorker *worker, OAIEdited_pages summary);
    void metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGetSignalFull(OAIHttpRequestWorker *worker, OAINew_pages summary);
    void metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalFull(OAIHttpRequestWorker *worker, OAITop_edited_pages_by_abs_bytes_diff summary);
    void metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalFull(OAIHttpRequestWorker *worker, OAITop_edited_pages_by_edits summary);
    void metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalFull(OAIHttpRequestWorker *worker, OAITop_edited_pages_by_net_bytes_diff summary);

    Q_DECL_DEPRECATED_X("Use metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalError() instead")
    void metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalE(OAIEdited_pages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalError(OAIEdited_pages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGetSignalError() instead")
    void metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGetSignalE(OAINew_pages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGetSignalError(OAINew_pages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalError() instead")
    void metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalE(OAITop_edited_pages_by_abs_bytes_diff summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalError(OAITop_edited_pages_by_abs_bytes_diff summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalError() instead")
    void metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalE(OAITop_edited_pages_by_edits summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalError(OAITop_edited_pages_by_edits summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalError() instead")
    void metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalE(OAITop_edited_pages_by_net_bytes_diff summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalError(OAITop_edited_pages_by_net_bytes_diff summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalErrorFull() instead")
    void metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsEditedPagesAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGetSignalErrorFull() instead")
    void metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsEditedPagesNewProjectEditorTypePageTypeGranularityStartEndGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalErrorFull() instead")
    void metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsEditedPagesTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalErrorFull() instead")
    void metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsEditedPagesTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalErrorFull() instead")
    void metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsEditedPagesTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
