/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITransformApi::OAITransformApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITransformApi::~OAITransformApi() {
}

void OAITransformApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://wikimedia.org/api/rest_v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("transformHtmlFromFromLangToToLangPost", defaultConf);
    _serverIndices.insert("transformHtmlFromFromLangToToLangPost", 0);
    _serverConfigs.insert("transformHtmlFromFromLangToToLangProviderPost", defaultConf);
    _serverIndices.insert("transformHtmlFromFromLangToToLangProviderPost", 0);
    _serverConfigs.insert("transformListLanguagepairsGet", defaultConf);
    _serverIndices.insert("transformListLanguagepairsGet", 0);
    _serverConfigs.insert("transformListPairFromToGet", defaultConf);
    _serverIndices.insert("transformListPairFromToGet", 0);
    _serverConfigs.insert("transformListToolToolFromGet", defaultConf);
    _serverIndices.insert("transformListToolToolFromGet", 0);
    _serverConfigs.insert("transformListToolToolFromToGet", defaultConf);
    _serverIndices.insert("transformListToolToolFromToGet", 0);
    _serverConfigs.insert("transformListToolToolGet", defaultConf);
    _serverIndices.insert("transformListToolToolGet", 0);
    _serverConfigs.insert("transformWordFromFromLangToToLangWordGet", defaultConf);
    _serverIndices.insert("transformWordFromFromLangToToLangWordGet", 0);
    _serverConfigs.insert("transformWordFromFromLangToToLangWordProviderGet", defaultConf);
    _serverIndices.insert("transformWordFromFromLangToToLangWordProviderGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITransformApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITransformApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITransformApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITransformApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITransformApi::setUsername(const QString &username) {
    _username = username;
}

void OAITransformApi::setPassword(const QString &password) {
    _password = password;
}


void OAITransformApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITransformApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITransformApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITransformApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITransformApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITransformApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITransformApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITransformApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITransformApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITransformApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITransformApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITransformApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITransformApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITransformApi::transformHtmlFromFromLangToToLangPost(const QString &from_lang, const QString &to_lang, const QString &html) {
    QString fullPath = QString(_serverConfigs["transformHtmlFromFromLangToToLangPost"][_serverIndices.value("transformHtmlFromFromLangToToLangPost")].URL()+"/transform/html/from/{from_lang}/to/{to_lang}");
    
    
    {
        QString from_langPathParam("{");
        from_langPathParam.append("from_lang").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "from_lang", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"from_lang"+pathSuffix : pathPrefix;
        fullPath.replace(from_langPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(from_lang)));
    }
    
    {
        QString to_langPathParam("{");
        to_langPathParam.append("to_lang").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "to_lang", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"to_lang"+pathSuffix : pathPrefix;
        fullPath.replace(to_langPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(to_lang)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("html", ::OpenAPI::toStringValue(html));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransformApi::transformHtmlFromFromLangToToLangPostCallback);
    connect(this, &OAITransformApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransformApi::transformHtmlFromFromLangToToLangPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICx_mt output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transformHtmlFromFromLangToToLangPostSignal(output);
        Q_EMIT transformHtmlFromFromLangToToLangPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transformHtmlFromFromLangToToLangPostSignalE(output, error_type, error_str);
        Q_EMIT transformHtmlFromFromLangToToLangPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transformHtmlFromFromLangToToLangPostSignalError(output, error_type, error_str);
        Q_EMIT transformHtmlFromFromLangToToLangPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransformApi::transformHtmlFromFromLangToToLangProviderPost(const QString &from_lang, const QString &to_lang, const QString &provider, const QString &html) {
    QString fullPath = QString(_serverConfigs["transformHtmlFromFromLangToToLangProviderPost"][_serverIndices.value("transformHtmlFromFromLangToToLangProviderPost")].URL()+"/transform/html/from/{from_lang}/to/{to_lang}/{provider}");
    
    
    {
        QString from_langPathParam("{");
        from_langPathParam.append("from_lang").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "from_lang", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"from_lang"+pathSuffix : pathPrefix;
        fullPath.replace(from_langPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(from_lang)));
    }
    
    {
        QString to_langPathParam("{");
        to_langPathParam.append("to_lang").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "to_lang", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"to_lang"+pathSuffix : pathPrefix;
        fullPath.replace(to_langPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(to_lang)));
    }
    
    {
        QString providerPathParam("{");
        providerPathParam.append("provider").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "provider", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"provider"+pathSuffix : pathPrefix;
        fullPath.replace(providerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(provider)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("html", ::OpenAPI::toStringValue(html));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransformApi::transformHtmlFromFromLangToToLangProviderPostCallback);
    connect(this, &OAITransformApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransformApi::transformHtmlFromFromLangToToLangProviderPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICx_mt output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transformHtmlFromFromLangToToLangProviderPostSignal(output);
        Q_EMIT transformHtmlFromFromLangToToLangProviderPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transformHtmlFromFromLangToToLangProviderPostSignalE(output, error_type, error_str);
        Q_EMIT transformHtmlFromFromLangToToLangProviderPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transformHtmlFromFromLangToToLangProviderPostSignalError(output, error_type, error_str);
        Q_EMIT transformHtmlFromFromLangToToLangProviderPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransformApi::transformListLanguagepairsGet() {
    QString fullPath = QString(_serverConfigs["transformListLanguagepairsGet"][_serverIndices.value("transformListLanguagepairsGet")].URL()+"/transform/list/languagepairs/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransformApi::transformListLanguagepairsGetCallback);
    connect(this, &OAITransformApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransformApi::transformListLanguagepairsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICx_languagepairs output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transformListLanguagepairsGetSignal(output);
        Q_EMIT transformListLanguagepairsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transformListLanguagepairsGetSignalE(output, error_type, error_str);
        Q_EMIT transformListLanguagepairsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transformListLanguagepairsGetSignalError(output, error_type, error_str);
        Q_EMIT transformListLanguagepairsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransformApi::transformListPairFromToGet(const QString &from, const QString &to) {
    QString fullPath = QString(_serverConfigs["transformListPairFromToGet"][_serverIndices.value("transformListPairFromToGet")].URL()+"/transform/list/pair/{from}/{to}/");
    
    
    {
        QString fromPathParam("{");
        fromPathParam.append("from").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "from", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"from"+pathSuffix : pathPrefix;
        fullPath.replace(fromPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(from)));
    }
    
    {
        QString toPathParam("{");
        toPathParam.append("to").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "to", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"to"+pathSuffix : pathPrefix;
        fullPath.replace(toPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(to)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransformApi::transformListPairFromToGetCallback);
    connect(this, &OAITransformApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransformApi::transformListPairFromToGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICx_list_tools output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transformListPairFromToGetSignal(output);
        Q_EMIT transformListPairFromToGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transformListPairFromToGetSignalE(output, error_type, error_str);
        Q_EMIT transformListPairFromToGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transformListPairFromToGetSignalError(output, error_type, error_str);
        Q_EMIT transformListPairFromToGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransformApi::transformListToolToolFromGet(const QString &tool, const QString &from) {
    QString fullPath = QString(_serverConfigs["transformListToolToolFromGet"][_serverIndices.value("transformListToolToolFromGet")].URL()+"/transform/list/tool/{tool}/{from}");
    
    
    {
        QString toolPathParam("{");
        toolPathParam.append("tool").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tool", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tool"+pathSuffix : pathPrefix;
        fullPath.replace(toolPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tool)));
    }
    
    {
        QString fromPathParam("{");
        fromPathParam.append("from").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "from", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"from"+pathSuffix : pathPrefix;
        fullPath.replace(fromPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(from)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransformApi::transformListToolToolFromGetCallback);
    connect(this, &OAITransformApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransformApi::transformListToolToolFromGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transformListToolToolFromGetSignal(output);
        Q_EMIT transformListToolToolFromGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transformListToolToolFromGetSignalE(output, error_type, error_str);
        Q_EMIT transformListToolToolFromGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transformListToolToolFromGetSignalError(output, error_type, error_str);
        Q_EMIT transformListToolToolFromGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransformApi::transformListToolToolFromToGet(const QString &tool, const QString &from, const QString &to) {
    QString fullPath = QString(_serverConfigs["transformListToolToolFromToGet"][_serverIndices.value("transformListToolToolFromToGet")].URL()+"/transform/list/tool/{tool}/{from}/{to}");
    
    
    {
        QString toolPathParam("{");
        toolPathParam.append("tool").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tool", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tool"+pathSuffix : pathPrefix;
        fullPath.replace(toolPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tool)));
    }
    
    {
        QString fromPathParam("{");
        fromPathParam.append("from").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "from", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"from"+pathSuffix : pathPrefix;
        fullPath.replace(fromPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(from)));
    }
    
    {
        QString toPathParam("{");
        toPathParam.append("to").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "to", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"to"+pathSuffix : pathPrefix;
        fullPath.replace(toPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(to)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransformApi::transformListToolToolFromToGetCallback);
    connect(this, &OAITransformApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransformApi::transformListToolToolFromToGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transformListToolToolFromToGetSignal(output);
        Q_EMIT transformListToolToolFromToGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transformListToolToolFromToGetSignalE(output, error_type, error_str);
        Q_EMIT transformListToolToolFromToGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transformListToolToolFromToGetSignalError(output, error_type, error_str);
        Q_EMIT transformListToolToolFromToGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransformApi::transformListToolToolGet(const QString &tool) {
    QString fullPath = QString(_serverConfigs["transformListToolToolGet"][_serverIndices.value("transformListToolToolGet")].URL()+"/transform/list/tool/{tool}");
    
    
    {
        QString toolPathParam("{");
        toolPathParam.append("tool").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tool", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tool"+pathSuffix : pathPrefix;
        fullPath.replace(toolPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tool)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransformApi::transformListToolToolGetCallback);
    connect(this, &OAITransformApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransformApi::transformListToolToolGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transformListToolToolGetSignal(output);
        Q_EMIT transformListToolToolGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transformListToolToolGetSignalE(output, error_type, error_str);
        Q_EMIT transformListToolToolGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transformListToolToolGetSignalError(output, error_type, error_str);
        Q_EMIT transformListToolToolGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransformApi::transformWordFromFromLangToToLangWordGet(const QString &from_lang, const QString &to_lang, const QString &word) {
    QString fullPath = QString(_serverConfigs["transformWordFromFromLangToToLangWordGet"][_serverIndices.value("transformWordFromFromLangToToLangWordGet")].URL()+"/transform/word/from/{from_lang}/to/{to_lang}/{word}");
    
    
    {
        QString from_langPathParam("{");
        from_langPathParam.append("from_lang").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "from_lang", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"from_lang"+pathSuffix : pathPrefix;
        fullPath.replace(from_langPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(from_lang)));
    }
    
    {
        QString to_langPathParam("{");
        to_langPathParam.append("to_lang").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "to_lang", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"to_lang"+pathSuffix : pathPrefix;
        fullPath.replace(to_langPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(to_lang)));
    }
    
    {
        QString wordPathParam("{");
        wordPathParam.append("word").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "word", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"word"+pathSuffix : pathPrefix;
        fullPath.replace(wordPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(word)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransformApi::transformWordFromFromLangToToLangWordGetCallback);
    connect(this, &OAITransformApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransformApi::transformWordFromFromLangToToLangWordGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICx_dict output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transformWordFromFromLangToToLangWordGetSignal(output);
        Q_EMIT transformWordFromFromLangToToLangWordGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transformWordFromFromLangToToLangWordGetSignalE(output, error_type, error_str);
        Q_EMIT transformWordFromFromLangToToLangWordGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transformWordFromFromLangToToLangWordGetSignalError(output, error_type, error_str);
        Q_EMIT transformWordFromFromLangToToLangWordGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransformApi::transformWordFromFromLangToToLangWordProviderGet(const QString &from_lang, const QString &to_lang, const QString &word, const QString &provider) {
    QString fullPath = QString(_serverConfigs["transformWordFromFromLangToToLangWordProviderGet"][_serverIndices.value("transformWordFromFromLangToToLangWordProviderGet")].URL()+"/transform/word/from/{from_lang}/to/{to_lang}/{word}/{provider}");
    
    
    {
        QString from_langPathParam("{");
        from_langPathParam.append("from_lang").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "from_lang", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"from_lang"+pathSuffix : pathPrefix;
        fullPath.replace(from_langPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(from_lang)));
    }
    
    {
        QString to_langPathParam("{");
        to_langPathParam.append("to_lang").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "to_lang", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"to_lang"+pathSuffix : pathPrefix;
        fullPath.replace(to_langPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(to_lang)));
    }
    
    {
        QString wordPathParam("{");
        wordPathParam.append("word").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "word", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"word"+pathSuffix : pathPrefix;
        fullPath.replace(wordPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(word)));
    }
    
    {
        QString providerPathParam("{");
        providerPathParam.append("provider").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "provider", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"provider"+pathSuffix : pathPrefix;
        fullPath.replace(providerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(provider)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransformApi::transformWordFromFromLangToToLangWordProviderGetCallback);
    connect(this, &OAITransformApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransformApi::transformWordFromFromLangToToLangWordProviderGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICx_dict output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transformWordFromFromLangToToLangWordProviderGetSignal(output);
        Q_EMIT transformWordFromFromLangToToLangWordProviderGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transformWordFromFromLangToToLangWordProviderGetSignalE(output, error_type, error_str);
        Q_EMIT transformWordFromFromLangToToLangWordProviderGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transformWordFromFromLangToToLangWordProviderGetSignalError(output, error_type, error_str);
        Q_EMIT transformWordFromFromLangToToLangWordProviderGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransformApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
