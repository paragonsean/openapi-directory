/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageview_tops_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageview_tops_items_inner::OAIPageview_tops_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageview_tops_items_inner::OAIPageview_tops_items_inner() {
    this->initializeModel();
}

OAIPageview_tops_items_inner::~OAIPageview_tops_items_inner() {}

void OAIPageview_tops_items_inner::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_articles_isSet = false;
    m_articles_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIPageview_tops_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageview_tops_items_inner::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_articles_isValid = ::OpenAPI::fromJsonValue(m_articles, json[QString("articles")]);
    m_articles_isSet = !json[QString("articles")].isNull() && m_articles_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIPageview_tops_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageview_tops_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_articles.size() > 0) {
        obj.insert(QString("articles"), ::OpenAPI::toJsonValue(m_articles));
    }
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIPageview_tops_items_inner::getAccess() const {
    return m_access;
}
void OAIPageview_tops_items_inner::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIPageview_tops_items_inner::is_access_Set() const{
    return m_access_isSet;
}

bool OAIPageview_tops_items_inner::is_access_Valid() const{
    return m_access_isValid;
}

QList<OAIPageview_tops_items_inner_articles_inner> OAIPageview_tops_items_inner::getArticles() const {
    return m_articles;
}
void OAIPageview_tops_items_inner::setArticles(const QList<OAIPageview_tops_items_inner_articles_inner> &articles) {
    m_articles = articles;
    m_articles_isSet = true;
}

bool OAIPageview_tops_items_inner::is_articles_Set() const{
    return m_articles_isSet;
}

bool OAIPageview_tops_items_inner::is_articles_Valid() const{
    return m_articles_isValid;
}

QString OAIPageview_tops_items_inner::getDay() const {
    return m_day;
}
void OAIPageview_tops_items_inner::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIPageview_tops_items_inner::is_day_Set() const{
    return m_day_isSet;
}

bool OAIPageview_tops_items_inner::is_day_Valid() const{
    return m_day_isValid;
}

QString OAIPageview_tops_items_inner::getMonth() const {
    return m_month;
}
void OAIPageview_tops_items_inner::setMonth(const QString &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIPageview_tops_items_inner::is_month_Set() const{
    return m_month_isSet;
}

bool OAIPageview_tops_items_inner::is_month_Valid() const{
    return m_month_isValid;
}

QString OAIPageview_tops_items_inner::getProject() const {
    return m_project;
}
void OAIPageview_tops_items_inner::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIPageview_tops_items_inner::is_project_Set() const{
    return m_project_isSet;
}

bool OAIPageview_tops_items_inner::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIPageview_tops_items_inner::getYear() const {
    return m_year;
}
void OAIPageview_tops_items_inner::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIPageview_tops_items_inner::is_year_Set() const{
    return m_year_isSet;
}

bool OAIPageview_tops_items_inner::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIPageview_tops_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_articles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageview_tops_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
