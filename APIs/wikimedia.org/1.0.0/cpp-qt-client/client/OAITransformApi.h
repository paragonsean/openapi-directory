/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransformApi_H
#define OAI_OAITransformApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICx_dict.h"
#include "OAICx_languagepairs.h"
#include "OAICx_list_tools.h"
#include "OAICx_mt.h"
#include "OAIObject.h"
#include "OAIProblem.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransformApi : public QObject {
    Q_OBJECT

public:
    OAITransformApi(const int timeOut = 0);
    ~OAITransformApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  from_lang QString [required]
    * @param[in]  to_lang QString [required]
    * @param[in]  html QString [required]
    */
    virtual void transformHtmlFromFromLangToToLangPost(const QString &from_lang, const QString &to_lang, const QString &html);

    /**
    * @param[in]  from_lang QString [required]
    * @param[in]  to_lang QString [required]
    * @param[in]  provider QString [required]
    * @param[in]  html QString [required]
    */
    virtual void transformHtmlFromFromLangToToLangProviderPost(const QString &from_lang, const QString &to_lang, const QString &provider, const QString &html);


    virtual void transformListLanguagepairsGet();

    /**
    * @param[in]  from QString [required]
    * @param[in]  to QString [required]
    */
    virtual void transformListPairFromToGet(const QString &from, const QString &to);

    /**
    * @param[in]  tool QString [required]
    * @param[in]  from QString [required]
    */
    virtual void transformListToolToolFromGet(const QString &tool, const QString &from);

    /**
    * @param[in]  tool QString [required]
    * @param[in]  from QString [required]
    * @param[in]  to QString [required]
    */
    virtual void transformListToolToolFromToGet(const QString &tool, const QString &from, const QString &to);

    /**
    * @param[in]  tool QString [required]
    */
    virtual void transformListToolToolGet(const QString &tool);

    /**
    * @param[in]  from_lang QString [required]
    * @param[in]  to_lang QString [required]
    * @param[in]  word QString [required]
    */
    virtual void transformWordFromFromLangToToLangWordGet(const QString &from_lang, const QString &to_lang, const QString &word);

    /**
    * @param[in]  from_lang QString [required]
    * @param[in]  to_lang QString [required]
    * @param[in]  word QString [required]
    * @param[in]  provider QString [required]
    */
    virtual void transformWordFromFromLangToToLangWordProviderGet(const QString &from_lang, const QString &to_lang, const QString &word, const QString &provider);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void transformHtmlFromFromLangToToLangPostCallback(OAIHttpRequestWorker *worker);
    void transformHtmlFromFromLangToToLangProviderPostCallback(OAIHttpRequestWorker *worker);
    void transformListLanguagepairsGetCallback(OAIHttpRequestWorker *worker);
    void transformListPairFromToGetCallback(OAIHttpRequestWorker *worker);
    void transformListToolToolFromGetCallback(OAIHttpRequestWorker *worker);
    void transformListToolToolFromToGetCallback(OAIHttpRequestWorker *worker);
    void transformListToolToolGetCallback(OAIHttpRequestWorker *worker);
    void transformWordFromFromLangToToLangWordGetCallback(OAIHttpRequestWorker *worker);
    void transformWordFromFromLangToToLangWordProviderGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void transformHtmlFromFromLangToToLangPostSignal(OAICx_mt summary);
    void transformHtmlFromFromLangToToLangProviderPostSignal(OAICx_mt summary);
    void transformListLanguagepairsGetSignal(OAICx_languagepairs summary);
    void transformListPairFromToGetSignal(OAICx_list_tools summary);
    void transformListToolToolFromGetSignal(OAIObject summary);
    void transformListToolToolFromToGetSignal(OAIObject summary);
    void transformListToolToolGetSignal(OAIObject summary);
    void transformWordFromFromLangToToLangWordGetSignal(OAICx_dict summary);
    void transformWordFromFromLangToToLangWordProviderGetSignal(OAICx_dict summary);


    void transformHtmlFromFromLangToToLangPostSignalFull(OAIHttpRequestWorker *worker, OAICx_mt summary);
    void transformHtmlFromFromLangToToLangProviderPostSignalFull(OAIHttpRequestWorker *worker, OAICx_mt summary);
    void transformListLanguagepairsGetSignalFull(OAIHttpRequestWorker *worker, OAICx_languagepairs summary);
    void transformListPairFromToGetSignalFull(OAIHttpRequestWorker *worker, OAICx_list_tools summary);
    void transformListToolToolFromGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transformListToolToolFromToGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transformListToolToolGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transformWordFromFromLangToToLangWordGetSignalFull(OAIHttpRequestWorker *worker, OAICx_dict summary);
    void transformWordFromFromLangToToLangWordProviderGetSignalFull(OAIHttpRequestWorker *worker, OAICx_dict summary);

    Q_DECL_DEPRECATED_X("Use transformHtmlFromFromLangToToLangPostSignalError() instead")
    void transformHtmlFromFromLangToToLangPostSignalE(OAICx_mt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformHtmlFromFromLangToToLangPostSignalError(OAICx_mt summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformHtmlFromFromLangToToLangProviderPostSignalError() instead")
    void transformHtmlFromFromLangToToLangProviderPostSignalE(OAICx_mt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformHtmlFromFromLangToToLangProviderPostSignalError(OAICx_mt summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformListLanguagepairsGetSignalError() instead")
    void transformListLanguagepairsGetSignalE(OAICx_languagepairs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformListLanguagepairsGetSignalError(OAICx_languagepairs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformListPairFromToGetSignalError() instead")
    void transformListPairFromToGetSignalE(OAICx_list_tools summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformListPairFromToGetSignalError(OAICx_list_tools summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformListToolToolFromGetSignalError() instead")
    void transformListToolToolFromGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformListToolToolFromGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformListToolToolFromToGetSignalError() instead")
    void transformListToolToolFromToGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformListToolToolFromToGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformListToolToolGetSignalError() instead")
    void transformListToolToolGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformListToolToolGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformWordFromFromLangToToLangWordGetSignalError() instead")
    void transformWordFromFromLangToToLangWordGetSignalE(OAICx_dict summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformWordFromFromLangToToLangWordGetSignalError(OAICx_dict summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformWordFromFromLangToToLangWordProviderGetSignalError() instead")
    void transformWordFromFromLangToToLangWordProviderGetSignalE(OAICx_dict summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformWordFromFromLangToToLangWordProviderGetSignalError(OAICx_dict summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use transformHtmlFromFromLangToToLangPostSignalErrorFull() instead")
    void transformHtmlFromFromLangToToLangPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformHtmlFromFromLangToToLangPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformHtmlFromFromLangToToLangProviderPostSignalErrorFull() instead")
    void transformHtmlFromFromLangToToLangProviderPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformHtmlFromFromLangToToLangProviderPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformListLanguagepairsGetSignalErrorFull() instead")
    void transformListLanguagepairsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformListLanguagepairsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformListPairFromToGetSignalErrorFull() instead")
    void transformListPairFromToGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformListPairFromToGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformListToolToolFromGetSignalErrorFull() instead")
    void transformListToolToolFromGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformListToolToolFromGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformListToolToolFromToGetSignalErrorFull() instead")
    void transformListToolToolFromToGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformListToolToolFromToGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformListToolToolGetSignalErrorFull() instead")
    void transformListToolToolGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformListToolToolGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformWordFromFromLangToToLangWordGetSignalErrorFull() instead")
    void transformWordFromFromLangToToLangWordGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformWordFromFromLangToToLangWordGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformWordFromFromLangToToLangWordProviderGetSignalErrorFull() instead")
    void transformWordFromFromLangToToLangWordProviderGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformWordFromFromLangToToLangWordProviderGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
