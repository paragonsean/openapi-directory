/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummary::OAISummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummary::OAISummary() {
    this->initializeModel();
}

OAISummary::~OAISummary() {}

void OAISummary::initializeModel() {

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dir_isSet = false;
    m_dir_isValid = false;

    m_displaytitle_isSet = false;
    m_displaytitle_isValid = false;

    m_extract_isSet = false;
    m_extract_isValid = false;

    m_extract_html_isSet = false;
    m_extract_html_isValid = false;

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_originalimage_isSet = false;
    m_originalimage_isValid = false;

    m_pageid_isSet = false;
    m_pageid_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummary::fromJsonObject(QJsonObject json) {

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dir_isValid = ::OpenAPI::fromJsonValue(m_dir, json[QString("dir")]);
    m_dir_isSet = !json[QString("dir")].isNull() && m_dir_isValid;

    m_displaytitle_isValid = ::OpenAPI::fromJsonValue(m_displaytitle, json[QString("displaytitle")]);
    m_displaytitle_isSet = !json[QString("displaytitle")].isNull() && m_displaytitle_isValid;

    m_extract_isValid = ::OpenAPI::fromJsonValue(m_extract, json[QString("extract")]);
    m_extract_isSet = !json[QString("extract")].isNull() && m_extract_isValid;

    m_extract_html_isValid = ::OpenAPI::fromJsonValue(m_extract_html, json[QString("extract_html")]);
    m_extract_html_isSet = !json[QString("extract_html")].isNull() && m_extract_html_isValid;

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_originalimage_isValid = ::OpenAPI::fromJsonValue(m_originalimage, json[QString("originalimage")]);
    m_originalimage_isSet = !json[QString("originalimage")].isNull() && m_originalimage_isValid;

    m_pageid_isValid = ::OpenAPI::fromJsonValue(m_pageid, json[QString("pageid")]);
    m_pageid_isSet = !json[QString("pageid")].isNull() && m_pageid_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummary::asJsonObject() const {
    QJsonObject obj;
    if (m_coordinates.isSet()) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dir_isSet) {
        obj.insert(QString("dir"), ::OpenAPI::toJsonValue(m_dir));
    }
    if (m_displaytitle_isSet) {
        obj.insert(QString("displaytitle"), ::OpenAPI::toJsonValue(m_displaytitle));
    }
    if (m_extract_isSet) {
        obj.insert(QString("extract"), ::OpenAPI::toJsonValue(m_extract));
    }
    if (m_extract_html_isSet) {
        obj.insert(QString("extract_html"), ::OpenAPI::toJsonValue(m_extract_html));
    }
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_originalimage.isSet()) {
        obj.insert(QString("originalimage"), ::OpenAPI::toJsonValue(m_originalimage));
    }
    if (m_pageid_isSet) {
        obj.insert(QString("pageid"), ::OpenAPI::toJsonValue(m_pageid));
    }
    if (m_thumbnail.isSet()) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAISummary_coordinates OAISummary::getCoordinates() const {
    return m_coordinates;
}
void OAISummary::setCoordinates(const OAISummary_coordinates &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAISummary::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAISummary::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

QString OAISummary::getDescription() const {
    return m_description;
}
void OAISummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAISummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISummary::getDir() const {
    return m_dir;
}
void OAISummary::setDir(const QString &dir) {
    m_dir = dir;
    m_dir_isSet = true;
}

bool OAISummary::is_dir_Set() const{
    return m_dir_isSet;
}

bool OAISummary::is_dir_Valid() const{
    return m_dir_isValid;
}

QString OAISummary::getDisplaytitle() const {
    return m_displaytitle;
}
void OAISummary::setDisplaytitle(const QString &displaytitle) {
    m_displaytitle = displaytitle;
    m_displaytitle_isSet = true;
}

bool OAISummary::is_displaytitle_Set() const{
    return m_displaytitle_isSet;
}

bool OAISummary::is_displaytitle_Valid() const{
    return m_displaytitle_isValid;
}

QString OAISummary::getExtract() const {
    return m_extract;
}
void OAISummary::setExtract(const QString &extract) {
    m_extract = extract;
    m_extract_isSet = true;
}

bool OAISummary::is_extract_Set() const{
    return m_extract_isSet;
}

bool OAISummary::is_extract_Valid() const{
    return m_extract_isValid;
}

QString OAISummary::getExtractHtml() const {
    return m_extract_html;
}
void OAISummary::setExtractHtml(const QString &extract_html) {
    m_extract_html = extract_html;
    m_extract_html_isSet = true;
}

bool OAISummary::is_extract_html_Set() const{
    return m_extract_html_isSet;
}

bool OAISummary::is_extract_html_Valid() const{
    return m_extract_html_isValid;
}

QString OAISummary::getLang() const {
    return m_lang;
}
void OAISummary::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAISummary::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAISummary::is_lang_Valid() const{
    return m_lang_isValid;
}

OAIOriginalimage OAISummary::getOriginalimage() const {
    return m_originalimage;
}
void OAISummary::setOriginalimage(const OAIOriginalimage &originalimage) {
    m_originalimage = originalimage;
    m_originalimage_isSet = true;
}

bool OAISummary::is_originalimage_Set() const{
    return m_originalimage_isSet;
}

bool OAISummary::is_originalimage_Valid() const{
    return m_originalimage_isValid;
}

qint32 OAISummary::getPageid() const {
    return m_pageid;
}
void OAISummary::setPageid(const qint32 &pageid) {
    m_pageid = pageid;
    m_pageid_isSet = true;
}

bool OAISummary::is_pageid_Set() const{
    return m_pageid_isSet;
}

bool OAISummary::is_pageid_Valid() const{
    return m_pageid_isValid;
}

OAIThumbnail OAISummary::getThumbnail() const {
    return m_thumbnail;
}
void OAISummary::setThumbnail(const OAIThumbnail &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAISummary::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAISummary::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAISummary::getTimestamp() const {
    return m_timestamp;
}
void OAISummary::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISummary::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISummary::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAISummary::getTitle() const {
    return m_title;
}
void OAISummary::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISummary::is_title_Set() const{
    return m_title_isSet;
}

bool OAISummary::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_displaytitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extract_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originalimage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pageid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dir_isValid && m_extract_isValid && m_lang_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
