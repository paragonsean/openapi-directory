/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAvailability.h
 *
 * 
 */

#ifndef OAIAvailability_H
#define OAIAvailability_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAvailability : public OAIObject {
public:
    OAIAvailability();
    OAIAvailability(QString json);
    ~OAIAvailability() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getInTheNews() const;
    void setInTheNews(const QList<QString> &in_the_news);
    bool is_in_the_news_Set() const;
    bool is_in_the_news_Valid() const;

    QList<QString> getMostRead() const;
    void setMostRead(const QList<QString> &most_read);
    bool is_most_read_Set() const;
    bool is_most_read_Valid() const;

    QList<QString> getOnThisDay() const;
    void setOnThisDay(const QList<QString> &on_this_day);
    bool is_on_this_day_Set() const;
    bool is_on_this_day_Valid() const;

    QList<QString> getPictureOfTheDay() const;
    void setPictureOfTheDay(const QList<QString> &picture_of_the_day);
    bool is_picture_of_the_day_Set() const;
    bool is_picture_of_the_day_Valid() const;

    QList<QString> getTodaysFeaturedArticle() const;
    void setTodaysFeaturedArticle(const QList<QString> &todays_featured_article);
    bool is_todays_featured_article_Set() const;
    bool is_todays_featured_article_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_in_the_news;
    bool m_in_the_news_isSet;
    bool m_in_the_news_isValid;

    QList<QString> m_most_read;
    bool m_most_read_isSet;
    bool m_most_read_isValid;

    QList<QString> m_on_this_day;
    bool m_on_this_day_isSet;
    bool m_on_this_day_isValid;

    QList<QString> m_picture_of_the_day;
    bool m_picture_of_the_day_isSet;
    bool m_picture_of_the_day_isValid;

    QList<QString> m_todays_featured_article;
    bool m_todays_featured_article_isSet;
    bool m_todays_featured_article_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAvailability)

#endif // OAIAvailability_H
