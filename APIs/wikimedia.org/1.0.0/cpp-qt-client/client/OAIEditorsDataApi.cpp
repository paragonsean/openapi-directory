/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditorsDataApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIEditorsDataApi::OAIEditorsDataApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIEditorsDataApi::~OAIEditorsDataApi() {
}

void OAIEditorsDataApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://wikimedia.org/api/rest_v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet", defaultConf);
    _serverIndices.insert("metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet", 0);
    _serverConfigs.insert("metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet", defaultConf);
    _serverIndices.insert("metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet", 0);
    _serverConfigs.insert("metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGet", defaultConf);
    _serverIndices.insert("metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGet", 0);
    _serverConfigs.insert("metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet", defaultConf);
    _serverIndices.insert("metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIEditorsDataApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIEditorsDataApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIEditorsDataApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIEditorsDataApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIEditorsDataApi::setUsername(const QString &username) {
    _username = username;
}

void OAIEditorsDataApi::setPassword(const QString &password) {
    _password = password;
}


void OAIEditorsDataApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIEditorsDataApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIEditorsDataApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIEditorsDataApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEditorsDataApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEditorsDataApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIEditorsDataApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIEditorsDataApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIEditorsDataApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIEditorsDataApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIEditorsDataApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIEditorsDataApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIEditorsDataApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIEditorsDataApi::metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet(const QString &project, const QString &editor_type, const QString &page_type, const QString &activity_level, const QString &granularity, const QString &start, const QString &end) {
    QString fullPath = QString(_serverConfigs["metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet"][_serverIndices.value("metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGet")].URL()+"/metrics/editors/aggregate/{project}/{editor-type}/{page-type}/{activity-level}/{granularity}/{start}/{end}");
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString editor_typePathParam("{");
        editor_typePathParam.append("editor-type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "editor-type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"editor-type"+pathSuffix : pathPrefix;
        fullPath.replace(editor_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(editor_type)));
    }
    
    {
        QString page_typePathParam("{");
        page_typePathParam.append("page-type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page-type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page-type"+pathSuffix : pathPrefix;
        fullPath.replace(page_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_type)));
    }
    
    {
        QString activity_levelPathParam("{");
        activity_levelPathParam.append("activity-level").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "activity-level", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"activity-level"+pathSuffix : pathPrefix;
        fullPath.replace(activity_levelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(activity_level)));
    }
    
    {
        QString granularityPathParam("{");
        granularityPathParam.append("granularity").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "granularity", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"granularity"+pathSuffix : pathPrefix;
        fullPath.replace(granularityPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(granularity)));
    }
    
    {
        QString startPathParam("{");
        startPathParam.append("start").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "start", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"start"+pathSuffix : pathPrefix;
        fullPath.replace(startPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(start)));
    }
    
    {
        QString endPathParam("{");
        endPathParam.append("end").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "end", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"end"+pathSuffix : pathPrefix;
        fullPath.replace(endPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(end)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEditorsDataApi::metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetCallback);
    connect(this, &OAIEditorsDataApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEditorsDataApi::metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEditors output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignal(output);
        Q_EMIT metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalE(output, error_type, error_str);
        Q_EMIT metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalError(output, error_type, error_str);
        Q_EMIT metricsEditorsAggregateProjectEditorTypePageTypeActivityLevelGranularityStartEndGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEditorsDataApi::metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet(const QString &project, const QString &editor_type, const QString &page_type, const QString &year, const QString &month, const QString &day) {
    QString fullPath = QString(_serverConfigs["metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet"][_serverIndices.value("metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet")].URL()+"/metrics/editors/top-by-absolute-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}");
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString editor_typePathParam("{");
        editor_typePathParam.append("editor-type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "editor-type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"editor-type"+pathSuffix : pathPrefix;
        fullPath.replace(editor_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(editor_type)));
    }
    
    {
        QString page_typePathParam("{");
        page_typePathParam.append("page-type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page-type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page-type"+pathSuffix : pathPrefix;
        fullPath.replace(page_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_type)));
    }
    
    {
        QString yearPathParam("{");
        yearPathParam.append("year").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "year", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"year"+pathSuffix : pathPrefix;
        fullPath.replace(yearPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(year)));
    }
    
    {
        QString monthPathParam("{");
        monthPathParam.append("month").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "month", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"month"+pathSuffix : pathPrefix;
        fullPath.replace(monthPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(month)));
    }
    
    {
        QString dayPathParam("{");
        dayPathParam.append("day").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "day", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"day"+pathSuffix : pathPrefix;
        fullPath.replace(dayPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(day)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEditorsDataApi::metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetCallback);
    connect(this, &OAIEditorsDataApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEditorsDataApi::metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITop_editors_by_abs_bytes_diff output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignal(output);
        Q_EMIT metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalE(output, error_type, error_str);
        Q_EMIT metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalError(output, error_type, error_str);
        Q_EMIT metricsEditorsTopByAbsoluteBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEditorsDataApi::metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGet(const QString &project, const QString &editor_type, const QString &page_type, const QString &year, const QString &month, const QString &day) {
    QString fullPath = QString(_serverConfigs["metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGet"][_serverIndices.value("metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGet")].URL()+"/metrics/editors/top-by-edits/{project}/{editor-type}/{page-type}/{year}/{month}/{day}");
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString editor_typePathParam("{");
        editor_typePathParam.append("editor-type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "editor-type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"editor-type"+pathSuffix : pathPrefix;
        fullPath.replace(editor_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(editor_type)));
    }
    
    {
        QString page_typePathParam("{");
        page_typePathParam.append("page-type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page-type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page-type"+pathSuffix : pathPrefix;
        fullPath.replace(page_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_type)));
    }
    
    {
        QString yearPathParam("{");
        yearPathParam.append("year").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "year", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"year"+pathSuffix : pathPrefix;
        fullPath.replace(yearPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(year)));
    }
    
    {
        QString monthPathParam("{");
        monthPathParam.append("month").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "month", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"month"+pathSuffix : pathPrefix;
        fullPath.replace(monthPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(month)));
    }
    
    {
        QString dayPathParam("{");
        dayPathParam.append("day").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "day", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"day"+pathSuffix : pathPrefix;
        fullPath.replace(dayPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(day)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEditorsDataApi::metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGetCallback);
    connect(this, &OAIEditorsDataApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEditorsDataApi::metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITop_editors_by_edits output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignal(output);
        Q_EMIT metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalE(output, error_type, error_str);
        Q_EMIT metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalError(output, error_type, error_str);
        Q_EMIT metricsEditorsTopByEditsProjectEditorTypePageTypeYearMonthDayGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEditorsDataApi::metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet(const QString &project, const QString &editor_type, const QString &page_type, const QString &year, const QString &month, const QString &day) {
    QString fullPath = QString(_serverConfigs["metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet"][_serverIndices.value("metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGet")].URL()+"/metrics/editors/top-by-net-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}");
    
    
    {
        QString projectPathParam("{");
        projectPathParam.append("project").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project"+pathSuffix : pathPrefix;
        fullPath.replace(projectPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project)));
    }
    
    {
        QString editor_typePathParam("{");
        editor_typePathParam.append("editor-type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "editor-type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"editor-type"+pathSuffix : pathPrefix;
        fullPath.replace(editor_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(editor_type)));
    }
    
    {
        QString page_typePathParam("{");
        page_typePathParam.append("page-type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page-type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page-type"+pathSuffix : pathPrefix;
        fullPath.replace(page_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_type)));
    }
    
    {
        QString yearPathParam("{");
        yearPathParam.append("year").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "year", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"year"+pathSuffix : pathPrefix;
        fullPath.replace(yearPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(year)));
    }
    
    {
        QString monthPathParam("{");
        monthPathParam.append("month").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "month", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"month"+pathSuffix : pathPrefix;
        fullPath.replace(monthPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(month)));
    }
    
    {
        QString dayPathParam("{");
        dayPathParam.append("day").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "day", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"day"+pathSuffix : pathPrefix;
        fullPath.replace(dayPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(day)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEditorsDataApi::metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetCallback);
    connect(this, &OAIEditorsDataApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEditorsDataApi::metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITop_editors_by_net_bytes_diff output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignal(output);
        Q_EMIT metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalE(output, error_type, error_str);
        Q_EMIT metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalError(output, error_type, error_str);
        Q_EMIT metricsEditorsTopByNetBytesDifferenceProjectEditorTypePageTypeYearMonthDayGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEditorsDataApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
