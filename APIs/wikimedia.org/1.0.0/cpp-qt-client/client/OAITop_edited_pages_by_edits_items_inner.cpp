/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITop_edited_pages_by_edits_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITop_edited_pages_by_edits_items_inner::OAITop_edited_pages_by_edits_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITop_edited_pages_by_edits_items_inner::OAITop_edited_pages_by_edits_items_inner() {
    this->initializeModel();
}

OAITop_edited_pages_by_edits_items_inner::~OAITop_edited_pages_by_edits_items_inner() {}

void OAITop_edited_pages_by_edits_items_inner::initializeModel() {

    m_editor_type_isSet = false;
    m_editor_type_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_page_type_isSet = false;
    m_page_type_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAITop_edited_pages_by_edits_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITop_edited_pages_by_edits_items_inner::fromJsonObject(QJsonObject json) {

    m_editor_type_isValid = ::OpenAPI::fromJsonValue(m_editor_type, json[QString("editor-type")]);
    m_editor_type_isSet = !json[QString("editor-type")].isNull() && m_editor_type_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(m_granularity, json[QString("granularity")]);
    m_granularity_isSet = !json[QString("granularity")].isNull() && m_granularity_isValid;

    m_page_type_isValid = ::OpenAPI::fromJsonValue(m_page_type, json[QString("page-type")]);
    m_page_type_isSet = !json[QString("page-type")].isNull() && m_page_type_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAITop_edited_pages_by_edits_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITop_edited_pages_by_edits_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_editor_type_isSet) {
        obj.insert(QString("editor-type"), ::OpenAPI::toJsonValue(m_editor_type));
    }
    if (m_granularity_isSet) {
        obj.insert(QString("granularity"), ::OpenAPI::toJsonValue(m_granularity));
    }
    if (m_page_type_isSet) {
        obj.insert(QString("page-type"), ::OpenAPI::toJsonValue(m_page_type));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

QString OAITop_edited_pages_by_edits_items_inner::getEditorType() const {
    return m_editor_type;
}
void OAITop_edited_pages_by_edits_items_inner::setEditorType(const QString &editor_type) {
    m_editor_type = editor_type;
    m_editor_type_isSet = true;
}

bool OAITop_edited_pages_by_edits_items_inner::is_editor_type_Set() const{
    return m_editor_type_isSet;
}

bool OAITop_edited_pages_by_edits_items_inner::is_editor_type_Valid() const{
    return m_editor_type_isValid;
}

QString OAITop_edited_pages_by_edits_items_inner::getGranularity() const {
    return m_granularity;
}
void OAITop_edited_pages_by_edits_items_inner::setGranularity(const QString &granularity) {
    m_granularity = granularity;
    m_granularity_isSet = true;
}

bool OAITop_edited_pages_by_edits_items_inner::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAITop_edited_pages_by_edits_items_inner::is_granularity_Valid() const{
    return m_granularity_isValid;
}

QString OAITop_edited_pages_by_edits_items_inner::getPageType() const {
    return m_page_type;
}
void OAITop_edited_pages_by_edits_items_inner::setPageType(const QString &page_type) {
    m_page_type = page_type;
    m_page_type_isSet = true;
}

bool OAITop_edited_pages_by_edits_items_inner::is_page_type_Set() const{
    return m_page_type_isSet;
}

bool OAITop_edited_pages_by_edits_items_inner::is_page_type_Valid() const{
    return m_page_type_isValid;
}

QString OAITop_edited_pages_by_edits_items_inner::getProject() const {
    return m_project;
}
void OAITop_edited_pages_by_edits_items_inner::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAITop_edited_pages_by_edits_items_inner::is_project_Set() const{
    return m_project_isSet;
}

bool OAITop_edited_pages_by_edits_items_inner::is_project_Valid() const{
    return m_project_isValid;
}

QList<OAITop_edited_pages_by_edits_items_inner_results_inner> OAITop_edited_pages_by_edits_items_inner::getResults() const {
    return m_results;
}
void OAITop_edited_pages_by_edits_items_inner::setResults(const QList<OAITop_edited_pages_by_edits_items_inner_results_inner> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAITop_edited_pages_by_edits_items_inner::is_results_Set() const{
    return m_results_isSet;
}

bool OAITop_edited_pages_by_edits_items_inner::is_results_Valid() const{
    return m_results_isValid;
}

bool OAITop_edited_pages_by_edits_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_editor_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITop_edited_pages_by_edits_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
