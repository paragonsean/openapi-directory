/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailability::OAIAvailability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailability::OAIAvailability() {
    this->initializeModel();
}

OAIAvailability::~OAIAvailability() {}

void OAIAvailability::initializeModel() {

    m_in_the_news_isSet = false;
    m_in_the_news_isValid = false;

    m_most_read_isSet = false;
    m_most_read_isValid = false;

    m_on_this_day_isSet = false;
    m_on_this_day_isValid = false;

    m_picture_of_the_day_isSet = false;
    m_picture_of_the_day_isValid = false;

    m_todays_featured_article_isSet = false;
    m_todays_featured_article_isValid = false;
}

void OAIAvailability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailability::fromJsonObject(QJsonObject json) {

    m_in_the_news_isValid = ::OpenAPI::fromJsonValue(m_in_the_news, json[QString("in_the_news")]);
    m_in_the_news_isSet = !json[QString("in_the_news")].isNull() && m_in_the_news_isValid;

    m_most_read_isValid = ::OpenAPI::fromJsonValue(m_most_read, json[QString("most_read")]);
    m_most_read_isSet = !json[QString("most_read")].isNull() && m_most_read_isValid;

    m_on_this_day_isValid = ::OpenAPI::fromJsonValue(m_on_this_day, json[QString("on_this_day")]);
    m_on_this_day_isSet = !json[QString("on_this_day")].isNull() && m_on_this_day_isValid;

    m_picture_of_the_day_isValid = ::OpenAPI::fromJsonValue(m_picture_of_the_day, json[QString("picture_of_the_day")]);
    m_picture_of_the_day_isSet = !json[QString("picture_of_the_day")].isNull() && m_picture_of_the_day_isValid;

    m_todays_featured_article_isValid = ::OpenAPI::fromJsonValue(m_todays_featured_article, json[QString("todays_featured_article")]);
    m_todays_featured_article_isSet = !json[QString("todays_featured_article")].isNull() && m_todays_featured_article_isValid;
}

QString OAIAvailability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailability::asJsonObject() const {
    QJsonObject obj;
    if (m_in_the_news.size() > 0) {
        obj.insert(QString("in_the_news"), ::OpenAPI::toJsonValue(m_in_the_news));
    }
    if (m_most_read.size() > 0) {
        obj.insert(QString("most_read"), ::OpenAPI::toJsonValue(m_most_read));
    }
    if (m_on_this_day.size() > 0) {
        obj.insert(QString("on_this_day"), ::OpenAPI::toJsonValue(m_on_this_day));
    }
    if (m_picture_of_the_day.size() > 0) {
        obj.insert(QString("picture_of_the_day"), ::OpenAPI::toJsonValue(m_picture_of_the_day));
    }
    if (m_todays_featured_article.size() > 0) {
        obj.insert(QString("todays_featured_article"), ::OpenAPI::toJsonValue(m_todays_featured_article));
    }
    return obj;
}

QList<QString> OAIAvailability::getInTheNews() const {
    return m_in_the_news;
}
void OAIAvailability::setInTheNews(const QList<QString> &in_the_news) {
    m_in_the_news = in_the_news;
    m_in_the_news_isSet = true;
}

bool OAIAvailability::is_in_the_news_Set() const{
    return m_in_the_news_isSet;
}

bool OAIAvailability::is_in_the_news_Valid() const{
    return m_in_the_news_isValid;
}

QList<QString> OAIAvailability::getMostRead() const {
    return m_most_read;
}
void OAIAvailability::setMostRead(const QList<QString> &most_read) {
    m_most_read = most_read;
    m_most_read_isSet = true;
}

bool OAIAvailability::is_most_read_Set() const{
    return m_most_read_isSet;
}

bool OAIAvailability::is_most_read_Valid() const{
    return m_most_read_isValid;
}

QList<QString> OAIAvailability::getOnThisDay() const {
    return m_on_this_day;
}
void OAIAvailability::setOnThisDay(const QList<QString> &on_this_day) {
    m_on_this_day = on_this_day;
    m_on_this_day_isSet = true;
}

bool OAIAvailability::is_on_this_day_Set() const{
    return m_on_this_day_isSet;
}

bool OAIAvailability::is_on_this_day_Valid() const{
    return m_on_this_day_isValid;
}

QList<QString> OAIAvailability::getPictureOfTheDay() const {
    return m_picture_of_the_day;
}
void OAIAvailability::setPictureOfTheDay(const QList<QString> &picture_of_the_day) {
    m_picture_of_the_day = picture_of_the_day;
    m_picture_of_the_day_isSet = true;
}

bool OAIAvailability::is_picture_of_the_day_Set() const{
    return m_picture_of_the_day_isSet;
}

bool OAIAvailability::is_picture_of_the_day_Valid() const{
    return m_picture_of_the_day_isValid;
}

QList<QString> OAIAvailability::getTodaysFeaturedArticle() const {
    return m_todays_featured_article;
}
void OAIAvailability::setTodaysFeaturedArticle(const QList<QString> &todays_featured_article) {
    m_todays_featured_article = todays_featured_article;
    m_todays_featured_article_isSet = true;
}

bool OAIAvailability::is_todays_featured_article_Set() const{
    return m_todays_featured_article_isSet;
}

bool OAIAvailability::is_todays_featured_article_Valid() const{
    return m_todays_featured_article_isValid;
}

bool OAIAvailability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_the_news.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_most_read.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_this_day.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_of_the_day.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_todays_featured_article.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailability::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_in_the_news_isValid && m_most_read_isValid && m_on_this_day_isValid && m_picture_of_the_day_isValid && m_todays_featured_article_isValid && true;
}

} // namespace OpenAPI
