/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProblem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProblem::OAIProblem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProblem::OAIProblem() {
    this->initializeModel();
}

OAIProblem::~OAIProblem() {}

void OAIProblem::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIProblem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProblem::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIProblem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProblem::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIProblem::getDetail() const {
    return m_detail;
}
void OAIProblem::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIProblem::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIProblem::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIProblem::getMethod() const {
    return m_method;
}
void OAIProblem::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIProblem::is_method_Set() const{
    return m_method_isSet;
}

bool OAIProblem::is_method_Valid() const{
    return m_method_isValid;
}

qint32 OAIProblem::getStatus() const {
    return m_status;
}
void OAIProblem::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProblem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProblem::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIProblem::getTitle() const {
    return m_title;
}
void OAIProblem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProblem::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProblem::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIProblem::getType() const {
    return m_type;
}
void OAIProblem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProblem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProblem::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProblem::getUri() const {
    return m_uri;
}
void OAIProblem::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIProblem::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIProblem::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIProblem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProblem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
