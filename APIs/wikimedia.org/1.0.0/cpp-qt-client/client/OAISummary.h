/**
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISummary.h
 *
 * 
 */

#ifndef OAISummary_H
#define OAISummary_H

#include <QJsonObject>

#include "OAIOriginalimage.h"
#include "OAISummary_coordinates.h"
#include "OAIThumbnail.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISummary_coordinates;
class OAIOriginalimage;
class OAIThumbnail;

class OAISummary : public OAIObject {
public:
    OAISummary();
    OAISummary(QString json);
    ~OAISummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISummary_coordinates getCoordinates() const;
    void setCoordinates(const OAISummary_coordinates &coordinates);
    bool is_coordinates_Set() const;
    bool is_coordinates_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDir() const;
    void setDir(const QString &dir);
    bool is_dir_Set() const;
    bool is_dir_Valid() const;

    QString getDisplaytitle() const;
    void setDisplaytitle(const QString &displaytitle);
    bool is_displaytitle_Set() const;
    bool is_displaytitle_Valid() const;

    QString getExtract() const;
    void setExtract(const QString &extract);
    bool is_extract_Set() const;
    bool is_extract_Valid() const;

    QString getExtractHtml() const;
    void setExtractHtml(const QString &extract_html);
    bool is_extract_html_Set() const;
    bool is_extract_html_Valid() const;

    QString getLang() const;
    void setLang(const QString &lang);
    bool is_lang_Set() const;
    bool is_lang_Valid() const;

    OAIOriginalimage getOriginalimage() const;
    void setOriginalimage(const OAIOriginalimage &originalimage);
    bool is_originalimage_Set() const;
    bool is_originalimage_Valid() const;

    qint32 getPageid() const;
    void setPageid(const qint32 &pageid);
    bool is_pageid_Set() const;
    bool is_pageid_Valid() const;

    OAIThumbnail getThumbnail() const;
    void setThumbnail(const OAIThumbnail &thumbnail);
    bool is_thumbnail_Set() const;
    bool is_thumbnail_Valid() const;

    QString getTimestamp() const;
    void setTimestamp(const QString &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISummary_coordinates m_coordinates;
    bool m_coordinates_isSet;
    bool m_coordinates_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_dir;
    bool m_dir_isSet;
    bool m_dir_isValid;

    QString m_displaytitle;
    bool m_displaytitle_isSet;
    bool m_displaytitle_isValid;

    QString m_extract;
    bool m_extract_isSet;
    bool m_extract_isValid;

    QString m_extract_html;
    bool m_extract_html_isSet;
    bool m_extract_html_isValid;

    QString m_lang;
    bool m_lang_isSet;
    bool m_lang_isValid;

    OAIOriginalimage m_originalimage;
    bool m_originalimage_isSet;
    bool m_originalimage_isValid;

    qint32 m_pageid;
    bool m_pageid_isSet;
    bool m_pageid_isValid;

    OAIThumbnail m_thumbnail;
    bool m_thumbnail_isSet;
    bool m_thumbnail_isValid;

    QString m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISummary)

#endif // OAISummary_H
