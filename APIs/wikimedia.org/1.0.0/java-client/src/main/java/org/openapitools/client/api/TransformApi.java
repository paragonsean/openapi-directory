/*
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CxDict;
import org.openapitools.client.model.CxLanguagepairs;
import org.openapitools.client.model.CxListTools;
import org.openapitools.client.model.CxMt;
import org.openapitools.client.model.Problem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransformApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransformApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransformApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for transformHtmlFromFromLangToToLangPost
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param html The HTML content to translate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformHtmlFromFromLangToToLangPostCall(String fromLang, String toLang, String html, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/html/from/{from_lang}/to/{to_lang}"
            .replace("{" + "from_lang" + "}", localVarApiClient.escapeString(fromLang.toString()))
            .replace("{" + "to_lang" + "}", localVarApiClient.escapeString(toLang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (html != null) {
            localVarFormParams.put("html", html);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformHtmlFromFromLangToToLangPostValidateBeforeCall(String fromLang, String toLang, String html, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromLang' is set
        if (fromLang == null) {
            throw new ApiException("Missing the required parameter 'fromLang' when calling transformHtmlFromFromLangToToLangPost(Async)");
        }

        // verify the required parameter 'toLang' is set
        if (toLang == null) {
            throw new ApiException("Missing the required parameter 'toLang' when calling transformHtmlFromFromLangToToLangPost(Async)");
        }

        // verify the required parameter 'html' is set
        if (html == null) {
            throw new ApiException("Missing the required parameter 'html' when calling transformHtmlFromFromLangToToLangPost(Async)");
        }

        return transformHtmlFromFromLangToToLangPostCall(fromLang, toLang, html, _callback);

    }

    /**
     * Machine-translate content
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param html The HTML content to translate (required)
     * @return CxMt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CxMt transformHtmlFromFromLangToToLangPost(String fromLang, String toLang, String html) throws ApiException {
        ApiResponse<CxMt> localVarResp = transformHtmlFromFromLangToToLangPostWithHttpInfo(fromLang, toLang, html);
        return localVarResp.getData();
    }

    /**
     * Machine-translate content
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param html The HTML content to translate (required)
     * @return ApiResponse&lt;CxMt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CxMt> transformHtmlFromFromLangToToLangPostWithHttpInfo(String fromLang, String toLang, String html) throws ApiException {
        okhttp3.Call localVarCall = transformHtmlFromFromLangToToLangPostValidateBeforeCall(fromLang, toLang, html, null);
        Type localVarReturnType = new TypeToken<CxMt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Machine-translate content (asynchronously)
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param html The HTML content to translate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformHtmlFromFromLangToToLangPostAsync(String fromLang, String toLang, String html, final ApiCallback<CxMt> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformHtmlFromFromLangToToLangPostValidateBeforeCall(fromLang, toLang, html, _callback);
        Type localVarReturnType = new TypeToken<CxMt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformHtmlFromFromLangToToLangProviderPost
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param provider The machine translation provider id (required)
     * @param html The HTML content to translate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformHtmlFromFromLangToToLangProviderPostCall(String fromLang, String toLang, String provider, String html, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/html/from/{from_lang}/to/{to_lang}/{provider}"
            .replace("{" + "from_lang" + "}", localVarApiClient.escapeString(fromLang.toString()))
            .replace("{" + "to_lang" + "}", localVarApiClient.escapeString(toLang.toString()))
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (html != null) {
            localVarFormParams.put("html", html);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformHtmlFromFromLangToToLangProviderPostValidateBeforeCall(String fromLang, String toLang, String provider, String html, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromLang' is set
        if (fromLang == null) {
            throw new ApiException("Missing the required parameter 'fromLang' when calling transformHtmlFromFromLangToToLangProviderPost(Async)");
        }

        // verify the required parameter 'toLang' is set
        if (toLang == null) {
            throw new ApiException("Missing the required parameter 'toLang' when calling transformHtmlFromFromLangToToLangProviderPost(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling transformHtmlFromFromLangToToLangProviderPost(Async)");
        }

        // verify the required parameter 'html' is set
        if (html == null) {
            throw new ApiException("Missing the required parameter 'html' when calling transformHtmlFromFromLangToToLangProviderPost(Async)");
        }

        return transformHtmlFromFromLangToToLangProviderPostCall(fromLang, toLang, provider, html, _callback);

    }

    /**
     * Machine-translate content
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param provider The machine translation provider id (required)
     * @param html The HTML content to translate (required)
     * @return CxMt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CxMt transformHtmlFromFromLangToToLangProviderPost(String fromLang, String toLang, String provider, String html) throws ApiException {
        ApiResponse<CxMt> localVarResp = transformHtmlFromFromLangToToLangProviderPostWithHttpInfo(fromLang, toLang, provider, html);
        return localVarResp.getData();
    }

    /**
     * Machine-translate content
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param provider The machine translation provider id (required)
     * @param html The HTML content to translate (required)
     * @return ApiResponse&lt;CxMt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CxMt> transformHtmlFromFromLangToToLangProviderPostWithHttpInfo(String fromLang, String toLang, String provider, String html) throws ApiException {
        okhttp3.Call localVarCall = transformHtmlFromFromLangToToLangProviderPostValidateBeforeCall(fromLang, toLang, provider, html, null);
        Type localVarReturnType = new TypeToken<CxMt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Machine-translate content (asynchronously)
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param provider The machine translation provider id (required)
     * @param html The HTML content to translate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformHtmlFromFromLangToToLangProviderPostAsync(String fromLang, String toLang, String provider, String html, final ApiCallback<CxMt> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformHtmlFromFromLangToToLangProviderPostValidateBeforeCall(fromLang, toLang, provider, html, _callback);
        Type localVarReturnType = new TypeToken<CxMt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformListLanguagepairsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of source and target languages supported by the API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformListLanguagepairsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/list/languagepairs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformListLanguagepairsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return transformListLanguagepairsGetCall(_callback);

    }

    /**
     * Lists the language pairs supported by the back-end
     * Fetches the list of language pairs the back-end service can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @return CxLanguagepairs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of source and target languages supported by the API </td><td>  -  </td></tr>
     </table>
     */
    public CxLanguagepairs transformListLanguagepairsGet() throws ApiException {
        ApiResponse<CxLanguagepairs> localVarResp = transformListLanguagepairsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Lists the language pairs supported by the back-end
     * Fetches the list of language pairs the back-end service can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @return ApiResponse&lt;CxLanguagepairs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of source and target languages supported by the API </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CxLanguagepairs> transformListLanguagepairsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = transformListLanguagepairsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CxLanguagepairs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the language pairs supported by the back-end (asynchronously)
     * Fetches the list of language pairs the back-end service can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of source and target languages supported by the API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformListLanguagepairsGetAsync(final ApiCallback<CxLanguagepairs> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformListLanguagepairsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CxLanguagepairs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformListPairFromToGet
     * @param from The source language code (required)
     * @param to The target language code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of tools available for the language pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformListPairFromToGetCall(String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/list/pair/{from}/{to}/"
            .replace("{" + "from" + "}", localVarApiClient.escapeString(from.toString()))
            .replace("{" + "to" + "}", localVarApiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformListPairFromToGetValidateBeforeCall(String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling transformListPairFromToGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling transformListPairFromToGet(Async)");
        }

        return transformListPairFromToGetCall(from, to, _callback);

    }

    /**
     * Lists the tools available for a language pair
     * Fetches the list of tools that are available for the given pair of languages.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param from The source language code (required)
     * @param to The target language code (required)
     * @return CxListTools
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of tools available for the language pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CxListTools transformListPairFromToGet(String from, String to) throws ApiException {
        ApiResponse<CxListTools> localVarResp = transformListPairFromToGetWithHttpInfo(from, to);
        return localVarResp.getData();
    }

    /**
     * Lists the tools available for a language pair
     * Fetches the list of tools that are available for the given pair of languages.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param from The source language code (required)
     * @param to The target language code (required)
     * @return ApiResponse&lt;CxListTools&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of tools available for the language pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CxListTools> transformListPairFromToGetWithHttpInfo(String from, String to) throws ApiException {
        okhttp3.Call localVarCall = transformListPairFromToGetValidateBeforeCall(from, to, null);
        Type localVarReturnType = new TypeToken<CxListTools>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the tools available for a language pair (asynchronously)
     * Fetches the list of tools that are available for the given pair of languages.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param from The source language code (required)
     * @param to The target language code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of tools available for the language pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformListPairFromToGetAsync(String from, String to, final ApiCallback<CxListTools> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformListPairFromToGetValidateBeforeCall(from, to, _callback);
        Type localVarReturnType = new TypeToken<CxListTools>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformListToolToolFromGet
     * @param tool The tool category to list tools and language pairs for (required)
     * @param from The source language code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformListToolToolFromGetCall(String tool, String from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/list/tool/{tool}/{from}"
            .replace("{" + "tool" + "}", localVarApiClient.escapeString(tool.toString()))
            .replace("{" + "from" + "}", localVarApiClient.escapeString(from.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformListToolToolFromGetValidateBeforeCall(String tool, String from, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tool' is set
        if (tool == null) {
            throw new ApiException("Missing the required parameter 'tool' when calling transformListToolToolFromGet(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling transformListToolToolFromGet(Async)");
        }

        return transformListToolToolFromGetCall(tool, from, _callback);

    }

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @param from The source language code (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Object transformListToolToolFromGet(String tool, String from) throws ApiException {
        ApiResponse<Object> localVarResp = transformListToolToolFromGetWithHttpInfo(tool, from);
        return localVarResp.getData();
    }

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @param from The source language code (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> transformListToolToolFromGetWithHttpInfo(String tool, String from) throws ApiException {
        okhttp3.Call localVarCall = transformListToolToolFromGetValidateBeforeCall(tool, from, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the tools and language pairs available for the given tool category (asynchronously)
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @param from The source language code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformListToolToolFromGetAsync(String tool, String from, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformListToolToolFromGetValidateBeforeCall(tool, from, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformListToolToolFromToGet
     * @param tool The tool category to list tools and language pairs for (required)
     * @param from The source language code (required)
     * @param to The target language code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformListToolToolFromToGetCall(String tool, String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/list/tool/{tool}/{from}/{to}"
            .replace("{" + "tool" + "}", localVarApiClient.escapeString(tool.toString()))
            .replace("{" + "from" + "}", localVarApiClient.escapeString(from.toString()))
            .replace("{" + "to" + "}", localVarApiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformListToolToolFromToGetValidateBeforeCall(String tool, String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tool' is set
        if (tool == null) {
            throw new ApiException("Missing the required parameter 'tool' when calling transformListToolToolFromToGet(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling transformListToolToolFromToGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling transformListToolToolFromToGet(Async)");
        }

        return transformListToolToolFromToGetCall(tool, from, to, _callback);

    }

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @param from The source language code (required)
     * @param to The target language code (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Object transformListToolToolFromToGet(String tool, String from, String to) throws ApiException {
        ApiResponse<Object> localVarResp = transformListToolToolFromToGetWithHttpInfo(tool, from, to);
        return localVarResp.getData();
    }

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @param from The source language code (required)
     * @param to The target language code (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> transformListToolToolFromToGetWithHttpInfo(String tool, String from, String to) throws ApiException {
        okhttp3.Call localVarCall = transformListToolToolFromToGetValidateBeforeCall(tool, from, to, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the tools and language pairs available for the given tool category (asynchronously)
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @param from The source language code (required)
     * @param to The target language code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformListToolToolFromToGetAsync(String tool, String from, String to, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformListToolToolFromToGetValidateBeforeCall(tool, from, to, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformListToolToolGet
     * @param tool The tool category to list tools and language pairs for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformListToolToolGetCall(String tool, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/list/tool/{tool}"
            .replace("{" + "tool" + "}", localVarApiClient.escapeString(tool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformListToolToolGetValidateBeforeCall(String tool, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tool' is set
        if (tool == null) {
            throw new ApiException("Missing the required parameter 'tool' when calling transformListToolToolGet(Async)");
        }

        return transformListToolToolGetCall(tool, _callback);

    }

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Object transformListToolToolGet(String tool) throws ApiException {
        ApiResponse<Object> localVarResp = transformListToolToolGetWithHttpInfo(tool);
        return localVarResp.getData();
    }

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> transformListToolToolGetWithHttpInfo(String tool) throws ApiException {
        okhttp3.Call localVarCall = transformListToolToolGetValidateBeforeCall(tool, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the tools and language pairs available for the given tool category (asynchronously)
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformListToolToolGetAsync(String tool, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformListToolToolGetValidateBeforeCall(tool, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformWordFromFromLangToToLangWordGet
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param word The word to lookup (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformWordFromFromLangToToLangWordGetCall(String fromLang, String toLang, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/word/from/{from_lang}/to/{to_lang}/{word}"
            .replace("{" + "from_lang" + "}", localVarApiClient.escapeString(fromLang.toString()))
            .replace("{" + "to_lang" + "}", localVarApiClient.escapeString(toLang.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformWordFromFromLangToToLangWordGetValidateBeforeCall(String fromLang, String toLang, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromLang' is set
        if (fromLang == null) {
            throw new ApiException("Missing the required parameter 'fromLang' when calling transformWordFromFromLangToToLangWordGet(Async)");
        }

        // verify the required parameter 'toLang' is set
        if (toLang == null) {
            throw new ApiException("Missing the required parameter 'toLang' when calling transformWordFromFromLangToToLangWordGet(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling transformWordFromFromLangToToLangWordGet(Async)");
        }

        return transformWordFromFromLangToToLangWordGetCall(fromLang, toLang, word, _callback);

    }

    /**
     * Fetch the dictionary meaning of a word
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param word The word to lookup (required)
     * @return CxDict
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CxDict transformWordFromFromLangToToLangWordGet(String fromLang, String toLang, String word) throws ApiException {
        ApiResponse<CxDict> localVarResp = transformWordFromFromLangToToLangWordGetWithHttpInfo(fromLang, toLang, word);
        return localVarResp.getData();
    }

    /**
     * Fetch the dictionary meaning of a word
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param word The word to lookup (required)
     * @return ApiResponse&lt;CxDict&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CxDict> transformWordFromFromLangToToLangWordGetWithHttpInfo(String fromLang, String toLang, String word) throws ApiException {
        okhttp3.Call localVarCall = transformWordFromFromLangToToLangWordGetValidateBeforeCall(fromLang, toLang, word, null);
        Type localVarReturnType = new TypeToken<CxDict>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the dictionary meaning of a word (asynchronously)
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param word The word to lookup (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformWordFromFromLangToToLangWordGetAsync(String fromLang, String toLang, String word, final ApiCallback<CxDict> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformWordFromFromLangToToLangWordGetValidateBeforeCall(fromLang, toLang, word, _callback);
        Type localVarReturnType = new TypeToken<CxDict>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformWordFromFromLangToToLangWordProviderGet
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param word The word to lookup (required)
     * @param provider The dictionary provider id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformWordFromFromLangToToLangWordProviderGetCall(String fromLang, String toLang, String word, String provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/word/from/{from_lang}/to/{to_lang}/{word}/{provider}"
            .replace("{" + "from_lang" + "}", localVarApiClient.escapeString(fromLang.toString()))
            .replace("{" + "to_lang" + "}", localVarApiClient.escapeString(toLang.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()))
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformWordFromFromLangToToLangWordProviderGetValidateBeforeCall(String fromLang, String toLang, String word, String provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromLang' is set
        if (fromLang == null) {
            throw new ApiException("Missing the required parameter 'fromLang' when calling transformWordFromFromLangToToLangWordProviderGet(Async)");
        }

        // verify the required parameter 'toLang' is set
        if (toLang == null) {
            throw new ApiException("Missing the required parameter 'toLang' when calling transformWordFromFromLangToToLangWordProviderGet(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling transformWordFromFromLangToToLangWordProviderGet(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling transformWordFromFromLangToToLangWordProviderGet(Async)");
        }

        return transformWordFromFromLangToToLangWordProviderGetCall(fromLang, toLang, word, provider, _callback);

    }

    /**
     * Fetch the dictionary meaning of a word
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param word The word to lookup (required)
     * @param provider The dictionary provider id (required)
     * @return CxDict
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CxDict transformWordFromFromLangToToLangWordProviderGet(String fromLang, String toLang, String word, String provider) throws ApiException {
        ApiResponse<CxDict> localVarResp = transformWordFromFromLangToToLangWordProviderGetWithHttpInfo(fromLang, toLang, word, provider);
        return localVarResp.getData();
    }

    /**
     * Fetch the dictionary meaning of a word
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param word The word to lookup (required)
     * @param provider The dictionary provider id (required)
     * @return ApiResponse&lt;CxDict&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CxDict> transformWordFromFromLangToToLangWordProviderGetWithHttpInfo(String fromLang, String toLang, String word, String provider) throws ApiException {
        okhttp3.Call localVarCall = transformWordFromFromLangToToLangWordProviderGetValidateBeforeCall(fromLang, toLang, word, provider, null);
        Type localVarReturnType = new TypeToken<CxDict>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the dictionary meaning of a word (asynchronously)
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param word The word to lookup (required)
     * @param provider The dictionary provider id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformWordFromFromLangToToLangWordProviderGetAsync(String fromLang, String toLang, String word, String provider, final ApiCallback<CxDict> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformWordFromFromLangToToLangWordProviderGetValidateBeforeCall(fromLang, toLang, word, provider, _callback);
        Type localVarReturnType = new TypeToken<CxDict>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
