/*
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetadataApi
 */
@Disabled
public class MetadataApiTest {

    private final MetadataApi api = new MetadataApi();

    /**
     * Given a TCGA barcode, return its short letter sample type code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void barcodeTest() throws ApiException {
        String tcGABarcode = null;
        String format = null;
        api.barcode(tcGABarcode, format);
        // TODO: test validations
    }

    /**
     * Obtain identities of TCGA consortium member centers.
     *
     * By default this function returns a table of all consortium members in TCGA, aka centers; it provides both the HTTP domain and full organizational name of each center.  A subset of this table may be obtained by explicitly specifying one or more domain names.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void centersTest() throws ApiException {
        String format = null;
        List<String> center = null;
        api.centers(format, center);
        // TODO: test validations
    }

    /**
     * Retrieve names of all TCGA clinical data elements (CDEs).
     *
     * Retrieve names of all patient-level clinical data elements (CDES) available in TCGA, unioned across all disease cohorts. A CDE will be listed here only when it has a value other than NA for at least 1 patient case in any disease cohort. For more information on how these CDEs are processed see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation\&quot;&gt;pipeline documentation&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clinicalNamesTest() throws ApiException {
        String format = null;
        api.clinicalNames(format);
        // TODO: test validations
    }

    /**
     * Retrieve names of CDEs normalized by Firehose and selected for analyses.
     *
     * This service returns the names of patient-level clinical data elements (CDEs) that have been normalized by Firehose for use in analyses, unioned across all disease cohorts. For more information on how these CDEs are processed, see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation\&quot;&gt;pipeline documentation&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clinicalNamesFHTest() throws ApiException {
        String format = null;
        api.clinicalNamesFH(format);
        // TODO: test validations
    }

    /**
     * Translate from numeric to symbolic TCGA sample codes.
     *
     * Convert a TCGA numeric sample type code (e.g. 01, 02) to its corresponding symbolic (short letter) code (e.g. TP, TR).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codeTest() throws ApiException {
        List<String> code = null;
        String format = null;
        api.code(code, format);
        // TODO: test validations
    }

    /**
     * Translate TCGA cohort abbreviations to full disease names.
     *
     * By default this function returns a table containing all TCGA cohort abbreviations and their corresponding disease names.  A subset of that table may be obtained by explicitly specifying one or more cohort abbreviations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cohortsTest() throws ApiException {
        String format = null;
        List<String> cohort = null;
        api.cohorts(format, cohort);
        // TODO: test validations
    }

    /**
     * Retrieve sample counts.
     *
     * Returns the aliquot counts for each disease cohort, per sample type and data type.  The sample type designation of \&quot;Tumor\&quot; may be used to aggregate the count of all tumor aliquots into a single number per disease and data type. See the SampleTypes function for a complete description of sample types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countsTest() throws ApiException {
        String format = null;
        List<LocalDate> date = null;
        List<String> cohort = null;
        List<String> sampleType = null;
        List<String> dataType = null;
        Boolean totals = null;
        String sortBy = null;
        api.counts(format, date, cohort, sampleType, dataType, totals, sortBy);
        // TODO: test validations
    }

    /**
     * Retrieve dates of all GDAC Firehose stddata &amp; analyses runs that have been ingested into FireBrowse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datesTest() throws ApiException {
        String format = null;
        api.dates(format);
        // TODO: test validations
    }

    /**
     * Simple way to discern whether API server is up and running
     *
     * Returns a message to indicate that API (server) is up and running, or times out if not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void heartBeatTest() throws ApiException {
        String format = null;
        api.heartBeat(format);
        // TODO: test validations
    }

    /**
     * Retrieve names of all columns in the mutation annotation files (MAFs) served by FireBrowse.
     *
     * Retrieve the names of all columns in the mutation annotation files (MAFs) hosted by FireBrowse.  For more information on the mutation data, and how it is processed by Firehose, please consult the &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-MutationPipelines\&quot;&gt;pipeline documentation&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mAFColNamesTest() throws ApiException {
        String format = null;
        api.mAFColNames(format);
        // TODO: test validations
    }

    /**
     * Retrieve list of all TCGA patients.
     *
     * This service returns a list of all TCGA patient barcodes in FireBrowse, optionally filtered by disease cohort.  The barcodes are obtained directy from the clinical data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patientsTest() throws ApiException {
        String format = null;
        List<String> cohort = null;
        List<Integer> page = null;
        List<Integer> pageSize = null;
        String sortBy = null;
        api.patients(format, cohort, page, pageSize, sortBy);
        // TODO: test validations
    }

    /**
     * Translate TCGA platform codes to full platform names.
     *
     * By default this function returns a table of all of the technology platforms used to sequence or characterize samples in TCGA--both their short platform codes and full names.  A subset of this table may be obtained by explicitly specifying one or more platform codes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void platformsTest() throws ApiException {
        String format = null;
        List<String> platform = null;
        api.platforms(format, platform);
        // TODO: test validations
    }

    /**
     * Return all TCGA sample type codes, both numeric and symbolic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sampleTypesTest() throws ApiException {
        String format = null;
        api.sampleTypes(format);
        // TODO: test validations
    }

    /**
     * Translate from symbolic to numeric TCGA sample codes.
     *
     * Convert a TCGA sample type code in symbolic form (or &#39;short letter code&#39; like TP, TR) to its corresponding numeric form (e.g. 01, 02).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shortLetterCodeTest() throws ApiException {
        List<String> shortLetterCode = null;
        String format = null;
        api.shortLetterCode(shortLetterCode, format);
        // TODO: test validations
    }

    /**
     * Obtain identities of tissue source sites in TCGA.
     *
     * By default this function returns a table of all sites which contributed source tissue to TCGA, aka TSS&#39;s. A subset of this table may be obtained by explicitly specifying one or more sites.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tSSitesTest() throws ApiException {
        String format = null;
        List<String> tssCode = null;
        api.tSSites(format, tssCode);
        // TODO: test validations
    }

}
