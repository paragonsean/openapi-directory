/*
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SamplesApi
 */
@Disabled
public class SamplesApiTest {

    private final SamplesApi api = new SamplesApi();

    /**
     * Retrieve TCGA CDEs verbatim, i.e. not normalized by Firehose.
     *
     * This service returns patient clinical data from TCGA, verbatim. It differs from the Samples/Clinical_FH method by providing access to all TCGA CDEs in their original form, not merely the subset of CDEs normalized by Firehose for analyses.  Results may be selected by disease cohort, patient barcode or CDE name, but at least one cohort, barcode, or CDE must be provided. When filtering by CDE note that only when a patient record contains one or more of the selected CDEs will it be returned. Visit the Metadata/ClinicalNames api function to see the entire list of TCGA CDEs that may be queried via this method. For more information on how clinical data are processed, see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-ClinicalPipeline\&quot;&gt;pipeline documentation&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clinicalTest() throws ApiException {
        String format = null;
        List<String> cohort = null;
        List<String> tcgaParticipantBarcode = null;
        List<String> cdeName = null;
        List<Integer> page = null;
        List<Integer> pageSize = null;
        String sortBy = null;
        api.clinical(format, cohort, tcgaParticipantBarcode, cdeName, page, pageSize, sortBy);
        // TODO: test validations
    }

    /**
     * Retrieve CDEs normalized by Firehose and selected for analyses.
     *
     * This service returns patient-level clinical data elements (CDEs) that have been normalized by Firehose for use in analyses. Results may be selected by disease cohort, patient barcode or CDE name, but at least one cohort, barcode or CDE must be provided. When filtering by CDE note that only when a  patient record contains one or more of the selected CDEs will it be returned. Visit &lt;a href&#x3D;\&quot;http://gdac.broadinstitute.org/runs/info/clinical\&quot;&gt;this table of CDEs&lt;/a&gt; to see what&#39;s available for every disase cohort; for more information on how these CDEs are processed see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-ClinicalPipeline\&quot;&gt;pipeline documentation&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clinicalFHTest() throws ApiException {
        String format = null;
        List<String> cohort = null;
        List<String> tcgaParticipantBarcode = null;
        List<String> fhCdeName = null;
        List<Integer> page = null;
        List<Integer> pageSize = null;
        String sortBy = null;
        api.clinicalFH(format, cohort, tcgaParticipantBarcode, fhCdeName, page, pageSize, sortBy);
        // TODO: test validations
    }

    /**
     * Retrieve mRNASeq data.
     *
     * This service returns sample-level log2 mRNASeq expression values. Results may be filtered by gene, cohort, barcode, sample type or characterization protocol, but at least one gene must be supplied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mRNASeqTest() throws ApiException {
        String format = null;
        List<String> gene = null;
        List<String> cohort = null;
        List<String> tcgaParticipantBarcode = null;
        List<String> sampleType = null;
        List<String> protocol = null;
        List<Integer> page = null;
        List<Integer> pageSize = null;
        String sortBy = null;
        api.mRNASeq(format, gene, cohort, tcgaParticipantBarcode, sampleType, protocol, page, pageSize, sortBy);
        // TODO: test validations
    }

    /**
     * Retrieve miRSeq data.
     *
     * This service returns sample-level log2 miRSeq expression values. Results may be filtered by miR, cohort, barcode, sample type or Firehose preprocessing tool, but at least one miR must be supplied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void miRSeqTest() throws ApiException {
        String format = null;
        List<String> mir = null;
        List<String> cohort = null;
        List<String> tcgaParticipantBarcode = null;
        List<String> tool = null;
        List<String> sampleType = null;
        List<Integer> page = null;
        List<Integer> pageSize = null;
        String sortBy = null;
        api.miRSeq(format, mir, cohort, tcgaParticipantBarcode, tool, sampleType, page, pageSize, sortBy);
        // TODO: test validations
    }

}
