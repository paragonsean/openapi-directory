/*
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetadataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for barcode
     * @param tcGABarcode Enter a single TCGA barcode, of any form: e.g. TCGA-GF-A4EO-06 or TCGA-EL-A3D5-01A-22D-A202-08 (required)
     * @param format Format of result. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call barcodeCall(String tcGABarcode, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/SampleType/Barcode/{TCGA_Barcode}"
            .replace("{" + "TCGA_Barcode" + "}", localVarApiClient.escapeString(tcGABarcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call barcodeValidateBeforeCall(String tcGABarcode, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tcGABarcode' is set
        if (tcGABarcode == null) {
            throw new ApiException("Missing the required parameter 'tcGABarcode' when calling barcode(Async)");
        }

        return barcodeCall(tcGABarcode, format, _callback);

    }

    /**
     * Given a TCGA barcode, return its short letter sample type code.
     * 
     * @param tcGABarcode Enter a single TCGA barcode, of any form: e.g. TCGA-GF-A4EO-06 or TCGA-EL-A3D5-01A-22D-A202-08 (required)
     * @param format Format of result. (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void barcode(String tcGABarcode, String format) throws ApiException {
        barcodeWithHttpInfo(tcGABarcode, format);
    }

    /**
     * Given a TCGA barcode, return its short letter sample type code.
     * 
     * @param tcGABarcode Enter a single TCGA barcode, of any form: e.g. TCGA-GF-A4EO-06 or TCGA-EL-A3D5-01A-22D-A202-08 (required)
     * @param format Format of result. (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> barcodeWithHttpInfo(String tcGABarcode, String format) throws ApiException {
        okhttp3.Call localVarCall = barcodeValidateBeforeCall(tcGABarcode, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Given a TCGA barcode, return its short letter sample type code. (asynchronously)
     * 
     * @param tcGABarcode Enter a single TCGA barcode, of any form: e.g. TCGA-GF-A4EO-06 or TCGA-EL-A3D5-01A-22D-A202-08 (required)
     * @param format Format of result. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call barcodeAsync(String tcGABarcode, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = barcodeValidateBeforeCall(tcGABarcode, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for centers
     * @param format Format of result. (optional, default to json)
     * @param center Narrow search to one or more TCGA centers from the scrollable list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call centersCall(String format, List<String> center, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/Centers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (center != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "center", center));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call centersValidateBeforeCall(String format, List<String> center, final ApiCallback _callback) throws ApiException {
        return centersCall(format, center, _callback);

    }

    /**
     * Obtain identities of TCGA consortium member centers.
     * By default this function returns a table of all consortium members in TCGA, aka centers; it provides both the HTTP domain and full organizational name of each center.  A subset of this table may be obtained by explicitly specifying one or more domain names.
     * @param format Format of result. (optional, default to json)
     * @param center Narrow search to one or more TCGA centers from the scrollable list. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void centers(String format, List<String> center) throws ApiException {
        centersWithHttpInfo(format, center);
    }

    /**
     * Obtain identities of TCGA consortium member centers.
     * By default this function returns a table of all consortium members in TCGA, aka centers; it provides both the HTTP domain and full organizational name of each center.  A subset of this table may be obtained by explicitly specifying one or more domain names.
     * @param format Format of result. (optional, default to json)
     * @param center Narrow search to one or more TCGA centers from the scrollable list. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> centersWithHttpInfo(String format, List<String> center) throws ApiException {
        okhttp3.Call localVarCall = centersValidateBeforeCall(format, center, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Obtain identities of TCGA consortium member centers. (asynchronously)
     * By default this function returns a table of all consortium members in TCGA, aka centers; it provides both the HTTP domain and full organizational name of each center.  A subset of this table may be obtained by explicitly specifying one or more domain names.
     * @param format Format of result. (optional, default to json)
     * @param center Narrow search to one or more TCGA centers from the scrollable list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call centersAsync(String format, List<String> center, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = centersValidateBeforeCall(format, center, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clinicalNames
     * @param format Format of result. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clinicalNamesCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/ClinicalNames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clinicalNamesValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return clinicalNamesCall(format, _callback);

    }

    /**
     * Retrieve names of all TCGA clinical data elements (CDEs).
     * Retrieve names of all patient-level clinical data elements (CDES) available in TCGA, unioned across all disease cohorts. A CDE will be listed here only when it has a value other than NA for at least 1 patient case in any disease cohort. For more information on how these CDEs are processed see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void clinicalNames(String format) throws ApiException {
        clinicalNamesWithHttpInfo(format);
    }

    /**
     * Retrieve names of all TCGA clinical data elements (CDEs).
     * Retrieve names of all patient-level clinical data elements (CDES) available in TCGA, unioned across all disease cohorts. A CDE will be listed here only when it has a value other than NA for at least 1 patient case in any disease cohort. For more information on how these CDEs are processed see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clinicalNamesWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = clinicalNamesValidateBeforeCall(format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve names of all TCGA clinical data elements (CDEs). (asynchronously)
     * Retrieve names of all patient-level clinical data elements (CDES) available in TCGA, unioned across all disease cohorts. A CDE will be listed here only when it has a value other than NA for at least 1 patient case in any disease cohort. For more information on how these CDEs are processed see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clinicalNamesAsync(String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clinicalNamesValidateBeforeCall(format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clinicalNamesFH
     * @param format Format of result. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clinicalNamesFHCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/ClinicalNames_FH";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clinicalNamesFHValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return clinicalNamesFHCall(format, _callback);

    }

    /**
     * Retrieve names of CDEs normalized by Firehose and selected for analyses.
     * This service returns the names of patient-level clinical data elements (CDEs) that have been normalized by Firehose for use in analyses, unioned across all disease cohorts. For more information on how these CDEs are processed, see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void clinicalNamesFH(String format) throws ApiException {
        clinicalNamesFHWithHttpInfo(format);
    }

    /**
     * Retrieve names of CDEs normalized by Firehose and selected for analyses.
     * This service returns the names of patient-level clinical data elements (CDEs) that have been normalized by Firehose for use in analyses, unioned across all disease cohorts. For more information on how these CDEs are processed, see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clinicalNamesFHWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = clinicalNamesFHValidateBeforeCall(format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve names of CDEs normalized by Firehose and selected for analyses. (asynchronously)
     * This service returns the names of patient-level clinical data elements (CDEs) that have been normalized by Firehose for use in analyses, unioned across all disease cohorts. For more information on how these CDEs are processed, see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clinicalNamesFHAsync(String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clinicalNamesFHValidateBeforeCall(format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for code
     * @param code Narrow search to one or more TCGA sample type codes. (required)
     * @param format Format of result. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeCall(List<String> code, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/SampleType/Code/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", code)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeValidateBeforeCall(List<String> code, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling code(Async)");
        }

        return codeCall(code, format, _callback);

    }

    /**
     * Translate from numeric to symbolic TCGA sample codes.
     * Convert a TCGA numeric sample type code (e.g. 01, 02) to its corresponding symbolic (short letter) code (e.g. TP, TR).
     * @param code Narrow search to one or more TCGA sample type codes. (required)
     * @param format Format of result. (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void code(List<String> code, String format) throws ApiException {
        codeWithHttpInfo(code, format);
    }

    /**
     * Translate from numeric to symbolic TCGA sample codes.
     * Convert a TCGA numeric sample type code (e.g. 01, 02) to its corresponding symbolic (short letter) code (e.g. TP, TR).
     * @param code Narrow search to one or more TCGA sample type codes. (required)
     * @param format Format of result. (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codeWithHttpInfo(List<String> code, String format) throws ApiException {
        okhttp3.Call localVarCall = codeValidateBeforeCall(code, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Translate from numeric to symbolic TCGA sample codes. (asynchronously)
     * Convert a TCGA numeric sample type code (e.g. 01, 02) to its corresponding symbolic (short letter) code (e.g. TP, TR).
     * @param code Narrow search to one or more TCGA sample type codes. (required)
     * @param format Format of result. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeAsync(List<String> code, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeValidateBeforeCall(code, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cohorts
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cohortsCall(String format, List<String> cohort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/Cohorts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cohortsValidateBeforeCall(String format, List<String> cohort, final ApiCallback _callback) throws ApiException {
        return cohortsCall(format, cohort, _callback);

    }

    /**
     * Translate TCGA cohort abbreviations to full disease names.
     * By default this function returns a table containing all TCGA cohort abbreviations and their corresponding disease names.  A subset of that table may be obtained by explicitly specifying one or more cohort abbreviations.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void cohorts(String format, List<String> cohort) throws ApiException {
        cohortsWithHttpInfo(format, cohort);
    }

    /**
     * Translate TCGA cohort abbreviations to full disease names.
     * By default this function returns a table containing all TCGA cohort abbreviations and their corresponding disease names.  A subset of that table may be obtained by explicitly specifying one or more cohort abbreviations.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cohortsWithHttpInfo(String format, List<String> cohort) throws ApiException {
        okhttp3.Call localVarCall = cohortsValidateBeforeCall(format, cohort, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Translate TCGA cohort abbreviations to full disease names. (asynchronously)
     * By default this function returns a table containing all TCGA cohort abbreviations and their corresponding disease names.  A subset of that table may be obtained by explicitly specifying one or more cohort abbreviations.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cohortsAsync(String format, List<String> cohort, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cohortsValidateBeforeCall(format, cohort, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for counts
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param dataType Narrow search to one or more TCGA data types from the scrollable list. (optional)
     * @param totals Output an entry providing the totals for each data type. (optional, default to true)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countsCall(String format, List<LocalDate> date, List<String> cohort, List<String> sampleType, List<String> dataType, Boolean totals, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/Counts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (date != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "date", date));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (sampleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sample_type", sampleType));
        }

        if (dataType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "data_type", dataType));
        }

        if (totals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("totals", totals));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countsValidateBeforeCall(String format, List<LocalDate> date, List<String> cohort, List<String> sampleType, List<String> dataType, Boolean totals, String sortBy, final ApiCallback _callback) throws ApiException {
        return countsCall(format, date, cohort, sampleType, dataType, totals, sortBy, _callback);

    }

    /**
     * Retrieve sample counts.
     * Returns the aliquot counts for each disease cohort, per sample type and data type.  The sample type designation of \&quot;Tumor\&quot; may be used to aggregate the count of all tumor aliquots into a single number per disease and data type. See the SampleTypes function for a complete description of sample types.
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param dataType Narrow search to one or more TCGA data types from the scrollable list. (optional)
     * @param totals Output an entry providing the totals for each data type. (optional, default to true)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void counts(String format, List<LocalDate> date, List<String> cohort, List<String> sampleType, List<String> dataType, Boolean totals, String sortBy) throws ApiException {
        countsWithHttpInfo(format, date, cohort, sampleType, dataType, totals, sortBy);
    }

    /**
     * Retrieve sample counts.
     * Returns the aliquot counts for each disease cohort, per sample type and data type.  The sample type designation of \&quot;Tumor\&quot; may be used to aggregate the count of all tumor aliquots into a single number per disease and data type. See the SampleTypes function for a complete description of sample types.
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param dataType Narrow search to one or more TCGA data types from the scrollable list. (optional)
     * @param totals Output an entry providing the totals for each data type. (optional, default to true)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> countsWithHttpInfo(String format, List<LocalDate> date, List<String> cohort, List<String> sampleType, List<String> dataType, Boolean totals, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = countsValidateBeforeCall(format, date, cohort, sampleType, dataType, totals, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve sample counts. (asynchronously)
     * Returns the aliquot counts for each disease cohort, per sample type and data type.  The sample type designation of \&quot;Tumor\&quot; may be used to aggregate the count of all tumor aliquots into a single number per disease and data type. See the SampleTypes function for a complete description of sample types.
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param dataType Narrow search to one or more TCGA data types from the scrollable list. (optional)
     * @param totals Output an entry providing the totals for each data type. (optional, default to true)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countsAsync(String format, List<LocalDate> date, List<String> cohort, List<String> sampleType, List<String> dataType, Boolean totals, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = countsValidateBeforeCall(format, date, cohort, sampleType, dataType, totals, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dates
     * @param format Format of result. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datesCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/Dates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datesValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return datesCall(format, _callback);

    }

    /**
     * Retrieve dates of all GDAC Firehose stddata &amp; analyses runs that have been ingested into FireBrowse.
     * 
     * @param format Format of result. (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void dates(String format) throws ApiException {
        datesWithHttpInfo(format);
    }

    /**
     * Retrieve dates of all GDAC Firehose stddata &amp; analyses runs that have been ingested into FireBrowse.
     * 
     * @param format Format of result. (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> datesWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = datesValidateBeforeCall(format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve dates of all GDAC Firehose stddata &amp; analyses runs that have been ingested into FireBrowse. (asynchronously)
     * 
     * @param format Format of result. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datesAsync(String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = datesValidateBeforeCall(format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for heartBeat
     * @param format Format of result. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heartBeatCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/HeartBeat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heartBeatValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return heartBeatCall(format, _callback);

    }

    /**
     * Simple way to discern whether API server is up and running
     * Returns a message to indicate that API (server) is up and running, or times out if not.
     * @param format Format of result. (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void heartBeat(String format) throws ApiException {
        heartBeatWithHttpInfo(format);
    }

    /**
     * Simple way to discern whether API server is up and running
     * Returns a message to indicate that API (server) is up and running, or times out if not.
     * @param format Format of result. (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> heartBeatWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = heartBeatValidateBeforeCall(format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Simple way to discern whether API server is up and running (asynchronously)
     * Returns a message to indicate that API (server) is up and running, or times out if not.
     * @param format Format of result. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heartBeatAsync(String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = heartBeatValidateBeforeCall(format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mAFColNames
     * @param format Format of result. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mAFColNamesCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/MAFColNames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mAFColNamesValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return mAFColNamesCall(format, _callback);

    }

    /**
     * Retrieve names of all columns in the mutation annotation files (MAFs) served by FireBrowse.
     * Retrieve the names of all columns in the mutation annotation files (MAFs) hosted by FireBrowse.  For more information on the mutation data, and how it is processed by Firehose, please consult the &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-MutationPipelines\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void mAFColNames(String format) throws ApiException {
        mAFColNamesWithHttpInfo(format);
    }

    /**
     * Retrieve names of all columns in the mutation annotation files (MAFs) served by FireBrowse.
     * Retrieve the names of all columns in the mutation annotation files (MAFs) hosted by FireBrowse.  For more information on the mutation data, and how it is processed by Firehose, please consult the &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-MutationPipelines\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mAFColNamesWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = mAFColNamesValidateBeforeCall(format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve names of all columns in the mutation annotation files (MAFs) served by FireBrowse. (asynchronously)
     * Retrieve the names of all columns in the mutation annotation files (MAFs) hosted by FireBrowse.  For more information on the mutation data, and how it is processed by Firehose, please consult the &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-MutationPipelines\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mAFColNamesAsync(String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mAFColNamesValidateBeforeCall(format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for patients
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsCall(String format, List<String> cohort, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/Patients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patientsValidateBeforeCall(String format, List<String> cohort, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return patientsCall(format, cohort, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve list of all TCGA patients.
     * This service returns a list of all TCGA patient barcodes in FireBrowse, optionally filtered by disease cohort.  The barcodes are obtained directy from the clinical data.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void patients(String format, List<String> cohort, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        patientsWithHttpInfo(format, cohort, page, pageSize, sortBy);
    }

    /**
     * Retrieve list of all TCGA patients.
     * This service returns a list of all TCGA patient barcodes in FireBrowse, optionally filtered by disease cohort.  The barcodes are obtained directy from the clinical data.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patientsWithHttpInfo(String format, List<String> cohort, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = patientsValidateBeforeCall(format, cohort, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve list of all TCGA patients. (asynchronously)
     * This service returns a list of all TCGA patient barcodes in FireBrowse, optionally filtered by disease cohort.  The barcodes are obtained directy from the clinical data.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientsAsync(String format, List<String> cohort, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patientsValidateBeforeCall(format, cohort, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for platforms
     * @param format Format of result. (optional, default to json)
     * @param platform Narrow search to one or more TCGA data generation platforms from the scrollable list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platformsCall(String format, List<String> platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/Platforms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (platform != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "platform", platform));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call platformsValidateBeforeCall(String format, List<String> platform, final ApiCallback _callback) throws ApiException {
        return platformsCall(format, platform, _callback);

    }

    /**
     * Translate TCGA platform codes to full platform names.
     * By default this function returns a table of all of the technology platforms used to sequence or characterize samples in TCGA--both their short platform codes and full names.  A subset of this table may be obtained by explicitly specifying one or more platform codes.
     * @param format Format of result. (optional, default to json)
     * @param platform Narrow search to one or more TCGA data generation platforms from the scrollable list. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void platforms(String format, List<String> platform) throws ApiException {
        platformsWithHttpInfo(format, platform);
    }

    /**
     * Translate TCGA platform codes to full platform names.
     * By default this function returns a table of all of the technology platforms used to sequence or characterize samples in TCGA--both their short platform codes and full names.  A subset of this table may be obtained by explicitly specifying one or more platform codes.
     * @param format Format of result. (optional, default to json)
     * @param platform Narrow search to one or more TCGA data generation platforms from the scrollable list. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> platformsWithHttpInfo(String format, List<String> platform) throws ApiException {
        okhttp3.Call localVarCall = platformsValidateBeforeCall(format, platform, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Translate TCGA platform codes to full platform names. (asynchronously)
     * By default this function returns a table of all of the technology platforms used to sequence or characterize samples in TCGA--both their short platform codes and full names.  A subset of this table may be obtained by explicitly specifying one or more platform codes.
     * @param format Format of result. (optional, default to json)
     * @param platform Narrow search to one or more TCGA data generation platforms from the scrollable list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platformsAsync(String format, List<String> platform, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = platformsValidateBeforeCall(format, platform, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sampleTypes
     * @param format Format of result. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sampleTypesCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/SampleTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sampleTypesValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return sampleTypesCall(format, _callback);

    }

    /**
     * Return all TCGA sample type codes, both numeric and symbolic.
     * 
     * @param format Format of result. (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void sampleTypes(String format) throws ApiException {
        sampleTypesWithHttpInfo(format);
    }

    /**
     * Return all TCGA sample type codes, both numeric and symbolic.
     * 
     * @param format Format of result. (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sampleTypesWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = sampleTypesValidateBeforeCall(format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return all TCGA sample type codes, both numeric and symbolic. (asynchronously)
     * 
     * @param format Format of result. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sampleTypesAsync(String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sampleTypesValidateBeforeCall(format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for shortLetterCode
     * @param shortLetterCode TCGA sample type short letter code(s) (e.g. TP, NB, etc.).  (required)
     * @param format Format of result. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shortLetterCodeCall(List<String> shortLetterCode, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/SampleType/ShortLetterCode/{short_letter_code}"
            .replace("{" + "short_letter_code" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", shortLetterCode)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shortLetterCodeValidateBeforeCall(List<String> shortLetterCode, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortLetterCode' is set
        if (shortLetterCode == null) {
            throw new ApiException("Missing the required parameter 'shortLetterCode' when calling shortLetterCode(Async)");
        }

        return shortLetterCodeCall(shortLetterCode, format, _callback);

    }

    /**
     * Translate from symbolic to numeric TCGA sample codes.
     * Convert a TCGA sample type code in symbolic form (or &#39;short letter code&#39; like TP, TR) to its corresponding numeric form (e.g. 01, 02).
     * @param shortLetterCode TCGA sample type short letter code(s) (e.g. TP, NB, etc.).  (required)
     * @param format Format of result. (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void shortLetterCode(List<String> shortLetterCode, String format) throws ApiException {
        shortLetterCodeWithHttpInfo(shortLetterCode, format);
    }

    /**
     * Translate from symbolic to numeric TCGA sample codes.
     * Convert a TCGA sample type code in symbolic form (or &#39;short letter code&#39; like TP, TR) to its corresponding numeric form (e.g. 01, 02).
     * @param shortLetterCode TCGA sample type short letter code(s) (e.g. TP, NB, etc.).  (required)
     * @param format Format of result. (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> shortLetterCodeWithHttpInfo(List<String> shortLetterCode, String format) throws ApiException {
        okhttp3.Call localVarCall = shortLetterCodeValidateBeforeCall(shortLetterCode, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Translate from symbolic to numeric TCGA sample codes. (asynchronously)
     * Convert a TCGA sample type code in symbolic form (or &#39;short letter code&#39; like TP, TR) to its corresponding numeric form (e.g. 01, 02).
     * @param shortLetterCode TCGA sample type short letter code(s) (e.g. TP, NB, etc.).  (required)
     * @param format Format of result. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shortLetterCodeAsync(List<String> shortLetterCode, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = shortLetterCodeValidateBeforeCall(shortLetterCode, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tSSites
     * @param format Format of result. (optional, default to json)
     * @param tssCode Narrow search to one or more TSS codes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tSSitesCall(String format, List<String> tssCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Metadata/TSSites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (tssCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tss_code", tssCode));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tSSitesValidateBeforeCall(String format, List<String> tssCode, final ApiCallback _callback) throws ApiException {
        return tSSitesCall(format, tssCode, _callback);

    }

    /**
     * Obtain identities of tissue source sites in TCGA.
     * By default this function returns a table of all sites which contributed source tissue to TCGA, aka TSS&#39;s. A subset of this table may be obtained by explicitly specifying one or more sites.
     * @param format Format of result. (optional, default to json)
     * @param tssCode Narrow search to one or more TSS codes (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void tSSites(String format, List<String> tssCode) throws ApiException {
        tSSitesWithHttpInfo(format, tssCode);
    }

    /**
     * Obtain identities of tissue source sites in TCGA.
     * By default this function returns a table of all sites which contributed source tissue to TCGA, aka TSS&#39;s. A subset of this table may be obtained by explicitly specifying one or more sites.
     * @param format Format of result. (optional, default to json)
     * @param tssCode Narrow search to one or more TSS codes (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tSSitesWithHttpInfo(String format, List<String> tssCode) throws ApiException {
        okhttp3.Call localVarCall = tSSitesValidateBeforeCall(format, tssCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Obtain identities of tissue source sites in TCGA. (asynchronously)
     * By default this function returns a table of all sites which contributed source tissue to TCGA, aka TSS&#39;s. A subset of this table may be obtained by explicitly specifying one or more sites.
     * @param format Format of result. (optional, default to json)
     * @param tssCode Narrow search to one or more TSS codes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tSSitesAsync(String format, List<String> tssCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tSSitesValidateBeforeCall(format, tssCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
