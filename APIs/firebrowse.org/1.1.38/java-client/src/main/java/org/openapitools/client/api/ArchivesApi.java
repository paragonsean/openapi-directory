/*
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArchivesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArchivesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArchivesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for standardData
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param dataType Narrow search to one or more TCGA data types from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param platform Narrow search to one or more TCGA data generation platforms from the scrollable list. (optional)
     * @param center Narrow search to one or more TCGA centers from the scrollable list. (optional)
     * @param level Narrow search to one or more TCGA data levels. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call standardDataCall(String format, List<LocalDate> date, List<String> cohort, List<String> dataType, List<String> tool, List<String> platform, List<String> center, List<Integer> level, List<String> protocol, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Archives/StandardData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (date != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "date", date));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (dataType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "data_type", dataType));
        }

        if (tool != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tool", tool));
        }

        if (platform != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "platform", platform));
        }

        if (center != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "center", center));
        }

        if (level != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "level", level));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "protocol", protocol));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call standardDataValidateBeforeCall(String format, List<LocalDate> date, List<String> cohort, List<String> dataType, List<String> tool, List<String> platform, List<String> center, List<Integer> level, List<String> protocol, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return standardDataCall(format, date, cohort, dataType, tool, platform, center, level, protocol, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve standard data archives.
     * This service returns the archive URLs for our Firehose standard data runs, providing a RESTful interface similar in spirit to the command line &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Download\&quot;&gt;firehose_get&lt;/a&gt; tool. The archives can be filtered based on date, cohort, data type, platform, center, data level, and protocol.
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param dataType Narrow search to one or more TCGA data types from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param platform Narrow search to one or more TCGA data generation platforms from the scrollable list. (optional)
     * @param center Narrow search to one or more TCGA centers from the scrollable list. (optional)
     * @param level Narrow search to one or more TCGA data levels. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void standardData(String format, List<LocalDate> date, List<String> cohort, List<String> dataType, List<String> tool, List<String> platform, List<String> center, List<Integer> level, List<String> protocol, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        standardDataWithHttpInfo(format, date, cohort, dataType, tool, platform, center, level, protocol, page, pageSize, sortBy);
    }

    /**
     * Retrieve standard data archives.
     * This service returns the archive URLs for our Firehose standard data runs, providing a RESTful interface similar in spirit to the command line &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Download\&quot;&gt;firehose_get&lt;/a&gt; tool. The archives can be filtered based on date, cohort, data type, platform, center, data level, and protocol.
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param dataType Narrow search to one or more TCGA data types from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param platform Narrow search to one or more TCGA data generation platforms from the scrollable list. (optional)
     * @param center Narrow search to one or more TCGA centers from the scrollable list. (optional)
     * @param level Narrow search to one or more TCGA data levels. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> standardDataWithHttpInfo(String format, List<LocalDate> date, List<String> cohort, List<String> dataType, List<String> tool, List<String> platform, List<String> center, List<Integer> level, List<String> protocol, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = standardDataValidateBeforeCall(format, date, cohort, dataType, tool, platform, center, level, protocol, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve standard data archives. (asynchronously)
     * This service returns the archive URLs for our Firehose standard data runs, providing a RESTful interface similar in spirit to the command line &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Download\&quot;&gt;firehose_get&lt;/a&gt; tool. The archives can be filtered based on date, cohort, data type, platform, center, data level, and protocol.
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param dataType Narrow search to one or more TCGA data types from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param platform Narrow search to one or more TCGA data generation platforms from the scrollable list. (optional)
     * @param center Narrow search to one or more TCGA centers from the scrollable list. (optional)
     * @param level Narrow search to one or more TCGA data levels. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call standardDataAsync(String format, List<LocalDate> date, List<String> cohort, List<String> dataType, List<String> tool, List<String> platform, List<String> center, List<Integer> level, List<String> protocol, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = standardDataValidateBeforeCall(format, date, cohort, dataType, tool, platform, center, level, protocol, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
