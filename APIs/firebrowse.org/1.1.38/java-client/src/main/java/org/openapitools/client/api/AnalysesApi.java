/*
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalysesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalysesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalysesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for all
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allCall(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Analyses/CopyNumber/Genes/All";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (gene != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "gene", gene));
        }

        if (tcgaParticipantBarcode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tcga_participant_barcode", tcgaParticipantBarcode));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allValidateBeforeCall(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return allCall(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve all data by genes Gistic2 results.
     * This service provides access to the Gistic2 all_data_by_genes.txt output data. This data is a gene-level table of copy number values for all samples. The returned copy number values are in units (copy number - 2) so that no amplification or deletion is 0, genes with amplifications have positive values, and genes with deletions are negative values. The data are converted from marker level to gene level using the extreme method: a gene is assigned the greatest amplification or the least deletion value among the markers it covers. Results may be filtered by cohort, gene, or barcode, but at least one gene or barcode must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void all(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        allWithHttpInfo(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy);
    }

    /**
     * Retrieve all data by genes Gistic2 results.
     * This service provides access to the Gistic2 all_data_by_genes.txt output data. This data is a gene-level table of copy number values for all samples. The returned copy number values are in units (copy number - 2) so that no amplification or deletion is 0, genes with amplifications have positive values, and genes with deletions are negative values. The data are converted from marker level to gene level using the extreme method: a gene is assigned the greatest amplification or the least deletion value among the markers it covers. Results may be filtered by cohort, gene, or barcode, but at least one gene or barcode must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> allWithHttpInfo(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = allValidateBeforeCall(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve all data by genes Gistic2 results. (asynchronously)
     * This service provides access to the Gistic2 all_data_by_genes.txt output data. This data is a gene-level table of copy number values for all samples. The returned copy number values are in units (copy number - 2) so that no amplification or deletion is 0, genes with amplifications have positive values, and genes with deletions are negative values. The data are converted from marker level to gene level using the extreme method: a gene is assigned the greatest amplification or the least deletion value among the markers it covers. Results may be filtered by cohort, gene, or barcode, but at least one gene or barcode must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allAsync(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = allValidateBeforeCall(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for amplified
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amplifiedCall(String format, List<String> cohort, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Analyses/CopyNumber/Genes/Amplified";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (gene != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "gene", gene));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amplifiedValidateBeforeCall(String format, List<String> cohort, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return amplifiedCall(format, cohort, gene, q, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve Gistic2 significantly amplified genes results.
     * This service provides access to the Gistic2 amp_genes.conf_99.txt output data.  At least 1 gene or cohort must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void amplified(String format, List<String> cohort, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        amplifiedWithHttpInfo(format, cohort, gene, q, page, pageSize, sortBy);
    }

    /**
     * Retrieve Gistic2 significantly amplified genes results.
     * This service provides access to the Gistic2 amp_genes.conf_99.txt output data.  At least 1 gene or cohort must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> amplifiedWithHttpInfo(String format, List<String> cohort, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = amplifiedValidateBeforeCall(format, cohort, gene, q, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Gistic2 significantly amplified genes results. (asynchronously)
     * This service provides access to the Gistic2 amp_genes.conf_99.txt output data.  At least 1 gene or cohort must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amplifiedAsync(String format, List<String> cohort, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = amplifiedValidateBeforeCall(format, cohort, gene, q, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleted
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletedCall(String format, List<String> cohort, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Analyses/CopyNumber/Genes/Deleted";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (gene != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "gene", gene));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletedValidateBeforeCall(String format, List<String> cohort, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return deletedCall(format, cohort, gene, q, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve Gistic2 significantly deleted genes results.
     * This service provides access to the Gistic2 del_genes.conf_99.txt output data.  At least 1 gene or cohort must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void deleted(String format, List<String> cohort, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        deletedWithHttpInfo(format, cohort, gene, q, page, pageSize, sortBy);
    }

    /**
     * Retrieve Gistic2 significantly deleted genes results.
     * This service provides access to the Gistic2 del_genes.conf_99.txt output data.  At least 1 gene or cohort must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletedWithHttpInfo(String format, List<String> cohort, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = deletedValidateBeforeCall(format, cohort, gene, q, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Gistic2 significantly deleted genes results. (asynchronously)
     * This service provides access to the Gistic2 del_genes.conf_99.txt output data.  At least 1 gene or cohort must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletedAsync(String format, List<String> cohort, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletedValidateBeforeCall(format, cohort, gene, q, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for featureTable
     * @param format Format of result. (optional, default to tsv)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param date Select one or more date stamps. (optional)
     * @param column Comma separated list of which data columns/fields to return. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featureTableCall(String format, List<String> cohort, List<LocalDate> date, List<String> column, List<Integer> page, List<Integer> pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Analyses/FeatureTable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (date != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "date", date));
        }

        if (column != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "column", column));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featureTableValidateBeforeCall(String format, List<String> cohort, List<LocalDate> date, List<String> column, List<Integer> page, List<Integer> pageSize, final ApiCallback _callback) throws ApiException {
        return featureTableCall(format, cohort, date, column, page, pageSize, _callback);

    }

    /**
     * Retrieve aggregated analysis features table.
     * This service returns part or all of the so-called &lt;strong&gt;feature table&lt;/strong&gt;; which aggregates the most important findings across ALL pipelines in the GDAC Firehose analysis workflow into a single table for simple access.  One feature table is created per disease cohort.  Results may be filtered by date or cohort, but at least 1 cohort must be specified here. For more details please visit the &lt;a href&#x3D;https://confluence.broadinstitute.org/display/GDAC/Documentation\\#Documentation-FeatureTable&gt;online documentation&lt;/a&gt;.  Please note that the service is still undergoing experimental evaluation and does not return JSON format.
     * @param format Format of result. (optional, default to tsv)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param date Select one or more date stamps. (optional)
     * @param column Comma separated list of which data columns/fields to return. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void featureTable(String format, List<String> cohort, List<LocalDate> date, List<String> column, List<Integer> page, List<Integer> pageSize) throws ApiException {
        featureTableWithHttpInfo(format, cohort, date, column, page, pageSize);
    }

    /**
     * Retrieve aggregated analysis features table.
     * This service returns part or all of the so-called &lt;strong&gt;feature table&lt;/strong&gt;; which aggregates the most important findings across ALL pipelines in the GDAC Firehose analysis workflow into a single table for simple access.  One feature table is created per disease cohort.  Results may be filtered by date or cohort, but at least 1 cohort must be specified here. For more details please visit the &lt;a href&#x3D;https://confluence.broadinstitute.org/display/GDAC/Documentation\\#Documentation-FeatureTable&gt;online documentation&lt;/a&gt;.  Please note that the service is still undergoing experimental evaluation and does not return JSON format.
     * @param format Format of result. (optional, default to tsv)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param date Select one or more date stamps. (optional)
     * @param column Comma separated list of which data columns/fields to return. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> featureTableWithHttpInfo(String format, List<String> cohort, List<LocalDate> date, List<String> column, List<Integer> page, List<Integer> pageSize) throws ApiException {
        okhttp3.Call localVarCall = featureTableValidateBeforeCall(format, cohort, date, column, page, pageSize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve aggregated analysis features table. (asynchronously)
     * This service returns part or all of the so-called &lt;strong&gt;feature table&lt;/strong&gt;; which aggregates the most important findings across ALL pipelines in the GDAC Firehose analysis workflow into a single table for simple access.  One feature table is created per disease cohort.  Results may be filtered by date or cohort, but at least 1 cohort must be specified here. For more details please visit the &lt;a href&#x3D;https://confluence.broadinstitute.org/display/GDAC/Documentation\\#Documentation-FeatureTable&gt;online documentation&lt;/a&gt;.  Please note that the service is still undergoing experimental evaluation and does not return JSON format.
     * @param format Format of result. (optional, default to tsv)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param date Select one or more date stamps. (optional)
     * @param column Comma separated list of which data columns/fields to return. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featureTableAsync(String format, List<String> cohort, List<LocalDate> date, List<String> column, List<Integer> page, List<Integer> pageSize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = featureTableValidateBeforeCall(format, cohort, date, column, page, pageSize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for focal
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call focalCall(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Analyses/CopyNumber/Genes/Focal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (gene != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "gene", gene));
        }

        if (tcgaParticipantBarcode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tcga_participant_barcode", tcgaParticipantBarcode));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call focalValidateBeforeCall(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return focalCall(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve focal data by genes Gistic2 results.
     * This service provides access to the Gistic2 focal_data_by_genes.txt output data. This output is similar to the all_data_by_genes.txt output, but using only focal events with lengths greater than the  focal length cutoff. This data is a gene-level table of copy number values for all samples. The returned copy number values are in units (copy number - 2) so that no amplification or deletion is 0, genes with amplifications have positive values, and genes with deletions are negative values. The data are converted from marker level to gene level using the extreme method: a gene is assigned the greatest amplification or the least deletion value among the markers it covers. Results may be filtered by cohort, gene, and/or barcode, but at least one gene or barcode must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void focal(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        focalWithHttpInfo(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy);
    }

    /**
     * Retrieve focal data by genes Gistic2 results.
     * This service provides access to the Gistic2 focal_data_by_genes.txt output data. This output is similar to the all_data_by_genes.txt output, but using only focal events with lengths greater than the  focal length cutoff. This data is a gene-level table of copy number values for all samples. The returned copy number values are in units (copy number - 2) so that no amplification or deletion is 0, genes with amplifications have positive values, and genes with deletions are negative values. The data are converted from marker level to gene level using the extreme method: a gene is assigned the greatest amplification or the least deletion value among the markers it covers. Results may be filtered by cohort, gene, and/or barcode, but at least one gene or barcode must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> focalWithHttpInfo(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = focalValidateBeforeCall(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve focal data by genes Gistic2 results. (asynchronously)
     * This service provides access to the Gistic2 focal_data_by_genes.txt output data. This output is similar to the all_data_by_genes.txt output, but using only focal events with lengths greater than the  focal length cutoff. This data is a gene-level table of copy number values for all samples. The returned copy number values are in units (copy number - 2) so that no amplification or deletion is 0, genes with amplifications have positive values, and genes with deletions are negative values. The data are converted from marker level to gene level using the extreme method: a gene is assigned the greatest amplification or the least deletion value among the markers it covers. Results may be filtered by cohort, gene, and/or barcode, but at least one gene or barcode must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call focalAsync(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = focalValidateBeforeCall(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mAF
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param column Comma separated list of which data columns/fields to return. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mAFCall(String format, List<String> cohort, List<String> tool, List<String> gene, List<String> tcgaParticipantBarcode, List<String> column, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Analyses/Mutation/MAF";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (tool != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tool", tool));
        }

        if (gene != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "gene", gene));
        }

        if (tcgaParticipantBarcode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tcga_participant_barcode", tcgaParticipantBarcode));
        }

        if (column != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "column", column));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mAFValidateBeforeCall(String format, List<String> cohort, List<String> tool, List<String> gene, List<String> tcgaParticipantBarcode, List<String> column, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return mAFCall(format, cohort, tool, gene, tcgaParticipantBarcode, column, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve MutSig final analysis MAF.
     * This service returns columns from the MAF generated by MutSig. Results may be filtered by gene, cohort, tool, or barcode, but at least one gene OR barcode OR cohort must be given.  By default a subset consisting of the most commonly used columns will be returned, but that can be modified with the column parameter. Specifying &#39;all&#39; in this parameter is a convenient way to return every column of the respective MAF, and has precedence over any any other column selection expression.  The complete list of column names that may be specified is &lt;a href&#x3D;&#39;http://firebrowse.org/api-docs/#!/Metadata/MAFColNames&#39;&gt;given here&lt;/a&gt;.  For more information on the mutation data, and how it is processed by Firehose, please consult the &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-MutationPipelines\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param column Comma separated list of which data columns/fields to return. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void mAF(String format, List<String> cohort, List<String> tool, List<String> gene, List<String> tcgaParticipantBarcode, List<String> column, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        mAFWithHttpInfo(format, cohort, tool, gene, tcgaParticipantBarcode, column, page, pageSize, sortBy);
    }

    /**
     * Retrieve MutSig final analysis MAF.
     * This service returns columns from the MAF generated by MutSig. Results may be filtered by gene, cohort, tool, or barcode, but at least one gene OR barcode OR cohort must be given.  By default a subset consisting of the most commonly used columns will be returned, but that can be modified with the column parameter. Specifying &#39;all&#39; in this parameter is a convenient way to return every column of the respective MAF, and has precedence over any any other column selection expression.  The complete list of column names that may be specified is &lt;a href&#x3D;&#39;http://firebrowse.org/api-docs/#!/Metadata/MAFColNames&#39;&gt;given here&lt;/a&gt;.  For more information on the mutation data, and how it is processed by Firehose, please consult the &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-MutationPipelines\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param column Comma separated list of which data columns/fields to return. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mAFWithHttpInfo(String format, List<String> cohort, List<String> tool, List<String> gene, List<String> tcgaParticipantBarcode, List<String> column, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = mAFValidateBeforeCall(format, cohort, tool, gene, tcgaParticipantBarcode, column, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve MutSig final analysis MAF. (asynchronously)
     * This service returns columns from the MAF generated by MutSig. Results may be filtered by gene, cohort, tool, or barcode, but at least one gene OR barcode OR cohort must be given.  By default a subset consisting of the most commonly used columns will be returned, but that can be modified with the column parameter. Specifying &#39;all&#39; in this parameter is a convenient way to return every column of the respective MAF, and has precedence over any any other column selection expression.  The complete list of column names that may be specified is &lt;a href&#x3D;&#39;http://firebrowse.org/api-docs/#!/Metadata/MAFColNames&#39;&gt;given here&lt;/a&gt;.  For more information on the mutation data, and how it is processed by Firehose, please consult the &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-MutationPipelines\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param column Comma separated list of which data columns/fields to return. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mAFAsync(String format, List<String> cohort, List<String> tool, List<String> gene, List<String> tcgaParticipantBarcode, List<String> column, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mAFValidateBeforeCall(format, cohort, tool, gene, tcgaParticipantBarcode, column, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mRNASeqQuartiles
     * @param gene Enter a single gene name. (required)
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param sampleType For which type of sample(s) should quartiles be computed? (optional)
     * @param exclude Comma separated list of TCGA participants, identified by barcodes such as TCGA-GF-A4EO, denoting samples to exclude from computation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mRNASeqQuartilesCall(String gene, String format, List<String> cohort, List<String> protocol, List<String> sampleType, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Analyses/mRNASeq/Quartiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (gene != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gene", gene));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "protocol", protocol));
        }

        if (sampleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sample_type", sampleType));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "Exclude", exclude));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mRNASeqQuartilesValidateBeforeCall(String gene, String format, List<String> cohort, List<String> protocol, List<String> sampleType, List<String> exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gene' is set
        if (gene == null) {
            throw new ApiException("Missing the required parameter 'gene' when calling mRNASeqQuartiles(Async)");
        }

        return mRNASeqQuartilesCall(gene, format, cohort, protocol, sampleType, exclude, _callback);

    }

    /**
     * Returns RNASeq expression quartiles, e.g. suitable for drawing a boxplot.
     * For a given gene compute quartiles and extrema, suitable e.g. for drawing a boxplot (Tukey 1977).  Results may be filtered by cohort, sample type, patient barcode  or characterization protocol, and are returned sorted by cohort.  Note that samples for which no expression value was recorded (e.g. &lt;a href&#x3D;\&quot;http://firebrowse.org/api/v1/Samples/mRNASeq?&amp;gene&#x3D;egfr&amp;cohort&#x3D;SKCM&amp;tcga_participant_barcode&#x3D;TCGA-GN-A262\&quot;&gt;the melanoma sample TCGA-GN-262&lt;/a&gt;) are removed prior to calculation.
     * @param gene Enter a single gene name. (required)
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param sampleType For which type of sample(s) should quartiles be computed? (optional)
     * @param exclude Comma separated list of TCGA participants, identified by barcodes such as TCGA-GF-A4EO, denoting samples to exclude from computation. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void mRNASeqQuartiles(String gene, String format, List<String> cohort, List<String> protocol, List<String> sampleType, List<String> exclude) throws ApiException {
        mRNASeqQuartilesWithHttpInfo(gene, format, cohort, protocol, sampleType, exclude);
    }

    /**
     * Returns RNASeq expression quartiles, e.g. suitable for drawing a boxplot.
     * For a given gene compute quartiles and extrema, suitable e.g. for drawing a boxplot (Tukey 1977).  Results may be filtered by cohort, sample type, patient barcode  or characterization protocol, and are returned sorted by cohort.  Note that samples for which no expression value was recorded (e.g. &lt;a href&#x3D;\&quot;http://firebrowse.org/api/v1/Samples/mRNASeq?&amp;gene&#x3D;egfr&amp;cohort&#x3D;SKCM&amp;tcga_participant_barcode&#x3D;TCGA-GN-A262\&quot;&gt;the melanoma sample TCGA-GN-262&lt;/a&gt;) are removed prior to calculation.
     * @param gene Enter a single gene name. (required)
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param sampleType For which type of sample(s) should quartiles be computed? (optional)
     * @param exclude Comma separated list of TCGA participants, identified by barcodes such as TCGA-GF-A4EO, denoting samples to exclude from computation. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mRNASeqQuartilesWithHttpInfo(String gene, String format, List<String> cohort, List<String> protocol, List<String> sampleType, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = mRNASeqQuartilesValidateBeforeCall(gene, format, cohort, protocol, sampleType, exclude, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns RNASeq expression quartiles, e.g. suitable for drawing a boxplot. (asynchronously)
     * For a given gene compute quartiles and extrema, suitable e.g. for drawing a boxplot (Tukey 1977).  Results may be filtered by cohort, sample type, patient barcode  or characterization protocol, and are returned sorted by cohort.  Note that samples for which no expression value was recorded (e.g. &lt;a href&#x3D;\&quot;http://firebrowse.org/api/v1/Samples/mRNASeq?&amp;gene&#x3D;egfr&amp;cohort&#x3D;SKCM&amp;tcga_participant_barcode&#x3D;TCGA-GN-A262\&quot;&gt;the melanoma sample TCGA-GN-262&lt;/a&gt;) are removed prior to calculation.
     * @param gene Enter a single gene name. (required)
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param sampleType For which type of sample(s) should quartiles be computed? (optional)
     * @param exclude Comma separated list of TCGA participants, identified by barcodes such as TCGA-GF-A4EO, denoting samples to exclude from computation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mRNASeqQuartilesAsync(String gene, String format, List<String> cohort, List<String> protocol, List<String> sampleType, List<String> exclude, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mRNASeqQuartilesValidateBeforeCall(gene, format, cohort, protocol, sampleType, exclude, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reports
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param name Narrow search to one or more report names. (optional)
     * @param type Narrow search to one or more report types. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to date)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsCall(String format, List<LocalDate> date, List<String> cohort, List<String> name, List<String> type, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Analyses/Reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (date != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "date", date));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "name", name));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "type", type));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsValidateBeforeCall(String format, List<LocalDate> date, List<String> cohort, List<String> name, List<String> type, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return reportsCall(format, date, cohort, name, type, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve links to summary reports from Firehose analysis runs.
     * This service returns URLs to the analysis result reports for runs of the Broad Institute GDAC Firehose analysis pipeline. At least one year of run reports are maintained in the database, but the reports from the latest run will be returned by default. The set of &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Nozzle\&quot;&gt;Nozzle&lt;/a&gt; reports returned may be filtered by disease cohort, report type and report name.
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param name Narrow search to one or more report names. (optional)
     * @param type Narrow search to one or more report types. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to date)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void reports(String format, List<LocalDate> date, List<String> cohort, List<String> name, List<String> type, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        reportsWithHttpInfo(format, date, cohort, name, type, page, pageSize, sortBy);
    }

    /**
     * Retrieve links to summary reports from Firehose analysis runs.
     * This service returns URLs to the analysis result reports for runs of the Broad Institute GDAC Firehose analysis pipeline. At least one year of run reports are maintained in the database, but the reports from the latest run will be returned by default. The set of &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Nozzle\&quot;&gt;Nozzle&lt;/a&gt; reports returned may be filtered by disease cohort, report type and report name.
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param name Narrow search to one or more report names. (optional)
     * @param type Narrow search to one or more report types. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to date)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportsWithHttpInfo(String format, List<LocalDate> date, List<String> cohort, List<String> name, List<String> type, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = reportsValidateBeforeCall(format, date, cohort, name, type, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve links to summary reports from Firehose analysis runs. (asynchronously)
     * This service returns URLs to the analysis result reports for runs of the Broad Institute GDAC Firehose analysis pipeline. At least one year of run reports are maintained in the database, but the reports from the latest run will be returned by default. The set of &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Nozzle\&quot;&gt;Nozzle&lt;/a&gt; reports returned may be filtered by disease cohort, report type and report name.
     * @param format Format of result. (optional, default to json)
     * @param date Select one or more date stamps. (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param name Narrow search to one or more report names. (optional)
     * @param type Narrow search to one or more report types. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to date)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsAsync(String format, List<LocalDate> date, List<String> cohort, List<String> name, List<String> type, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsValidateBeforeCall(format, date, cohort, name, type, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sMG
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param rank Number of significant genes to return. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to rank)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sMGCall(String format, List<String> cohort, List<String> tool, Integer rank, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Analyses/Mutation/SMG";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (tool != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tool", tool));
        }

        if (rank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rank", rank));
        }

        if (gene != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "gene", gene));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sMGValidateBeforeCall(String format, List<String> cohort, List<String> tool, Integer rank, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return sMGCall(format, cohort, tool, rank, gene, q, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve Significantly Mutated Genes (SMG).
     * This service provides a list of significantly mutated genes, as scored by MutSig.  It may be filtered by cohort, rank, gene, tool and/or Q-value threshold, but at least one cohort or gene must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param rank Number of significant genes to return. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to rank)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void sMG(String format, List<String> cohort, List<String> tool, Integer rank, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        sMGWithHttpInfo(format, cohort, tool, rank, gene, q, page, pageSize, sortBy);
    }

    /**
     * Retrieve Significantly Mutated Genes (SMG).
     * This service provides a list of significantly mutated genes, as scored by MutSig.  It may be filtered by cohort, rank, gene, tool and/or Q-value threshold, but at least one cohort or gene must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param rank Number of significant genes to return. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to rank)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sMGWithHttpInfo(String format, List<String> cohort, List<String> tool, Integer rank, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = sMGValidateBeforeCall(format, cohort, tool, rank, gene, q, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Significantly Mutated Genes (SMG). (asynchronously)
     * This service provides a list of significantly mutated genes, as scored by MutSig.  It may be filtered by cohort, rank, gene, tool and/or Q-value threshold, but at least one cohort or gene must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param rank Number of significant genes to return. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param q Only return results with Q-value &lt;&#x3D; given threshold. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to rank)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sMGAsync(String format, List<String> cohort, List<String> tool, Integer rank, List<String> gene, BigDecimal q, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sMGValidateBeforeCall(format, cohort, tool, rank, gene, q, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for thresholded
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call thresholdedCall(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Analyses/CopyNumber/Genes/Thresholded";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (gene != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "gene", gene));
        }

        if (tcgaParticipantBarcode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tcga_participant_barcode", tcgaParticipantBarcode));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call thresholdedValidateBeforeCall(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return thresholdedCall(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve all thresholded by genes Gistic2 results.
     * This service provides access to the Gistic2 all_thresholded_by_genes.txt output data. A gene-level table of discrete amplification and deletion indicators for all samples. A table value of 0 means no amplification or deletion above the threshold. Amplifications are positive numbers: 1 means amplification above the amplification threshold; 2 means amplifications larger to the arm level amplifications observed for the sample. Deletions are represented by negative table values: -1 represents deletion beyond the threshold; -2 means deletions greater than the minimum arm-level deletion observed for the sample. Results maybe filtered by cohort, gene or barcode, but at least one gene or barcode must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void thresholded(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        thresholdedWithHttpInfo(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy);
    }

    /**
     * Retrieve all thresholded by genes Gistic2 results.
     * This service provides access to the Gistic2 all_thresholded_by_genes.txt output data. A gene-level table of discrete amplification and deletion indicators for all samples. A table value of 0 means no amplification or deletion above the threshold. Amplifications are positive numbers: 1 means amplification above the amplification threshold; 2 means amplifications larger to the arm level amplifications observed for the sample. Deletions are represented by negative table values: -1 represents deletion beyond the threshold; -2 means deletions greater than the minimum arm-level deletion observed for the sample. Results maybe filtered by cohort, gene or barcode, but at least one gene or barcode must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> thresholdedWithHttpInfo(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = thresholdedValidateBeforeCall(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve all thresholded by genes Gistic2 results. (asynchronously)
     * This service provides access to the Gistic2 all_thresholded_by_genes.txt output data. A gene-level table of discrete amplification and deletion indicators for all samples. A table value of 0 means no amplification or deletion above the threshold. Amplifications are positive numbers: 1 means amplification above the amplification threshold; 2 means amplifications larger to the arm level amplifications observed for the sample. Deletions are represented by negative table values: -1 represents deletion beyond the threshold; -2 means deletions greater than the minimum arm-level deletion observed for the sample. Results maybe filtered by cohort, gene or barcode, but at least one gene or barcode must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call thresholdedAsync(String format, List<String> cohort, List<String> gene, List<String> tcgaParticipantBarcode, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = thresholdedValidateBeforeCall(format, cohort, gene, tcgaParticipantBarcode, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
