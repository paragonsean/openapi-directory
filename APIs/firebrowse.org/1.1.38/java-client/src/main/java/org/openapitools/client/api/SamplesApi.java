/*
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SamplesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SamplesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SamplesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clinical
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param cdeName Retrieve results only for specified CDEs, per the Metadata/ClinicalNames function (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clinicalCall(String format, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> cdeName, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Samples/Clinical";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (tcgaParticipantBarcode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tcga_participant_barcode", tcgaParticipantBarcode));
        }

        if (cdeName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cde_name", cdeName));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clinicalValidateBeforeCall(String format, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> cdeName, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return clinicalCall(format, cohort, tcgaParticipantBarcode, cdeName, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve TCGA CDEs verbatim, i.e. not normalized by Firehose.
     * This service returns patient clinical data from TCGA, verbatim. It differs from the Samples/Clinical_FH method by providing access to all TCGA CDEs in their original form, not merely the subset of CDEs normalized by Firehose for analyses.  Results may be selected by disease cohort, patient barcode or CDE name, but at least one cohort, barcode, or CDE must be provided. When filtering by CDE note that only when a patient record contains one or more of the selected CDEs will it be returned. Visit the Metadata/ClinicalNames api function to see the entire list of TCGA CDEs that may be queried via this method. For more information on how clinical data are processed, see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-ClinicalPipeline\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param cdeName Retrieve results only for specified CDEs, per the Metadata/ClinicalNames function (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void clinical(String format, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> cdeName, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        clinicalWithHttpInfo(format, cohort, tcgaParticipantBarcode, cdeName, page, pageSize, sortBy);
    }

    /**
     * Retrieve TCGA CDEs verbatim, i.e. not normalized by Firehose.
     * This service returns patient clinical data from TCGA, verbatim. It differs from the Samples/Clinical_FH method by providing access to all TCGA CDEs in their original form, not merely the subset of CDEs normalized by Firehose for analyses.  Results may be selected by disease cohort, patient barcode or CDE name, but at least one cohort, barcode, or CDE must be provided. When filtering by CDE note that only when a patient record contains one or more of the selected CDEs will it be returned. Visit the Metadata/ClinicalNames api function to see the entire list of TCGA CDEs that may be queried via this method. For more information on how clinical data are processed, see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-ClinicalPipeline\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param cdeName Retrieve results only for specified CDEs, per the Metadata/ClinicalNames function (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clinicalWithHttpInfo(String format, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> cdeName, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = clinicalValidateBeforeCall(format, cohort, tcgaParticipantBarcode, cdeName, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve TCGA CDEs verbatim, i.e. not normalized by Firehose. (asynchronously)
     * This service returns patient clinical data from TCGA, verbatim. It differs from the Samples/Clinical_FH method by providing access to all TCGA CDEs in their original form, not merely the subset of CDEs normalized by Firehose for analyses.  Results may be selected by disease cohort, patient barcode or CDE name, but at least one cohort, barcode, or CDE must be provided. When filtering by CDE note that only when a patient record contains one or more of the selected CDEs will it be returned. Visit the Metadata/ClinicalNames api function to see the entire list of TCGA CDEs that may be queried via this method. For more information on how clinical data are processed, see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-ClinicalPipeline\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param cdeName Retrieve results only for specified CDEs, per the Metadata/ClinicalNames function (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clinicalAsync(String format, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> cdeName, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clinicalValidateBeforeCall(format, cohort, tcgaParticipantBarcode, cdeName, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clinicalFH
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param fhCdeName Retrieve results only for the CDEs specified from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clinicalFHCall(String format, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> fhCdeName, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Samples/Clinical_FH";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (tcgaParticipantBarcode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tcga_participant_barcode", tcgaParticipantBarcode));
        }

        if (fhCdeName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fh_cde_name", fhCdeName));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clinicalFHValidateBeforeCall(String format, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> fhCdeName, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return clinicalFHCall(format, cohort, tcgaParticipantBarcode, fhCdeName, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve CDEs normalized by Firehose and selected for analyses.
     * This service returns patient-level clinical data elements (CDEs) that have been normalized by Firehose for use in analyses. Results may be selected by disease cohort, patient barcode or CDE name, but at least one cohort, barcode or CDE must be provided. When filtering by CDE note that only when a  patient record contains one or more of the selected CDEs will it be returned. Visit &lt;a href&#x3D;\&quot;http://gdac.broadinstitute.org/runs/info/clinical\&quot;&gt;this table of CDEs&lt;/a&gt; to see what&#39;s available for every disase cohort; for more information on how these CDEs are processed see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-ClinicalPipeline\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param fhCdeName Retrieve results only for the CDEs specified from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void clinicalFH(String format, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> fhCdeName, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        clinicalFHWithHttpInfo(format, cohort, tcgaParticipantBarcode, fhCdeName, page, pageSize, sortBy);
    }

    /**
     * Retrieve CDEs normalized by Firehose and selected for analyses.
     * This service returns patient-level clinical data elements (CDEs) that have been normalized by Firehose for use in analyses. Results may be selected by disease cohort, patient barcode or CDE name, but at least one cohort, barcode or CDE must be provided. When filtering by CDE note that only when a  patient record contains one or more of the selected CDEs will it be returned. Visit &lt;a href&#x3D;\&quot;http://gdac.broadinstitute.org/runs/info/clinical\&quot;&gt;this table of CDEs&lt;/a&gt; to see what&#39;s available for every disase cohort; for more information on how these CDEs are processed see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-ClinicalPipeline\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param fhCdeName Retrieve results only for the CDEs specified from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clinicalFHWithHttpInfo(String format, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> fhCdeName, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = clinicalFHValidateBeforeCall(format, cohort, tcgaParticipantBarcode, fhCdeName, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve CDEs normalized by Firehose and selected for analyses. (asynchronously)
     * This service returns patient-level clinical data elements (CDEs) that have been normalized by Firehose for use in analyses. Results may be selected by disease cohort, patient barcode or CDE name, but at least one cohort, barcode or CDE must be provided. When filtering by CDE note that only when a  patient record contains one or more of the selected CDEs will it be returned. Visit &lt;a href&#x3D;\&quot;http://gdac.broadinstitute.org/runs/info/clinical\&quot;&gt;this table of CDEs&lt;/a&gt; to see what&#39;s available for every disase cohort; for more information on how these CDEs are processed see our &lt;a href&#x3D;\&quot;https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-ClinicalPipeline\&quot;&gt;pipeline documentation&lt;/a&gt;.
     * @param format Format of result. (optional, default to json)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param fhCdeName Retrieve results only for the CDEs specified from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clinicalFHAsync(String format, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> fhCdeName, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clinicalFHValidateBeforeCall(format, cohort, tcgaParticipantBarcode, fhCdeName, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mRNASeq
     * @param format Format of result. (optional, default to json)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mRNASeqCall(String format, List<String> gene, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> sampleType, List<String> protocol, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Samples/mRNASeq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (gene != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "gene", gene));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (tcgaParticipantBarcode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tcga_participant_barcode", tcgaParticipantBarcode));
        }

        if (sampleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sample_type", sampleType));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "protocol", protocol));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mRNASeqValidateBeforeCall(String format, List<String> gene, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> sampleType, List<String> protocol, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return mRNASeqCall(format, gene, cohort, tcgaParticipantBarcode, sampleType, protocol, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve mRNASeq data.
     * This service returns sample-level log2 mRNASeq expression values. Results may be filtered by gene, cohort, barcode, sample type or characterization protocol, but at least one gene must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void mRNASeq(String format, List<String> gene, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> sampleType, List<String> protocol, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        mRNASeqWithHttpInfo(format, gene, cohort, tcgaParticipantBarcode, sampleType, protocol, page, pageSize, sortBy);
    }

    /**
     * Retrieve mRNASeq data.
     * This service returns sample-level log2 mRNASeq expression values. Results may be filtered by gene, cohort, barcode, sample type or characterization protocol, but at least one gene must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mRNASeqWithHttpInfo(String format, List<String> gene, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> sampleType, List<String> protocol, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = mRNASeqValidateBeforeCall(format, gene, cohort, tcgaParticipantBarcode, sampleType, protocol, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve mRNASeq data. (asynchronously)
     * This service returns sample-level log2 mRNASeq expression values. Results may be filtered by gene, cohort, barcode, sample type or characterization protocol, but at least one gene must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param gene Comma separated list of gene name(s). (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param protocol Narrow search to one or more sample characterization protocols from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mRNASeqAsync(String format, List<String> gene, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> sampleType, List<String> protocol, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mRNASeqValidateBeforeCall(format, gene, cohort, tcgaParticipantBarcode, sampleType, protocol, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for miRSeq
     * @param format Format of result. (optional, default to json)
     * @param mir Comma separated list of miR names (e.g. hsa-let-7b-5p,hsa-let-7a-1). (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call miRSeqCall(String format, List<String> mir, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> tool, List<String> sampleType, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Samples/miRSeq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (mir != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "mir", mir));
        }

        if (cohort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cohort", cohort));
        }

        if (tcgaParticipantBarcode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tcga_participant_barcode", tcgaParticipantBarcode));
        }

        if (tool != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tool", tool));
        }

        if (sampleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sample_type", sampleType));
        }

        if (page != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page", page));
        }

        if (pageSize != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "page_size", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call miRSeqValidateBeforeCall(String format, List<String> mir, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> tool, List<String> sampleType, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback _callback) throws ApiException {
        return miRSeqCall(format, mir, cohort, tcgaParticipantBarcode, tool, sampleType, page, pageSize, sortBy, _callback);

    }

    /**
     * Retrieve miRSeq data.
     * This service returns sample-level log2 miRSeq expression values. Results may be filtered by miR, cohort, barcode, sample type or Firehose preprocessing tool, but at least one miR must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param mir Comma separated list of miR names (e.g. hsa-let-7b-5p,hsa-let-7a-1). (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void miRSeq(String format, List<String> mir, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> tool, List<String> sampleType, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        miRSeqWithHttpInfo(format, mir, cohort, tcgaParticipantBarcode, tool, sampleType, page, pageSize, sortBy);
    }

    /**
     * Retrieve miRSeq data.
     * This service returns sample-level log2 miRSeq expression values. Results may be filtered by miR, cohort, barcode, sample type or Firehose preprocessing tool, but at least one miR must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param mir Comma separated list of miR names (e.g. hsa-let-7b-5p,hsa-let-7a-1). (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> miRSeqWithHttpInfo(String format, List<String> mir, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> tool, List<String> sampleType, List<Integer> page, List<Integer> pageSize, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = miRSeqValidateBeforeCall(format, mir, cohort, tcgaParticipantBarcode, tool, sampleType, page, pageSize, sortBy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve miRSeq data. (asynchronously)
     * This service returns sample-level log2 miRSeq expression values. Results may be filtered by miR, cohort, barcode, sample type or Firehose preprocessing tool, but at least one miR must be supplied.
     * @param format Format of result. (optional, default to json)
     * @param mir Comma separated list of miR names (e.g. hsa-let-7b-5p,hsa-let-7a-1). (optional)
     * @param cohort Narrow search to one or more TCGA disease cohorts from the scrollable list. (optional)
     * @param tcgaParticipantBarcode Comma separated list of TCGA participant barcodes (e.g. TCGA-GF-A4EO). (optional)
     * @param tool Narrow search to include only data/results produced by the selected Firehose tool. (optional)
     * @param sampleType Narrow search to one or more TCGA sample types from the scrollable list. (optional)
     * @param page Which page (slice) of entire results set should be returned.  (optional)
     * @param pageSize Number of records per page of results.  Max is 2000. (optional)
     * @param sortBy Which column in the results should be used for sorting paginated results? (optional, default to cohort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call miRSeqAsync(String format, List<String> mir, List<String> cohort, List<String> tcgaParticipantBarcode, List<String> tool, List<String> sampleType, List<Integer> page, List<Integer> pageSize, String sortBy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = miRSeqValidateBeforeCall(format, mir, cohort, tcgaParticipantBarcode, tool, sampleType, page, pageSize, sortBy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
