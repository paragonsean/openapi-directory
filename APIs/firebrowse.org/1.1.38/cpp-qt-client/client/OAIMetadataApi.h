/**
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMetadataApi_H
#define OAI_OAIMetadataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QDate>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMetadataApi : public QObject {
    Q_OBJECT

public:
    OAIMetadataApi(const int timeOut = 0);
    ~OAIMetadataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  tcga_barcode QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void barcode(const QString &tcga_barcode, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  center QList<QString> [optional]
    */
    virtual void centers(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &center = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void clinicalNames(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void clinicalNamesFH(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  code QList<QString> [required]
    * @param[in]  format QString [optional]
    */
    virtual void code(const QList<QString> &code, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    */
    virtual void cohorts(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  date QList<QDate> [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  sample_type QList<QString> [optional]
    * @param[in]  data_type QList<QString> [optional]
    * @param[in]  totals bool [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void counts(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QDate>> &date = ::OpenAPI::OptionalParam<QList<QDate>>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sample_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &totals = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void dates(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void heartBeat(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void mAFColNames(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void patients(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  platform QList<QString> [optional]
    */
    virtual void platforms(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &platform = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void sampleTypes(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  short_letter_code QList<QString> [required]
    * @param[in]  format QString [optional]
    */
    virtual void shortLetterCode(const QList<QString> &short_letter_code, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  tss_code QList<QString> [optional]
    */
    virtual void tSSites(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tss_code = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void barcodeCallback(OAIHttpRequestWorker *worker);
    void centersCallback(OAIHttpRequestWorker *worker);
    void clinicalNamesCallback(OAIHttpRequestWorker *worker);
    void clinicalNamesFHCallback(OAIHttpRequestWorker *worker);
    void codeCallback(OAIHttpRequestWorker *worker);
    void cohortsCallback(OAIHttpRequestWorker *worker);
    void countsCallback(OAIHttpRequestWorker *worker);
    void datesCallback(OAIHttpRequestWorker *worker);
    void heartBeatCallback(OAIHttpRequestWorker *worker);
    void mAFColNamesCallback(OAIHttpRequestWorker *worker);
    void patientsCallback(OAIHttpRequestWorker *worker);
    void platformsCallback(OAIHttpRequestWorker *worker);
    void sampleTypesCallback(OAIHttpRequestWorker *worker);
    void shortLetterCodeCallback(OAIHttpRequestWorker *worker);
    void tSSitesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void barcodeSignal();
    void centersSignal();
    void clinicalNamesSignal();
    void clinicalNamesFHSignal();
    void codeSignal();
    void cohortsSignal();
    void countsSignal();
    void datesSignal();
    void heartBeatSignal();
    void mAFColNamesSignal();
    void patientsSignal();
    void platformsSignal();
    void sampleTypesSignal();
    void shortLetterCodeSignal();
    void tSSitesSignal();


    void barcodeSignalFull(OAIHttpRequestWorker *worker);
    void centersSignalFull(OAIHttpRequestWorker *worker);
    void clinicalNamesSignalFull(OAIHttpRequestWorker *worker);
    void clinicalNamesFHSignalFull(OAIHttpRequestWorker *worker);
    void codeSignalFull(OAIHttpRequestWorker *worker);
    void cohortsSignalFull(OAIHttpRequestWorker *worker);
    void countsSignalFull(OAIHttpRequestWorker *worker);
    void datesSignalFull(OAIHttpRequestWorker *worker);
    void heartBeatSignalFull(OAIHttpRequestWorker *worker);
    void mAFColNamesSignalFull(OAIHttpRequestWorker *worker);
    void patientsSignalFull(OAIHttpRequestWorker *worker);
    void platformsSignalFull(OAIHttpRequestWorker *worker);
    void sampleTypesSignalFull(OAIHttpRequestWorker *worker);
    void shortLetterCodeSignalFull(OAIHttpRequestWorker *worker);
    void tSSitesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use barcodeSignalError() instead")
    void barcodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void barcodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use centersSignalError() instead")
    void centersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void centersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clinicalNamesSignalError() instead")
    void clinicalNamesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clinicalNamesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clinicalNamesFHSignalError() instead")
    void clinicalNamesFHSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clinicalNamesFHSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeSignalError() instead")
    void codeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cohortsSignalError() instead")
    void cohortsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cohortsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countsSignalError() instead")
    void countsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void countsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datesSignalError() instead")
    void datesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void datesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use heartBeatSignalError() instead")
    void heartBeatSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void heartBeatSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mAFColNamesSignalError() instead")
    void mAFColNamesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mAFColNamesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patientsSignalError() instead")
    void patientsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patientsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use platformsSignalError() instead")
    void platformsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void platformsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sampleTypesSignalError() instead")
    void sampleTypesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sampleTypesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shortLetterCodeSignalError() instead")
    void shortLetterCodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shortLetterCodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tSSitesSignalError() instead")
    void tSSitesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tSSitesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use barcodeSignalErrorFull() instead")
    void barcodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void barcodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use centersSignalErrorFull() instead")
    void centersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void centersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clinicalNamesSignalErrorFull() instead")
    void clinicalNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clinicalNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clinicalNamesFHSignalErrorFull() instead")
    void clinicalNamesFHSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clinicalNamesFHSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeSignalErrorFull() instead")
    void codeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cohortsSignalErrorFull() instead")
    void cohortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cohortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countsSignalErrorFull() instead")
    void countsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datesSignalErrorFull() instead")
    void datesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use heartBeatSignalErrorFull() instead")
    void heartBeatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void heartBeatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mAFColNamesSignalErrorFull() instead")
    void mAFColNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mAFColNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patientsSignalErrorFull() instead")
    void patientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use platformsSignalErrorFull() instead")
    void platformsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void platformsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sampleTypesSignalErrorFull() instead")
    void sampleTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sampleTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shortLetterCodeSignalErrorFull() instead")
    void shortLetterCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shortLetterCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tSSitesSignalErrorFull() instead")
    void tSSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tSSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
