/**
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISamplesApi_H
#define OAI_OAISamplesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISamplesApi : public QObject {
    Q_OBJECT

public:
    OAISamplesApi(const int timeOut = 0);
    ~OAISamplesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  tcga_participant_barcode QList<QString> [optional]
    * @param[in]  cde_name QList<QString> [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void clinical(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tcga_participant_barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &cde_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  tcga_participant_barcode QList<QString> [optional]
    * @param[in]  fh_cde_name QList<QString> [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void clinicalFH(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tcga_participant_barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fh_cde_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  gene QList<QString> [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  tcga_participant_barcode QList<QString> [optional]
    * @param[in]  sample_type QList<QString> [optional]
    * @param[in]  protocol QList<QString> [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void mRNASeq(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &gene = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tcga_participant_barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sample_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &protocol = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  mir QList<QString> [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  tcga_participant_barcode QList<QString> [optional]
    * @param[in]  tool QList<QString> [optional]
    * @param[in]  sample_type QList<QString> [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void miRSeq(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &mir = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tcga_participant_barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tool = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sample_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clinicalCallback(OAIHttpRequestWorker *worker);
    void clinicalFHCallback(OAIHttpRequestWorker *worker);
    void mRNASeqCallback(OAIHttpRequestWorker *worker);
    void miRSeqCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clinicalSignal();
    void clinicalFHSignal();
    void mRNASeqSignal();
    void miRSeqSignal();


    void clinicalSignalFull(OAIHttpRequestWorker *worker);
    void clinicalFHSignalFull(OAIHttpRequestWorker *worker);
    void mRNASeqSignalFull(OAIHttpRequestWorker *worker);
    void miRSeqSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use clinicalSignalError() instead")
    void clinicalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clinicalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clinicalFHSignalError() instead")
    void clinicalFHSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clinicalFHSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mRNASeqSignalError() instead")
    void mRNASeqSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mRNASeqSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use miRSeqSignalError() instead")
    void miRSeqSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void miRSeqSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clinicalSignalErrorFull() instead")
    void clinicalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clinicalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clinicalFHSignalErrorFull() instead")
    void clinicalFHSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clinicalFHSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mRNASeqSignalErrorFull() instead")
    void mRNASeqSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mRNASeqSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use miRSeqSignalErrorFull() instead")
    void miRSeqSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void miRSeqSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
