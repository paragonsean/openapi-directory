/**
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalysesApi_H
#define OAI_OAIAnalysesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QDate>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalysesApi : public QObject {
    Q_OBJECT

public:
    OAIAnalysesApi(const int timeOut = 0);
    ~OAIAnalysesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  gene QList<QString> [optional]
    * @param[in]  tcga_participant_barcode QList<QString> [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void all(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &gene = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tcga_participant_barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  gene QList<QString> [optional]
    * @param[in]  q double [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void amplified(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &gene = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<double> &q = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  gene QList<QString> [optional]
    * @param[in]  q double [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void deleted(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &gene = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<double> &q = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  date QList<QDate> [optional]
    * @param[in]  column QList<QString> [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    */
    virtual void featureTable(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QDate>> &date = ::OpenAPI::OptionalParam<QList<QDate>>(), const ::OpenAPI::OptionalParam<QList<QString>> &column = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  gene QList<QString> [optional]
    * @param[in]  tcga_participant_barcode QList<QString> [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void focal(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &gene = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tcga_participant_barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  tool QList<QString> [optional]
    * @param[in]  gene QList<QString> [optional]
    * @param[in]  tcga_participant_barcode QList<QString> [optional]
    * @param[in]  column QList<QString> [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void mAF(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tool = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &gene = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tcga_participant_barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &column = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  gene QString [required]
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  protocol QList<QString> [optional]
    * @param[in]  sample_type QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void mRNASeq_Quartiles(const QString &gene, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &protocol = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sample_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  date QList<QDate> [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  name QList<QString> [optional]
    * @param[in]  type QList<QString> [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void reports(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QDate>> &date = ::OpenAPI::OptionalParam<QList<QDate>>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  tool QList<QString> [optional]
    * @param[in]  rank qint32 [optional]
    * @param[in]  gene QList<QString> [optional]
    * @param[in]  q double [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void sMG(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tool = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &rank = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &gene = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<double> &q = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  cohort QList<QString> [optional]
    * @param[in]  gene QList<QString> [optional]
    * @param[in]  tcga_participant_barcode QList<QString> [optional]
    * @param[in]  page QList<qint32> [optional]
    * @param[in]  page_size QList<qint32> [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void thresholded(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cohort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &gene = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tcga_participant_barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &page_size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void allCallback(OAIHttpRequestWorker *worker);
    void amplifiedCallback(OAIHttpRequestWorker *worker);
    void deletedCallback(OAIHttpRequestWorker *worker);
    void featureTableCallback(OAIHttpRequestWorker *worker);
    void focalCallback(OAIHttpRequestWorker *worker);
    void mAFCallback(OAIHttpRequestWorker *worker);
    void mRNASeq_QuartilesCallback(OAIHttpRequestWorker *worker);
    void reportsCallback(OAIHttpRequestWorker *worker);
    void sMGCallback(OAIHttpRequestWorker *worker);
    void thresholdedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void allSignal();
    void amplifiedSignal();
    void deletedSignal();
    void featureTableSignal();
    void focalSignal();
    void mAFSignal();
    void mRNASeq_QuartilesSignal();
    void reportsSignal();
    void sMGSignal();
    void thresholdedSignal();


    void allSignalFull(OAIHttpRequestWorker *worker);
    void amplifiedSignalFull(OAIHttpRequestWorker *worker);
    void deletedSignalFull(OAIHttpRequestWorker *worker);
    void featureTableSignalFull(OAIHttpRequestWorker *worker);
    void focalSignalFull(OAIHttpRequestWorker *worker);
    void mAFSignalFull(OAIHttpRequestWorker *worker);
    void mRNASeq_QuartilesSignalFull(OAIHttpRequestWorker *worker);
    void reportsSignalFull(OAIHttpRequestWorker *worker);
    void sMGSignalFull(OAIHttpRequestWorker *worker);
    void thresholdedSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use allSignalError() instead")
    void allSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void allSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use amplifiedSignalError() instead")
    void amplifiedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void amplifiedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletedSignalError() instead")
    void deletedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featureTableSignalError() instead")
    void featureTableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void featureTableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use focalSignalError() instead")
    void focalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void focalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mAFSignalError() instead")
    void mAFSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mAFSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mRNASeq_QuartilesSignalError() instead")
    void mRNASeq_QuartilesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mRNASeq_QuartilesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsSignalError() instead")
    void reportsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sMGSignalError() instead")
    void sMGSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sMGSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use thresholdedSignalError() instead")
    void thresholdedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void thresholdedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use allSignalErrorFull() instead")
    void allSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use amplifiedSignalErrorFull() instead")
    void amplifiedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void amplifiedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletedSignalErrorFull() instead")
    void deletedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featureTableSignalErrorFull() instead")
    void featureTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featureTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use focalSignalErrorFull() instead")
    void focalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void focalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mAFSignalErrorFull() instead")
    void mAFSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mAFSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mRNASeq_QuartilesSignalErrorFull() instead")
    void mRNASeq_QuartilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mRNASeq_QuartilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsSignalErrorFull() instead")
    void reportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sMGSignalErrorFull() instead")
    void sMGSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sMGSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use thresholdedSignalErrorFull() instead")
    void thresholdedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void thresholdedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
