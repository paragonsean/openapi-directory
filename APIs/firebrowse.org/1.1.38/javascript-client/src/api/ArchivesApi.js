/**
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Archives service.
* @module api/ArchivesApi
* @version 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
*/
export default class ArchivesApi {

    /**
    * Constructs a new ArchivesApi. 
    * @alias module:api/ArchivesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the standardData operation.
     * @callback module:api/ArchivesApi~standardDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve standard data archives.
     * This service returns the archive URLs for our Firehose standard data runs, providing a RESTful interface similar in spirit to the command line <a href=\"https://confluence.broadinstitute.org/display/GDAC/Download\">firehose_get</a> tool. The archives can be filtered based on date, cohort, data type, platform, center, data level, and protocol.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {Array.<module:model/Date>} [date] Select one or more date stamps.
     * @param {Array.<module:model/String>} [cohort] Narrow search to one or more TCGA disease cohorts from the scrollable list.
     * @param {Array.<module:model/String>} [dataType] Narrow search to one or more TCGA data types from the scrollable list.
     * @param {Array.<module:model/String>} [tool] Narrow search to include only data/results produced by the selected Firehose tool.
     * @param {Array.<module:model/String>} [platform] Narrow search to one or more TCGA data generation platforms from the scrollable list.
     * @param {Array.<module:model/String>} [center] Narrow search to one or more TCGA centers from the scrollable list.
     * @param {Array.<module:model/Number>} [level] Narrow search to one or more TCGA data levels.
     * @param {Array.<module:model/String>} [protocol] Narrow search to one or more sample characterization protocols from the scrollable list.
     * @param {Array.<Number>} [page] Which page (slice) of entire results set should be returned. 
     * @param {Array.<Number>} [pageSize] Number of records per page of results.  Max is 2000.
     * @param {module:model/String} [sortBy = 'cohort')] Which column in the results should be used for sorting paginated results?
     * @param {module:api/ArchivesApi~standardDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    standardData(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'date': this.apiClient.buildCollectionParam(opts['date'], 'csv'),
        'cohort': this.apiClient.buildCollectionParam(opts['cohort'], 'csv'),
        'data_type': this.apiClient.buildCollectionParam(opts['dataType'], 'csv'),
        'tool': this.apiClient.buildCollectionParam(opts['tool'], 'csv'),
        'platform': this.apiClient.buildCollectionParam(opts['platform'], 'csv'),
        'center': this.apiClient.buildCollectionParam(opts['center'], 'csv'),
        'level': this.apiClient.buildCollectionParam(opts['level'], 'csv'),
        'protocol': this.apiClient.buildCollectionParam(opts['protocol'], 'csv'),
        'page': this.apiClient.buildCollectionParam(opts['page'], 'csv'),
        'page_size': this.apiClient.buildCollectionParam(opts['pageSize'], 'csv'),
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Archives/StandardData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
