/**
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Metadata service.
* @module api/MetadataApi
* @version 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
*/
export default class MetadataApi {

    /**
    * Constructs a new MetadataApi. 
    * @alias module:api/MetadataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the barcode operation.
     * @callback module:api/MetadataApi~barcodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a TCGA barcode, return its short letter sample type code.
     * @param {String} tCGABarcode Enter a single TCGA barcode, of any form: e.g. TCGA-GF-A4EO-06 or TCGA-EL-A3D5-01A-22D-A202-08
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {module:api/MetadataApi~barcodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    barcode(tCGABarcode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tCGABarcode' is set
      if (tCGABarcode === undefined || tCGABarcode === null) {
        throw new Error("Missing the required parameter 'tCGABarcode' when calling barcode");
      }

      let pathParams = {
        'TCGA_Barcode': tCGABarcode
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/SampleType/Barcode/{TCGA_Barcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the centers operation.
     * @callback module:api/MetadataApi~centersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain identities of TCGA consortium member centers.
     * By default this function returns a table of all consortium members in TCGA, aka centers; it provides both the HTTP domain and full organizational name of each center.  A subset of this table may be obtained by explicitly specifying one or more domain names.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {Array.<module:model/String>} [center] Narrow search to one or more TCGA centers from the scrollable list.
     * @param {module:api/MetadataApi~centersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    centers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'center': this.apiClient.buildCollectionParam(opts['center'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/Centers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clinicalNames operation.
     * @callback module:api/MetadataApi~clinicalNamesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve names of all TCGA clinical data elements (CDEs).
     * Retrieve names of all patient-level clinical data elements (CDES) available in TCGA, unioned across all disease cohorts. A CDE will be listed here only when it has a value other than NA for at least 1 patient case in any disease cohort. For more information on how these CDEs are processed see our <a href=\"https://confluence.broadinstitute.org/display/GDAC/Documentation\">pipeline documentation</a>.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {module:api/MetadataApi~clinicalNamesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clinicalNames(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/ClinicalNames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clinicalNamesFH operation.
     * @callback module:api/MetadataApi~clinicalNamesFHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve names of CDEs normalized by Firehose and selected for analyses.
     * This service returns the names of patient-level clinical data elements (CDEs) that have been normalized by Firehose for use in analyses, unioned across all disease cohorts. For more information on how these CDEs are processed, see our <a href=\"https://confluence.broadinstitute.org/display/GDAC/Documentation\">pipeline documentation</a>.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {module:api/MetadataApi~clinicalNamesFHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clinicalNamesFH(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/ClinicalNames_FH', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the code operation.
     * @callback module:api/MetadataApi~codeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate from numeric to symbolic TCGA sample codes.
     * Convert a TCGA numeric sample type code (e.g. 01, 02) to its corresponding symbolic (short letter) code (e.g. TP, TR).
     * @param {Array.<module:model/String>} code Narrow search to one or more TCGA sample type codes.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {module:api/MetadataApi~codeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    code(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling code");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/SampleType/Code/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cohorts operation.
     * @callback module:api/MetadataApi~cohortsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate TCGA cohort abbreviations to full disease names.
     * By default this function returns a table containing all TCGA cohort abbreviations and their corresponding disease names.  A subset of that table may be obtained by explicitly specifying one or more cohort abbreviations.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {Array.<module:model/String>} [cohort] Narrow search to one or more TCGA disease cohorts from the scrollable list.
     * @param {module:api/MetadataApi~cohortsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cohorts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'cohort': this.apiClient.buildCollectionParam(opts['cohort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/Cohorts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the counts operation.
     * @callback module:api/MetadataApi~countsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve sample counts.
     * Returns the aliquot counts for each disease cohort, per sample type and data type.  The sample type designation of \"Tumor\" may be used to aggregate the count of all tumor aliquots into a single number per disease and data type. See the SampleTypes function for a complete description of sample types.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {Array.<module:model/Date>} [date] Select one or more date stamps.
     * @param {Array.<module:model/String>} [cohort] Narrow search to one or more TCGA disease cohorts from the scrollable list.
     * @param {Array.<module:model/String>} [sampleType] Narrow search to one or more TCGA sample types from the scrollable list.
     * @param {Array.<module:model/String>} [dataType] Narrow search to one or more TCGA data types from the scrollable list.
     * @param {Boolean} [totals = true)] Output an entry providing the totals for each data type.
     * @param {module:model/String} [sortBy = 'cohort')] Which column in the results should be used for sorting paginated results?
     * @param {module:api/MetadataApi~countsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    counts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'date': this.apiClient.buildCollectionParam(opts['date'], 'csv'),
        'cohort': this.apiClient.buildCollectionParam(opts['cohort'], 'csv'),
        'sample_type': this.apiClient.buildCollectionParam(opts['sampleType'], 'csv'),
        'data_type': this.apiClient.buildCollectionParam(opts['dataType'], 'csv'),
        'totals': opts['totals'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/Counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dates operation.
     * @callback module:api/MetadataApi~datesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve dates of all GDAC Firehose stddata & analyses runs that have been ingested into FireBrowse.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {module:api/MetadataApi~datesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/Dates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heartBeat operation.
     * @callback module:api/MetadataApi~heartBeatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simple way to discern whether API server is up and running
     * Returns a message to indicate that API (server) is up and running, or times out if not.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {module:api/MetadataApi~heartBeatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    heartBeat(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/HeartBeat', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mAFColNames operation.
     * @callback module:api/MetadataApi~mAFColNamesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve names of all columns in the mutation annotation files (MAFs) served by FireBrowse.
     * Retrieve the names of all columns in the mutation annotation files (MAFs) hosted by FireBrowse.  For more information on the mutation data, and how it is processed by Firehose, please consult the <a href=\"https://confluence.broadinstitute.org/display/GDAC/Documentation#Documentation-MutationPipelines\">pipeline documentation</a>.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {module:api/MetadataApi~mAFColNamesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mAFColNames(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/MAFColNames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patients operation.
     * @callback module:api/MetadataApi~patientsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve list of all TCGA patients.
     * This service returns a list of all TCGA patient barcodes in FireBrowse, optionally filtered by disease cohort.  The barcodes are obtained directy from the clinical data.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {Array.<module:model/String>} [cohort] Narrow search to one or more TCGA disease cohorts from the scrollable list.
     * @param {Array.<Number>} [page] Which page (slice) of entire results set should be returned. 
     * @param {Array.<Number>} [pageSize] Number of records per page of results.  Max is 2000.
     * @param {module:model/String} [sortBy = 'cohort')] Which column in the results should be used for sorting paginated results?
     * @param {module:api/MetadataApi~patientsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patients(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'cohort': this.apiClient.buildCollectionParam(opts['cohort'], 'csv'),
        'page': this.apiClient.buildCollectionParam(opts['page'], 'csv'),
        'page_size': this.apiClient.buildCollectionParam(opts['pageSize'], 'csv'),
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/Patients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the platforms operation.
     * @callback module:api/MetadataApi~platformsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate TCGA platform codes to full platform names.
     * By default this function returns a table of all of the technology platforms used to sequence or characterize samples in TCGA--both their short platform codes and full names.  A subset of this table may be obtained by explicitly specifying one or more platform codes.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {Array.<module:model/String>} [platform] Narrow search to one or more TCGA data generation platforms from the scrollable list.
     * @param {module:api/MetadataApi~platformsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    platforms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'platform': this.apiClient.buildCollectionParam(opts['platform'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/Platforms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sampleTypes operation.
     * @callback module:api/MetadataApi~sampleTypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all TCGA sample type codes, both numeric and symbolic.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {module:api/MetadataApi~sampleTypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sampleTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/SampleTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shortLetterCode operation.
     * @callback module:api/MetadataApi~shortLetterCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate from symbolic to numeric TCGA sample codes.
     * Convert a TCGA sample type code in symbolic form (or 'short letter code' like TP, TR) to its corresponding numeric form (e.g. 01, 02).
     * @param {Array.<module:model/String>} shortLetterCode TCGA sample type short letter code(s) (e.g. TP, NB, etc.). 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {module:api/MetadataApi~shortLetterCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shortLetterCode(shortLetterCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shortLetterCode' is set
      if (shortLetterCode === undefined || shortLetterCode === null) {
        throw new Error("Missing the required parameter 'shortLetterCode' when calling shortLetterCode");
      }

      let pathParams = {
        'short_letter_code': shortLetterCode
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/SampleType/ShortLetterCode/{short_letter_code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tSSites operation.
     * @callback module:api/MetadataApi~tSSitesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain identities of tissue source sites in TCGA.
     * By default this function returns a table of all sites which contributed source tissue to TCGA, aka TSS's. A subset of this table may be obtained by explicitly specifying one or more sites.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of result.
     * @param {Array.<module:model/String>} [tssCode] Narrow search to one or more TSS codes
     * @param {module:api/MetadataApi~tSSitesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tSSites(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'tss_code': this.apiClient.buildCollectionParam(opts['tssCode'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Metadata/TSSites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
