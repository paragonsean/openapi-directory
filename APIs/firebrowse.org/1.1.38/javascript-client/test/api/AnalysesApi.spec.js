/**
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FireBrowseBetaApi);
  }
}(this, function(expect, FireBrowseBetaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FireBrowseBetaApi.AnalysesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AnalysesApi', function() {
    describe('all', function() {
      it('should call all successfully', function(done) {
        //uncomment below and update the code to test all
        //instance.all(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('amplified', function() {
      it('should call amplified successfully', function(done) {
        //uncomment below and update the code to test amplified
        //instance.amplified(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleted', function() {
      it('should call deleted successfully', function(done) {
        //uncomment below and update the code to test deleted
        //instance.deleted(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('featureTable', function() {
      it('should call featureTable successfully', function(done) {
        //uncomment below and update the code to test featureTable
        //instance.featureTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('focal', function() {
      it('should call focal successfully', function(done) {
        //uncomment below and update the code to test focal
        //instance.focal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mAF', function() {
      it('should call mAF successfully', function(done) {
        //uncomment below and update the code to test mAF
        //instance.mAF(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mRNASeqQuartiles', function() {
      it('should call mRNASeqQuartiles successfully', function(done) {
        //uncomment below and update the code to test mRNASeqQuartiles
        //instance.mRNASeqQuartiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reports', function() {
      it('should call reports successfully', function(done) {
        //uncomment below and update the code to test reports
        //instance.reports(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sMG', function() {
      it('should call sMG successfully', function(done) {
        //uncomment below and update the code to test sMG
        //instance.sMG(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('thresholded', function() {
      it('should call thresholded successfully', function(done) {
        //uncomment below and update the code to test thresholded
        //instance.thresholded(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
