/**
 * FireBrowse Beta API
 * A simple and elegant way to explore cancer data
 *
 * The version of the OpenAPI document: 1.1.38 (2018-02-26 11:01:29 484103261f6ef681a05cf163)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FireBrowseBetaApi);
  }
}(this, function(expect, FireBrowseBetaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FireBrowseBetaApi.MetadataApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MetadataApi', function() {
    describe('barcode', function() {
      it('should call barcode successfully', function(done) {
        //uncomment below and update the code to test barcode
        //instance.barcode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('centers', function() {
      it('should call centers successfully', function(done) {
        //uncomment below and update the code to test centers
        //instance.centers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clinicalNames', function() {
      it('should call clinicalNames successfully', function(done) {
        //uncomment below and update the code to test clinicalNames
        //instance.clinicalNames(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clinicalNamesFH', function() {
      it('should call clinicalNamesFH successfully', function(done) {
        //uncomment below and update the code to test clinicalNamesFH
        //instance.clinicalNamesFH(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('code', function() {
      it('should call code successfully', function(done) {
        //uncomment below and update the code to test code
        //instance.code(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cohorts', function() {
      it('should call cohorts successfully', function(done) {
        //uncomment below and update the code to test cohorts
        //instance.cohorts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('counts', function() {
      it('should call counts successfully', function(done) {
        //uncomment below and update the code to test counts
        //instance.counts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dates', function() {
      it('should call dates successfully', function(done) {
        //uncomment below and update the code to test dates
        //instance.dates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heartBeat', function() {
      it('should call heartBeat successfully', function(done) {
        //uncomment below and update the code to test heartBeat
        //instance.heartBeat(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mAFColNames', function() {
      it('should call mAFColNames successfully', function(done) {
        //uncomment below and update the code to test mAFColNames
        //instance.mAFColNames(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patients', function() {
      it('should call patients successfully', function(done) {
        //uncomment below and update the code to test patients
        //instance.patients(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('platforms', function() {
      it('should call platforms successfully', function(done) {
        //uncomment below and update the code to test platforms
        //instance.platforms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sampleTypes', function() {
      it('should call sampleTypes successfully', function(done) {
        //uncomment below and update the code to test sampleTypes
        //instance.sampleTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('shortLetterCode', function() {
      it('should call shortLetterCode successfully', function(done) {
        //uncomment below and update the code to test shortLetterCode
        //instance.shortLetterCode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tSSites', function() {
      it('should call tSSites successfully', function(done) {
        //uncomment below and update the code to test tSSites
        //instance.tSSites(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
