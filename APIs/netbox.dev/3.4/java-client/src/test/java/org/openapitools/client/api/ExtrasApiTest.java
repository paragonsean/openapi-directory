/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.ConfigContext;
import org.openapitools.client.model.ContentType;
import org.openapitools.client.model.CustomField;
import org.openapitools.client.model.CustomLink;
import org.openapitools.client.model.ExportTemplate;
import org.openapitools.client.model.ExtrasConfigContextsList200Response;
import org.openapitools.client.model.ExtrasContentTypesList200Response;
import org.openapitools.client.model.ExtrasCustomFieldsList200Response;
import org.openapitools.client.model.ExtrasCustomLinksList200Response;
import org.openapitools.client.model.ExtrasExportTemplatesList200Response;
import org.openapitools.client.model.ExtrasImageAttachmentsList200Response;
import org.openapitools.client.model.ExtrasJobResultsList200Response;
import org.openapitools.client.model.ExtrasJournalEntriesList200Response;
import org.openapitools.client.model.ExtrasObjectChangesList200Response;
import org.openapitools.client.model.ExtrasSavedFiltersList200Response;
import org.openapitools.client.model.ExtrasTagsList200Response;
import org.openapitools.client.model.ExtrasWebhooksList200Response;
import org.openapitools.client.model.ImageAttachment;
import org.openapitools.client.model.JobResult;
import org.openapitools.client.model.JournalEntry;
import org.openapitools.client.model.ObjectChange;
import org.openapitools.client.model.SavedFilter;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.Webhook;
import org.openapitools.client.model.WritableConfigContext;
import org.openapitools.client.model.WritableCustomField;
import org.openapitools.client.model.WritableJournalEntry;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExtrasApi
 */
@Disabled
public class ExtrasApiTest {

    private final ExtrasApi api = new ExtrasApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsBulkDeleteTest() throws ApiException {
        api.extrasConfigContextsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsBulkPartialUpdateTest() throws ApiException {
        WritableConfigContext writableConfigContext = null;
        ConfigContext response = api.extrasConfigContextsBulkPartialUpdate(writableConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsBulkUpdateTest() throws ApiException {
        WritableConfigContext writableConfigContext = null;
        ConfigContext response = api.extrasConfigContextsBulkUpdate(writableConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsCreateTest() throws ApiException {
        WritableConfigContext writableConfigContext = null;
        ConfigContext response = api.extrasConfigContextsCreate(writableConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasConfigContextsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsListTest() throws ApiException {
        String id = null;
        String name = null;
        String isActive = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteGroup = null;
        String siteGroupId = null;
        String siteId = null;
        String site = null;
        String locationId = null;
        String location = null;
        String deviceTypeId = null;
        String roleId = null;
        String role = null;
        String platformId = null;
        String platform = null;
        String clusterTypeId = null;
        String clusterType = null;
        String clusterGroupId = null;
        String clusterGroup = null;
        String clusterId = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String tagId = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String regionIdN = null;
        String regionN = null;
        String siteGroupN = null;
        String siteGroupIdN = null;
        String siteIdN = null;
        String siteN = null;
        String locationIdN = null;
        String locationN = null;
        String deviceTypeIdN = null;
        String roleIdN = null;
        String roleN = null;
        String platformIdN = null;
        String platformN = null;
        String clusterTypeIdN = null;
        String clusterTypeN = null;
        String clusterGroupIdN = null;
        String clusterGroupN = null;
        String clusterIdN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String tagIdN = null;
        String tagN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasConfigContextsList200Response response = api.extrasConfigContextsList(id, name, isActive, created, lastUpdated, q, regionId, region, siteGroup, siteGroupId, siteId, site, locationId, location, deviceTypeId, roleId, role, platformId, platform, clusterTypeId, clusterType, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tagId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, regionIdN, regionN, siteGroupN, siteGroupIdN, siteIdN, siteN, locationIdN, locationN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, clusterTypeIdN, clusterTypeN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagIdN, tagN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableConfigContext writableConfigContext = null;
        ConfigContext response = api.extrasConfigContextsPartialUpdate(id, writableConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsReadTest() throws ApiException {
        Integer id = null;
        ConfigContext response = api.extrasConfigContextsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsUpdateTest() throws ApiException {
        Integer id = null;
        WritableConfigContext writableConfigContext = null;
        ConfigContext response = api.extrasConfigContextsUpdate(id, writableConfigContext);
        // TODO: test validations
    }

    /**
     * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasContentTypesListTest() throws ApiException {
        BigDecimal id = null;
        String appLabel = null;
        String model = null;
        String q = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasContentTypesList200Response response = api.extrasContentTypesList(id, appLabel, model, q, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasContentTypesReadTest() throws ApiException {
        Integer id = null;
        ContentType response = api.extrasContentTypesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomFieldsBulkDeleteTest() throws ApiException {
        api.extrasCustomFieldsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomFieldsBulkPartialUpdateTest() throws ApiException {
        WritableCustomField writableCustomField = null;
        CustomField response = api.extrasCustomFieldsBulkPartialUpdate(writableCustomField);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomFieldsBulkUpdateTest() throws ApiException {
        WritableCustomField writableCustomField = null;
        CustomField response = api.extrasCustomFieldsBulkUpdate(writableCustomField);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomFieldsCreateTest() throws ApiException {
        WritableCustomField writableCustomField = null;
        CustomField response = api.extrasCustomFieldsCreate(writableCustomField);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomFieldsDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasCustomFieldsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomFieldsListTest() throws ApiException {
        String id = null;
        String contentTypes = null;
        String name = null;
        String groupName = null;
        String required = null;
        String searchWeight = null;
        String filterLogic = null;
        String uiVisibility = null;
        String weight = null;
        String description = null;
        String q = null;
        String type = null;
        String contentTypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String contentTypesN = null;
        String contentTypesIc = null;
        String contentTypesNic = null;
        String contentTypesIew = null;
        String contentTypesNiew = null;
        String contentTypesIsw = null;
        String contentTypesNisw = null;
        String contentTypesIe = null;
        String contentTypesNie = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String groupNameN = null;
        String groupNameIc = null;
        String groupNameNic = null;
        String groupNameIew = null;
        String groupNameNiew = null;
        String groupNameIsw = null;
        String groupNameNisw = null;
        String groupNameIe = null;
        String groupNameNie = null;
        String groupNameEmpty = null;
        String searchWeightN = null;
        String searchWeightLte = null;
        String searchWeightLt = null;
        String searchWeightGte = null;
        String searchWeightGt = null;
        String filterLogicN = null;
        String uiVisibilityN = null;
        String weightN = null;
        String weightLte = null;
        String weightLt = null;
        String weightGte = null;
        String weightGt = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String typeN = null;
        String contentTypeIdN = null;
        String contentTypeIdLte = null;
        String contentTypeIdLt = null;
        String contentTypeIdGte = null;
        String contentTypeIdGt = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasCustomFieldsList200Response response = api.extrasCustomFieldsList(id, contentTypes, name, groupName, required, searchWeight, filterLogic, uiVisibility, weight, description, q, type, contentTypeId, idN, idLte, idLt, idGte, idGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, groupNameEmpty, searchWeightN, searchWeightLte, searchWeightLt, searchWeightGte, searchWeightGt, filterLogicN, uiVisibilityN, weightN, weightLte, weightLt, weightGte, weightGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, typeN, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomFieldsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableCustomField writableCustomField = null;
        CustomField response = api.extrasCustomFieldsPartialUpdate(id, writableCustomField);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomFieldsReadTest() throws ApiException {
        Integer id = null;
        CustomField response = api.extrasCustomFieldsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomFieldsUpdateTest() throws ApiException {
        Integer id = null;
        WritableCustomField writableCustomField = null;
        CustomField response = api.extrasCustomFieldsUpdate(id, writableCustomField);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomLinksBulkDeleteTest() throws ApiException {
        api.extrasCustomLinksBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomLinksBulkPartialUpdateTest() throws ApiException {
        CustomLink customLink = null;
        CustomLink response = api.extrasCustomLinksBulkPartialUpdate(customLink);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomLinksBulkUpdateTest() throws ApiException {
        CustomLink customLink = null;
        CustomLink response = api.extrasCustomLinksBulkUpdate(customLink);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomLinksCreateTest() throws ApiException {
        CustomLink customLink = null;
        CustomLink response = api.extrasCustomLinksCreate(customLink);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomLinksDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasCustomLinksDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomLinksListTest() throws ApiException {
        String id = null;
        String contentTypes = null;
        String name = null;
        String enabled = null;
        String linkText = null;
        String linkUrl = null;
        String weight = null;
        String groupName = null;
        String newWindow = null;
        String q = null;
        String contentTypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String contentTypesN = null;
        String contentTypesIc = null;
        String contentTypesNic = null;
        String contentTypesIew = null;
        String contentTypesNiew = null;
        String contentTypesIsw = null;
        String contentTypesNisw = null;
        String contentTypesIe = null;
        String contentTypesNie = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String linkTextN = null;
        String linkTextIc = null;
        String linkTextNic = null;
        String linkTextIew = null;
        String linkTextNiew = null;
        String linkTextIsw = null;
        String linkTextNisw = null;
        String linkTextIe = null;
        String linkTextNie = null;
        String linkUrlN = null;
        String linkUrlIc = null;
        String linkUrlNic = null;
        String linkUrlIew = null;
        String linkUrlNiew = null;
        String linkUrlIsw = null;
        String linkUrlNisw = null;
        String linkUrlIe = null;
        String linkUrlNie = null;
        String weightN = null;
        String weightLte = null;
        String weightLt = null;
        String weightGte = null;
        String weightGt = null;
        String groupNameN = null;
        String groupNameIc = null;
        String groupNameNic = null;
        String groupNameIew = null;
        String groupNameNiew = null;
        String groupNameIsw = null;
        String groupNameNisw = null;
        String groupNameIe = null;
        String groupNameNie = null;
        String groupNameEmpty = null;
        String contentTypeIdN = null;
        String contentTypeIdLte = null;
        String contentTypeIdLt = null;
        String contentTypeIdGte = null;
        String contentTypeIdGt = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasCustomLinksList200Response response = api.extrasCustomLinksList(id, contentTypes, name, enabled, linkText, linkUrl, weight, groupName, newWindow, q, contentTypeId, idN, idLte, idLt, idGte, idGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, linkTextN, linkTextIc, linkTextNic, linkTextIew, linkTextNiew, linkTextIsw, linkTextNisw, linkTextIe, linkTextNie, linkUrlN, linkUrlIc, linkUrlNic, linkUrlIew, linkUrlNiew, linkUrlIsw, linkUrlNisw, linkUrlIe, linkUrlNie, weightN, weightLte, weightLt, weightGte, weightGt, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, groupNameEmpty, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomLinksPartialUpdateTest() throws ApiException {
        Integer id = null;
        CustomLink customLink = null;
        CustomLink response = api.extrasCustomLinksPartialUpdate(id, customLink);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomLinksReadTest() throws ApiException {
        Integer id = null;
        CustomLink response = api.extrasCustomLinksRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomLinksUpdateTest() throws ApiException {
        Integer id = null;
        CustomLink customLink = null;
        CustomLink response = api.extrasCustomLinksUpdate(id, customLink);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesBulkDeleteTest() throws ApiException {
        api.extrasExportTemplatesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesBulkPartialUpdateTest() throws ApiException {
        ExportTemplate exportTemplate = null;
        ExportTemplate response = api.extrasExportTemplatesBulkPartialUpdate(exportTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesBulkUpdateTest() throws ApiException {
        ExportTemplate exportTemplate = null;
        ExportTemplate response = api.extrasExportTemplatesBulkUpdate(exportTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesCreateTest() throws ApiException {
        ExportTemplate exportTemplate = null;
        ExportTemplate response = api.extrasExportTemplatesCreate(exportTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasExportTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesListTest() throws ApiException {
        String id = null;
        String contentTypes = null;
        String name = null;
        String description = null;
        String q = null;
        String contentTypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String contentTypesN = null;
        String contentTypesIc = null;
        String contentTypesNic = null;
        String contentTypesIew = null;
        String contentTypesNiew = null;
        String contentTypesIsw = null;
        String contentTypesNisw = null;
        String contentTypesIe = null;
        String contentTypesNie = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String contentTypeIdN = null;
        String contentTypeIdLte = null;
        String contentTypeIdLt = null;
        String contentTypeIdGte = null;
        String contentTypeIdGt = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasExportTemplatesList200Response response = api.extrasExportTemplatesList(id, contentTypes, name, description, q, contentTypeId, idN, idLte, idLt, idGte, idGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        ExportTemplate exportTemplate = null;
        ExportTemplate response = api.extrasExportTemplatesPartialUpdate(id, exportTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesReadTest() throws ApiException {
        Integer id = null;
        ExportTemplate response = api.extrasExportTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        ExportTemplate exportTemplate = null;
        ExportTemplate response = api.extrasExportTemplatesUpdate(id, exportTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsBulkDeleteTest() throws ApiException {
        api.extrasImageAttachmentsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsBulkPartialUpdateTest() throws ApiException {
        ImageAttachment imageAttachment = null;
        ImageAttachment response = api.extrasImageAttachmentsBulkPartialUpdate(imageAttachment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsBulkUpdateTest() throws ApiException {
        ImageAttachment imageAttachment = null;
        ImageAttachment response = api.extrasImageAttachmentsBulkUpdate(imageAttachment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsCreateTest() throws ApiException {
        ImageAttachment imageAttachment = null;
        ImageAttachment response = api.extrasImageAttachmentsCreate(imageAttachment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasImageAttachmentsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsListTest() throws ApiException {
        String id = null;
        String contentTypeId = null;
        String objectId = null;
        String name = null;
        String q = null;
        String created = null;
        String contentType = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String contentTypeIdN = null;
        String objectIdN = null;
        String objectIdLte = null;
        String objectIdLt = null;
        String objectIdGte = null;
        String objectIdGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String contentTypeN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasImageAttachmentsList200Response response = api.extrasImageAttachmentsList(id, contentTypeId, objectId, name, q, created, contentType, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, contentTypeN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsPartialUpdateTest() throws ApiException {
        Integer id = null;
        ImageAttachment imageAttachment = null;
        ImageAttachment response = api.extrasImageAttachmentsPartialUpdate(id, imageAttachment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsReadTest() throws ApiException {
        Integer id = null;
        ImageAttachment response = api.extrasImageAttachmentsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsUpdateTest() throws ApiException {
        Integer id = null;
        ImageAttachment imageAttachment = null;
        ImageAttachment response = api.extrasImageAttachmentsUpdate(id, imageAttachment);
        // TODO: test validations
    }

    /**
     * Retrieve a list of job results
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasJobResultsListTest() throws ApiException {
        String id = null;
        String interval = null;
        String status = null;
        String user = null;
        String objType = null;
        String name = null;
        String q = null;
        String created = null;
        String createdBefore = null;
        String createdAfter = null;
        String scheduled = null;
        String scheduledBefore = null;
        String scheduledAfter = null;
        String started = null;
        String startedBefore = null;
        String startedAfter = null;
        String completed = null;
        String completedBefore = null;
        String completedAfter = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String intervalN = null;
        String intervalLte = null;
        String intervalLt = null;
        String intervalGte = null;
        String intervalGt = null;
        String statusN = null;
        String userN = null;
        String objTypeN = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasJobResultsList200Response response = api.extrasJobResultsList(id, interval, status, user, objType, name, q, created, createdBefore, createdAfter, scheduled, scheduledBefore, scheduledAfter, started, startedBefore, startedAfter, completed, completedBefore, completedAfter, idN, idLte, idLt, idGte, idGt, intervalN, intervalLte, intervalLt, intervalGte, intervalGt, statusN, userN, objTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * Retrieve a list of job results
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasJobResultsReadTest() throws ApiException {
        Integer id = null;
        JobResult response = api.extrasJobResultsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasJournalEntriesBulkDeleteTest() throws ApiException {
        api.extrasJournalEntriesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasJournalEntriesBulkPartialUpdateTest() throws ApiException {
        WritableJournalEntry writableJournalEntry = null;
        JournalEntry response = api.extrasJournalEntriesBulkPartialUpdate(writableJournalEntry);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasJournalEntriesBulkUpdateTest() throws ApiException {
        WritableJournalEntry writableJournalEntry = null;
        JournalEntry response = api.extrasJournalEntriesBulkUpdate(writableJournalEntry);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasJournalEntriesCreateTest() throws ApiException {
        WritableJournalEntry writableJournalEntry = null;
        JournalEntry response = api.extrasJournalEntriesCreate(writableJournalEntry);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasJournalEntriesDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasJournalEntriesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasJournalEntriesListTest() throws ApiException {
        String id = null;
        String assignedObjectTypeId = null;
        String assignedObjectId = null;
        String created = null;
        String kind = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String assignedObjectType = null;
        String createdById = null;
        String createdBy = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String assignedObjectTypeIdN = null;
        String assignedObjectIdN = null;
        String assignedObjectIdLte = null;
        String assignedObjectIdLt = null;
        String assignedObjectIdGte = null;
        String assignedObjectIdGt = null;
        String kindN = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String assignedObjectTypeN = null;
        String createdByIdN = null;
        String createdByN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasJournalEntriesList200Response response = api.extrasJournalEntriesList(id, assignedObjectTypeId, assignedObjectId, created, kind, lastUpdated, q, tag, assignedObjectType, createdById, createdBy, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, assignedObjectIdN, assignedObjectIdLte, assignedObjectIdLt, assignedObjectIdGte, assignedObjectIdGt, kindN, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, assignedObjectTypeN, createdByIdN, createdByN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasJournalEntriesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableJournalEntry writableJournalEntry = null;
        JournalEntry response = api.extrasJournalEntriesPartialUpdate(id, writableJournalEntry);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasJournalEntriesReadTest() throws ApiException {
        Integer id = null;
        JournalEntry response = api.extrasJournalEntriesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasJournalEntriesUpdateTest() throws ApiException {
        Integer id = null;
        WritableJournalEntry writableJournalEntry = null;
        JournalEntry response = api.extrasJournalEntriesUpdate(id, writableJournalEntry);
        // TODO: test validations
    }

    /**
     * Retrieve a list of recent changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasObjectChangesListTest() throws ApiException {
        String id = null;
        String user = null;
        String userName = null;
        String requestId = null;
        String action = null;
        String changedObjectTypeId = null;
        String changedObjectId = null;
        String objectRepr = null;
        String q = null;
        String time = null;
        String changedObjectType = null;
        String userId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String userN = null;
        String userNameN = null;
        String userNameIc = null;
        String userNameNic = null;
        String userNameIew = null;
        String userNameNiew = null;
        String userNameIsw = null;
        String userNameNisw = null;
        String userNameIe = null;
        String userNameNie = null;
        String userNameEmpty = null;
        String actionN = null;
        String changedObjectTypeIdN = null;
        String changedObjectIdN = null;
        String changedObjectIdLte = null;
        String changedObjectIdLt = null;
        String changedObjectIdGte = null;
        String changedObjectIdGt = null;
        String objectReprN = null;
        String objectReprIc = null;
        String objectReprNic = null;
        String objectReprIew = null;
        String objectReprNiew = null;
        String objectReprIsw = null;
        String objectReprNisw = null;
        String objectReprIe = null;
        String objectReprNie = null;
        String objectReprEmpty = null;
        String changedObjectTypeN = null;
        String userIdN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasObjectChangesList200Response response = api.extrasObjectChangesList(id, user, userName, requestId, action, changedObjectTypeId, changedObjectId, objectRepr, q, time, changedObjectType, userId, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, userNameEmpty, actionN, changedObjectTypeIdN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, objectReprEmpty, changedObjectTypeN, userIdN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * Retrieve a list of recent changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasObjectChangesReadTest() throws ApiException {
        Integer id = null;
        ObjectChange response = api.extrasObjectChangesRead(id);
        // TODO: test validations
    }

    /**
     * Compile all reports and their related results (if any). Result data is deferred in the list view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasReportsListTest() throws ApiException {
        api.extrasReportsList();
        // TODO: test validations
    }

    /**
     * Retrieve a single Report identified as \&quot;&lt;module&gt;.&lt;report&gt;\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasReportsReadTest() throws ApiException {
        String id = null;
        api.extrasReportsRead(id);
        // TODO: test validations
    }

    /**
     * Run a Report identified as \&quot;&lt;module&gt;.&lt;script&gt;\&quot; and return the pending JobResult as the result
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasReportsRunTest() throws ApiException {
        String id = null;
        api.extrasReportsRun(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasSavedFiltersBulkDeleteTest() throws ApiException {
        api.extrasSavedFiltersBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasSavedFiltersBulkPartialUpdateTest() throws ApiException {
        SavedFilter savedFilter = null;
        SavedFilter response = api.extrasSavedFiltersBulkPartialUpdate(savedFilter);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasSavedFiltersBulkUpdateTest() throws ApiException {
        SavedFilter savedFilter = null;
        SavedFilter response = api.extrasSavedFiltersBulkUpdate(savedFilter);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasSavedFiltersCreateTest() throws ApiException {
        SavedFilter savedFilter = null;
        SavedFilter response = api.extrasSavedFiltersCreate(savedFilter);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasSavedFiltersDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasSavedFiltersDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasSavedFiltersListTest() throws ApiException {
        String id = null;
        String contentTypes = null;
        String name = null;
        String slug = null;
        String description = null;
        String enabled = null;
        String shared = null;
        String weight = null;
        String q = null;
        String contentTypeId = null;
        String userId = null;
        String user = null;
        String usable = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String contentTypesN = null;
        String contentTypesIc = null;
        String contentTypesNic = null;
        String contentTypesIew = null;
        String contentTypesNiew = null;
        String contentTypesIsw = null;
        String contentTypesNisw = null;
        String contentTypesIe = null;
        String contentTypesNie = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String weightN = null;
        String weightLte = null;
        String weightLt = null;
        String weightGte = null;
        String weightGt = null;
        String contentTypeIdN = null;
        String contentTypeIdLte = null;
        String contentTypeIdLt = null;
        String contentTypeIdGte = null;
        String contentTypeIdGt = null;
        String userIdN = null;
        String userN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasSavedFiltersList200Response response = api.extrasSavedFiltersList(id, contentTypes, name, slug, description, enabled, shared, weight, q, contentTypeId, userId, user, usable, idN, idLte, idLt, idGte, idGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, weightN, weightLte, weightLt, weightGte, weightGt, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, userIdN, userN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasSavedFiltersPartialUpdateTest() throws ApiException {
        Integer id = null;
        SavedFilter savedFilter = null;
        SavedFilter response = api.extrasSavedFiltersPartialUpdate(id, savedFilter);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasSavedFiltersReadTest() throws ApiException {
        Integer id = null;
        SavedFilter response = api.extrasSavedFiltersRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasSavedFiltersUpdateTest() throws ApiException {
        Integer id = null;
        SavedFilter savedFilter = null;
        SavedFilter response = api.extrasSavedFiltersUpdate(id, savedFilter);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasScriptsListTest() throws ApiException {
        api.extrasScriptsList();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasScriptsReadTest() throws ApiException {
        String id = null;
        api.extrasScriptsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsBulkDeleteTest() throws ApiException {
        api.extrasTagsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsBulkPartialUpdateTest() throws ApiException {
        Tag tag = null;
        Tag response = api.extrasTagsBulkPartialUpdate(tag);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsBulkUpdateTest() throws ApiException {
        Tag tag = null;
        Tag response = api.extrasTagsBulkUpdate(tag);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsCreateTest() throws ApiException {
        Tag tag = null;
        Tag response = api.extrasTagsCreate(tag);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasTagsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String color = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String contentType = null;
        String contentTypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String colorN = null;
        String colorIc = null;
        String colorNic = null;
        String colorIew = null;
        String colorNiew = null;
        String colorIsw = null;
        String colorNisw = null;
        String colorIe = null;
        String colorNie = null;
        String colorEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasTagsList200Response response = api.extrasTagsList(id, name, slug, color, description, created, lastUpdated, q, contentType, contentTypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsPartialUpdateTest() throws ApiException {
        Integer id = null;
        Tag tag = null;
        Tag response = api.extrasTagsPartialUpdate(id, tag);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsReadTest() throws ApiException {
        Integer id = null;
        Tag response = api.extrasTagsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsUpdateTest() throws ApiException {
        Integer id = null;
        Tag tag = null;
        Tag response = api.extrasTagsUpdate(id, tag);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasWebhooksBulkDeleteTest() throws ApiException {
        api.extrasWebhooksBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasWebhooksBulkPartialUpdateTest() throws ApiException {
        Webhook webhook = null;
        Webhook response = api.extrasWebhooksBulkPartialUpdate(webhook);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasWebhooksBulkUpdateTest() throws ApiException {
        Webhook webhook = null;
        Webhook response = api.extrasWebhooksBulkUpdate(webhook);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasWebhooksCreateTest() throws ApiException {
        Webhook webhook = null;
        Webhook response = api.extrasWebhooksCreate(webhook);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasWebhooksDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasWebhooksDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasWebhooksListTest() throws ApiException {
        String id = null;
        String name = null;
        String typeCreate = null;
        String typeUpdate = null;
        String typeDelete = null;
        String payloadUrl = null;
        String enabled = null;
        String httpMethod = null;
        String httpContentType = null;
        String secret = null;
        String sslVerification = null;
        String caFilePath = null;
        String q = null;
        String contentTypeId = null;
        String contentTypes = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String payloadUrlN = null;
        String payloadUrlIc = null;
        String payloadUrlNic = null;
        String payloadUrlIew = null;
        String payloadUrlNiew = null;
        String payloadUrlIsw = null;
        String payloadUrlNisw = null;
        String payloadUrlIe = null;
        String payloadUrlNie = null;
        String payloadUrlEmpty = null;
        String httpMethodN = null;
        String httpContentTypeN = null;
        String httpContentTypeIc = null;
        String httpContentTypeNic = null;
        String httpContentTypeIew = null;
        String httpContentTypeNiew = null;
        String httpContentTypeIsw = null;
        String httpContentTypeNisw = null;
        String httpContentTypeIe = null;
        String httpContentTypeNie = null;
        String httpContentTypeEmpty = null;
        String secretN = null;
        String secretIc = null;
        String secretNic = null;
        String secretIew = null;
        String secretNiew = null;
        String secretIsw = null;
        String secretNisw = null;
        String secretIe = null;
        String secretNie = null;
        String secretEmpty = null;
        String caFilePathN = null;
        String caFilePathIc = null;
        String caFilePathNic = null;
        String caFilePathIew = null;
        String caFilePathNiew = null;
        String caFilePathIsw = null;
        String caFilePathNisw = null;
        String caFilePathIe = null;
        String caFilePathNie = null;
        String caFilePathEmpty = null;
        String contentTypeIdN = null;
        String contentTypeIdLte = null;
        String contentTypeIdLt = null;
        String contentTypeIdGte = null;
        String contentTypeIdGt = null;
        String contentTypesN = null;
        String contentTypesIc = null;
        String contentTypesNic = null;
        String contentTypesIew = null;
        String contentTypesNiew = null;
        String contentTypesIsw = null;
        String contentTypesNisw = null;
        String contentTypesIe = null;
        String contentTypesNie = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasWebhooksList200Response response = api.extrasWebhooksList(id, name, typeCreate, typeUpdate, typeDelete, payloadUrl, enabled, httpMethod, httpContentType, secret, sslVerification, caFilePath, q, contentTypeId, contentTypes, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, payloadUrlN, payloadUrlIc, payloadUrlNic, payloadUrlIew, payloadUrlNiew, payloadUrlIsw, payloadUrlNisw, payloadUrlIe, payloadUrlNie, payloadUrlEmpty, httpMethodN, httpContentTypeN, httpContentTypeIc, httpContentTypeNic, httpContentTypeIew, httpContentTypeNiew, httpContentTypeIsw, httpContentTypeNisw, httpContentTypeIe, httpContentTypeNie, httpContentTypeEmpty, secretN, secretIc, secretNic, secretIew, secretNiew, secretIsw, secretNisw, secretIe, secretNie, secretEmpty, caFilePathN, caFilePathIc, caFilePathNic, caFilePathIew, caFilePathNiew, caFilePathIsw, caFilePathNisw, caFilePathIe, caFilePathNie, caFilePathEmpty, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasWebhooksPartialUpdateTest() throws ApiException {
        Integer id = null;
        Webhook webhook = null;
        Webhook response = api.extrasWebhooksPartialUpdate(id, webhook);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasWebhooksReadTest() throws ApiException {
        Integer id = null;
        Webhook response = api.extrasWebhooksRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasWebhooksUpdateTest() throws ApiException {
        Integer id = null;
        Webhook webhook = null;
        Webhook response = api.extrasWebhooksUpdate(id, webhook);
        // TODO: test validations
    }

}
