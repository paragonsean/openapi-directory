/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.WirelessLAN;
import org.openapitools.client.model.WirelessLANGroup;
import org.openapitools.client.model.WirelessLink;
import org.openapitools.client.model.WirelessWirelessLanGroupsList200Response;
import org.openapitools.client.model.WirelessWirelessLansList200Response;
import org.openapitools.client.model.WirelessWirelessLinksList200Response;
import org.openapitools.client.model.WritableWirelessLAN;
import org.openapitools.client.model.WritableWirelessLANGroup;
import org.openapitools.client.model.WritableWirelessLink;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WirelessApi
 */
@Disabled
public class WirelessApiTest {

    private final WirelessApi api = new WirelessApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsBulkDeleteTest() throws ApiException {
        api.wirelessWirelessLanGroupsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsBulkPartialUpdateTest() throws ApiException {
        WritableWirelessLANGroup writableWirelessLANGroup = null;
        WirelessLANGroup response = api.wirelessWirelessLanGroupsBulkPartialUpdate(writableWirelessLANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsBulkUpdateTest() throws ApiException {
        WritableWirelessLANGroup writableWirelessLANGroup = null;
        WirelessLANGroup response = api.wirelessWirelessLanGroupsBulkUpdate(writableWirelessLANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsCreateTest() throws ApiException {
        WritableWirelessLANGroup writableWirelessLANGroup = null;
        WirelessLANGroup response = api.wirelessWirelessLanGroupsCreate(writableWirelessLANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.wirelessWirelessLanGroupsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String parentId = null;
        String parent = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String parentIdN = null;
        String parentN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        WirelessWirelessLanGroupsList200Response response = api.wirelessWirelessLanGroupsList(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLANGroup writableWirelessLANGroup = null;
        WirelessLANGroup response = api.wirelessWirelessLanGroupsPartialUpdate(id, writableWirelessLANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsReadTest() throws ApiException {
        Integer id = null;
        WirelessLANGroup response = api.wirelessWirelessLanGroupsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLANGroup writableWirelessLANGroup = null;
        WirelessLANGroup response = api.wirelessWirelessLanGroupsUpdate(id, writableWirelessLANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLansBulkDeleteTest() throws ApiException {
        api.wirelessWirelessLansBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLansBulkPartialUpdateTest() throws ApiException {
        WritableWirelessLAN writableWirelessLAN = null;
        WirelessLAN response = api.wirelessWirelessLansBulkPartialUpdate(writableWirelessLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLansBulkUpdateTest() throws ApiException {
        WritableWirelessLAN writableWirelessLAN = null;
        WirelessLAN response = api.wirelessWirelessLansBulkUpdate(writableWirelessLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLansCreateTest() throws ApiException {
        WritableWirelessLAN writableWirelessLAN = null;
        WirelessLAN response = api.wirelessWirelessLansCreate(writableWirelessLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLansDeleteTest() throws ApiException {
        Integer id = null;
        api.wirelessWirelessLansDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLansListTest() throws ApiException {
        String id = null;
        String ssid = null;
        String authPsk = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String groupId = null;
        String group = null;
        String status = null;
        String vlanId = null;
        String authType = null;
        String authCipher = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String ssidN = null;
        String ssidIc = null;
        String ssidNic = null;
        String ssidIew = null;
        String ssidNiew = null;
        String ssidIsw = null;
        String ssidNisw = null;
        String ssidIe = null;
        String ssidNie = null;
        String ssidEmpty = null;
        String authPskN = null;
        String authPskIc = null;
        String authPskNic = null;
        String authPskIew = null;
        String authPskNiew = null;
        String authPskIsw = null;
        String authPskNisw = null;
        String authPskIe = null;
        String authPskNie = null;
        String authPskEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String groupIdN = null;
        String groupN = null;
        String statusN = null;
        String vlanIdN = null;
        String authTypeN = null;
        String authCipherN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        WirelessWirelessLansList200Response response = api.wirelessWirelessLansList(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, groupId, group, status, vlanId, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, ssidEmpty, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, authPskEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, groupIdN, groupN, statusN, vlanIdN, authTypeN, authCipherN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLansPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLAN writableWirelessLAN = null;
        WirelessLAN response = api.wirelessWirelessLansPartialUpdate(id, writableWirelessLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLansReadTest() throws ApiException {
        Integer id = null;
        WirelessLAN response = api.wirelessWirelessLansRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLansUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLAN writableWirelessLAN = null;
        WirelessLAN response = api.wirelessWirelessLansUpdate(id, writableWirelessLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksBulkDeleteTest() throws ApiException {
        api.wirelessWirelessLinksBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksBulkPartialUpdateTest() throws ApiException {
        WritableWirelessLink writableWirelessLink = null;
        WirelessLink response = api.wirelessWirelessLinksBulkPartialUpdate(writableWirelessLink);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksBulkUpdateTest() throws ApiException {
        WritableWirelessLink writableWirelessLink = null;
        WirelessLink response = api.wirelessWirelessLinksBulkUpdate(writableWirelessLink);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksCreateTest() throws ApiException {
        WritableWirelessLink writableWirelessLink = null;
        WirelessLink response = api.wirelessWirelessLinksCreate(writableWirelessLink);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksDeleteTest() throws ApiException {
        Integer id = null;
        api.wirelessWirelessLinksDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksListTest() throws ApiException {
        String id = null;
        String ssid = null;
        String authPsk = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String interfaceAId = null;
        String interfaceBId = null;
        String status = null;
        String authType = null;
        String authCipher = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String ssidN = null;
        String ssidIc = null;
        String ssidNic = null;
        String ssidIew = null;
        String ssidNiew = null;
        String ssidIsw = null;
        String ssidNisw = null;
        String ssidIe = null;
        String ssidNie = null;
        String ssidEmpty = null;
        String authPskN = null;
        String authPskIc = null;
        String authPskNic = null;
        String authPskIew = null;
        String authPskNiew = null;
        String authPskIsw = null;
        String authPskNisw = null;
        String authPskIe = null;
        String authPskNie = null;
        String authPskEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String interfaceAIdN = null;
        String interfaceAIdLte = null;
        String interfaceAIdLt = null;
        String interfaceAIdGte = null;
        String interfaceAIdGt = null;
        String interfaceBIdN = null;
        String interfaceBIdLte = null;
        String interfaceBIdLt = null;
        String interfaceBIdGte = null;
        String interfaceBIdGt = null;
        String statusN = null;
        String authTypeN = null;
        String authCipherN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        WirelessWirelessLinksList200Response response = api.wirelessWirelessLinksList(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, interfaceAId, interfaceBId, status, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, ssidEmpty, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, authPskEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, interfaceAIdN, interfaceAIdLte, interfaceAIdLt, interfaceAIdGte, interfaceAIdGt, interfaceBIdN, interfaceBIdLte, interfaceBIdLt, interfaceBIdGte, interfaceBIdGt, statusN, authTypeN, authCipherN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLink writableWirelessLink = null;
        WirelessLink response = api.wirelessWirelessLinksPartialUpdate(id, writableWirelessLink);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksReadTest() throws ApiException {
        Integer id = null;
        WirelessLink response = api.wirelessWirelessLinksRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLink writableWirelessLink = null;
        WirelessLink response = api.wirelessWirelessLinksUpdate(id, writableWirelessLink);
        // TODO: test validations
    }

}
