/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.ObjectPermission;
import org.openapitools.client.model.Token;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UsersGroupsList200Response;
import org.openapitools.client.model.UsersPermissionsList200Response;
import org.openapitools.client.model.UsersTokensList200Response;
import org.openapitools.client.model.UsersUsersList200Response;
import org.openapitools.client.model.WritableObjectPermission;
import org.openapitools.client.model.WritableToken;
import org.openapitools.client.model.WritableUser;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Return the UserConfig for the currently authenticated User.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersConfigListTest() throws ApiException {
        api.usersConfigList();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGroupsBulkDeleteTest() throws ApiException {
        api.usersGroupsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGroupsBulkPartialUpdateTest() throws ApiException {
        Group group = null;
        Group response = api.usersGroupsBulkPartialUpdate(group);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGroupsBulkUpdateTest() throws ApiException {
        Group group = null;
        Group response = api.usersGroupsBulkUpdate(group);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGroupsCreateTest() throws ApiException {
        Group group = null;
        Group response = api.usersGroupsCreate(group);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.usersGroupsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGroupsListTest() throws ApiException {
        String id = null;
        String name = null;
        String q = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        UsersGroupsList200Response response = api.usersGroupsList(id, name, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        Group group = null;
        Group response = api.usersGroupsPartialUpdate(id, group);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGroupsReadTest() throws ApiException {
        Integer id = null;
        Group response = api.usersGroupsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGroupsUpdateTest() throws ApiException {
        Integer id = null;
        Group group = null;
        Group response = api.usersGroupsUpdate(id, group);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPermissionsBulkDeleteTest() throws ApiException {
        api.usersPermissionsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPermissionsBulkPartialUpdateTest() throws ApiException {
        WritableObjectPermission writableObjectPermission = null;
        ObjectPermission response = api.usersPermissionsBulkPartialUpdate(writableObjectPermission);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPermissionsBulkUpdateTest() throws ApiException {
        WritableObjectPermission writableObjectPermission = null;
        ObjectPermission response = api.usersPermissionsBulkUpdate(writableObjectPermission);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPermissionsCreateTest() throws ApiException {
        WritableObjectPermission writableObjectPermission = null;
        ObjectPermission response = api.usersPermissionsCreate(writableObjectPermission);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPermissionsDeleteTest() throws ApiException {
        Integer id = null;
        api.usersPermissionsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPermissionsListTest() throws ApiException {
        String id = null;
        String name = null;
        String enabled = null;
        String objectTypes = null;
        String description = null;
        String q = null;
        String userId = null;
        String user = null;
        String groupId = null;
        String group = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String objectTypesN = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String userIdN = null;
        String userN = null;
        String groupIdN = null;
        String groupN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        UsersPermissionsList200Response response = api.usersPermissionsList(id, name, enabled, objectTypes, description, q, userId, user, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, objectTypesN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, userIdN, userN, groupIdN, groupN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPermissionsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableObjectPermission writableObjectPermission = null;
        ObjectPermission response = api.usersPermissionsPartialUpdate(id, writableObjectPermission);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPermissionsReadTest() throws ApiException {
        Integer id = null;
        ObjectPermission response = api.usersPermissionsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPermissionsUpdateTest() throws ApiException {
        Integer id = null;
        WritableObjectPermission writableObjectPermission = null;
        ObjectPermission response = api.usersPermissionsUpdate(id, writableObjectPermission);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTokensBulkDeleteTest() throws ApiException {
        api.usersTokensBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTokensBulkPartialUpdateTest() throws ApiException {
        WritableToken writableToken = null;
        Token response = api.usersTokensBulkPartialUpdate(writableToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTokensBulkUpdateTest() throws ApiException {
        WritableToken writableToken = null;
        Token response = api.usersTokensBulkUpdate(writableToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTokensCreateTest() throws ApiException {
        WritableToken writableToken = null;
        Token response = api.usersTokensCreate(writableToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTokensDeleteTest() throws ApiException {
        Integer id = null;
        api.usersTokensDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTokensListTest() throws ApiException {
        String id = null;
        String key = null;
        String writeEnabled = null;
        String description = null;
        String q = null;
        String userId = null;
        String user = null;
        String created = null;
        String createdGte = null;
        String createdLte = null;
        String expires = null;
        String expiresGte = null;
        String expiresLte = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String keyN = null;
        String keyIc = null;
        String keyNic = null;
        String keyIew = null;
        String keyNiew = null;
        String keyIsw = null;
        String keyNisw = null;
        String keyIe = null;
        String keyNie = null;
        String keyEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String userIdN = null;
        String userN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        UsersTokensList200Response response = api.usersTokensList(id, key, writeEnabled, description, q, userId, user, created, createdGte, createdLte, expires, expiresGte, expiresLte, idN, idLte, idLt, idGte, idGt, keyN, keyIc, keyNic, keyIew, keyNiew, keyIsw, keyNisw, keyIe, keyNie, keyEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, userIdN, userN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTokensPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableToken writableToken = null;
        Token response = api.usersTokensPartialUpdate(id, writableToken);
        // TODO: test validations
    }

    /**
     * Non-authenticated REST API endpoint via which a user may create a Token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTokensProvisionCreateTest() throws ApiException {
        api.usersTokensProvisionCreate();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTokensReadTest() throws ApiException {
        Integer id = null;
        Token response = api.usersTokensRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTokensUpdateTest() throws ApiException {
        Integer id = null;
        WritableToken writableToken = null;
        Token response = api.usersTokensUpdate(id, writableToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUsersBulkDeleteTest() throws ApiException {
        api.usersUsersBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUsersBulkPartialUpdateTest() throws ApiException {
        WritableUser writableUser = null;
        User response = api.usersUsersBulkPartialUpdate(writableUser);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUsersBulkUpdateTest() throws ApiException {
        WritableUser writableUser = null;
        User response = api.usersUsersBulkUpdate(writableUser);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUsersCreateTest() throws ApiException {
        WritableUser writableUser = null;
        User response = api.usersUsersCreate(writableUser);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUsersDeleteTest() throws ApiException {
        Integer id = null;
        api.usersUsersDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUsersListTest() throws ApiException {
        String id = null;
        String username = null;
        String firstName = null;
        String lastName = null;
        String email = null;
        String isStaff = null;
        String isActive = null;
        String q = null;
        String groupId = null;
        String group = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String usernameN = null;
        String usernameIc = null;
        String usernameNic = null;
        String usernameIew = null;
        String usernameNiew = null;
        String usernameIsw = null;
        String usernameNisw = null;
        String usernameIe = null;
        String usernameNie = null;
        String usernameEmpty = null;
        String firstNameN = null;
        String firstNameIc = null;
        String firstNameNic = null;
        String firstNameIew = null;
        String firstNameNiew = null;
        String firstNameIsw = null;
        String firstNameNisw = null;
        String firstNameIe = null;
        String firstNameNie = null;
        String firstNameEmpty = null;
        String lastNameN = null;
        String lastNameIc = null;
        String lastNameNic = null;
        String lastNameIew = null;
        String lastNameNiew = null;
        String lastNameIsw = null;
        String lastNameNisw = null;
        String lastNameIe = null;
        String lastNameNie = null;
        String lastNameEmpty = null;
        String emailN = null;
        String emailIc = null;
        String emailNic = null;
        String emailIew = null;
        String emailNiew = null;
        String emailIsw = null;
        String emailNisw = null;
        String emailIe = null;
        String emailNie = null;
        String emailEmpty = null;
        String groupIdN = null;
        String groupN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        UsersUsersList200Response response = api.usersUsersList(id, username, firstName, lastName, email, isStaff, isActive, q, groupId, group, idN, idLte, idLt, idGte, idGt, usernameN, usernameIc, usernameNic, usernameIew, usernameNiew, usernameIsw, usernameNisw, usernameIe, usernameNie, usernameEmpty, firstNameN, firstNameIc, firstNameNic, firstNameIew, firstNameNiew, firstNameIsw, firstNameNisw, firstNameIe, firstNameNie, firstNameEmpty, lastNameN, lastNameIc, lastNameNic, lastNameIew, lastNameNiew, lastNameIsw, lastNameNisw, lastNameIe, lastNameNie, lastNameEmpty, emailN, emailIc, emailNic, emailIew, emailNiew, emailIsw, emailNisw, emailIe, emailNie, emailEmpty, groupIdN, groupN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUsersPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableUser writableUser = null;
        User response = api.usersUsersPartialUpdate(id, writableUser);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUsersReadTest() throws ApiException {
        Integer id = null;
        User response = api.usersUsersRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUsersUpdateTest() throws ApiException {
        Integer id = null;
        WritableUser writableUser = null;
        User response = api.usersUsersUpdate(id, writableUser);
        // TODO: test validations
    }

}
