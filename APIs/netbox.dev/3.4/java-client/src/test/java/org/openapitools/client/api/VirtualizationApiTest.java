/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Cluster;
import org.openapitools.client.model.ClusterGroup;
import org.openapitools.client.model.ClusterType;
import org.openapitools.client.model.VMInterface;
import org.openapitools.client.model.VirtualMachineWithConfigContext;
import org.openapitools.client.model.VirtualizationClusterGroupsList200Response;
import org.openapitools.client.model.VirtualizationClusterTypesList200Response;
import org.openapitools.client.model.VirtualizationClustersList200Response;
import org.openapitools.client.model.VirtualizationInterfacesList200Response;
import org.openapitools.client.model.VirtualizationVirtualMachinesList200Response;
import org.openapitools.client.model.WritableCluster;
import org.openapitools.client.model.WritableVMInterface;
import org.openapitools.client.model.WritableVirtualMachineWithConfigContext;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VirtualizationApi
 */
@Disabled
public class VirtualizationApiTest {

    private final VirtualizationApi api = new VirtualizationApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsBulkDeleteTest() throws ApiException {
        api.virtualizationClusterGroupsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsBulkPartialUpdateTest() throws ApiException {
        ClusterGroup clusterGroup = null;
        ClusterGroup response = api.virtualizationClusterGroupsBulkPartialUpdate(clusterGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsBulkUpdateTest() throws ApiException {
        ClusterGroup clusterGroup = null;
        ClusterGroup response = api.virtualizationClusterGroupsBulkUpdate(clusterGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsCreateTest() throws ApiException {
        ClusterGroup clusterGroup = null;
        ClusterGroup response = api.virtualizationClusterGroupsCreate(clusterGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.virtualizationClusterGroupsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String contact = null;
        String contactRole = null;
        String contactGroup = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String contactN = null;
        String contactRoleN = null;
        String contactGroupN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        VirtualizationClusterGroupsList200Response response = api.virtualizationClusterGroupsList(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        ClusterGroup clusterGroup = null;
        ClusterGroup response = api.virtualizationClusterGroupsPartialUpdate(id, clusterGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsReadTest() throws ApiException {
        Integer id = null;
        ClusterGroup response = api.virtualizationClusterGroupsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsUpdateTest() throws ApiException {
        Integer id = null;
        ClusterGroup clusterGroup = null;
        ClusterGroup response = api.virtualizationClusterGroupsUpdate(id, clusterGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesBulkDeleteTest() throws ApiException {
        api.virtualizationClusterTypesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesBulkPartialUpdateTest() throws ApiException {
        ClusterType clusterType = null;
        ClusterType response = api.virtualizationClusterTypesBulkPartialUpdate(clusterType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesBulkUpdateTest() throws ApiException {
        ClusterType clusterType = null;
        ClusterType response = api.virtualizationClusterTypesBulkUpdate(clusterType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesCreateTest() throws ApiException {
        ClusterType clusterType = null;
        ClusterType response = api.virtualizationClusterTypesCreate(clusterType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesDeleteTest() throws ApiException {
        Integer id = null;
        api.virtualizationClusterTypesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        VirtualizationClusterTypesList200Response response = api.virtualizationClusterTypesList(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesPartialUpdateTest() throws ApiException {
        Integer id = null;
        ClusterType clusterType = null;
        ClusterType response = api.virtualizationClusterTypesPartialUpdate(id, clusterType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesReadTest() throws ApiException {
        Integer id = null;
        ClusterType response = api.virtualizationClusterTypesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesUpdateTest() throws ApiException {
        Integer id = null;
        ClusterType clusterType = null;
        ClusterType response = api.virtualizationClusterTypesUpdate(id, clusterType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersBulkDeleteTest() throws ApiException {
        api.virtualizationClustersBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersBulkPartialUpdateTest() throws ApiException {
        WritableCluster writableCluster = null;
        Cluster response = api.virtualizationClustersBulkPartialUpdate(writableCluster);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersBulkUpdateTest() throws ApiException {
        WritableCluster writableCluster = null;
        Cluster response = api.virtualizationClustersBulkUpdate(writableCluster);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersCreateTest() throws ApiException {
        WritableCluster writableCluster = null;
        Cluster response = api.virtualizationClustersCreate(writableCluster);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersDeleteTest() throws ApiException {
        Integer id = null;
        api.virtualizationClustersDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersListTest() throws ApiException {
        String id = null;
        String name = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String contact = null;
        String contactRole = null;
        String contactGroup = null;
        String regionId = null;
        String region = null;
        String siteGroupId = null;
        String siteGroup = null;
        String siteId = null;
        String site = null;
        String groupId = null;
        String group = null;
        String typeId = null;
        String type = null;
        String status = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String contactN = null;
        String contactRoleN = null;
        String contactGroupN = null;
        String regionIdN = null;
        String regionN = null;
        String siteGroupIdN = null;
        String siteGroupN = null;
        String siteIdN = null;
        String siteN = null;
        String groupIdN = null;
        String groupN = null;
        String typeIdN = null;
        String typeN = null;
        String statusN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        VirtualizationClustersList200Response response = api.virtualizationClustersList(id, name, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, typeId, type, status, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, typeIdN, typeN, statusN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableCluster writableCluster = null;
        Cluster response = api.virtualizationClustersPartialUpdate(id, writableCluster);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersReadTest() throws ApiException {
        Integer id = null;
        Cluster response = api.virtualizationClustersRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersUpdateTest() throws ApiException {
        Integer id = null;
        WritableCluster writableCluster = null;
        Cluster response = api.virtualizationClustersUpdate(id, writableCluster);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesBulkDeleteTest() throws ApiException {
        api.virtualizationInterfacesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesBulkPartialUpdateTest() throws ApiException {
        WritableVMInterface writableVMInterface = null;
        VMInterface response = api.virtualizationInterfacesBulkPartialUpdate(writableVMInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesBulkUpdateTest() throws ApiException {
        WritableVMInterface writableVMInterface = null;
        VMInterface response = api.virtualizationInterfacesBulkUpdate(writableVMInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesCreateTest() throws ApiException {
        WritableVMInterface writableVMInterface = null;
        VMInterface response = api.virtualizationInterfacesCreate(writableVMInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesDeleteTest() throws ApiException {
        Integer id = null;
        api.virtualizationInterfacesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesListTest() throws ApiException {
        String id = null;
        String name = null;
        String enabled = null;
        String mtu = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String clusterId = null;
        String cluster = null;
        String virtualMachineId = null;
        String virtualMachine = null;
        String parentId = null;
        String bridgeId = null;
        String macAddress = null;
        String vrfId = null;
        String vrf = null;
        String l2vpnId = null;
        String l2vpn = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String mtuN = null;
        String mtuLte = null;
        String mtuLt = null;
        String mtuGte = null;
        String mtuGt = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String clusterIdN = null;
        String clusterN = null;
        String virtualMachineIdN = null;
        String virtualMachineN = null;
        String parentIdN = null;
        String bridgeIdN = null;
        String macAddressN = null;
        String macAddressIc = null;
        String macAddressNic = null;
        String macAddressIew = null;
        String macAddressNiew = null;
        String macAddressIsw = null;
        String macAddressNisw = null;
        String macAddressIe = null;
        String macAddressNie = null;
        String vrfIdN = null;
        String vrfN = null;
        String l2vpnIdN = null;
        String l2vpnN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        VirtualizationInterfacesList200Response response = api.virtualizationInterfacesList(id, name, enabled, mtu, description, created, lastUpdated, q, tag, clusterId, cluster, virtualMachineId, virtualMachine, parentId, bridgeId, macAddress, vrfId, vrf, l2vpnId, l2vpn, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, clusterIdN, clusterN, virtualMachineIdN, virtualMachineN, parentIdN, bridgeIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, vrfIdN, vrfN, l2vpnIdN, l2vpnN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableVMInterface writableVMInterface = null;
        VMInterface response = api.virtualizationInterfacesPartialUpdate(id, writableVMInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesReadTest() throws ApiException {
        Integer id = null;
        VMInterface response = api.virtualizationInterfacesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesUpdateTest() throws ApiException {
        Integer id = null;
        WritableVMInterface writableVMInterface = null;
        VMInterface response = api.virtualizationInterfacesUpdate(id, writableVMInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesBulkDeleteTest() throws ApiException {
        api.virtualizationVirtualMachinesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesBulkPartialUpdateTest() throws ApiException {
        WritableVirtualMachineWithConfigContext writableVirtualMachineWithConfigContext = null;
        VirtualMachineWithConfigContext response = api.virtualizationVirtualMachinesBulkPartialUpdate(writableVirtualMachineWithConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesBulkUpdateTest() throws ApiException {
        WritableVirtualMachineWithConfigContext writableVirtualMachineWithConfigContext = null;
        VirtualMachineWithConfigContext response = api.virtualizationVirtualMachinesBulkUpdate(writableVirtualMachineWithConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesCreateTest() throws ApiException {
        WritableVirtualMachineWithConfigContext writableVirtualMachineWithConfigContext = null;
        VirtualMachineWithConfigContext response = api.virtualizationVirtualMachinesCreate(writableVirtualMachineWithConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesDeleteTest() throws ApiException {
        Integer id = null;
        api.virtualizationVirtualMachinesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesListTest() throws ApiException {
        String id = null;
        String cluster = null;
        String vcpus = null;
        String memory = null;
        String disk = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String contact = null;
        String contactRole = null;
        String contactGroup = null;
        String localContextData = null;
        String status = null;
        String clusterGroupId = null;
        String clusterGroup = null;
        String clusterTypeId = null;
        String clusterType = null;
        String clusterId = null;
        String deviceId = null;
        String device = null;
        String regionId = null;
        String region = null;
        String siteGroupId = null;
        String siteGroup = null;
        String siteId = null;
        String site = null;
        String name = null;
        String roleId = null;
        String role = null;
        String platformId = null;
        String platform = null;
        String macAddress = null;
        String hasPrimaryIp = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String clusterN = null;
        String vcpusN = null;
        String vcpusLte = null;
        String vcpusLt = null;
        String vcpusGte = null;
        String vcpusGt = null;
        String memoryN = null;
        String memoryLte = null;
        String memoryLt = null;
        String memoryGte = null;
        String memoryGt = null;
        String diskN = null;
        String diskLte = null;
        String diskLt = null;
        String diskGte = null;
        String diskGt = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String contactN = null;
        String contactRoleN = null;
        String contactGroupN = null;
        String statusN = null;
        String clusterGroupIdN = null;
        String clusterGroupN = null;
        String clusterTypeIdN = null;
        String clusterTypeN = null;
        String clusterIdN = null;
        String deviceIdN = null;
        String deviceN = null;
        String regionIdN = null;
        String regionN = null;
        String siteGroupIdN = null;
        String siteGroupN = null;
        String siteIdN = null;
        String siteN = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String roleIdN = null;
        String roleN = null;
        String platformIdN = null;
        String platformN = null;
        String macAddressN = null;
        String macAddressIc = null;
        String macAddressNic = null;
        String macAddressIew = null;
        String macAddressNiew = null;
        String macAddressIsw = null;
        String macAddressNisw = null;
        String macAddressIe = null;
        String macAddressNie = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        VirtualizationVirtualMachinesList200Response response = api.virtualizationVirtualMachinesList(id, cluster, vcpus, memory, disk, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, status, clusterGroupId, clusterGroup, clusterTypeId, clusterType, clusterId, deviceId, device, regionId, region, siteGroupId, siteGroup, siteId, site, name, roleId, role, platformId, platform, macAddress, hasPrimaryIp, idN, idLte, idLt, idGte, idGt, clusterN, vcpusN, vcpusLte, vcpusLt, vcpusGte, vcpusGt, memoryN, memoryLte, memoryLt, memoryGte, memoryGt, diskN, diskLte, diskLt, diskGte, diskGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, clusterGroupIdN, clusterGroupN, clusterTypeIdN, clusterTypeN, clusterIdN, deviceIdN, deviceN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, roleIdN, roleN, platformIdN, platformN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableVirtualMachineWithConfigContext writableVirtualMachineWithConfigContext = null;
        VirtualMachineWithConfigContext response = api.virtualizationVirtualMachinesPartialUpdate(id, writableVirtualMachineWithConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesReadTest() throws ApiException {
        Integer id = null;
        VirtualMachineWithConfigContext response = api.virtualizationVirtualMachinesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesUpdateTest() throws ApiException {
        Integer id = null;
        WritableVirtualMachineWithConfigContext writableVirtualMachineWithConfigContext = null;
        VirtualMachineWithConfigContext response = api.virtualizationVirtualMachinesUpdate(id, writableVirtualMachineWithConfigContext);
        // TODO: test validations
    }

}
