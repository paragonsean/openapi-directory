/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ASN;
import org.openapitools.client.model.Aggregate;
import org.openapitools.client.model.AvailableIP;
import org.openapitools.client.model.AvailablePrefix;
import org.openapitools.client.model.AvailableVLAN;
import java.math.BigDecimal;
import org.openapitools.client.model.FHRPGroup;
import org.openapitools.client.model.FHRPGroupAssignment;
import org.openapitools.client.model.IPAddress;
import org.openapitools.client.model.IPRange;
import org.openapitools.client.model.IpamAggregatesList200Response;
import org.openapitools.client.model.IpamAsnsList200Response;
import org.openapitools.client.model.IpamFhrpGroupAssignmentsList200Response;
import org.openapitools.client.model.IpamFhrpGroupsList200Response;
import org.openapitools.client.model.IpamIpAddressesList200Response;
import org.openapitools.client.model.IpamIpRangesList200Response;
import org.openapitools.client.model.IpamL2vpnTerminationsList200Response;
import org.openapitools.client.model.IpamL2vpnsList200Response;
import org.openapitools.client.model.IpamPrefixesList200Response;
import org.openapitools.client.model.IpamRirsList200Response;
import org.openapitools.client.model.IpamRolesList200Response;
import org.openapitools.client.model.IpamRouteTargetsList200Response;
import org.openapitools.client.model.IpamServiceTemplatesList200Response;
import org.openapitools.client.model.IpamServicesList200Response;
import org.openapitools.client.model.IpamVlanGroupsList200Response;
import org.openapitools.client.model.IpamVlansList200Response;
import org.openapitools.client.model.IpamVrfsList200Response;
import org.openapitools.client.model.L2VPN;
import org.openapitools.client.model.L2VPNTermination;
import org.openapitools.client.model.Prefix;
import org.openapitools.client.model.PrefixLength;
import org.openapitools.client.model.RIR;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.RouteTarget;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.ServiceTemplate;
import org.openapitools.client.model.VLAN;
import org.openapitools.client.model.VLANGroup;
import org.openapitools.client.model.VRF;
import org.openapitools.client.model.WritableASN;
import org.openapitools.client.model.WritableAggregate;
import org.openapitools.client.model.WritableAvailableIP;
import org.openapitools.client.model.WritableCreateAvailableVLAN;
import org.openapitools.client.model.WritableFHRPGroupAssignment;
import org.openapitools.client.model.WritableIPAddress;
import org.openapitools.client.model.WritableIPRange;
import org.openapitools.client.model.WritableL2VPN;
import org.openapitools.client.model.WritableL2VPNTermination;
import org.openapitools.client.model.WritablePrefix;
import org.openapitools.client.model.WritableRouteTarget;
import org.openapitools.client.model.WritableService;
import org.openapitools.client.model.WritableServiceTemplate;
import org.openapitools.client.model.WritableVLAN;
import org.openapitools.client.model.WritableVRF;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IpamApi
 */
@Disabled
public class IpamApiTest {

    private final IpamApi api = new IpamApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesBulkDeleteTest() throws ApiException {
        api.ipamAggregatesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesBulkPartialUpdateTest() throws ApiException {
        WritableAggregate writableAggregate = null;
        Aggregate response = api.ipamAggregatesBulkPartialUpdate(writableAggregate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesBulkUpdateTest() throws ApiException {
        WritableAggregate writableAggregate = null;
        Aggregate response = api.ipamAggregatesBulkUpdate(writableAggregate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesCreateTest() throws ApiException {
        WritableAggregate writableAggregate = null;
        Aggregate response = api.ipamAggregatesCreate(writableAggregate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamAggregatesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesListTest() throws ApiException {
        String id = null;
        String dateAdded = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        BigDecimal family = null;
        String prefix = null;
        String rirId = null;
        String rir = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String dateAddedN = null;
        String dateAddedLte = null;
        String dateAddedLt = null;
        String dateAddedGte = null;
        String dateAddedGt = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String rirIdN = null;
        String rirN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamAggregatesList200Response response = api.ipamAggregatesList(id, dateAdded, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, rirId, rir, idN, idLte, idLt, idGte, idGt, dateAddedN, dateAddedLte, dateAddedLt, dateAddedGte, dateAddedGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableAggregate writableAggregate = null;
        Aggregate response = api.ipamAggregatesPartialUpdate(id, writableAggregate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesReadTest() throws ApiException {
        Integer id = null;
        Aggregate response = api.ipamAggregatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableAggregate writableAggregate = null;
        Aggregate response = api.ipamAggregatesUpdate(id, writableAggregate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAsnsBulkDeleteTest() throws ApiException {
        api.ipamAsnsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAsnsBulkPartialUpdateTest() throws ApiException {
        WritableASN writableASN = null;
        ASN response = api.ipamAsnsBulkPartialUpdate(writableASN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAsnsBulkUpdateTest() throws ApiException {
        WritableASN writableASN = null;
        ASN response = api.ipamAsnsBulkUpdate(writableASN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAsnsCreateTest() throws ApiException {
        WritableASN writableASN = null;
        ASN response = api.ipamAsnsCreate(writableASN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAsnsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamAsnsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAsnsListTest() throws ApiException {
        String id = null;
        String asn = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String rirId = null;
        String rir = null;
        String siteId = null;
        String site = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String asnN = null;
        String asnLte = null;
        String asnLt = null;
        String asnGte = null;
        String asnGt = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String rirIdN = null;
        String rirN = null;
        String siteIdN = null;
        String siteN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamAsnsList200Response response = api.ipamAsnsList(id, asn, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rirId, rir, siteId, site, idN, idLte, idLt, idGte, idGt, asnN, asnLte, asnLt, asnGte, asnGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, siteIdN, siteN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAsnsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableASN writableASN = null;
        ASN response = api.ipamAsnsPartialUpdate(id, writableASN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAsnsReadTest() throws ApiException {
        Integer id = null;
        ASN response = api.ipamAsnsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAsnsUpdateTest() throws ApiException {
        Integer id = null;
        WritableASN writableASN = null;
        ASN response = api.ipamAsnsUpdate(id, writableASN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupAssignmentsBulkDeleteTest() throws ApiException {
        api.ipamFhrpGroupAssignmentsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupAssignmentsBulkPartialUpdateTest() throws ApiException {
        WritableFHRPGroupAssignment writableFHRPGroupAssignment = null;
        FHRPGroupAssignment response = api.ipamFhrpGroupAssignmentsBulkPartialUpdate(writableFHRPGroupAssignment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupAssignmentsBulkUpdateTest() throws ApiException {
        WritableFHRPGroupAssignment writableFHRPGroupAssignment = null;
        FHRPGroupAssignment response = api.ipamFhrpGroupAssignmentsBulkUpdate(writableFHRPGroupAssignment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupAssignmentsCreateTest() throws ApiException {
        WritableFHRPGroupAssignment writableFHRPGroupAssignment = null;
        FHRPGroupAssignment response = api.ipamFhrpGroupAssignmentsCreate(writableFHRPGroupAssignment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupAssignmentsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamFhrpGroupAssignmentsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupAssignmentsListTest() throws ApiException {
        String id = null;
        String groupId = null;
        String interfaceType = null;
        String interfaceId = null;
        String priority = null;
        String created = null;
        String lastUpdated = null;
        String device = null;
        String deviceId = null;
        String virtualMachine = null;
        String virtualMachineId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String groupIdN = null;
        String interfaceTypeN = null;
        String interfaceIdN = null;
        String interfaceIdLte = null;
        String interfaceIdLt = null;
        String interfaceIdGte = null;
        String interfaceIdGt = null;
        String priorityN = null;
        String priorityLte = null;
        String priorityLt = null;
        String priorityGte = null;
        String priorityGt = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamFhrpGroupAssignmentsList200Response response = api.ipamFhrpGroupAssignmentsList(id, groupId, interfaceType, interfaceId, priority, created, lastUpdated, device, deviceId, virtualMachine, virtualMachineId, idN, idLte, idLt, idGte, idGt, groupIdN, interfaceTypeN, interfaceIdN, interfaceIdLte, interfaceIdLt, interfaceIdGte, interfaceIdGt, priorityN, priorityLte, priorityLt, priorityGte, priorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupAssignmentsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableFHRPGroupAssignment writableFHRPGroupAssignment = null;
        FHRPGroupAssignment response = api.ipamFhrpGroupAssignmentsPartialUpdate(id, writableFHRPGroupAssignment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupAssignmentsReadTest() throws ApiException {
        Integer id = null;
        FHRPGroupAssignment response = api.ipamFhrpGroupAssignmentsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupAssignmentsUpdateTest() throws ApiException {
        Integer id = null;
        WritableFHRPGroupAssignment writableFHRPGroupAssignment = null;
        FHRPGroupAssignment response = api.ipamFhrpGroupAssignmentsUpdate(id, writableFHRPGroupAssignment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupsBulkDeleteTest() throws ApiException {
        api.ipamFhrpGroupsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupsBulkPartialUpdateTest() throws ApiException {
        FHRPGroup fhRPGroup = null;
        FHRPGroup response = api.ipamFhrpGroupsBulkPartialUpdate(fhRPGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupsBulkUpdateTest() throws ApiException {
        FHRPGroup fhRPGroup = null;
        FHRPGroup response = api.ipamFhrpGroupsBulkUpdate(fhRPGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupsCreateTest() throws ApiException {
        FHRPGroup fhRPGroup = null;
        FHRPGroup response = api.ipamFhrpGroupsCreate(fhRPGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamFhrpGroupsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupsListTest() throws ApiException {
        String id = null;
        String groupId = null;
        String name = null;
        String authKey = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String protocol = null;
        String authType = null;
        String relatedIp = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String groupIdN = null;
        String groupIdLte = null;
        String groupIdLt = null;
        String groupIdGte = null;
        String groupIdGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String authKeyN = null;
        String authKeyIc = null;
        String authKeyNic = null;
        String authKeyIew = null;
        String authKeyNiew = null;
        String authKeyIsw = null;
        String authKeyNisw = null;
        String authKeyIe = null;
        String authKeyNie = null;
        String authKeyEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String protocolN = null;
        String authTypeN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamFhrpGroupsList200Response response = api.ipamFhrpGroupsList(id, groupId, name, authKey, created, lastUpdated, q, tag, protocol, authType, relatedIp, idN, idLte, idLt, idGte, idGt, groupIdN, groupIdLte, groupIdLt, groupIdGte, groupIdGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, authKeyN, authKeyIc, authKeyNic, authKeyIew, authKeyNiew, authKeyIsw, authKeyNisw, authKeyIe, authKeyNie, authKeyEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, protocolN, authTypeN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        FHRPGroup fhRPGroup = null;
        FHRPGroup response = api.ipamFhrpGroupsPartialUpdate(id, fhRPGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupsReadTest() throws ApiException {
        Integer id = null;
        FHRPGroup response = api.ipamFhrpGroupsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamFhrpGroupsUpdateTest() throws ApiException {
        Integer id = null;
        FHRPGroup fhRPGroup = null;
        FHRPGroup response = api.ipamFhrpGroupsUpdate(id, fhRPGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesBulkDeleteTest() throws ApiException {
        api.ipamIpAddressesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesBulkPartialUpdateTest() throws ApiException {
        WritableIPAddress writableIPAddress = null;
        IPAddress response = api.ipamIpAddressesBulkPartialUpdate(writableIPAddress);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesBulkUpdateTest() throws ApiException {
        WritableIPAddress writableIPAddress = null;
        IPAddress response = api.ipamIpAddressesBulkUpdate(writableIPAddress);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesCreateTest() throws ApiException {
        WritableIPAddress writableIPAddress = null;
        IPAddress response = api.ipamIpAddressesCreate(writableIPAddress);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamIpAddressesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesListTest() throws ApiException {
        String id = null;
        String dnsName = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        BigDecimal family = null;
        String parent = null;
        String address = null;
        BigDecimal maskLength = null;
        String vrfId = null;
        String vrf = null;
        String presentInVrfId = null;
        String presentInVrf = null;
        String device = null;
        String deviceId = null;
        String virtualMachine = null;
        String virtualMachineId = null;
        String _interface = null;
        String interfaceId = null;
        String vminterface = null;
        String vminterfaceId = null;
        String fhrpgroupId = null;
        String assignedToInterface = null;
        String status = null;
        String role = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String dnsNameN = null;
        String dnsNameIc = null;
        String dnsNameNic = null;
        String dnsNameIew = null;
        String dnsNameNiew = null;
        String dnsNameIsw = null;
        String dnsNameNisw = null;
        String dnsNameIe = null;
        String dnsNameNie = null;
        String dnsNameEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String vrfIdN = null;
        String vrfN = null;
        String interfaceN = null;
        String interfaceIdN = null;
        String vminterfaceN = null;
        String vminterfaceIdN = null;
        String fhrpgroupIdN = null;
        String statusN = null;
        String roleN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamIpAddressesList200Response response = api.ipamIpAddressesList(id, dnsName, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, parent, address, maskLength, vrfId, vrf, presentInVrfId, presentInVrf, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, fhrpgroupId, assignedToInterface, status, role, idN, idLte, idLt, idGte, idGt, dnsNameN, dnsNameIc, dnsNameNic, dnsNameIew, dnsNameNiew, dnsNameIsw, dnsNameNisw, dnsNameIe, dnsNameNie, dnsNameEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, vrfIdN, vrfN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, fhrpgroupIdN, statusN, roleN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableIPAddress writableIPAddress = null;
        IPAddress response = api.ipamIpAddressesPartialUpdate(id, writableIPAddress);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesReadTest() throws ApiException {
        Integer id = null;
        IPAddress response = api.ipamIpAddressesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesUpdateTest() throws ApiException {
        Integer id = null;
        WritableIPAddress writableIPAddress = null;
        IPAddress response = api.ipamIpAddressesUpdate(id, writableIPAddress);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpRangesAvailableIpsCreateTest() throws ApiException {
        Integer id = null;
        WritableAvailableIP writableAvailableIP = null;
        List<IPAddress> response = api.ipamIpRangesAvailableIpsCreate(id, writableAvailableIP);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpRangesAvailableIpsListTest() throws ApiException {
        Integer id = null;
        List<AvailableIP> response = api.ipamIpRangesAvailableIpsList(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpRangesBulkDeleteTest() throws ApiException {
        api.ipamIpRangesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpRangesBulkPartialUpdateTest() throws ApiException {
        WritableIPRange writableIPRange = null;
        IPRange response = api.ipamIpRangesBulkPartialUpdate(writableIPRange);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpRangesBulkUpdateTest() throws ApiException {
        WritableIPRange writableIPRange = null;
        IPRange response = api.ipamIpRangesBulkUpdate(writableIPRange);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpRangesCreateTest() throws ApiException {
        WritableIPRange writableIPRange = null;
        IPRange response = api.ipamIpRangesCreate(writableIPRange);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpRangesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamIpRangesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpRangesListTest() throws ApiException {
        String id = null;
        String description = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        BigDecimal family = null;
        String startAddress = null;
        String endAddress = null;
        String contains = null;
        String vrfId = null;
        String vrf = null;
        String roleId = null;
        String role = null;
        String status = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String vrfIdN = null;
        String vrfN = null;
        String roleIdN = null;
        String roleN = null;
        String statusN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamIpRangesList200Response response = api.ipamIpRangesList(id, description, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, family, startAddress, endAddress, contains, vrfId, vrf, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, vrfIdN, vrfN, roleIdN, roleN, statusN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpRangesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableIPRange writableIPRange = null;
        IPRange response = api.ipamIpRangesPartialUpdate(id, writableIPRange);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpRangesReadTest() throws ApiException {
        Integer id = null;
        IPRange response = api.ipamIpRangesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpRangesUpdateTest() throws ApiException {
        Integer id = null;
        WritableIPRange writableIPRange = null;
        IPRange response = api.ipamIpRangesUpdate(id, writableIPRange);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnTerminationsBulkDeleteTest() throws ApiException {
        api.ipamL2vpnTerminationsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnTerminationsBulkPartialUpdateTest() throws ApiException {
        WritableL2VPNTermination writableL2VPNTermination = null;
        L2VPNTermination response = api.ipamL2vpnTerminationsBulkPartialUpdate(writableL2VPNTermination);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnTerminationsBulkUpdateTest() throws ApiException {
        WritableL2VPNTermination writableL2VPNTermination = null;
        L2VPNTermination response = api.ipamL2vpnTerminationsBulkUpdate(writableL2VPNTermination);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnTerminationsCreateTest() throws ApiException {
        WritableL2VPNTermination writableL2VPNTermination = null;
        L2VPNTermination response = api.ipamL2vpnTerminationsCreate(writableL2VPNTermination);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnTerminationsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamL2vpnTerminationsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnTerminationsListTest() throws ApiException {
        String id = null;
        String assignedObjectTypeId = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String l2vpnId = null;
        String l2vpn = null;
        String region = null;
        String regionId = null;
        String site = null;
        String siteId = null;
        String device = null;
        String deviceId = null;
        String virtualMachine = null;
        String virtualMachineId = null;
        String _interface = null;
        String interfaceId = null;
        String vminterface = null;
        String vminterfaceId = null;
        String vlan = null;
        BigDecimal vlanVid = null;
        String vlanId = null;
        String assignedObjectType = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String assignedObjectTypeIdN = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String l2vpnIdN = null;
        String l2vpnN = null;
        String deviceN = null;
        String deviceIdN = null;
        String virtualMachineN = null;
        String virtualMachineIdN = null;
        String interfaceN = null;
        String interfaceIdN = null;
        String vminterfaceN = null;
        String vminterfaceIdN = null;
        String vlanN = null;
        BigDecimal vlanVidN = null;
        BigDecimal vlanVidLte = null;
        BigDecimal vlanVidLt = null;
        BigDecimal vlanVidGte = null;
        BigDecimal vlanVidGt = null;
        String vlanIdN = null;
        String assignedObjectTypeN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamL2vpnTerminationsList200Response response = api.ipamL2vpnTerminationsList(id, assignedObjectTypeId, created, lastUpdated, q, tag, l2vpnId, l2vpn, region, regionId, site, siteId, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, vlan, vlanVid, vlanId, assignedObjectType, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, l2vpnIdN, l2vpnN, deviceN, deviceIdN, virtualMachineN, virtualMachineIdN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, vlanN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, vlanIdN, assignedObjectTypeN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnTerminationsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableL2VPNTermination writableL2VPNTermination = null;
        L2VPNTermination response = api.ipamL2vpnTerminationsPartialUpdate(id, writableL2VPNTermination);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnTerminationsReadTest() throws ApiException {
        Integer id = null;
        L2VPNTermination response = api.ipamL2vpnTerminationsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnTerminationsUpdateTest() throws ApiException {
        Integer id = null;
        WritableL2VPNTermination writableL2VPNTermination = null;
        L2VPNTermination response = api.ipamL2vpnTerminationsUpdate(id, writableL2VPNTermination);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnsBulkDeleteTest() throws ApiException {
        api.ipamL2vpnsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnsBulkPartialUpdateTest() throws ApiException {
        WritableL2VPN writableL2VPN = null;
        L2VPN response = api.ipamL2vpnsBulkPartialUpdate(writableL2VPN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnsBulkUpdateTest() throws ApiException {
        WritableL2VPN writableL2VPN = null;
        L2VPN response = api.ipamL2vpnsBulkUpdate(writableL2VPN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnsCreateTest() throws ApiException {
        WritableL2VPN writableL2VPN = null;
        L2VPN response = api.ipamL2vpnsCreate(writableL2VPN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamL2vpnsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnsListTest() throws ApiException {
        String id = null;
        String identifier = null;
        String name = null;
        String slug = null;
        String type = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String importTargetId = null;
        String importTarget = null;
        String exportTargetId = null;
        String exportTarget = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String identifierN = null;
        String identifierLte = null;
        String identifierLt = null;
        String identifierGte = null;
        String identifierGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String typeN = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String importTargetIdN = null;
        String importTargetN = null;
        String exportTargetIdN = null;
        String exportTargetN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamL2vpnsList200Response response = api.ipamL2vpnsList(id, identifier, name, slug, type, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, identifierN, identifierLte, identifierLt, identifierGte, identifierGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, typeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableL2VPN writableL2VPN = null;
        L2VPN response = api.ipamL2vpnsPartialUpdate(id, writableL2VPN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnsReadTest() throws ApiException {
        Integer id = null;
        L2VPN response = api.ipamL2vpnsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamL2vpnsUpdateTest() throws ApiException {
        Integer id = null;
        WritableL2VPN writableL2VPN = null;
        L2VPN response = api.ipamL2vpnsUpdate(id, writableL2VPN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesAvailableIpsCreateTest() throws ApiException {
        Integer id = null;
        WritableAvailableIP writableAvailableIP = null;
        List<IPAddress> response = api.ipamPrefixesAvailableIpsCreate(id, writableAvailableIP);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesAvailableIpsListTest() throws ApiException {
        Integer id = null;
        List<AvailableIP> response = api.ipamPrefixesAvailableIpsList(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesAvailablePrefixesCreateTest() throws ApiException {
        Integer id = null;
        PrefixLength prefixLength = null;
        List<Prefix> response = api.ipamPrefixesAvailablePrefixesCreate(id, prefixLength);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesAvailablePrefixesListTest() throws ApiException {
        Integer id = null;
        List<AvailablePrefix> response = api.ipamPrefixesAvailablePrefixesList(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesBulkDeleteTest() throws ApiException {
        api.ipamPrefixesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesBulkPartialUpdateTest() throws ApiException {
        WritablePrefix writablePrefix = null;
        Prefix response = api.ipamPrefixesBulkPartialUpdate(writablePrefix);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesBulkUpdateTest() throws ApiException {
        WritablePrefix writablePrefix = null;
        Prefix response = api.ipamPrefixesBulkUpdate(writablePrefix);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesCreateTest() throws ApiException {
        WritablePrefix writablePrefix = null;
        Prefix response = api.ipamPrefixesCreate(writablePrefix);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamPrefixesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesListTest() throws ApiException {
        String id = null;
        String isPool = null;
        String markUtilized = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        BigDecimal family = null;
        String prefix = null;
        String within = null;
        String withinInclude = null;
        String contains = null;
        String depth = null;
        String children = null;
        String maskLength = null;
        BigDecimal maskLengthGte = null;
        BigDecimal maskLengthLte = null;
        String vrfId = null;
        String vrf = null;
        String presentInVrfId = null;
        String presentInVrf = null;
        String regionId = null;
        String region = null;
        String siteGroupId = null;
        String siteGroup = null;
        String siteId = null;
        String site = null;
        String vlanId = null;
        BigDecimal vlanVid = null;
        String roleId = null;
        String role = null;
        String status = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String depthN = null;
        String depthLte = null;
        String depthLt = null;
        String depthGte = null;
        String depthGt = null;
        String childrenN = null;
        String childrenLte = null;
        String childrenLt = null;
        String childrenGte = null;
        String childrenGt = null;
        String vrfIdN = null;
        String vrfN = null;
        String regionIdN = null;
        String regionN = null;
        String siteGroupIdN = null;
        String siteGroupN = null;
        String siteIdN = null;
        String siteN = null;
        String vlanIdN = null;
        BigDecimal vlanVidN = null;
        BigDecimal vlanVidLte = null;
        BigDecimal vlanVidLt = null;
        BigDecimal vlanVidGte = null;
        BigDecimal vlanVidGt = null;
        String roleIdN = null;
        String roleN = null;
        String statusN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamPrefixesList200Response response = api.ipamPrefixesList(id, isPool, markUtilized, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, within, withinInclude, contains, depth, children, maskLength, maskLengthGte, maskLengthLte, vrfId, vrf, presentInVrfId, presentInVrf, regionId, region, siteGroupId, siteGroup, siteId, site, vlanId, vlanVid, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, depthN, depthLte, depthLt, depthGte, depthGt, childrenN, childrenLte, childrenLt, childrenGte, childrenGt, vrfIdN, vrfN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, vlanIdN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, roleIdN, roleN, statusN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePrefix writablePrefix = null;
        Prefix response = api.ipamPrefixesPartialUpdate(id, writablePrefix);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesReadTest() throws ApiException {
        Integer id = null;
        Prefix response = api.ipamPrefixesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesUpdateTest() throws ApiException {
        Integer id = null;
        WritablePrefix writablePrefix = null;
        Prefix response = api.ipamPrefixesUpdate(id, writablePrefix);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsBulkDeleteTest() throws ApiException {
        api.ipamRirsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsBulkPartialUpdateTest() throws ApiException {
        RIR RIR = null;
        RIR response = api.ipamRirsBulkPartialUpdate(RIR);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsBulkUpdateTest() throws ApiException {
        RIR RIR = null;
        RIR response = api.ipamRirsBulkUpdate(RIR);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsCreateTest() throws ApiException {
        RIR RIR = null;
        RIR response = api.ipamRirsCreate(RIR);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamRirsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String isPrivate = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamRirsList200Response response = api.ipamRirsList(id, name, slug, isPrivate, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsPartialUpdateTest() throws ApiException {
        Integer id = null;
        RIR RIR = null;
        RIR response = api.ipamRirsPartialUpdate(id, RIR);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsReadTest() throws ApiException {
        Integer id = null;
        RIR response = api.ipamRirsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsUpdateTest() throws ApiException {
        Integer id = null;
        RIR RIR = null;
        RIR response = api.ipamRirsUpdate(id, RIR);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesBulkDeleteTest() throws ApiException {
        api.ipamRolesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesBulkPartialUpdateTest() throws ApiException {
        Role role = null;
        Role response = api.ipamRolesBulkPartialUpdate(role);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesBulkUpdateTest() throws ApiException {
        Role role = null;
        Role response = api.ipamRolesBulkUpdate(role);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesCreateTest() throws ApiException {
        Role role = null;
        Role response = api.ipamRolesCreate(role);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamRolesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamRolesList200Response response = api.ipamRolesList(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesPartialUpdateTest() throws ApiException {
        Integer id = null;
        Role role = null;
        Role response = api.ipamRolesPartialUpdate(id, role);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesReadTest() throws ApiException {
        Integer id = null;
        Role response = api.ipamRolesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesUpdateTest() throws ApiException {
        Integer id = null;
        Role role = null;
        Role response = api.ipamRolesUpdate(id, role);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRouteTargetsBulkDeleteTest() throws ApiException {
        api.ipamRouteTargetsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRouteTargetsBulkPartialUpdateTest() throws ApiException {
        WritableRouteTarget writableRouteTarget = null;
        RouteTarget response = api.ipamRouteTargetsBulkPartialUpdate(writableRouteTarget);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRouteTargetsBulkUpdateTest() throws ApiException {
        WritableRouteTarget writableRouteTarget = null;
        RouteTarget response = api.ipamRouteTargetsBulkUpdate(writableRouteTarget);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRouteTargetsCreateTest() throws ApiException {
        WritableRouteTarget writableRouteTarget = null;
        RouteTarget response = api.ipamRouteTargetsCreate(writableRouteTarget);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRouteTargetsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamRouteTargetsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRouteTargetsListTest() throws ApiException {
        String id = null;
        String name = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String importingVrfId = null;
        String importingVrf = null;
        String exportingVrfId = null;
        String exportingVrf = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String importingVrfIdN = null;
        String importingVrfN = null;
        String exportingVrfIdN = null;
        String exportingVrfN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamRouteTargetsList200Response response = api.ipamRouteTargetsList(id, name, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importingVrfId, importingVrf, exportingVrfId, exportingVrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importingVrfIdN, importingVrfN, exportingVrfIdN, exportingVrfN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRouteTargetsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableRouteTarget writableRouteTarget = null;
        RouteTarget response = api.ipamRouteTargetsPartialUpdate(id, writableRouteTarget);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRouteTargetsReadTest() throws ApiException {
        Integer id = null;
        RouteTarget response = api.ipamRouteTargetsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRouteTargetsUpdateTest() throws ApiException {
        Integer id = null;
        WritableRouteTarget writableRouteTarget = null;
        RouteTarget response = api.ipamRouteTargetsUpdate(id, writableRouteTarget);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServiceTemplatesBulkDeleteTest() throws ApiException {
        api.ipamServiceTemplatesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServiceTemplatesBulkPartialUpdateTest() throws ApiException {
        WritableServiceTemplate writableServiceTemplate = null;
        ServiceTemplate response = api.ipamServiceTemplatesBulkPartialUpdate(writableServiceTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServiceTemplatesBulkUpdateTest() throws ApiException {
        WritableServiceTemplate writableServiceTemplate = null;
        ServiceTemplate response = api.ipamServiceTemplatesBulkUpdate(writableServiceTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServiceTemplatesCreateTest() throws ApiException {
        WritableServiceTemplate writableServiceTemplate = null;
        ServiceTemplate response = api.ipamServiceTemplatesCreate(writableServiceTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServiceTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamServiceTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServiceTemplatesListTest() throws ApiException {
        String id = null;
        String name = null;
        String protocol = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        BigDecimal port = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String protocolN = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamServiceTemplatesList200Response response = api.ipamServiceTemplatesList(id, name, protocol, created, lastUpdated, q, tag, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, protocolN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServiceTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableServiceTemplate writableServiceTemplate = null;
        ServiceTemplate response = api.ipamServiceTemplatesPartialUpdate(id, writableServiceTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServiceTemplatesReadTest() throws ApiException {
        Integer id = null;
        ServiceTemplate response = api.ipamServiceTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServiceTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableServiceTemplate writableServiceTemplate = null;
        ServiceTemplate response = api.ipamServiceTemplatesUpdate(id, writableServiceTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesBulkDeleteTest() throws ApiException {
        api.ipamServicesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesBulkPartialUpdateTest() throws ApiException {
        WritableService writableService = null;
        Service response = api.ipamServicesBulkPartialUpdate(writableService);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesBulkUpdateTest() throws ApiException {
        WritableService writableService = null;
        Service response = api.ipamServicesBulkUpdate(writableService);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesCreateTest() throws ApiException {
        WritableService writableService = null;
        Service response = api.ipamServicesCreate(writableService);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamServicesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesListTest() throws ApiException {
        String id = null;
        String name = null;
        String protocol = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String deviceId = null;
        String device = null;
        String virtualMachineId = null;
        String virtualMachine = null;
        String ipaddressId = null;
        String ipaddress = null;
        BigDecimal port = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String protocolN = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String deviceIdN = null;
        String deviceN = null;
        String virtualMachineIdN = null;
        String virtualMachineN = null;
        String ipaddressIdN = null;
        String ipaddressN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamServicesList200Response response = api.ipamServicesList(id, name, protocol, description, created, lastUpdated, q, tag, deviceId, device, virtualMachineId, virtualMachine, ipaddressId, ipaddress, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, protocolN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, deviceIdN, deviceN, virtualMachineIdN, virtualMachineN, ipaddressIdN, ipaddressN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableService writableService = null;
        Service response = api.ipamServicesPartialUpdate(id, writableService);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesReadTest() throws ApiException {
        Integer id = null;
        Service response = api.ipamServicesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesUpdateTest() throws ApiException {
        Integer id = null;
        WritableService writableService = null;
        Service response = api.ipamServicesUpdate(id, writableService);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsAvailableVlansCreateTest() throws ApiException {
        Integer id = null;
        WritableCreateAvailableVLAN writableCreateAvailableVLAN = null;
        List<VLAN> response = api.ipamVlanGroupsAvailableVlansCreate(id, writableCreateAvailableVLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsAvailableVlansListTest() throws ApiException {
        Integer id = null;
        List<AvailableVLAN> response = api.ipamVlanGroupsAvailableVlansList(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsBulkDeleteTest() throws ApiException {
        api.ipamVlanGroupsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsBulkPartialUpdateTest() throws ApiException {
        VLANGroup vlANGroup = null;
        VLANGroup response = api.ipamVlanGroupsBulkPartialUpdate(vlANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsBulkUpdateTest() throws ApiException {
        VLANGroup vlANGroup = null;
        VLANGroup response = api.ipamVlanGroupsBulkUpdate(vlANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsCreateTest() throws ApiException {
        VLANGroup vlANGroup = null;
        VLANGroup response = api.ipamVlanGroupsCreate(vlANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamVlanGroupsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String minVid = null;
        String maxVid = null;
        String description = null;
        String scopeId = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String scopeType = null;
        BigDecimal region = null;
        BigDecimal sitegroup = null;
        BigDecimal site = null;
        BigDecimal location = null;
        BigDecimal rack = null;
        BigDecimal clustergroup = null;
        BigDecimal cluster = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String minVidN = null;
        String minVidLte = null;
        String minVidLt = null;
        String minVidGte = null;
        String minVidGt = null;
        String maxVidN = null;
        String maxVidLte = null;
        String maxVidLt = null;
        String maxVidGte = null;
        String maxVidGt = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String scopeIdN = null;
        String scopeIdLte = null;
        String scopeIdLt = null;
        String scopeIdGte = null;
        String scopeIdGt = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String scopeTypeN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamVlanGroupsList200Response response = api.ipamVlanGroupsList(id, name, slug, minVid, maxVid, description, scopeId, created, lastUpdated, q, tag, scopeType, region, sitegroup, site, location, rack, clustergroup, cluster, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, minVidN, minVidLte, minVidLt, minVidGte, minVidGt, maxVidN, maxVidLte, maxVidLt, maxVidGte, maxVidGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, scopeIdN, scopeIdLte, scopeIdLt, scopeIdGte, scopeIdGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, scopeTypeN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        VLANGroup vlANGroup = null;
        VLANGroup response = api.ipamVlanGroupsPartialUpdate(id, vlANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsReadTest() throws ApiException {
        Integer id = null;
        VLANGroup response = api.ipamVlanGroupsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsUpdateTest() throws ApiException {
        Integer id = null;
        VLANGroup vlANGroup = null;
        VLANGroup response = api.ipamVlanGroupsUpdate(id, vlANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansBulkDeleteTest() throws ApiException {
        api.ipamVlansBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansBulkPartialUpdateTest() throws ApiException {
        WritableVLAN writableVLAN = null;
        VLAN response = api.ipamVlansBulkPartialUpdate(writableVLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansBulkUpdateTest() throws ApiException {
        WritableVLAN writableVLAN = null;
        VLAN response = api.ipamVlansBulkUpdate(writableVLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansCreateTest() throws ApiException {
        WritableVLAN writableVLAN = null;
        VLAN response = api.ipamVlansCreate(writableVLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamVlansDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansListTest() throws ApiException {
        String id = null;
        String vid = null;
        String name = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String regionId = null;
        String region = null;
        String siteGroupId = null;
        String siteGroup = null;
        String siteId = null;
        String site = null;
        String groupId = null;
        String group = null;
        String roleId = null;
        String role = null;
        String status = null;
        String availableOnDevice = null;
        String availableOnVirtualmachine = null;
        String l2vpnId = null;
        String l2vpn = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String vidN = null;
        String vidLte = null;
        String vidLt = null;
        String vidGte = null;
        String vidGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String regionIdN = null;
        String regionN = null;
        String siteGroupIdN = null;
        String siteGroupN = null;
        String siteIdN = null;
        String siteN = null;
        String groupIdN = null;
        String groupN = null;
        String roleIdN = null;
        String roleN = null;
        String statusN = null;
        String l2vpnIdN = null;
        String l2vpnN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamVlansList200Response response = api.ipamVlansList(id, vid, name, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, roleId, role, status, availableOnDevice, availableOnVirtualmachine, l2vpnId, l2vpn, idN, idLte, idLt, idGte, idGt, vidN, vidLte, vidLt, vidGte, vidGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, roleIdN, roleN, statusN, l2vpnIdN, l2vpnN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableVLAN writableVLAN = null;
        VLAN response = api.ipamVlansPartialUpdate(id, writableVLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansReadTest() throws ApiException {
        Integer id = null;
        VLAN response = api.ipamVlansRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansUpdateTest() throws ApiException {
        Integer id = null;
        WritableVLAN writableVLAN = null;
        VLAN response = api.ipamVlansUpdate(id, writableVLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsBulkDeleteTest() throws ApiException {
        api.ipamVrfsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsBulkPartialUpdateTest() throws ApiException {
        WritableVRF writableVRF = null;
        VRF response = api.ipamVrfsBulkPartialUpdate(writableVRF);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsBulkUpdateTest() throws ApiException {
        WritableVRF writableVRF = null;
        VRF response = api.ipamVrfsBulkUpdate(writableVRF);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsCreateTest() throws ApiException {
        WritableVRF writableVRF = null;
        VRF response = api.ipamVrfsCreate(writableVRF);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamVrfsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsListTest() throws ApiException {
        String id = null;
        String name = null;
        String rd = null;
        String enforceUnique = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String importTargetId = null;
        String importTarget = null;
        String exportTargetId = null;
        String exportTarget = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String rdN = null;
        String rdIc = null;
        String rdNic = null;
        String rdIew = null;
        String rdNiew = null;
        String rdIsw = null;
        String rdNisw = null;
        String rdIe = null;
        String rdNie = null;
        String rdEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String importTargetIdN = null;
        String importTargetN = null;
        String exportTargetIdN = null;
        String exportTargetN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        IpamVrfsList200Response response = api.ipamVrfsList(id, name, rd, enforceUnique, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, rdN, rdIc, rdNic, rdIew, rdNiew, rdIsw, rdNisw, rdIe, rdNie, rdEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableVRF writableVRF = null;
        VRF response = api.ipamVrfsPartialUpdate(id, writableVRF);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsReadTest() throws ApiException {
        Integer id = null;
        VRF response = api.ipamVrfsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsUpdateTest() throws ApiException {
        Integer id = null;
        WritableVRF writableVRF = null;
        VRF response = api.ipamVrfsUpdate(id, writableVRF);
        // TODO: test validations
    }

}
