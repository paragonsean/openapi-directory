/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.ContactAssignment;
import org.openapitools.client.model.ContactGroup;
import org.openapitools.client.model.ContactRole;
import org.openapitools.client.model.TenancyContactAssignmentsList200Response;
import org.openapitools.client.model.TenancyContactGroupsList200Response;
import org.openapitools.client.model.TenancyContactRolesList200Response;
import org.openapitools.client.model.TenancyContactsList200Response;
import org.openapitools.client.model.TenancyTenantGroupsList200Response;
import org.openapitools.client.model.TenancyTenantsList200Response;
import org.openapitools.client.model.Tenant;
import org.openapitools.client.model.TenantGroup;
import org.openapitools.client.model.WritableContact;
import org.openapitools.client.model.WritableContactAssignment;
import org.openapitools.client.model.WritableContactGroup;
import org.openapitools.client.model.WritableTenant;
import org.openapitools.client.model.WritableTenantGroup;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TenancyApi
 */
@Disabled
public class TenancyApiTest {

    private final TenancyApi api = new TenancyApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactAssignmentsBulkDeleteTest() throws ApiException {
        api.tenancyContactAssignmentsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactAssignmentsBulkPartialUpdateTest() throws ApiException {
        WritableContactAssignment writableContactAssignment = null;
        ContactAssignment response = api.tenancyContactAssignmentsBulkPartialUpdate(writableContactAssignment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactAssignmentsBulkUpdateTest() throws ApiException {
        WritableContactAssignment writableContactAssignment = null;
        ContactAssignment response = api.tenancyContactAssignmentsBulkUpdate(writableContactAssignment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactAssignmentsCreateTest() throws ApiException {
        WritableContactAssignment writableContactAssignment = null;
        ContactAssignment response = api.tenancyContactAssignmentsCreate(writableContactAssignment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactAssignmentsDeleteTest() throws ApiException {
        Integer id = null;
        api.tenancyContactAssignmentsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactAssignmentsListTest() throws ApiException {
        String id = null;
        String contentTypeId = null;
        String objectId = null;
        String priority = null;
        String created = null;
        String lastUpdated = null;
        String contentType = null;
        String contactId = null;
        String roleId = null;
        String role = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String contentTypeIdN = null;
        String objectIdN = null;
        String objectIdLte = null;
        String objectIdLt = null;
        String objectIdGte = null;
        String objectIdGt = null;
        String priorityN = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String contentTypeN = null;
        String contactIdN = null;
        String roleIdN = null;
        String roleN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        TenancyContactAssignmentsList200Response response = api.tenancyContactAssignmentsList(id, contentTypeId, objectId, priority, created, lastUpdated, contentType, contactId, roleId, role, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, priorityN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, contentTypeN, contactIdN, roleIdN, roleN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactAssignmentsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableContactAssignment writableContactAssignment = null;
        ContactAssignment response = api.tenancyContactAssignmentsPartialUpdate(id, writableContactAssignment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactAssignmentsReadTest() throws ApiException {
        Integer id = null;
        ContactAssignment response = api.tenancyContactAssignmentsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactAssignmentsUpdateTest() throws ApiException {
        Integer id = null;
        WritableContactAssignment writableContactAssignment = null;
        ContactAssignment response = api.tenancyContactAssignmentsUpdate(id, writableContactAssignment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactGroupsBulkDeleteTest() throws ApiException {
        api.tenancyContactGroupsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactGroupsBulkPartialUpdateTest() throws ApiException {
        WritableContactGroup writableContactGroup = null;
        ContactGroup response = api.tenancyContactGroupsBulkPartialUpdate(writableContactGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactGroupsBulkUpdateTest() throws ApiException {
        WritableContactGroup writableContactGroup = null;
        ContactGroup response = api.tenancyContactGroupsBulkUpdate(writableContactGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactGroupsCreateTest() throws ApiException {
        WritableContactGroup writableContactGroup = null;
        ContactGroup response = api.tenancyContactGroupsCreate(writableContactGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.tenancyContactGroupsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactGroupsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String parentId = null;
        String parent = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String parentIdN = null;
        String parentN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        TenancyContactGroupsList200Response response = api.tenancyContactGroupsList(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableContactGroup writableContactGroup = null;
        ContactGroup response = api.tenancyContactGroupsPartialUpdate(id, writableContactGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactGroupsReadTest() throws ApiException {
        Integer id = null;
        ContactGroup response = api.tenancyContactGroupsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactGroupsUpdateTest() throws ApiException {
        Integer id = null;
        WritableContactGroup writableContactGroup = null;
        ContactGroup response = api.tenancyContactGroupsUpdate(id, writableContactGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactRolesBulkDeleteTest() throws ApiException {
        api.tenancyContactRolesBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactRolesBulkPartialUpdateTest() throws ApiException {
        ContactRole contactRole = null;
        ContactRole response = api.tenancyContactRolesBulkPartialUpdate(contactRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactRolesBulkUpdateTest() throws ApiException {
        ContactRole contactRole = null;
        ContactRole response = api.tenancyContactRolesBulkUpdate(contactRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactRolesCreateTest() throws ApiException {
        ContactRole contactRole = null;
        ContactRole response = api.tenancyContactRolesCreate(contactRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.tenancyContactRolesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactRolesListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        TenancyContactRolesList200Response response = api.tenancyContactRolesList(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactRolesPartialUpdateTest() throws ApiException {
        Integer id = null;
        ContactRole contactRole = null;
        ContactRole response = api.tenancyContactRolesPartialUpdate(id, contactRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactRolesReadTest() throws ApiException {
        Integer id = null;
        ContactRole response = api.tenancyContactRolesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactRolesUpdateTest() throws ApiException {
        Integer id = null;
        ContactRole contactRole = null;
        ContactRole response = api.tenancyContactRolesUpdate(id, contactRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactsBulkDeleteTest() throws ApiException {
        api.tenancyContactsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactsBulkPartialUpdateTest() throws ApiException {
        WritableContact writableContact = null;
        Contact response = api.tenancyContactsBulkPartialUpdate(writableContact);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactsBulkUpdateTest() throws ApiException {
        WritableContact writableContact = null;
        Contact response = api.tenancyContactsBulkUpdate(writableContact);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactsCreateTest() throws ApiException {
        WritableContact writableContact = null;
        Contact response = api.tenancyContactsCreate(writableContact);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactsDeleteTest() throws ApiException {
        Integer id = null;
        api.tenancyContactsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactsListTest() throws ApiException {
        String id = null;
        String name = null;
        String title = null;
        String phone = null;
        String email = null;
        String address = null;
        String link = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String groupId = null;
        String group = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String titleN = null;
        String titleIc = null;
        String titleNic = null;
        String titleIew = null;
        String titleNiew = null;
        String titleIsw = null;
        String titleNisw = null;
        String titleIe = null;
        String titleNie = null;
        String titleEmpty = null;
        String phoneN = null;
        String phoneIc = null;
        String phoneNic = null;
        String phoneIew = null;
        String phoneNiew = null;
        String phoneIsw = null;
        String phoneNisw = null;
        String phoneIe = null;
        String phoneNie = null;
        String phoneEmpty = null;
        String emailN = null;
        String emailIc = null;
        String emailNic = null;
        String emailIew = null;
        String emailNiew = null;
        String emailIsw = null;
        String emailNisw = null;
        String emailIe = null;
        String emailNie = null;
        String emailEmpty = null;
        String addressN = null;
        String addressIc = null;
        String addressNic = null;
        String addressIew = null;
        String addressNiew = null;
        String addressIsw = null;
        String addressNisw = null;
        String addressIe = null;
        String addressNie = null;
        String addressEmpty = null;
        String linkN = null;
        String linkIc = null;
        String linkNic = null;
        String linkIew = null;
        String linkNiew = null;
        String linkIsw = null;
        String linkNisw = null;
        String linkIe = null;
        String linkNie = null;
        String linkEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String groupIdN = null;
        String groupN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        TenancyContactsList200Response response = api.tenancyContactsList(id, name, title, phone, email, address, link, created, lastUpdated, q, tag, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, titleN, titleIc, titleNic, titleIew, titleNiew, titleIsw, titleNisw, titleIe, titleNie, titleEmpty, phoneN, phoneIc, phoneNic, phoneIew, phoneNiew, phoneIsw, phoneNisw, phoneIe, phoneNie, phoneEmpty, emailN, emailIc, emailNic, emailIew, emailNiew, emailIsw, emailNisw, emailIe, emailNie, emailEmpty, addressN, addressIc, addressNic, addressIew, addressNiew, addressIsw, addressNisw, addressIe, addressNie, addressEmpty, linkN, linkIc, linkNic, linkIew, linkNiew, linkIsw, linkNisw, linkIe, linkNie, linkEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, groupIdN, groupN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableContact writableContact = null;
        Contact response = api.tenancyContactsPartialUpdate(id, writableContact);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactsReadTest() throws ApiException {
        Integer id = null;
        Contact response = api.tenancyContactsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyContactsUpdateTest() throws ApiException {
        Integer id = null;
        WritableContact writableContact = null;
        Contact response = api.tenancyContactsUpdate(id, writableContact);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantGroupsBulkDeleteTest() throws ApiException {
        api.tenancyTenantGroupsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantGroupsBulkPartialUpdateTest() throws ApiException {
        WritableTenantGroup writableTenantGroup = null;
        TenantGroup response = api.tenancyTenantGroupsBulkPartialUpdate(writableTenantGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantGroupsBulkUpdateTest() throws ApiException {
        WritableTenantGroup writableTenantGroup = null;
        TenantGroup response = api.tenancyTenantGroupsBulkUpdate(writableTenantGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantGroupsCreateTest() throws ApiException {
        WritableTenantGroup writableTenantGroup = null;
        TenantGroup response = api.tenancyTenantGroupsCreate(writableTenantGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.tenancyTenantGroupsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantGroupsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String parentId = null;
        String parent = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String parentIdN = null;
        String parentN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        TenancyTenantGroupsList200Response response = api.tenancyTenantGroupsList(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableTenantGroup writableTenantGroup = null;
        TenantGroup response = api.tenancyTenantGroupsPartialUpdate(id, writableTenantGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantGroupsReadTest() throws ApiException {
        Integer id = null;
        TenantGroup response = api.tenancyTenantGroupsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantGroupsUpdateTest() throws ApiException {
        Integer id = null;
        WritableTenantGroup writableTenantGroup = null;
        TenantGroup response = api.tenancyTenantGroupsUpdate(id, writableTenantGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantsBulkDeleteTest() throws ApiException {
        api.tenancyTenantsBulkDelete();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantsBulkPartialUpdateTest() throws ApiException {
        WritableTenant writableTenant = null;
        Tenant response = api.tenancyTenantsBulkPartialUpdate(writableTenant);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantsBulkUpdateTest() throws ApiException {
        WritableTenant writableTenant = null;
        Tenant response = api.tenancyTenantsBulkUpdate(writableTenant);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantsCreateTest() throws ApiException {
        WritableTenant writableTenant = null;
        Tenant response = api.tenancyTenantsCreate(writableTenant);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantsDeleteTest() throws ApiException {
        Integer id = null;
        api.tenancyTenantsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String created = null;
        String lastUpdated = null;
        String q = null;
        String tag = null;
        String contact = null;
        String contactRole = null;
        String contactGroup = null;
        String groupId = null;
        String group = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String nameEmpty = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String slugEmpty = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String descriptionEmpty = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String lastUpdatedN = null;
        String lastUpdatedLte = null;
        String lastUpdatedLt = null;
        String lastUpdatedGte = null;
        String lastUpdatedGt = null;
        String tagN = null;
        String contactN = null;
        String contactRoleN = null;
        String contactGroupN = null;
        String groupIdN = null;
        String groupN = null;
        String ordering = null;
        Integer limit = null;
        Integer offset = null;
        TenancyTenantsList200Response response = api.tenancyTenantsList(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, groupIdN, groupN, ordering, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableTenant writableTenant = null;
        Tenant response = api.tenancyTenantsPartialUpdate(id, writableTenant);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantsReadTest() throws ApiException {
        Integer id = null;
        Tenant response = api.tenancyTenantsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenancyTenantsUpdateTest() throws ApiException {
        Integer id = null;
        WritableTenant writableTenant = null;
        Tenant response = api.tenancyTenantsUpdate(id, writableTenant);
        // TODO: test validations
    }

}
